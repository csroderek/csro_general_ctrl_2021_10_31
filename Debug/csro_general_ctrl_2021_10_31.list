
csro_general_ctrl_2021_10_31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e740  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  0800e8d0  0800e8d0  0001e8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef1c  0800ef1c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef1c  0800ef1c  0001ef1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef24  0800ef24  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef24  0800ef24  0001ef24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef28  0800ef28  0001ef28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800ef2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          0000ff54  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  200100a0  200100a0  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000362e0  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006719  00000000  00000000  0005645c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e70  00000000  00000000  0005cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c00  00000000  00000000  0005e9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cc61  00000000  00000000  000605e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c3c6  00000000  00000000  0008d249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f95ca  00000000  00000000  000b960f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b2bd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008174  00000000  00000000  001b2c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e8b8 	.word	0x0800e8b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0800e8b8 	.word	0x0800e8b8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ea2:	4b75      	ldr	r3, [pc, #468]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ea4:	4a75      	ldr	r2, [pc, #468]	; (800107c <MX_ADC1_Init+0x1ec>)
 8000ea6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea8:	4b73      	ldr	r3, [pc, #460]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000eaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb0:	4b71      	ldr	r3, [pc, #452]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eb6:	4b70      	ldr	r3, [pc, #448]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ebc:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b6d      	ldr	r3, [pc, #436]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eca:	4b6b      	ldr	r3, [pc, #428]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed0:	4b69      	ldr	r3, [pc, #420]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ed2:	4a6b      	ldr	r2, [pc, #428]	; (8001080 <MX_ADC1_Init+0x1f0>)
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed6:	4b68      	ldr	r3, [pc, #416]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000edc:	4b66      	ldr	r3, [pc, #408]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ede:	220d      	movs	r2, #13
 8000ee0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ee2:	4b65      	ldr	r3, [pc, #404]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eea:	4b63      	ldr	r3, [pc, #396]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef0:	4861      	ldr	r0, [pc, #388]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ef2:	f002 fd3b 	bl	800396c <HAL_ADC_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 fd66 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f00:	2305      	movs	r3, #5
 8000f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4859      	ldr	r0, [pc, #356]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000f12:	f002 fe9d 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f1c:	f000 fd56 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f20:	2306      	movs	r3, #6
 8000f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4852      	ldr	r0, [pc, #328]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000f2e:	f002 fe8f 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f38:	f000 fd48 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f40:	2303      	movs	r3, #3
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	484b      	ldr	r0, [pc, #300]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000f4a:	f002 fe81 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f54:	f000 fd3a 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f58:	230a      	movs	r3, #10
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4844      	ldr	r0, [pc, #272]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000f66:	f002 fe73 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f70:	f000 fd2c 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f74:	230c      	movs	r3, #12
 8000f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	483d      	ldr	r0, [pc, #244]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000f82:	f002 fe65 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000f8c:	f000 fd1e 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f90:	230d      	movs	r3, #13
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000f94:	2306      	movs	r3, #6
 8000f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4836      	ldr	r0, [pc, #216]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000f9e:	f002 fe57 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000fa8:	f000 fd10 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	482f      	ldr	r0, [pc, #188]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000fba:	f002 fe49 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000fc4:	f000 fd02 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4828      	ldr	r0, [pc, #160]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000fd6:	f002 fe3b 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000fe0:	f000 fcf4 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000fe8:	2309      	movs	r3, #9
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4821      	ldr	r0, [pc, #132]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8000ff2:	f002 fe2d 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000ffc:	f000 fce6 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001000:	2309      	movs	r3, #9
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001004:	230a      	movs	r3, #10
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	481a      	ldr	r0, [pc, #104]	; (8001078 <MX_ADC1_Init+0x1e8>)
 800100e:	f002 fe1f 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001018:	f000 fcd8 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800101c:	2310      	movs	r3, #16
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001020:	230b      	movs	r3, #11
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_ADC1_Init+0x1e8>)
 800102a:	f002 fe11 	bl	8003c50 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001034:	f000 fcca 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001038:	2311      	movs	r3, #17
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800103c:	230c      	movs	r3, #12
 800103e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8001046:	f002 fe03 	bl	8003c50 <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001050:	f000 fcbc 	bl	80019cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001054:	2312      	movs	r3, #18
 8001056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001058:	230d      	movs	r3, #13
 800105a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_ADC1_Init+0x1e8>)
 8001062:	f002 fdf5 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800106c:	f000 fcae 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000af40 	.word	0x2000af40
 800107c:	40012000 	.word	0x40012000
 8001080:	0f000001 	.word	0x0f000001

08001084 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a49      	ldr	r2, [pc, #292]	; (80011c8 <HAL_ADC_MspInit+0x144>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	f040 808c 	bne.w	80011c0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	4b47      	ldr	r3, [pc, #284]	; (80011cc <HAL_ADC_MspInit+0x148>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	4a46      	ldr	r2, [pc, #280]	; (80011cc <HAL_ADC_MspInit+0x148>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	6453      	str	r3, [r2, #68]	; 0x44
 80010b8:	4b44      	ldr	r3, [pc, #272]	; (80011cc <HAL_ADC_MspInit+0x148>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <HAL_ADC_MspInit+0x148>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a3f      	ldr	r2, [pc, #252]	; (80011cc <HAL_ADC_MspInit+0x148>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HAL_ADC_MspInit+0x148>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	4b39      	ldr	r3, [pc, #228]	; (80011cc <HAL_ADC_MspInit+0x148>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a38      	ldr	r2, [pc, #224]	; (80011cc <HAL_ADC_MspInit+0x148>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_ADC_MspInit+0x148>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	4b32      	ldr	r3, [pc, #200]	; (80011cc <HAL_ADC_MspInit+0x148>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a31      	ldr	r2, [pc, #196]	; (80011cc <HAL_ADC_MspInit+0x148>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_ADC_MspInit+0x148>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = NTC_01_Pin|NTC_02_Pin|NTC_03_Pin;
 8001118:	230d      	movs	r3, #13
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111c:	2303      	movs	r3, #3
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4829      	ldr	r0, [pc, #164]	; (80011d0 <HAL_ADC_MspInit+0x14c>)
 800112c:	f003 fd90 	bl	8004c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_04_Pin|NTC_05_Pin|NTC_06_Pin|DP_01_Pin
 8001130:	2379      	movs	r3, #121	; 0x79
 8001132:	61fb      	str	r3, [r7, #28]
                          |DP_02_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4824      	ldr	r0, [pc, #144]	; (80011d4 <HAL_ADC_MspInit+0x150>)
 8001144:	f003 fd84 	bl	8004c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DP_03_Pin|VAL_FB_Pin;
 8001148:	2303      	movs	r3, #3
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114c:	2303      	movs	r3, #3
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	481f      	ldr	r0, [pc, #124]	; (80011d8 <HAL_ADC_MspInit+0x154>)
 800115c:	f003 fd78 	bl	8004c50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <HAL_ADC_MspInit+0x158>)
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_ADC_MspInit+0x15c>)
 8001164:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_ADC_MspInit+0x158>)
 8001168:	2200      	movs	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_ADC_MspInit+0x158>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_ADC_MspInit+0x158>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_ADC_MspInit+0x158>)
 800117a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_ADC_MspInit+0x158>)
 8001182:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001186:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_ADC_MspInit+0x158>)
 800118a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_ADC_MspInit+0x158>)
 8001192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001196:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_ADC_MspInit+0x158>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_ADC_MspInit+0x158>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <HAL_ADC_MspInit+0x158>)
 80011a6:	f003 f8d5 	bl	8004354 <HAL_DMA_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80011b0:	f000 fc0c 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_ADC_MspInit+0x158>)
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_ADC_MspInit+0x158>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3730      	adds	r7, #48	; 0x30
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	2000af88 	.word	0x2000af88
 80011e0:	40026410 	.word	0x40026410

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <MX_DMA_Init+0xd8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a32      	ldr	r2, [pc, #200]	; (80012bc <MX_DMA_Init+0xd8>)
 80011f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <MX_DMA_Init+0xd8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <MX_DMA_Init+0xd8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a2b      	ldr	r2, [pc, #172]	; (80012bc <MX_DMA_Init+0xd8>)
 8001210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <MX_DMA_Init+0xd8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2105      	movs	r1, #5
 8001226:	200c      	movs	r0, #12
 8001228:	f003 f86a 	bl	8004300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800122c:	200c      	movs	r0, #12
 800122e:	f003 f883 	bl	8004338 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2105      	movs	r1, #5
 8001236:	200e      	movs	r0, #14
 8001238:	f003 f862 	bl	8004300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800123c:	200e      	movs	r0, #14
 800123e:	f003 f87b 	bl	8004338 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2105      	movs	r1, #5
 8001246:	2010      	movs	r0, #16
 8001248:	f003 f85a 	bl	8004300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800124c:	2010      	movs	r0, #16
 800124e:	f003 f873 	bl	8004338 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	2011      	movs	r0, #17
 8001258:	f003 f852 	bl	8004300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800125c:	2011      	movs	r0, #17
 800125e:	f003 f86b 	bl	8004338 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	2038      	movs	r0, #56	; 0x38
 8001268:	f003 f84a 	bl	8004300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800126c:	2038      	movs	r0, #56	; 0x38
 800126e:	f003 f863 	bl	8004338 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2039      	movs	r0, #57	; 0x39
 8001278:	f003 f842 	bl	8004300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800127c:	2039      	movs	r0, #57	; 0x39
 800127e:	f003 f85b 	bl	8004338 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	203a      	movs	r0, #58	; 0x3a
 8001288:	f003 f83a 	bl	8004300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800128c:	203a      	movs	r0, #58	; 0x3a
 800128e:	f003 f853 	bl	8004338 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2045      	movs	r0, #69	; 0x45
 8001298:	f003 f832 	bl	8004300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800129c:	2045      	movs	r0, #69	; 0x45
 800129e:	f003 f84b 	bl	8004338 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2105      	movs	r1, #5
 80012a6:	2046      	movs	r0, #70	; 0x46
 80012a8:	f003 f82a 	bl	8004300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012ac:	2046      	movs	r0, #70	; 0x46
 80012ae:	f003 f843 	bl	8004338 <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  fnd_com_modbus_rtu_init();
 80012c4:	f001 fac0 	bl	8002848 <fnd_com_modbus_rtu_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80012c8:	4a24      	ldr	r2, [pc, #144]	; (800135c <MX_FREERTOS_Init+0x9c>)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4824      	ldr	r0, [pc, #144]	; (8001360 <MX_FREERTOS_Init+0xa0>)
 80012ce:	f008 fa05 	bl	80096dc <osThreadNew>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a23      	ldr	r2, [pc, #140]	; (8001364 <MX_FREERTOS_Init+0xa4>)
 80012d6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80012d8:	4a23      	ldr	r2, [pc, #140]	; (8001368 <MX_FREERTOS_Init+0xa8>)
 80012da:	2100      	movs	r1, #0
 80012dc:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_FREERTOS_Init+0xac>)
 80012de:	f008 f9fd 	bl	80096dc <osThreadNew>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <MX_FREERTOS_Init+0xb0>)
 80012e6:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80012e8:	4a22      	ldr	r2, [pc, #136]	; (8001374 <MX_FREERTOS_Init+0xb4>)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4822      	ldr	r0, [pc, #136]	; (8001378 <MX_FREERTOS_Init+0xb8>)
 80012ee:	f008 f9f5 	bl	80096dc <osThreadNew>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <MX_FREERTOS_Init+0xbc>)
 80012f6:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <MX_FREERTOS_Init+0xc0>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4821      	ldr	r0, [pc, #132]	; (8001384 <MX_FREERTOS_Init+0xc4>)
 80012fe:	f008 f9ed 	bl	80096dc <osThreadNew>
 8001302:	4603      	mov	r3, r0
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <MX_FREERTOS_Init+0xc8>)
 8001306:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8001308:	4a20      	ldr	r2, [pc, #128]	; (800138c <MX_FREERTOS_Init+0xcc>)
 800130a:	2100      	movs	r1, #0
 800130c:	4820      	ldr	r0, [pc, #128]	; (8001390 <MX_FREERTOS_Init+0xd0>)
 800130e:	f008 f9e5 	bl	80096dc <osThreadNew>
 8001312:	4603      	mov	r3, r0
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <MX_FREERTOS_Init+0xd4>)
 8001316:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 8001318:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <MX_FREERTOS_Init+0xd8>)
 800131a:	2100      	movs	r1, #0
 800131c:	481f      	ldr	r0, [pc, #124]	; (800139c <MX_FREERTOS_Init+0xdc>)
 800131e:	f008 f9dd 	bl	80096dc <osThreadNew>
 8001322:	4603      	mov	r3, r0
 8001324:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <MX_FREERTOS_Init+0xe0>)
 8001326:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 8001328:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <MX_FREERTOS_Init+0xe4>)
 800132a:	2100      	movs	r1, #0
 800132c:	481e      	ldr	r0, [pc, #120]	; (80013a8 <MX_FREERTOS_Init+0xe8>)
 800132e:	f008 f9d5 	bl	80096dc <osThreadNew>
 8001332:	4603      	mov	r3, r0
 8001334:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <MX_FREERTOS_Init+0xec>)
 8001336:	6013      	str	r3, [r2, #0]

  /* creation of myTask08 */
  myTask08Handle = osThreadNew(StartTask08, NULL, &myTask08_attributes);
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <MX_FREERTOS_Init+0xf0>)
 800133a:	2100      	movs	r1, #0
 800133c:	481d      	ldr	r0, [pc, #116]	; (80013b4 <MX_FREERTOS_Init+0xf4>)
 800133e:	f008 f9cd 	bl	80096dc <osThreadNew>
 8001342:	4603      	mov	r3, r0
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <MX_FREERTOS_Init+0xf8>)
 8001346:	6013      	str	r3, [r2, #0]

  /* creation of myTask09 */
  myTask09Handle = osThreadNew(StartTask09, NULL, &myTask09_attributes);
 8001348:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_FREERTOS_Init+0xfc>)
 800134a:	2100      	movs	r1, #0
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <MX_FREERTOS_Init+0x100>)
 800134e:	f008 f9c5 	bl	80096dc <osThreadNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <MX_FREERTOS_Init+0x104>)
 8001356:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0800e954 	.word	0x0800e954
 8001360:	080013c9 	.word	0x080013c9
 8001364:	2000b04c 	.word	0x2000b04c
 8001368:	0800e978 	.word	0x0800e978
 800136c:	080013db 	.word	0x080013db
 8001370:	2000b030 	.word	0x2000b030
 8001374:	0800e99c 	.word	0x0800e99c
 8001378:	080013e9 	.word	0x080013e9
 800137c:	2000b044 	.word	0x2000b044
 8001380:	0800e9c0 	.word	0x0800e9c0
 8001384:	080013f7 	.word	0x080013f7
 8001388:	2000affc 	.word	0x2000affc
 800138c:	0800e9e4 	.word	0x0800e9e4
 8001390:	0800140d 	.word	0x0800140d
 8001394:	2000aff8 	.word	0x2000aff8
 8001398:	0800ea08 	.word	0x0800ea08
 800139c:	08001423 	.word	0x08001423
 80013a0:	2000b058 	.word	0x2000b058
 80013a4:	0800ea2c 	.word	0x0800ea2c
 80013a8:	08001437 	.word	0x08001437
 80013ac:	2000b048 	.word	0x2000b048
 80013b0:	0800ea50 	.word	0x0800ea50
 80013b4:	0800145b 	.word	0x0800145b
 80013b8:	2000b000 	.word	0x2000b000
 80013bc:	0800ea74 	.word	0x0800ea74
 80013c0:	08001471 	.word	0x08001471
 80013c4:	2000b054 	.word	0x2000b054

080013c8 <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  // MX_LWIP_Init();
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 80013d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d4:	f008 fa14 	bl	8009800 <osDelay>
 80013d8:	e7fa      	b.n	80013d0 <StartTask01+0x8>

080013da <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave1_wait();
 80013e2:	f001 fad3 	bl	800298c <fnd_com_modbus_rtu_slave1_wait>
 80013e6:	e7fc      	b.n	80013e2 <StartTask02+0x8>

080013e8 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave2_wait();
 80013f0:	f001 fad6 	bl	80029a0 <fnd_com_modbus_rtu_slave2_wait>
 80013f4:	e7fc      	b.n	80013f0 <StartTask03+0x8>

080013f6 <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(500);
 80013fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001402:	f008 f9fd 	bl	8009800 <osDelay>
    fnd_com_modbus_rtu_master1_read_write();
 8001406:	f001 fad5 	bl	80029b4 <fnd_com_modbus_rtu_master1_read_write>
    osDelay(500);
 800140a:	e7f8      	b.n	80013fe <StartTask04+0x8>

0800140c <StartTask05>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(500);
 8001414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001418:	f008 f9f2 	bl	8009800 <osDelay>
    fnd_com_modbus_rtu_master2_read_write();
 800141c:	f001 faf2 	bl	8002a04 <fnd_com_modbus_rtu_master2_read_write>
    osDelay(500);
 8001420:	e7f8      	b.n	8001414 <StartTask05+0x8>

08001422 <StartTask06>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(10);
 800142a:	200a      	movs	r0, #10
 800142c:	f008 f9e8 	bl	8009800 <osDelay>
    fnd_output_stepper_10ms_tick();
 8001430:	f002 fa42 	bl	80038b8 <fnd_output_stepper_10ms_tick>
    osDelay(10);
 8001434:	e7f9      	b.n	800142a <StartTask06+0x8>

08001436 <StartTask07>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  fnd_input_init();
 800143e:	f001 fb41 	bl	8002ac4 <fnd_input_init>
  fnd_output_init();
 8001442:	f001 fed9 	bl	80031f8 <fnd_output_init>
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8001446:	2064      	movs	r0, #100	; 0x64
 8001448:	f008 f9da 	bl	8009800 <osDelay>
    fnd_input_update();
 800144c:	f001 fb44 	bl	8002ad8 <fnd_input_update>
    csro_ctrl_step();
 8001450:	f00c fefa 	bl	800e248 <csro_ctrl_step>
    fnd_output_update();
 8001454:	f001 fed8 	bl	8003208 <fnd_output_update>
    osDelay(100);
 8001458:	e7f5      	b.n	8001446 <StartTask07+0x10>

0800145a <StartTask08>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */

  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f008 f9cc 	bl	8009800 <osDelay>
    fnd_input_i2c_read_sht();
 8001468:	f001 fc54 	bl	8002d14 <fnd_input_i2c_read_sht>
    osDelay(100);
 800146c:	e7f9      	b.n	8001462 <StartTask08+0x8>
	...

08001470 <StartTask09>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask09 */
void StartTask09(void *argument)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask09 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(200);
 8001478:	20c8      	movs	r0, #200	; 0xc8
 800147a:	f008 f9c1 	bl	8009800 <osDelay>
    HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 800147e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <StartTask09+0x1c>)
 8001484:	f003 fdb1 	bl	8004fea <HAL_GPIO_TogglePin>
    osDelay(200);
 8001488:	e7f6      	b.n	8001478 <StartTask09+0x8>
 800148a:	bf00      	nop
 800148c:	40020800 	.word	0x40020800

08001490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b73      	ldr	r3, [pc, #460]	; (8001678 <MX_GPIO_Init+0x1e8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a72      	ldr	r2, [pc, #456]	; (8001678 <MX_GPIO_Init+0x1e8>)
 80014b0:	f043 0310 	orr.w	r3, r3, #16
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b70      	ldr	r3, [pc, #448]	; (8001678 <MX_GPIO_Init+0x1e8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b6c      	ldr	r3, [pc, #432]	; (8001678 <MX_GPIO_Init+0x1e8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a6b      	ldr	r2, [pc, #428]	; (8001678 <MX_GPIO_Init+0x1e8>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b69      	ldr	r3, [pc, #420]	; (8001678 <MX_GPIO_Init+0x1e8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b65      	ldr	r3, [pc, #404]	; (8001678 <MX_GPIO_Init+0x1e8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a64      	ldr	r2, [pc, #400]	; (8001678 <MX_GPIO_Init+0x1e8>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b62      	ldr	r3, [pc, #392]	; (8001678 <MX_GPIO_Init+0x1e8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b5e      	ldr	r3, [pc, #376]	; (8001678 <MX_GPIO_Init+0x1e8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a5d      	ldr	r2, [pc, #372]	; (8001678 <MX_GPIO_Init+0x1e8>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <MX_GPIO_Init+0x1e8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b57      	ldr	r3, [pc, #348]	; (8001678 <MX_GPIO_Init+0x1e8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a56      	ldr	r2, [pc, #344]	; (8001678 <MX_GPIO_Init+0x1e8>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b54      	ldr	r3, [pc, #336]	; (8001678 <MX_GPIO_Init+0x1e8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RLY_05_Pin|RLY_06_Pin|ID_LD_Pin|ID_CLK_Pin
 8001532:	2200      	movs	r2, #0
 8001534:	f24f 51ef 	movw	r1, #62959	; 0xf5ef
 8001538:	4850      	ldr	r0, [pc, #320]	; (800167c <MX_GPIO_Init+0x1ec>)
 800153a:	f003 fd3d 	bl	8004fb8 <HAL_GPIO_WritePin>
                          |STEP_B4_Pin|STEP_B3_Pin|STEP_B2_Pin|STEP_B1_Pin
                          |STEP_A8_Pin|STEP_A7_Pin|STEP_A6_Pin|RLY_03_Pin
                          |RLY_04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_B8_Pin|STEP_B7_Pin|STEP_B6_Pin|LED_01_Pin
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 417d 	mov.w	r1, #64768	; 0xfd00
 8001544:	484e      	ldr	r0, [pc, #312]	; (8001680 <MX_GPIO_Init+0x1f0>)
 8001546:	f003 fd37 	bl	8004fb8 <HAL_GPIO_WritePin>
                          |DS1302_CLK_Pin|DS1302_IO_Pin|DS1302_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_B5_Pin|ETH_RSTN_Pin|STEP_A5_Pin|RS485_EN3_Pin
 800154a:	2200      	movs	r2, #0
 800154c:	f24c 7104 	movw	r1, #50948	; 0xc704
 8001550:	484c      	ldr	r0, [pc, #304]	; (8001684 <MX_GPIO_Init+0x1f4>)
 8001552:	f003 fd31 	bl	8004fb8 <HAL_GPIO_WritePin>
                          |RLY_01_Pin|RLY_02_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP_A4_Pin|STEP_A3_Pin|STEP_A2_Pin|STEP_A1_Pin
 8001556:	2200      	movs	r2, #0
 8001558:	f64b 4110 	movw	r1, #48144	; 0xbc10
 800155c:	484a      	ldr	r0, [pc, #296]	; (8001688 <MX_GPIO_Init+0x1f8>)
 800155e:	f003 fd2b 	bl	8004fb8 <HAL_GPIO_WritePin>
                          |RS485_EN4_Pin|RS485_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN1_GPIO_Port, RS485_EN1_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001568:	4848      	ldr	r0, [pc, #288]	; (800168c <MX_GPIO_Init+0x1fc>)
 800156a:	f003 fd25 	bl	8004fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = RLY_05_Pin|RLY_06_Pin|ID_LD_Pin|ID_CLK_Pin
 800156e:	f24f 53ef 	movw	r3, #62959	; 0xf5ef
 8001572:	617b      	str	r3, [r7, #20]
                          |STEP_B4_Pin|STEP_B3_Pin|STEP_B2_Pin|STEP_B1_Pin
                          |STEP_A8_Pin|STEP_A7_Pin|STEP_A6_Pin|RLY_03_Pin
                          |RLY_04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	483d      	ldr	r0, [pc, #244]	; (800167c <MX_GPIO_Init+0x1ec>)
 8001588:	f003 fb62 	bl	8004c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ID_DATA_Pin;
 800158c:	2310      	movs	r3, #16
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ID_DATA_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4837      	ldr	r0, [pc, #220]	; (800167c <MX_GPIO_Init+0x1ec>)
 80015a0:	f003 fb56 	bl	8004c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_B8_Pin|STEP_B7_Pin|STEP_B6_Pin|LED_01_Pin
 80015a4:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 80015a8:	617b      	str	r3, [r7, #20]
                          |DS1302_CLK_Pin|DS1302_IO_Pin|DS1302_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4830      	ldr	r0, [pc, #192]	; (8001680 <MX_GPIO_Init+0x1f0>)
 80015be:	f003 fb47 	bl	8004c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = STEP_B5_Pin|ETH_RSTN_Pin|STEP_A5_Pin|RLY_01_Pin
 80015c2:	f244 7304 	movw	r3, #18180	; 0x4704
 80015c6:	617b      	str	r3, [r7, #20]
                          |RLY_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	482a      	ldr	r0, [pc, #168]	; (8001684 <MX_GPIO_Init+0x1f4>)
 80015dc:	f003 fb38 	bl	8004c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_EN3_Pin;
 80015e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN3_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4822      	ldr	r0, [pc, #136]	; (8001684 <MX_GPIO_Init+0x1f4>)
 80015fa:	f003 fb29 	bl	8004c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STEP_A4_Pin|STEP_A3_Pin|STEP_A2_Pin|STEP_A1_Pin;
 80015fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	481c      	ldr	r0, [pc, #112]	; (8001688 <MX_GPIO_Init+0x1f8>)
 8001618:	f003 fb1a 	bl	8004c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RS485_EN4_Pin|RS485_EN2_Pin;
 800161c:	f248 0310 	movw	r3, #32784	; 0x8010
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001626:	2302      	movs	r3, #2
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4814      	ldr	r0, [pc, #80]	; (8001688 <MX_GPIO_Init+0x1f8>)
 8001636:	f003 fb0b 	bl	8004c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_EN1_Pin;
 800163a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001644:	2302      	movs	r3, #2
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN1_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	480e      	ldr	r0, [pc, #56]	; (800168c <MX_GPIO_Init+0x1fc>)
 8001654:	f003 fafc 	bl	8004c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_04_Pin|DI_03_Pin|DI_02_Pin|DI_01_Pin;
 8001658:	230f      	movs	r3, #15
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <MX_GPIO_Init+0x1f8>)
 800166c:	f003 faf0 	bl	8004c50 <HAL_GPIO_Init>

}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	40021000 	.word	0x40021000
 8001680:	40020800 	.word	0x40020800
 8001684:	40020400 	.word	0x40020400
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40020000 	.word	0x40020000

08001690 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_I2C1_Init+0x50>)
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <MX_I2C1_Init+0x54>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_I2C1_Init+0x50>)
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MX_I2C1_Init+0x58>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016ce:	f003 fca7 	bl	8005020 <HAL_I2C_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d8:	f000 f978 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000b0c0 	.word	0x2000b0c0
 80016e4:	40005400 	.word	0x40005400
 80016e8:	000186a0 	.word	0x000186a0

080016ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_I2C3_Init+0x50>)
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <MX_I2C3_Init+0x54>)
 80016f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_I2C3_Init+0x50>)
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_I2C3_Init+0x58>)
 80016fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_I2C3_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_I2C3_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_I2C3_Init+0x50>)
 800170a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <MX_I2C3_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_I2C3_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <MX_I2C3_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_I2C3_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_I2C3_Init+0x50>)
 800172a:	f003 fc79 	bl	8005020 <HAL_I2C_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001734:	f000 f94a 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000b06c 	.word	0x2000b06c
 8001740:	40005c00 	.word	0x40005c00
 8001744:	000186a0 	.word	0x000186a0

08001748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a42      	ldr	r2, [pc, #264]	; (8001870 <HAL_I2C_MspInit+0x128>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12c      	bne.n	80017c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
 800176e:	4b41      	ldr	r3, [pc, #260]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a40      	ldr	r2, [pc, #256]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TH_SCL1_Pin|TH_SDA1_Pin;
 8001786:	23c0      	movs	r3, #192	; 0xc0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178a:	2312      	movs	r3, #18
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001796:	2304      	movs	r3, #4
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4619      	mov	r1, r3
 80017a0:	4835      	ldr	r0, [pc, #212]	; (8001878 <HAL_I2C_MspInit+0x130>)
 80017a2:	f003 fa55 	bl	8004c50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	4b32      	ldr	r3, [pc, #200]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 80017b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80017c2:	e050      	b.n	8001866 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a2c      	ldr	r2, [pc, #176]	; (800187c <HAL_I2C_MspInit+0x134>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d14b      	bne.n	8001866 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a20      	ldr	r2, [pc, #128]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TH_SDA2_Pin;
 8001806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180c:	2312      	movs	r3, #18
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001818:	2304      	movs	r3, #4
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TH_SDA2_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	4817      	ldr	r0, [pc, #92]	; (8001880 <HAL_I2C_MspInit+0x138>)
 8001824:	f003 fa14 	bl	8004c50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TH_SCL2_Pin;
 8001828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182e:	2312      	movs	r3, #18
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800183a:	2304      	movs	r3, #4
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TH_SCL2_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	480f      	ldr	r0, [pc, #60]	; (8001884 <HAL_I2C_MspInit+0x13c>)
 8001846:	f003 fa03 	bl	8004c50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 8001854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_I2C_MspInit+0x12c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
}
 8001866:	bf00      	nop
 8001868:	3730      	adds	r7, #48	; 0x30
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40005400 	.word	0x40005400
 8001874:	40023800 	.word	0x40023800
 8001878:	40020400 	.word	0x40020400
 800187c:	40005c00 	.word	0x40005c00
 8001880:	40020800 	.word	0x40020800
 8001884:	40020000 	.word	0x40020000

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188c:	f002 f82c 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001890:	f000 f820 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001894:	f7ff fdfc 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 8001898:	f7ff fca4 	bl	80011e4 <MX_DMA_Init>
  MX_ADC1_Init();
 800189c:	f7ff faf8 	bl	8000e90 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80018a0:	f000 fc5a 	bl	8002158 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018a4:	f000 fc82 	bl	80021ac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80018a8:	f000 fcaa 	bl	8002200 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80018ac:	f000 fcd2 	bl	8002254 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80018b0:	f7ff feee 	bl	8001690 <MX_I2C1_Init>
  MX_I2C3_Init();
 80018b4:	f7ff ff1a 	bl	80016ec <MX_I2C3_Init>
  MX_TIM1_Init();
 80018b8:	f000 f9da 	bl	8001c70 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018bc:	f000 fa88 	bl	8001dd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018c0:	f000 fafc 	bl	8001ebc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80018c4:	f007 fec0 	bl	8009648 <osKernelInitialize>
  MX_FREERTOS_Init();
 80018c8:	f7ff fcfa 	bl	80012c0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80018cc:	f007 fee0 	bl	8009690 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <main+0x48>
	...

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	; 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2230      	movs	r2, #48	; 0x30
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00c fd06 	bl	800e2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <SystemClock_Config+0xcc>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <SystemClock_Config+0xcc>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <SystemClock_Config+0xd0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <SystemClock_Config+0xd0>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <SystemClock_Config+0xd0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001934:	2301      	movs	r3, #1
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001938:	2310      	movs	r3, #16
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193c:	2302      	movs	r3, #2
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001940:	2300      	movs	r3, #0
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001944:	2308      	movs	r3, #8
 8001946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001948:	23a8      	movs	r3, #168	; 0xa8
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800194c:	2302      	movs	r3, #2
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001950:	2304      	movs	r3, #4
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	4618      	mov	r0, r3
 800195a:	f004 fc25 	bl	80061a8 <HAL_RCC_OscConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001964:	f000 f832 	bl	80019cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001968:	230f      	movs	r3, #15
 800196a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196c:	2302      	movs	r3, #2
 800196e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001974:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800197a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2105      	movs	r1, #5
 8001986:	4618      	mov	r0, r3
 8001988:	f004 fe86 	bl	8006698 <HAL_RCC_ClockConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001992:	f000 f81b 	bl	80019cc <Error_Handler>
  }
}
 8001996:	bf00      	nop
 8001998:	3750      	adds	r7, #80	; 0x50
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40007000 	.word	0x40007000

080019a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ba:	f001 ffb7 	bl	800392c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40002000 	.word	0x40002000

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_MspInit+0x54>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <HAL_MspInit+0x54>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_MspInit+0x54>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_MspInit+0x54>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_MspInit+0x54>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_MspInit+0x54>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	210f      	movs	r1, #15
 8001a1a:	f06f 0001 	mvn.w	r0, #1
 8001a1e:	f002 fc6f 	bl	8004300 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	202d      	movs	r0, #45	; 0x2d
 8001a46:	f002 fc5b 	bl	8004300 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a4a:	202d      	movs	r0, #45	; 0x2d
 8001a4c:	f002 fc74 	bl	8004338 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_InitTick+0xa4>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_InitTick+0xa4>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_InitTick+0xa4>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6c:	f107 0210 	add.w	r2, r7, #16
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 ffde 	bl	8006a38 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a7c:	f004 ffb4 	bl	80069e8 <HAL_RCC_GetPCLK1Freq>
 8001a80:	4603      	mov	r3, r0
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_InitTick+0xa8>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	3b01      	subs	r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_InitTick+0xac>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_InitTick+0xb0>)
 8001a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_InitTick+0xac>)
 8001a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_InitTick+0xac>)
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_InitTick+0xac>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_InitTick+0xac>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001ab4:	4809      	ldr	r0, [pc, #36]	; (8001adc <HAL_InitTick+0xac>)
 8001ab6:	f004 fff1 	bl	8006a9c <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d104      	bne.n	8001aca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001ac0:	4806      	ldr	r0, [pc, #24]	; (8001adc <HAL_InitTick+0xac>)
 8001ac2:	f005 f83b 	bl	8006b3c <HAL_TIM_Base_Start_IT>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3730      	adds	r7, #48	; 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	2000b114 	.word	0x2000b114
 8001ae0:	40002000 	.word	0x40002000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <DMA1_Stream1_IRQHandler+0x10>)
 8001b16:	f002 fdb5 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000b2f4 	.word	0x2000b2f4

08001b24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <DMA1_Stream3_IRQHandler+0x10>)
 8001b2a:	f002 fdab 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000b398 	.word	0x2000b398

08001b38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <DMA1_Stream5_IRQHandler+0x10>)
 8001b3e:	f002 fda1 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000b234 	.word	0x2000b234

08001b4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <DMA1_Stream6_IRQHandler+0x10>)
 8001b52:	f002 fd97 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000b518 	.word	0x2000b518

08001b60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart1);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <USART1_IRQHandler+0x14>)
 8001b66:	f000 fe9b 	bl	80028a0 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b6a:	4802      	ldr	r0, [pc, #8]	; (8001b74 <USART1_IRQHandler+0x14>)
 8001b6c:	f006 fcde 	bl	800852c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2000b578 	.word	0x2000b578

08001b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart2);
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <USART2_IRQHandler+0x14>)
 8001b7e:	f000 fe8f 	bl	80028a0 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b82:	4802      	ldr	r0, [pc, #8]	; (8001b8c <USART2_IRQHandler+0x14>)
 8001b84:	f006 fcd2 	bl	800852c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000b600 	.word	0x2000b600

08001b90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart3);
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <USART3_IRQHandler+0x14>)
 8001b96:	f000 fe83 	bl	80028a0 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b9a:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <USART3_IRQHandler+0x14>)
 8001b9c:	f006 fcc6 	bl	800852c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	2000b354 	.word	0x2000b354

08001ba8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001bae:	f005 fad9 	bl	8007164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000b114 	.word	0x2000b114

08001bbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <DMA2_Stream0_IRQHandler+0x10>)
 8001bc2:	f002 fd5f 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000af88 	.word	0x2000af88

08001bd0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <DMA2_Stream1_IRQHandler+0x10>)
 8001bd6:	f002 fd55 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000b294 	.word	0x2000b294

08001be4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <DMA2_Stream2_IRQHandler+0x10>)
 8001bea:	f002 fd4b 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000b4b8 	.word	0x2000b4b8

08001bf8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <ETH_IRQHandler+0x10>)
 8001bfe:	f002 ffab 	bl	8004b58 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000e83c 	.word	0x2000e83c

08001c0c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <DMA2_Stream6_IRQHandler+0x10>)
 8001c12:	f002 fd37 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000b458 	.word	0x2000b458

08001c20 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <DMA2_Stream7_IRQHandler+0x10>)
 8001c26:	f002 fd2d 	bl	8004684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000b3f8 	.word	0x2000b3f8

08001c34 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart6);
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <USART6_IRQHandler+0x14>)
 8001c3a:	f000 fe31 	bl	80028a0 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c3e:	4802      	ldr	r0, [pc, #8]	; (8001c48 <USART6_IRQHandler+0x14>)
 8001c40:	f006 fc74 	bl	800852c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000b5bc 	.word	0x2000b5bc

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b096      	sub	sp, #88	; 0x58
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00c fb23 	bl	800e2f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001cb0:	4a46      	ldr	r2, [pc, #280]	; (8001dcc <MX_TIM1_Init+0x15c>)
 8001cb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001cb4:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001cb6:	22a7      	movs	r2, #167	; 0xa7
 8001cb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001cc0:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001cc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cda:	483b      	ldr	r0, [pc, #236]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001cdc:	f004 fede 	bl	8006a9c <HAL_TIM_Base_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ce6:	f7ff fe71 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4834      	ldr	r0, [pc, #208]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001cf8:	f005 fc9a 	bl	8007630 <HAL_TIM_ConfigClockSource>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d02:	f7ff fe63 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d06:	4830      	ldr	r0, [pc, #192]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001d08:	f004 ff88 	bl	8006c1c <HAL_TIM_PWM_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d12:	f7ff fe5b 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d22:	4619      	mov	r1, r3
 8001d24:	4828      	ldr	r0, [pc, #160]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001d26:	f006 f9a3 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d30:	f7ff fe4c 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d34:	2360      	movs	r3, #96	; 0x60
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 199;
 8001d38:	23c7      	movs	r3, #199	; 0xc7
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	481b      	ldr	r0, [pc, #108]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001d5a:	f005 fba7 	bl	80074ac <HAL_TIM_PWM_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d64:	f7ff fe32 	bl	80019cc <Error_Handler>
  }
  sConfigOC.Pulse = 399;
 8001d68:	f240 138f 	movw	r3, #399	; 0x18f
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	2204      	movs	r2, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4814      	ldr	r0, [pc, #80]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001d78:	f005 fb98 	bl	80074ac <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d82:	f7ff fe23 	bl	80019cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001daa:	f006 f9dd 	bl	8008168 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001db4:	f7ff fe0a 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001db8:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <MX_TIM1_Init+0x158>)
 8001dba:	f000 f96d 	bl	8002098 <HAL_TIM_MspPostInit>

}
 8001dbe:	bf00      	nop
 8001dc0:	3758      	adds	r7, #88	; 0x58
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000b1a4 	.word	0x2000b1a4
 8001dcc:	40010000 	.word	0x40010000

08001dd0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08e      	sub	sp, #56	; 0x38
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	f107 0320 	add.w	r3, r7, #32
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	615a      	str	r2, [r3, #20]
 8001dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e0a:	22a7      	movs	r2, #167	; 0xa7
 8001e0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e28:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e2a:	f004 fe37 	bl	8006a9c <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e34:	f7ff fdca 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e42:	4619      	mov	r1, r3
 8001e44:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e46:	f005 fbf3 	bl	8007630 <HAL_TIM_ConfigClockSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e50:	f7ff fdbc 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e54:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e56:	f004 fee1 	bl	8006c1c <HAL_TIM_PWM_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e60:	f7ff fdb4 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	4619      	mov	r1, r3
 8001e72:	4811      	ldr	r0, [pc, #68]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e74:	f006 f8fc 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e7e:	f7ff fda5 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e82:	2360      	movs	r3, #96	; 0x60
 8001e84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 599;
 8001e86:	f240 2357 	movw	r3, #599	; 0x257
 8001e8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2204      	movs	r2, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001e9c:	f005 fb06 	bl	80074ac <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001ea6:	f7ff fd91 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_TIM2_Init+0xe8>)
 8001eac:	f000 f8f4 	bl	8002098 <HAL_TIM_MspPostInit>

}
 8001eb0:	bf00      	nop
 8001eb2:	3738      	adds	r7, #56	; 0x38
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	2000b1ec 	.word	0x2000b1ec

08001ebc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0318 	add.w	r3, r7, #24
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eda:	463b      	mov	r3, r7
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001ee8:	4a31      	ldr	r2, [pc, #196]	; (8001fb0 <MX_TIM3_Init+0xf4>)
 8001eea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8001eec:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001eee:	22a7      	movs	r2, #167	; 0xa7
 8001ef0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f0c:	4827      	ldr	r0, [pc, #156]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001f0e:	f004 fdc5 	bl	8006a9c <HAL_TIM_Base_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001f18:	f7ff fd58 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f20:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f22:	f107 0318 	add.w	r3, r7, #24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4820      	ldr	r0, [pc, #128]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001f2a:	f005 fb81 	bl	8007630 <HAL_TIM_ConfigClockSource>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f34:	f7ff fd4a 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f38:	481c      	ldr	r0, [pc, #112]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001f3a:	f004 ff91 	bl	8006e60 <HAL_TIM_IC_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f44:	f7ff fd42 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4619      	mov	r1, r3
 8001f56:	4815      	ldr	r0, [pc, #84]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001f58:	f006 f88a 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001f62:	f7ff fd33 	bl	80019cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f66:	2300      	movs	r3, #0
 8001f68:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f76:	463b      	mov	r3, r7
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001f7e:	f005 f9f9 	bl	8007374 <HAL_TIM_IC_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001f88:	f7ff fd20 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	2204      	movs	r2, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4806      	ldr	r0, [pc, #24]	; (8001fac <MX_TIM3_Init+0xf0>)
 8001f94:	f005 f9ee 	bl	8007374 <HAL_TIM_IC_ConfigChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001f9e:	f7ff fd15 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	3728      	adds	r7, #40	; 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000b15c 	.word	0x2000b15c
 8001fb0:	40000400 	.word	0x40000400

08001fb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <HAL_TIM_Base_MspInit+0xd4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a2b      	ldr	r2, [pc, #172]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ff2:	e044      	b.n	800207e <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffc:	d10e      	bne.n	800201c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a21      	ldr	r2, [pc, #132]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
}
 800201a:	e030      	b.n	800207e <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_TIM_Base_MspInit+0xdc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12b      	bne.n	800207e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_TIM_Base_MspInit+0xd8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN1_SPD_Pin|FAN2_SPD_Pin;
 800205e:	2330      	movs	r3, #48	; 0x30
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800206e:	2302      	movs	r3, #2
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	4806      	ldr	r0, [pc, #24]	; (8002094 <HAL_TIM_Base_MspInit+0xe0>)
 800207a:	f002 fde9 	bl	8004c50 <HAL_GPIO_Init>
}
 800207e:	bf00      	nop
 8002080:	3730      	adds	r7, #48	; 0x30
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40010000 	.word	0x40010000
 800208c:	40023800 	.word	0x40023800
 8002090:	40000400 	.word	0x40000400
 8002094:	40020400 	.word	0x40020400

08002098 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a24      	ldr	r2, [pc, #144]	; (8002148 <HAL_TIM_MspPostInit+0xb0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d11f      	bne.n	80020fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_TIM_MspPostInit+0xb4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <HAL_TIM_MspPostInit+0xb4>)
 80020c4:	f043 0310 	orr.w	r3, r3, #16
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_TIM_MspPostInit+0xb4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_PWM_Pin|FAN2_PWM_Pin;
 80020d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4619      	mov	r1, r3
 80020f2:	4817      	ldr	r0, [pc, #92]	; (8002150 <HAL_TIM_MspPostInit+0xb8>)
 80020f4:	f002 fdac 	bl	8004c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020f8:	e022      	b.n	8002140 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002102:	d11d      	bne.n	8002140 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_TIM_MspPostInit+0xb4>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_TIM_MspPostInit+0xb4>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	6313      	str	r3, [r2, #48]	; 0x30
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_TIM_MspPostInit+0xb4>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VAL_PWM_Pin;
 8002120:	2308      	movs	r3, #8
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002130:	2301      	movs	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	4806      	ldr	r0, [pc, #24]	; (8002154 <HAL_TIM_MspPostInit+0xbc>)
 800213c:	f002 fd88 	bl	8004c50 <HAL_GPIO_Init>
}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40010000 	.word	0x40010000
 800214c:	40023800 	.word	0x40023800
 8002150:	40021000 	.word	0x40021000
 8002154:	40020400 	.word	0x40020400

08002158 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 800215e:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <MX_USART1_UART_Init+0x50>)
 8002160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002164:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_USART1_UART_Init+0x4c>)
 8002190:	f006 f850 	bl	8008234 <HAL_UART_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800219a:	f7ff fc17 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000b578 	.word	0x2000b578
 80021a8:	40011000 	.word	0x40011000

080021ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <MX_USART2_UART_Init+0x50>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USART2_UART_Init+0x4c>)
 80021e4:	f006 f826 	bl	8008234 <HAL_UART_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ee:	f7ff fbed 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000b600 	.word	0x2000b600
 80021fc:	40004400 	.word	0x40004400

08002200 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_USART3_UART_Init+0x4c>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <MX_USART3_UART_Init+0x50>)
 8002208:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <MX_USART3_UART_Init+0x4c>)
 800220c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002210:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_USART3_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_USART3_UART_Init+0x4c>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_USART3_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_USART3_UART_Init+0x4c>)
 8002226:	220c      	movs	r2, #12
 8002228:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_USART3_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_USART3_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_USART3_UART_Init+0x4c>)
 8002238:	f005 fffc 	bl	8008234 <HAL_UART_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002242:	f7ff fbc3 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000b354 	.word	0x2000b354
 8002250:	40004800 	.word	0x40004800

08002254 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_USART6_UART_Init+0x4c>)
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <MX_USART6_UART_Init+0x50>)
 800225c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <MX_USART6_UART_Init+0x4c>)
 8002260:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002264:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MX_USART6_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <MX_USART6_UART_Init+0x4c>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MX_USART6_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MX_USART6_UART_Init+0x4c>)
 800227a:	220c      	movs	r2, #12
 800227c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <MX_USART6_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <MX_USART6_UART_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_USART6_UART_Init+0x4c>)
 800228c:	f005 ffd2 	bl	8008234 <HAL_UART_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002296:	f7ff fb99 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000b5bc 	.word	0x2000b5bc
 80022a4:	40011400 	.word	0x40011400

080022a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b090      	sub	sp, #64	; 0x40
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a97      	ldr	r2, [pc, #604]	; (8002524 <HAL_UART_MspInit+0x27c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	f040 8093 	bne.w	80023f2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d0:	4b95      	ldr	r3, [pc, #596]	; (8002528 <HAL_UART_MspInit+0x280>)
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	4a94      	ldr	r2, [pc, #592]	; (8002528 <HAL_UART_MspInit+0x280>)
 80022d6:	f043 0310 	orr.w	r3, r3, #16
 80022da:	6453      	str	r3, [r2, #68]	; 0x44
 80022dc:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_UART_MspInit+0x280>)
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
 80022ec:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <HAL_UART_MspInit+0x280>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	4a8d      	ldr	r2, [pc, #564]	; (8002528 <HAL_UART_MspInit+0x280>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6313      	str	r3, [r2, #48]	; 0x30
 80022f8:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <HAL_UART_MspInit+0x280>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002304:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002316:	2307      	movs	r3, #7
 8002318:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231e:	4619      	mov	r1, r3
 8002320:	4882      	ldr	r0, [pc, #520]	; (800252c <HAL_UART_MspInit+0x284>)
 8002322:	f002 fc95 	bl	8004c50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002326:	4b82      	ldr	r3, [pc, #520]	; (8002530 <HAL_UART_MspInit+0x288>)
 8002328:	4a82      	ldr	r2, [pc, #520]	; (8002534 <HAL_UART_MspInit+0x28c>)
 800232a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800232c:	4b80      	ldr	r3, [pc, #512]	; (8002530 <HAL_UART_MspInit+0x288>)
 800232e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002332:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002334:	4b7e      	ldr	r3, [pc, #504]	; (8002530 <HAL_UART_MspInit+0x288>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800233a:	4b7d      	ldr	r3, [pc, #500]	; (8002530 <HAL_UART_MspInit+0x288>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002340:	4b7b      	ldr	r3, [pc, #492]	; (8002530 <HAL_UART_MspInit+0x288>)
 8002342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002346:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002348:	4b79      	ldr	r3, [pc, #484]	; (8002530 <HAL_UART_MspInit+0x288>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800234e:	4b78      	ldr	r3, [pc, #480]	; (8002530 <HAL_UART_MspInit+0x288>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002354:	4b76      	ldr	r3, [pc, #472]	; (8002530 <HAL_UART_MspInit+0x288>)
 8002356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800235a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800235c:	4b74      	ldr	r3, [pc, #464]	; (8002530 <HAL_UART_MspInit+0x288>)
 800235e:	2200      	movs	r2, #0
 8002360:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002362:	4b73      	ldr	r3, [pc, #460]	; (8002530 <HAL_UART_MspInit+0x288>)
 8002364:	2200      	movs	r2, #0
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002368:	4871      	ldr	r0, [pc, #452]	; (8002530 <HAL_UART_MspInit+0x288>)
 800236a:	f001 fff3 	bl	8004354 <HAL_DMA_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002374:	f7ff fb2a 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a6d      	ldr	r2, [pc, #436]	; (8002530 <HAL_UART_MspInit+0x288>)
 800237c:	639a      	str	r2, [r3, #56]	; 0x38
 800237e:	4a6c      	ldr	r2, [pc, #432]	; (8002530 <HAL_UART_MspInit+0x288>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002384:	4b6c      	ldr	r3, [pc, #432]	; (8002538 <HAL_UART_MspInit+0x290>)
 8002386:	4a6d      	ldr	r2, [pc, #436]	; (800253c <HAL_UART_MspInit+0x294>)
 8002388:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800238a:	4b6b      	ldr	r3, [pc, #428]	; (8002538 <HAL_UART_MspInit+0x290>)
 800238c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002390:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002392:	4b69      	ldr	r3, [pc, #420]	; (8002538 <HAL_UART_MspInit+0x290>)
 8002394:	2240      	movs	r2, #64	; 0x40
 8002396:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002398:	4b67      	ldr	r3, [pc, #412]	; (8002538 <HAL_UART_MspInit+0x290>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_UART_MspInit+0x290>)
 80023a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a6:	4b64      	ldr	r3, [pc, #400]	; (8002538 <HAL_UART_MspInit+0x290>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ac:	4b62      	ldr	r3, [pc, #392]	; (8002538 <HAL_UART_MspInit+0x290>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80023b2:	4b61      	ldr	r3, [pc, #388]	; (8002538 <HAL_UART_MspInit+0x290>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023b8:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <HAL_UART_MspInit+0x290>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023be:	4b5e      	ldr	r3, [pc, #376]	; (8002538 <HAL_UART_MspInit+0x290>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023c4:	485c      	ldr	r0, [pc, #368]	; (8002538 <HAL_UART_MspInit+0x290>)
 80023c6:	f001 ffc5 	bl	8004354 <HAL_DMA_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80023d0:	f7ff fafc 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_UART_MspInit+0x290>)
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34
 80023da:	4a57      	ldr	r2, [pc, #348]	; (8002538 <HAL_UART_MspInit+0x290>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2105      	movs	r1, #5
 80023e4:	2025      	movs	r0, #37	; 0x25
 80023e6:	f001 ff8b 	bl	8004300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ea:	2025      	movs	r0, #37	; 0x25
 80023ec:	f001 ffa4 	bl	8004338 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80023f0:	e1e2      	b.n	80027b8 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_UART_MspInit+0x298>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	f040 80ad 	bne.w	8002558 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <HAL_UART_MspInit+0x280>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a48      	ldr	r2, [pc, #288]	; (8002528 <HAL_UART_MspInit+0x280>)
 8002408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b46      	ldr	r3, [pc, #280]	; (8002528 <HAL_UART_MspInit+0x280>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_UART_MspInit+0x280>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a41      	ldr	r2, [pc, #260]	; (8002528 <HAL_UART_MspInit+0x280>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <HAL_UART_MspInit+0x280>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002436:	2360      	movs	r3, #96	; 0x60
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002446:	2307      	movs	r3, #7
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244e:	4619      	mov	r1, r3
 8002450:	483c      	ldr	r0, [pc, #240]	; (8002544 <HAL_UART_MspInit+0x29c>)
 8002452:	f002 fbfd 	bl	8004c50 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002456:	4b3c      	ldr	r3, [pc, #240]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 8002458:	4a3c      	ldr	r2, [pc, #240]	; (800254c <HAL_UART_MspInit+0x2a4>)
 800245a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 800245e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002462:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002464:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002470:	4b35      	ldr	r3, [pc, #212]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 8002472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002476:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002478:	4b33      	ldr	r3, [pc, #204]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 8002486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800248a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800248c:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 8002494:	2200      	movs	r2, #0
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002498:	482b      	ldr	r0, [pc, #172]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 800249a:	f001 ff5b 	bl	8004354 <HAL_DMA_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_MspInit+0x200>
      Error_Handler();
 80024a4:	f7ff fa92 	bl	80019cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a27      	ldr	r2, [pc, #156]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
 80024ae:	4a26      	ldr	r2, [pc, #152]	; (8002548 <HAL_UART_MspInit+0x2a0>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80024b4:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024b6:	4a27      	ldr	r2, [pc, #156]	; (8002554 <HAL_UART_MspInit+0x2ac>)
 80024b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80024ba:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024c4:	2240      	movs	r2, #64	; 0x40
 80024c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024dc:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024f4:	4816      	ldr	r0, [pc, #88]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 80024f6:	f001 ff2d 	bl	8004354 <HAL_DMA_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002500:	f7ff fa64 	bl	80019cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 8002508:	635a      	str	r2, [r3, #52]	; 0x34
 800250a:	4a11      	ldr	r2, [pc, #68]	; (8002550 <HAL_UART_MspInit+0x2a8>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2105      	movs	r1, #5
 8002514:	2026      	movs	r0, #38	; 0x26
 8002516:	f001 fef3 	bl	8004300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800251a:	2026      	movs	r0, #38	; 0x26
 800251c:	f001 ff0c 	bl	8004338 <HAL_NVIC_EnableIRQ>
}
 8002520:	e14a      	b.n	80027b8 <HAL_UART_MspInit+0x510>
 8002522:	bf00      	nop
 8002524:	40011000 	.word	0x40011000
 8002528:	40023800 	.word	0x40023800
 800252c:	40020000 	.word	0x40020000
 8002530:	2000b4b8 	.word	0x2000b4b8
 8002534:	40026440 	.word	0x40026440
 8002538:	2000b3f8 	.word	0x2000b3f8
 800253c:	400264b8 	.word	0x400264b8
 8002540:	40004400 	.word	0x40004400
 8002544:	40020c00 	.word	0x40020c00
 8002548:	2000b234 	.word	0x2000b234
 800254c:	40026088 	.word	0x40026088
 8002550:	2000b518 	.word	0x2000b518
 8002554:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a98      	ldr	r2, [pc, #608]	; (80027c0 <HAL_UART_MspInit+0x518>)
 800255e:	4293      	cmp	r3, r2
 8002560:	f040 8093 	bne.w	800268a <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	4b96      	ldr	r3, [pc, #600]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a95      	ldr	r2, [pc, #596]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 800256e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
 8002574:	4b93      	ldr	r3, [pc, #588]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	4b8f      	ldr	r3, [pc, #572]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4a8e      	ldr	r2, [pc, #568]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 800258a:	f043 0308 	orr.w	r3, r3, #8
 800258e:	6313      	str	r3, [r2, #48]	; 0x30
 8002590:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800259c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025ae:	2307      	movs	r3, #7
 80025b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b6:	4619      	mov	r1, r3
 80025b8:	4883      	ldr	r0, [pc, #524]	; (80027c8 <HAL_UART_MspInit+0x520>)
 80025ba:	f002 fb49 	bl	8004c50 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80025be:	4b83      	ldr	r3, [pc, #524]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025c0:	4a83      	ldr	r2, [pc, #524]	; (80027d0 <HAL_UART_MspInit+0x528>)
 80025c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025cc:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d2:	4b7e      	ldr	r3, [pc, #504]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025d8:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025de:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e0:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e6:	4b79      	ldr	r3, [pc, #484]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80025ec:	4b77      	ldr	r3, [pc, #476]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025f4:	4b75      	ldr	r3, [pc, #468]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025fa:	4b74      	ldr	r3, [pc, #464]	; (80027cc <HAL_UART_MspInit+0x524>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002600:	4872      	ldr	r0, [pc, #456]	; (80027cc <HAL_UART_MspInit+0x524>)
 8002602:	f001 fea7 	bl	8004354 <HAL_DMA_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_UART_MspInit+0x368>
      Error_Handler();
 800260c:	f7ff f9de 	bl	80019cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_UART_MspInit+0x524>)
 8002614:	639a      	str	r2, [r3, #56]	; 0x38
 8002616:	4a6d      	ldr	r2, [pc, #436]	; (80027cc <HAL_UART_MspInit+0x524>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800261c:	4b6d      	ldr	r3, [pc, #436]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 800261e:	4a6e      	ldr	r2, [pc, #440]	; (80027d8 <HAL_UART_MspInit+0x530>)
 8002620:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002622:	4b6c      	ldr	r3, [pc, #432]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 8002624:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002628:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800262a:	4b6a      	ldr	r3, [pc, #424]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002636:	4b67      	ldr	r3, [pc, #412]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 8002638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800263c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002644:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800264a:	4b62      	ldr	r3, [pc, #392]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002650:	4b60      	ldr	r3, [pc, #384]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002656:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800265c:	485d      	ldr	r0, [pc, #372]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 800265e:	f001 fe79 	bl	8004354 <HAL_DMA_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8002668:	f7ff f9b0 	bl	80019cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 8002670:	635a      	str	r2, [r3, #52]	; 0x34
 8002672:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_UART_MspInit+0x52c>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2105      	movs	r1, #5
 800267c:	2027      	movs	r0, #39	; 0x27
 800267e:	f001 fe3f 	bl	8004300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002682:	2027      	movs	r0, #39	; 0x27
 8002684:	f001 fe58 	bl	8004338 <HAL_NVIC_EnableIRQ>
}
 8002688:	e096      	b.n	80027b8 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART6)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a53      	ldr	r2, [pc, #332]	; (80027dc <HAL_UART_MspInit+0x534>)
 8002690:	4293      	cmp	r3, r2
 8002692:	f040 8091 	bne.w	80027b8 <HAL_UART_MspInit+0x510>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a49      	ldr	r2, [pc, #292]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 80026a0:	f043 0320 	orr.w	r3, r3, #32
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <HAL_UART_MspInit+0x51c>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026ce:	23c0      	movs	r3, #192	; 0xc0
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026de:	2308      	movs	r3, #8
 80026e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e6:	4619      	mov	r1, r3
 80026e8:	483d      	ldr	r0, [pc, #244]	; (80027e0 <HAL_UART_MspInit+0x538>)
 80026ea:	f002 fab1 	bl	8004c50 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80026ee:	4b3d      	ldr	r3, [pc, #244]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 80026f0:	4a3d      	ldr	r2, [pc, #244]	; (80027e8 <HAL_UART_MspInit+0x540>)
 80026f2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80026f4:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 80026f6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80026fa:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fc:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002702:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 8002704:	2200      	movs	r2, #0
 8002706:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002708:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 800270a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800270e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002710:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 8002712:	2200      	movs	r2, #0
 8002714:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800271c:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 800271e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002722:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002724:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 8002726:	2200      	movs	r2, #0
 8002728:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272a:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 800272c:	2200      	movs	r2, #0
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002730:	482c      	ldr	r0, [pc, #176]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 8002732:	f001 fe0f 	bl	8004354 <HAL_DMA_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_MspInit+0x498>
      Error_Handler();
 800273c:	f7ff f946 	bl	80019cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
 8002746:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <HAL_UART_MspInit+0x53c>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_UART_MspInit+0x544>)
 800274e:	4a28      	ldr	r2, [pc, #160]	; (80027f0 <HAL_UART_MspInit+0x548>)
 8002750:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_UART_MspInit+0x544>)
 8002754:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002758:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_UART_MspInit+0x544>)
 800275c:	2240      	movs	r2, #64	; 0x40
 800275e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_UART_MspInit+0x544>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_UART_MspInit+0x544>)
 8002768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800276c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <HAL_UART_MspInit+0x544>)
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_UART_MspInit+0x544>)
 8002776:	2200      	movs	r2, #0
 8002778:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_UART_MspInit+0x544>)
 800277c:	2200      	movs	r2, #0
 800277e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_UART_MspInit+0x544>)
 8002782:	2200      	movs	r2, #0
 8002784:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_UART_MspInit+0x544>)
 8002788:	2200      	movs	r2, #0
 800278a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800278c:	4817      	ldr	r0, [pc, #92]	; (80027ec <HAL_UART_MspInit+0x544>)
 800278e:	f001 fde1 	bl	8004354 <HAL_DMA_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_MspInit+0x4f4>
      Error_Handler();
 8002798:	f7ff f918 	bl	80019cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <HAL_UART_MspInit+0x544>)
 80027a0:	635a      	str	r2, [r3, #52]	; 0x34
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_UART_MspInit+0x544>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2105      	movs	r1, #5
 80027ac:	2047      	movs	r0, #71	; 0x47
 80027ae:	f001 fda7 	bl	8004300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027b2:	2047      	movs	r0, #71	; 0x47
 80027b4:	f001 fdc0 	bl	8004338 <HAL_NVIC_EnableIRQ>
}
 80027b8:	bf00      	nop
 80027ba:	3740      	adds	r7, #64	; 0x40
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40004800 	.word	0x40004800
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020c00 	.word	0x40020c00
 80027cc:	2000b2f4 	.word	0x2000b2f4
 80027d0:	40026028 	.word	0x40026028
 80027d4:	2000b398 	.word	0x2000b398
 80027d8:	40026058 	.word	0x40026058
 80027dc:	40011400 	.word	0x40011400
 80027e0:	40020800 	.word	0x40020800
 80027e4:	2000b294 	.word	0x2000b294
 80027e8:	40026428 	.word	0x40026428
 80027ec:	2000b458 	.word	0x2000b458
 80027f0:	400264a0 	.word	0x400264a0

080027f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800282c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027fa:	490e      	ldr	r1, [pc, #56]	; (8002834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002800:	e002      	b.n	8002808 <LoopCopyDataInit>

08002802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002806:	3304      	adds	r3, #4

08002808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800280c:	d3f9      	bcc.n	8002802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002810:	4c0b      	ldr	r4, [pc, #44]	; (8002840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002814:	e001      	b.n	800281a <LoopFillZerobss>

08002816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002818:	3204      	adds	r2, #4

0800281a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800281c:	d3fb      	bcc.n	8002816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800281e:	f7ff fa15 	bl	8001c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002822:	f00b fd33 	bl	800e28c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002826:	f7ff f82f 	bl	8001888 <main>
  bx  lr    
 800282a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800282c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8002838:	0800ef2c 	.word	0x0800ef2c
  ldr r2, =_sbss
 800283c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8002840:	200100a0 	.word	0x200100a0

08002844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC_IRQHandler>
	...

08002848 <fnd_com_modbus_rtu_init>:
modbus_regs sys_regs;
modbus_master master[2];
modbus_slave slaves[2];

void fnd_com_modbus_rtu_init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
    master_init(&master[0], &port[0], 1);
 800284c:	2201      	movs	r2, #1
 800284e:	490b      	ldr	r1, [pc, #44]	; (800287c <fnd_com_modbus_rtu_init+0x34>)
 8002850:	480b      	ldr	r0, [pc, #44]	; (8002880 <fnd_com_modbus_rtu_init+0x38>)
 8002852:	f00a fc77 	bl	800d144 <master_init>
    master_init(&master[1], &port[1], 1);
 8002856:	2201      	movs	r2, #1
 8002858:	490a      	ldr	r1, [pc, #40]	; (8002884 <fnd_com_modbus_rtu_init+0x3c>)
 800285a:	480b      	ldr	r0, [pc, #44]	; (8002888 <fnd_com_modbus_rtu_init+0x40>)
 800285c:	f00a fc72 	bl	800d144 <master_init>

    slave_init(&slaves[0], &port[2], 1, &sys_regs);
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <fnd_com_modbus_rtu_init+0x44>)
 8002862:	2201      	movs	r2, #1
 8002864:	490a      	ldr	r1, [pc, #40]	; (8002890 <fnd_com_modbus_rtu_init+0x48>)
 8002866:	480b      	ldr	r0, [pc, #44]	; (8002894 <fnd_com_modbus_rtu_init+0x4c>)
 8002868:	f00b fc22 	bl	800e0b0 <slave_init>
    slave_init(&slaves[1], &port[3], 2, &sys_regs);
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <fnd_com_modbus_rtu_init+0x44>)
 800286e:	2202      	movs	r2, #2
 8002870:	4909      	ldr	r1, [pc, #36]	; (8002898 <fnd_com_modbus_rtu_init+0x50>)
 8002872:	480a      	ldr	r0, [pc, #40]	; (800289c <fnd_com_modbus_rtu_init+0x54>)
 8002874:	f00b fc1c 	bl	800e0b0 <slave_init>
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000004 	.word	0x20000004
 8002880:	2000c484 	.word	0x2000c484
 8002884:	20000010 	.word	0x20000010
 8002888:	2000c8a8 	.word	0x2000c8a8
 800288c:	2000be84 	.word	0x2000be84
 8002890:	2000001c 	.word	0x2000001c
 8002894:	2000b644 	.word	0x2000b644
 8002898:	20000028 	.word	0x20000028
 800289c:	2000ba64 	.word	0x2000ba64

080028a0 <fnd_com_modbus_rtu_uart_idle_irq>:
void fnd_com_modbus_rtu_uart_idle_irq(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
    if (huart == master[0].uart_port->uart)
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d103      	bne.n	80028bc <fnd_com_modbus_rtu_uart_idle_irq+0x1c>
    {
        master_uart_idle(&master[0]);
 80028b4:	4813      	ldr	r0, [pc, #76]	; (8002904 <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 80028b6:	f00a fc92 	bl	800d1de <master_uart_idle>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_uart_idle(&slaves[1]);
    }
}
 80028ba:	e01e      	b.n	80028fa <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
    else if (huart == master[1].uart_port->uart)
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 80028be:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d103      	bne.n	80028d2 <fnd_com_modbus_rtu_uart_idle_irq+0x32>
        master_uart_idle(&master[1]);
 80028ca:	480f      	ldr	r0, [pc, #60]	; (8002908 <fnd_com_modbus_rtu_uart_idle_irq+0x68>)
 80028cc:	f00a fc87 	bl	800d1de <master_uart_idle>
}
 80028d0:	e013      	b.n	80028fa <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
    else if (huart == slaves[0].uart_port->uart)
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d103      	bne.n	80028e6 <fnd_com_modbus_rtu_uart_idle_irq+0x46>
        slave_uart_idle(&slaves[0]);
 80028de:	480b      	ldr	r0, [pc, #44]	; (800290c <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 80028e0:	f00b fc1e 	bl	800e120 <slave_uart_idle>
}
 80028e4:	e009      	b.n	80028fa <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
    else if (huart == slaves[1].uart_port->uart)
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 80028e8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d102      	bne.n	80028fa <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
        slave_uart_idle(&slaves[1]);
 80028f4:	4806      	ldr	r0, [pc, #24]	; (8002910 <fnd_com_modbus_rtu_uart_idle_irq+0x70>)
 80028f6:	f00b fc13 	bl	800e120 <slave_uart_idle>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000c484 	.word	0x2000c484
 8002908:	2000c8a8 	.word	0x2000c8a8
 800290c:	2000b644 	.word	0x2000b644
 8002910:	2000ba64 	.word	0x2000ba64

08002914 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
    if (huart == master[0].uart_port->uart)
 800291c:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_UART_TxCpltCallback+0x68>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	d104      	bne.n	8002932 <HAL_UART_TxCpltCallback+0x1e>
    {
        master_set_tx_rx(&master[0], rx);
 8002928:	2100      	movs	r1, #0
 800292a:	4814      	ldr	r0, [pc, #80]	; (800297c <HAL_UART_TxCpltCallback+0x68>)
 800292c:	f00a fc3e 	bl	800d1ac <master_set_tx_rx>
 8002930:	e00a      	b.n	8002948 <HAL_UART_TxCpltCallback+0x34>
    }
    else if (huart == master[1].uart_port->uart)
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_UART_TxCpltCallback+0x68>)
 8002934:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	d103      	bne.n	8002948 <HAL_UART_TxCpltCallback+0x34>
    {
        master_set_tx_rx(&master[1], rx);
 8002940:	2100      	movs	r1, #0
 8002942:	480f      	ldr	r0, [pc, #60]	; (8002980 <HAL_UART_TxCpltCallback+0x6c>)
 8002944:	f00a fc32 	bl	800d1ac <master_set_tx_rx>
    }
    if (huart == slaves[0].uart_port->uart)
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_UART_TxCpltCallback+0x70>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	429a      	cmp	r2, r3
 8002952:	d104      	bne.n	800295e <HAL_UART_TxCpltCallback+0x4a>
    {
        slave_set_tx_rx(&slaves[0], rx);
 8002954:	2100      	movs	r1, #0
 8002956:	480b      	ldr	r0, [pc, #44]	; (8002984 <HAL_UART_TxCpltCallback+0x70>)
 8002958:	f00b fc22 	bl	800e1a0 <slave_set_tx_rx>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_set_tx_rx(&slaves[1], rx);
    }
}
 800295c:	e00a      	b.n	8002974 <HAL_UART_TxCpltCallback+0x60>
    else if (huart == slaves[1].uart_port->uart)
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_UART_TxCpltCallback+0x70>)
 8002960:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d103      	bne.n	8002974 <HAL_UART_TxCpltCallback+0x60>
        slave_set_tx_rx(&slaves[1], rx);
 800296c:	2100      	movs	r1, #0
 800296e:	4806      	ldr	r0, [pc, #24]	; (8002988 <HAL_UART_TxCpltCallback+0x74>)
 8002970:	f00b fc16 	bl	800e1a0 <slave_set_tx_rx>
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	2000c484 	.word	0x2000c484
 8002980:	2000c8a8 	.word	0x2000c8a8
 8002984:	2000b644 	.word	0x2000b644
 8002988:	2000ba64 	.word	0x2000ba64

0800298c <fnd_com_modbus_rtu_slave1_wait>:

void fnd_com_modbus_rtu_slave1_wait(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[0]);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <fnd_com_modbus_rtu_slave1_wait+0x10>)
 8002992:	f00b fc1e 	bl	800e1d2 <slave_wait_request>
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	2000b644 	.word	0x2000b644

080029a0 <fnd_com_modbus_rtu_slave2_wait>:
void fnd_com_modbus_rtu_slave2_wait(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[1]);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <fnd_com_modbus_rtu_slave2_wait+0x10>)
 80029a6:	f00b fc14 	bl	800e1d2 <slave_wait_request>
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000ba64 	.word	0x2000ba64

080029b4 <fnd_com_modbus_rtu_master1_read_write>:

void fnd_com_modbus_rtu_master1_read_write(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
    osDelay(50);
 80029b8:	2032      	movs	r0, #50	; 0x32
 80029ba:	f006 ff21 	bl	8009800 <osDelay>
    master_read_holding_regs(&master[0], 10, 4, &sys_regs.inputs[50]);
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <fnd_com_modbus_rtu_master1_read_write+0x40>)
 80029c0:	2204      	movs	r2, #4
 80029c2:	210a      	movs	r1, #10
 80029c4:	480c      	ldr	r0, [pc, #48]	; (80029f8 <fnd_com_modbus_rtu_master1_read_write+0x44>)
 80029c6:	f00a fc9d 	bl	800d304 <master_read_holding_regs>

    osDelay(50);
 80029ca:	2032      	movs	r0, #50	; 0x32
 80029cc:	f006 ff18 	bl	8009800 <osDelay>
    master_read_holding_regs(&master[0], 20, 4, &sys_regs.inputs[60]);
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <fnd_com_modbus_rtu_master1_read_write+0x48>)
 80029d2:	2204      	movs	r2, #4
 80029d4:	2114      	movs	r1, #20
 80029d6:	4808      	ldr	r0, [pc, #32]	; (80029f8 <fnd_com_modbus_rtu_master1_read_write+0x44>)
 80029d8:	f00a fc94 	bl	800d304 <master_read_holding_regs>

    osDelay(50);
 80029dc:	2032      	movs	r0, #50	; 0x32
 80029de:	f006 ff0f 	bl	8009800 <osDelay>
    master_read_holding_regs(&master[0], 30, 4, &sys_regs.inputs[70]);
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <fnd_com_modbus_rtu_master1_read_write+0x4c>)
 80029e4:	2204      	movs	r2, #4
 80029e6:	211e      	movs	r1, #30
 80029e8:	4803      	ldr	r0, [pc, #12]	; (80029f8 <fnd_com_modbus_rtu_master1_read_write+0x44>)
 80029ea:	f00a fc8b 	bl	800d304 <master_read_holding_regs>
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000c0e8 	.word	0x2000c0e8
 80029f8:	2000c484 	.word	0x2000c484
 80029fc:	2000c0fc 	.word	0x2000c0fc
 8002a00:	2000c110 	.word	0x2000c110

08002a04 <fnd_com_modbus_rtu_master2_read_write>:

void fnd_com_modbus_rtu_master2_read_write(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
    master_read_holding_regs(&master[1], 100, 8, &sys_regs.inputs[80]);
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <fnd_com_modbus_rtu_master2_read_write+0x14>)
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	2164      	movs	r1, #100	; 0x64
 8002a0e:	4803      	ldr	r0, [pc, #12]	; (8002a1c <fnd_com_modbus_rtu_master2_read_write+0x18>)
 8002a10:	f00a fc78 	bl	800d304 <master_read_holding_regs>
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	2000c124 	.word	0x2000c124
 8002a1c:	2000c8a8 	.word	0x2000c8a8

08002a20 <calculate_ntc_temperature>:

#define VAL_FB_START_CH 9
#define VAL_FB_END_CH 9

static float calculate_ntc_temperature(double res_value, double res_ref, double b_value)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	ed87 0b04 	vstr	d0, [r7, #16]
 8002a2a:	ed87 1b02 	vstr	d1, [r7, #8]
 8002a2e:	ed87 2b00 	vstr	d2, [r7]
    return (float)(1 / (((log(res_value / res_ref)) / b_value) + (1 / (273.15 + 25))) - 273.15);
 8002a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a3a:	f7fd feaf 	bl	800079c <__aeabi_ddiv>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	ec43 2b17 	vmov	d7, r2, r3
 8002a46:	eeb0 0a47 	vmov.f32	s0, s14
 8002a4a:	eef0 0a67 	vmov.f32	s1, s15
 8002a4e:	f00b fd27 	bl	800e4a0 <log>
 8002a52:	ec51 0b10 	vmov	r0, r1, d0
 8002a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a5a:	f7fd fe9f 	bl	800079c <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	a315      	add	r3, pc, #84	; (adr r3, 8002abc <calculate_ntc_temperature+0x9c>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd fbb6 	bl	80001dc <__adddf3>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	f04f 0000 	mov.w	r0, #0
 8002a78:	490f      	ldr	r1, [pc, #60]	; (8002ab8 <calculate_ntc_temperature+0x98>)
 8002a7a:	f7fd fe8f 	bl	800079c <__aeabi_ddiv>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	a30a      	add	r3, pc, #40	; (adr r3, 8002ab0 <calculate_ntc_temperature+0x90>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fba4 	bl	80001d8 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f82e 	bl	8000af8 <__aeabi_d2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	ee07 3a90 	vmov	s15, r3
}
 8002aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	f3af 8000 	nop.w
 8002ab0:	66666666 	.word	0x66666666
 8002ab4:	40711266 	.word	0x40711266
 8002ab8:	3ff00000 	.word	0x3ff00000
 8002abc:	dcb5db83 	.word	0xdcb5db83
 8002ac0:	3f6b79e1 	.word	0x3f6b79e1

08002ac4 <fnd_input_init>:

void fnd_input_init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
    fnd_input_adc_init();
 8002ac8:	f000 f9cc 	bl	8002e64 <fnd_input_adc_init>
    fnd_input_tim_input_capture_init();
 8002acc:	f000 fb64 	bl	8003198 <fnd_input_tim_input_capture_init>
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	0000      	movs	r0, r0
	...

08002ad8 <fnd_input_update>:

void fnd_input_update(void)
{
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	b090      	sub	sp, #64	; 0x40
 8002adc:	af00      	add	r7, sp, #0
    float adc_values[10];
    fnd_input_adc_read_values(adc_values);
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f9cc 	bl	8002e80 <fnd_input_adc_read_values>
    for (uint8_t i = 0; i < (DP_END_CH - DP_START_CH + 1); i++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002aee:	e02c      	b.n	8002b4a <fnd_input_update+0x72>
    {
        sys_regs.inputs[INPUT_DP_START + i] = adc_values[DP_START_CH + i] / 4095.0 * 3300;
 8002af0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002afa:	4413      	add	r3, r2
 8002afc:	3b34      	subs	r3, #52	; 0x34
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fcc9 	bl	8000498 <__aeabi_f2d>
 8002b06:	a37f      	add	r3, pc, #508	; (adr r3, 8002d04 <fnd_input_update+0x22c>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fe46 	bl	800079c <__aeabi_ddiv>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	a37c      	add	r3, pc, #496	; (adr r3, 8002d0c <fnd_input_update+0x234>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fd13 	bl	8000548 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fd ffbb 	bl	8000aa8 <__aeabi_d2iz>
 8002b32:	4603      	mov	r3, r0
 8002b34:	b219      	sxth	r1, r3
 8002b36:	4a72      	ldr	r2, [pc, #456]	; (8002d00 <fnd_input_update+0x228>)
 8002b38:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8002b3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (DP_END_CH - DP_START_CH + 1); i++)
 8002b40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b44:	3301      	adds	r3, #1
 8002b46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002b4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d9ce      	bls.n	8002af0 <fnd_input_update+0x18>
    }
    for (uint8_t i = 0; i < (NTC_END_CH - NTC_START_CH + 1); i++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002b58:	e055      	b.n	8002c06 <fnd_input_update+0x12e>
    {
        float ntc_resister_value = (float)10.0 * adc_values[NTC_START_CH + i] / (4095.1 - adc_values[NTC_START_CH + i]);
 8002b5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002b5e:	3303      	adds	r3, #3
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002b66:	4413      	add	r3, r2
 8002b68:	3b34      	subs	r3, #52	; 0x34
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b76:	ee17 0a90 	vmov	r0, s15
 8002b7a:	f7fd fc8d 	bl	8000498 <__aeabi_f2d>
 8002b7e:	4604      	mov	r4, r0
 8002b80:	460d      	mov	r5, r1
 8002b82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002b86:	3303      	adds	r3, #3
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b34      	subs	r3, #52	; 0x34
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fc7f 	bl	8000498 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	a152      	add	r1, pc, #328	; (adr r1, 8002ce8 <fnd_input_update+0x210>)
 8002ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ba4:	f7fd fb18 	bl	80001d8 <__aeabi_dsub>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4620      	mov	r0, r4
 8002bae:	4629      	mov	r1, r5
 8002bb0:	f7fd fdf4 	bl	800079c <__aeabi_ddiv>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7fd ff9c 	bl	8000af8 <__aeabi_d2f>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
        sys_regs.inputs[INPUT_NTC_START + i] = calculate_ntc_temperature(ntc_resister_value, 5.0, 3470);
 8002bc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bc6:	f7fd fc67 	bl	8000498 <__aeabi_f2d>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	ed9f 2b48 	vldr	d2, [pc, #288]	; 8002cf0 <fnd_input_update+0x218>
 8002bd2:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8002cf8 <fnd_input_update+0x220>
 8002bd6:	ec43 2b10 	vmov	d0, r2, r3
 8002bda:	f7ff ff21 	bl	8002a20 <calculate_ntc_temperature>
 8002bde:	eef0 7a40 	vmov.f32	s15, s0
 8002be2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002be6:	3303      	adds	r3, #3
 8002be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bec:	ee17 2a90 	vmov	r2, s15
 8002bf0:	b211      	sxth	r1, r2
 8002bf2:	4a43      	ldr	r2, [pc, #268]	; (8002d00 <fnd_input_update+0x228>)
 8002bf4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002bf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (NTC_END_CH - NTC_START_CH + 1); i++)
 8002bfc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c00:	3301      	adds	r3, #1
 8002c02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002c06:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d9a5      	bls.n	8002b5a <fnd_input_update+0x82>
    }
    for (uint8_t i = 0; i < (VAL_FB_END_CH - VAL_FB_START_CH + 1); i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002c14:	e01b      	b.n	8002c4e <fnd_input_update+0x176>
    {
        sys_regs.inputs[INPUT_VAL_FB_START + i] = adc_values[VAL_FB_START_CH + i];
 8002c16:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002c1a:	3309      	adds	r3, #9
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002c22:	4413      	add	r3, r2
 8002c24:	3b34      	subs	r3, #52	; 0x34
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002c2e:	3309      	adds	r3, #9
 8002c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c34:	ee17 2a90 	vmov	r2, s15
 8002c38:	b211      	sxth	r1, r2
 8002c3a:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <fnd_input_update+0x228>)
 8002c3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (VAL_FB_END_CH - VAL_FB_START_CH + 1); i++)
 8002c44:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002c4e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0df      	beq.n	8002c16 <fnd_input_update+0x13e>
    }

    uint8_t di_values[4];
    fnd_input_gpio_read_di(di_values);
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f92e 	bl	8002ebc <fnd_input_gpio_read_di>
    for (uint8_t i = 0; i < 4; i++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002c66:	e014      	b.n	8002c92 <fnd_input_update+0x1ba>
    {
        sys_regs.inputs[INPUT_DI_START + i] = di_values[i];
 8002c68:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002c6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002c70:	4413      	add	r3, r2
 8002c72:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8002c76:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002c7a:	330a      	adds	r3, #10
 8002c7c:	b211      	sxth	r1, r2
 8002c7e:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <fnd_input_update+0x228>)
 8002c80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 4; i++)
 8002c88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002c92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d9e6      	bls.n	8002c68 <fnd_input_update+0x190>
    }

    uint8_t id_values[8];
    fnd_input_gpio_read_id(id_values);
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f93b 	bl	8002f18 <fnd_input_gpio_read_id>
    for (uint8_t i = 0; i < 8; i++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002ca8:	e014      	b.n	8002cd4 <fnd_input_update+0x1fc>
    {
        sys_regs.inputs[INPUT_ID_START + i] = id_values[i];
 8002caa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002cae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8002cb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002cbc:	330e      	adds	r3, #14
 8002cbe:	b211      	sxth	r1, r2
 8002cc0:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <fnd_input_update+0x228>)
 8002cc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002cc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 8; i++)
 8002cca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002cd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002cd8:	2b07      	cmp	r3, #7
 8002cda:	d9e6      	bls.n	8002caa <fnd_input_update+0x1d2>
    }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3740      	adds	r7, #64	; 0x40
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	33333333 	.word	0x33333333
 8002cec:	40affe33 	.word	0x40affe33
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	40ab1c00 	.word	0x40ab1c00
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	40140000 	.word	0x40140000
 8002d00:	2000be84 	.word	0x2000be84
 8002d04:	00000000 	.word	0x00000000
 8002d08:	40affe00 	.word	0x40affe00
 8002d0c:	00000000 	.word	0x00000000
 8002d10:	40a9c800 	.word	0x40a9c800

08002d14 <fnd_input_i2c_read_sht>:

void fnd_input_i2c_read_sht(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
    float sht1_values[2] = {0};
 8002d1a:	f107 030c 	add.w	r3, r7, #12
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
    float sht2_values[2] = {0};
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef status = fnd_input_i2c_read_sht_temp_humi(0, sht1_values);
 8002d2c:	f107 030c 	add.w	r3, r7, #12
 8002d30:	4619      	mov	r1, r3
 8002d32:	2000      	movs	r0, #0
 8002d34:	f000 f98e 	bl	8003054 <fnd_input_i2c_read_sht_temp_humi>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < 2; i++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	75fb      	strb	r3, [r7, #23]
 8002d40:	e020      	b.n	8002d84 <fnd_input_i2c_read_sht+0x70>
    {
        sys_regs.inputs[INPUT_SHT1_START + i] = (status == HAL_OK) ? (int16_t)(sht1_values[i] * 10) : (-1);
 8002d42:	7d7b      	ldrb	r3, [r7, #21]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d111      	bne.n	8002d6c <fnd_input_i2c_read_sht+0x58>
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	f107 0218 	add.w	r2, r7, #24
 8002d50:	4413      	add	r3, r2
 8002d52:	3b0c      	subs	r3, #12
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d64:	ee17 3a90 	vmov	r3, s15
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	e001      	b.n	8002d70 <fnd_input_i2c_read_sht+0x5c>
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	3316      	adds	r3, #22
 8002d74:	491e      	ldr	r1, [pc, #120]	; (8002df0 <fnd_input_i2c_read_sht+0xdc>)
 8002d76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	3301      	adds	r3, #1
 8002d82:	75fb      	strb	r3, [r7, #23]
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d9db      	bls.n	8002d42 <fnd_input_i2c_read_sht+0x2e>
    }
    status = fnd_input_i2c_read_sht_temp_humi(1, sht2_values);
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f000 f960 	bl	8003054 <fnd_input_i2c_read_sht_temp_humi>
 8002d94:	4603      	mov	r3, r0
 8002d96:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < 2; i++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	75bb      	strb	r3, [r7, #22]
 8002d9c:	e020      	b.n	8002de0 <fnd_input_i2c_read_sht+0xcc>
    {
        sys_regs.inputs[INPUT_SHT2_START + i] = (status == HAL_OK) ? (int16_t)(sht2_values[i] * 10) : (-1);
 8002d9e:	7d7b      	ldrb	r3, [r7, #21]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d111      	bne.n	8002dc8 <fnd_input_i2c_read_sht+0xb4>
 8002da4:	7dbb      	ldrb	r3, [r7, #22]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	f107 0218 	add.w	r2, r7, #24
 8002dac:	4413      	add	r3, r2
 8002dae:	3b14      	subs	r3, #20
 8002db0:	edd3 7a00 	vldr	s15, [r3]
 8002db4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc0:	ee17 3a90 	vmov	r3, s15
 8002dc4:	b21a      	sxth	r2, r3
 8002dc6:	e001      	b.n	8002dcc <fnd_input_i2c_read_sht+0xb8>
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	7dbb      	ldrb	r3, [r7, #22]
 8002dce:	3318      	adds	r3, #24
 8002dd0:	4907      	ldr	r1, [pc, #28]	; (8002df0 <fnd_input_i2c_read_sht+0xdc>)
 8002dd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++)
 8002dda:	7dbb      	ldrb	r3, [r7, #22]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	75bb      	strb	r3, [r7, #22]
 8002de0:	7dbb      	ldrb	r3, [r7, #22]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d9db      	bls.n	8002d9e <fnd_input_i2c_read_sht+0x8a>
    }
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000be84 	.word	0x2000be84

08002df4 <get_channel_average>:
#define DATA_PER_CH 10

uint32_t fnd_adc_data[ADC_TOTAL_CH * DATA_PER_CH];

static float get_channel_average(uint8_t ch_idx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
    float sum = 0;
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	72fb      	strb	r3, [r7, #11]
 8002e08:	e017      	b.n	8002e3a <get_channel_average+0x46>
    {
        sum = sum + fnd_adc_data[ch_idx + i * ADC_TOTAL_CH];
 8002e0a:	79f9      	ldrb	r1, [r7, #7]
 8002e0c:	7afa      	ldrb	r2, [r7, #11]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <get_channel_average+0x6c>)
 8002e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e28:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e30:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002e34:	7afb      	ldrb	r3, [r7, #11]
 8002e36:	3301      	adds	r3, #1
 8002e38:	72fb      	strb	r3, [r7, #11]
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
 8002e3c:	2b09      	cmp	r3, #9
 8002e3e:	d9e4      	bls.n	8002e0a <get_channel_average+0x16>
    }
    return sum / DATA_PER_CH;
 8002e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e4c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002e50:	eeb0 0a67 	vmov.f32	s0, s15
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	2000cccc 	.word	0x2000cccc

08002e64 <fnd_input_adc_init>:

void fnd_input_adc_init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, fnd_adc_data, ADC_TOTAL_CH * DATA_PER_CH);
 8002e68:	2282      	movs	r2, #130	; 0x82
 8002e6a:	4903      	ldr	r1, [pc, #12]	; (8002e78 <fnd_input_adc_init+0x14>)
 8002e6c:	4803      	ldr	r0, [pc, #12]	; (8002e7c <fnd_input_adc_init+0x18>)
 8002e6e:	f000 fdc1 	bl	80039f4 <HAL_ADC_Start_DMA>
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000cccc 	.word	0x2000cccc
 8002e7c:	2000af40 	.word	0x2000af40

08002e80 <fnd_input_adc_read_values>:

void fnd_input_adc_read_values(float *values)
{
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 10; i++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e00e      	b.n	8002eac <fnd_input_adc_read_values+0x2c>
    {
        values[i] = get_channel_average(i);
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	18d4      	adds	r4, r2, r3
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ffab 	bl	8002df4 <get_channel_average>
 8002e9e:	eef0 7a40 	vmov.f32	s15, s0
 8002ea2:	edc4 7a00 	vstr	s15, [r4]
    for (uint8_t i = 0; i < 10; i++)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b09      	cmp	r3, #9
 8002eb0:	d9ed      	bls.n	8002e8e <fnd_input_adc_read_values+0xe>
    }
}
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd90      	pop	{r4, r7, pc}

08002ebc <fnd_input_gpio_read_di>:

GPIO_TypeDef *gpio_input_port[4] = {DI_01_GPIO_Port, DI_02_GPIO_Port, DI_03_GPIO_Port, DI_04_GPIO_Port};
uint16_t gpio_input_pin[4] = {DI_01_Pin, DI_02_Pin, DI_03_Pin, DI_04_Pin};

void fnd_input_gpio_read_di(uint8_t *values)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e019      	b.n	8002efe <fnd_input_gpio_read_di+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_input_port[i], gpio_input_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <fnd_input_gpio_read_di+0x54>)
 8002ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	490f      	ldr	r1, [pc, #60]	; (8002f14 <fnd_input_gpio_read_di+0x58>)
 8002ed6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f002 f853 	bl	8004f88 <HAL_GPIO_ReadPin>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2d9      	uxtb	r1, r3
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	460a      	mov	r2, r1
 8002ef6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	3301      	adds	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d9e2      	bls.n	8002eca <fnd_input_gpio_read_di+0xe>
    }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000034 	.word	0x20000034
 8002f14:	20000044 	.word	0x20000044

08002f18 <fnd_input_gpio_read_id>:

void fnd_input_gpio_read_id(uint8_t *values)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ID_LD_GPIO_Port, ID_LD_Pin, GPIO_PIN_RESET);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2120      	movs	r1, #32
 8002f24:	4821      	ldr	r0, [pc, #132]	; (8002fac <fnd_input_gpio_read_id+0x94>)
 8002f26:	f002 f847 	bl	8004fb8 <HAL_GPIO_WritePin>
    osDelay(1);
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f006 fc68 	bl	8009800 <osDelay>
    HAL_GPIO_WritePin(ID_LD_GPIO_Port, ID_LD_Pin, GPIO_PIN_SET);
 8002f30:	2201      	movs	r2, #1
 8002f32:	2120      	movs	r1, #32
 8002f34:	481d      	ldr	r0, [pc, #116]	; (8002fac <fnd_input_gpio_read_id+0x94>)
 8002f36:	f002 f83f 	bl	8004fb8 <HAL_GPIO_WritePin>
    values[7] = HAL_GPIO_ReadPin(ID_DATA_GPIO_Port, ID_DATA_Pin) == GPIO_PIN_SET ? 1 : 0;
 8002f3a:	2110      	movs	r1, #16
 8002f3c:	481b      	ldr	r0, [pc, #108]	; (8002fac <fnd_input_gpio_read_id+0x94>)
 8002f3e:	f002 f823 	bl	8004f88 <HAL_GPIO_ReadPin>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3307      	adds	r3, #7
 8002f52:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 7; i++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	e020      	b.n	8002f9c <fnd_input_gpio_read_id+0x84>
    {
        HAL_GPIO_WritePin(ID_CLK_GPIO_Port, ID_CLK_Pin, GPIO_PIN_RESET);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	4813      	ldr	r0, [pc, #76]	; (8002fac <fnd_input_gpio_read_id+0x94>)
 8002f60:	f002 f82a 	bl	8004fb8 <HAL_GPIO_WritePin>
        osDelay(1);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f006 fc4b 	bl	8009800 <osDelay>
        HAL_GPIO_WritePin(ID_CLK_GPIO_Port, ID_CLK_Pin, GPIO_PIN_SET);
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	480f      	ldr	r0, [pc, #60]	; (8002fac <fnd_input_gpio_read_id+0x94>)
 8002f70:	f002 f822 	bl	8004fb8 <HAL_GPIO_WritePin>
        values[6 - i] = HAL_GPIO_ReadPin(ID_DATA_GPIO_Port, ID_DATA_Pin) == GPIO_PIN_SET ? 1 : 0;
 8002f74:	2110      	movs	r1, #16
 8002f76:	480d      	ldr	r0, [pc, #52]	; (8002fac <fnd_input_gpio_read_id+0x94>)
 8002f78:	f002 f806 	bl	8004f88 <HAL_GPIO_ReadPin>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	f1c3 0306 	rsb	r3, r3, #6
 8002f8e:	4619      	mov	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	440b      	add	r3, r1
 8002f94:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 7; i++)
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d9db      	bls.n	8002f5a <fnd_input_gpio_read_id+0x42>
    }
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000

08002fb0 <sht_write_cmd>:
#define I2C_TIMEOUT 100

I2C_HandleTypeDef *sht_i2c[2] = {&hi2c1, &hi2c3};

static HAL_StatusTypeDef sht_write_cmd(I2C_HandleTypeDef *hi2c, uint16_t cmd)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
    uint8_t buff[2] = {cmd >> 8, cmd};
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	733b      	strb	r3, [r7, #12]
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(hi2c, SHT_ADDR, buff, 2, I2C_TIMEOUT);
 8002fcc:	f107 020c 	add.w	r2, r7, #12
 8002fd0:	2364      	movs	r3, #100	; 0x64
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	2188      	movs	r1, #136	; 0x88
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f002 f965 	bl	80052a8 <HAL_I2C_Master_Transmit>
 8002fde:	4603      	mov	r3, r0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <calculate_crc>:

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xff;
 8002ff2:	23ff      	movs	r3, #255	; 0xff
 8002ff4:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < length; i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	e020      	b.n	800303e <calculate_crc+0x56>
    {
        crc ^= data[i];
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	4053      	eors	r3, r2
 8003008:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e010      	b.n	8003032 <calculate_crc+0x4a>
        {
            if ((crc & 0x80u) != 0)
 8003010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	da06      	bge.n	8003026 <calculate_crc+0x3e>
            {
                crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8003022:	75fb      	strb	r3, [r7, #23]
 8003024:	e002      	b.n	800302c <calculate_crc+0x44>
            }
            else
            {
                crc <<= 1u;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b07      	cmp	r3, #7
 8003036:	d9eb      	bls.n	8003010 <calculate_crc+0x28>
    for (size_t i = 0; i < length; i++)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	3301      	adds	r3, #1
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d3da      	bcc.n	8002ffc <calculate_crc+0x14>
            }
        }
    }
    return crc;
 8003046:	7dfb      	ldrb	r3, [r7, #23]
}
 8003048:	4618      	mov	r0, r3
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <fnd_input_i2c_read_sht_temp_humi>:

HAL_StatusTypeDef fnd_input_i2c_read_sht_temp_humi(uint8_t idx, float *values)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af02      	add	r7, sp, #8
 800305a:	4603      	mov	r3, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	71fb      	strb	r3, [r7, #7]
    uint8_t buff[6] = {0};
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	2300      	movs	r3, #0
 8003066:	823b      	strh	r3, [r7, #16]

    if (HAL_I2C_IsDeviceReady(sht_i2c[idx], SHT_ADDR, 10, I2C_TIMEOUT) != HAL_OK)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	4a46      	ldr	r2, [pc, #280]	; (8003184 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 800306c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003070:	2364      	movs	r3, #100	; 0x64
 8003072:	220a      	movs	r2, #10
 8003074:	2188      	movs	r1, #136	; 0x88
 8003076:	f002 fc3b 	bl	80058f0 <HAL_I2C_IsDeviceReady>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00c      	beq.n	800309a <fnd_input_i2c_read_sht_temp_humi+0x46>
    {
        if (idx == 0)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <fnd_input_i2c_read_sht_temp_humi+0x38>
        {
            MX_I2C1_Init();
 8003086:	f7fe fb03 	bl	8001690 <MX_I2C1_Init>
 800308a:	e004      	b.n	8003096 <fnd_input_i2c_read_sht_temp_humi+0x42>
        }
        else if (idx == 1)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <fnd_input_i2c_read_sht_temp_humi+0x42>
        {
            MX_I2C3_Init();
 8003092:	f7fe fb2b 	bl	80016ec <MX_I2C3_Init>
        }
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e070      	b.n	800317c <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (sht_write_cmd(sht_i2c[idx], 0x240B) != HAL_OK)
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	4a39      	ldr	r2, [pc, #228]	; (8003184 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	f242 410b 	movw	r1, #9227	; 0x240b
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff82 	bl	8002fb0 <sht_write_cmd>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <fnd_input_i2c_read_sht_temp_humi+0x62>
    {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e062      	b.n	800317c <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    osDelay(50);
 80030b6:	2032      	movs	r0, #50	; 0x32
 80030b8:	f006 fba2 	bl	8009800 <osDelay>

    if (HAL_I2C_Master_Receive(sht_i2c[idx], SHT_ADDR | 0x01, buff, 6, I2C_TIMEOUT) != HAL_OK)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	4a31      	ldr	r2, [pc, #196]	; (8003184 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 80030c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80030c4:	f107 020c 	add.w	r2, r7, #12
 80030c8:	2364      	movs	r3, #100	; 0x64
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2306      	movs	r3, #6
 80030ce:	2189      	movs	r1, #137	; 0x89
 80030d0:	f002 f9e8 	bl	80054a4 <HAL_I2C_Master_Receive>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <fnd_input_i2c_read_sht_temp_humi+0x8a>
    {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e04e      	b.n	800317c <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (calculate_crc(buff, 2) == buff[2] && calculate_crc(&buff[3], 2) == buff[5])
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	2102      	movs	r1, #2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff7f 	bl	8002fe8 <calculate_crc>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	7bbb      	ldrb	r3, [r7, #14]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d142      	bne.n	800317a <fnd_input_i2c_read_sht_temp_humi+0x126>
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	3303      	adds	r3, #3
 80030fa:	2102      	movs	r1, #2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff73 	bl	8002fe8 <calculate_crc>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	7c7b      	ldrb	r3, [r7, #17]
 8003108:	429a      	cmp	r2, r3
 800310a:	d136      	bne.n	800317a <fnd_input_i2c_read_sht_temp_humi+0x126>
    {
        uint16_t temp_value = ((uint16_t)buff[0] << 8) | buff[1];
 800310c:	7b3b      	ldrb	r3, [r7, #12]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	b21a      	sxth	r2, r3
 8003112:	7b7b      	ldrb	r3, [r7, #13]
 8003114:	b21b      	sxth	r3, r3
 8003116:	4313      	orrs	r3, r2
 8003118:	b21b      	sxth	r3, r3
 800311a:	82fb      	strh	r3, [r7, #22]
        values[0] = -45 + 175 * ((float)temp_value / 65535);
 800311c:	8afb      	ldrh	r3, [r7, #22]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003126:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003188 <fnd_input_i2c_read_sht_temp_humi+0x134>
 800312a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800312e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800318c <fnd_input_i2c_read_sht_temp_humi+0x138>
 8003132:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003136:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003190 <fnd_input_i2c_read_sht_temp_humi+0x13c>
 800313a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	edc3 7a00 	vstr	s15, [r3]

        uint16_t humi_value = ((uint16_t)buff[3] << 8) | buff[4];
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	b21a      	sxth	r2, r3
 800314a:	7c3b      	ldrb	r3, [r7, #16]
 800314c:	b21b      	sxth	r3, r3
 800314e:	4313      	orrs	r3, r2
 8003150:	b21b      	sxth	r3, r3
 8003152:	82bb      	strh	r3, [r7, #20]
        values[1] = 100 * ((float)humi_value / 65535);
 8003154:	8abb      	ldrh	r3, [r7, #20]
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800315e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003188 <fnd_input_i2c_read_sht_temp_humi+0x134>
 8003162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	3304      	adds	r3, #4
 800316a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003194 <fnd_input_i2c_read_sht_temp_humi+0x140>
 800316e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003172:	edc3 7a00 	vstr	s15, [r3]
        return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <fnd_input_i2c_read_sht_temp_humi+0x128>
    }
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	2000004c 	.word	0x2000004c
 8003188:	477fff00 	.word	0x477fff00
 800318c:	432f0000 	.word	0x432f0000
 8003190:	42340000 	.word	0x42340000
 8003194:	42c80000 	.word	0x42c80000

08003198 <fnd_input_tim_input_capture_init>:
#include "tim.h"

uint16_t spd_pulse[2];

void fnd_input_tim_input_capture_init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800319c:	2100      	movs	r1, #0
 800319e:	4804      	ldr	r0, [pc, #16]	; (80031b0 <fnd_input_tim_input_capture_init+0x18>)
 80031a0:	f003 feb8 	bl	8006f14 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80031a4:	2104      	movs	r1, #4
 80031a6:	4802      	ldr	r0, [pc, #8]	; (80031b0 <fnd_input_tim_input_capture_init+0x18>)
 80031a8:	f003 feb4 	bl	8006f14 <HAL_TIM_IC_Start_IT>
}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	2000b15c 	.word	0x2000b15c

080031b4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7f1b      	ldrb	r3, [r3, #28]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d106      	bne.n	80031d2 <HAL_TIM_IC_CaptureCallback+0x1e>
    {
        spd_pulse[0]++;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80031ce:	801a      	strh	r2, [r3, #0]
    }
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
    {
        spd_pulse[1]++;
    }
}
 80031d0:	e009      	b.n	80031e6 <HAL_TIM_IC_CaptureCallback+0x32>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7f1b      	ldrb	r3, [r3, #28]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d105      	bne.n	80031e6 <HAL_TIM_IC_CaptureCallback+0x32>
        spd_pulse[1]++;
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80031dc:	885b      	ldrh	r3, [r3, #2]
 80031de:	3301      	adds	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80031e4:	805a      	strh	r2, [r3, #2]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	2000ced4 	.word	0x2000ced4

080031f8 <fnd_output_init>:
#include "fnd_output.h"
#include "fnd_com.h"

void fnd_output_init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
    fnd_output_pwm_init();
 80031fc:	f000 f894 	bl	8003328 <fnd_output_pwm_init>
    fnd_output_stepper_init();
 8003200:	f000 fab8 	bl	8003774 <fnd_output_stepper_init>
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}

08003208 <fnd_output_update>:

void fnd_output_update(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
    uint8_t do_value[6] = {0};
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	2300      	movs	r3, #0
 8003214:	833b      	strh	r3, [r7, #24]
    for (uint8_t i = 0; i < 6; i++)
 8003216:	2300      	movs	r3, #0
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e014      	b.n	8003246 <fnd_output_update+0x3e>
    {
        do_value[i] = sys_regs.inputs[OUTPUT_DO_START + i] == 0 ? 0 : 1;
 800321c:	7ffb      	ldrb	r3, [r7, #31]
 800321e:	3364      	adds	r3, #100	; 0x64
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <fnd_output_update+0xc8>)
 8003222:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003226:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	bf14      	ite	ne
 800322e:	2301      	movne	r3, #1
 8003230:	2300      	moveq	r3, #0
 8003232:	b2da      	uxtb	r2, r3
 8003234:	7ffb      	ldrb	r3, [r7, #31]
 8003236:	f107 0120 	add.w	r1, r7, #32
 800323a:	440b      	add	r3, r1
 800323c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 6; i++)
 8003240:	7ffb      	ldrb	r3, [r7, #31]
 8003242:	3301      	adds	r3, #1
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	7ffb      	ldrb	r3, [r7, #31]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d9e7      	bls.n	800321c <fnd_output_update+0x14>
    }
    fnd_output_gpio_write_do(do_value);
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f83f 	bl	80032d4 <fnd_output_gpio_write_do>

    uint16_t pwm_value[3];
    for (uint8_t i = 0; i < 3; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	77bb      	strb	r3, [r7, #30]
 800325a:	e011      	b.n	8003280 <fnd_output_update+0x78>
    {
        pwm_value[i] = (uint16_t)sys_regs.inputs[OUTPUT_PWM_START + i];
 800325c:	7fbb      	ldrb	r3, [r7, #30]
 800325e:	336a      	adds	r3, #106	; 0x6a
 8003260:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <fnd_output_update+0xc8>)
 8003262:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003266:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800326a:	7fbb      	ldrb	r3, [r7, #30]
 800326c:	b292      	uxth	r2, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	f107 0120 	add.w	r1, r7, #32
 8003274:	440b      	add	r3, r1
 8003276:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < 3; i++)
 800327a:	7fbb      	ldrb	r3, [r7, #30]
 800327c:	3301      	adds	r3, #1
 800327e:	77bb      	strb	r3, [r7, #30]
 8003280:	7fbb      	ldrb	r3, [r7, #30]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d9ea      	bls.n	800325c <fnd_output_update+0x54>
    }
    fnd_output_pwm_write_value(pwm_value);
 8003286:	f107 030c 	add.w	r3, r7, #12
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f860 	bl	8003350 <fnd_output_pwm_write_value>

    uint16_t stepper_value[4];
    for (uint8_t i = 0; i < 4; i++)
 8003290:	2300      	movs	r3, #0
 8003292:	777b      	strb	r3, [r7, #29]
 8003294:	e011      	b.n	80032ba <fnd_output_update+0xb2>
    {
        stepper_value[i] = (uint16_t)sys_regs.inputs[OUTPUT_STEPPER_START + i];
 8003296:	7f7b      	ldrb	r3, [r7, #29]
 8003298:	336d      	adds	r3, #109	; 0x6d
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <fnd_output_update+0xc8>)
 800329c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032a0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80032a4:	7f7b      	ldrb	r3, [r7, #29]
 80032a6:	b292      	uxth	r2, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	f107 0120 	add.w	r1, r7, #32
 80032ae:	440b      	add	r3, r1
 80032b0:	f823 2c1c 	strh.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 4; i++)
 80032b4:	7f7b      	ldrb	r3, [r7, #29]
 80032b6:	3301      	adds	r3, #1
 80032b8:	777b      	strb	r3, [r7, #29]
 80032ba:	7f7b      	ldrb	r3, [r7, #29]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d9ea      	bls.n	8003296 <fnd_output_update+0x8e>
    }
    fnd_output_stepper_set_position(stepper_value);
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fad8 	bl	8003878 <fnd_output_stepper_set_position>
 80032c8:	bf00      	nop
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	2000be84 	.word	0x2000be84

080032d4 <fnd_output_gpio_write_do>:

GPIO_TypeDef *relay_port[6] = {RLY_01_GPIO_Port, RLY_02_GPIO_Port, RLY_03_GPIO_Port, RLY_04_GPIO_Port, RLY_05_GPIO_Port, RLY_06_GPIO_Port};
uint16_t relay_pin[6] = {RLY_01_Pin, RLY_02_Pin, RLY_03_Pin, RLY_04_Pin, RLY_05_Pin, RLY_06_Pin};

void fnd_output_gpio_write_do(uint8_t *values)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 6; i++)
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
 80032e0:	e016      	b.n	8003310 <fnd_output_gpio_write_do+0x3c>
    {
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <fnd_output_gpio_write_do+0x4c>)
 80032e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <fnd_output_gpio_write_do+0x50>)
 80032ee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	bf14      	ite	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	2300      	moveq	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	f001 fe57 	bl	8004fb8 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 6; i++)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	3301      	adds	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b05      	cmp	r3, #5
 8003314:	d9e5      	bls.n	80032e2 <fnd_output_gpio_write_do+0xe>
    }
}
 8003316:	bf00      	nop
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000054 	.word	0x20000054
 8003324:	2000006c 	.word	0x2000006c

08003328 <fnd_output_pwm_init>:
#include "fnd_output.h"
#include "tim.h"

void fnd_output_pwm_init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800332c:	2100      	movs	r1, #0
 800332e:	4806      	ldr	r0, [pc, #24]	; (8003348 <fnd_output_pwm_init+0x20>)
 8003330:	f003 fcce 	bl	8006cd0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003334:	2104      	movs	r1, #4
 8003336:	4804      	ldr	r0, [pc, #16]	; (8003348 <fnd_output_pwm_init+0x20>)
 8003338:	f003 fcca 	bl	8006cd0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800333c:	2104      	movs	r1, #4
 800333e:	4803      	ldr	r0, [pc, #12]	; (800334c <fnd_output_pwm_init+0x24>)
 8003340:	f003 fcc6 	bl	8006cd0 <HAL_TIM_PWM_Start>
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	2000b1a4 	.word	0x2000b1a4
 800334c:	2000b1ec 	.word	0x2000b1ec

08003350 <fnd_output_pwm_write_value>:

void fnd_output_pwm_write_value(uint16_t *values)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
    if (values[0] < 1000)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003360:	d204      	bcs.n	800336c <fnd_output_pwm_write_value+0x1c>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t)(values[0] / 1));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	881a      	ldrh	r2, [r3, #0]
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <fnd_output_pwm_write_value+0x58>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (values[1] < 1000)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3302      	adds	r3, #2
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003376:	d205      	bcs.n	8003384 <fnd_output_pwm_write_value+0x34>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t)(values[1] / 1));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3302      	adds	r3, #2
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <fnd_output_pwm_write_value+0x58>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if (values[2] < 1000)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800338e:	d205      	bcs.n	800339c <fnd_output_pwm_write_value+0x4c>
    {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint16_t)(values[2] / 1));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	881a      	ldrh	r2, [r3, #0]
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <fnd_output_pwm_write_value+0x5c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	2000b1a4 	.word	0x2000b1a4
 80033ac:	2000b1ec 	.word	0x2000b1ec

080033b0 <fnd_output_stepper_tick>:
                            STEP_A5_Pin, STEP_A6_Pin, STEP_A7_Pin, STEP_A8_Pin,
                            STEP_B1_Pin, STEP_B2_Pin, STEP_B3_Pin, STEP_B4_Pin,
                            STEP_B5_Pin, STEP_B6_Pin, STEP_B7_Pin, STEP_B8_Pin};

static void fnd_output_stepper_tick(stepper_motor *motor)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    if (motor->current_pos == motor->target_pos)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8c1a      	ldrh	r2, [r3, #32]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8bdb      	ldrh	r3, [r3, #30]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d109      	bne.n	80033d8 <fnd_output_stepper_tick+0x28>
    {
        motor->mode = STOP;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	761a      	strb	r2, [r3, #24]
        motor->up_excite_cnt = 0;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	835a      	strh	r2, [r3, #26]
        motor->down_excite_cnt = 0;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	839a      	strh	r2, [r3, #28]
 80033d6:	e034      	b.n	8003442 <fnd_output_stepper_tick+0x92>
    }
    else if (motor->current_pos < motor->target_pos)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8c1a      	ldrh	r2, [r3, #32]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8bdb      	ldrh	r3, [r3, #30]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d214      	bcs.n	800340e <fnd_output_stepper_tick+0x5e>
    {
        motor->down_excite_cnt = 0;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	839a      	strh	r2, [r3, #28]
        if (motor->up_excite_cnt < EXCITE_TICKS)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8b5b      	ldrh	r3, [r3, #26]
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d809      	bhi.n	8003406 <fnd_output_stepper_tick+0x56>
        {
            motor->mode = UP_EXCITE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	761a      	strb	r2, [r3, #24]
            motor->up_excite_cnt = motor->up_excite_cnt + 1;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8b5b      	ldrh	r3, [r3, #26]
 80033fc:	3301      	adds	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	835a      	strh	r2, [r3, #26]
 8003404:	e01d      	b.n	8003442 <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = UP;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	761a      	strb	r2, [r3, #24]
 800340c:	e019      	b.n	8003442 <fnd_output_stepper_tick+0x92>
        }
    }
    else if (motor->current_pos > motor->target_pos)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8c1a      	ldrh	r2, [r3, #32]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8bdb      	ldrh	r3, [r3, #30]
 8003416:	429a      	cmp	r2, r3
 8003418:	d913      	bls.n	8003442 <fnd_output_stepper_tick+0x92>
    {
        motor->up_excite_cnt = 0;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	835a      	strh	r2, [r3, #26]
        if (motor->down_excite_cnt < EXCITE_TICKS)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8b9b      	ldrh	r3, [r3, #28]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d809      	bhi.n	800343c <fnd_output_stepper_tick+0x8c>
        {
            motor->mode = DOWN_EXCITE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	761a      	strb	r2, [r3, #24]
            motor->down_excite_cnt = motor->down_excite_cnt + 1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8b9b      	ldrh	r3, [r3, #28]
 8003432:	3301      	adds	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	839a      	strh	r2, [r3, #28]
 800343a:	e002      	b.n	8003442 <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = DOWN;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2204      	movs	r2, #4
 8003440:	761a      	strb	r2, [r3, #24]
        }
    }

    if (motor->mode == STOP)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7e1b      	ldrb	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d116      	bne.n	8003478 <fnd_output_stepper_tick+0xc8>
    {
        for (uint8_t i = 0; i < 4; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e00f      	b.n	8003470 <fnd_output_stepper_tick+0xc0>
        {
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003462:	2200      	movs	r2, #0
 8003464:	4619      	mov	r1, r3
 8003466:	f001 fda7 	bl	8004fb8 <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	3301      	adds	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d9ec      	bls.n	8003450 <fnd_output_stepper_tick+0xa0>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}
 8003476:	e179      	b.n	800376c <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == UP_EXCITE || motor->mode == DOWN_EXCITE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7e1b      	ldrb	r3, [r3, #24]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d003      	beq.n	8003488 <fnd_output_stepper_tick+0xd8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7e1b      	ldrb	r3, [r3, #24]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d15c      	bne.n	8003542 <fnd_output_stepper_tick+0x192>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8a19      	ldrh	r1, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <fnd_output_stepper_tick+0xf8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800349c:	2b01      	cmp	r3, #1
 800349e:	d003      	beq.n	80034a8 <fnd_output_stepper_tick+0xf8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034a4:	2b07      	cmp	r3, #7
 80034a6:	d101      	bne.n	80034ac <fnd_output_stepper_tick+0xfc>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <fnd_output_stepper_tick+0xfe>
 80034ac:	2300      	movs	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	f001 fd81 	bl	8004fb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6858      	ldr	r0, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8a59      	ldrh	r1, [r3, #18]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d007      	beq.n	80034d6 <fnd_output_stepper_tick+0x126>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d003      	beq.n	80034d6 <fnd_output_stepper_tick+0x126>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d101      	bne.n	80034da <fnd_output_stepper_tick+0x12a>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <fnd_output_stepper_tick+0x12c>
 80034da:	2300      	movs	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	f001 fd6a 	bl	8004fb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6898      	ldr	r0, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8a99      	ldrh	r1, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d007      	beq.n	8003504 <fnd_output_stepper_tick+0x154>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d003      	beq.n	8003504 <fnd_output_stepper_tick+0x154>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003500:	2b05      	cmp	r3, #5
 8003502:	d101      	bne.n	8003508 <fnd_output_stepper_tick+0x158>
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <fnd_output_stepper_tick+0x15a>
 8003508:	2300      	movs	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	f001 fd53 	bl	8004fb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68d8      	ldr	r0, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8ad9      	ldrh	r1, [r3, #22]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800351e:	2b05      	cmp	r3, #5
 8003520:	d007      	beq.n	8003532 <fnd_output_stepper_tick+0x182>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003526:	2b06      	cmp	r3, #6
 8003528:	d003      	beq.n	8003532 <fnd_output_stepper_tick+0x182>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800352e:	2b07      	cmp	r3, #7
 8003530:	d101      	bne.n	8003536 <fnd_output_stepper_tick+0x186>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <fnd_output_stepper_tick+0x188>
 8003536:	2300      	movs	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	f001 fd3c 	bl	8004fb8 <HAL_GPIO_WritePin>
}
 8003540:	e114      	b.n	800376c <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == UP)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7e1b      	ldrb	r3, [r3, #24]
 8003546:	2b02      	cmp	r3, #2
 8003548:	f040 8086 	bne.w	8003658 <fnd_output_stepper_tick+0x2a8>
        for (uint8_t i = 0; i < 4; i++)
 800354c:	2300      	movs	r3, #0
 800354e:	73bb      	strb	r3, [r7, #14]
 8003550:	e00f      	b.n	8003572 <fnd_output_stepper_tick+0x1c2>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003552:	7bba      	ldrb	r2, [r7, #14]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800355a:	7bba      	ldrb	r2, [r7, #14]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3208      	adds	r2, #8
 8003560:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003564:	2200      	movs	r2, #0
 8003566:	4619      	mov	r1, r3
 8003568:	f001 fd26 	bl	8004fb8 <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 800356c:	7bbb      	ldrb	r3, [r7, #14]
 800356e:	3301      	adds	r3, #1
 8003570:	73bb      	strb	r3, [r7, #14]
 8003572:	7bbb      	ldrb	r3, [r7, #14]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d9ec      	bls.n	8003552 <fnd_output_stepper_tick+0x1a2>
        motor->current_pos = motor->current_pos + 1;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	8c1b      	ldrh	r3, [r3, #32]
 800357c:	3301      	adds	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	841a      	strh	r2, [r3, #32]
        motor->phase = (motor->phase + 1) % 8;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003588:	3301      	adds	r3, #1
 800358a:	425a      	negs	r2, r3
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	f002 0207 	and.w	r2, r2, #7
 8003594:	bf58      	it	pl
 8003596:	4253      	negpl	r3, r2
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8a19      	ldrh	r1, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <fnd_output_stepper_tick+0x20e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d003      	beq.n	80035be <fnd_output_stepper_tick+0x20e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035ba:	2b07      	cmp	r3, #7
 80035bc:	d101      	bne.n	80035c2 <fnd_output_stepper_tick+0x212>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <fnd_output_stepper_tick+0x214>
 80035c2:	2300      	movs	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	f001 fcf6 	bl	8004fb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6858      	ldr	r0, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8a59      	ldrh	r1, [r3, #18]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d007      	beq.n	80035ec <fnd_output_stepper_tick+0x23c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d003      	beq.n	80035ec <fnd_output_stepper_tick+0x23c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d101      	bne.n	80035f0 <fnd_output_stepper_tick+0x240>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <fnd_output_stepper_tick+0x242>
 80035f0:	2300      	movs	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	f001 fcdf 	bl	8004fb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6898      	ldr	r0, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8a99      	ldrh	r1, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003606:	2b03      	cmp	r3, #3
 8003608:	d007      	beq.n	800361a <fnd_output_stepper_tick+0x26a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800360e:	2b04      	cmp	r3, #4
 8003610:	d003      	beq.n	800361a <fnd_output_stepper_tick+0x26a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003616:	2b05      	cmp	r3, #5
 8003618:	d101      	bne.n	800361e <fnd_output_stepper_tick+0x26e>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <fnd_output_stepper_tick+0x270>
 800361e:	2300      	movs	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	f001 fcc8 	bl	8004fb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68d8      	ldr	r0, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8ad9      	ldrh	r1, [r3, #22]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003634:	2b05      	cmp	r3, #5
 8003636:	d007      	beq.n	8003648 <fnd_output_stepper_tick+0x298>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800363c:	2b06      	cmp	r3, #6
 800363e:	d003      	beq.n	8003648 <fnd_output_stepper_tick+0x298>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003644:	2b07      	cmp	r3, #7
 8003646:	d101      	bne.n	800364c <fnd_output_stepper_tick+0x29c>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <fnd_output_stepper_tick+0x29e>
 800364c:	2300      	movs	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	f001 fcb1 	bl	8004fb8 <HAL_GPIO_WritePin>
}
 8003656:	e089      	b.n	800376c <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == DOWN)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7e1b      	ldrb	r3, [r3, #24]
 800365c:	2b04      	cmp	r3, #4
 800365e:	f040 8085 	bne.w	800376c <fnd_output_stepper_tick+0x3bc>
        for (uint8_t i = 0; i < 4; i++)
 8003662:	2300      	movs	r3, #0
 8003664:	737b      	strb	r3, [r7, #13]
 8003666:	e00f      	b.n	8003688 <fnd_output_stepper_tick+0x2d8>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003668:	7b7a      	ldrb	r2, [r7, #13]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003670:	7b7a      	ldrb	r2, [r7, #13]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800367a:	2200      	movs	r2, #0
 800367c:	4619      	mov	r1, r3
 800367e:	f001 fc9b 	bl	8004fb8 <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 8003682:	7b7b      	ldrb	r3, [r7, #13]
 8003684:	3301      	adds	r3, #1
 8003686:	737b      	strb	r3, [r7, #13]
 8003688:	7b7b      	ldrb	r3, [r7, #13]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d9ec      	bls.n	8003668 <fnd_output_stepper_tick+0x2b8>
        motor->current_pos = motor->current_pos - 1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8c1b      	ldrh	r3, [r3, #32]
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	841a      	strh	r2, [r3, #32]
        motor->phase = (motor->phase + 7) % 8;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800369e:	3307      	adds	r3, #7
 80036a0:	425a      	negs	r2, r3
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	f002 0207 	and.w	r2, r2, #7
 80036aa:	bf58      	it	pl
 80036ac:	4253      	negpl	r3, r2
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8a19      	ldrh	r1, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <fnd_output_stepper_tick+0x324>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d003      	beq.n	80036d4 <fnd_output_stepper_tick+0x324>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036d0:	2b07      	cmp	r3, #7
 80036d2:	d101      	bne.n	80036d8 <fnd_output_stepper_tick+0x328>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <fnd_output_stepper_tick+0x32a>
 80036d8:	2300      	movs	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	f001 fc6b 	bl	8004fb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6858      	ldr	r0, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8a59      	ldrh	r1, [r3, #18]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d007      	beq.n	8003702 <fnd_output_stepper_tick+0x352>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d003      	beq.n	8003702 <fnd_output_stepper_tick+0x352>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d101      	bne.n	8003706 <fnd_output_stepper_tick+0x356>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <fnd_output_stepper_tick+0x358>
 8003706:	2300      	movs	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	f001 fc54 	bl	8004fb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6898      	ldr	r0, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8a99      	ldrh	r1, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800371c:	2b03      	cmp	r3, #3
 800371e:	d007      	beq.n	8003730 <fnd_output_stepper_tick+0x380>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003724:	2b04      	cmp	r3, #4
 8003726:	d003      	beq.n	8003730 <fnd_output_stepper_tick+0x380>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800372c:	2b05      	cmp	r3, #5
 800372e:	d101      	bne.n	8003734 <fnd_output_stepper_tick+0x384>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <fnd_output_stepper_tick+0x386>
 8003734:	2300      	movs	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	f001 fc3d 	bl	8004fb8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68d8      	ldr	r0, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8ad9      	ldrh	r1, [r3, #22]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800374a:	2b05      	cmp	r3, #5
 800374c:	d007      	beq.n	800375e <fnd_output_stepper_tick+0x3ae>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003752:	2b06      	cmp	r3, #6
 8003754:	d003      	beq.n	800375e <fnd_output_stepper_tick+0x3ae>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800375a:	2b07      	cmp	r3, #7
 800375c:	d101      	bne.n	8003762 <fnd_output_stepper_tick+0x3b2>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <fnd_output_stepper_tick+0x3b4>
 8003762:	2300      	movs	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	f001 fc26 	bl	8004fb8 <HAL_GPIO_WritePin>
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <fnd_output_stepper_init>:

void fnd_output_stepper_init(void)
{
 8003774:	b490      	push	{r4, r7}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; i++)
 800377a:	2300      	movs	r3, #0
 800377c:	71fb      	strb	r3, [r7, #7]
 800377e:	e06b      	b.n	8003858 <fnd_output_stepper_init+0xe4>
    {
        for (uint8_t j = 0; j < 4; j++)
 8003780:	2300      	movs	r3, #0
 8003782:	71bb      	strb	r3, [r7, #6]
 8003784:	e025      	b.n	80037d2 <fnd_output_stepper_init+0x5e>
        {
            motor[i].gpio_port[j] = stepper_port[i * 4 + j];
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	009a      	lsls	r2, r3, #2
 800378a:	79bb      	ldrb	r3, [r7, #6]
 800378c:	4413      	add	r3, r2
 800378e:	79fa      	ldrb	r2, [r7, #7]
 8003790:	79b8      	ldrb	r0, [r7, #6]
 8003792:	4936      	ldr	r1, [pc, #216]	; (800386c <fnd_output_stepper_init+0xf8>)
 8003794:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003798:	4c35      	ldr	r4, [pc, #212]	; (8003870 <fnd_output_stepper_init+0xfc>)
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	4403      	add	r3, r0
 80037a2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
            motor[i].gpio_pin[j] = stepper_pin[i * 4 + j];
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	79bb      	ldrb	r3, [r7, #6]
 80037ac:	4413      	add	r3, r2
 80037ae:	79fa      	ldrb	r2, [r7, #7]
 80037b0:	79b9      	ldrb	r1, [r7, #6]
 80037b2:	4830      	ldr	r0, [pc, #192]	; (8003874 <fnd_output_stepper_init+0x100>)
 80037b4:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 80037b8:	482d      	ldr	r0, [pc, #180]	; (8003870 <fnd_output_stepper_init+0xfc>)
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	440b      	add	r3, r1
 80037c4:	3308      	adds	r3, #8
 80037c6:	4622      	mov	r2, r4
 80037c8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (uint8_t j = 0; j < 4; j++)
 80037cc:	79bb      	ldrb	r3, [r7, #6]
 80037ce:	3301      	adds	r3, #1
 80037d0:	71bb      	strb	r3, [r7, #6]
 80037d2:	79bb      	ldrb	r3, [r7, #6]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d9d6      	bls.n	8003786 <fnd_output_stepper_init+0x12>
        }
        motor[i].current_pos = 1200;
 80037d8:	79fa      	ldrb	r2, [r7, #7]
 80037da:	4925      	ldr	r1, [pc, #148]	; (8003870 <fnd_output_stepper_init+0xfc>)
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3320      	adds	r3, #32
 80037e8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80037ec:	801a      	strh	r2, [r3, #0]
        motor[i].down_excite_cnt = 0;
 80037ee:	79fa      	ldrb	r2, [r7, #7]
 80037f0:	491f      	ldr	r1, [pc, #124]	; (8003870 <fnd_output_stepper_init+0xfc>)
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	331c      	adds	r3, #28
 80037fe:	2200      	movs	r2, #0
 8003800:	801a      	strh	r2, [r3, #0]
        motor[i].mode = STOP;
 8003802:	79fa      	ldrb	r2, [r7, #7]
 8003804:	491a      	ldr	r1, [pc, #104]	; (8003870 <fnd_output_stepper_init+0xfc>)
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3318      	adds	r3, #24
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
        motor[i].phase = 0;
 8003816:	79fa      	ldrb	r2, [r7, #7]
 8003818:	4915      	ldr	r1, [pc, #84]	; (8003870 <fnd_output_stepper_init+0xfc>)
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3322      	adds	r3, #34	; 0x22
 8003826:	2200      	movs	r2, #0
 8003828:	801a      	strh	r2, [r3, #0]
        motor[i].target_pos = 0;
 800382a:	79fa      	ldrb	r2, [r7, #7]
 800382c:	4910      	ldr	r1, [pc, #64]	; (8003870 <fnd_output_stepper_init+0xfc>)
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	331e      	adds	r3, #30
 800383a:	2200      	movs	r2, #0
 800383c:	801a      	strh	r2, [r3, #0]
        motor[i].up_excite_cnt = 0;
 800383e:	79fa      	ldrb	r2, [r7, #7]
 8003840:	490b      	ldr	r1, [pc, #44]	; (8003870 <fnd_output_stepper_init+0xfc>)
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	331a      	adds	r3, #26
 800384e:	2200      	movs	r2, #0
 8003850:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	3301      	adds	r3, #1
 8003856:	71fb      	strb	r3, [r7, #7]
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d990      	bls.n	8003780 <fnd_output_stepper_init+0xc>
    }
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bc90      	pop	{r4, r7}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000078 	.word	0x20000078
 8003870:	2000ced8 	.word	0x2000ced8
 8003874:	200000b8 	.word	0x200000b8

08003878 <fnd_output_stepper_set_position>:

void fnd_output_stepper_set_position(uint16_t *values)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
    motor[0].target_pos = values[0];
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	881a      	ldrh	r2, [r3, #0]
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <fnd_output_stepper_set_position+0x3c>)
 8003886:	83da      	strh	r2, [r3, #30]
    motor[1].target_pos = values[1];
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	885a      	ldrh	r2, [r3, #2]
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <fnd_output_stepper_set_position+0x3c>)
 800388e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    motor[2].target_pos = values[2];
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	889a      	ldrh	r2, [r3, #4]
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <fnd_output_stepper_set_position+0x3c>)
 8003898:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    motor[3].target_pos = values[3];
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	88da      	ldrh	r2, [r3, #6]
 80038a0:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <fnd_output_stepper_set_position+0x3c>)
 80038a2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	2000ced8 	.word	0x2000ced8

080038b8 <fnd_output_stepper_10ms_tick>:

void fnd_output_stepper_10ms_tick(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
    fnd_output_stepper_tick(&motor[0]);
 80038bc:	4806      	ldr	r0, [pc, #24]	; (80038d8 <fnd_output_stepper_10ms_tick+0x20>)
 80038be:	f7ff fd77 	bl	80033b0 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[1]);
 80038c2:	4806      	ldr	r0, [pc, #24]	; (80038dc <fnd_output_stepper_10ms_tick+0x24>)
 80038c4:	f7ff fd74 	bl	80033b0 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[2]);
 80038c8:	4805      	ldr	r0, [pc, #20]	; (80038e0 <fnd_output_stepper_10ms_tick+0x28>)
 80038ca:	f7ff fd71 	bl	80033b0 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[3]);
 80038ce:	4805      	ldr	r0, [pc, #20]	; (80038e4 <fnd_output_stepper_10ms_tick+0x2c>)
 80038d0:	f7ff fd6e 	bl	80033b0 <fnd_output_stepper_tick>
}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	2000ced8 	.word	0x2000ced8
 80038dc:	2000cefc 	.word	0x2000cefc
 80038e0:	2000cf20 	.word	0x2000cf20
 80038e4:	2000cf44 	.word	0x2000cf44

080038e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_Init+0x40>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <HAL_Init+0x40>)
 80038f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_Init+0x40>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_Init+0x40>)
 80038fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_Init+0x40>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a07      	ldr	r2, [pc, #28]	; (8003928 <HAL_Init+0x40>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003910:	2003      	movs	r0, #3
 8003912:	f000 fcea 	bl	80042ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003916:	200f      	movs	r0, #15
 8003918:	f7fe f88a 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800391c:	f7fe f85c 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023c00 	.word	0x40023c00

0800392c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_IncTick+0x20>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_IncTick+0x24>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4413      	add	r3, r2
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HAL_IncTick+0x24>)
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	200000dc 	.word	0x200000dc
 8003950:	2000cf68 	.word	0x2000cf68

08003954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return uwTick;
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_GetTick+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	2000cf68 	.word	0x2000cf68

0800396c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e033      	b.n	80039ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fb7a 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d118      	bne.n	80039dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039b2:	f023 0302 	bic.w	r3, r3, #2
 80039b6:	f043 0202 	orr.w	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa68 	bl	8003e94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
 80039da:	e001      	b.n	80039e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_Start_DMA+0x1e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0e9      	b.n	8003be6 <HAL_ADC_Start_DMA+0x1f2>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d018      	beq.n	8003a5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a38:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <HAL_ADC_Start_DMA+0x1fc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a6d      	ldr	r2, [pc, #436]	; (8003bf4 <HAL_ADC_Start_DMA+0x200>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0c9a      	lsrs	r2, r3, #18
 8003a44:	4613      	mov	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a4c:	e002      	b.n	8003a54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f9      	bne.n	8003a4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a68:	d107      	bne.n	8003a7a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a78:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	f040 80a1 	bne.w	8003bcc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ab4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d106      	bne.n	8003ad8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f023 0206 	bic.w	r2, r3, #6
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
 8003ad6:	e002      	b.n	8003ade <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ae6:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <HAL_ADC_Start_DMA+0x204>)
 8003ae8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	4a43      	ldr	r2, [pc, #268]	; (8003bfc <HAL_ADC_Start_DMA+0x208>)
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	4a42      	ldr	r2, [pc, #264]	; (8003c00 <HAL_ADC_Start_DMA+0x20c>)
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	4a41      	ldr	r2, [pc, #260]	; (8003c04 <HAL_ADC_Start_DMA+0x210>)
 8003b00:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b1a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	334c      	adds	r3, #76	; 0x4c
 8003b36:	4619      	mov	r1, r3
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f000 fcb8 	bl	80044b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d12a      	bne.n	8003ba2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_ADC_Start_DMA+0x214>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d015      	beq.n	8003b82 <HAL_ADC_Start_DMA+0x18e>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <HAL_ADC_Start_DMA+0x218>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d105      	bne.n	8003b6c <HAL_ADC_Start_DMA+0x178>
 8003b60:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <HAL_ADC_Start_DMA+0x204>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <HAL_ADC_Start_DMA+0x21c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d136      	bne.n	8003be4 <HAL_ADC_Start_DMA+0x1f0>
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_ADC_Start_DMA+0x204>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d130      	bne.n	8003be4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d129      	bne.n	8003be4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	e020      	b.n	8003be4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <HAL_ADC_Start_DMA+0x214>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d11b      	bne.n	8003be4 <HAL_ADC_Start_DMA+0x1f0>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d114      	bne.n	8003be4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	e00b      	b.n	8003be4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0210 	orr.w	r2, r3, #16
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bdc:	f043 0201 	orr.w	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	431bde83 	.word	0x431bde83
 8003bf8:	40012300 	.word	0x40012300
 8003bfc:	0800408d 	.word	0x0800408d
 8003c00:	08004147 	.word	0x08004147
 8003c04:	08004163 	.word	0x08004163
 8003c08:	40012000 	.word	0x40012000
 8003c0c:	40012100 	.word	0x40012100
 8003c10:	40012200 	.word	0x40012200

08003c14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1c>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e105      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x228>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b09      	cmp	r3, #9
 8003c7a:	d925      	bls.n	8003cc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68d9      	ldr	r1, [r3, #12]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	3b1e      	subs	r3, #30
 8003c92:	2207      	movs	r2, #7
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68d9      	ldr	r1, [r3, #12]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4403      	add	r3, r0
 8003cba:	3b1e      	subs	r3, #30
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	e022      	b.n	8003d0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6919      	ldr	r1, [r3, #16]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	2207      	movs	r2, #7
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	400a      	ands	r2, r1
 8003cea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6919      	ldr	r1, [r3, #16]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4403      	add	r3, r0
 8003d04:	409a      	lsls	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b06      	cmp	r3, #6
 8003d14:	d824      	bhi.n	8003d60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	3b05      	subs	r3, #5
 8003d28:	221f      	movs	r2, #31
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	400a      	ands	r2, r1
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	4618      	mov	r0, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	3b05      	subs	r3, #5
 8003d52:	fa00 f203 	lsl.w	r2, r0, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d5e:	e04c      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d824      	bhi.n	8003db2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	3b23      	subs	r3, #35	; 0x23
 8003d7a:	221f      	movs	r2, #31
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43da      	mvns	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	400a      	ands	r2, r1
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4618      	mov	r0, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	3b23      	subs	r3, #35	; 0x23
 8003da4:	fa00 f203 	lsl.w	r2, r0, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
 8003db0:	e023      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3b41      	subs	r3, #65	; 0x41
 8003dc4:	221f      	movs	r2, #31
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4618      	mov	r0, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	3b41      	subs	r3, #65	; 0x41
 8003dee:	fa00 f203 	lsl.w	r2, r0, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <HAL_ADC_ConfigChannel+0x234>)
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <HAL_ADC_ConfigChannel+0x238>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d109      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x1cc>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b12      	cmp	r3, #18
 8003e0e:	d105      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <HAL_ADC_ConfigChannel+0x238>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d123      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x21e>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d003      	beq.n	8003e36 <HAL_ADC_ConfigChannel+0x1e6>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b11      	cmp	r3, #17
 8003e34:	d11b      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d111      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e4a:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <HAL_ADC_ConfigChannel+0x23c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <HAL_ADC_ConfigChannel+0x240>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	0c9a      	lsrs	r2, r3, #18
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e60:	e002      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f9      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40012300 	.word	0x40012300
 8003e88:	40012000 	.word	0x40012000
 8003e8c:	20000000 	.word	0x20000000
 8003e90:	431bde83 	.word	0x431bde83

08003e94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e9c:	4b79      	ldr	r3, [pc, #484]	; (8004084 <ADC_Init+0x1f0>)
 8003e9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	021a      	lsls	r2, r3, #8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6899      	ldr	r1, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	4a58      	ldr	r2, [pc, #352]	; (8004088 <ADC_Init+0x1f4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d022      	beq.n	8003f72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6899      	ldr	r1, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6899      	ldr	r1, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	e00f      	b.n	8003f92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0202 	bic.w	r2, r2, #2
 8003fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6899      	ldr	r1, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7e1b      	ldrb	r3, [r3, #24]
 8003fac:	005a      	lsls	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01b      	beq.n	8003ff8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	3b01      	subs	r3, #1
 8003fec:	035a      	lsls	r2, r3, #13
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	e007      	b.n	8004008 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004006:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	3b01      	subs	r3, #1
 8004024:	051a      	lsls	r2, r3, #20
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800403c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6899      	ldr	r1, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800404a:	025a      	lsls	r2, r3, #9
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004062:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6899      	ldr	r1, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	029a      	lsls	r2, r3, #10
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012300 	.word	0x40012300
 8004088:	0f000001 	.word	0x0f000001

0800408c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d13c      	bne.n	8004120 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d12b      	bne.n	8004118 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d127      	bne.n	8004118 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d119      	bne.n	8004118 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0220 	bic.w	r2, r2, #32
 80040f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7ff fd7b 	bl	8003c14 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800411e:	e00e      	b.n	800413e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff fd85 	bl	8003c3c <HAL_ADC_ErrorCallback>
}
 8004132:	e004      	b.n	800413e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7ff fd67 	bl	8003c28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2240      	movs	r2, #64	; 0x40
 8004174:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f043 0204 	orr.w	r2, r3, #4
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff fd5a 	bl	8003c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <__NVIC_SetPriorityGrouping+0x44>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041ac:	4013      	ands	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041c2:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <__NVIC_SetPriorityGrouping+0x44>)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	60d3      	str	r3, [r2, #12]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <__NVIC_GetPriorityGrouping+0x18>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	f003 0307 	and.w	r3, r3, #7
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	db0b      	blt.n	800421e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	4907      	ldr	r1, [pc, #28]	; (800422c <__NVIC_EnableIRQ+0x38>)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2001      	movs	r0, #1
 8004216:	fa00 f202 	lsl.w	r2, r0, r2
 800421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000e100 	.word	0xe000e100

08004230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db0a      	blt.n	800425a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	490c      	ldr	r1, [pc, #48]	; (800427c <__NVIC_SetPriority+0x4c>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	440b      	add	r3, r1
 8004254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004258:	e00a      	b.n	8004270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4908      	ldr	r1, [pc, #32]	; (8004280 <__NVIC_SetPriority+0x50>)
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3b04      	subs	r3, #4
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	440b      	add	r3, r1
 800426e:	761a      	strb	r2, [r3, #24]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000e100 	.word	0xe000e100
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f1c3 0307 	rsb	r3, r3, #7
 800429e:	2b04      	cmp	r3, #4
 80042a0:	bf28      	it	cs
 80042a2:	2304      	movcs	r3, #4
 80042a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3304      	adds	r3, #4
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d902      	bls.n	80042b4 <NVIC_EncodePriority+0x30>
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3b03      	subs	r3, #3
 80042b2:	e000      	b.n	80042b6 <NVIC_EncodePriority+0x32>
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	401a      	ands	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042cc:	f04f 31ff 	mov.w	r1, #4294967295
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	43d9      	mvns	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	4313      	orrs	r3, r2
         );
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3724      	adds	r7, #36	; 0x24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ff4c 	bl	8004190 <__NVIC_SetPriorityGrouping>
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004312:	f7ff ff61 	bl	80041d8 <__NVIC_GetPriorityGrouping>
 8004316:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	6978      	ldr	r0, [r7, #20]
 800431e:	f7ff ffb1 	bl	8004284 <NVIC_EncodePriority>
 8004322:	4602      	mov	r2, r0
 8004324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff ff80 	bl	8004230 <__NVIC_SetPriority>
}
 8004330:	bf00      	nop
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff ff54 	bl	80041f4 <__NVIC_EnableIRQ>
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004360:	f7ff faf8 	bl	8003954 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e099      	b.n	80044a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004390:	e00f      	b.n	80043b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004392:	f7ff fadf 	bl	8003954 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b05      	cmp	r3, #5
 800439e:	d908      	bls.n	80043b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e078      	b.n	80044a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e8      	bne.n	8004392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4b38      	ldr	r3, [pc, #224]	; (80044ac <HAL_DMA_Init+0x158>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b04      	cmp	r3, #4
 800440a:	d107      	bne.n	800441c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	4313      	orrs	r3, r2
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b04      	cmp	r3, #4
 8004444:	d117      	bne.n	8004476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fb01 	bl	8004a60 <DMA_CheckFifoParam>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2240      	movs	r2, #64	; 0x40
 8004468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004472:	2301      	movs	r3, #1
 8004474:	e016      	b.n	80044a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fab8 	bl	80049f4 <DMA_CalcBaseAndBitshift>
 8004484:	4603      	mov	r3, r0
 8004486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	223f      	movs	r2, #63	; 0x3f
 800448e:	409a      	lsls	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	f010803f 	.word	0xf010803f

080044b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_DMA_Start_IT+0x26>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e040      	b.n	8004558 <HAL_DMA_Start_IT+0xa8>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d12f      	bne.n	800454a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fa4a 	bl	8004998 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	223f      	movs	r2, #63	; 0x3f
 800450a:	409a      	lsls	r2, r3
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0216 	orr.w	r2, r2, #22
 800451e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0208 	orr.w	r2, r2, #8
 8004536:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e005      	b.n	8004556 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004552:	2302      	movs	r3, #2
 8004554:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004556:	7dfb      	ldrb	r3, [r7, #23]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800456e:	f7ff f9f1 	bl	8003954 <HAL_GetTick>
 8004572:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d008      	beq.n	8004592 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e052      	b.n	8004638 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0216 	bic.w	r2, r2, #22
 80045a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <HAL_DMA_Abort+0x62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0208 	bic.w	r2, r2, #8
 80045d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045e2:	e013      	b.n	800460c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045e4:	f7ff f9b6 	bl	8003954 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d90c      	bls.n	800460c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2203      	movs	r2, #3
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e015      	b.n	8004638 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e4      	bne.n	80045e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	223f      	movs	r2, #63	; 0x3f
 8004620:	409a      	lsls	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d004      	beq.n	800465e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e00c      	b.n	8004678 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2205      	movs	r2, #5
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004690:	4b92      	ldr	r3, [pc, #584]	; (80048dc <HAL_DMA_IRQHandler+0x258>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a92      	ldr	r2, [pc, #584]	; (80048e0 <HAL_DMA_IRQHandler+0x25c>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	0a9b      	lsrs	r3, r3, #10
 800469c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	2208      	movs	r2, #8
 80046b0:	409a      	lsls	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01a      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d013      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0204 	bic.w	r2, r2, #4
 80046d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	2208      	movs	r2, #8
 80046de:	409a      	lsls	r2, r3
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	2201      	movs	r2, #1
 80046f6:	409a      	lsls	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d012      	beq.n	8004726 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	2201      	movs	r2, #1
 8004714:	409a      	lsls	r2, r3
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f043 0202 	orr.w	r2, r3, #2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	2204      	movs	r2, #4
 800472c:	409a      	lsls	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d012      	beq.n	800475c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00b      	beq.n	800475c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	2204      	movs	r2, #4
 800474a:	409a      	lsls	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	f043 0204 	orr.w	r2, r3, #4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004760:	2210      	movs	r2, #16
 8004762:	409a      	lsls	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d043      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d03c      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477e:	2210      	movs	r2, #16
 8004780:	409a      	lsls	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d018      	beq.n	80047c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d024      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3
 80047b2:	e01f      	b.n	80047f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
 80047c4:	e016      	b.n	80047f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0208 	bic.w	r2, r2, #8
 80047e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	2220      	movs	r2, #32
 80047fa:	409a      	lsls	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 808e 	beq.w	8004922 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8086 	beq.w	8004922 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	2220      	movs	r2, #32
 800481c:	409a      	lsls	r2, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b05      	cmp	r3, #5
 800482c:	d136      	bne.n	800489c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0216 	bic.w	r2, r2, #22
 800483c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800484c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <HAL_DMA_IRQHandler+0x1da>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0208 	bic.w	r2, r2, #8
 800486c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	223f      	movs	r2, #63	; 0x3f
 8004874:	409a      	lsls	r2, r3
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488e:	2b00      	cmp	r3, #0
 8004890:	d07d      	beq.n	800498e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
        }
        return;
 800489a:	e078      	b.n	800498e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01c      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d108      	bne.n	80048ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d030      	beq.n	8004922 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
 80048c8:	e02b      	b.n	8004922 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d027      	beq.n	8004922 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
 80048da:	e022      	b.n	8004922 <HAL_DMA_IRQHandler+0x29e>
 80048dc:	20000000 	.word	0x20000000
 80048e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10f      	bne.n	8004912 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0210 	bic.w	r2, r2, #16
 8004900:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	2b00      	cmp	r3, #0
 8004928:	d032      	beq.n	8004990 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d022      	beq.n	800497c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2205      	movs	r2, #5
 800493a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	3301      	adds	r3, #1
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	429a      	cmp	r2, r3
 8004958:	d307      	bcc.n	800496a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f2      	bne.n	800494e <HAL_DMA_IRQHandler+0x2ca>
 8004968:	e000      	b.n	800496c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800496a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
 800498c:	e000      	b.n	8004990 <HAL_DMA_IRQHandler+0x30c>
        return;
 800498e:	bf00      	nop
    }
  }
}
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop

08004998 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d108      	bne.n	80049d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049d6:	e007      	b.n	80049e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	3b10      	subs	r3, #16
 8004a04:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <DMA_CalcBaseAndBitshift+0x64>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a0e:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <DMA_CalcBaseAndBitshift+0x68>)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d909      	bls.n	8004a36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a2a:	f023 0303 	bic.w	r3, r3, #3
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	659a      	str	r2, [r3, #88]	; 0x58
 8004a34:	e007      	b.n	8004a46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	aaaaaaab 	.word	0xaaaaaaab
 8004a5c:	0800eab0 	.word	0x0800eab0

08004a60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d11f      	bne.n	8004aba <DMA_CheckFifoParam+0x5a>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d856      	bhi.n	8004b2e <DMA_CheckFifoParam+0xce>
 8004a80:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <DMA_CheckFifoParam+0x28>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004aab 	.word	0x08004aab
 8004a90:	08004a99 	.word	0x08004a99
 8004a94:	08004b2f 	.word	0x08004b2f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d046      	beq.n	8004b32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa8:	e043      	b.n	8004b32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ab2:	d140      	bne.n	8004b36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab8:	e03d      	b.n	8004b36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac2:	d121      	bne.n	8004b08 <DMA_CheckFifoParam+0xa8>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d837      	bhi.n	8004b3a <DMA_CheckFifoParam+0xda>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <DMA_CheckFifoParam+0x70>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004ae7 	.word	0x08004ae7
 8004ad8:	08004ae1 	.word	0x08004ae1
 8004adc:	08004af9 	.word	0x08004af9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae4:	e030      	b.n	8004b48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d025      	beq.n	8004b3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af6:	e022      	b.n	8004b3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b00:	d11f      	bne.n	8004b42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b06:	e01c      	b.n	8004b42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d903      	bls.n	8004b16 <DMA_CheckFifoParam+0xb6>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d003      	beq.n	8004b1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b14:	e018      	b.n	8004b48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1a:	e015      	b.n	8004b48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00e      	beq.n	8004b46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2c:	e00b      	b.n	8004b46 <DMA_CheckFifoParam+0xe6>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e00a      	b.n	8004b48 <DMA_CheckFifoParam+0xe8>
      break;
 8004b32:	bf00      	nop
 8004b34:	e008      	b.n	8004b48 <DMA_CheckFifoParam+0xe8>
      break;
 8004b36:	bf00      	nop
 8004b38:	e006      	b.n	8004b48 <DMA_CheckFifoParam+0xe8>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e004      	b.n	8004b48 <DMA_CheckFifoParam+0xe8>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e002      	b.n	8004b48 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b42:	bf00      	nop
 8004b44:	e000      	b.n	8004b48 <DMA_CheckFifoParam+0xe8>
      break;
 8004b46:	bf00      	nop
    }
  } 
  
  return status; 
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop

08004b58 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b68:	3314      	adds	r3, #20
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d112      	bne.n	8004b9a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f004 fd13 	bl	80095a0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b82:	3314      	adds	r3, #20
 8004b84:	2240      	movs	r2, #64	; 0x40
 8004b86:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b98:	e01b      	b.n	8004bd2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d111      	bne.n	8004bd2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f839 	bl	8004c26 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bda:	3314      	adds	r3, #20
 8004bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004be0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bea:	3314      	adds	r3, #20
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d112      	bne.n	8004c1e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f81e 	bl	8004c3a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c06:	3314      	adds	r3, #20
 8004c08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c0c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b089      	sub	sp, #36	; 0x24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	e16b      	b.n	8004f44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	f040 815a 	bne.w	8004f3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d005      	beq.n	8004ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d130      	bne.n	8004d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	2203      	movs	r2, #3
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cd8:	2201      	movs	r2, #1
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 0201 	and.w	r2, r3, #1
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d017      	beq.n	8004d40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	43db      	mvns	r3, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4013      	ands	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d123      	bne.n	8004d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	08da      	lsrs	r2, r3, #3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3208      	adds	r2, #8
 8004d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	220f      	movs	r2, #15
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	08da      	lsrs	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3208      	adds	r2, #8
 8004d8e:	69b9      	ldr	r1, [r7, #24]
 8004d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	2203      	movs	r2, #3
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	43db      	mvns	r3, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4013      	ands	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 0203 	and.w	r2, r3, #3
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80b4 	beq.w	8004f3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <HAL_GPIO_Init+0x30c>)
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	4a5f      	ldr	r2, [pc, #380]	; (8004f5c <HAL_GPIO_Init+0x30c>)
 8004de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004de4:	6453      	str	r3, [r2, #68]	; 0x44
 8004de6:	4b5d      	ldr	r3, [pc, #372]	; (8004f5c <HAL_GPIO_Init+0x30c>)
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004df2:	4a5b      	ldr	r2, [pc, #364]	; (8004f60 <HAL_GPIO_Init+0x310>)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	089b      	lsrs	r3, r3, #2
 8004df8:	3302      	adds	r3, #2
 8004dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	220f      	movs	r2, #15
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a52      	ldr	r2, [pc, #328]	; (8004f64 <HAL_GPIO_Init+0x314>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d02b      	beq.n	8004e76 <HAL_GPIO_Init+0x226>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a51      	ldr	r2, [pc, #324]	; (8004f68 <HAL_GPIO_Init+0x318>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d025      	beq.n	8004e72 <HAL_GPIO_Init+0x222>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a50      	ldr	r2, [pc, #320]	; (8004f6c <HAL_GPIO_Init+0x31c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01f      	beq.n	8004e6e <HAL_GPIO_Init+0x21e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a4f      	ldr	r2, [pc, #316]	; (8004f70 <HAL_GPIO_Init+0x320>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d019      	beq.n	8004e6a <HAL_GPIO_Init+0x21a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a4e      	ldr	r2, [pc, #312]	; (8004f74 <HAL_GPIO_Init+0x324>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_GPIO_Init+0x216>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a4d      	ldr	r2, [pc, #308]	; (8004f78 <HAL_GPIO_Init+0x328>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00d      	beq.n	8004e62 <HAL_GPIO_Init+0x212>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a4c      	ldr	r2, [pc, #304]	; (8004f7c <HAL_GPIO_Init+0x32c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <HAL_GPIO_Init+0x20e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a4b      	ldr	r2, [pc, #300]	; (8004f80 <HAL_GPIO_Init+0x330>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d101      	bne.n	8004e5a <HAL_GPIO_Init+0x20a>
 8004e56:	2307      	movs	r3, #7
 8004e58:	e00e      	b.n	8004e78 <HAL_GPIO_Init+0x228>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	e00c      	b.n	8004e78 <HAL_GPIO_Init+0x228>
 8004e5e:	2306      	movs	r3, #6
 8004e60:	e00a      	b.n	8004e78 <HAL_GPIO_Init+0x228>
 8004e62:	2305      	movs	r3, #5
 8004e64:	e008      	b.n	8004e78 <HAL_GPIO_Init+0x228>
 8004e66:	2304      	movs	r3, #4
 8004e68:	e006      	b.n	8004e78 <HAL_GPIO_Init+0x228>
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e004      	b.n	8004e78 <HAL_GPIO_Init+0x228>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e002      	b.n	8004e78 <HAL_GPIO_Init+0x228>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_GPIO_Init+0x228>
 8004e76:	2300      	movs	r3, #0
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	f002 0203 	and.w	r2, r2, #3
 8004e7e:	0092      	lsls	r2, r2, #2
 8004e80:	4093      	lsls	r3, r2
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e88:	4935      	ldr	r1, [pc, #212]	; (8004f60 <HAL_GPIO_Init+0x310>)
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	089b      	lsrs	r3, r3, #2
 8004e8e:	3302      	adds	r3, #2
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e96:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <HAL_GPIO_Init+0x334>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004eba:	4a32      	ldr	r2, [pc, #200]	; (8004f84 <HAL_GPIO_Init+0x334>)
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ec0:	4b30      	ldr	r3, [pc, #192]	; (8004f84 <HAL_GPIO_Init+0x334>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <HAL_GPIO_Init+0x334>)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eea:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <HAL_GPIO_Init+0x334>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <HAL_GPIO_Init+0x334>)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <HAL_GPIO_Init+0x334>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4013      	ands	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f38:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <HAL_GPIO_Init+0x334>)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3301      	adds	r3, #1
 8004f42:	61fb      	str	r3, [r7, #28]
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	f67f ae90 	bls.w	8004c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	3724      	adds	r7, #36	; 0x24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40013800 	.word	0x40013800
 8004f64:	40020000 	.word	0x40020000
 8004f68:	40020400 	.word	0x40020400
 8004f6c:	40020800 	.word	0x40020800
 8004f70:	40020c00 	.word	0x40020c00
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40021400 	.word	0x40021400
 8004f7c:	40021800 	.word	0x40021800
 8004f80:	40021c00 	.word	0x40021c00
 8004f84:	40013c00 	.word	0x40013c00

08004f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
 8004fa4:	e001      	b.n	8004faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fc8:	787b      	ldrb	r3, [r7, #1]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fce:	887a      	ldrh	r2, [r7, #2]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fd4:	e003      	b.n	8004fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	041a      	lsls	r2, r3, #16
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	619a      	str	r2, [r3, #24]
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ffc:	887a      	ldrh	r2, [r7, #2]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4013      	ands	r3, r2
 8005002:	041a      	lsls	r2, r3, #16
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	43d9      	mvns	r1, r3
 8005008:	887b      	ldrh	r3, [r7, #2]
 800500a:	400b      	ands	r3, r1
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	619a      	str	r2, [r3, #24]
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e12b      	b.n	800528a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fc fb7e 	bl	8001748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2224      	movs	r2, #36	; 0x24
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005084:	f001 fcb0 	bl	80069e8 <HAL_RCC_GetPCLK1Freq>
 8005088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4a81      	ldr	r2, [pc, #516]	; (8005294 <HAL_I2C_Init+0x274>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d807      	bhi.n	80050a4 <HAL_I2C_Init+0x84>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a80      	ldr	r2, [pc, #512]	; (8005298 <HAL_I2C_Init+0x278>)
 8005098:	4293      	cmp	r3, r2
 800509a:	bf94      	ite	ls
 800509c:	2301      	movls	r3, #1
 800509e:	2300      	movhi	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e006      	b.n	80050b2 <HAL_I2C_Init+0x92>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a7d      	ldr	r2, [pc, #500]	; (800529c <HAL_I2C_Init+0x27c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bf94      	ite	ls
 80050ac:	2301      	movls	r3, #1
 80050ae:	2300      	movhi	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e0e7      	b.n	800528a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a78      	ldr	r2, [pc, #480]	; (80052a0 <HAL_I2C_Init+0x280>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	0c9b      	lsrs	r3, r3, #18
 80050c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a6a      	ldr	r2, [pc, #424]	; (8005294 <HAL_I2C_Init+0x274>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d802      	bhi.n	80050f4 <HAL_I2C_Init+0xd4>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	3301      	adds	r3, #1
 80050f2:	e009      	b.n	8005108 <HAL_I2C_Init+0xe8>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050fa:	fb02 f303 	mul.w	r3, r2, r3
 80050fe:	4a69      	ldr	r2, [pc, #420]	; (80052a4 <HAL_I2C_Init+0x284>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	3301      	adds	r3, #1
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	430b      	orrs	r3, r1
 800510e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800511a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	495c      	ldr	r1, [pc, #368]	; (8005294 <HAL_I2C_Init+0x274>)
 8005124:	428b      	cmp	r3, r1
 8005126:	d819      	bhi.n	800515c <HAL_I2C_Init+0x13c>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1e59      	subs	r1, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	fbb1 f3f3 	udiv	r3, r1, r3
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	f640 73fc 	movw	r3, #4092	; 0xffc
 800513c:	400b      	ands	r3, r1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_I2C_Init+0x138>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1e59      	subs	r1, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005150:	3301      	adds	r3, #1
 8005152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005156:	e051      	b.n	80051fc <HAL_I2C_Init+0x1dc>
 8005158:	2304      	movs	r3, #4
 800515a:	e04f      	b.n	80051fc <HAL_I2C_Init+0x1dc>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d111      	bne.n	8005188 <HAL_I2C_Init+0x168>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1e58      	subs	r0, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6859      	ldr	r1, [r3, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	440b      	add	r3, r1
 8005172:	fbb0 f3f3 	udiv	r3, r0, r3
 8005176:	3301      	adds	r3, #1
 8005178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e012      	b.n	80051ae <HAL_I2C_Init+0x18e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1e58      	subs	r0, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	0099      	lsls	r1, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	fbb0 f3f3 	udiv	r3, r0, r3
 800519e:	3301      	adds	r3, #1
 80051a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf0c      	ite	eq
 80051a8:	2301      	moveq	r3, #1
 80051aa:	2300      	movne	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_I2C_Init+0x196>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e022      	b.n	80051fc <HAL_I2C_Init+0x1dc>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10e      	bne.n	80051dc <HAL_I2C_Init+0x1bc>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1e58      	subs	r0, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6859      	ldr	r1, [r3, #4]
 80051c6:	460b      	mov	r3, r1
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	440b      	add	r3, r1
 80051cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d0:	3301      	adds	r3, #1
 80051d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051da:	e00f      	b.n	80051fc <HAL_I2C_Init+0x1dc>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1e58      	subs	r0, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	0099      	lsls	r1, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f2:	3301      	adds	r3, #1
 80051f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	6809      	ldr	r1, [r1, #0]
 8005200:	4313      	orrs	r3, r2
 8005202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800522a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6911      	ldr	r1, [r2, #16]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68d2      	ldr	r2, [r2, #12]
 8005236:	4311      	orrs	r1, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	430b      	orrs	r3, r1
 800523e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	000186a0 	.word	0x000186a0
 8005298:	001e847f 	.word	0x001e847f
 800529c:	003d08ff 	.word	0x003d08ff
 80052a0:	431bde83 	.word	0x431bde83
 80052a4:	10624dd3 	.word	0x10624dd3

080052a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	461a      	mov	r2, r3
 80052b4:	460b      	mov	r3, r1
 80052b6:	817b      	strh	r3, [r7, #10]
 80052b8:	4613      	mov	r3, r2
 80052ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052bc:	f7fe fb4a 	bl	8003954 <HAL_GetTick>
 80052c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	f040 80e0 	bne.w	8005490 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	2319      	movs	r3, #25
 80052d6:	2201      	movs	r2, #1
 80052d8:	4970      	ldr	r1, [pc, #448]	; (800549c <HAL_I2C_Master_Transmit+0x1f4>)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fd86 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0d3      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_I2C_Master_Transmit+0x50>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e0cc      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d007      	beq.n	800531e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800532c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2221      	movs	r2, #33	; 0x21
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2210      	movs	r2, #16
 800533a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	893a      	ldrh	r2, [r7, #8]
 800534e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a50      	ldr	r2, [pc, #320]	; (80054a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005360:	8979      	ldrh	r1, [r7, #10]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fbf0 	bl	8005b4c <I2C_MasterRequestWrite>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e08d      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800538c:	e066      	b.n	800545c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	6a39      	ldr	r1, [r7, #32]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fe00 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d107      	bne.n	80053b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e06b      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d11b      	bne.n	8005430 <HAL_I2C_Master_Transmit+0x188>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d017      	beq.n	8005430 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	6a39      	ldr	r1, [r7, #32]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fdf0 	bl	800601a <I2C_WaitOnBTFFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	2b04      	cmp	r3, #4
 8005446:	d107      	bne.n	8005458 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005456:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e01a      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	d194      	bne.n	800538e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	e000      	b.n	8005492 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	00100002 	.word	0x00100002
 80054a0:	ffff0000 	.word	0xffff0000

080054a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08c      	sub	sp, #48	; 0x30
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	461a      	mov	r2, r3
 80054b0:	460b      	mov	r3, r1
 80054b2:	817b      	strh	r3, [r7, #10]
 80054b4:	4613      	mov	r3, r2
 80054b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054b8:	f7fe fa4c 	bl	8003954 <HAL_GetTick>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	f040 820b 	bne.w	80058e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	2319      	movs	r3, #25
 80054d2:	2201      	movs	r2, #1
 80054d4:	497c      	ldr	r1, [pc, #496]	; (80056c8 <HAL_I2C_Master_Receive+0x224>)
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fc88 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80054e2:	2302      	movs	r3, #2
 80054e4:	e1fe      	b.n	80058e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_I2C_Master_Receive+0x50>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e1f7      	b.n	80058e4 <HAL_I2C_Master_Receive+0x440>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d007      	beq.n	800551a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0201 	orr.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005528:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2222      	movs	r2, #34	; 0x22
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2210      	movs	r2, #16
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	893a      	ldrh	r2, [r7, #8]
 800554a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a5c      	ldr	r2, [pc, #368]	; (80056cc <HAL_I2C_Master_Receive+0x228>)
 800555a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800555c:	8979      	ldrh	r1, [r7, #10]
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fb74 	bl	8005c50 <I2C_MasterRequestRead>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e1b8      	b.n	80058e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d113      	bne.n	80055a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557a:	2300      	movs	r3, #0
 800557c:	623b      	str	r3, [r7, #32]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	623b      	str	r3, [r7, #32]
 800558e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	e18c      	b.n	80058bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d11b      	bne.n	80055e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e16c      	b.n	80058bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d11b      	bne.n	8005622 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	e14c      	b.n	80058bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005630:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005648:	e138      	b.n	80058bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564e:	2b03      	cmp	r3, #3
 8005650:	f200 80f1 	bhi.w	8005836 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005658:	2b01      	cmp	r3, #1
 800565a:	d123      	bne.n	80056a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 fd1b 	bl	800609c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e139      	b.n	80058e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056a2:	e10b      	b.n	80058bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d14e      	bne.n	800574a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	2200      	movs	r2, #0
 80056b4:	4906      	ldr	r1, [pc, #24]	; (80056d0 <HAL_I2C_Master_Receive+0x22c>)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fb98 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e10e      	b.n	80058e4 <HAL_I2C_Master_Receive+0x440>
 80056c6:	bf00      	nop
 80056c8:	00100002 	.word	0x00100002
 80056cc:	ffff0000 	.word	0xffff0000
 80056d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005748:	e0b8      	b.n	80058bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2200      	movs	r2, #0
 8005752:	4966      	ldr	r1, [pc, #408]	; (80058ec <HAL_I2C_Master_Receive+0x448>)
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fb49 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0bf      	b.n	80058e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	2200      	movs	r2, #0
 80057ae:	494f      	ldr	r1, [pc, #316]	; (80058ec <HAL_I2C_Master_Receive+0x448>)
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fb1b 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e091      	b.n	80058e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005834:	e042      	b.n	80058bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fc2e 	bl	800609c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e04c      	b.n	80058e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b04      	cmp	r3, #4
 8005888:	d118      	bne.n	80058bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f47f aec2 	bne.w	800564a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e000      	b.n	80058e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
  }
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3728      	adds	r7, #40	; 0x28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	00010004 	.word	0x00010004

080058f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	; 0x28
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	460b      	mov	r3, r1
 80058fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005900:	f7fe f828 	bl	8003954 <HAL_GetTick>
 8005904:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005906:	2301      	movs	r3, #1
 8005908:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b20      	cmp	r3, #32
 8005914:	f040 8111 	bne.w	8005b3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2319      	movs	r3, #25
 800591e:	2201      	movs	r2, #1
 8005920:	4988      	ldr	r1, [pc, #544]	; (8005b44 <HAL_I2C_IsDeviceReady+0x254>)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fa62 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800592e:	2302      	movs	r3, #2
 8005930:	e104      	b.n	8005b3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_I2C_IsDeviceReady+0x50>
 800593c:	2302      	movs	r3, #2
 800593e:	e0fd      	b.n	8005b3c <HAL_I2C_IsDeviceReady+0x24c>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b01      	cmp	r3, #1
 8005954:	d007      	beq.n	8005966 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005974:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2224      	movs	r2, #36	; 0x24
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a70      	ldr	r2, [pc, #448]	; (8005b48 <HAL_I2C_IsDeviceReady+0x258>)
 8005988:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005998:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fa20 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c0:	d103      	bne.n	80059ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0b6      	b.n	8005b3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059ce:	897b      	ldrh	r3, [r7, #10]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80059de:	f7fd ffb9 	bl	8003954 <HAL_GetTick>
 80059e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a12:	e025      	b.n	8005a60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a14:	f7fd ff9e 	bl	8003954 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d302      	bcc.n	8005a2a <HAL_I2C_IsDeviceReady+0x13a>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	22a0      	movs	r2, #160	; 0xa0
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	bf0c      	ite	eq
 8005a40:	2301      	moveq	r3, #1
 8005a42:	2300      	movne	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2ba0      	cmp	r3, #160	; 0xa0
 8005a6a:	d005      	beq.n	8005a78 <HAL_I2C_IsDeviceReady+0x188>
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d102      	bne.n	8005a78 <HAL_I2C_IsDeviceReady+0x188>
 8005a72:	7dbb      	ldrb	r3, [r7, #22]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0cd      	beq.n	8005a14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d129      	bne.n	8005ae2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	2319      	movs	r3, #25
 8005aba:	2201      	movs	r2, #1
 8005abc:	4921      	ldr	r1, [pc, #132]	; (8005b44 <HAL_I2C_IsDeviceReady+0x254>)
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f994 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e036      	b.n	8005b3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e02c      	b.n	8005b3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005afa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	2319      	movs	r3, #25
 8005b02:	2201      	movs	r2, #1
 8005b04:	490f      	ldr	r1, [pc, #60]	; (8005b44 <HAL_I2C_IsDeviceReady+0x254>)
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f970 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e012      	b.n	8005b3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	f4ff af32 	bcc.w	800598a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	00100002 	.word	0x00100002
 8005b48:	ffff0000 	.word	0xffff0000

08005b4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d006      	beq.n	8005b76 <I2C_MasterRequestWrite+0x2a>
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d003      	beq.n	8005b76 <I2C_MasterRequestWrite+0x2a>
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b74:	d108      	bne.n	8005b88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e00b      	b.n	8005ba0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	2b12      	cmp	r3, #18
 8005b8e:	d107      	bne.n	8005ba0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f91d 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00d      	beq.n	8005bd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc6:	d103      	bne.n	8005bd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e035      	b.n	8005c40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bdc:	d108      	bne.n	8005bf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bde:	897b      	ldrh	r3, [r7, #10]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bec:	611a      	str	r2, [r3, #16]
 8005bee:	e01b      	b.n	8005c28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bf0:	897b      	ldrh	r3, [r7, #10]
 8005bf2:	11db      	asrs	r3, r3, #7
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f003 0306 	and.w	r3, r3, #6
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f063 030f 	orn	r3, r3, #15
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	490e      	ldr	r1, [pc, #56]	; (8005c48 <I2C_MasterRequestWrite+0xfc>)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f943 	bl	8005e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e010      	b.n	8005c40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c1e:	897b      	ldrh	r3, [r7, #10]
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4907      	ldr	r1, [pc, #28]	; (8005c4c <I2C_MasterRequestWrite+0x100>)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f933 	bl	8005e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	00010008 	.word	0x00010008
 8005c4c:	00010002 	.word	0x00010002

08005c50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d006      	beq.n	8005c8a <I2C_MasterRequestRead+0x3a>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d003      	beq.n	8005c8a <I2C_MasterRequestRead+0x3a>
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c88:	d108      	bne.n	8005c9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e00b      	b.n	8005cb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	2b11      	cmp	r3, #17
 8005ca2:	d107      	bne.n	8005cb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f893 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cda:	d103      	bne.n	8005ce4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e079      	b.n	8005ddc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf0:	d108      	bne.n	8005d04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cf2:	897b      	ldrh	r3, [r7, #10]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	611a      	str	r2, [r3, #16]
 8005d02:	e05f      	b.n	8005dc4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d04:	897b      	ldrh	r3, [r7, #10]
 8005d06:	11db      	asrs	r3, r3, #7
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f003 0306 	and.w	r3, r3, #6
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	f063 030f 	orn	r3, r3, #15
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	4930      	ldr	r1, [pc, #192]	; (8005de4 <I2C_MasterRequestRead+0x194>)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f8b9 	bl	8005e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e054      	b.n	8005ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d32:	897b      	ldrh	r3, [r7, #10]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	4929      	ldr	r1, [pc, #164]	; (8005de8 <I2C_MasterRequestRead+0x198>)
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f8a9 	bl	8005e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e044      	b.n	8005ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f831 	bl	8005dec <I2C_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00d      	beq.n	8005dac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9e:	d103      	bne.n	8005da8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e017      	b.n	8005ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005dac:	897b      	ldrh	r3, [r7, #10]
 8005dae:	11db      	asrs	r3, r3, #7
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f003 0306 	and.w	r3, r3, #6
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f063 030e 	orn	r3, r3, #14
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4907      	ldr	r1, [pc, #28]	; (8005de8 <I2C_MasterRequestRead+0x198>)
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 f865 	bl	8005e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	00010008 	.word	0x00010008
 8005de8:	00010002 	.word	0x00010002

08005dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dfc:	e025      	b.n	8005e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d021      	beq.n	8005e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e06:	f7fd fda5 	bl	8003954 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d302      	bcc.n	8005e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d116      	bne.n	8005e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f043 0220 	orr.w	r2, r3, #32
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e023      	b.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d10d      	bne.n	8005e70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	43da      	mvns	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	e00c      	b.n	8005e8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	43da      	mvns	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d0b6      	beq.n	8005dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ea8:	e051      	b.n	8005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb8:	d123      	bne.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ed2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e046      	b.n	8005f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d021      	beq.n	8005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0a:	f7fd fd23 	bl	8003954 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d116      	bne.n	8005f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e020      	b.n	8005f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10c      	bne.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	43da      	mvns	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4013      	ands	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bf14      	ite	ne
 8005f6a:	2301      	movne	r3, #1
 8005f6c:	2300      	moveq	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	e00b      	b.n	8005f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	43da      	mvns	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	bf14      	ite	ne
 8005f84:	2301      	movne	r3, #1
 8005f86:	2300      	moveq	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d18d      	bne.n	8005eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa4:	e02d      	b.n	8006002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f8ce 	bl	8006148 <I2C_IsAcknowledgeFailed>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e02d      	b.n	8006012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d021      	beq.n	8006002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fd fcc9 	bl	8003954 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d116      	bne.n	8006002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e007      	b.n	8006012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b80      	cmp	r3, #128	; 0x80
 800600e:	d1ca      	bne.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006026:	e02d      	b.n	8006084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f88d 	bl	8006148 <I2C_IsAcknowledgeFailed>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e02d      	b.n	8006094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d021      	beq.n	8006084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006040:	f7fd fc88 	bl	8003954 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	429a      	cmp	r2, r3
 800604e:	d302      	bcc.n	8006056 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d116      	bne.n	8006084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e007      	b.n	8006094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b04      	cmp	r3, #4
 8006090:	d1ca      	bne.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060a8:	e042      	b.n	8006130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d119      	bne.n	80060ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0210 	mvn.w	r2, #16
 80060c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e029      	b.n	8006140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ec:	f7fd fc32 	bl	8003954 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d302      	bcc.n	8006102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d116      	bne.n	8006130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	f043 0220 	orr.w	r2, r3, #32
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e007      	b.n	8006140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d1b5      	bne.n	80060aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800615a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615e:	d11b      	bne.n	8006198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	f043 0204 	orr.w	r2, r3, #4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e264      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d075      	beq.n	80062b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061c6:	4ba3      	ldr	r3, [pc, #652]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d00c      	beq.n	80061ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d2:	4ba0      	ldr	r3, [pc, #640]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d112      	bne.n	8006204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061de:	4b9d      	ldr	r3, [pc, #628]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ea:	d10b      	bne.n	8006204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ec:	4b99      	ldr	r3, [pc, #612]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d05b      	beq.n	80062b0 <HAL_RCC_OscConfig+0x108>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d157      	bne.n	80062b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e23f      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620c:	d106      	bne.n	800621c <HAL_RCC_OscConfig+0x74>
 800620e:	4b91      	ldr	r3, [pc, #580]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a90      	ldr	r2, [pc, #576]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e01d      	b.n	8006258 <HAL_RCC_OscConfig+0xb0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006224:	d10c      	bne.n	8006240 <HAL_RCC_OscConfig+0x98>
 8006226:	4b8b      	ldr	r3, [pc, #556]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a8a      	ldr	r2, [pc, #552]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 800622c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b88      	ldr	r3, [pc, #544]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a87      	ldr	r2, [pc, #540]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e00b      	b.n	8006258 <HAL_RCC_OscConfig+0xb0>
 8006240:	4b84      	ldr	r3, [pc, #528]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a83      	ldr	r2, [pc, #524]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4b81      	ldr	r3, [pc, #516]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a80      	ldr	r2, [pc, #512]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d013      	beq.n	8006288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fd fb78 	bl	8003954 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006268:	f7fd fb74 	bl	8003954 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	; 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e204      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627a:	4b76      	ldr	r3, [pc, #472]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f0      	beq.n	8006268 <HAL_RCC_OscConfig+0xc0>
 8006286:	e014      	b.n	80062b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006288:	f7fd fb64 	bl	8003954 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006290:	f7fd fb60 	bl	8003954 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b64      	cmp	r3, #100	; 0x64
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e1f0      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a2:	4b6c      	ldr	r3, [pc, #432]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0xe8>
 80062ae:	e000      	b.n	80062b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d063      	beq.n	8006386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062be:	4b65      	ldr	r3, [pc, #404]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00b      	beq.n	80062e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ca:	4b62      	ldr	r3, [pc, #392]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d11c      	bne.n	8006310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062d6:	4b5f      	ldr	r3, [pc, #380]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d116      	bne.n	8006310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e2:	4b5c      	ldr	r3, [pc, #368]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_RCC_OscConfig+0x152>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d001      	beq.n	80062fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e1c4      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fa:	4b56      	ldr	r3, [pc, #344]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4952      	ldr	r1, [pc, #328]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 800630a:	4313      	orrs	r3, r2
 800630c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800630e:	e03a      	b.n	8006386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d020      	beq.n	800635a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006318:	4b4f      	ldr	r3, [pc, #316]	; (8006458 <HAL_RCC_OscConfig+0x2b0>)
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631e:	f7fd fb19 	bl	8003954 <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006324:	e008      	b.n	8006338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006326:	f7fd fb15 	bl	8003954 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e1a5      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006338:	4b46      	ldr	r3, [pc, #280]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0f0      	beq.n	8006326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006344:	4b43      	ldr	r3, [pc, #268]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4940      	ldr	r1, [pc, #256]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]
 8006358:	e015      	b.n	8006386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800635a:	4b3f      	ldr	r3, [pc, #252]	; (8006458 <HAL_RCC_OscConfig+0x2b0>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006360:	f7fd faf8 	bl	8003954 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006368:	f7fd faf4 	bl	8003954 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e184      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637a:	4b36      	ldr	r3, [pc, #216]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d030      	beq.n	80063f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d016      	beq.n	80063c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800639a:	4b30      	ldr	r3, [pc, #192]	; (800645c <HAL_RCC_OscConfig+0x2b4>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a0:	f7fd fad8 	bl	8003954 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063a8:	f7fd fad4 	bl	8003954 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e164      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ba:	4b26      	ldr	r3, [pc, #152]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f0      	beq.n	80063a8 <HAL_RCC_OscConfig+0x200>
 80063c6:	e015      	b.n	80063f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063c8:	4b24      	ldr	r3, [pc, #144]	; (800645c <HAL_RCC_OscConfig+0x2b4>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ce:	f7fd fac1 	bl	8003954 <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063d6:	f7fd fabd 	bl	8003954 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e14d      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e8:	4b1a      	ldr	r3, [pc, #104]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 80063ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1f0      	bne.n	80063d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 80a0 	beq.w	8006542 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006402:	2300      	movs	r3, #0
 8006404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006406:	4b13      	ldr	r3, [pc, #76]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10f      	bne.n	8006432 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006412:	2300      	movs	r3, #0
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	4a0e      	ldr	r2, [pc, #56]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 800641c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006420:	6413      	str	r3, [r2, #64]	; 0x40
 8006422:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <HAL_RCC_OscConfig+0x2ac>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642a:	60bb      	str	r3, [r7, #8]
 800642c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800642e:	2301      	movs	r3, #1
 8006430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <HAL_RCC_OscConfig+0x2b8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643a:	2b00      	cmp	r3, #0
 800643c:	d121      	bne.n	8006482 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <HAL_RCC_OscConfig+0x2b8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a07      	ldr	r2, [pc, #28]	; (8006460 <HAL_RCC_OscConfig+0x2b8>)
 8006444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800644a:	f7fd fa83 	bl	8003954 <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006450:	e011      	b.n	8006476 <HAL_RCC_OscConfig+0x2ce>
 8006452:	bf00      	nop
 8006454:	40023800 	.word	0x40023800
 8006458:	42470000 	.word	0x42470000
 800645c:	42470e80 	.word	0x42470e80
 8006460:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006464:	f7fd fa76 	bl	8003954 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e106      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006476:	4b85      	ldr	r3, [pc, #532]	; (800668c <HAL_RCC_OscConfig+0x4e4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d106      	bne.n	8006498 <HAL_RCC_OscConfig+0x2f0>
 800648a:	4b81      	ldr	r3, [pc, #516]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	4a80      	ldr	r2, [pc, #512]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 8006490:	f043 0301 	orr.w	r3, r3, #1
 8006494:	6713      	str	r3, [r2, #112]	; 0x70
 8006496:	e01c      	b.n	80064d2 <HAL_RCC_OscConfig+0x32a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b05      	cmp	r3, #5
 800649e:	d10c      	bne.n	80064ba <HAL_RCC_OscConfig+0x312>
 80064a0:	4b7b      	ldr	r3, [pc, #492]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	4a7a      	ldr	r2, [pc, #488]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80064a6:	f043 0304 	orr.w	r3, r3, #4
 80064aa:	6713      	str	r3, [r2, #112]	; 0x70
 80064ac:	4b78      	ldr	r3, [pc, #480]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b0:	4a77      	ldr	r2, [pc, #476]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	6713      	str	r3, [r2, #112]	; 0x70
 80064b8:	e00b      	b.n	80064d2 <HAL_RCC_OscConfig+0x32a>
 80064ba:	4b75      	ldr	r3, [pc, #468]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80064bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064be:	4a74      	ldr	r2, [pc, #464]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	6713      	str	r3, [r2, #112]	; 0x70
 80064c6:	4b72      	ldr	r3, [pc, #456]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	4a71      	ldr	r2, [pc, #452]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80064cc:	f023 0304 	bic.w	r3, r3, #4
 80064d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d015      	beq.n	8006506 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064da:	f7fd fa3b 	bl	8003954 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e0:	e00a      	b.n	80064f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064e2:	f7fd fa37 	bl	8003954 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e0c5      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f8:	4b65      	ldr	r3, [pc, #404]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0ee      	beq.n	80064e2 <HAL_RCC_OscConfig+0x33a>
 8006504:	e014      	b.n	8006530 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006506:	f7fd fa25 	bl	8003954 <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800650c:	e00a      	b.n	8006524 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650e:	f7fd fa21 	bl	8003954 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f241 3288 	movw	r2, #5000	; 0x1388
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e0af      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006524:	4b5a      	ldr	r3, [pc, #360]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1ee      	bne.n	800650e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d105      	bne.n	8006542 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006536:	4b56      	ldr	r3, [pc, #344]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	4a55      	ldr	r2, [pc, #340]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 800653c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006540:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 809b 	beq.w	8006682 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800654c:	4b50      	ldr	r3, [pc, #320]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 030c 	and.w	r3, r3, #12
 8006554:	2b08      	cmp	r3, #8
 8006556:	d05c      	beq.n	8006612 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d141      	bne.n	80065e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006560:	4b4c      	ldr	r3, [pc, #304]	; (8006694 <HAL_RCC_OscConfig+0x4ec>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006566:	f7fd f9f5 	bl	8003954 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800656e:	f7fd f9f1 	bl	8003954 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e081      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006580:	4b43      	ldr	r3, [pc, #268]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f0      	bne.n	800656e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	019b      	lsls	r3, r3, #6
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	3b01      	subs	r3, #1
 80065a6:	041b      	lsls	r3, r3, #16
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	061b      	lsls	r3, r3, #24
 80065b0:	4937      	ldr	r1, [pc, #220]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <HAL_RCC_OscConfig+0x4ec>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fd f9ca 	bl	8003954 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fd f9c6 	bl	8003954 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e056      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d6:	4b2e      	ldr	r3, [pc, #184]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0x41c>
 80065e2:	e04e      	b.n	8006682 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e4:	4b2b      	ldr	r3, [pc, #172]	; (8006694 <HAL_RCC_OscConfig+0x4ec>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ea:	f7fd f9b3 	bl	8003954 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f2:	f7fd f9af 	bl	8003954 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e03f      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006604:	4b22      	ldr	r3, [pc, #136]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f0      	bne.n	80065f2 <HAL_RCC_OscConfig+0x44a>
 8006610:	e037      	b.n	8006682 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e032      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800661e:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <HAL_RCC_OscConfig+0x4e8>)
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d028      	beq.n	800667e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006636:	429a      	cmp	r2, r3
 8006638:	d121      	bne.n	800667e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d11a      	bne.n	800667e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800664e:	4013      	ands	r3, r2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006654:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006656:	4293      	cmp	r3, r2
 8006658:	d111      	bne.n	800667e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	085b      	lsrs	r3, r3, #1
 8006666:	3b01      	subs	r3, #1
 8006668:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800666a:	429a      	cmp	r2, r3
 800666c:	d107      	bne.n	800667e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d001      	beq.n	8006682 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40007000 	.word	0x40007000
 8006690:	40023800 	.word	0x40023800
 8006694:	42470060 	.word	0x42470060

08006698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0cc      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066ac:	4b68      	ldr	r3, [pc, #416]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d90c      	bls.n	80066d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ba:	4b65      	ldr	r3, [pc, #404]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b63      	ldr	r3, [pc, #396]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0b8      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d020      	beq.n	8006722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066ec:	4b59      	ldr	r3, [pc, #356]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4a58      	ldr	r2, [pc, #352]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006704:	4b53      	ldr	r3, [pc, #332]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4a52      	ldr	r2, [pc, #328]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800670e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006710:	4b50      	ldr	r3, [pc, #320]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	494d      	ldr	r1, [pc, #308]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	4313      	orrs	r3, r2
 8006720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d044      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d107      	bne.n	8006746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006736:	4b47      	ldr	r3, [pc, #284]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d119      	bne.n	8006776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e07f      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d003      	beq.n	8006756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006752:	2b03      	cmp	r3, #3
 8006754:	d107      	bne.n	8006766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006756:	4b3f      	ldr	r3, [pc, #252]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e06f      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006766:	4b3b      	ldr	r3, [pc, #236]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e067      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006776:	4b37      	ldr	r3, [pc, #220]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 0203 	bic.w	r2, r3, #3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4934      	ldr	r1, [pc, #208]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	4313      	orrs	r3, r2
 8006786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006788:	f7fd f8e4 	bl	8003954 <HAL_GetTick>
 800678c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678e:	e00a      	b.n	80067a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006790:	f7fd f8e0 	bl	8003954 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	f241 3288 	movw	r2, #5000	; 0x1388
 800679e:	4293      	cmp	r3, r2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e04f      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a6:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 020c 	and.w	r2, r3, #12
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d1eb      	bne.n	8006790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d20c      	bcs.n	80067e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067c6:	4b22      	ldr	r3, [pc, #136]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ce:	4b20      	ldr	r3, [pc, #128]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d001      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e032      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067ec:	4b19      	ldr	r3, [pc, #100]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4916      	ldr	r1, [pc, #88]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800680a:	4b12      	ldr	r3, [pc, #72]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	490e      	ldr	r1, [pc, #56]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	4313      	orrs	r3, r2
 800681c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800681e:	f000 f821 	bl	8006864 <HAL_RCC_GetSysClockFreq>
 8006822:	4602      	mov	r2, r0
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	490a      	ldr	r1, [pc, #40]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 8006830:	5ccb      	ldrb	r3, [r1, r3]
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	4a09      	ldr	r2, [pc, #36]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800683a:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RCC_ClockConfig+0x1c8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fb f8f6 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40023c00 	.word	0x40023c00
 8006854:	40023800 	.word	0x40023800
 8006858:	0800ea98 	.word	0x0800ea98
 800685c:	20000000 	.word	0x20000000
 8006860:	200000d8 	.word	0x200000d8

08006864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006864:	b5b0      	push	{r4, r5, r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800686a:	2100      	movs	r1, #0
 800686c:	6079      	str	r1, [r7, #4]
 800686e:	2100      	movs	r1, #0
 8006870:	60f9      	str	r1, [r7, #12]
 8006872:	2100      	movs	r1, #0
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006876:	2100      	movs	r1, #0
 8006878:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800687a:	4952      	ldr	r1, [pc, #328]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800687c:	6889      	ldr	r1, [r1, #8]
 800687e:	f001 010c 	and.w	r1, r1, #12
 8006882:	2908      	cmp	r1, #8
 8006884:	d00d      	beq.n	80068a2 <HAL_RCC_GetSysClockFreq+0x3e>
 8006886:	2908      	cmp	r1, #8
 8006888:	f200 8094 	bhi.w	80069b4 <HAL_RCC_GetSysClockFreq+0x150>
 800688c:	2900      	cmp	r1, #0
 800688e:	d002      	beq.n	8006896 <HAL_RCC_GetSysClockFreq+0x32>
 8006890:	2904      	cmp	r1, #4
 8006892:	d003      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x38>
 8006894:	e08e      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006896:	4b4c      	ldr	r3, [pc, #304]	; (80069c8 <HAL_RCC_GetSysClockFreq+0x164>)
 8006898:	60bb      	str	r3, [r7, #8]
       break;
 800689a:	e08e      	b.n	80069ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800689c:	4b4b      	ldr	r3, [pc, #300]	; (80069cc <HAL_RCC_GetSysClockFreq+0x168>)
 800689e:	60bb      	str	r3, [r7, #8]
      break;
 80068a0:	e08b      	b.n	80069ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068a2:	4948      	ldr	r1, [pc, #288]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80068a4:	6849      	ldr	r1, [r1, #4]
 80068a6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80068aa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ac:	4945      	ldr	r1, [pc, #276]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80068ae:	6849      	ldr	r1, [r1, #4]
 80068b0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80068b4:	2900      	cmp	r1, #0
 80068b6:	d024      	beq.n	8006902 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068b8:	4942      	ldr	r1, [pc, #264]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80068ba:	6849      	ldr	r1, [r1, #4]
 80068bc:	0989      	lsrs	r1, r1, #6
 80068be:	4608      	mov	r0, r1
 80068c0:	f04f 0100 	mov.w	r1, #0
 80068c4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80068c8:	f04f 0500 	mov.w	r5, #0
 80068cc:	ea00 0204 	and.w	r2, r0, r4
 80068d0:	ea01 0305 	and.w	r3, r1, r5
 80068d4:	493d      	ldr	r1, [pc, #244]	; (80069cc <HAL_RCC_GetSysClockFreq+0x168>)
 80068d6:	fb01 f003 	mul.w	r0, r1, r3
 80068da:	2100      	movs	r1, #0
 80068dc:	fb01 f102 	mul.w	r1, r1, r2
 80068e0:	1844      	adds	r4, r0, r1
 80068e2:	493a      	ldr	r1, [pc, #232]	; (80069cc <HAL_RCC_GetSysClockFreq+0x168>)
 80068e4:	fba2 0101 	umull	r0, r1, r2, r1
 80068e8:	1863      	adds	r3, r4, r1
 80068ea:	4619      	mov	r1, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	f7fa f950 	bl	8000b98 <__aeabi_uldivmod>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4613      	mov	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e04a      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006902:	4b30      	ldr	r3, [pc, #192]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	099b      	lsrs	r3, r3, #6
 8006908:	461a      	mov	r2, r3
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006912:	f04f 0100 	mov.w	r1, #0
 8006916:	ea02 0400 	and.w	r4, r2, r0
 800691a:	ea03 0501 	and.w	r5, r3, r1
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	014b      	lsls	r3, r1, #5
 800692c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006930:	0142      	lsls	r2, r0, #5
 8006932:	4610      	mov	r0, r2
 8006934:	4619      	mov	r1, r3
 8006936:	1b00      	subs	r0, r0, r4
 8006938:	eb61 0105 	sbc.w	r1, r1, r5
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	018b      	lsls	r3, r1, #6
 8006946:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800694a:	0182      	lsls	r2, r0, #6
 800694c:	1a12      	subs	r2, r2, r0
 800694e:	eb63 0301 	sbc.w	r3, r3, r1
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f04f 0100 	mov.w	r1, #0
 800695a:	00d9      	lsls	r1, r3, #3
 800695c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006960:	00d0      	lsls	r0, r2, #3
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	1912      	adds	r2, r2, r4
 8006968:	eb45 0303 	adc.w	r3, r5, r3
 800696c:	f04f 0000 	mov.w	r0, #0
 8006970:	f04f 0100 	mov.w	r1, #0
 8006974:	0299      	lsls	r1, r3, #10
 8006976:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800697a:	0290      	lsls	r0, r2, #10
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4610      	mov	r0, r2
 8006982:	4619      	mov	r1, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	461a      	mov	r2, r3
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	f7fa f904 	bl	8000b98 <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4613      	mov	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	3301      	adds	r3, #1
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	60bb      	str	r3, [r7, #8]
      break;
 80069b2:	e002      	b.n	80069ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <HAL_RCC_GetSysClockFreq+0x164>)
 80069b6:	60bb      	str	r3, [r7, #8]
      break;
 80069b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069ba:	68bb      	ldr	r3, [r7, #8]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bdb0      	pop	{r4, r5, r7, pc}
 80069c4:	40023800 	.word	0x40023800
 80069c8:	00f42400 	.word	0x00f42400
 80069cc:	017d7840 	.word	0x017d7840

080069d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069d4:	4b03      	ldr	r3, [pc, #12]	; (80069e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069d6:	681b      	ldr	r3, [r3, #0]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	20000000 	.word	0x20000000

080069e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069ec:	f7ff fff0 	bl	80069d0 <HAL_RCC_GetHCLKFreq>
 80069f0:	4602      	mov	r2, r0
 80069f2:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	0a9b      	lsrs	r3, r3, #10
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	4903      	ldr	r1, [pc, #12]	; (8006a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80069fe:	5ccb      	ldrb	r3, [r1, r3]
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40023800 	.word	0x40023800
 8006a0c:	0800eaa8 	.word	0x0800eaa8

08006a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a14:	f7ff ffdc 	bl	80069d0 <HAL_RCC_GetHCLKFreq>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	0b5b      	lsrs	r3, r3, #13
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	4903      	ldr	r1, [pc, #12]	; (8006a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a26:	5ccb      	ldrb	r3, [r1, r3]
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40023800 	.word	0x40023800
 8006a34:	0800eaa8 	.word	0x0800eaa8

08006a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	220f      	movs	r2, #15
 8006a46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a48:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <HAL_RCC_GetClockConfig+0x5c>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0203 	and.w	r2, r3, #3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a54:	4b0f      	ldr	r3, [pc, #60]	; (8006a94 <HAL_RCC_GetClockConfig+0x5c>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a60:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <HAL_RCC_GetClockConfig+0x5c>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a6c:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <HAL_RCC_GetClockConfig+0x5c>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	08db      	lsrs	r3, r3, #3
 8006a72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <HAL_RCC_GetClockConfig+0x60>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0207 	and.w	r2, r3, #7
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	601a      	str	r2, [r3, #0]
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40023800 	.word	0x40023800
 8006a98:	40023c00 	.word	0x40023c00

08006a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e041      	b.n	8006b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fb fa76 	bl	8001fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f000 fe8e 	bl	80077fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d001      	beq.n	8006b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e04e      	b.n	8006bf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a23      	ldr	r2, [pc, #140]	; (8006c00 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d022      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7e:	d01d      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x80>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d111      	bne.n	8006be0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b06      	cmp	r3, #6
 8006bcc:	d010      	beq.n	8006bf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bde:	e007      	b.n	8006bf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800
 8006c0c:	40000c00 	.word	0x40000c00
 8006c10:	40010400 	.word	0x40010400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40001800 	.word	0x40001800

08006c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e041      	b.n	8006cb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f839 	bl	8006cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f000 fdce 	bl	80077fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <HAL_TIM_PWM_Start+0x24>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	bf14      	ite	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	2300      	moveq	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e022      	b.n	8006d3a <HAL_TIM_PWM_Start+0x6a>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d109      	bne.n	8006d0e <HAL_TIM_PWM_Start+0x3e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	bf14      	ite	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	2300      	moveq	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	e015      	b.n	8006d3a <HAL_TIM_PWM_Start+0x6a>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d109      	bne.n	8006d28 <HAL_TIM_PWM_Start+0x58>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	e008      	b.n	8006d3a <HAL_TIM_PWM_Start+0x6a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	bf14      	ite	ne
 8006d34:	2301      	movne	r3, #1
 8006d36:	2300      	moveq	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e07c      	b.n	8006e3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_PWM_Start+0x82>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d50:	e013      	b.n	8006d7a <HAL_TIM_PWM_Start+0xaa>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d104      	bne.n	8006d62 <HAL_TIM_PWM_Start+0x92>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d60:	e00b      	b.n	8006d7a <HAL_TIM_PWM_Start+0xaa>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d104      	bne.n	8006d72 <HAL_TIM_PWM_Start+0xa2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d70:	e003      	b.n	8006d7a <HAL_TIM_PWM_Start+0xaa>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 f94e 	bl	8008024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a2d      	ldr	r2, [pc, #180]	; (8006e44 <HAL_TIM_PWM_Start+0x174>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_TIM_PWM_Start+0xcc>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2c      	ldr	r2, [pc, #176]	; (8006e48 <HAL_TIM_PWM_Start+0x178>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d101      	bne.n	8006da0 <HAL_TIM_PWM_Start+0xd0>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <HAL_TIM_PWM_Start+0xd2>
 8006da0:	2300      	movs	r3, #0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a22      	ldr	r2, [pc, #136]	; (8006e44 <HAL_TIM_PWM_Start+0x174>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d01d      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1f      	ldr	r2, [pc, #124]	; (8006e4c <HAL_TIM_PWM_Start+0x17c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1d      	ldr	r2, [pc, #116]	; (8006e50 <HAL_TIM_PWM_Start+0x180>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1c      	ldr	r2, [pc, #112]	; (8006e54 <HAL_TIM_PWM_Start+0x184>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <HAL_TIM_PWM_Start+0x178>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <HAL_TIM_PWM_Start+0x188>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x136>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <HAL_TIM_PWM_Start+0x18c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d111      	bne.n	8006e2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b06      	cmp	r3, #6
 8006e16:	d010      	beq.n	8006e3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e28:	e007      	b.n	8006e3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40010400 	.word	0x40010400
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40000c00 	.word	0x40000c00
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40001800 	.word	0x40001800

08006e60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e041      	b.n	8006ef6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f839 	bl	8006efe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	f000 fcac 	bl	80077fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_IC_Start_IT+0x1e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	e013      	b.n	8006f5a <HAL_TIM_IC_Start_IT+0x46>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_IC_Start_IT+0x2e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	e00b      	b.n	8006f5a <HAL_TIM_IC_Start_IT+0x46>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_IC_Start_IT+0x3e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	e003      	b.n	8006f5a <HAL_TIM_IC_Start_IT+0x46>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <HAL_TIM_IC_Start_IT+0x58>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e013      	b.n	8006f94 <HAL_TIM_IC_Start_IT+0x80>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d104      	bne.n	8006f7c <HAL_TIM_IC_Start_IT+0x68>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	e00b      	b.n	8006f94 <HAL_TIM_IC_Start_IT+0x80>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d104      	bne.n	8006f8c <HAL_TIM_IC_Start_IT+0x78>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e003      	b.n	8006f94 <HAL_TIM_IC_Start_IT+0x80>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d102      	bne.n	8006fa2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f9c:	7b7b      	ldrb	r3, [r7, #13]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d001      	beq.n	8006fa6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e0cc      	b.n	8007140 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d104      	bne.n	8006fb6 <HAL_TIM_IC_Start_IT+0xa2>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fb4:	e013      	b.n	8006fde <HAL_TIM_IC_Start_IT+0xca>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d104      	bne.n	8006fc6 <HAL_TIM_IC_Start_IT+0xb2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fc4:	e00b      	b.n	8006fde <HAL_TIM_IC_Start_IT+0xca>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d104      	bne.n	8006fd6 <HAL_TIM_IC_Start_IT+0xc2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd4:	e003      	b.n	8006fde <HAL_TIM_IC_Start_IT+0xca>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d104      	bne.n	8006fee <HAL_TIM_IC_Start_IT+0xda>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fec:	e013      	b.n	8007016 <HAL_TIM_IC_Start_IT+0x102>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d104      	bne.n	8006ffe <HAL_TIM_IC_Start_IT+0xea>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ffc:	e00b      	b.n	8007016 <HAL_TIM_IC_Start_IT+0x102>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b08      	cmp	r3, #8
 8007002:	d104      	bne.n	800700e <HAL_TIM_IC_Start_IT+0xfa>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800700c:	e003      	b.n	8007016 <HAL_TIM_IC_Start_IT+0x102>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2202      	movs	r2, #2
 8007012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d841      	bhi.n	80070a0 <HAL_TIM_IC_Start_IT+0x18c>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <HAL_TIM_IC_Start_IT+0x110>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	08007059 	.word	0x08007059
 8007028:	080070a1 	.word	0x080070a1
 800702c:	080070a1 	.word	0x080070a1
 8007030:	080070a1 	.word	0x080070a1
 8007034:	0800706b 	.word	0x0800706b
 8007038:	080070a1 	.word	0x080070a1
 800703c:	080070a1 	.word	0x080070a1
 8007040:	080070a1 	.word	0x080070a1
 8007044:	0800707d 	.word	0x0800707d
 8007048:	080070a1 	.word	0x080070a1
 800704c:	080070a1 	.word	0x080070a1
 8007050:	080070a1 	.word	0x080070a1
 8007054:	0800708f 	.word	0x0800708f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0202 	orr.w	r2, r2, #2
 8007066:	60da      	str	r2, [r3, #12]
      break;
 8007068:	e01d      	b.n	80070a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0204 	orr.w	r2, r2, #4
 8007078:	60da      	str	r2, [r3, #12]
      break;
 800707a:	e014      	b.n	80070a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0208 	orr.w	r2, r2, #8
 800708a:	60da      	str	r2, [r3, #12]
      break;
 800708c:	e00b      	b.n	80070a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f042 0210 	orr.w	r2, r2, #16
 800709c:	60da      	str	r2, [r3, #12]
      break;
 800709e:	e002      	b.n	80070a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]
      break;
 80070a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d148      	bne.n	800713e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2201      	movs	r2, #1
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 ffb5 	bl	8008024 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a22      	ldr	r2, [pc, #136]	; (8007148 <HAL_TIM_IC_Start_IT+0x234>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d022      	beq.n	800710a <HAL_TIM_IC_Start_IT+0x1f6>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070cc:	d01d      	beq.n	800710a <HAL_TIM_IC_Start_IT+0x1f6>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1e      	ldr	r2, [pc, #120]	; (800714c <HAL_TIM_IC_Start_IT+0x238>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_TIM_IC_Start_IT+0x1f6>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1c      	ldr	r2, [pc, #112]	; (8007150 <HAL_TIM_IC_Start_IT+0x23c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_TIM_IC_Start_IT+0x1f6>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1b      	ldr	r2, [pc, #108]	; (8007154 <HAL_TIM_IC_Start_IT+0x240>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_TIM_IC_Start_IT+0x1f6>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a19      	ldr	r2, [pc, #100]	; (8007158 <HAL_TIM_IC_Start_IT+0x244>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_TIM_IC_Start_IT+0x1f6>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a18      	ldr	r2, [pc, #96]	; (800715c <HAL_TIM_IC_Start_IT+0x248>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_TIM_IC_Start_IT+0x1f6>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a16      	ldr	r2, [pc, #88]	; (8007160 <HAL_TIM_IC_Start_IT+0x24c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d111      	bne.n	800712e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b06      	cmp	r3, #6
 800711a:	d010      	beq.n	800713e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712c:	e007      	b.n	800713e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0201 	orr.w	r2, r2, #1
 800713c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	40010000 	.word	0x40010000
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40010400 	.word	0x40010400
 800715c:	40014000 	.word	0x40014000
 8007160:	40001800 	.word	0x40001800

08007164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b02      	cmp	r3, #2
 8007178:	d122      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b02      	cmp	r3, #2
 8007186:	d11b      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f06f 0202 	mvn.w	r2, #2
 8007190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fc f804 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 80071ac:	e005      	b.n	80071ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fb05 	bl	80077be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fb0c 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d122      	bne.n	8007214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d11b      	bne.n	8007214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f06f 0204 	mvn.w	r2, #4
 80071e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fb ffda 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 8007200:	e005      	b.n	800720e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fadb 	bl	80077be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fae2 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b08      	cmp	r3, #8
 8007220:	d122      	bne.n	8007268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b08      	cmp	r3, #8
 800722e:	d11b      	bne.n	8007268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0208 	mvn.w	r2, #8
 8007238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2204      	movs	r2, #4
 800723e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7fb ffb0 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 8007254:	e005      	b.n	8007262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fab1 	bl	80077be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fab8 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0310 	and.w	r3, r3, #16
 8007272:	2b10      	cmp	r3, #16
 8007274:	d122      	bne.n	80072bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b10      	cmp	r3, #16
 8007282:	d11b      	bne.n	80072bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0210 	mvn.w	r2, #16
 800728c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2208      	movs	r2, #8
 8007292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb ff86 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 80072a8:	e005      	b.n	80072b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa87 	bl	80077be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa8e 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d10e      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d107      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0201 	mvn.w	r2, #1
 80072e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fa fb60 	bl	80019a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f2:	2b80      	cmp	r3, #128	; 0x80
 80072f4:	d10e      	bne.n	8007314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007300:	2b80      	cmp	r3, #128	; 0x80
 8007302:	d107      	bne.n	8007314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800730c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 ff86 	bl	8008220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d10e      	bne.n	8007340 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d107      	bne.n	8007340 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa53 	bl	80077e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b20      	cmp	r3, #32
 800734c:	d10e      	bne.n	800736c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	2b20      	cmp	r3, #32
 800735a:	d107      	bne.n	800736c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f06f 0220 	mvn.w	r2, #32
 8007364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 ff50 	bl	800820c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <HAL_TIM_IC_ConfigChannel+0x1e>
 800738e:	2302      	movs	r3, #2
 8007390:	e088      	b.n	80074a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11b      	bne.n	80073d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	6819      	ldr	r1, [r3, #0]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f000 fc74 	bl	8007c9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 020c 	bic.w	r2, r2, #12
 80073c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6999      	ldr	r1, [r3, #24]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	619a      	str	r2, [r3, #24]
 80073d6:	e060      	b.n	800749a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d11c      	bne.n	8007418 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6819      	ldr	r1, [r3, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f000 fcf8 	bl	8007de2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	699a      	ldr	r2, [r3, #24]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007400:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6999      	ldr	r1, [r3, #24]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	021a      	lsls	r2, r3, #8
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	619a      	str	r2, [r3, #24]
 8007416:	e040      	b.n	800749a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b08      	cmp	r3, #8
 800741c:	d11b      	bne.n	8007456 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6819      	ldr	r1, [r3, #0]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f000 fd45 	bl	8007ebc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69da      	ldr	r2, [r3, #28]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 020c 	bic.w	r2, r2, #12
 8007440:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69d9      	ldr	r1, [r3, #28]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	61da      	str	r2, [r3, #28]
 8007454:	e021      	b.n	800749a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b0c      	cmp	r3, #12
 800745a:	d11c      	bne.n	8007496 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f000 fd62 	bl	8007f34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69da      	ldr	r2, [r3, #28]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800747e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69d9      	ldr	r1, [r3, #28]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	021a      	lsls	r2, r3, #8
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	61da      	str	r2, [r3, #28]
 8007494:	e001      	b.n	800749a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e0ae      	b.n	8007628 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b0c      	cmp	r3, #12
 80074d6:	f200 809f 	bhi.w	8007618 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007515 	.word	0x08007515
 80074e4:	08007619 	.word	0x08007619
 80074e8:	08007619 	.word	0x08007619
 80074ec:	08007619 	.word	0x08007619
 80074f0:	08007555 	.word	0x08007555
 80074f4:	08007619 	.word	0x08007619
 80074f8:	08007619 	.word	0x08007619
 80074fc:	08007619 	.word	0x08007619
 8007500:	08007597 	.word	0x08007597
 8007504:	08007619 	.word	0x08007619
 8007508:	08007619 	.word	0x08007619
 800750c:	08007619 	.word	0x08007619
 8007510:	080075d7 	.word	0x080075d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fa0e 	bl	800793c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0208 	orr.w	r2, r2, #8
 800752e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0204 	bic.w	r2, r2, #4
 800753e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6999      	ldr	r1, [r3, #24]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	691a      	ldr	r2, [r3, #16]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	619a      	str	r2, [r3, #24]
      break;
 8007552:	e064      	b.n	800761e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fa5e 	bl	8007a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800756e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6999      	ldr	r1, [r3, #24]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	021a      	lsls	r2, r3, #8
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	619a      	str	r2, [r3, #24]
      break;
 8007594:	e043      	b.n	800761e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fab3 	bl	8007b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0208 	orr.w	r2, r2, #8
 80075b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69da      	ldr	r2, [r3, #28]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0204 	bic.w	r2, r2, #4
 80075c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69d9      	ldr	r1, [r3, #28]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	61da      	str	r2, [r3, #28]
      break;
 80075d4:	e023      	b.n	800761e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68b9      	ldr	r1, [r7, #8]
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fb07 	bl	8007bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69da      	ldr	r2, [r3, #28]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69da      	ldr	r2, [r3, #28]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69d9      	ldr	r1, [r3, #28]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	021a      	lsls	r2, r3, #8
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	61da      	str	r2, [r3, #28]
      break;
 8007616:	e002      	b.n	800761e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	75fb      	strb	r3, [r7, #23]
      break;
 800761c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007626:	7dfb      	ldrb	r3, [r7, #23]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_TIM_ConfigClockSource+0x1c>
 8007648:	2302      	movs	r3, #2
 800764a:	e0b4      	b.n	80077b6 <HAL_TIM_ConfigClockSource+0x186>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800766a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007684:	d03e      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0xd4>
 8007686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800768a:	f200 8087 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x16c>
 800768e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007692:	f000 8086 	beq.w	80077a2 <HAL_TIM_ConfigClockSource+0x172>
 8007696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769a:	d87f      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x16c>
 800769c:	2b70      	cmp	r3, #112	; 0x70
 800769e:	d01a      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0xa6>
 80076a0:	2b70      	cmp	r3, #112	; 0x70
 80076a2:	d87b      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x16c>
 80076a4:	2b60      	cmp	r3, #96	; 0x60
 80076a6:	d050      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x11a>
 80076a8:	2b60      	cmp	r3, #96	; 0x60
 80076aa:	d877      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x16c>
 80076ac:	2b50      	cmp	r3, #80	; 0x50
 80076ae:	d03c      	beq.n	800772a <HAL_TIM_ConfigClockSource+0xfa>
 80076b0:	2b50      	cmp	r3, #80	; 0x50
 80076b2:	d873      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x16c>
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d058      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x13a>
 80076b8:	2b40      	cmp	r3, #64	; 0x40
 80076ba:	d86f      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x16c>
 80076bc:	2b30      	cmp	r3, #48	; 0x30
 80076be:	d064      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x15a>
 80076c0:	2b30      	cmp	r3, #48	; 0x30
 80076c2:	d86b      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x16c>
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d060      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x15a>
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d867      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x16c>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d05c      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x15a>
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d05a      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x15a>
 80076d4:	e062      	b.n	800779c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	6899      	ldr	r1, [r3, #8]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f000 fc7d 	bl	8007fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	609a      	str	r2, [r3, #8]
      break;
 8007702:	e04f      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	6899      	ldr	r1, [r3, #8]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f000 fc66 	bl	8007fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007726:	609a      	str	r2, [r3, #8]
      break;
 8007728:	e03c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	6859      	ldr	r1, [r3, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	461a      	mov	r2, r3
 8007738:	f000 fb24 	bl	8007d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2150      	movs	r1, #80	; 0x50
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fc33 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 8007748:	e02c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	6859      	ldr	r1, [r3, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	461a      	mov	r2, r3
 8007758:	f000 fb80 	bl	8007e5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2160      	movs	r1, #96	; 0x60
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fc23 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 8007768:	e01c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6818      	ldr	r0, [r3, #0]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6859      	ldr	r1, [r3, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	461a      	mov	r2, r3
 8007778:	f000 fb04 	bl	8007d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2140      	movs	r1, #64	; 0x40
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fc13 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 8007788:	e00c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f000 fc0a 	bl	8007fae <TIM_ITRx_SetConfig>
      break;
 800779a:	e003      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
      break;
 80077a0:	e000      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
	...

080077fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a40      	ldr	r2, [pc, #256]	; (8007910 <TIM_Base_SetConfig+0x114>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d013      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781a:	d00f      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a3d      	ldr	r2, [pc, #244]	; (8007914 <TIM_Base_SetConfig+0x118>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00b      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a3c      	ldr	r2, [pc, #240]	; (8007918 <TIM_Base_SetConfig+0x11c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d007      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a3b      	ldr	r2, [pc, #236]	; (800791c <TIM_Base_SetConfig+0x120>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d003      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a3a      	ldr	r2, [pc, #232]	; (8007920 <TIM_Base_SetConfig+0x124>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d108      	bne.n	800784e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a2f      	ldr	r2, [pc, #188]	; (8007910 <TIM_Base_SetConfig+0x114>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d02b      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785c:	d027      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a2c      	ldr	r2, [pc, #176]	; (8007914 <TIM_Base_SetConfig+0x118>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d023      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2b      	ldr	r2, [pc, #172]	; (8007918 <TIM_Base_SetConfig+0x11c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d01f      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a2a      	ldr	r2, [pc, #168]	; (800791c <TIM_Base_SetConfig+0x120>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d01b      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a29      	ldr	r2, [pc, #164]	; (8007920 <TIM_Base_SetConfig+0x124>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d017      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a28      	ldr	r2, [pc, #160]	; (8007924 <TIM_Base_SetConfig+0x128>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a27      	ldr	r2, [pc, #156]	; (8007928 <TIM_Base_SetConfig+0x12c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00f      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a26      	ldr	r2, [pc, #152]	; (800792c <TIM_Base_SetConfig+0x130>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00b      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a25      	ldr	r2, [pc, #148]	; (8007930 <TIM_Base_SetConfig+0x134>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d007      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a24      	ldr	r2, [pc, #144]	; (8007934 <TIM_Base_SetConfig+0x138>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d003      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a23      	ldr	r2, [pc, #140]	; (8007938 <TIM_Base_SetConfig+0x13c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d108      	bne.n	80078c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a0a      	ldr	r2, [pc, #40]	; (8007910 <TIM_Base_SetConfig+0x114>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d003      	beq.n	80078f4 <TIM_Base_SetConfig+0xf8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a0c      	ldr	r2, [pc, #48]	; (8007920 <TIM_Base_SetConfig+0x124>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d103      	bne.n	80078fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	615a      	str	r2, [r3, #20]
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40010000 	.word	0x40010000
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40000c00 	.word	0x40000c00
 8007920:	40010400 	.word	0x40010400
 8007924:	40014000 	.word	0x40014000
 8007928:	40014400 	.word	0x40014400
 800792c:	40014800 	.word	0x40014800
 8007930:	40001800 	.word	0x40001800
 8007934:	40001c00 	.word	0x40001c00
 8007938:	40002000 	.word	0x40002000

0800793c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f023 0201 	bic.w	r2, r3, #1
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0303 	bic.w	r3, r3, #3
 8007972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f023 0302 	bic.w	r3, r3, #2
 8007984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a20      	ldr	r2, [pc, #128]	; (8007a14 <TIM_OC1_SetConfig+0xd8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC1_SetConfig+0x64>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <TIM_OC1_SetConfig+0xdc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d10c      	bne.n	80079ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0308 	bic.w	r3, r3, #8
 80079a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f023 0304 	bic.w	r3, r3, #4
 80079b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a15      	ldr	r2, [pc, #84]	; (8007a14 <TIM_OC1_SetConfig+0xd8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d003      	beq.n	80079ca <TIM_OC1_SetConfig+0x8e>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <TIM_OC1_SetConfig+0xdc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d111      	bne.n	80079ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	621a      	str	r2, [r3, #32]
}
 8007a08:	bf00      	nop
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40010400 	.word	0x40010400

08007a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	f023 0210 	bic.w	r2, r3, #16
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f023 0320 	bic.w	r3, r3, #32
 8007a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a22      	ldr	r2, [pc, #136]	; (8007b00 <TIM_OC2_SetConfig+0xe4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <TIM_OC2_SetConfig+0x68>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a21      	ldr	r2, [pc, #132]	; (8007b04 <TIM_OC2_SetConfig+0xe8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d10d      	bne.n	8007aa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a17      	ldr	r2, [pc, #92]	; (8007b00 <TIM_OC2_SetConfig+0xe4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_OC2_SetConfig+0x94>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a16      	ldr	r2, [pc, #88]	; (8007b04 <TIM_OC2_SetConfig+0xe8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d113      	bne.n	8007ad8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	621a      	str	r2, [r3, #32]
}
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40010000 	.word	0x40010000
 8007b04:	40010400 	.word	0x40010400

08007b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0303 	bic.w	r3, r3, #3
 8007b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a21      	ldr	r2, [pc, #132]	; (8007be8 <TIM_OC3_SetConfig+0xe0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d003      	beq.n	8007b6e <TIM_OC3_SetConfig+0x66>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a20      	ldr	r2, [pc, #128]	; (8007bec <TIM_OC3_SetConfig+0xe4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d10d      	bne.n	8007b8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	021b      	lsls	r3, r3, #8
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <TIM_OC3_SetConfig+0xe0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_OC3_SetConfig+0x92>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a15      	ldr	r2, [pc, #84]	; (8007bec <TIM_OC3_SetConfig+0xe4>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d113      	bne.n	8007bc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	621a      	str	r2, [r3, #32]
}
 8007bdc:	bf00      	nop
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40010400 	.word	0x40010400

08007bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	031b      	lsls	r3, r3, #12
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a12      	ldr	r2, [pc, #72]	; (8007c94 <TIM_OC4_SetConfig+0xa4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d003      	beq.n	8007c58 <TIM_OC4_SetConfig+0x68>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a11      	ldr	r2, [pc, #68]	; (8007c98 <TIM_OC4_SetConfig+0xa8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d109      	bne.n	8007c6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	019b      	lsls	r3, r3, #6
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	621a      	str	r2, [r3, #32]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40010000 	.word	0x40010000
 8007c98:	40010400 	.word	0x40010400

08007c9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f023 0201 	bic.w	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4a28      	ldr	r2, [pc, #160]	; (8007d68 <TIM_TI1_SetConfig+0xcc>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d01b      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd0:	d017      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4a25      	ldr	r2, [pc, #148]	; (8007d6c <TIM_TI1_SetConfig+0xd0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4a24      	ldr	r2, [pc, #144]	; (8007d70 <TIM_TI1_SetConfig+0xd4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00f      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4a23      	ldr	r2, [pc, #140]	; (8007d74 <TIM_TI1_SetConfig+0xd8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d00b      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4a22      	ldr	r2, [pc, #136]	; (8007d78 <TIM_TI1_SetConfig+0xdc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d007      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4a21      	ldr	r2, [pc, #132]	; (8007d7c <TIM_TI1_SetConfig+0xe0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d003      	beq.n	8007d02 <TIM_TI1_SetConfig+0x66>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4a20      	ldr	r2, [pc, #128]	; (8007d80 <TIM_TI1_SetConfig+0xe4>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d101      	bne.n	8007d06 <TIM_TI1_SetConfig+0x6a>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <TIM_TI1_SetConfig+0x6c>
 8007d06:	2300      	movs	r3, #0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d008      	beq.n	8007d1e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	e003      	b.n	8007d26 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f023 030a 	bic.w	r3, r3, #10
 8007d40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f003 030a 	and.w	r3, r3, #10
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	621a      	str	r2, [r3, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40000400 	.word	0x40000400
 8007d70:	40000800 	.word	0x40000800
 8007d74:	40000c00 	.word	0x40000c00
 8007d78:	40010400 	.word	0x40010400
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	40001800 	.word	0x40001800

08007d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a1b      	ldr	r3, [r3, #32]
 8007d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	f023 0201 	bic.w	r2, r3, #1
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f023 030a 	bic.w	r3, r3, #10
 8007dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	621a      	str	r2, [r3, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	371c      	adds	r7, #28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b087      	sub	sp, #28
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f023 0210 	bic.w	r2, r3, #16
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	021b      	lsls	r3, r3, #8
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	031b      	lsls	r3, r3, #12
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	011b      	lsls	r3, r3, #4
 8007e3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	621a      	str	r2, [r3, #32]
}
 8007e50:	bf00      	nop
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f023 0210 	bic.w	r2, r3, #16
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	031b      	lsls	r3, r3, #12
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	011b      	lsls	r3, r3, #4
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	621a      	str	r2, [r3, #32]
}
 8007eb0:	bf00      	nop
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f023 0303 	bic.w	r3, r3, #3
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ef8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007f0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	621a      	str	r2, [r3, #32]
}
 8007f28:	bf00      	nop
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	031b      	lsls	r3, r3, #12
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007f86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	031b      	lsls	r3, r3, #12
 8007f8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f043 0307 	orr.w	r3, r3, #7
 8007fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	609a      	str	r2, [r3, #8]
}
 8007fd8:	bf00      	nop
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	021a      	lsls	r2, r3, #8
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	431a      	orrs	r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	4313      	orrs	r3, r2
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	609a      	str	r2, [r3, #8]
}
 8008018:	bf00      	nop
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	2201      	movs	r2, #1
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a1a      	ldr	r2, [r3, #32]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	43db      	mvns	r3, r3
 8008046:	401a      	ands	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1a      	ldr	r2, [r3, #32]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	fa01 f303 	lsl.w	r3, r1, r3
 800805c:	431a      	orrs	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	621a      	str	r2, [r3, #32]
}
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008080:	2b01      	cmp	r3, #1
 8008082:	d101      	bne.n	8008088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008084:	2302      	movs	r3, #2
 8008086:	e05a      	b.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a21      	ldr	r2, [pc, #132]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d022      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d4:	d01d      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1d      	ldr	r2, [pc, #116]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d018      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1b      	ldr	r2, [pc, #108]	; (8008154 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d013      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1a      	ldr	r2, [pc, #104]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a18      	ldr	r2, [pc, #96]	; (800815c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d009      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a17      	ldr	r2, [pc, #92]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a15      	ldr	r2, [pc, #84]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d10c      	bne.n	800812c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4313      	orrs	r3, r2
 8008122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40010000 	.word	0x40010000
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40010400 	.word	0x40010400
 8008160:	40014000 	.word	0x40014000
 8008164:	40001800 	.word	0x40001800

08008168 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008180:	2302      	movs	r3, #2
 8008182:	e03d      	b.n	8008200 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e03f      	b.n	80082c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7fa f824 	bl	80022a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2224      	movs	r2, #36	; 0x24
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 ffc9 	bl	8009210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800828c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695a      	ldr	r2, [r3, #20]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800829c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08c      	sub	sp, #48	; 0x30
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4613      	mov	r3, r2
 80082dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d165      	bne.n	80083b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <HAL_UART_Transmit_DMA+0x26>
 80082f0:	88fb      	ldrh	r3, [r7, #6]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e05e      	b.n	80083b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_UART_Transmit_DMA+0x38>
 8008304:	2302      	movs	r3, #2
 8008306:	e057      	b.n	80083b8 <HAL_UART_Transmit_DMA+0xe8>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	88fa      	ldrh	r2, [r7, #6]
 800831a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2221      	movs	r2, #33	; 0x21
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008334:	4a22      	ldr	r2, [pc, #136]	; (80083c0 <HAL_UART_Transmit_DMA+0xf0>)
 8008336:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833c:	4a21      	ldr	r2, [pc, #132]	; (80083c4 <HAL_UART_Transmit_DMA+0xf4>)
 800833e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	4a20      	ldr	r2, [pc, #128]	; (80083c8 <HAL_UART_Transmit_DMA+0xf8>)
 8008346:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	2200      	movs	r2, #0
 800834e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008350:	f107 0308 	add.w	r3, r7, #8
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	6819      	ldr	r1, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3304      	adds	r3, #4
 8008364:	461a      	mov	r2, r3
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	f7fc f8a2 	bl	80044b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008374:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3314      	adds	r3, #20
 8008384:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	617b      	str	r3, [r7, #20]
   return(result);
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3314      	adds	r3, #20
 800839c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800839e:	627a      	str	r2, [r7, #36]	; 0x24
 80083a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6a39      	ldr	r1, [r7, #32]
 80083a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	e000      	b.n	80083b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80083b6:	2302      	movs	r3, #2
  }
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3730      	adds	r7, #48	; 0x30
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	08008ab1 	.word	0x08008ab1
 80083c4:	08008b4b 	.word	0x08008b4b
 80083c8:	08008cc3 	.word	0x08008cc3

080083cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d11d      	bne.n	8008422 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <HAL_UART_Receive_DMA+0x26>
 80083ec:	88fb      	ldrh	r3, [r7, #6]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e016      	b.n	8008424 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_UART_Receive_DMA+0x38>
 8008400:	2302      	movs	r3, #2
 8008402:	e00f      	b.n	8008424 <HAL_UART_Receive_DMA+0x58>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	461a      	mov	r2, r3
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 fc9d 	bl	8008d58 <UART_Start_Receive_DMA>
 800841e:	4603      	mov	r3, r0
 8008420:	e000      	b.n	8008424 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008422:	2302      	movs	r3, #2
  }
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b090      	sub	sp, #64	; 0x40
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008434:	2300      	movs	r3, #0
 8008436:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008442:	2b80      	cmp	r3, #128	; 0x80
 8008444:	bf0c      	ite	eq
 8008446:	2301      	moveq	r3, #1
 8008448:	2300      	movne	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b21      	cmp	r3, #33	; 0x21
 8008458:	d128      	bne.n	80084ac <HAL_UART_DMAStop+0x80>
 800845a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d025      	beq.n	80084ac <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3314      	adds	r3, #20
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	623b      	str	r3, [r7, #32]
   return(result);
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008476:	63bb      	str	r3, [r7, #56]	; 0x38
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3314      	adds	r3, #20
 800847e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008480:	633a      	str	r2, [r7, #48]	; 0x30
 8008482:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e5      	bne.n	8008460 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	2b00      	cmp	r3, #0
 800849a:	d004      	beq.n	80084a6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fc f85d 	bl	8004560 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fcf0 	bl	8008e8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b6:	2b40      	cmp	r3, #64	; 0x40
 80084b8:	bf0c      	ite	eq
 80084ba:	2301      	moveq	r3, #1
 80084bc:	2300      	movne	r3, #0
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b22      	cmp	r3, #34	; 0x22
 80084cc:	d128      	bne.n	8008520 <HAL_UART_DMAStop+0xf4>
 80084ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d025      	beq.n	8008520 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3314      	adds	r3, #20
 80084da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ea:	637b      	str	r3, [r7, #52]	; 0x34
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3314      	adds	r3, #20
 80084f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f4:	61fa      	str	r2, [r7, #28]
 80084f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	69b9      	ldr	r1, [r7, #24]
 80084fa:	69fa      	ldr	r2, [r7, #28]
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	617b      	str	r3, [r7, #20]
   return(result);
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e5      	bne.n	80084d4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	2b00      	cmp	r3, #0
 800850e:	d004      	beq.n	800851a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	4618      	mov	r0, r3
 8008516:	f7fc f823 	bl	8004560 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fcde 	bl	8008edc <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3740      	adds	r7, #64	; 0x40
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b0ba      	sub	sp, #232	; 0xe8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008552:	2300      	movs	r3, #0
 8008554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008558:	2300      	movs	r3, #0
 800855a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800855e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800856a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10f      	bne.n	8008592 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d009      	beq.n	8008592 <HAL_UART_IRQHandler+0x66>
 800857e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fd85 	bl	800909a <UART_Receive_IT>
      return;
 8008590:	e256      	b.n	8008a40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 80de 	beq.w	8008758 <HAL_UART_IRQHandler+0x22c>
 800859c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 80d1 	beq.w	8008758 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80085b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <HAL_UART_IRQHandler+0xae>
 80085c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	f043 0201 	orr.w	r2, r3, #1
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00b      	beq.n	80085fe <HAL_UART_IRQHandler+0xd2>
 80085e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d005      	beq.n	80085fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	f043 0202 	orr.w	r2, r3, #2
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <HAL_UART_IRQHandler+0xf6>
 800860a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	f043 0204 	orr.w	r2, r3, #4
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d011      	beq.n	8008652 <HAL_UART_IRQHandler+0x126>
 800862e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008632:	f003 0320 	and.w	r3, r3, #32
 8008636:	2b00      	cmp	r3, #0
 8008638:	d105      	bne.n	8008646 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800863a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d005      	beq.n	8008652 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	f043 0208 	orr.w	r2, r3, #8
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 81ed 	beq.w	8008a36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800865c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b00      	cmp	r3, #0
 8008666:	d008      	beq.n	800867a <HAL_UART_IRQHandler+0x14e>
 8008668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fd10 	bl	800909a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008684:	2b40      	cmp	r3, #64	; 0x40
 8008686:	bf0c      	ite	eq
 8008688:	2301      	moveq	r3, #1
 800868a:	2300      	movne	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d103      	bne.n	80086a6 <HAL_UART_IRQHandler+0x17a>
 800869e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d04f      	beq.n	8008746 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fc18 	bl	8008edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b6:	2b40      	cmp	r3, #64	; 0x40
 80086b8:	d141      	bne.n	800873e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3314      	adds	r3, #20
 80086c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80086d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3314      	adds	r3, #20
 80086e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80086e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80086ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1d9      	bne.n	80086ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	2b00      	cmp	r3, #0
 800870c:	d013      	beq.n	8008736 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	4a7d      	ldr	r2, [pc, #500]	; (8008908 <HAL_UART_IRQHandler+0x3dc>)
 8008714:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	4618      	mov	r0, r3
 800871c:	f7fb ff90 	bl	8004640 <HAL_DMA_Abort_IT>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d016      	beq.n	8008754 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008730:	4610      	mov	r0, r2
 8008732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008734:	e00e      	b.n	8008754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f9a4 	bl	8008a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873c:	e00a      	b.n	8008754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9a0 	bl	8008a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008744:	e006      	b.n	8008754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f99c 	bl	8008a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008752:	e170      	b.n	8008a36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008754:	bf00      	nop
    return;
 8008756:	e16e      	b.n	8008a36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	2b01      	cmp	r3, #1
 800875e:	f040 814a 	bne.w	80089f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008766:	f003 0310 	and.w	r3, r3, #16
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 8143 	beq.w	80089f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008774:	f003 0310 	and.w	r3, r3, #16
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 813c 	beq.w	80089f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800877e:	2300      	movs	r3, #0
 8008780:	60bb      	str	r3, [r7, #8]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60bb      	str	r3, [r7, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	60bb      	str	r3, [r7, #8]
 8008792:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879e:	2b40      	cmp	r3, #64	; 0x40
 80087a0:	f040 80b4 	bne.w	800890c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8140 	beq.w	8008a3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087c2:	429a      	cmp	r2, r3
 80087c4:	f080 8139 	bcs.w	8008a3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087da:	f000 8088 	beq.w	80088ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	330c      	adds	r3, #12
 80087e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	330c      	adds	r3, #12
 8008806:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800880a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800880e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008816:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1d9      	bne.n	80087de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3314      	adds	r3, #20
 8008830:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800883a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800883c:	f023 0301 	bic.w	r3, r3, #1
 8008840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3314      	adds	r3, #20
 800884a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800884e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008852:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008856:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e1      	bne.n	800882a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3314      	adds	r3, #20
 800886c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800887c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3314      	adds	r3, #20
 8008886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800888a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800888c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008890:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e3      	bne.n	8008866 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	330c      	adds	r3, #12
 80088b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088be:	f023 0310 	bic.w	r3, r3, #16
 80088c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	330c      	adds	r3, #12
 80088cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80088d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80088d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e3      	bne.n	80088ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fb fe39 	bl	8004560 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f8ca 	bl	8008a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008904:	e099      	b.n	8008a3a <HAL_UART_IRQHandler+0x50e>
 8008906:	bf00      	nop
 8008908:	08008fa3 	.word	0x08008fa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008914:	b29b      	uxth	r3, r3
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 808b 	beq.w	8008a3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8086 	beq.w	8008a3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	330c      	adds	r3, #12
 8008938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	330c      	adds	r3, #12
 8008952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008956:	647a      	str	r2, [r7, #68]	; 0x44
 8008958:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800895c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e3      	bne.n	8008932 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3314      	adds	r3, #20
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	623b      	str	r3, [r7, #32]
   return(result);
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	f023 0301 	bic.w	r3, r3, #1
 8008980:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3314      	adds	r3, #20
 800898a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800898e:	633a      	str	r2, [r7, #48]	; 0x30
 8008990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e3      	bne.n	800896a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	330c      	adds	r3, #12
 80089b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	60fb      	str	r3, [r7, #12]
   return(result);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 0310 	bic.w	r3, r3, #16
 80089c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	330c      	adds	r3, #12
 80089d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80089d4:	61fa      	str	r2, [r7, #28]
 80089d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	69b9      	ldr	r1, [r7, #24]
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	617b      	str	r3, [r7, #20]
   return(result);
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e3      	bne.n	80089b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f852 	bl	8008a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f4:	e023      	b.n	8008a3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <HAL_UART_IRQHandler+0x4ea>
 8008a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fadb 	bl	8008fca <UART_Transmit_IT>
    return;
 8008a14:	e014      	b.n	8008a40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00e      	beq.n	8008a40 <HAL_UART_IRQHandler+0x514>
 8008a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d008      	beq.n	8008a40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fb1b 	bl	800906a <UART_EndTransmit_IT>
    return;
 8008a34:	e004      	b.n	8008a40 <HAL_UART_IRQHandler+0x514>
    return;
 8008a36:	bf00      	nop
 8008a38:	e002      	b.n	8008a40 <HAL_UART_IRQHandler+0x514>
      return;
 8008a3a:	bf00      	nop
 8008a3c:	e000      	b.n	8008a40 <HAL_UART_IRQHandler+0x514>
      return;
 8008a3e:	bf00      	nop
  }
}
 8008a40:	37e8      	adds	r7, #232	; 0xe8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop

08008a48 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b090      	sub	sp, #64	; 0x40
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d137      	bne.n	8008b3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ace:	2200      	movs	r2, #0
 8008ad0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3314      	adds	r3, #20
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3314      	adds	r3, #20
 8008af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008af2:	633a      	str	r2, [r7, #48]	; 0x30
 8008af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e5      	bne.n	8008ad2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	330c      	adds	r3, #12
 8008b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b26:	61fa      	str	r2, [r7, #28]
 8008b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	69b9      	ldr	r1, [r7, #24]
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	617b      	str	r3, [r7, #20]
   return(result);
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e5      	bne.n	8008b06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b3a:	e002      	b.n	8008b42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008b3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b3e:	f7f9 fee9 	bl	8002914 <HAL_UART_TxCpltCallback>
}
 8008b42:	bf00      	nop
 8008b44:	3740      	adds	r7, #64	; 0x40
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7ff ff75 	bl	8008a48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b09c      	sub	sp, #112	; 0x70
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d172      	bne.n	8008c68 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b84:	2200      	movs	r2, #0
 8008b86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ba8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008baa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e5      	bne.n	8008b88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3314      	adds	r3, #20
 8008bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bce:	f023 0301 	bic.w	r3, r3, #1
 8008bd2:	667b      	str	r3, [r7, #100]	; 0x64
 8008bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3314      	adds	r3, #20
 8008bda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008bdc:	647a      	str	r2, [r7, #68]	; 0x44
 8008bde:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e5      	bne.n	8008bbc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3314      	adds	r3, #20
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	e853 3f00 	ldrex	r3, [r3]
 8008bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c06:	663b      	str	r3, [r7, #96]	; 0x60
 8008c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3314      	adds	r3, #20
 8008c0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c10:	633a      	str	r2, [r7, #48]	; 0x30
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e5      	bne.n	8008bf0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d119      	bne.n	8008c68 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	330c      	adds	r3, #12
 8008c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0310 	bic.w	r3, r3, #16
 8008c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	330c      	adds	r3, #12
 8008c52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c54:	61fa      	str	r2, [r7, #28]
 8008c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	69b9      	ldr	r1, [r7, #24]
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	617b      	str	r3, [r7, #20]
   return(result);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e5      	bne.n	8008c34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d106      	bne.n	8008c7e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c74:	4619      	mov	r1, r3
 8008c76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c78:	f7ff ff0e 	bl	8008a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c7c:	e002      	b.n	8008c84 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008c7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c80:	f7ff feec 	bl	8008a5c <HAL_UART_RxCpltCallback>
}
 8008c84:	bf00      	nop
 8008c86:	3770      	adds	r7, #112	; 0x70
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d108      	bne.n	8008cb4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ca6:	085b      	lsrs	r3, r3, #1
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	4619      	mov	r1, r3
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7ff fef3 	bl	8008a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cb2:	e002      	b.n	8008cba <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f7ff fedb 	bl	8008a70 <HAL_UART_RxHalfCpltCallback>
}
 8008cba:	bf00      	nop
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cde:	2b80      	cmp	r3, #128	; 0x80
 8008ce0:	bf0c      	ite	eq
 8008ce2:	2301      	moveq	r3, #1
 8008ce4:	2300      	movne	r3, #0
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b21      	cmp	r3, #33	; 0x21
 8008cf4:	d108      	bne.n	8008d08 <UART_DMAError+0x46>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d02:	68b8      	ldr	r0, [r7, #8]
 8008d04:	f000 f8c2 	bl	8008e8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	bf0c      	ite	eq
 8008d16:	2301      	moveq	r3, #1
 8008d18:	2300      	movne	r3, #0
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b22      	cmp	r3, #34	; 0x22
 8008d28:	d108      	bne.n	8008d3c <UART_DMAError+0x7a>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008d36:	68b8      	ldr	r0, [r7, #8]
 8008d38:	f000 f8d0 	bl	8008edc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d40:	f043 0210 	orr.w	r2, r3, #16
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d48:	68b8      	ldr	r0, [r7, #8]
 8008d4a:	f7ff fe9b 	bl	8008a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b098      	sub	sp, #96	; 0x60
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	4613      	mov	r3, r2
 8008d64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	88fa      	ldrh	r2, [r7, #6]
 8008d70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2222      	movs	r2, #34	; 0x22
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	4a3e      	ldr	r2, [pc, #248]	; (8008e80 <UART_Start_Receive_DMA+0x128>)
 8008d86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8c:	4a3d      	ldr	r2, [pc, #244]	; (8008e84 <UART_Start_Receive_DMA+0x12c>)
 8008d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d94:	4a3c      	ldr	r2, [pc, #240]	; (8008e88 <UART_Start_Receive_DMA+0x130>)
 8008d96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	88fb      	ldrh	r3, [r7, #6]
 8008db8:	f7fb fb7a 	bl	80044b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	613b      	str	r3, [r7, #16]
 8008dd0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	330c      	adds	r3, #12
 8008de0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	330c      	adds	r3, #12
 8008df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008dfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e5      	bne.n	8008dda <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3314      	adds	r3, #20
 8008e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	f043 0301 	orr.w	r3, r3, #1
 8008e24:	657b      	str	r3, [r7, #84]	; 0x54
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3314      	adds	r3, #20
 8008e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e36:	e841 2300 	strex	r3, r2, [r1]
 8008e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e5      	bne.n	8008e0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3314      	adds	r3, #20
 8008e48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	e853 3f00 	ldrex	r3, [r3]
 8008e50:	617b      	str	r3, [r7, #20]
   return(result);
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e58:	653b      	str	r3, [r7, #80]	; 0x50
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3314      	adds	r3, #20
 8008e60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e62:	627a      	str	r2, [r7, #36]	; 0x24
 8008e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e66:	6a39      	ldr	r1, [r7, #32]
 8008e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6a:	e841 2300 	strex	r3, r2, [r1]
 8008e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1e5      	bne.n	8008e42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3760      	adds	r7, #96	; 0x60
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	08008b67 	.word	0x08008b67
 8008e84:	08008c8d 	.word	0x08008c8d
 8008e88:	08008cc3 	.word	0x08008cc3

08008e8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b089      	sub	sp, #36	; 0x24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	330c      	adds	r3, #12
 8008e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	330c      	adds	r3, #12
 8008eb2:	69fa      	ldr	r2, [r7, #28]
 8008eb4:	61ba      	str	r2, [r7, #24]
 8008eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6979      	ldr	r1, [r7, #20]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e5      	bne.n	8008e94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008ed0:	bf00      	nop
 8008ed2:	3724      	adds	r7, #36	; 0x24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b095      	sub	sp, #84	; 0x54
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	330c      	adds	r3, #12
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f04:	643a      	str	r2, [r7, #64]	; 0x40
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e5      	bne.n	8008ee4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3314      	adds	r3, #20
 8008f1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	e853 3f00 	ldrex	r3, [r3]
 8008f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	f023 0301 	bic.w	r3, r3, #1
 8008f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3314      	adds	r3, #20
 8008f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f40:	e841 2300 	strex	r3, r2, [r1]
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e5      	bne.n	8008f18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d119      	bne.n	8008f88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	330c      	adds	r3, #12
 8008f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f023 0310 	bic.w	r3, r3, #16
 8008f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	330c      	adds	r3, #12
 8008f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f74:	61ba      	str	r2, [r7, #24]
 8008f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6979      	ldr	r1, [r7, #20]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	613b      	str	r3, [r7, #16]
   return(result);
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e5      	bne.n	8008f54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f96:	bf00      	nop
 8008f98:	3754      	adds	r7, #84	; 0x54
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff fd61 	bl	8008a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b085      	sub	sp, #20
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b21      	cmp	r3, #33	; 0x21
 8008fdc:	d13e      	bne.n	800905c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe6:	d114      	bne.n	8009012 <UART_Transmit_IT+0x48>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d110      	bne.n	8009012 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
 8008ff4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009004:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	1c9a      	adds	r2, r3, #2
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	621a      	str	r2, [r3, #32]
 8009010:	e008      	b.n	8009024 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	1c59      	adds	r1, r3, #1
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	6211      	str	r1, [r2, #32]
 800901c:	781a      	ldrb	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009028:	b29b      	uxth	r3, r3
 800902a:	3b01      	subs	r3, #1
 800902c:	b29b      	uxth	r3, r3
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	4619      	mov	r1, r3
 8009032:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10f      	bne.n	8009058 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009046:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009056:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	e000      	b.n	800905e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800905c:	2302      	movs	r3, #2
  }
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68da      	ldr	r2, [r3, #12]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009080:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7f9 fc42 	bl	8002914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b08c      	sub	sp, #48	; 0x30
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b22      	cmp	r3, #34	; 0x22
 80090ac:	f040 80ab 	bne.w	8009206 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b8:	d117      	bne.n	80090ea <UART_Receive_IT+0x50>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d113      	bne.n	80090ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d8:	b29a      	uxth	r2, r3
 80090da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e2:	1c9a      	adds	r2, r3, #2
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	629a      	str	r2, [r3, #40]	; 0x28
 80090e8:	e026      	b.n	8009138 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fc:	d007      	beq.n	800910e <UART_Receive_IT+0x74>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <UART_Receive_IT+0x82>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	b2da      	uxtb	r2, r3
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	e008      	b.n	800912e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	b2db      	uxtb	r3, r3
 8009124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009128:	b2da      	uxtb	r2, r3
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800913c:	b29b      	uxth	r3, r3
 800913e:	3b01      	subs	r3, #1
 8009140:	b29b      	uxth	r3, r3
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	4619      	mov	r1, r3
 8009146:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009148:	2b00      	cmp	r3, #0
 800914a:	d15a      	bne.n	8009202 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0220 	bic.w	r2, r2, #32
 800915a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68da      	ldr	r2, [r3, #12]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800916a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695a      	ldr	r2, [r3, #20]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0201 	bic.w	r2, r2, #1
 800917a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009188:	2b01      	cmp	r3, #1
 800918a:	d135      	bne.n	80091f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	330c      	adds	r3, #12
 8009198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	613b      	str	r3, [r7, #16]
   return(result);
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f023 0310 	bic.w	r3, r3, #16
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	330c      	adds	r3, #12
 80091b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b2:	623a      	str	r2, [r7, #32]
 80091b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	69f9      	ldr	r1, [r7, #28]
 80091b8:	6a3a      	ldr	r2, [r7, #32]
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	61bb      	str	r3, [r7, #24]
   return(result);
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e5      	bne.n	8009192 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0310 	and.w	r3, r3, #16
 80091d0:	2b10      	cmp	r3, #16
 80091d2:	d10a      	bne.n	80091ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff fc51 	bl	8008a98 <HAL_UARTEx_RxEventCallback>
 80091f6:	e002      	b.n	80091fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff fc2f 	bl	8008a5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	e002      	b.n	8009208 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	e000      	b.n	8009208 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009206:	2302      	movs	r3, #2
  }
}
 8009208:	4618      	mov	r0, r3
 800920a:	3730      	adds	r7, #48	; 0x30
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	b09f      	sub	sp, #124	; 0x7c
 8009216:	af00      	add	r7, sp, #0
 8009218:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800921a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009226:	68d9      	ldr	r1, [r3, #12]
 8009228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	ea40 0301 	orr.w	r3, r0, r1
 8009230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009234:	689a      	ldr	r2, [r3, #8]
 8009236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	431a      	orrs	r2, r3
 800923c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	431a      	orrs	r2, r3
 8009242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	4313      	orrs	r3, r2
 8009248:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800924a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009254:	f021 010c 	bic.w	r1, r1, #12
 8009258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800925e:	430b      	orrs	r3, r1
 8009260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800926c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800926e:	6999      	ldr	r1, [r3, #24]
 8009270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	ea40 0301 	orr.w	r3, r0, r1
 8009278:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800927a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	4bc5      	ldr	r3, [pc, #788]	; (8009594 <UART_SetConfig+0x384>)
 8009280:	429a      	cmp	r2, r3
 8009282:	d004      	beq.n	800928e <UART_SetConfig+0x7e>
 8009284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	4bc3      	ldr	r3, [pc, #780]	; (8009598 <UART_SetConfig+0x388>)
 800928a:	429a      	cmp	r2, r3
 800928c:	d103      	bne.n	8009296 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800928e:	f7fd fbbf 	bl	8006a10 <HAL_RCC_GetPCLK2Freq>
 8009292:	6778      	str	r0, [r7, #116]	; 0x74
 8009294:	e002      	b.n	800929c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009296:	f7fd fba7 	bl	80069e8 <HAL_RCC_GetPCLK1Freq>
 800929a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800929c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a4:	f040 80b6 	bne.w	8009414 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092aa:	461c      	mov	r4, r3
 80092ac:	f04f 0500 	mov.w	r5, #0
 80092b0:	4622      	mov	r2, r4
 80092b2:	462b      	mov	r3, r5
 80092b4:	1891      	adds	r1, r2, r2
 80092b6:	6439      	str	r1, [r7, #64]	; 0x40
 80092b8:	415b      	adcs	r3, r3
 80092ba:	647b      	str	r3, [r7, #68]	; 0x44
 80092bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092c0:	1912      	adds	r2, r2, r4
 80092c2:	eb45 0303 	adc.w	r3, r5, r3
 80092c6:	f04f 0000 	mov.w	r0, #0
 80092ca:	f04f 0100 	mov.w	r1, #0
 80092ce:	00d9      	lsls	r1, r3, #3
 80092d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092d4:	00d0      	lsls	r0, r2, #3
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	1911      	adds	r1, r2, r4
 80092dc:	6639      	str	r1, [r7, #96]	; 0x60
 80092de:	416b      	adcs	r3, r5
 80092e0:	667b      	str	r3, [r7, #100]	; 0x64
 80092e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f04f 0300 	mov.w	r3, #0
 80092ec:	1891      	adds	r1, r2, r2
 80092ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80092f0:	415b      	adcs	r3, r3
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80092fc:	f7f7 fc4c 	bl	8000b98 <__aeabi_uldivmod>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	4ba5      	ldr	r3, [pc, #660]	; (800959c <UART_SetConfig+0x38c>)
 8009306:	fba3 2302 	umull	r2, r3, r3, r2
 800930a:	095b      	lsrs	r3, r3, #5
 800930c:	011e      	lsls	r6, r3, #4
 800930e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009310:	461c      	mov	r4, r3
 8009312:	f04f 0500 	mov.w	r5, #0
 8009316:	4622      	mov	r2, r4
 8009318:	462b      	mov	r3, r5
 800931a:	1891      	adds	r1, r2, r2
 800931c:	6339      	str	r1, [r7, #48]	; 0x30
 800931e:	415b      	adcs	r3, r3
 8009320:	637b      	str	r3, [r7, #52]	; 0x34
 8009322:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009326:	1912      	adds	r2, r2, r4
 8009328:	eb45 0303 	adc.w	r3, r5, r3
 800932c:	f04f 0000 	mov.w	r0, #0
 8009330:	f04f 0100 	mov.w	r1, #0
 8009334:	00d9      	lsls	r1, r3, #3
 8009336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800933a:	00d0      	lsls	r0, r2, #3
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	1911      	adds	r1, r2, r4
 8009342:	65b9      	str	r1, [r7, #88]	; 0x58
 8009344:	416b      	adcs	r3, r5
 8009346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	461a      	mov	r2, r3
 800934e:	f04f 0300 	mov.w	r3, #0
 8009352:	1891      	adds	r1, r2, r2
 8009354:	62b9      	str	r1, [r7, #40]	; 0x28
 8009356:	415b      	adcs	r3, r3
 8009358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800935a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800935e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009362:	f7f7 fc19 	bl	8000b98 <__aeabi_uldivmod>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	4b8c      	ldr	r3, [pc, #560]	; (800959c <UART_SetConfig+0x38c>)
 800936c:	fba3 1302 	umull	r1, r3, r3, r2
 8009370:	095b      	lsrs	r3, r3, #5
 8009372:	2164      	movs	r1, #100	; 0x64
 8009374:	fb01 f303 	mul.w	r3, r1, r3
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	3332      	adds	r3, #50	; 0x32
 800937e:	4a87      	ldr	r2, [pc, #540]	; (800959c <UART_SetConfig+0x38c>)
 8009380:	fba2 2303 	umull	r2, r3, r2, r3
 8009384:	095b      	lsrs	r3, r3, #5
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800938c:	441e      	add	r6, r3
 800938e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009390:	4618      	mov	r0, r3
 8009392:	f04f 0100 	mov.w	r1, #0
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	1894      	adds	r4, r2, r2
 800939c:	623c      	str	r4, [r7, #32]
 800939e:	415b      	adcs	r3, r3
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
 80093a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093a6:	1812      	adds	r2, r2, r0
 80093a8:	eb41 0303 	adc.w	r3, r1, r3
 80093ac:	f04f 0400 	mov.w	r4, #0
 80093b0:	f04f 0500 	mov.w	r5, #0
 80093b4:	00dd      	lsls	r5, r3, #3
 80093b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093ba:	00d4      	lsls	r4, r2, #3
 80093bc:	4622      	mov	r2, r4
 80093be:	462b      	mov	r3, r5
 80093c0:	1814      	adds	r4, r2, r0
 80093c2:	653c      	str	r4, [r7, #80]	; 0x50
 80093c4:	414b      	adcs	r3, r1
 80093c6:	657b      	str	r3, [r7, #84]	; 0x54
 80093c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	461a      	mov	r2, r3
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	1891      	adds	r1, r2, r2
 80093d4:	61b9      	str	r1, [r7, #24]
 80093d6:	415b      	adcs	r3, r3
 80093d8:	61fb      	str	r3, [r7, #28]
 80093da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80093e2:	f7f7 fbd9 	bl	8000b98 <__aeabi_uldivmod>
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	4b6c      	ldr	r3, [pc, #432]	; (800959c <UART_SetConfig+0x38c>)
 80093ec:	fba3 1302 	umull	r1, r3, r3, r2
 80093f0:	095b      	lsrs	r3, r3, #5
 80093f2:	2164      	movs	r1, #100	; 0x64
 80093f4:	fb01 f303 	mul.w	r3, r1, r3
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	3332      	adds	r3, #50	; 0x32
 80093fe:	4a67      	ldr	r2, [pc, #412]	; (800959c <UART_SetConfig+0x38c>)
 8009400:	fba2 2303 	umull	r2, r3, r2, r3
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	f003 0207 	and.w	r2, r3, #7
 800940a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4432      	add	r2, r6
 8009410:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009412:	e0b9      	b.n	8009588 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009416:	461c      	mov	r4, r3
 8009418:	f04f 0500 	mov.w	r5, #0
 800941c:	4622      	mov	r2, r4
 800941e:	462b      	mov	r3, r5
 8009420:	1891      	adds	r1, r2, r2
 8009422:	6139      	str	r1, [r7, #16]
 8009424:	415b      	adcs	r3, r3
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800942c:	1912      	adds	r2, r2, r4
 800942e:	eb45 0303 	adc.w	r3, r5, r3
 8009432:	f04f 0000 	mov.w	r0, #0
 8009436:	f04f 0100 	mov.w	r1, #0
 800943a:	00d9      	lsls	r1, r3, #3
 800943c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009440:	00d0      	lsls	r0, r2, #3
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	eb12 0804 	adds.w	r8, r2, r4
 800944a:	eb43 0905 	adc.w	r9, r3, r5
 800944e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	4618      	mov	r0, r3
 8009454:	f04f 0100 	mov.w	r1, #0
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	f04f 0300 	mov.w	r3, #0
 8009460:	008b      	lsls	r3, r1, #2
 8009462:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009466:	0082      	lsls	r2, r0, #2
 8009468:	4640      	mov	r0, r8
 800946a:	4649      	mov	r1, r9
 800946c:	f7f7 fb94 	bl	8000b98 <__aeabi_uldivmod>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4b49      	ldr	r3, [pc, #292]	; (800959c <UART_SetConfig+0x38c>)
 8009476:	fba3 2302 	umull	r2, r3, r3, r2
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	011e      	lsls	r6, r3, #4
 800947e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009480:	4618      	mov	r0, r3
 8009482:	f04f 0100 	mov.w	r1, #0
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	1894      	adds	r4, r2, r2
 800948c:	60bc      	str	r4, [r7, #8]
 800948e:	415b      	adcs	r3, r3
 8009490:	60fb      	str	r3, [r7, #12]
 8009492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009496:	1812      	adds	r2, r2, r0
 8009498:	eb41 0303 	adc.w	r3, r1, r3
 800949c:	f04f 0400 	mov.w	r4, #0
 80094a0:	f04f 0500 	mov.w	r5, #0
 80094a4:	00dd      	lsls	r5, r3, #3
 80094a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094aa:	00d4      	lsls	r4, r2, #3
 80094ac:	4622      	mov	r2, r4
 80094ae:	462b      	mov	r3, r5
 80094b0:	1814      	adds	r4, r2, r0
 80094b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80094b4:	414b      	adcs	r3, r1
 80094b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	4618      	mov	r0, r3
 80094be:	f04f 0100 	mov.w	r1, #0
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	008b      	lsls	r3, r1, #2
 80094cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094d0:	0082      	lsls	r2, r0, #2
 80094d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80094d6:	f7f7 fb5f 	bl	8000b98 <__aeabi_uldivmod>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4b2f      	ldr	r3, [pc, #188]	; (800959c <UART_SetConfig+0x38c>)
 80094e0:	fba3 1302 	umull	r1, r3, r3, r2
 80094e4:	095b      	lsrs	r3, r3, #5
 80094e6:	2164      	movs	r1, #100	; 0x64
 80094e8:	fb01 f303 	mul.w	r3, r1, r3
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	3332      	adds	r3, #50	; 0x32
 80094f2:	4a2a      	ldr	r2, [pc, #168]	; (800959c <UART_SetConfig+0x38c>)
 80094f4:	fba2 2303 	umull	r2, r3, r2, r3
 80094f8:	095b      	lsrs	r3, r3, #5
 80094fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094fe:	441e      	add	r6, r3
 8009500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009502:	4618      	mov	r0, r3
 8009504:	f04f 0100 	mov.w	r1, #0
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	1894      	adds	r4, r2, r2
 800950e:	603c      	str	r4, [r7, #0]
 8009510:	415b      	adcs	r3, r3
 8009512:	607b      	str	r3, [r7, #4]
 8009514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009518:	1812      	adds	r2, r2, r0
 800951a:	eb41 0303 	adc.w	r3, r1, r3
 800951e:	f04f 0400 	mov.w	r4, #0
 8009522:	f04f 0500 	mov.w	r5, #0
 8009526:	00dd      	lsls	r5, r3, #3
 8009528:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800952c:	00d4      	lsls	r4, r2, #3
 800952e:	4622      	mov	r2, r4
 8009530:	462b      	mov	r3, r5
 8009532:	eb12 0a00 	adds.w	sl, r2, r0
 8009536:	eb43 0b01 	adc.w	fp, r3, r1
 800953a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	4618      	mov	r0, r3
 8009540:	f04f 0100 	mov.w	r1, #0
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	f04f 0300 	mov.w	r3, #0
 800954c:	008b      	lsls	r3, r1, #2
 800954e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009552:	0082      	lsls	r2, r0, #2
 8009554:	4650      	mov	r0, sl
 8009556:	4659      	mov	r1, fp
 8009558:	f7f7 fb1e 	bl	8000b98 <__aeabi_uldivmod>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4b0e      	ldr	r3, [pc, #56]	; (800959c <UART_SetConfig+0x38c>)
 8009562:	fba3 1302 	umull	r1, r3, r3, r2
 8009566:	095b      	lsrs	r3, r3, #5
 8009568:	2164      	movs	r1, #100	; 0x64
 800956a:	fb01 f303 	mul.w	r3, r1, r3
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	3332      	adds	r3, #50	; 0x32
 8009574:	4a09      	ldr	r2, [pc, #36]	; (800959c <UART_SetConfig+0x38c>)
 8009576:	fba2 2303 	umull	r2, r3, r2, r3
 800957a:	095b      	lsrs	r3, r3, #5
 800957c:	f003 020f 	and.w	r2, r3, #15
 8009580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4432      	add	r2, r6
 8009586:	609a      	str	r2, [r3, #8]
}
 8009588:	bf00      	nop
 800958a:	377c      	adds	r7, #124	; 0x7c
 800958c:	46bd      	mov	sp, r7
 800958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009592:	bf00      	nop
 8009594:	40011000 	.word	0x40011000
 8009598:	40011400 	.word	0x40011400
 800959c:	51eb851f 	.word	0x51eb851f

080095a0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80095a8:	4b04      	ldr	r3, [pc, #16]	; (80095bc <HAL_ETH_RxCpltCallback+0x1c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fadd 	bl	8009b6c <osSemaphoreRelease>
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20000168 	.word	0x20000168

080095c0 <__NVIC_SetPriority>:
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	6039      	str	r1, [r7, #0]
 80095ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	db0a      	blt.n	80095ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	490c      	ldr	r1, [pc, #48]	; (800960c <__NVIC_SetPriority+0x4c>)
 80095da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095de:	0112      	lsls	r2, r2, #4
 80095e0:	b2d2      	uxtb	r2, r2
 80095e2:	440b      	add	r3, r1
 80095e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80095e8:	e00a      	b.n	8009600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	4908      	ldr	r1, [pc, #32]	; (8009610 <__NVIC_SetPriority+0x50>)
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	3b04      	subs	r3, #4
 80095f8:	0112      	lsls	r2, r2, #4
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	440b      	add	r3, r1
 80095fe:	761a      	strb	r2, [r3, #24]
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	e000e100 	.word	0xe000e100
 8009610:	e000ed00 	.word	0xe000ed00

08009614 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009618:	4b05      	ldr	r3, [pc, #20]	; (8009630 <SysTick_Handler+0x1c>)
 800961a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800961c:	f002 fa28 	bl	800ba70 <xTaskGetSchedulerState>
 8009620:	4603      	mov	r3, r0
 8009622:	2b01      	cmp	r3, #1
 8009624:	d001      	beq.n	800962a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009626:	f003 f9c7 	bl	800c9b8 <xPortSysTickHandler>
  }
}
 800962a:	bf00      	nop
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	e000e010 	.word	0xe000e010

08009634 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009638:	2100      	movs	r1, #0
 800963a:	f06f 0004 	mvn.w	r0, #4
 800963e:	f7ff ffbf 	bl	80095c0 <__NVIC_SetPriority>
#endif
}
 8009642:	bf00      	nop
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800964e:	f3ef 8305 	mrs	r3, IPSR
 8009652:	603b      	str	r3, [r7, #0]
  return(result);
 8009654:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800965a:	f06f 0305 	mvn.w	r3, #5
 800965e:	607b      	str	r3, [r7, #4]
 8009660:	e00c      	b.n	800967c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009662:	4b0a      	ldr	r3, [pc, #40]	; (800968c <osKernelInitialize+0x44>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d105      	bne.n	8009676 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800966a:	4b08      	ldr	r3, [pc, #32]	; (800968c <osKernelInitialize+0x44>)
 800966c:	2201      	movs	r2, #1
 800966e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009670:	2300      	movs	r3, #0
 8009672:	607b      	str	r3, [r7, #4]
 8009674:	e002      	b.n	800967c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009676:	f04f 33ff 	mov.w	r3, #4294967295
 800967a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800967c:	687b      	ldr	r3, [r7, #4]
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	2000016c 	.word	0x2000016c

08009690 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009696:	f3ef 8305 	mrs	r3, IPSR
 800969a:	603b      	str	r3, [r7, #0]
  return(result);
 800969c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80096a2:	f06f 0305 	mvn.w	r3, #5
 80096a6:	607b      	str	r3, [r7, #4]
 80096a8:	e010      	b.n	80096cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096aa:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <osKernelStart+0x48>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d109      	bne.n	80096c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80096b2:	f7ff ffbf 	bl	8009634 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80096b6:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <osKernelStart+0x48>)
 80096b8:	2202      	movs	r2, #2
 80096ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80096bc:	f001 fd7c 	bl	800b1b8 <vTaskStartScheduler>
      stat = osOK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	607b      	str	r3, [r7, #4]
 80096c4:	e002      	b.n	80096cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80096c6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096cc:	687b      	ldr	r3, [r7, #4]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	2000016c 	.word	0x2000016c

080096dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08e      	sub	sp, #56	; 0x38
 80096e0:	af04      	add	r7, sp, #16
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80096e8:	2300      	movs	r3, #0
 80096ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ec:	f3ef 8305 	mrs	r3, IPSR
 80096f0:	617b      	str	r3, [r7, #20]
  return(result);
 80096f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d17e      	bne.n	80097f6 <osThreadNew+0x11a>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d07b      	beq.n	80097f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80096fe:	2380      	movs	r3, #128	; 0x80
 8009700:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009702:	2318      	movs	r3, #24
 8009704:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009706:	2300      	movs	r3, #0
 8009708:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800970a:	f04f 33ff 	mov.w	r3, #4294967295
 800970e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d045      	beq.n	80097a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <osThreadNew+0x48>
        name = attr->name;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d008      	beq.n	800974a <osThreadNew+0x6e>
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	2b38      	cmp	r3, #56	; 0x38
 800973c:	d805      	bhi.n	800974a <osThreadNew+0x6e>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <osThreadNew+0x72>
        return (NULL);
 800974a:	2300      	movs	r3, #0
 800974c:	e054      	b.n	80097f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	089b      	lsrs	r3, r3, #2
 800975c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00e      	beq.n	8009784 <osThreadNew+0xa8>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	2bbb      	cmp	r3, #187	; 0xbb
 800976c:	d90a      	bls.n	8009784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009772:	2b00      	cmp	r3, #0
 8009774:	d006      	beq.n	8009784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <osThreadNew+0xa8>
        mem = 1;
 800977e:	2301      	movs	r3, #1
 8009780:	61bb      	str	r3, [r7, #24]
 8009782:	e010      	b.n	80097a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10c      	bne.n	80097a6 <osThreadNew+0xca>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d108      	bne.n	80097a6 <osThreadNew+0xca>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <osThreadNew+0xca>
          mem = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	61bb      	str	r3, [r7, #24]
 80097a0:	e001      	b.n	80097a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d110      	bne.n	80097ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097b4:	9202      	str	r2, [sp, #8]
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	6a3a      	ldr	r2, [r7, #32]
 80097c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f001 fb0c 	bl	800ade0 <xTaskCreateStatic>
 80097c8:	4603      	mov	r3, r0
 80097ca:	613b      	str	r3, [r7, #16]
 80097cc:	e013      	b.n	80097f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d110      	bne.n	80097f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	f107 0310 	add.w	r3, r7, #16
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f001 fb57 	bl	800ae9a <xTaskCreate>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d001      	beq.n	80097f6 <osThreadNew+0x11a>
            hTask = NULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097f6:	693b      	ldr	r3, [r7, #16]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3728      	adds	r7, #40	; 0x28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009808:	f3ef 8305 	mrs	r3, IPSR
 800980c:	60bb      	str	r3, [r7, #8]
  return(result);
 800980e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <osDelay+0x1c>
    stat = osErrorISR;
 8009814:	f06f 0305 	mvn.w	r3, #5
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	e007      	b.n	800982c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f001 fc92 	bl	800b150 <vTaskDelay>
    }
  }

  return (stat);
 800982c:	68fb      	ldr	r3, [r7, #12]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f002 fedc 	bl	800c5fc <pvTimerGetTimerID>
 8009844:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d005      	beq.n	8009858 <TimerCallback+0x22>
    callb->func (callb->arg);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	6852      	ldr	r2, [r2, #4]
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
  }
}
 8009858:	bf00      	nop
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009860:	b580      	push	{r7, lr}
 8009862:	b08c      	sub	sp, #48	; 0x30
 8009864:	af02      	add	r7, sp, #8
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	607a      	str	r2, [r7, #4]
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	460b      	mov	r3, r1
 800986e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009874:	f3ef 8305 	mrs	r3, IPSR
 8009878:	613b      	str	r3, [r7, #16]
  return(result);
 800987a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800987c:	2b00      	cmp	r3, #0
 800987e:	d163      	bne.n	8009948 <osTimerNew+0xe8>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d060      	beq.n	8009948 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009886:	2008      	movs	r0, #8
 8009888:	f003 f926 	bl	800cad8 <pvPortMalloc>
 800988c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d059      	beq.n	8009948 <osTimerNew+0xe8>
      callb->func = func;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80098a0:	7afb      	ldrb	r3, [r7, #11]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d102      	bne.n	80098ac <osTimerNew+0x4c>
        reload = pdFALSE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	61fb      	str	r3, [r7, #28]
 80098aa:	e001      	b.n	80098b0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80098ac:	2301      	movs	r3, #1
 80098ae:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80098b0:	f04f 33ff 	mov.w	r3, #4294967295
 80098b4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01c      	beq.n	80098fa <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <osTimerNew+0x6e>
          name = attr->name;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <osTimerNew+0x84>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	2b2b      	cmp	r3, #43	; 0x2b
 80098dc:	d902      	bls.n	80098e4 <osTimerNew+0x84>
          mem = 1;
 80098de:	2301      	movs	r3, #1
 80098e0:	61bb      	str	r3, [r7, #24]
 80098e2:	e00c      	b.n	80098fe <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d108      	bne.n	80098fe <osTimerNew+0x9e>
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d104      	bne.n	80098fe <osTimerNew+0x9e>
            mem = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	61bb      	str	r3, [r7, #24]
 80098f8:	e001      	b.n	80098fe <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d10c      	bne.n	800991e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	4b12      	ldr	r3, [pc, #72]	; (8009954 <osTimerNew+0xf4>)
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	69fa      	ldr	r2, [r7, #28]
 8009912:	2101      	movs	r1, #1
 8009914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009916:	f002 faf2 	bl	800befe <xTimerCreateStatic>
 800991a:	6238      	str	r0, [r7, #32]
 800991c:	e00b      	b.n	8009936 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d108      	bne.n	8009936 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009924:	4b0b      	ldr	r3, [pc, #44]	; (8009954 <osTimerNew+0xf4>)
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	2101      	movs	r1, #1
 800992e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009930:	f002 fac4 	bl	800bebc <xTimerCreate>
 8009934:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d105      	bne.n	8009948 <osTimerNew+0xe8>
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <osTimerNew+0xe8>
        vPortFree (callb);
 8009942:	6978      	ldr	r0, [r7, #20]
 8009944:	f003 f994 	bl	800cc70 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009948:	6a3b      	ldr	r3, [r7, #32]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3728      	adds	r7, #40	; 0x28
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	08009837 	.word	0x08009837

08009958 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af02      	add	r7, sp, #8
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009966:	f3ef 8305 	mrs	r3, IPSR
 800996a:	60fb      	str	r3, [r7, #12]
  return(result);
 800996c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <osTimerStart+0x22>
    stat = osErrorISR;
 8009972:	f06f 0305 	mvn.w	r3, #5
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e017      	b.n	80099aa <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d103      	bne.n	8009988 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009980:	f06f 0303 	mvn.w	r3, #3
 8009984:	617b      	str	r3, [r7, #20]
 8009986:	e010      	b.n	80099aa <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009988:	2300      	movs	r3, #0
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	2300      	movs	r3, #0
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	2104      	movs	r1, #4
 8009992:	6938      	ldr	r0, [r7, #16]
 8009994:	f002 fb2c 	bl	800bff0 <xTimerGenericCommand>
 8009998:	4603      	mov	r3, r0
 800999a:	2b01      	cmp	r3, #1
 800999c:	d102      	bne.n	80099a4 <osTimerStart+0x4c>
      stat = osOK;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]
 80099a2:	e002      	b.n	80099aa <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80099a4:	f06f 0302 	mvn.w	r3, #2
 80099a8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80099aa:	697b      	ldr	r3, [r7, #20]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08a      	sub	sp, #40	; 0x28
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80099c0:	2300      	movs	r3, #0
 80099c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099c4:	f3ef 8305 	mrs	r3, IPSR
 80099c8:	613b      	str	r3, [r7, #16]
  return(result);
 80099ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d175      	bne.n	8009abc <osSemaphoreNew+0x108>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d072      	beq.n	8009abc <osSemaphoreNew+0x108>
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d86e      	bhi.n	8009abc <osSemaphoreNew+0x108>
    mem = -1;
 80099de:	f04f 33ff 	mov.w	r3, #4294967295
 80099e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d015      	beq.n	8009a16 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d006      	beq.n	8009a00 <osSemaphoreNew+0x4c>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	2b4f      	cmp	r3, #79	; 0x4f
 80099f8:	d902      	bls.n	8009a00 <osSemaphoreNew+0x4c>
        mem = 1;
 80099fa:	2301      	movs	r3, #1
 80099fc:	61bb      	str	r3, [r7, #24]
 80099fe:	e00c      	b.n	8009a1a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d108      	bne.n	8009a1a <osSemaphoreNew+0x66>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <osSemaphoreNew+0x66>
          mem = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61bb      	str	r3, [r7, #24]
 8009a14:	e001      	b.n	8009a1a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d04c      	beq.n	8009abc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d128      	bne.n	8009a7a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d10a      	bne.n	8009a44 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	2203      	movs	r2, #3
 8009a34:	9200      	str	r2, [sp, #0]
 8009a36:	2200      	movs	r2, #0
 8009a38:	2100      	movs	r1, #0
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	f000 fa2a 	bl	8009e94 <xQueueGenericCreateStatic>
 8009a40:	61f8      	str	r0, [r7, #28]
 8009a42:	e005      	b.n	8009a50 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a44:	2203      	movs	r2, #3
 8009a46:	2100      	movs	r1, #0
 8009a48:	2001      	movs	r0, #1
 8009a4a:	f000 fa9b 	bl	8009f84 <xQueueGenericCreate>
 8009a4e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d022      	beq.n	8009a9c <osSemaphoreNew+0xe8>
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d01f      	beq.n	8009a9c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2100      	movs	r1, #0
 8009a62:	69f8      	ldr	r0, [r7, #28]
 8009a64:	f000 fb56 	bl	800a114 <xQueueGenericSend>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d016      	beq.n	8009a9c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009a6e:	69f8      	ldr	r0, [r7, #28]
 8009a70:	f000 ffe2 	bl	800aa38 <vQueueDelete>
            hSemaphore = NULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	e010      	b.n	8009a9c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d108      	bne.n	8009a92 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	461a      	mov	r2, r3
 8009a86:	68b9      	ldr	r1, [r7, #8]
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 fad8 	bl	800a03e <xQueueCreateCountingSemaphoreStatic>
 8009a8e:	61f8      	str	r0, [r7, #28]
 8009a90:	e004      	b.n	8009a9c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 fb09 	bl	800a0ac <xQueueCreateCountingSemaphore>
 8009a9a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00c      	beq.n	8009abc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d003      	beq.n	8009ab0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	e001      	b.n	8009ab4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009ab4:	6979      	ldr	r1, [r7, #20]
 8009ab6:	69f8      	ldr	r0, [r7, #28]
 8009ab8:	f001 f90a 	bl	800acd0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009abc:	69fb      	ldr	r3, [r7, #28]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3720      	adds	r7, #32
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d103      	bne.n	8009ae8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009ae0:	f06f 0303 	mvn.w	r3, #3
 8009ae4:	617b      	str	r3, [r7, #20]
 8009ae6:	e039      	b.n	8009b5c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae8:	f3ef 8305 	mrs	r3, IPSR
 8009aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8009aee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d022      	beq.n	8009b3a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009afa:	f06f 0303 	mvn.w	r3, #3
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	e02c      	b.n	8009b5c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009b02:	2300      	movs	r3, #0
 8009b04:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009b06:	f107 0308 	add.w	r3, r7, #8
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	6938      	ldr	r0, [r7, #16]
 8009b10:	f000 ff12 	bl	800a938 <xQueueReceiveFromISR>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d003      	beq.n	8009b22 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009b1a:	f06f 0302 	mvn.w	r3, #2
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	e01c      	b.n	8009b5c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d019      	beq.n	8009b5c <osSemaphoreAcquire+0x94>
 8009b28:	4b0f      	ldr	r3, [pc, #60]	; (8009b68 <osSemaphoreAcquire+0xa0>)
 8009b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	e010      	b.n	8009b5c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6938      	ldr	r0, [r7, #16]
 8009b3e:	f000 fdef 	bl	800a720 <xQueueSemaphoreTake>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d009      	beq.n	8009b5c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009b4e:	f06f 0301 	mvn.w	r3, #1
 8009b52:	617b      	str	r3, [r7, #20]
 8009b54:	e002      	b.n	8009b5c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009b56:	f06f 0302 	mvn.w	r3, #2
 8009b5a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009b5c:	697b      	ldr	r3, [r7, #20]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d103      	bne.n	8009b8a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009b82:	f06f 0303 	mvn.w	r3, #3
 8009b86:	617b      	str	r3, [r7, #20]
 8009b88:	e02c      	b.n	8009be4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b8a:	f3ef 8305 	mrs	r3, IPSR
 8009b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b90:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d01a      	beq.n	8009bcc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009b9a:	f107 0308 	add.w	r3, r7, #8
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6938      	ldr	r0, [r7, #16]
 8009ba2:	f000 fc50 	bl	800a446 <xQueueGiveFromISR>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d003      	beq.n	8009bb4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009bac:	f06f 0302 	mvn.w	r3, #2
 8009bb0:	617b      	str	r3, [r7, #20]
 8009bb2:	e017      	b.n	8009be4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d014      	beq.n	8009be4 <osSemaphoreRelease+0x78>
 8009bba:	4b0d      	ldr	r3, [pc, #52]	; (8009bf0 <osSemaphoreRelease+0x84>)
 8009bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	e00b      	b.n	8009be4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009bcc:	2300      	movs	r3, #0
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	6938      	ldr	r0, [r7, #16]
 8009bd4:	f000 fa9e 	bl	800a114 <xQueueGenericSend>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d002      	beq.n	8009be4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009bde:	f06f 0302 	mvn.w	r3, #2
 8009be2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009be4:	697b      	ldr	r3, [r7, #20]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4a07      	ldr	r2, [pc, #28]	; (8009c20 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	4a06      	ldr	r2, [pc, #24]	; (8009c24 <vApplicationGetIdleTaskMemory+0x30>)
 8009c0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2280      	movs	r2, #128	; 0x80
 8009c10:	601a      	str	r2, [r3, #0]
}
 8009c12:	bf00      	nop
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	20000170 	.word	0x20000170
 8009c24:	2000022c 	.word	0x2000022c

08009c28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4a07      	ldr	r2, [pc, #28]	; (8009c54 <vApplicationGetTimerTaskMemory+0x2c>)
 8009c38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	4a06      	ldr	r2, [pc, #24]	; (8009c58 <vApplicationGetTimerTaskMemory+0x30>)
 8009c3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c46:	601a      	str	r2, [r3, #0]
}
 8009c48:	bf00      	nop
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	2000042c 	.word	0x2000042c
 8009c58:	200004e8 	.word	0x200004e8

08009c5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f103 0208 	add.w	r2, r3, #8
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f04f 32ff 	mov.w	r2, #4294967295
 8009c74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f103 0208 	add.w	r2, r3, #8
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f103 0208 	add.w	r2, r3, #8
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009caa:	bf00      	nop
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b085      	sub	sp, #20
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	689a      	ldr	r2, [r3, #8]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	601a      	str	r2, [r3, #0]
}
 8009cf2:	bf00      	nop
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b085      	sub	sp, #20
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d14:	d103      	bne.n	8009d1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	e00c      	b.n	8009d38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	3308      	adds	r3, #8
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	e002      	b.n	8009d2c <vListInsert+0x2e>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d2f6      	bcs.n	8009d26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
}
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	6892      	ldr	r2, [r2, #8]
 8009d86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	6852      	ldr	r2, [r2, #4]
 8009d90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d103      	bne.n	8009da4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	1e5a      	subs	r2, r3, #1
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009dee:	f002 fd51 	bl	800c894 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dfa:	68f9      	ldr	r1, [r7, #12]
 8009dfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009dfe:	fb01 f303 	mul.w	r3, r1, r3
 8009e02:	441a      	add	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	68f9      	ldr	r1, [r7, #12]
 8009e22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e24:	fb01 f303 	mul.w	r3, r1, r3
 8009e28:	441a      	add	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	22ff      	movs	r2, #255	; 0xff
 8009e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	22ff      	movs	r2, #255	; 0xff
 8009e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d114      	bne.n	8009e6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01a      	beq.n	8009e82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3310      	adds	r3, #16
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 fc4b 	bl	800b6ec <xTaskRemoveFromEventList>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d012      	beq.n	8009e82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e5c:	4b0c      	ldr	r3, [pc, #48]	; (8009e90 <xQueueGenericReset+0xcc>)
 8009e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	e009      	b.n	8009e82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3310      	adds	r3, #16
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff fef2 	bl	8009c5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3324      	adds	r3, #36	; 0x24
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff feed 	bl	8009c5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e82:	f002 fd37 	bl	800c8f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e86:	2301      	movs	r3, #1
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	e000ed04 	.word	0xe000ed04

08009e94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08e      	sub	sp, #56	; 0x38
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10a      	bne.n	8009ebe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <xQueueGenericCreateStatic+0x52>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <xQueueGenericCreateStatic+0x56>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e000      	b.n	8009eec <xQueueGenericCreateStatic+0x58>
 8009eea:	2300      	movs	r3, #0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10a      	bne.n	8009f06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	623b      	str	r3, [r7, #32]
}
 8009f02:	bf00      	nop
 8009f04:	e7fe      	b.n	8009f04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d102      	bne.n	8009f12 <xQueueGenericCreateStatic+0x7e>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <xQueueGenericCreateStatic+0x82>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e000      	b.n	8009f18 <xQueueGenericCreateStatic+0x84>
 8009f16:	2300      	movs	r3, #0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10a      	bne.n	8009f32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	61fb      	str	r3, [r7, #28]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f32:	2350      	movs	r3, #80	; 0x50
 8009f34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b50      	cmp	r3, #80	; 0x50
 8009f3a:	d00a      	beq.n	8009f52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	61bb      	str	r3, [r7, #24]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00d      	beq.n	8009f7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 f83f 	bl	8009ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3730      	adds	r7, #48	; 0x30
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08a      	sub	sp, #40	; 0x28
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	613b      	str	r3, [r7, #16]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	fb02 f303 	mul.w	r3, r2, r3
 8009fb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	3350      	adds	r3, #80	; 0x50
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f002 fd8b 	bl	800cad8 <pvPortMalloc>
 8009fc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	3350      	adds	r3, #80	; 0x50
 8009fd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fdc:	79fa      	ldrb	r2, [r7, #7]
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f805 	bl	8009ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fee:	69bb      	ldr	r3, [r7, #24]
	}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3720      	adds	r7, #32
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
 800a004:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d103      	bne.n	800a014 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	69ba      	ldr	r2, [r7, #24]
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	e002      	b.n	800a01a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a026:	2101      	movs	r1, #1
 800a028:	69b8      	ldr	r0, [r7, #24]
 800a02a:	f7ff fecb 	bl	8009dc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	78fa      	ldrb	r2, [r7, #3]
 800a032:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b08a      	sub	sp, #40	; 0x28
 800a042:	af02      	add	r7, sp, #8
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	61bb      	str	r3, [r7, #24]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d90a      	bls.n	800a084 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	617b      	str	r3, [r7, #20]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a084:	2302      	movs	r3, #2
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	2100      	movs	r1, #0
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff ff00 	bl	8009e94 <xQueueGenericCreateStatic>
 800a094:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
	}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	613b      	str	r3, [r7, #16]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d90a      	bls.n	800a0f0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	60fb      	str	r3, [r7, #12]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff ff45 	bl	8009f84 <xQueueGenericCreate>
 800a0fa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a108:	697b      	ldr	r3, [r7, #20]
	}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3718      	adds	r7, #24
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08e      	sub	sp, #56	; 0x38
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a122:	2300      	movs	r3, #0
 800a124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xQueueGenericSend+0x32>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d103      	bne.n	800a154 <xQueueGenericSend+0x40>
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <xQueueGenericSend+0x44>
 800a154:	2301      	movs	r3, #1
 800a156:	e000      	b.n	800a15a <xQueueGenericSend+0x46>
 800a158:	2300      	movs	r3, #0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10a      	bne.n	800a174 <xQueueGenericSend+0x60>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d103      	bne.n	800a182 <xQueueGenericSend+0x6e>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d101      	bne.n	800a186 <xQueueGenericSend+0x72>
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <xQueueGenericSend+0x74>
 800a186:	2300      	movs	r3, #0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	623b      	str	r3, [r7, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1a2:	f001 fc65 	bl	800ba70 <xTaskGetSchedulerState>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <xQueueGenericSend+0x9e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <xQueueGenericSend+0xa2>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <xQueueGenericSend+0xa4>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	61fb      	str	r3, [r7, #28]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1d2:	f002 fb5f 	bl	800c894 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d302      	bcc.n	800a1e8 <xQueueGenericSend+0xd4>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d129      	bne.n	800a23c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	68b9      	ldr	r1, [r7, #8]
 800a1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ee:	f000 fc5e 	bl	800aaae <prvCopyDataToQueue>
 800a1f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d010      	beq.n	800a21e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	3324      	adds	r3, #36	; 0x24
 800a200:	4618      	mov	r0, r3
 800a202:	f001 fa73 	bl	800b6ec <xTaskRemoveFromEventList>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d013      	beq.n	800a234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a20c:	4b3f      	ldr	r3, [pc, #252]	; (800a30c <xQueueGenericSend+0x1f8>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	e00a      	b.n	800a234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d007      	beq.n	800a234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a224:	4b39      	ldr	r3, [pc, #228]	; (800a30c <xQueueGenericSend+0x1f8>)
 800a226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a234:	f002 fb5e 	bl	800c8f4 <vPortExitCritical>
				return pdPASS;
 800a238:	2301      	movs	r3, #1
 800a23a:	e063      	b.n	800a304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d103      	bne.n	800a24a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a242:	f002 fb57 	bl	800c8f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a246:	2300      	movs	r3, #0
 800a248:	e05c      	b.n	800a304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a250:	f107 0314 	add.w	r3, r7, #20
 800a254:	4618      	mov	r0, r3
 800a256:	f001 faad 	bl	800b7b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a25a:	2301      	movs	r3, #1
 800a25c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a25e:	f002 fb49 	bl	800c8f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a262:	f001 f819 	bl	800b298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a266:	f002 fb15 	bl	800c894 <vPortEnterCritical>
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a270:	b25b      	sxtb	r3, r3
 800a272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a276:	d103      	bne.n	800a280 <xQueueGenericSend+0x16c>
 800a278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a286:	b25b      	sxtb	r3, r3
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28c:	d103      	bne.n	800a296 <xQueueGenericSend+0x182>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a296:	f002 fb2d 	bl	800c8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a29a:	1d3a      	adds	r2, r7, #4
 800a29c:	f107 0314 	add.w	r3, r7, #20
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f001 fa9c 	bl	800b7e0 <xTaskCheckForTimeOut>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d124      	bne.n	800a2f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2b0:	f000 fcf5 	bl	800ac9e <prvIsQueueFull>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d018      	beq.n	800a2ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	3310      	adds	r3, #16
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f001 f9c2 	bl	800b64c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ca:	f000 fc80 	bl	800abce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2ce:	f000 fff1 	bl	800b2b4 <xTaskResumeAll>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f47f af7c 	bne.w	800a1d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a2da:	4b0c      	ldr	r3, [pc, #48]	; (800a30c <xQueueGenericSend+0x1f8>)
 800a2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	e772      	b.n	800a1d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ee:	f000 fc6e 	bl	800abce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2f2:	f000 ffdf 	bl	800b2b4 <xTaskResumeAll>
 800a2f6:	e76c      	b.n	800a1d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2fa:	f000 fc68 	bl	800abce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2fe:	f000 ffd9 	bl	800b2b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a304:	4618      	mov	r0, r3
 800a306:	3738      	adds	r7, #56	; 0x38
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	e000ed04 	.word	0xe000ed04

0800a310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b090      	sub	sp, #64	; 0x40
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d103      	bne.n	800a34c <xQueueGenericSendFromISR+0x3c>
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <xQueueGenericSendFromISR+0x40>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <xQueueGenericSendFromISR+0x42>
 800a350:	2300      	movs	r3, #0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d103      	bne.n	800a37a <xQueueGenericSendFromISR+0x6a>
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a376:	2b01      	cmp	r3, #1
 800a378:	d101      	bne.n	800a37e <xQueueGenericSendFromISR+0x6e>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <xQueueGenericSendFromISR+0x70>
 800a37e:	2300      	movs	r3, #0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	623b      	str	r3, [r7, #32]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a39a:	f002 fb5d 	bl	800ca58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a39e:	f3ef 8211 	mrs	r2, BASEPRI
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	61fa      	str	r2, [r7, #28]
 800a3b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d302      	bcc.n	800a3cc <xQueueGenericSendFromISR+0xbc>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d12f      	bne.n	800a42c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3e2:	f000 fb64 	bl	800aaae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ee:	d112      	bne.n	800a416 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d016      	beq.n	800a426 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	3324      	adds	r3, #36	; 0x24
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f001 f975 	bl	800b6ec <xTaskRemoveFromEventList>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00e      	beq.n	800a426 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00b      	beq.n	800a426 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	e007      	b.n	800a426 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a41a:	3301      	adds	r3, #1
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	b25a      	sxtb	r2, r3
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a426:	2301      	movs	r3, #1
 800a428:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a42a:	e001      	b.n	800a430 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a42c:	2300      	movs	r3, #0
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a432:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a43a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3740      	adds	r7, #64	; 0x40
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b08e      	sub	sp, #56	; 0x38
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10a      	bne.n	800a470 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	623b      	str	r3, [r7, #32]
}
 800a46c:	bf00      	nop
 800a46e:	e7fe      	b.n	800a46e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00a      	beq.n	800a48e <xQueueGiveFromISR+0x48>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	61fb      	str	r3, [r7, #28]
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d103      	bne.n	800a49e <xQueueGiveFromISR+0x58>
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <xQueueGiveFromISR+0x5c>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <xQueueGiveFromISR+0x5e>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <xQueueGiveFromISR+0x78>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	61bb      	str	r3, [r7, #24]
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4be:	f002 facb 	bl	800ca58 <vPortValidateInterruptPriority>
	__asm volatile
 800a4c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	617a      	str	r2, [r7, #20]
 800a4d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a4da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d22b      	bcs.n	800a546 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a500:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a508:	d112      	bne.n	800a530 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d016      	beq.n	800a540 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	3324      	adds	r3, #36	; 0x24
 800a516:	4618      	mov	r0, r3
 800a518:	f001 f8e8 	bl	800b6ec <xTaskRemoveFromEventList>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00e      	beq.n	800a540 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00b      	beq.n	800a540 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2201      	movs	r2, #1
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	e007      	b.n	800a540 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a534:	3301      	adds	r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	b25a      	sxtb	r2, r3
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a540:	2301      	movs	r3, #1
 800a542:	637b      	str	r3, [r7, #52]	; 0x34
 800a544:	e001      	b.n	800a54a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a546:	2300      	movs	r3, #0
 800a548:	637b      	str	r3, [r7, #52]	; 0x34
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f383 8811 	msr	BASEPRI, r3
}
 800a554:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3738      	adds	r7, #56	; 0x38
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b08c      	sub	sp, #48	; 0x30
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10a      	bne.n	800a590 <xQueueReceive+0x30>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	623b      	str	r3, [r7, #32]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d103      	bne.n	800a59e <xQueueReceive+0x3e>
 800a596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <xQueueReceive+0x42>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <xQueueReceive+0x44>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <xQueueReceive+0x5e>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	61fb      	str	r3, [r7, #28]
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5be:	f001 fa57 	bl	800ba70 <xTaskGetSchedulerState>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d102      	bne.n	800a5ce <xQueueReceive+0x6e>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <xQueueReceive+0x72>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e000      	b.n	800a5d4 <xQueueReceive+0x74>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10a      	bne.n	800a5ee <xQueueReceive+0x8e>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	61bb      	str	r3, [r7, #24]
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5ee:	f002 f951 	bl	800c894 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d01f      	beq.n	800a63e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5fe:	68b9      	ldr	r1, [r7, #8]
 800a600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a602:	f000 fabe 	bl	800ab82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	1e5a      	subs	r2, r3, #1
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00f      	beq.n	800a636 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	3310      	adds	r3, #16
 800a61a:	4618      	mov	r0, r3
 800a61c:	f001 f866 	bl	800b6ec <xTaskRemoveFromEventList>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d007      	beq.n	800a636 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a626:	4b3d      	ldr	r3, [pc, #244]	; (800a71c <xQueueReceive+0x1bc>)
 800a628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a636:	f002 f95d 	bl	800c8f4 <vPortExitCritical>
				return pdPASS;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e069      	b.n	800a712 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d103      	bne.n	800a64c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a644:	f002 f956 	bl	800c8f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a648:	2300      	movs	r3, #0
 800a64a:	e062      	b.n	800a712 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a652:	f107 0310 	add.w	r3, r7, #16
 800a656:	4618      	mov	r0, r3
 800a658:	f001 f8ac 	bl	800b7b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a65c:	2301      	movs	r3, #1
 800a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a660:	f002 f948 	bl	800c8f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a664:	f000 fe18 	bl	800b298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a668:	f002 f914 	bl	800c894 <vPortEnterCritical>
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a672:	b25b      	sxtb	r3, r3
 800a674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a678:	d103      	bne.n	800a682 <xQueueReceive+0x122>
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a688:	b25b      	sxtb	r3, r3
 800a68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68e:	d103      	bne.n	800a698 <xQueueReceive+0x138>
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a698:	f002 f92c 	bl	800c8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a69c:	1d3a      	adds	r2, r7, #4
 800a69e:	f107 0310 	add.w	r3, r7, #16
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f001 f89b 	bl	800b7e0 <xTaskCheckForTimeOut>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d123      	bne.n	800a6f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b2:	f000 fade 	bl	800ac72 <prvIsQueueEmpty>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d017      	beq.n	800a6ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	3324      	adds	r3, #36	; 0x24
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 ffc1 	bl	800b64c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6cc:	f000 fa7f 	bl	800abce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6d0:	f000 fdf0 	bl	800b2b4 <xTaskResumeAll>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d189      	bne.n	800a5ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a6da:	4b10      	ldr	r3, [pc, #64]	; (800a71c <xQueueReceive+0x1bc>)
 800a6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	e780      	b.n	800a5ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ee:	f000 fa6e 	bl	800abce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6f2:	f000 fddf 	bl	800b2b4 <xTaskResumeAll>
 800a6f6:	e77a      	b.n	800a5ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6fa:	f000 fa68 	bl	800abce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6fe:	f000 fdd9 	bl	800b2b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a704:	f000 fab5 	bl	800ac72 <prvIsQueueEmpty>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f43f af6f 	beq.w	800a5ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a710:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a712:	4618      	mov	r0, r3
 800a714:	3730      	adds	r7, #48	; 0x30
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	e000ed04 	.word	0xe000ed04

0800a720 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08e      	sub	sp, #56	; 0x38
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a72a:	2300      	movs	r3, #0
 800a72c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a732:	2300      	movs	r3, #0
 800a734:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10a      	bne.n	800a752 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	623b      	str	r3, [r7, #32]
}
 800a74e:	bf00      	nop
 800a750:	e7fe      	b.n	800a750 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	61fb      	str	r3, [r7, #28]
}
 800a76c:	bf00      	nop
 800a76e:	e7fe      	b.n	800a76e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a770:	f001 f97e 	bl	800ba70 <xTaskGetSchedulerState>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d102      	bne.n	800a780 <xQueueSemaphoreTake+0x60>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <xQueueSemaphoreTake+0x64>
 800a780:	2301      	movs	r3, #1
 800a782:	e000      	b.n	800a786 <xQueueSemaphoreTake+0x66>
 800a784:	2300      	movs	r3, #0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	61bb      	str	r3, [r7, #24]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7a0:	f002 f878 	bl	800c894 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d024      	beq.n	800a7fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	1e5a      	subs	r2, r3, #1
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a7c0:	f001 facc 	bl	800bd5c <pvTaskIncrementMutexHeldCount>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00f      	beq.n	800a7f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d4:	3310      	adds	r3, #16
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 ff88 	bl	800b6ec <xTaskRemoveFromEventList>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d007      	beq.n	800a7f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7e2:	4b54      	ldr	r3, [pc, #336]	; (800a934 <xQueueSemaphoreTake+0x214>)
 800a7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7f2:	f002 f87f 	bl	800c8f4 <vPortExitCritical>
				return pdPASS;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e097      	b.n	800a92a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d111      	bne.n	800a824 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00a      	beq.n	800a81c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	617b      	str	r3, [r7, #20]
}
 800a818:	bf00      	nop
 800a81a:	e7fe      	b.n	800a81a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a81c:	f002 f86a 	bl	800c8f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a820:	2300      	movs	r3, #0
 800a822:	e082      	b.n	800a92a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a826:	2b00      	cmp	r3, #0
 800a828:	d106      	bne.n	800a838 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a82a:	f107 030c 	add.w	r3, r7, #12
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 ffc0 	bl	800b7b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a834:	2301      	movs	r3, #1
 800a836:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a838:	f002 f85c 	bl	800c8f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a83c:	f000 fd2c 	bl	800b298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a840:	f002 f828 	bl	800c894 <vPortEnterCritical>
 800a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a84a:	b25b      	sxtb	r3, r3
 800a84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a850:	d103      	bne.n	800a85a <xQueueSemaphoreTake+0x13a>
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a860:	b25b      	sxtb	r3, r3
 800a862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a866:	d103      	bne.n	800a870 <xQueueSemaphoreTake+0x150>
 800a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a870:	f002 f840 	bl	800c8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a874:	463a      	mov	r2, r7
 800a876:	f107 030c 	add.w	r3, r7, #12
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 ffaf 	bl	800b7e0 <xTaskCheckForTimeOut>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d132      	bne.n	800a8ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a88a:	f000 f9f2 	bl	800ac72 <prvIsQueueEmpty>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d026      	beq.n	800a8e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d109      	bne.n	800a8b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a89c:	f001 fffa 	bl	800c894 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f001 f901 	bl	800baac <xTaskPriorityInherit>
 800a8aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a8ac:	f002 f822 	bl	800c8f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b2:	3324      	adds	r3, #36	; 0x24
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fec7 	bl	800b64c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8c0:	f000 f985 	bl	800abce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8c4:	f000 fcf6 	bl	800b2b4 <xTaskResumeAll>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f47f af68 	bne.w	800a7a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a8d0:	4b18      	ldr	r3, [pc, #96]	; (800a934 <xQueueSemaphoreTake+0x214>)
 800a8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d6:	601a      	str	r2, [r3, #0]
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	e75e      	b.n	800a7a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a8e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8e4:	f000 f973 	bl	800abce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8e8:	f000 fce4 	bl	800b2b4 <xTaskResumeAll>
 800a8ec:	e758      	b.n	800a7a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a8ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8f0:	f000 f96d 	bl	800abce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8f4:	f000 fcde 	bl	800b2b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8fa:	f000 f9ba 	bl	800ac72 <prvIsQueueEmpty>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	f43f af4d 	beq.w	800a7a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00d      	beq.n	800a928 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a90c:	f001 ffc2 	bl	800c894 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a912:	f000 f8b4 	bl	800aa7e <prvGetDisinheritPriorityAfterTimeout>
 800a916:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a91e:	4618      	mov	r0, r3
 800a920:	f001 f99a 	bl	800bc58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a924:	f001 ffe6 	bl	800c8f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3738      	adds	r7, #56	; 0x38
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08e      	sub	sp, #56	; 0x38
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10a      	bne.n	800a964 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	623b      	str	r3, [r7, #32]
}
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <xQueueReceiveFromISR+0x3a>
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <xQueueReceiveFromISR+0x3e>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <xQueueReceiveFromISR+0x40>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10a      	bne.n	800a992 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	61fb      	str	r3, [r7, #28]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a992:	f002 f861 	bl	800ca58 <vPortValidateInterruptPriority>
	__asm volatile
 800a996:	f3ef 8211 	mrs	r2, BASEPRI
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	61ba      	str	r2, [r7, #24]
 800a9ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a9ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d02f      	beq.n	800aa1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9c8:	68b9      	ldr	r1, [r7, #8]
 800a9ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9cc:	f000 f8d9 	bl	800ab82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	1e5a      	subs	r2, r3, #1
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a9d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e0:	d112      	bne.n	800aa08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d016      	beq.n	800aa18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	3310      	adds	r3, #16
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fe7c 	bl	800b6ec <xTaskRemoveFromEventList>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00e      	beq.n	800aa18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00b      	beq.n	800aa18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	601a      	str	r2, [r3, #0]
 800aa06:	e007      	b.n	800aa18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	b25a      	sxtb	r2, r3
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa1c:	e001      	b.n	800aa22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	637b      	str	r3, [r7, #52]	; 0x34
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	f383 8811 	msr	BASEPRI, r3
}
 800aa2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3738      	adds	r7, #56	; 0x38
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <vQueueDelete+0x28>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	60bb      	str	r3, [r7, #8]
}
 800aa5c:	bf00      	nop
 800aa5e:	e7fe      	b.n	800aa5e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 f95f 	bl	800ad24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d102      	bne.n	800aa76 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f002 f8fd 	bl	800cc70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d006      	beq.n	800aa9c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	e001      	b.n	800aaa0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
	}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b086      	sub	sp, #24
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10d      	bne.n	800aae8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d14d      	bne.n	800ab70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	4618      	mov	r0, r3
 800aada:	f001 f84f 	bl	800bb7c <xTaskPriorityDisinherit>
 800aade:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	609a      	str	r2, [r3, #8]
 800aae6:	e043      	b.n	800ab70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d119      	bne.n	800ab22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6858      	ldr	r0, [r3, #4]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	68b9      	ldr	r1, [r7, #8]
 800aafa:	f003 fbed 	bl	800e2d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab06:	441a      	add	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d32b      	bcc.n	800ab70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	605a      	str	r2, [r3, #4]
 800ab20:	e026      	b.n	800ab70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	68d8      	ldr	r0, [r3, #12]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	68b9      	ldr	r1, [r7, #8]
 800ab2e:	f003 fbd3 	bl	800e2d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3a:	425b      	negs	r3, r3
 800ab3c:	441a      	add	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	68da      	ldr	r2, [r3, #12]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d207      	bcs.n	800ab5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	689a      	ldr	r2, [r3, #8]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab56:	425b      	negs	r3, r3
 800ab58:	441a      	add	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d105      	bne.n	800ab70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d002      	beq.n	800ab70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab78:	697b      	ldr	r3, [r7, #20]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b082      	sub	sp, #8
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d018      	beq.n	800abc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9c:	441a      	add	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68da      	ldr	r2, [r3, #12]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d303      	bcc.n	800abb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68d9      	ldr	r1, [r3, #12]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	461a      	mov	r2, r3
 800abc0:	6838      	ldr	r0, [r7, #0]
 800abc2:	f003 fb89 	bl	800e2d8 <memcpy>
	}
}
 800abc6:	bf00      	nop
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abd6:	f001 fe5d 	bl	800c894 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abe0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abe2:	e011      	b.n	800ac08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d012      	beq.n	800ac12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3324      	adds	r3, #36	; 0x24
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fd7b 	bl	800b6ec <xTaskRemoveFromEventList>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abfc:	f000 fe52 	bl	800b8a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dce9      	bgt.n	800abe4 <prvUnlockQueue+0x16>
 800ac10:	e000      	b.n	800ac14 <prvUnlockQueue+0x46>
					break;
 800ac12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	22ff      	movs	r2, #255	; 0xff
 800ac18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac1c:	f001 fe6a 	bl	800c8f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac20:	f001 fe38 	bl	800c894 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac2c:	e011      	b.n	800ac52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d012      	beq.n	800ac5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3310      	adds	r3, #16
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fd56 	bl	800b6ec <xTaskRemoveFromEventList>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac46:	f000 fe2d 	bl	800b8a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dce9      	bgt.n	800ac2e <prvUnlockQueue+0x60>
 800ac5a:	e000      	b.n	800ac5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	22ff      	movs	r2, #255	; 0xff
 800ac62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac66:	f001 fe45 	bl	800c8f4 <vPortExitCritical>
}
 800ac6a:	bf00      	nop
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac7a:	f001 fe0b 	bl	800c894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d102      	bne.n	800ac8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac86:	2301      	movs	r3, #1
 800ac88:	60fb      	str	r3, [r7, #12]
 800ac8a:	e001      	b.n	800ac90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac90:	f001 fe30 	bl	800c8f4 <vPortExitCritical>

	return xReturn;
 800ac94:	68fb      	ldr	r3, [r7, #12]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aca6:	f001 fdf5 	bl	800c894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d102      	bne.n	800acbc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800acb6:	2301      	movs	r3, #1
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	e001      	b.n	800acc0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acc0:	f001 fe18 	bl	800c8f4 <vPortExitCritical>

	return xReturn;
 800acc4:	68fb      	ldr	r3, [r7, #12]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
	...

0800acd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acda:	2300      	movs	r3, #0
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	e014      	b.n	800ad0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ace0:	4a0f      	ldr	r2, [pc, #60]	; (800ad20 <vQueueAddToRegistry+0x50>)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10b      	bne.n	800ad04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800acec:	490c      	ldr	r1, [pc, #48]	; (800ad20 <vQueueAddToRegistry+0x50>)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acf6:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <vQueueAddToRegistry+0x50>)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	00db      	lsls	r3, r3, #3
 800acfc:	4413      	add	r3, r2
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad02:	e006      	b.n	800ad12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3301      	adds	r3, #1
 800ad08:	60fb      	str	r3, [r7, #12]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b07      	cmp	r3, #7
 800ad0e:	d9e7      	bls.n	800ace0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad10:	bf00      	nop
 800ad12:	bf00      	nop
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	20010054 	.word	0x20010054

0800ad24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	e016      	b.n	800ad60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad32:	4a10      	ldr	r2, [pc, #64]	; (800ad74 <vQueueUnregisterQueue+0x50>)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	4413      	add	r3, r2
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d10b      	bne.n	800ad5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ad42:	4a0c      	ldr	r2, [pc, #48]	; (800ad74 <vQueueUnregisterQueue+0x50>)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2100      	movs	r1, #0
 800ad48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad4c:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <vQueueUnregisterQueue+0x50>)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	00db      	lsls	r3, r3, #3
 800ad52:	4413      	add	r3, r2
 800ad54:	2200      	movs	r2, #0
 800ad56:	605a      	str	r2, [r3, #4]
				break;
 800ad58:	e006      	b.n	800ad68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b07      	cmp	r3, #7
 800ad64:	d9e5      	bls.n	800ad32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad66:	bf00      	nop
 800ad68:	bf00      	nop
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr
 800ad74:	20010054 	.word	0x20010054

0800ad78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad88:	f001 fd84 	bl	800c894 <vPortEnterCritical>
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad92:	b25b      	sxtb	r3, r3
 800ad94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad98:	d103      	bne.n	800ada2 <vQueueWaitForMessageRestricted+0x2a>
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ada8:	b25b      	sxtb	r3, r3
 800adaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adae:	d103      	bne.n	800adb8 <vQueueWaitForMessageRestricted+0x40>
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adb8:	f001 fd9c 	bl	800c8f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d106      	bne.n	800add2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	3324      	adds	r3, #36	; 0x24
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fc61 	bl	800b694 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800add2:	6978      	ldr	r0, [r7, #20]
 800add4:	f7ff fefb 	bl	800abce <prvUnlockQueue>
	}
 800add8:	bf00      	nop
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08e      	sub	sp, #56	; 0x38
 800ade4:	af04      	add	r7, sp, #16
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <xTaskCreateStatic+0x2a>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	623b      	str	r3, [r7, #32]
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10a      	bne.n	800ae26 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	61fb      	str	r3, [r7, #28]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae26:	23bc      	movs	r3, #188	; 0xbc
 800ae28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	2bbc      	cmp	r3, #188	; 0xbc
 800ae2e:	d00a      	beq.n	800ae46 <xTaskCreateStatic+0x66>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	61bb      	str	r3, [r7, #24]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d01e      	beq.n	800ae8c <xTaskCreateStatic+0xac>
 800ae4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d01b      	beq.n	800ae8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae60:	2202      	movs	r2, #2
 800ae62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae66:	2300      	movs	r3, #0
 800ae68:	9303      	str	r3, [sp, #12]
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	9302      	str	r3, [sp, #8]
 800ae6e:	f107 0314 	add.w	r3, r7, #20
 800ae72:	9301      	str	r3, [sp, #4]
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	68b9      	ldr	r1, [r7, #8]
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f000 f850 	bl	800af24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae86:	f000 f8f3 	bl	800b070 <prvAddNewTaskToReadyList>
 800ae8a:	e001      	b.n	800ae90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae90:	697b      	ldr	r3, [r7, #20]
	}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3728      	adds	r7, #40	; 0x28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b08c      	sub	sp, #48	; 0x30
 800ae9e:	af04      	add	r7, sp, #16
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	603b      	str	r3, [r7, #0]
 800aea6:	4613      	mov	r3, r2
 800aea8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aeaa:	88fb      	ldrh	r3, [r7, #6]
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f001 fe12 	bl	800cad8 <pvPortMalloc>
 800aeb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00e      	beq.n	800aeda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aebc:	20bc      	movs	r0, #188	; 0xbc
 800aebe:	f001 fe0b 	bl	800cad8 <pvPortMalloc>
 800aec2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	631a      	str	r2, [r3, #48]	; 0x30
 800aed0:	e005      	b.n	800aede <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aed2:	6978      	ldr	r0, [r7, #20]
 800aed4:	f001 fecc 	bl	800cc70 <vPortFree>
 800aed8:	e001      	b.n	800aede <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d017      	beq.n	800af14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aeec:	88fa      	ldrh	r2, [r7, #6]
 800aeee:	2300      	movs	r3, #0
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	9302      	str	r3, [sp, #8]
 800aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef8:	9301      	str	r3, [sp, #4]
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f000 f80e 	bl	800af24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af08:	69f8      	ldr	r0, [r7, #28]
 800af0a:	f000 f8b1 	bl	800b070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af0e:	2301      	movs	r3, #1
 800af10:	61bb      	str	r3, [r7, #24]
 800af12:	e002      	b.n	800af1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af14:	f04f 33ff 	mov.w	r3, #4294967295
 800af18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af1a:	69bb      	ldr	r3, [r7, #24]
	}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3720      	adds	r7, #32
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	461a      	mov	r2, r3
 800af3c:	21a5      	movs	r1, #165	; 0xa5
 800af3e:	f003 f9d9 	bl	800e2f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af4c:	3b01      	subs	r3, #1
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00a      	beq.n	800af7c <prvInitialiseNewTask+0x58>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	617b      	str	r3, [r7, #20]
}
 800af78:	bf00      	nop
 800af7a:	e7fe      	b.n	800af7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d01f      	beq.n	800afc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af82:	2300      	movs	r3, #0
 800af84:	61fb      	str	r3, [r7, #28]
 800af86:	e012      	b.n	800afae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	4413      	add	r3, r2
 800af8e:	7819      	ldrb	r1, [r3, #0]
 800af90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	4413      	add	r3, r2
 800af96:	3334      	adds	r3, #52	; 0x34
 800af98:	460a      	mov	r2, r1
 800af9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	4413      	add	r3, r2
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d006      	beq.n	800afb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	3301      	adds	r3, #1
 800afac:	61fb      	str	r3, [r7, #28]
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	2b0f      	cmp	r3, #15
 800afb2:	d9e9      	bls.n	800af88 <prvInitialiseNewTask+0x64>
 800afb4:	e000      	b.n	800afb8 <prvInitialiseNewTask+0x94>
			{
				break;
 800afb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afc0:	e003      	b.n	800afca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afcc:	2b37      	cmp	r3, #55	; 0x37
 800afce:	d901      	bls.n	800afd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afd0:	2337      	movs	r3, #55	; 0x37
 800afd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800afe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe2:	2200      	movs	r2, #0
 800afe4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	3304      	adds	r3, #4
 800afea:	4618      	mov	r0, r3
 800afec:	f7fe fe56 	bl	8009c9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	3318      	adds	r3, #24
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe fe51 	bl	8009c9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800affe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b00e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	2200      	movs	r2, #0
 800b014:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	3354      	adds	r3, #84	; 0x54
 800b024:	2260      	movs	r2, #96	; 0x60
 800b026:	2100      	movs	r1, #0
 800b028:	4618      	mov	r0, r3
 800b02a:	f003 f963 	bl	800e2f4 <memset>
 800b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b030:	4a0c      	ldr	r2, [pc, #48]	; (800b064 <prvInitialiseNewTask+0x140>)
 800b032:	659a      	str	r2, [r3, #88]	; 0x58
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	4a0c      	ldr	r2, [pc, #48]	; (800b068 <prvInitialiseNewTask+0x144>)
 800b038:	65da      	str	r2, [r3, #92]	; 0x5c
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	4a0b      	ldr	r2, [pc, #44]	; (800b06c <prvInitialiseNewTask+0x148>)
 800b03e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	68f9      	ldr	r1, [r7, #12]
 800b044:	69b8      	ldr	r0, [r7, #24]
 800b046:	f001 faf9 	bl	800c63c <pxPortInitialiseStack>
 800b04a:	4602      	mov	r2, r0
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b05a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b05c:	bf00      	nop
 800b05e:	3720      	adds	r7, #32
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	0800eed8 	.word	0x0800eed8
 800b068:	0800eef8 	.word	0x0800eef8
 800b06c:	0800eeb8 	.word	0x0800eeb8

0800b070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b078:	f001 fc0c 	bl	800c894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b07c:	4b2d      	ldr	r3, [pc, #180]	; (800b134 <prvAddNewTaskToReadyList+0xc4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3301      	adds	r3, #1
 800b082:	4a2c      	ldr	r2, [pc, #176]	; (800b134 <prvAddNewTaskToReadyList+0xc4>)
 800b084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b086:	4b2c      	ldr	r3, [pc, #176]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d109      	bne.n	800b0a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b08e:	4a2a      	ldr	r2, [pc, #168]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b094:	4b27      	ldr	r3, [pc, #156]	; (800b134 <prvAddNewTaskToReadyList+0xc4>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d110      	bne.n	800b0be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b09c:	f000 fc26 	bl	800b8ec <prvInitialiseTaskLists>
 800b0a0:	e00d      	b.n	800b0be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0a2:	4b26      	ldr	r3, [pc, #152]	; (800b13c <prvAddNewTaskToReadyList+0xcc>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d109      	bne.n	800b0be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0aa:	4b23      	ldr	r3, [pc, #140]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d802      	bhi.n	800b0be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0b8:	4a1f      	ldr	r2, [pc, #124]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0be:	4b20      	ldr	r3, [pc, #128]	; (800b140 <prvAddNewTaskToReadyList+0xd0>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	4a1e      	ldr	r2, [pc, #120]	; (800b140 <prvAddNewTaskToReadyList+0xd0>)
 800b0c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0c8:	4b1d      	ldr	r3, [pc, #116]	; (800b140 <prvAddNewTaskToReadyList+0xd0>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d4:	4b1b      	ldr	r3, [pc, #108]	; (800b144 <prvAddNewTaskToReadyList+0xd4>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d903      	bls.n	800b0e4 <prvAddNewTaskToReadyList+0x74>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e0:	4a18      	ldr	r2, [pc, #96]	; (800b144 <prvAddNewTaskToReadyList+0xd4>)
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4a15      	ldr	r2, [pc, #84]	; (800b148 <prvAddNewTaskToReadyList+0xd8>)
 800b0f2:	441a      	add	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7fe fddb 	bl	8009cb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b100:	f001 fbf8 	bl	800c8f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b104:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <prvAddNewTaskToReadyList+0xcc>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00e      	beq.n	800b12a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b10c:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	429a      	cmp	r2, r3
 800b118:	d207      	bcs.n	800b12a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b11a:	4b0c      	ldr	r3, [pc, #48]	; (800b14c <prvAddNewTaskToReadyList+0xdc>)
 800b11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	20000dbc 	.word	0x20000dbc
 800b138:	200008e8 	.word	0x200008e8
 800b13c:	20000dc8 	.word	0x20000dc8
 800b140:	20000dd8 	.word	0x20000dd8
 800b144:	20000dc4 	.word	0x20000dc4
 800b148:	200008ec 	.word	0x200008ec
 800b14c:	e000ed04 	.word	0xe000ed04

0800b150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b158:	2300      	movs	r3, #0
 800b15a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d017      	beq.n	800b192 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b162:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <vTaskDelay+0x60>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <vTaskDelay+0x30>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	60bb      	str	r3, [r7, #8]
}
 800b17c:	bf00      	nop
 800b17e:	e7fe      	b.n	800b17e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b180:	f000 f88a 	bl	800b298 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b184:	2100      	movs	r1, #0
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fdfc 	bl	800bd84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b18c:	f000 f892 	bl	800b2b4 <xTaskResumeAll>
 800b190:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d107      	bne.n	800b1a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b198:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <vTaskDelay+0x64>)
 800b19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1a8:	bf00      	nop
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20000de4 	.word	0x20000de4
 800b1b4:	e000ed04 	.word	0xe000ed04

0800b1b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08a      	sub	sp, #40	; 0x28
 800b1bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1c6:	463a      	mov	r2, r7
 800b1c8:	1d39      	adds	r1, r7, #4
 800b1ca:	f107 0308 	add.w	r3, r7, #8
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe fd10 	bl	8009bf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	9202      	str	r2, [sp, #8]
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	460a      	mov	r2, r1
 800b1e6:	4924      	ldr	r1, [pc, #144]	; (800b278 <vTaskStartScheduler+0xc0>)
 800b1e8:	4824      	ldr	r0, [pc, #144]	; (800b27c <vTaskStartScheduler+0xc4>)
 800b1ea:	f7ff fdf9 	bl	800ade0 <xTaskCreateStatic>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	4a23      	ldr	r2, [pc, #140]	; (800b280 <vTaskStartScheduler+0xc8>)
 800b1f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1f4:	4b22      	ldr	r3, [pc, #136]	; (800b280 <vTaskStartScheduler+0xc8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	617b      	str	r3, [r7, #20]
 800b200:	e001      	b.n	800b206 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d102      	bne.n	800b212 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b20c:	f000 fe0e 	bl	800be2c <xTimerCreateTimerTask>
 800b210:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d11b      	bne.n	800b250 <vTaskStartScheduler+0x98>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	613b      	str	r3, [r7, #16]
}
 800b22a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b22c:	4b15      	ldr	r3, [pc, #84]	; (800b284 <vTaskStartScheduler+0xcc>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3354      	adds	r3, #84	; 0x54
 800b232:	4a15      	ldr	r2, [pc, #84]	; (800b288 <vTaskStartScheduler+0xd0>)
 800b234:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b236:	4b15      	ldr	r3, [pc, #84]	; (800b28c <vTaskStartScheduler+0xd4>)
 800b238:	f04f 32ff 	mov.w	r2, #4294967295
 800b23c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b23e:	4b14      	ldr	r3, [pc, #80]	; (800b290 <vTaskStartScheduler+0xd8>)
 800b240:	2201      	movs	r2, #1
 800b242:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b244:	4b13      	ldr	r3, [pc, #76]	; (800b294 <vTaskStartScheduler+0xdc>)
 800b246:	2200      	movs	r2, #0
 800b248:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b24a:	f001 fa81 	bl	800c750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b24e:	e00e      	b.n	800b26e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b256:	d10a      	bne.n	800b26e <vTaskStartScheduler+0xb6>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	60fb      	str	r3, [r7, #12]
}
 800b26a:	bf00      	nop
 800b26c:	e7fe      	b.n	800b26c <vTaskStartScheduler+0xb4>
}
 800b26e:	bf00      	nop
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	0800e93c 	.word	0x0800e93c
 800b27c:	0800b8bd 	.word	0x0800b8bd
 800b280:	20000de0 	.word	0x20000de0
 800b284:	200008e8 	.word	0x200008e8
 800b288:	200000e4 	.word	0x200000e4
 800b28c:	20000ddc 	.word	0x20000ddc
 800b290:	20000dc8 	.word	0x20000dc8
 800b294:	20000dc0 	.word	0x20000dc0

0800b298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b298:	b480      	push	{r7}
 800b29a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b29c:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <vTaskSuspendAll+0x18>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	4a03      	ldr	r2, [pc, #12]	; (800b2b0 <vTaskSuspendAll+0x18>)
 800b2a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2a6:	bf00      	nop
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	20000de4 	.word	0x20000de4

0800b2b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2c2:	4b42      	ldr	r3, [pc, #264]	; (800b3cc <xTaskResumeAll+0x118>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10a      	bne.n	800b2e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	603b      	str	r3, [r7, #0]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2e0:	f001 fad8 	bl	800c894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2e4:	4b39      	ldr	r3, [pc, #228]	; (800b3cc <xTaskResumeAll+0x118>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	4a38      	ldr	r2, [pc, #224]	; (800b3cc <xTaskResumeAll+0x118>)
 800b2ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ee:	4b37      	ldr	r3, [pc, #220]	; (800b3cc <xTaskResumeAll+0x118>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d162      	bne.n	800b3bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2f6:	4b36      	ldr	r3, [pc, #216]	; (800b3d0 <xTaskResumeAll+0x11c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d05e      	beq.n	800b3bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2fe:	e02f      	b.n	800b360 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b300:	4b34      	ldr	r3, [pc, #208]	; (800b3d4 <xTaskResumeAll+0x120>)
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3318      	adds	r3, #24
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe fd2f 	bl	8009d70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3304      	adds	r3, #4
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fd2a 	bl	8009d70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b320:	4b2d      	ldr	r3, [pc, #180]	; (800b3d8 <xTaskResumeAll+0x124>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d903      	bls.n	800b330 <xTaskResumeAll+0x7c>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32c:	4a2a      	ldr	r2, [pc, #168]	; (800b3d8 <xTaskResumeAll+0x124>)
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b334:	4613      	mov	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4a27      	ldr	r2, [pc, #156]	; (800b3dc <xTaskResumeAll+0x128>)
 800b33e:	441a      	add	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3304      	adds	r3, #4
 800b344:	4619      	mov	r1, r3
 800b346:	4610      	mov	r0, r2
 800b348:	f7fe fcb5 	bl	8009cb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b350:	4b23      	ldr	r3, [pc, #140]	; (800b3e0 <xTaskResumeAll+0x12c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b356:	429a      	cmp	r2, r3
 800b358:	d302      	bcc.n	800b360 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b35a:	4b22      	ldr	r3, [pc, #136]	; (800b3e4 <xTaskResumeAll+0x130>)
 800b35c:	2201      	movs	r2, #1
 800b35e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b360:	4b1c      	ldr	r3, [pc, #112]	; (800b3d4 <xTaskResumeAll+0x120>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1cb      	bne.n	800b300 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b36e:	f000 fb5f 	bl	800ba30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b372:	4b1d      	ldr	r3, [pc, #116]	; (800b3e8 <xTaskResumeAll+0x134>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d010      	beq.n	800b3a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b37e:	f000 f847 	bl	800b410 <xTaskIncrementTick>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b388:	4b16      	ldr	r3, [pc, #88]	; (800b3e4 <xTaskResumeAll+0x130>)
 800b38a:	2201      	movs	r2, #1
 800b38c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	3b01      	subs	r3, #1
 800b392:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1f1      	bne.n	800b37e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b39a:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <xTaskResumeAll+0x134>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3a0:	4b10      	ldr	r3, [pc, #64]	; (800b3e4 <xTaskResumeAll+0x130>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d009      	beq.n	800b3bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3ac:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <xTaskResumeAll+0x138>)
 800b3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3bc:	f001 fa9a 	bl	800c8f4 <vPortExitCritical>

	return xAlreadyYielded;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	20000de4 	.word	0x20000de4
 800b3d0:	20000dbc 	.word	0x20000dbc
 800b3d4:	20000d7c 	.word	0x20000d7c
 800b3d8:	20000dc4 	.word	0x20000dc4
 800b3dc:	200008ec 	.word	0x200008ec
 800b3e0:	200008e8 	.word	0x200008e8
 800b3e4:	20000dd0 	.word	0x20000dd0
 800b3e8:	20000dcc 	.word	0x20000dcc
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3f6:	4b05      	ldr	r3, [pc, #20]	; (800b40c <xTaskGetTickCount+0x1c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3fc:	687b      	ldr	r3, [r7, #4]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	20000dc0 	.word	0x20000dc0

0800b410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b41a:	4b4f      	ldr	r3, [pc, #316]	; (800b558 <xTaskIncrementTick+0x148>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f040 808f 	bne.w	800b542 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b424:	4b4d      	ldr	r3, [pc, #308]	; (800b55c <xTaskIncrementTick+0x14c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3301      	adds	r3, #1
 800b42a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b42c:	4a4b      	ldr	r2, [pc, #300]	; (800b55c <xTaskIncrementTick+0x14c>)
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d120      	bne.n	800b47a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b438:	4b49      	ldr	r3, [pc, #292]	; (800b560 <xTaskIncrementTick+0x150>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00a      	beq.n	800b458 <xTaskIncrementTick+0x48>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	603b      	str	r3, [r7, #0]
}
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <xTaskIncrementTick+0x46>
 800b458:	4b41      	ldr	r3, [pc, #260]	; (800b560 <xTaskIncrementTick+0x150>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	4b41      	ldr	r3, [pc, #260]	; (800b564 <xTaskIncrementTick+0x154>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a3f      	ldr	r2, [pc, #252]	; (800b560 <xTaskIncrementTick+0x150>)
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	4a3f      	ldr	r2, [pc, #252]	; (800b564 <xTaskIncrementTick+0x154>)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6013      	str	r3, [r2, #0]
 800b46c:	4b3e      	ldr	r3, [pc, #248]	; (800b568 <xTaskIncrementTick+0x158>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3301      	adds	r3, #1
 800b472:	4a3d      	ldr	r2, [pc, #244]	; (800b568 <xTaskIncrementTick+0x158>)
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	f000 fadb 	bl	800ba30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b47a:	4b3c      	ldr	r3, [pc, #240]	; (800b56c <xTaskIncrementTick+0x15c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	429a      	cmp	r2, r3
 800b482:	d349      	bcc.n	800b518 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b484:	4b36      	ldr	r3, [pc, #216]	; (800b560 <xTaskIncrementTick+0x150>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d104      	bne.n	800b498 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b48e:	4b37      	ldr	r3, [pc, #220]	; (800b56c <xTaskIncrementTick+0x15c>)
 800b490:	f04f 32ff 	mov.w	r2, #4294967295
 800b494:	601a      	str	r2, [r3, #0]
					break;
 800b496:	e03f      	b.n	800b518 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b498:	4b31      	ldr	r3, [pc, #196]	; (800b560 <xTaskIncrementTick+0x150>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d203      	bcs.n	800b4b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4b0:	4a2e      	ldr	r2, [pc, #184]	; (800b56c <xTaskIncrementTick+0x15c>)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4b6:	e02f      	b.n	800b518 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fe fc57 	bl	8009d70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d004      	beq.n	800b4d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	3318      	adds	r3, #24
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe fc4e 	bl	8009d70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d8:	4b25      	ldr	r3, [pc, #148]	; (800b570 <xTaskIncrementTick+0x160>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d903      	bls.n	800b4e8 <xTaskIncrementTick+0xd8>
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e4:	4a22      	ldr	r2, [pc, #136]	; (800b570 <xTaskIncrementTick+0x160>)
 800b4e6:	6013      	str	r3, [r2, #0]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4a1f      	ldr	r2, [pc, #124]	; (800b574 <xTaskIncrementTick+0x164>)
 800b4f6:	441a      	add	r2, r3
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4610      	mov	r0, r2
 800b500:	f7fe fbd9 	bl	8009cb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b508:	4b1b      	ldr	r3, [pc, #108]	; (800b578 <xTaskIncrementTick+0x168>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50e:	429a      	cmp	r2, r3
 800b510:	d3b8      	bcc.n	800b484 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b512:	2301      	movs	r3, #1
 800b514:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b516:	e7b5      	b.n	800b484 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b518:	4b17      	ldr	r3, [pc, #92]	; (800b578 <xTaskIncrementTick+0x168>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51e:	4915      	ldr	r1, [pc, #84]	; (800b574 <xTaskIncrementTick+0x164>)
 800b520:	4613      	mov	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	440b      	add	r3, r1
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d901      	bls.n	800b534 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b530:	2301      	movs	r3, #1
 800b532:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b534:	4b11      	ldr	r3, [pc, #68]	; (800b57c <xTaskIncrementTick+0x16c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d007      	beq.n	800b54c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b53c:	2301      	movs	r3, #1
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	e004      	b.n	800b54c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b542:	4b0f      	ldr	r3, [pc, #60]	; (800b580 <xTaskIncrementTick+0x170>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3301      	adds	r3, #1
 800b548:	4a0d      	ldr	r2, [pc, #52]	; (800b580 <xTaskIncrementTick+0x170>)
 800b54a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b54c:	697b      	ldr	r3, [r7, #20]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3718      	adds	r7, #24
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	20000de4 	.word	0x20000de4
 800b55c:	20000dc0 	.word	0x20000dc0
 800b560:	20000d74 	.word	0x20000d74
 800b564:	20000d78 	.word	0x20000d78
 800b568:	20000dd4 	.word	0x20000dd4
 800b56c:	20000ddc 	.word	0x20000ddc
 800b570:	20000dc4 	.word	0x20000dc4
 800b574:	200008ec 	.word	0x200008ec
 800b578:	200008e8 	.word	0x200008e8
 800b57c:	20000dd0 	.word	0x20000dd0
 800b580:	20000dcc 	.word	0x20000dcc

0800b584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b58a:	4b2a      	ldr	r3, [pc, #168]	; (800b634 <vTaskSwitchContext+0xb0>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d003      	beq.n	800b59a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b592:	4b29      	ldr	r3, [pc, #164]	; (800b638 <vTaskSwitchContext+0xb4>)
 800b594:	2201      	movs	r2, #1
 800b596:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b598:	e046      	b.n	800b628 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b59a:	4b27      	ldr	r3, [pc, #156]	; (800b638 <vTaskSwitchContext+0xb4>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5a0:	4b26      	ldr	r3, [pc, #152]	; (800b63c <vTaskSwitchContext+0xb8>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	60fb      	str	r3, [r7, #12]
 800b5a6:	e010      	b.n	800b5ca <vTaskSwitchContext+0x46>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10a      	bne.n	800b5c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	607b      	str	r3, [r7, #4]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <vTaskSwitchContext+0x3e>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	60fb      	str	r3, [r7, #12]
 800b5ca:	491d      	ldr	r1, [pc, #116]	; (800b640 <vTaskSwitchContext+0xbc>)
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	440b      	add	r3, r1
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d0e4      	beq.n	800b5a8 <vTaskSwitchContext+0x24>
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4a15      	ldr	r2, [pc, #84]	; (800b640 <vTaskSwitchContext+0xbc>)
 800b5ea:	4413      	add	r3, r2
 800b5ec:	60bb      	str	r3, [r7, #8]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	685a      	ldr	r2, [r3, #4]
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	605a      	str	r2, [r3, #4]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	3308      	adds	r3, #8
 800b600:	429a      	cmp	r2, r3
 800b602:	d104      	bne.n	800b60e <vTaskSwitchContext+0x8a>
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	605a      	str	r2, [r3, #4]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	4a0b      	ldr	r2, [pc, #44]	; (800b644 <vTaskSwitchContext+0xc0>)
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	4a08      	ldr	r2, [pc, #32]	; (800b63c <vTaskSwitchContext+0xb8>)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b61e:	4b09      	ldr	r3, [pc, #36]	; (800b644 <vTaskSwitchContext+0xc0>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3354      	adds	r3, #84	; 0x54
 800b624:	4a08      	ldr	r2, [pc, #32]	; (800b648 <vTaskSwitchContext+0xc4>)
 800b626:	6013      	str	r3, [r2, #0]
}
 800b628:	bf00      	nop
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	20000de4 	.word	0x20000de4
 800b638:	20000dd0 	.word	0x20000dd0
 800b63c:	20000dc4 	.word	0x20000dc4
 800b640:	200008ec 	.word	0x200008ec
 800b644:	200008e8 	.word	0x200008e8
 800b648:	200000e4 	.word	0x200000e4

0800b64c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10a      	bne.n	800b672 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	60fb      	str	r3, [r7, #12]
}
 800b66e:	bf00      	nop
 800b670:	e7fe      	b.n	800b670 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b672:	4b07      	ldr	r3, [pc, #28]	; (800b690 <vTaskPlaceOnEventList+0x44>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3318      	adds	r3, #24
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7fe fb3f 	bl	8009cfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b680:	2101      	movs	r1, #1
 800b682:	6838      	ldr	r0, [r7, #0]
 800b684:	f000 fb7e 	bl	800bd84 <prvAddCurrentTaskToDelayedList>
}
 800b688:	bf00      	nop
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	200008e8 	.word	0x200008e8

0800b694 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10a      	bne.n	800b6bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	617b      	str	r3, [r7, #20]
}
 800b6b8:	bf00      	nop
 800b6ba:	e7fe      	b.n	800b6ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6bc:	4b0a      	ldr	r3, [pc, #40]	; (800b6e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3318      	adds	r3, #24
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f7fe faf6 	bl	8009cb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6d6:	6879      	ldr	r1, [r7, #4]
 800b6d8:	68b8      	ldr	r0, [r7, #8]
 800b6da:	f000 fb53 	bl	800bd84 <prvAddCurrentTaskToDelayedList>
	}
 800b6de:	bf00      	nop
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	200008e8 	.word	0x200008e8

0800b6ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10a      	bne.n	800b718 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	60fb      	str	r3, [r7, #12]
}
 800b714:	bf00      	nop
 800b716:	e7fe      	b.n	800b716 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	3318      	adds	r3, #24
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe fb27 	bl	8009d70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b722:	4b1e      	ldr	r3, [pc, #120]	; (800b79c <xTaskRemoveFromEventList+0xb0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d11d      	bne.n	800b766 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	3304      	adds	r3, #4
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fb1e 	bl	8009d70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b738:	4b19      	ldr	r3, [pc, #100]	; (800b7a0 <xTaskRemoveFromEventList+0xb4>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d903      	bls.n	800b748 <xTaskRemoveFromEventList+0x5c>
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b744:	4a16      	ldr	r2, [pc, #88]	; (800b7a0 <xTaskRemoveFromEventList+0xb4>)
 800b746:	6013      	str	r3, [r2, #0]
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74c:	4613      	mov	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4a13      	ldr	r2, [pc, #76]	; (800b7a4 <xTaskRemoveFromEventList+0xb8>)
 800b756:	441a      	add	r2, r3
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	3304      	adds	r3, #4
 800b75c:	4619      	mov	r1, r3
 800b75e:	4610      	mov	r0, r2
 800b760:	f7fe faa9 	bl	8009cb6 <vListInsertEnd>
 800b764:	e005      	b.n	800b772 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	3318      	adds	r3, #24
 800b76a:	4619      	mov	r1, r3
 800b76c:	480e      	ldr	r0, [pc, #56]	; (800b7a8 <xTaskRemoveFromEventList+0xbc>)
 800b76e:	f7fe faa2 	bl	8009cb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b776:	4b0d      	ldr	r3, [pc, #52]	; (800b7ac <xTaskRemoveFromEventList+0xc0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d905      	bls.n	800b78c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b780:	2301      	movs	r3, #1
 800b782:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b784:	4b0a      	ldr	r3, [pc, #40]	; (800b7b0 <xTaskRemoveFromEventList+0xc4>)
 800b786:	2201      	movs	r2, #1
 800b788:	601a      	str	r2, [r3, #0]
 800b78a:	e001      	b.n	800b790 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b790:	697b      	ldr	r3, [r7, #20]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	20000de4 	.word	0x20000de4
 800b7a0:	20000dc4 	.word	0x20000dc4
 800b7a4:	200008ec 	.word	0x200008ec
 800b7a8:	20000d7c 	.word	0x20000d7c
 800b7ac:	200008e8 	.word	0x200008e8
 800b7b0:	20000dd0 	.word	0x20000dd0

0800b7b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7bc:	4b06      	ldr	r3, [pc, #24]	; (800b7d8 <vTaskInternalSetTimeOutState+0x24>)
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7c4:	4b05      	ldr	r3, [pc, #20]	; (800b7dc <vTaskInternalSetTimeOutState+0x28>)
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	605a      	str	r2, [r3, #4]
}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	20000dd4 	.word	0x20000dd4
 800b7dc:	20000dc0 	.word	0x20000dc0

0800b7e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10a      	bne.n	800b806 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	613b      	str	r3, [r7, #16]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10a      	bne.n	800b822 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	60fb      	str	r3, [r7, #12]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b822:	f001 f837 	bl	800c894 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b826:	4b1d      	ldr	r3, [pc, #116]	; (800b89c <xTaskCheckForTimeOut+0xbc>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	69ba      	ldr	r2, [r7, #24]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83e:	d102      	bne.n	800b846 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b840:	2300      	movs	r3, #0
 800b842:	61fb      	str	r3, [r7, #28]
 800b844:	e023      	b.n	800b88e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	4b15      	ldr	r3, [pc, #84]	; (800b8a0 <xTaskCheckForTimeOut+0xc0>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d007      	beq.n	800b862 <xTaskCheckForTimeOut+0x82>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	69ba      	ldr	r2, [r7, #24]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d302      	bcc.n	800b862 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b85c:	2301      	movs	r3, #1
 800b85e:	61fb      	str	r3, [r7, #28]
 800b860:	e015      	b.n	800b88e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d20b      	bcs.n	800b884 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	1ad2      	subs	r2, r2, r3
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff ff9b 	bl	800b7b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b87e:	2300      	movs	r3, #0
 800b880:	61fb      	str	r3, [r7, #28]
 800b882:	e004      	b.n	800b88e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	2200      	movs	r2, #0
 800b888:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b88a:	2301      	movs	r3, #1
 800b88c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b88e:	f001 f831 	bl	800c8f4 <vPortExitCritical>

	return xReturn;
 800b892:	69fb      	ldr	r3, [r7, #28]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3720      	adds	r7, #32
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20000dc0 	.word	0x20000dc0
 800b8a0:	20000dd4 	.word	0x20000dd4

0800b8a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8a8:	4b03      	ldr	r3, [pc, #12]	; (800b8b8 <vTaskMissedYield+0x14>)
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	601a      	str	r2, [r3, #0]
}
 800b8ae:	bf00      	nop
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	20000dd0 	.word	0x20000dd0

0800b8bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8c4:	f000 f852 	bl	800b96c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8c8:	4b06      	ldr	r3, [pc, #24]	; (800b8e4 <prvIdleTask+0x28>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d9f9      	bls.n	800b8c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8d0:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <prvIdleTask+0x2c>)
 800b8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8e0:	e7f0      	b.n	800b8c4 <prvIdleTask+0x8>
 800b8e2:	bf00      	nop
 800b8e4:	200008ec 	.word	0x200008ec
 800b8e8:	e000ed04 	.word	0xe000ed04

0800b8ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	607b      	str	r3, [r7, #4]
 800b8f6:	e00c      	b.n	800b912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4413      	add	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4a12      	ldr	r2, [pc, #72]	; (800b94c <prvInitialiseTaskLists+0x60>)
 800b904:	4413      	add	r3, r2
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe f9a8 	bl	8009c5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3301      	adds	r3, #1
 800b910:	607b      	str	r3, [r7, #4]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b37      	cmp	r3, #55	; 0x37
 800b916:	d9ef      	bls.n	800b8f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b918:	480d      	ldr	r0, [pc, #52]	; (800b950 <prvInitialiseTaskLists+0x64>)
 800b91a:	f7fe f99f 	bl	8009c5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b91e:	480d      	ldr	r0, [pc, #52]	; (800b954 <prvInitialiseTaskLists+0x68>)
 800b920:	f7fe f99c 	bl	8009c5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b924:	480c      	ldr	r0, [pc, #48]	; (800b958 <prvInitialiseTaskLists+0x6c>)
 800b926:	f7fe f999 	bl	8009c5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b92a:	480c      	ldr	r0, [pc, #48]	; (800b95c <prvInitialiseTaskLists+0x70>)
 800b92c:	f7fe f996 	bl	8009c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b930:	480b      	ldr	r0, [pc, #44]	; (800b960 <prvInitialiseTaskLists+0x74>)
 800b932:	f7fe f993 	bl	8009c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b936:	4b0b      	ldr	r3, [pc, #44]	; (800b964 <prvInitialiseTaskLists+0x78>)
 800b938:	4a05      	ldr	r2, [pc, #20]	; (800b950 <prvInitialiseTaskLists+0x64>)
 800b93a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b93c:	4b0a      	ldr	r3, [pc, #40]	; (800b968 <prvInitialiseTaskLists+0x7c>)
 800b93e:	4a05      	ldr	r2, [pc, #20]	; (800b954 <prvInitialiseTaskLists+0x68>)
 800b940:	601a      	str	r2, [r3, #0]
}
 800b942:	bf00      	nop
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	200008ec 	.word	0x200008ec
 800b950:	20000d4c 	.word	0x20000d4c
 800b954:	20000d60 	.word	0x20000d60
 800b958:	20000d7c 	.word	0x20000d7c
 800b95c:	20000d90 	.word	0x20000d90
 800b960:	20000da8 	.word	0x20000da8
 800b964:	20000d74 	.word	0x20000d74
 800b968:	20000d78 	.word	0x20000d78

0800b96c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b972:	e019      	b.n	800b9a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b974:	f000 ff8e 	bl	800c894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b978:	4b10      	ldr	r3, [pc, #64]	; (800b9bc <prvCheckTasksWaitingTermination+0x50>)
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	3304      	adds	r3, #4
 800b984:	4618      	mov	r0, r3
 800b986:	f7fe f9f3 	bl	8009d70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b98a:	4b0d      	ldr	r3, [pc, #52]	; (800b9c0 <prvCheckTasksWaitingTermination+0x54>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	3b01      	subs	r3, #1
 800b990:	4a0b      	ldr	r2, [pc, #44]	; (800b9c0 <prvCheckTasksWaitingTermination+0x54>)
 800b992:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b994:	4b0b      	ldr	r3, [pc, #44]	; (800b9c4 <prvCheckTasksWaitingTermination+0x58>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3b01      	subs	r3, #1
 800b99a:	4a0a      	ldr	r2, [pc, #40]	; (800b9c4 <prvCheckTasksWaitingTermination+0x58>)
 800b99c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b99e:	f000 ffa9 	bl	800c8f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f810 	bl	800b9c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9a8:	4b06      	ldr	r3, [pc, #24]	; (800b9c4 <prvCheckTasksWaitingTermination+0x58>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1e1      	bne.n	800b974 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9b0:	bf00      	nop
 800b9b2:	bf00      	nop
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20000d90 	.word	0x20000d90
 800b9c0:	20000dbc 	.word	0x20000dbc
 800b9c4:	20000da4 	.word	0x20000da4

0800b9c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3354      	adds	r3, #84	; 0x54
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f002 fca3 	bl	800e320 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d108      	bne.n	800b9f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 f941 	bl	800cc70 <vPortFree>
				vPortFree( pxTCB );
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f001 f93e 	bl	800cc70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9f4:	e018      	b.n	800ba28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d103      	bne.n	800ba08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f001 f935 	bl	800cc70 <vPortFree>
	}
 800ba06:	e00f      	b.n	800ba28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d00a      	beq.n	800ba28 <prvDeleteTCB+0x60>
	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	60fb      	str	r3, [r7, #12]
}
 800ba24:	bf00      	nop
 800ba26:	e7fe      	b.n	800ba26 <prvDeleteTCB+0x5e>
	}
 800ba28:	bf00      	nop
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba36:	4b0c      	ldr	r3, [pc, #48]	; (800ba68 <prvResetNextTaskUnblockTime+0x38>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d104      	bne.n	800ba4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba40:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <prvResetNextTaskUnblockTime+0x3c>)
 800ba42:	f04f 32ff 	mov.w	r2, #4294967295
 800ba46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba48:	e008      	b.n	800ba5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba4a:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <prvResetNextTaskUnblockTime+0x38>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	4a04      	ldr	r2, [pc, #16]	; (800ba6c <prvResetNextTaskUnblockTime+0x3c>)
 800ba5a:	6013      	str	r3, [r2, #0]
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	20000d74 	.word	0x20000d74
 800ba6c:	20000ddc 	.word	0x20000ddc

0800ba70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba76:	4b0b      	ldr	r3, [pc, #44]	; (800baa4 <xTaskGetSchedulerState+0x34>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d102      	bne.n	800ba84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	607b      	str	r3, [r7, #4]
 800ba82:	e008      	b.n	800ba96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba84:	4b08      	ldr	r3, [pc, #32]	; (800baa8 <xTaskGetSchedulerState+0x38>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d102      	bne.n	800ba92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	607b      	str	r3, [r7, #4]
 800ba90:	e001      	b.n	800ba96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba92:	2300      	movs	r3, #0
 800ba94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba96:	687b      	ldr	r3, [r7, #4]
	}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr
 800baa4:	20000dc8 	.word	0x20000dc8
 800baa8:	20000de4 	.word	0x20000de4

0800baac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bab8:	2300      	movs	r3, #0
 800baba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d051      	beq.n	800bb66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac6:	4b2a      	ldr	r3, [pc, #168]	; (800bb70 <xTaskPriorityInherit+0xc4>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bacc:	429a      	cmp	r2, r3
 800bace:	d241      	bcs.n	800bb54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	db06      	blt.n	800bae6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bad8:	4b25      	ldr	r3, [pc, #148]	; (800bb70 <xTaskPriorityInherit+0xc4>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	6959      	ldr	r1, [r3, #20]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	4613      	mov	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4413      	add	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4a1f      	ldr	r2, [pc, #124]	; (800bb74 <xTaskPriorityInherit+0xc8>)
 800baf8:	4413      	add	r3, r2
 800bafa:	4299      	cmp	r1, r3
 800bafc:	d122      	bne.n	800bb44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe f934 	bl	8009d70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb08:	4b19      	ldr	r3, [pc, #100]	; (800bb70 <xTaskPriorityInherit+0xc4>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb16:	4b18      	ldr	r3, [pc, #96]	; (800bb78 <xTaskPriorityInherit+0xcc>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d903      	bls.n	800bb26 <xTaskPriorityInherit+0x7a>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	4a15      	ldr	r2, [pc, #84]	; (800bb78 <xTaskPriorityInherit+0xcc>)
 800bb24:	6013      	str	r3, [r2, #0]
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4413      	add	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	4a10      	ldr	r2, [pc, #64]	; (800bb74 <xTaskPriorityInherit+0xc8>)
 800bb34:	441a      	add	r2, r3
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	f7fe f8ba 	bl	8009cb6 <vListInsertEnd>
 800bb42:	e004      	b.n	800bb4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb44:	4b0a      	ldr	r3, [pc, #40]	; (800bb70 <xTaskPriorityInherit+0xc4>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	e008      	b.n	800bb66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <xTaskPriorityInherit+0xc4>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d201      	bcs.n	800bb66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb62:	2301      	movs	r3, #1
 800bb64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb66:	68fb      	ldr	r3, [r7, #12]
	}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	200008e8 	.word	0x200008e8
 800bb74:	200008ec 	.word	0x200008ec
 800bb78:	20000dc4 	.word	0x20000dc4

0800bb7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d056      	beq.n	800bc40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb92:	4b2e      	ldr	r3, [pc, #184]	; (800bc4c <xTaskPriorityDisinherit+0xd0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d00a      	beq.n	800bbb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	60fb      	str	r3, [r7, #12]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10a      	bne.n	800bbd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	60bb      	str	r3, [r7, #8]
}
 800bbcc:	bf00      	nop
 800bbce:	e7fe      	b.n	800bbce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd4:	1e5a      	subs	r2, r3, #1
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d02c      	beq.n	800bc40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d128      	bne.n	800bc40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe f8bc 	bl	8009d70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <xTaskPriorityDisinherit+0xd4>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d903      	bls.n	800bc20 <xTaskPriorityDisinherit+0xa4>
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1c:	4a0c      	ldr	r2, [pc, #48]	; (800bc50 <xTaskPriorityDisinherit+0xd4>)
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc24:	4613      	mov	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4a09      	ldr	r2, [pc, #36]	; (800bc54 <xTaskPriorityDisinherit+0xd8>)
 800bc2e:	441a      	add	r2, r3
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f7fe f83d 	bl	8009cb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc40:	697b      	ldr	r3, [r7, #20]
	}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	200008e8 	.word	0x200008e8
 800bc50:	20000dc4 	.word	0x20000dc4
 800bc54:	200008ec 	.word	0x200008ec

0800bc58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc66:	2301      	movs	r3, #1
 800bc68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d06a      	beq.n	800bd46 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	60fb      	str	r3, [r7, #12]
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d902      	bls.n	800bc9e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	61fb      	str	r3, [r7, #28]
 800bc9c:	e002      	b.n	800bca4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bca2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca8:	69fa      	ldr	r2, [r7, #28]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d04b      	beq.n	800bd46 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d146      	bne.n	800bd46 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bcb8:	4b25      	ldr	r3, [pc, #148]	; (800bd50 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	69ba      	ldr	r2, [r7, #24]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d10a      	bne.n	800bcd8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	60bb      	str	r3, [r7, #8]
}
 800bcd4:	bf00      	nop
 800bcd6:	e7fe      	b.n	800bcd6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	69fa      	ldr	r2, [r7, #28]
 800bce2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	db04      	blt.n	800bcf6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	6959      	ldr	r1, [r3, #20]
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4413      	add	r3, r2
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4a13      	ldr	r2, [pc, #76]	; (800bd54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd06:	4413      	add	r3, r2
 800bd08:	4299      	cmp	r1, r3
 800bd0a:	d11c      	bne.n	800bd46 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	3304      	adds	r3, #4
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fe f82d 	bl	8009d70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1a:	4b0f      	ldr	r3, [pc, #60]	; (800bd58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d903      	bls.n	800bd2a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd26:	4a0c      	ldr	r2, [pc, #48]	; (800bd58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd28:	6013      	str	r3, [r2, #0]
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4a07      	ldr	r2, [pc, #28]	; (800bd54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd38:	441a      	add	r2, r3
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	4619      	mov	r1, r3
 800bd40:	4610      	mov	r0, r2
 800bd42:	f7fd ffb8 	bl	8009cb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd46:	bf00      	nop
 800bd48:	3720      	adds	r7, #32
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	200008e8 	.word	0x200008e8
 800bd54:	200008ec 	.word	0x200008ec
 800bd58:	20000dc4 	.word	0x20000dc4

0800bd5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bd5c:	b480      	push	{r7}
 800bd5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd60:	4b07      	ldr	r3, [pc, #28]	; (800bd80 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd68:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd6e:	3201      	adds	r2, #1
 800bd70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bd72:	4b03      	ldr	r3, [pc, #12]	; (800bd80 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd74:	681b      	ldr	r3, [r3, #0]
	}
 800bd76:	4618      	mov	r0, r3
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	200008e8 	.word	0x200008e8

0800bd84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd8e:	4b21      	ldr	r3, [pc, #132]	; (800be14 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd94:	4b20      	ldr	r3, [pc, #128]	; (800be18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fd ffe8 	bl	8009d70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda6:	d10a      	bne.n	800bdbe <prvAddCurrentTaskToDelayedList+0x3a>
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d007      	beq.n	800bdbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdae:	4b1a      	ldr	r3, [pc, #104]	; (800be18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4819      	ldr	r0, [pc, #100]	; (800be1c <prvAddCurrentTaskToDelayedList+0x98>)
 800bdb8:	f7fd ff7d 	bl	8009cb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdbc:	e026      	b.n	800be0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdc6:	4b14      	ldr	r3, [pc, #80]	; (800be18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d209      	bcs.n	800bdea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdd6:	4b12      	ldr	r3, [pc, #72]	; (800be20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	4b0f      	ldr	r3, [pc, #60]	; (800be18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	3304      	adds	r3, #4
 800bde0:	4619      	mov	r1, r3
 800bde2:	4610      	mov	r0, r2
 800bde4:	f7fd ff8b 	bl	8009cfe <vListInsert>
}
 800bde8:	e010      	b.n	800be0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdea:	4b0e      	ldr	r3, [pc, #56]	; (800be24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	f7fd ff81 	bl	8009cfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bdfc:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	429a      	cmp	r2, r3
 800be04:	d202      	bcs.n	800be0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be06:	4a08      	ldr	r2, [pc, #32]	; (800be28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	6013      	str	r3, [r2, #0]
}
 800be0c:	bf00      	nop
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	20000dc0 	.word	0x20000dc0
 800be18:	200008e8 	.word	0x200008e8
 800be1c:	20000da8 	.word	0x20000da8
 800be20:	20000d78 	.word	0x20000d78
 800be24:	20000d74 	.word	0x20000d74
 800be28:	20000ddc 	.word	0x20000ddc

0800be2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08a      	sub	sp, #40	; 0x28
 800be30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be32:	2300      	movs	r3, #0
 800be34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be36:	f000 fba1 	bl	800c57c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be3a:	4b1c      	ldr	r3, [pc, #112]	; (800beac <xTimerCreateTimerTask+0x80>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d021      	beq.n	800be86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be46:	2300      	movs	r3, #0
 800be48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be4a:	1d3a      	adds	r2, r7, #4
 800be4c:	f107 0108 	add.w	r1, r7, #8
 800be50:	f107 030c 	add.w	r3, r7, #12
 800be54:	4618      	mov	r0, r3
 800be56:	f7fd fee7 	bl	8009c28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be5a:	6879      	ldr	r1, [r7, #4]
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	9202      	str	r2, [sp, #8]
 800be62:	9301      	str	r3, [sp, #4]
 800be64:	2302      	movs	r3, #2
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	2300      	movs	r3, #0
 800be6a:	460a      	mov	r2, r1
 800be6c:	4910      	ldr	r1, [pc, #64]	; (800beb0 <xTimerCreateTimerTask+0x84>)
 800be6e:	4811      	ldr	r0, [pc, #68]	; (800beb4 <xTimerCreateTimerTask+0x88>)
 800be70:	f7fe ffb6 	bl	800ade0 <xTaskCreateStatic>
 800be74:	4603      	mov	r3, r0
 800be76:	4a10      	ldr	r2, [pc, #64]	; (800beb8 <xTimerCreateTimerTask+0x8c>)
 800be78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be7a:	4b0f      	ldr	r3, [pc, #60]	; (800beb8 <xTimerCreateTimerTask+0x8c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be82:	2301      	movs	r3, #1
 800be84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10a      	bne.n	800bea2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800be8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	613b      	str	r3, [r7, #16]
}
 800be9e:	bf00      	nop
 800bea0:	e7fe      	b.n	800bea0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bea2:	697b      	ldr	r3, [r7, #20]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3718      	adds	r7, #24
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20000e18 	.word	0x20000e18
 800beb0:	0800e944 	.word	0x0800e944
 800beb4:	0800c125 	.word	0x0800c125
 800beb8:	20000e1c 	.word	0x20000e1c

0800bebc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800beca:	202c      	movs	r0, #44	; 0x2c
 800becc:	f000 fe04 	bl	800cad8 <pvPortMalloc>
 800bed0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00d      	beq.n	800bef4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	68b9      	ldr	r1, [r7, #8]
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 f843 	bl	800bf7a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800bef4:	697b      	ldr	r3, [r7, #20]
	}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b08a      	sub	sp, #40	; 0x28
 800bf02:	af02      	add	r7, sp, #8
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800bf0c:	232c      	movs	r3, #44	; 0x2c
 800bf0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	2b2c      	cmp	r3, #44	; 0x2c
 800bf14:	d00a      	beq.n	800bf2c <xTimerCreateStatic+0x2e>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	61bb      	str	r3, [r7, #24]
}
 800bf28:	bf00      	nop
 800bf2a:	e7fe      	b.n	800bf2a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10a      	bne.n	800bf4a <xTimerCreateStatic+0x4c>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	617b      	str	r3, [r7, #20]
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00d      	beq.n	800bf70 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	2202      	movs	r2, #2
 800bf58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	9301      	str	r3, [sp, #4]
 800bf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	68b9      	ldr	r1, [r7, #8]
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 f805 	bl	800bf7a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800bf70:	69fb      	ldr	r3, [r7, #28]
	}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3720      	adds	r7, #32
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b086      	sub	sp, #24
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	60f8      	str	r0, [r7, #12]
 800bf82:	60b9      	str	r1, [r7, #8]
 800bf84:	607a      	str	r2, [r7, #4]
 800bf86:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10a      	bne.n	800bfa4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	617b      	str	r3, [r7, #20]
}
 800bfa0:	bf00      	nop
 800bfa2:	e7fe      	b.n	800bfa2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d01e      	beq.n	800bfe8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800bfaa:	f000 fae7 	bl	800c57c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	6a3a      	ldr	r2, [r7, #32]
 800bfc4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fd fe66 	bl	8009c9c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d008      	beq.n	800bfe8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfdc:	f043 0304 	orr.w	r3, r3, #4
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800bfe8:	bf00      	nop
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08a      	sub	sp, #40	; 0x28
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bffe:	2300      	movs	r3, #0
 800c000:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10a      	bne.n	800c01e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	623b      	str	r3, [r7, #32]
}
 800c01a:	bf00      	nop
 800c01c:	e7fe      	b.n	800c01c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c01e:	4b1a      	ldr	r3, [pc, #104]	; (800c088 <xTimerGenericCommand+0x98>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d02a      	beq.n	800c07c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	2b05      	cmp	r3, #5
 800c036:	dc18      	bgt.n	800c06a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c038:	f7ff fd1a 	bl	800ba70 <xTaskGetSchedulerState>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d109      	bne.n	800c056 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c042:	4b11      	ldr	r3, [pc, #68]	; (800c088 <xTimerGenericCommand+0x98>)
 800c044:	6818      	ldr	r0, [r3, #0]
 800c046:	f107 0110 	add.w	r1, r7, #16
 800c04a:	2300      	movs	r3, #0
 800c04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c04e:	f7fe f861 	bl	800a114 <xQueueGenericSend>
 800c052:	6278      	str	r0, [r7, #36]	; 0x24
 800c054:	e012      	b.n	800c07c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c056:	4b0c      	ldr	r3, [pc, #48]	; (800c088 <xTimerGenericCommand+0x98>)
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	f107 0110 	add.w	r1, r7, #16
 800c05e:	2300      	movs	r3, #0
 800c060:	2200      	movs	r2, #0
 800c062:	f7fe f857 	bl	800a114 <xQueueGenericSend>
 800c066:	6278      	str	r0, [r7, #36]	; 0x24
 800c068:	e008      	b.n	800c07c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c06a:	4b07      	ldr	r3, [pc, #28]	; (800c088 <xTimerGenericCommand+0x98>)
 800c06c:	6818      	ldr	r0, [r3, #0]
 800c06e:	f107 0110 	add.w	r1, r7, #16
 800c072:	2300      	movs	r3, #0
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	f7fe f94b 	bl	800a310 <xQueueGenericSendFromISR>
 800c07a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3728      	adds	r7, #40	; 0x28
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20000e18 	.word	0x20000e18

0800c08c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b088      	sub	sp, #32
 800c090:	af02      	add	r7, sp, #8
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c096:	4b22      	ldr	r3, [pc, #136]	; (800c120 <prvProcessExpiredTimer+0x94>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fd fe63 	bl	8009d70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0b0:	f003 0304 	and.w	r3, r3, #4
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d022      	beq.n	800c0fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	699a      	ldr	r2, [r3, #24]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	18d1      	adds	r1, r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	6978      	ldr	r0, [r7, #20]
 800c0c6:	f000 f8d1 	bl	800c26c <prvInsertTimerInActiveList>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d01f      	beq.n	800c110 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	2100      	movs	r1, #0
 800c0da:	6978      	ldr	r0, [r7, #20]
 800c0dc:	f7ff ff88 	bl	800bff0 <xTimerGenericCommand>
 800c0e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d113      	bne.n	800c110 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ec:	f383 8811 	msr	BASEPRI, r3
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	60fb      	str	r3, [r7, #12]
}
 800c0fa:	bf00      	nop
 800c0fc:	e7fe      	b.n	800c0fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c104:	f023 0301 	bic.w	r3, r3, #1
 800c108:	b2da      	uxtb	r2, r3
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	6978      	ldr	r0, [r7, #20]
 800c116:	4798      	blx	r3
}
 800c118:	bf00      	nop
 800c11a:	3718      	adds	r7, #24
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	20000e10 	.word	0x20000e10

0800c124 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c12c:	f107 0308 	add.w	r3, r7, #8
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f857 	bl	800c1e4 <prvGetNextExpireTime>
 800c136:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4619      	mov	r1, r3
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 f803 	bl	800c148 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c142:	f000 f8d5 	bl	800c2f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c146:	e7f1      	b.n	800c12c <prvTimerTask+0x8>

0800c148 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c152:	f7ff f8a1 	bl	800b298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c156:	f107 0308 	add.w	r3, r7, #8
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 f866 	bl	800c22c <prvSampleTimeNow>
 800c160:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d130      	bne.n	800c1ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10a      	bne.n	800c184 <prvProcessTimerOrBlockTask+0x3c>
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	429a      	cmp	r2, r3
 800c174:	d806      	bhi.n	800c184 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c176:	f7ff f89d 	bl	800b2b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c17a:	68f9      	ldr	r1, [r7, #12]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7ff ff85 	bl	800c08c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c182:	e024      	b.n	800c1ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d008      	beq.n	800c19c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c18a:	4b13      	ldr	r3, [pc, #76]	; (800c1d8 <prvProcessTimerOrBlockTask+0x90>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <prvProcessTimerOrBlockTask+0x50>
 800c194:	2301      	movs	r3, #1
 800c196:	e000      	b.n	800c19a <prvProcessTimerOrBlockTask+0x52>
 800c198:	2300      	movs	r3, #0
 800c19a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c19c:	4b0f      	ldr	r3, [pc, #60]	; (800c1dc <prvProcessTimerOrBlockTask+0x94>)
 800c19e:	6818      	ldr	r0, [r3, #0]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f7fe fde5 	bl	800ad78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1ae:	f7ff f881 	bl	800b2b4 <xTaskResumeAll>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10a      	bne.n	800c1ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1b8:	4b09      	ldr	r3, [pc, #36]	; (800c1e0 <prvProcessTimerOrBlockTask+0x98>)
 800c1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1be:	601a      	str	r2, [r3, #0]
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	f3bf 8f6f 	isb	sy
}
 800c1c8:	e001      	b.n	800c1ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1ca:	f7ff f873 	bl	800b2b4 <xTaskResumeAll>
}
 800c1ce:	bf00      	nop
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20000e14 	.word	0x20000e14
 800c1dc:	20000e18 	.word	0x20000e18
 800c1e0:	e000ed04 	.word	0xe000ed04

0800c1e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1ec:	4b0e      	ldr	r3, [pc, #56]	; (800c228 <prvGetNextExpireTime+0x44>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <prvGetNextExpireTime+0x16>
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	e000      	b.n	800c1fc <prvGetNextExpireTime+0x18>
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d105      	bne.n	800c214 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c208:	4b07      	ldr	r3, [pc, #28]	; (800c228 <prvGetNextExpireTime+0x44>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	60fb      	str	r3, [r7, #12]
 800c212:	e001      	b.n	800c218 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c214:	2300      	movs	r3, #0
 800c216:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c218:	68fb      	ldr	r3, [r7, #12]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	20000e10 	.word	0x20000e10

0800c22c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c234:	f7ff f8dc 	bl	800b3f0 <xTaskGetTickCount>
 800c238:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c23a:	4b0b      	ldr	r3, [pc, #44]	; (800c268 <prvSampleTimeNow+0x3c>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	429a      	cmp	r2, r3
 800c242:	d205      	bcs.n	800c250 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c244:	f000 f936 	bl	800c4b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	e002      	b.n	800c256 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c256:	4a04      	ldr	r2, [pc, #16]	; (800c268 <prvSampleTimeNow+0x3c>)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c25c:	68fb      	ldr	r3, [r7, #12]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20000e20 	.word	0x20000e20

0800c26c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
 800c278:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c27a:	2300      	movs	r3, #0
 800c27c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d812      	bhi.n	800c2b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	1ad2      	subs	r2, r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d302      	bcc.n	800c2a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	617b      	str	r3, [r7, #20]
 800c2a4:	e01b      	b.n	800c2de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2a6:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <prvInsertTimerInActiveList+0x7c>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	f7fd fd24 	bl	8009cfe <vListInsert>
 800c2b6:	e012      	b.n	800c2de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d206      	bcs.n	800c2ce <prvInsertTimerInActiveList+0x62>
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d302      	bcc.n	800c2ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	617b      	str	r3, [r7, #20]
 800c2cc:	e007      	b.n	800c2de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2ce:	4b07      	ldr	r3, [pc, #28]	; (800c2ec <prvInsertTimerInActiveList+0x80>)
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	4610      	mov	r0, r2
 800c2da:	f7fd fd10 	bl	8009cfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2de:	697b      	ldr	r3, [r7, #20]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3718      	adds	r7, #24
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	20000e14 	.word	0x20000e14
 800c2ec:	20000e10 	.word	0x20000e10

0800c2f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b08e      	sub	sp, #56	; 0x38
 800c2f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2f6:	e0ca      	b.n	800c48e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	da18      	bge.n	800c330 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2fe:	1d3b      	adds	r3, r7, #4
 800c300:	3304      	adds	r3, #4
 800c302:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10a      	bne.n	800c320 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	61fb      	str	r3, [r7, #28]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c326:	6850      	ldr	r0, [r2, #4]
 800c328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c32a:	6892      	ldr	r2, [r2, #8]
 800c32c:	4611      	mov	r1, r2
 800c32e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	f2c0 80aa 	blt.w	800c48c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d004      	beq.n	800c34e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	3304      	adds	r3, #4
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fd fd11 	bl	8009d70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c34e:	463b      	mov	r3, r7
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff ff6b 	bl	800c22c <prvSampleTimeNow>
 800c356:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b09      	cmp	r3, #9
 800c35c:	f200 8097 	bhi.w	800c48e <prvProcessReceivedCommands+0x19e>
 800c360:	a201      	add	r2, pc, #4	; (adr r2, 800c368 <prvProcessReceivedCommands+0x78>)
 800c362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c366:	bf00      	nop
 800c368:	0800c391 	.word	0x0800c391
 800c36c:	0800c391 	.word	0x0800c391
 800c370:	0800c391 	.word	0x0800c391
 800c374:	0800c405 	.word	0x0800c405
 800c378:	0800c419 	.word	0x0800c419
 800c37c:	0800c463 	.word	0x0800c463
 800c380:	0800c391 	.word	0x0800c391
 800c384:	0800c391 	.word	0x0800c391
 800c388:	0800c405 	.word	0x0800c405
 800c38c:	0800c419 	.word	0x0800c419
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c396:	f043 0301 	orr.w	r3, r3, #1
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a6:	699b      	ldr	r3, [r3, #24]
 800c3a8:	18d1      	adds	r1, r2, r3
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3b0:	f7ff ff5c 	bl	800c26c <prvInsertTimerInActiveList>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d069      	beq.n	800c48e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c8:	f003 0304 	and.w	r3, r3, #4
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d05e      	beq.n	800c48e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	441a      	add	r2, r3
 800c3d8:	2300      	movs	r3, #0
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	2300      	movs	r3, #0
 800c3de:	2100      	movs	r1, #0
 800c3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3e2:	f7ff fe05 	bl	800bff0 <xTimerGenericCommand>
 800c3e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d14f      	bne.n	800c48e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	61bb      	str	r3, [r7, #24]
}
 800c400:	bf00      	nop
 800c402:	e7fe      	b.n	800c402 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c40a:	f023 0301 	bic.w	r3, r3, #1
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c416:	e03a      	b.n	800c48e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c41e:	f043 0301 	orr.w	r3, r3, #1
 800c422:	b2da      	uxtb	r2, r3
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10a      	bne.n	800c44e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	617b      	str	r3, [r7, #20]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c450:	699a      	ldr	r2, [r3, #24]
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	18d1      	adds	r1, r2, r3
 800c456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c45c:	f7ff ff06 	bl	800c26c <prvInsertTimerInActiveList>
					break;
 800c460:	e015      	b.n	800c48e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c468:	f003 0302 	and.w	r3, r3, #2
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d103      	bne.n	800c478 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c472:	f000 fbfd 	bl	800cc70 <vPortFree>
 800c476:	e00a      	b.n	800c48e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c47e:	f023 0301 	bic.w	r3, r3, #1
 800c482:	b2da      	uxtb	r2, r3
 800c484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c48a:	e000      	b.n	800c48e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c48c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c48e:	4b08      	ldr	r3, [pc, #32]	; (800c4b0 <prvProcessReceivedCommands+0x1c0>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	1d39      	adds	r1, r7, #4
 800c494:	2200      	movs	r2, #0
 800c496:	4618      	mov	r0, r3
 800c498:	f7fe f862 	bl	800a560 <xQueueReceive>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f47f af2a 	bne.w	800c2f8 <prvProcessReceivedCommands+0x8>
	}
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop
 800c4a8:	3730      	adds	r7, #48	; 0x30
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20000e18 	.word	0x20000e18

0800c4b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b088      	sub	sp, #32
 800c4b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4ba:	e048      	b.n	800c54e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4bc:	4b2d      	ldr	r3, [pc, #180]	; (800c574 <prvSwitchTimerLists+0xc0>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c6:	4b2b      	ldr	r3, [pc, #172]	; (800c574 <prvSwitchTimerLists+0xc0>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fd fc4b 	bl	8009d70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4e8:	f003 0304 	and.w	r3, r3, #4
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d02e      	beq.n	800c54e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	699b      	ldr	r3, [r3, #24]
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d90e      	bls.n	800c520 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c50e:	4b19      	ldr	r3, [pc, #100]	; (800c574 <prvSwitchTimerLists+0xc0>)
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	3304      	adds	r3, #4
 800c516:	4619      	mov	r1, r3
 800c518:	4610      	mov	r0, r2
 800c51a:	f7fd fbf0 	bl	8009cfe <vListInsert>
 800c51e:	e016      	b.n	800c54e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c520:	2300      	movs	r3, #0
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	2300      	movs	r3, #0
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	2100      	movs	r1, #0
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f7ff fd60 	bl	800bff0 <xTimerGenericCommand>
 800c530:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10a      	bne.n	800c54e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	603b      	str	r3, [r7, #0]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c54e:	4b09      	ldr	r3, [pc, #36]	; (800c574 <prvSwitchTimerLists+0xc0>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1b1      	bne.n	800c4bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c558:	4b06      	ldr	r3, [pc, #24]	; (800c574 <prvSwitchTimerLists+0xc0>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c55e:	4b06      	ldr	r3, [pc, #24]	; (800c578 <prvSwitchTimerLists+0xc4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a04      	ldr	r2, [pc, #16]	; (800c574 <prvSwitchTimerLists+0xc0>)
 800c564:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c566:	4a04      	ldr	r2, [pc, #16]	; (800c578 <prvSwitchTimerLists+0xc4>)
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	6013      	str	r3, [r2, #0]
}
 800c56c:	bf00      	nop
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20000e10 	.word	0x20000e10
 800c578:	20000e14 	.word	0x20000e14

0800c57c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c582:	f000 f987 	bl	800c894 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c586:	4b15      	ldr	r3, [pc, #84]	; (800c5dc <prvCheckForValidListAndQueue+0x60>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d120      	bne.n	800c5d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c58e:	4814      	ldr	r0, [pc, #80]	; (800c5e0 <prvCheckForValidListAndQueue+0x64>)
 800c590:	f7fd fb64 	bl	8009c5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c594:	4813      	ldr	r0, [pc, #76]	; (800c5e4 <prvCheckForValidListAndQueue+0x68>)
 800c596:	f7fd fb61 	bl	8009c5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c59a:	4b13      	ldr	r3, [pc, #76]	; (800c5e8 <prvCheckForValidListAndQueue+0x6c>)
 800c59c:	4a10      	ldr	r2, [pc, #64]	; (800c5e0 <prvCheckForValidListAndQueue+0x64>)
 800c59e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5a0:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <prvCheckForValidListAndQueue+0x70>)
 800c5a2:	4a10      	ldr	r2, [pc, #64]	; (800c5e4 <prvCheckForValidListAndQueue+0x68>)
 800c5a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	4b11      	ldr	r3, [pc, #68]	; (800c5f0 <prvCheckForValidListAndQueue+0x74>)
 800c5ac:	4a11      	ldr	r2, [pc, #68]	; (800c5f4 <prvCheckForValidListAndQueue+0x78>)
 800c5ae:	2110      	movs	r1, #16
 800c5b0:	200a      	movs	r0, #10
 800c5b2:	f7fd fc6f 	bl	8009e94 <xQueueGenericCreateStatic>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	4a08      	ldr	r2, [pc, #32]	; (800c5dc <prvCheckForValidListAndQueue+0x60>)
 800c5ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5bc:	4b07      	ldr	r3, [pc, #28]	; (800c5dc <prvCheckForValidListAndQueue+0x60>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d005      	beq.n	800c5d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5c4:	4b05      	ldr	r3, [pc, #20]	; (800c5dc <prvCheckForValidListAndQueue+0x60>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	490b      	ldr	r1, [pc, #44]	; (800c5f8 <prvCheckForValidListAndQueue+0x7c>)
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe fb80 	bl	800acd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5d0:	f000 f990 	bl	800c8f4 <vPortExitCritical>
}
 800c5d4:	bf00      	nop
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20000e18 	.word	0x20000e18
 800c5e0:	20000de8 	.word	0x20000de8
 800c5e4:	20000dfc 	.word	0x20000dfc
 800c5e8:	20000e10 	.word	0x20000e10
 800c5ec:	20000e14 	.word	0x20000e14
 800c5f0:	20000ec4 	.word	0x20000ec4
 800c5f4:	20000e24 	.word	0x20000e24
 800c5f8:	0800e94c 	.word	0x0800e94c

0800c5fc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <pvTimerGetTimerID+0x28>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	60fb      	str	r3, [r7, #12]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800c624:	f000 f936 	bl	800c894 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	69db      	ldr	r3, [r3, #28]
 800c62c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c62e:	f000 f961 	bl	800c8f4 <vPortExitCritical>

	return pvReturn;
 800c632:	693b      	ldr	r3, [r7, #16]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	3b04      	subs	r3, #4
 800c64c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	3b04      	subs	r3, #4
 800c65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f023 0201 	bic.w	r2, r3, #1
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3b04      	subs	r3, #4
 800c66a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c66c:	4a0c      	ldr	r2, [pc, #48]	; (800c6a0 <pxPortInitialiseStack+0x64>)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	3b14      	subs	r3, #20
 800c676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	3b04      	subs	r3, #4
 800c682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f06f 0202 	mvn.w	r2, #2
 800c68a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	3b20      	subs	r3, #32
 800c690:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c692:	68fb      	ldr	r3, [r7, #12]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	0800c6a5 	.word	0x0800c6a5

0800c6a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6ae:	4b12      	ldr	r3, [pc, #72]	; (800c6f8 <prvTaskExitError+0x54>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b6:	d00a      	beq.n	800c6ce <prvTaskExitError+0x2a>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	60fb      	str	r3, [r7, #12]
}
 800c6ca:	bf00      	nop
 800c6cc:	e7fe      	b.n	800c6cc <prvTaskExitError+0x28>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	60bb      	str	r3, [r7, #8]
}
 800c6e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6e2:	bf00      	nop
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d0fc      	beq.n	800c6e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	3714      	adds	r7, #20
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	200000e0 	.word	0x200000e0
 800c6fc:	00000000 	.word	0x00000000

0800c700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <pxCurrentTCBConst2>)
 800c702:	6819      	ldr	r1, [r3, #0]
 800c704:	6808      	ldr	r0, [r1, #0]
 800c706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70a:	f380 8809 	msr	PSP, r0
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f04f 0000 	mov.w	r0, #0
 800c716:	f380 8811 	msr	BASEPRI, r0
 800c71a:	4770      	bx	lr
 800c71c:	f3af 8000 	nop.w

0800c720 <pxCurrentTCBConst2>:
 800c720:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop

0800c728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c728:	4808      	ldr	r0, [pc, #32]	; (800c74c <prvPortStartFirstTask+0x24>)
 800c72a:	6800      	ldr	r0, [r0, #0]
 800c72c:	6800      	ldr	r0, [r0, #0]
 800c72e:	f380 8808 	msr	MSP, r0
 800c732:	f04f 0000 	mov.w	r0, #0
 800c736:	f380 8814 	msr	CONTROL, r0
 800c73a:	b662      	cpsie	i
 800c73c:	b661      	cpsie	f
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	df00      	svc	0
 800c748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c74a:	bf00      	nop
 800c74c:	e000ed08 	.word	0xe000ed08

0800c750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c756:	4b46      	ldr	r3, [pc, #280]	; (800c870 <xPortStartScheduler+0x120>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a46      	ldr	r2, [pc, #280]	; (800c874 <xPortStartScheduler+0x124>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d10a      	bne.n	800c776 <xPortStartScheduler+0x26>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	613b      	str	r3, [r7, #16]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c776:	4b3e      	ldr	r3, [pc, #248]	; (800c870 <xPortStartScheduler+0x120>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a3f      	ldr	r2, [pc, #252]	; (800c878 <xPortStartScheduler+0x128>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d10a      	bne.n	800c796 <xPortStartScheduler+0x46>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c784:	f383 8811 	msr	BASEPRI, r3
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	60fb      	str	r3, [r7, #12]
}
 800c792:	bf00      	nop
 800c794:	e7fe      	b.n	800c794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c796:	4b39      	ldr	r3, [pc, #228]	; (800c87c <xPortStartScheduler+0x12c>)
 800c798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	22ff      	movs	r2, #255	; 0xff
 800c7a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c7b0:	78fb      	ldrb	r3, [r7, #3]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	4b31      	ldr	r3, [pc, #196]	; (800c880 <xPortStartScheduler+0x130>)
 800c7bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7be:	4b31      	ldr	r3, [pc, #196]	; (800c884 <xPortStartScheduler+0x134>)
 800c7c0:	2207      	movs	r2, #7
 800c7c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7c4:	e009      	b.n	800c7da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c7c6:	4b2f      	ldr	r3, [pc, #188]	; (800c884 <xPortStartScheduler+0x134>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	4a2d      	ldr	r2, [pc, #180]	; (800c884 <xPortStartScheduler+0x134>)
 800c7ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7d0:	78fb      	ldrb	r3, [r7, #3]
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7da:	78fb      	ldrb	r3, [r7, #3]
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e2:	2b80      	cmp	r3, #128	; 0x80
 800c7e4:	d0ef      	beq.n	800c7c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7e6:	4b27      	ldr	r3, [pc, #156]	; (800c884 <xPortStartScheduler+0x134>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f1c3 0307 	rsb	r3, r3, #7
 800c7ee:	2b04      	cmp	r3, #4
 800c7f0:	d00a      	beq.n	800c808 <xPortStartScheduler+0xb8>
	__asm volatile
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	60bb      	str	r3, [r7, #8]
}
 800c804:	bf00      	nop
 800c806:	e7fe      	b.n	800c806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c808:	4b1e      	ldr	r3, [pc, #120]	; (800c884 <xPortStartScheduler+0x134>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	021b      	lsls	r3, r3, #8
 800c80e:	4a1d      	ldr	r2, [pc, #116]	; (800c884 <xPortStartScheduler+0x134>)
 800c810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c812:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <xPortStartScheduler+0x134>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c81a:	4a1a      	ldr	r2, [pc, #104]	; (800c884 <xPortStartScheduler+0x134>)
 800c81c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	b2da      	uxtb	r2, r3
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c826:	4b18      	ldr	r3, [pc, #96]	; (800c888 <xPortStartScheduler+0x138>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a17      	ldr	r2, [pc, #92]	; (800c888 <xPortStartScheduler+0x138>)
 800c82c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c832:	4b15      	ldr	r3, [pc, #84]	; (800c888 <xPortStartScheduler+0x138>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a14      	ldr	r2, [pc, #80]	; (800c888 <xPortStartScheduler+0x138>)
 800c838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c83c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c83e:	f000 f8dd 	bl	800c9fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c842:	4b12      	ldr	r3, [pc, #72]	; (800c88c <xPortStartScheduler+0x13c>)
 800c844:	2200      	movs	r2, #0
 800c846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c848:	f000 f8fc 	bl	800ca44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c84c:	4b10      	ldr	r3, [pc, #64]	; (800c890 <xPortStartScheduler+0x140>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a0f      	ldr	r2, [pc, #60]	; (800c890 <xPortStartScheduler+0x140>)
 800c852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c858:	f7ff ff66 	bl	800c728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c85c:	f7fe fe92 	bl	800b584 <vTaskSwitchContext>
	prvTaskExitError();
 800c860:	f7ff ff20 	bl	800c6a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3718      	adds	r7, #24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	e000ed00 	.word	0xe000ed00
 800c874:	410fc271 	.word	0x410fc271
 800c878:	410fc270 	.word	0x410fc270
 800c87c:	e000e400 	.word	0xe000e400
 800c880:	20000f14 	.word	0x20000f14
 800c884:	20000f18 	.word	0x20000f18
 800c888:	e000ed20 	.word	0xe000ed20
 800c88c:	200000e0 	.word	0x200000e0
 800c890:	e000ef34 	.word	0xe000ef34

0800c894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	607b      	str	r3, [r7, #4]
}
 800c8ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c8ae:	4b0f      	ldr	r3, [pc, #60]	; (800c8ec <vPortEnterCritical+0x58>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	4a0d      	ldr	r2, [pc, #52]	; (800c8ec <vPortEnterCritical+0x58>)
 800c8b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c8b8:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <vPortEnterCritical+0x58>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d10f      	bne.n	800c8e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8c0:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <vPortEnterCritical+0x5c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00a      	beq.n	800c8e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	603b      	str	r3, [r7, #0]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <vPortEnterCritical+0x4a>
	}
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	200000e0 	.word	0x200000e0
 800c8f0:	e000ed04 	.word	0xe000ed04

0800c8f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8fa:	4b12      	ldr	r3, [pc, #72]	; (800c944 <vPortExitCritical+0x50>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10a      	bne.n	800c918 <vPortExitCritical+0x24>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	607b      	str	r3, [r7, #4]
}
 800c914:	bf00      	nop
 800c916:	e7fe      	b.n	800c916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c918:	4b0a      	ldr	r3, [pc, #40]	; (800c944 <vPortExitCritical+0x50>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	4a09      	ldr	r2, [pc, #36]	; (800c944 <vPortExitCritical+0x50>)
 800c920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c922:	4b08      	ldr	r3, [pc, #32]	; (800c944 <vPortExitCritical+0x50>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d105      	bne.n	800c936 <vPortExitCritical+0x42>
 800c92a:	2300      	movs	r3, #0
 800c92c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	f383 8811 	msr	BASEPRI, r3
}
 800c934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c936:	bf00      	nop
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	200000e0 	.word	0x200000e0
	...

0800c950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c950:	f3ef 8009 	mrs	r0, PSP
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	4b15      	ldr	r3, [pc, #84]	; (800c9b0 <pxCurrentTCBConst>)
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	f01e 0f10 	tst.w	lr, #16
 800c960:	bf08      	it	eq
 800c962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96a:	6010      	str	r0, [r2, #0]
 800c96c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c970:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c974:	f380 8811 	msr	BASEPRI, r0
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f7fe fe00 	bl	800b584 <vTaskSwitchContext>
 800c984:	f04f 0000 	mov.w	r0, #0
 800c988:	f380 8811 	msr	BASEPRI, r0
 800c98c:	bc09      	pop	{r0, r3}
 800c98e:	6819      	ldr	r1, [r3, #0]
 800c990:	6808      	ldr	r0, [r1, #0]
 800c992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c996:	f01e 0f10 	tst.w	lr, #16
 800c99a:	bf08      	it	eq
 800c99c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c9a0:	f380 8809 	msr	PSP, r0
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	f3af 8000 	nop.w

0800c9b0 <pxCurrentTCBConst>:
 800c9b0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop

0800c9b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	607b      	str	r3, [r7, #4]
}
 800c9d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9d2:	f7fe fd1d 	bl	800b410 <xTaskIncrementTick>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d003      	beq.n	800c9e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9dc:	4b06      	ldr	r3, [pc, #24]	; (800c9f8 <xPortSysTickHandler+0x40>)
 800c9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	f383 8811 	msr	BASEPRI, r3
}
 800c9ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	e000ed04 	.word	0xe000ed04

0800c9fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca00:	4b0b      	ldr	r3, [pc, #44]	; (800ca30 <vPortSetupTimerInterrupt+0x34>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca06:	4b0b      	ldr	r3, [pc, #44]	; (800ca34 <vPortSetupTimerInterrupt+0x38>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca0c:	4b0a      	ldr	r3, [pc, #40]	; (800ca38 <vPortSetupTimerInterrupt+0x3c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a0a      	ldr	r2, [pc, #40]	; (800ca3c <vPortSetupTimerInterrupt+0x40>)
 800ca12:	fba2 2303 	umull	r2, r3, r2, r3
 800ca16:	099b      	lsrs	r3, r3, #6
 800ca18:	4a09      	ldr	r2, [pc, #36]	; (800ca40 <vPortSetupTimerInterrupt+0x44>)
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca1e:	4b04      	ldr	r3, [pc, #16]	; (800ca30 <vPortSetupTimerInterrupt+0x34>)
 800ca20:	2207      	movs	r2, #7
 800ca22:	601a      	str	r2, [r3, #0]
}
 800ca24:	bf00      	nop
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	e000e010 	.word	0xe000e010
 800ca34:	e000e018 	.word	0xe000e018
 800ca38:	20000000 	.word	0x20000000
 800ca3c:	10624dd3 	.word	0x10624dd3
 800ca40:	e000e014 	.word	0xe000e014

0800ca44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca54 <vPortEnableVFP+0x10>
 800ca48:	6801      	ldr	r1, [r0, #0]
 800ca4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca4e:	6001      	str	r1, [r0, #0]
 800ca50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca52:	bf00      	nop
 800ca54:	e000ed88 	.word	0xe000ed88

0800ca58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca5e:	f3ef 8305 	mrs	r3, IPSR
 800ca62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b0f      	cmp	r3, #15
 800ca68:	d914      	bls.n	800ca94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca6a:	4a17      	ldr	r2, [pc, #92]	; (800cac8 <vPortValidateInterruptPriority+0x70>)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	4413      	add	r3, r2
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca74:	4b15      	ldr	r3, [pc, #84]	; (800cacc <vPortValidateInterruptPriority+0x74>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	7afa      	ldrb	r2, [r7, #11]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d20a      	bcs.n	800ca94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	607b      	str	r3, [r7, #4]
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca94:	4b0e      	ldr	r3, [pc, #56]	; (800cad0 <vPortValidateInterruptPriority+0x78>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca9c:	4b0d      	ldr	r3, [pc, #52]	; (800cad4 <vPortValidateInterruptPriority+0x7c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d90a      	bls.n	800caba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	603b      	str	r3, [r7, #0]
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <vPortValidateInterruptPriority+0x60>
	}
 800caba:	bf00      	nop
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	e000e3f0 	.word	0xe000e3f0
 800cacc:	20000f14 	.word	0x20000f14
 800cad0:	e000ed0c 	.word	0xe000ed0c
 800cad4:	20000f18 	.word	0x20000f18

0800cad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08a      	sub	sp, #40	; 0x28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cae0:	2300      	movs	r3, #0
 800cae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cae4:	f7fe fbd8 	bl	800b298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cae8:	4b5b      	ldr	r3, [pc, #364]	; (800cc58 <pvPortMalloc+0x180>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d101      	bne.n	800caf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800caf0:	f000 f920 	bl	800cd34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800caf4:	4b59      	ldr	r3, [pc, #356]	; (800cc5c <pvPortMalloc+0x184>)
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4013      	ands	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f040 8093 	bne.w	800cc28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d01d      	beq.n	800cb44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cb08:	2208      	movs	r2, #8
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f003 0307 	and.w	r3, r3, #7
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d014      	beq.n	800cb44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f023 0307 	bic.w	r3, r3, #7
 800cb20:	3308      	adds	r3, #8
 800cb22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f003 0307 	and.w	r3, r3, #7
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00a      	beq.n	800cb44 <pvPortMalloc+0x6c>
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb32:	f383 8811 	msr	BASEPRI, r3
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	617b      	str	r3, [r7, #20]
}
 800cb40:	bf00      	nop
 800cb42:	e7fe      	b.n	800cb42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d06e      	beq.n	800cc28 <pvPortMalloc+0x150>
 800cb4a:	4b45      	ldr	r3, [pc, #276]	; (800cc60 <pvPortMalloc+0x188>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d869      	bhi.n	800cc28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb54:	4b43      	ldr	r3, [pc, #268]	; (800cc64 <pvPortMalloc+0x18c>)
 800cb56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb58:	4b42      	ldr	r3, [pc, #264]	; (800cc64 <pvPortMalloc+0x18c>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb5e:	e004      	b.n	800cb6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d903      	bls.n	800cb7c <pvPortMalloc+0xa4>
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1f1      	bne.n	800cb60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb7c:	4b36      	ldr	r3, [pc, #216]	; (800cc58 <pvPortMalloc+0x180>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d050      	beq.n	800cc28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb86:	6a3b      	ldr	r3, [r7, #32]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2208      	movs	r2, #8
 800cb8c:	4413      	add	r3, r2
 800cb8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	6a3b      	ldr	r3, [r7, #32]
 800cb96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	1ad2      	subs	r2, r2, r3
 800cba0:	2308      	movs	r3, #8
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d91f      	bls.n	800cbe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4413      	add	r3, r2
 800cbae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	f003 0307 	and.w	r3, r3, #7
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00a      	beq.n	800cbd0 <pvPortMalloc+0xf8>
	__asm volatile
 800cbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	613b      	str	r3, [r7, #16]
}
 800cbcc:	bf00      	nop
 800cbce:	e7fe      	b.n	800cbce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	1ad2      	subs	r2, r2, r3
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbe2:	69b8      	ldr	r0, [r7, #24]
 800cbe4:	f000 f908 	bl	800cdf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbe8:	4b1d      	ldr	r3, [pc, #116]	; (800cc60 <pvPortMalloc+0x188>)
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	4a1b      	ldr	r2, [pc, #108]	; (800cc60 <pvPortMalloc+0x188>)
 800cbf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbf6:	4b1a      	ldr	r3, [pc, #104]	; (800cc60 <pvPortMalloc+0x188>)
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	4b1b      	ldr	r3, [pc, #108]	; (800cc68 <pvPortMalloc+0x190>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d203      	bcs.n	800cc0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc02:	4b17      	ldr	r3, [pc, #92]	; (800cc60 <pvPortMalloc+0x188>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a18      	ldr	r2, [pc, #96]	; (800cc68 <pvPortMalloc+0x190>)
 800cc08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	4b13      	ldr	r3, [pc, #76]	; (800cc5c <pvPortMalloc+0x184>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	431a      	orrs	r2, r3
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc1e:	4b13      	ldr	r3, [pc, #76]	; (800cc6c <pvPortMalloc+0x194>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	3301      	adds	r3, #1
 800cc24:	4a11      	ldr	r2, [pc, #68]	; (800cc6c <pvPortMalloc+0x194>)
 800cc26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc28:	f7fe fb44 	bl	800b2b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	f003 0307 	and.w	r3, r3, #7
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00a      	beq.n	800cc4c <pvPortMalloc+0x174>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	60fb      	str	r3, [r7, #12]
}
 800cc48:	bf00      	nop
 800cc4a:	e7fe      	b.n	800cc4a <pvPortMalloc+0x172>
	return pvReturn;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3728      	adds	r7, #40	; 0x28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	2000af24 	.word	0x2000af24
 800cc5c:	2000af38 	.word	0x2000af38
 800cc60:	2000af28 	.word	0x2000af28
 800cc64:	2000af1c 	.word	0x2000af1c
 800cc68:	2000af2c 	.word	0x2000af2c
 800cc6c:	2000af30 	.word	0x2000af30

0800cc70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d04d      	beq.n	800cd1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc82:	2308      	movs	r3, #8
 800cc84:	425b      	negs	r3, r3
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	4413      	add	r3, r2
 800cc8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	685a      	ldr	r2, [r3, #4]
 800cc94:	4b24      	ldr	r3, [pc, #144]	; (800cd28 <vPortFree+0xb8>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4013      	ands	r3, r2
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d10a      	bne.n	800ccb4 <vPortFree+0x44>
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	60fb      	str	r3, [r7, #12]
}
 800ccb0:	bf00      	nop
 800ccb2:	e7fe      	b.n	800ccb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00a      	beq.n	800ccd2 <vPortFree+0x62>
	__asm volatile
 800ccbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc0:	f383 8811 	msr	BASEPRI, r3
 800ccc4:	f3bf 8f6f 	isb	sy
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	60bb      	str	r3, [r7, #8]
}
 800ccce:	bf00      	nop
 800ccd0:	e7fe      	b.n	800ccd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	685a      	ldr	r2, [r3, #4]
 800ccd6:	4b14      	ldr	r3, [pc, #80]	; (800cd28 <vPortFree+0xb8>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4013      	ands	r3, r2
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d01e      	beq.n	800cd1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d11a      	bne.n	800cd1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	685a      	ldr	r2, [r3, #4]
 800ccec:	4b0e      	ldr	r3, [pc, #56]	; (800cd28 <vPortFree+0xb8>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	43db      	mvns	r3, r3
 800ccf2:	401a      	ands	r2, r3
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccf8:	f7fe face 	bl	800b298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <vPortFree+0xbc>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4413      	add	r3, r2
 800cd06:	4a09      	ldr	r2, [pc, #36]	; (800cd2c <vPortFree+0xbc>)
 800cd08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd0a:	6938      	ldr	r0, [r7, #16]
 800cd0c:	f000 f874 	bl	800cdf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd10:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <vPortFree+0xc0>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3301      	adds	r3, #1
 800cd16:	4a06      	ldr	r2, [pc, #24]	; (800cd30 <vPortFree+0xc0>)
 800cd18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd1a:	f7fe facb 	bl	800b2b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd1e:	bf00      	nop
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	2000af38 	.word	0x2000af38
 800cd2c:	2000af28 	.word	0x2000af28
 800cd30:	2000af34 	.word	0x2000af34

0800cd34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd3a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800cd3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd40:	4b27      	ldr	r3, [pc, #156]	; (800cde0 <prvHeapInit+0xac>)
 800cd42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f003 0307 	and.w	r3, r3, #7
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00c      	beq.n	800cd68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	3307      	adds	r3, #7
 800cd52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f023 0307 	bic.w	r3, r3, #7
 800cd5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	4a1f      	ldr	r2, [pc, #124]	; (800cde0 <prvHeapInit+0xac>)
 800cd64:	4413      	add	r3, r2
 800cd66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd6c:	4a1d      	ldr	r2, [pc, #116]	; (800cde4 <prvHeapInit+0xb0>)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd72:	4b1c      	ldr	r3, [pc, #112]	; (800cde4 <prvHeapInit+0xb0>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68ba      	ldr	r2, [r7, #8]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd80:	2208      	movs	r2, #8
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	1a9b      	subs	r3, r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f023 0307 	bic.w	r3, r3, #7
 800cd8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	4a15      	ldr	r2, [pc, #84]	; (800cde8 <prvHeapInit+0xb4>)
 800cd94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd96:	4b14      	ldr	r3, [pc, #80]	; (800cde8 <prvHeapInit+0xb4>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd9e:	4b12      	ldr	r3, [pc, #72]	; (800cde8 <prvHeapInit+0xb4>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2200      	movs	r2, #0
 800cda4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	1ad2      	subs	r2, r2, r3
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cdb4:	4b0c      	ldr	r3, [pc, #48]	; (800cde8 <prvHeapInit+0xb4>)
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	4a0a      	ldr	r2, [pc, #40]	; (800cdec <prvHeapInit+0xb8>)
 800cdc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	4a09      	ldr	r2, [pc, #36]	; (800cdf0 <prvHeapInit+0xbc>)
 800cdca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdcc:	4b09      	ldr	r3, [pc, #36]	; (800cdf4 <prvHeapInit+0xc0>)
 800cdce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cdd2:	601a      	str	r2, [r3, #0]
}
 800cdd4:	bf00      	nop
 800cdd6:	3714      	adds	r7, #20
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr
 800cde0:	20000f1c 	.word	0x20000f1c
 800cde4:	2000af1c 	.word	0x2000af1c
 800cde8:	2000af24 	.word	0x2000af24
 800cdec:	2000af2c 	.word	0x2000af2c
 800cdf0:	2000af28 	.word	0x2000af28
 800cdf4:	2000af38 	.word	0x2000af38

0800cdf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce00:	4b28      	ldr	r3, [pc, #160]	; (800cea4 <prvInsertBlockIntoFreeList+0xac>)
 800ce02:	60fb      	str	r3, [r7, #12]
 800ce04:	e002      	b.n	800ce0c <prvInsertBlockIntoFreeList+0x14>
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d8f7      	bhi.n	800ce06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	4413      	add	r3, r2
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d108      	bne.n	800ce3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	441a      	add	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	441a      	add	r2, r3
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d118      	bne.n	800ce80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <prvInsertBlockIntoFreeList+0xb0>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d00d      	beq.n	800ce76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	685a      	ldr	r2, [r3, #4]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	441a      	add	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	e008      	b.n	800ce88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce76:	4b0c      	ldr	r3, [pc, #48]	; (800cea8 <prvInsertBlockIntoFreeList+0xb0>)
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	601a      	str	r2, [r3, #0]
 800ce7e:	e003      	b.n	800ce88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d002      	beq.n	800ce96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce96:	bf00      	nop
 800ce98:	3714      	adds	r7, #20
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	2000af1c 	.word	0x2000af1c
 800cea8:	2000af24 	.word	0x2000af24

0800ceac <master_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void master_crc16(modbus_master *master, uint8_t *buffer)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
    master->crc_hi = 0xFF;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	22ff      	movs	r2, #255	; 0xff
 800ceba:	719a      	strb	r2, [r3, #6]
    master->crc_lo = 0xFF;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	22ff      	movs	r2, #255	; 0xff
 800cec0:	71da      	strb	r2, [r3, #7]
    while (master->buff_len--)
 800cec2:	e01c      	b.n	800cefe <master_crc16+0x52>
    {
        master->buff_index = master->crc_hi ^ *buffer++;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	799a      	ldrb	r2, [r3, #6]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	1c59      	adds	r1, r3, #1
 800cecc:	6039      	str	r1, [r7, #0]
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	4053      	eors	r3, r2
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	815a      	strh	r2, [r3, #10]
        master->crc_hi = master->crc_lo ^ crc_hi[master->buff_index];
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	79da      	ldrb	r2, [r3, #7]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	895b      	ldrh	r3, [r3, #10]
 800cee2:	4619      	mov	r1, r3
 800cee4:	4b0d      	ldr	r3, [pc, #52]	; (800cf1c <master_crc16+0x70>)
 800cee6:	5c5b      	ldrb	r3, [r3, r1]
 800cee8:	4053      	eors	r3, r2
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	719a      	strb	r2, [r3, #6]
        master->crc_lo = crc_lo[master->buff_index];
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	895b      	ldrh	r3, [r3, #10]
 800cef4:	461a      	mov	r2, r3
 800cef6:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <master_crc16+0x74>)
 800cef8:	5c9a      	ldrb	r2, [r3, r2]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	71da      	strb	r2, [r3, #7]
    while (master->buff_len--)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	891b      	ldrh	r3, [r3, #8]
 800cf02:	1e5a      	subs	r2, r3, #1
 800cf04:	b291      	uxth	r1, r2
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	8111      	strh	r1, [r2, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1da      	bne.n	800cec4 <master_crc16+0x18>
    }
}
 800cf0e:	bf00      	nop
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	0800eab8 	.word	0x0800eab8
 800cf20:	0800ebb8 	.word	0x0800ebb8

0800cf24 <master_validate_reply>:

static osStatus_t master_validate_reply(modbus_master *master)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
    if (master->rx_len < 5)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800cf32:	2b04      	cmp	r3, #4
 800cf34:	d802      	bhi.n	800cf3c <master_validate_reply+0x18>
    {
        return osError;
 800cf36:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3a:	e035      	b.n	800cfa8 <master_validate_reply+0x84>
    }
    master->buff_len = master->rx_len - 2;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800cf42:	3b02      	subs	r3, #2
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	811a      	strh	r2, [r3, #8]
    master_crc16(master, master->rx_buf);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	330c      	adds	r3, #12
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff ffab 	bl	800ceac <master_crc16>
    if ((master->crc_hi != master->rx_buf[master->rx_len - 2]) || (master->crc_lo != master->rx_buf[master->rx_len - 1]))
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	799a      	ldrb	r2, [r3, #6]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800cf60:	3b02      	subs	r3, #2
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	440b      	add	r3, r1
 800cf66:	7b1b      	ldrb	r3, [r3, #12]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d10a      	bne.n	800cf82 <master_validate_reply+0x5e>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	79da      	ldrb	r2, [r3, #7]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800cf76:	3b01      	subs	r3, #1
 800cf78:	6879      	ldr	r1, [r7, #4]
 800cf7a:	440b      	add	r3, r1
 800cf7c:	7b1b      	ldrb	r3, [r3, #12]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d002      	beq.n	800cf88 <master_validate_reply+0x64>
    {
        return osError;
 800cf82:	f04f 33ff 	mov.w	r3, #4294967295
 800cf86:	e00f      	b.n	800cfa8 <master_validate_reply+0x84>
    }
    if ((master->rx_buf[0] != master->slave_id) || (master->rx_buf[1] != master->func_code))
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	7b1a      	ldrb	r2, [r3, #12]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	791b      	ldrb	r3, [r3, #4]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d105      	bne.n	800cfa0 <master_validate_reply+0x7c>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7b5a      	ldrb	r2, [r3, #13]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	795b      	ldrb	r3, [r3, #5]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d002      	beq.n	800cfa6 <master_validate_reply+0x82>
    {
        return osError;
 800cfa0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfa4:	e000      	b.n	800cfa8 <master_validate_reply+0x84>
    }
    return osOK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <master_request>:

static osStatus_t master_request(modbus_master *master, uint16_t timeout)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	807b      	strh	r3, [r7, #2]
    master->buff_len = master->tx_len;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	811a      	strh	r2, [r3, #8]
    master_crc16(master, master->tx_buf);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f203 230e 	addw	r3, r3, #526	; 0x20e
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7ff ff6c 	bl	800ceac <master_crc16>
    master->tx_buf[master->tx_len++] = master->crc_hi;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800cfda:	1c5a      	adds	r2, r3, #1
 800cfdc:	b291      	uxth	r1, r2
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	799a      	ldrb	r2, [r3, #6]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	440b      	add	r3, r1
 800cfee:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = master->crc_lo;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800cff8:	1c5a      	adds	r2, r3, #1
 800cffa:	b291      	uxth	r1, r2
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d002:	4619      	mov	r1, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	79da      	ldrb	r2, [r3, #7]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	440b      	add	r3, r1
 800d00c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e

    osSemaphoreAcquire(master->idle_sem, 0);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800d016:	2100      	movs	r1, #0
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fc fd55 	bl	8009ac8 <osSemaphoreAcquire>
    HAL_UART_Receive_DMA(master->uart_port->uart, master->rx_buf, MB_MASTER_BUFFER_LENGTH);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6818      	ldr	r0, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	330c      	adds	r3, #12
 800d028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d02c:	4619      	mov	r1, r3
 800d02e:	f7fb f9cd 	bl	80083cc <HAL_UART_Receive_DMA>

    master_set_tx_rx(master, tx);
 800d032:	2101      	movs	r1, #1
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f8b9 	bl	800d1ac <master_set_tx_rx>
    HAL_UART_Transmit_DMA(master->uart_port->uart, master->tx_buf, master->tx_len);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	6818      	ldr	r0, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f203 210e 	addw	r1, r3, #526	; 0x20e
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d04c:	461a      	mov	r2, r3
 800d04e:	f7fb f93f 	bl	80082d0 <HAL_UART_Transmit_DMA>
    while (osSemaphoreAcquire(master->idle_sem, timeout) == osOK)
 800d052:	e032      	b.n	800d0ba <master_request+0x10a>
    {
        if (master->idle_timer_flag == 0)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d107      	bne.n	800d06e <master_request+0xbe>
        {
            osTimerStart(master->idle_timer, 2);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800d064:	2102      	movs	r1, #2
 800d066:	4618      	mov	r0, r3
 800d068:	f7fc fc76 	bl	8009958 <osTimerStart>
 800d06c:	e025      	b.n	800d0ba <master_request+0x10a>
        }
        else if (master->idle_timer_flag == 1)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800d074:	2b01      	cmp	r3, #1
 800d076:	d120      	bne.n	800d0ba <master_request+0x10a>
        {
            HAL_UART_DMAStop(master->uart_port->uart);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fb f9d4 	bl	800842c <HAL_UART_DMAStop>
            if (master_validate_reply(master) == osOK)
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff ff4d 	bl	800cf24 <master_validate_reply>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d105      	bne.n	800d09c <master_request+0xec>
            {
                master->com_status = osOK;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
                return osOK;
 800d098:	2300      	movs	r3, #0
 800d09a:	e02d      	b.n	800d0f8 <master_request+0x148>
            }
            master->com_status = osErrorParameter;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f06f 0203 	mvn.w	r2, #3
 800d0a2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
            master->com_err_cnt++;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            return osError;
 800d0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0b8:	e01e      	b.n	800d0f8 <master_request+0x148>
    while (osSemaphoreAcquire(master->idle_sem, timeout) == osOK)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800d0c0:	887a      	ldrh	r2, [r7, #2]
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fc fcff 	bl	8009ac8 <osSemaphoreAcquire>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d0c1      	beq.n	800d054 <master_request+0xa4>
        }
    }
    HAL_UART_DMAStop(master->uart_port->uart);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fb f9a8 	bl	800842c <HAL_UART_DMAStop>
    master->com_err_cnt++;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    master->com_status = osErrorTimeout;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f06f 0201 	mvn.w	r2, #1
 800d0f0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    return osError;
 800d0f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <ostimer_callback>:

static void ostimer_callback(void *args)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
    modbus_master *master = args;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	60fb      	str	r3, [r7, #12]
    if (master->rx_len == (MB_MASTER_BUFFER_LENGTH - master->uart_port->uart->hdmarx->Instance->NDTR))
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d112:	461a      	mov	r2, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d124:	429a      	cmp	r2, r3
 800d126:	d109      	bne.n	800d13c <ostimer_callback+0x3c>
    {
        master->idle_timer_flag = 1;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(master->idle_sem);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800d136:	4618      	mov	r0, r3
 800d138:	f7fc fd18 	bl	8009b6c <osSemaphoreRelease>
    }
}
 800d13c:	bf00      	nop
 800d13e:	3710      	adds	r7, #16
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <master_init>:

void master_init(modbus_master *master, modbus_port *port, uint16_t slave_id)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	4613      	mov	r3, r2
 800d150:	80fb      	strh	r3, [r7, #6]
    master->idle_sem = osSemaphoreNew(1, 0, NULL);
 800d152:	2200      	movs	r2, #0
 800d154:	2100      	movs	r1, #0
 800d156:	2001      	movs	r0, #1
 800d158:	f7fc fc2c 	bl	80099b4 <osSemaphoreNew>
 800d15c:	4602      	mov	r2, r0
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    master->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)master, NULL);
 800d164:	2300      	movs	r3, #0
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	2100      	movs	r1, #0
 800d16a:	480f      	ldr	r0, [pc, #60]	; (800d1a8 <master_init+0x64>)
 800d16c:	f7fc fb78 	bl	8009860 <osTimerNew>
 800d170:	4602      	mov	r2, r0
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    master->uart_port = port;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	601a      	str	r2, [r3, #0]
    master->slave_id = slave_id;
 800d17e:	88fb      	ldrh	r3, [r7, #6]
 800d180:	b2da      	uxtb	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	711a      	strb	r2, [r3, #4]
    __HAL_UART_ENABLE_IT(master->uart_port->uart, UART_IT_IDLE);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68da      	ldr	r2, [r3, #12]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f042 0210 	orr.w	r2, r2, #16
 800d19c:	60da      	str	r2, [r3, #12]
}
 800d19e:	bf00      	nop
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	0800d101 	.word	0x0800d101

0800d1ac <master_set_tx_rx>:

void master_set_tx_rx(modbus_master *master, uart_tx_rx_enum dir)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(master->uart_port->gpio_port, master->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6858      	ldr	r0, [r3, #4]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	8919      	ldrh	r1, [r3, #8]
 800d1c4:	78fb      	ldrb	r3, [r7, #3]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	bf0c      	ite	eq
 800d1ca:	2301      	moveq	r3, #1
 800d1cc:	2300      	movne	r3, #0
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	f7f7 fef1 	bl	8004fb8 <HAL_GPIO_WritePin>
}
 800d1d6:	bf00      	nop
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <master_uart_idle>:

void master_uart_idle(modbus_master *master)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
    if (((READ_REG(master->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(master->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f003 0310 	and.w	r3, r3, #16
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d02e      	beq.n	800d256 <master_uart_idle+0x78>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	f003 0310 	and.w	r3, r3, #16
 800d206:	2b00      	cmp	r3, #0
 800d208:	d025      	beq.n	800d256 <master_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(master->uart_port->uart);
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	60fb      	str	r3, [r7, #12]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	68fb      	ldr	r3, [r7, #12]
        master->rx_len = MB_MASTER_BUFFER_LENGTH - master->uart_port->uart->hdmarx->Instance->NDTR;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	b29b      	uxth	r3, r3
 800d236:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
        master->idle_timer_flag = 0;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(master->idle_sem);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800d250:	4618      	mov	r0, r3
 800d252:	f7fc fc8b 	bl	8009b6c <osSemaphoreRelease>
    }
}
 800d256:	bf00      	nop
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <master_compose_tx_buffer>:

static void master_compose_tx_buffer(modbus_master *master, uint16_t addr, uint8_t fc)
{
 800d25e:	b480      	push	{r7}
 800d260:	b083      	sub	sp, #12
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	460b      	mov	r3, r1
 800d268:	807b      	strh	r3, [r7, #2]
 800d26a:	4613      	mov	r3, r2
 800d26c:	707b      	strb	r3, [r7, #1]
    master->tx_len = 0;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    master->func_code = fc;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	787a      	ldrb	r2, [r7, #1]
 800d27a:	715a      	strb	r2, [r3, #5]
    master->tx_buf[master->tx_len++] = master->slave_id;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d282:	1c5a      	adds	r2, r3, #1
 800d284:	b291      	uxth	r1, r2
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d28c:	4619      	mov	r1, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	791a      	ldrb	r2, [r3, #4]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	440b      	add	r3, r1
 800d296:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = master->func_code;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	b291      	uxth	r1, r2
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	795a      	ldrb	r2, [r3, #5]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	440b      	add	r3, r1
 800d2b4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = addr >> 8;
 800d2b8:	887b      	ldrh	r3, [r7, #2]
 800d2ba:	0a1b      	lsrs	r3, r3, #8
 800d2bc:	b298      	uxth	r0, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	b291      	uxth	r1, r2
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	b2c2      	uxtb	r2, r0
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	440b      	add	r3, r1
 800d2d6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = addr & 0xFF;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	b291      	uxth	r1, r2
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	887b      	ldrh	r3, [r7, #2]
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	440b      	add	r3, r1
 800d2f4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
}
 800d2f8:	bf00      	nop
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <master_read_holding_regs>:
    }
    return osError;
}

osStatus_t master_read_holding_regs(modbus_master *master, uint16_t addr, uint16_t qty, int16_t *result)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	607b      	str	r3, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	817b      	strh	r3, [r7, #10]
 800d312:	4613      	mov	r3, r2
 800d314:	813b      	strh	r3, [r7, #8]
    master_compose_tx_buffer(master, addr, MODBUS_FC_READ_HOLDING_REGISTERS);
 800d316:	897b      	ldrh	r3, [r7, #10]
 800d318:	2203      	movs	r2, #3
 800d31a:	4619      	mov	r1, r3
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f7ff ff9e 	bl	800d25e <master_compose_tx_buffer>
    master->tx_buf[master->tx_len++] = qty >> 8;
 800d322:	893b      	ldrh	r3, [r7, #8]
 800d324:	0a1b      	lsrs	r3, r3, #8
 800d326:	b298      	uxth	r0, r3
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d32e:	1c5a      	adds	r2, r3, #1
 800d330:	b291      	uxth	r1, r2
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d338:	4619      	mov	r1, r3
 800d33a:	b2c2      	uxtb	r2, r0
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	440b      	add	r3, r1
 800d340:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = qty & 0xFF;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d34a:	1c5a      	adds	r2, r3, #1
 800d34c:	b291      	uxth	r1, r2
 800d34e:	68fa      	ldr	r2, [r7, #12]
 800d350:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d354:	4619      	mov	r1, r3
 800d356:	893b      	ldrh	r3, [r7, #8]
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	440b      	add	r3, r1
 800d35e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (master_request(master, MB_MASTER_REQUEST_TIMEOUT) == osOK)
 800d362:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f7ff fe22 	bl	800cfb0 <master_request>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d12d      	bne.n	800d3ce <master_read_holding_regs+0xca>
    {
        if (master->rx_buf[2] != qty * 2)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	7b9b      	ldrb	r3, [r3, #14]
 800d376:	461a      	mov	r2, r3
 800d378:	893b      	ldrh	r3, [r7, #8]
 800d37a:	005b      	lsls	r3, r3, #1
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d002      	beq.n	800d386 <master_read_holding_regs+0x82>
        {
            return osError;
 800d380:	f04f 33ff 	mov.w	r3, #4294967295
 800d384:	e025      	b.n	800d3d2 <master_read_holding_regs+0xce>
        }
        for (uint16_t i = 0; i < qty; i++)
 800d386:	2300      	movs	r3, #0
 800d388:	82fb      	strh	r3, [r7, #22]
 800d38a:	e01a      	b.n	800d3c2 <master_read_holding_regs+0xbe>
        {
            result[i] = master->rx_buf[3 + i * 2] * 256 + master->rx_buf[4 + i * 2];
 800d38c:	8afb      	ldrh	r3, [r7, #22]
 800d38e:	005b      	lsls	r3, r3, #1
 800d390:	3303      	adds	r3, #3
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	4413      	add	r3, r2
 800d396:	7b1b      	ldrb	r3, [r3, #12]
 800d398:	b29b      	uxth	r3, r3
 800d39a:	021b      	lsls	r3, r3, #8
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	8afb      	ldrh	r3, [r7, #22]
 800d3a0:	3302      	adds	r3, #2
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	68f9      	ldr	r1, [r7, #12]
 800d3a6:	440b      	add	r3, r1
 800d3a8:	7b1b      	ldrb	r3, [r3, #12]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	4413      	add	r3, r2
 800d3ae:	b299      	uxth	r1, r3
 800d3b0:	8afb      	ldrh	r3, [r7, #22]
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	b20a      	sxth	r2, r1
 800d3ba:	801a      	strh	r2, [r3, #0]
        for (uint16_t i = 0; i < qty; i++)
 800d3bc:	8afb      	ldrh	r3, [r7, #22]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	82fb      	strh	r3, [r7, #22]
 800d3c2:	8afa      	ldrh	r2, [r7, #22]
 800d3c4:	893b      	ldrh	r3, [r7, #8]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d3e0      	bcc.n	800d38c <master_read_holding_regs+0x88>
        }
        return osOK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	e001      	b.n	800d3d2 <master_read_holding_regs+0xce>
    }
    return osError;
 800d3ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
	...

0800d3dc <slave_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void slave_crc16(modbus_slave *slave, uint8_t *buffer)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
    slave->crc_hi = 0xFF;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	22ff      	movs	r2, #255	; 0xff
 800d3ea:	719a      	strb	r2, [r3, #6]
    slave->crc_lo = 0xFF;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	22ff      	movs	r2, #255	; 0xff
 800d3f0:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 800d3f2:	e01c      	b.n	800d42e <slave_crc16+0x52>
    {
        slave->buff_index = slave->crc_hi ^ *buffer++;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	799a      	ldrb	r2, [r3, #6]
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	1c59      	adds	r1, r3, #1
 800d3fc:	6039      	str	r1, [r7, #0]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	4053      	eors	r3, r2
 800d402:	b2db      	uxtb	r3, r3
 800d404:	b29a      	uxth	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	815a      	strh	r2, [r3, #10]
        slave->crc_hi = slave->crc_lo ^ crc_hi[slave->buff_index];
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	79da      	ldrb	r2, [r3, #7]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	895b      	ldrh	r3, [r3, #10]
 800d412:	4619      	mov	r1, r3
 800d414:	4b0d      	ldr	r3, [pc, #52]	; (800d44c <slave_crc16+0x70>)
 800d416:	5c5b      	ldrb	r3, [r3, r1]
 800d418:	4053      	eors	r3, r2
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	719a      	strb	r2, [r3, #6]
        slave->crc_lo = crc_lo[slave->buff_index];
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	895b      	ldrh	r3, [r3, #10]
 800d424:	461a      	mov	r2, r3
 800d426:	4b0a      	ldr	r3, [pc, #40]	; (800d450 <slave_crc16+0x74>)
 800d428:	5c9a      	ldrb	r2, [r3, r2]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	891b      	ldrh	r3, [r3, #8]
 800d432:	1e5a      	subs	r2, r3, #1
 800d434:	b291      	uxth	r1, r2
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	8111      	strh	r1, [r2, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1da      	bne.n	800d3f4 <slave_crc16+0x18>
    }
}
 800d43e:	bf00      	nop
 800d440:	bf00      	nop
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr
 800d44c:	0800ecb8 	.word	0x0800ecb8
 800d450:	0800edb8 	.word	0x0800edb8

0800d454 <slave_validate_cmd>:

static osStatus_t slave_validate_cmd(modbus_slave *slave)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
    if (slave->rx_len < 8 || slave->rx_buf[0] != slave->slave_id)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d462:	2b07      	cmp	r3, #7
 800d464:	d905      	bls.n	800d472 <slave_validate_cmd+0x1e>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	7b1a      	ldrb	r2, [r3, #12]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	791b      	ldrb	r3, [r3, #4]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d002      	beq.n	800d478 <slave_validate_cmd+0x24>
    {
        return osError;
 800d472:	f04f 33ff 	mov.w	r3, #4294967295
 800d476:	e026      	b.n	800d4c6 <slave_validate_cmd+0x72>
    }
    slave->buff_len = slave->rx_len - 2;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d47e:	3b02      	subs	r3, #2
 800d480:	b29a      	uxth	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->rx_buf);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	330c      	adds	r3, #12
 800d48a:	4619      	mov	r1, r3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7ff ffa5 	bl	800d3dc <slave_crc16>
    if ((slave->crc_hi != slave->rx_buf[slave->rx_len - 2]) || (slave->crc_lo != slave->rx_buf[slave->rx_len - 1]))
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	799a      	ldrb	r2, [r3, #6]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d49c:	3b02      	subs	r3, #2
 800d49e:	6879      	ldr	r1, [r7, #4]
 800d4a0:	440b      	add	r3, r1
 800d4a2:	7b1b      	ldrb	r3, [r3, #12]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d10a      	bne.n	800d4be <slave_validate_cmd+0x6a>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	79da      	ldrb	r2, [r3, #7]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	6879      	ldr	r1, [r7, #4]
 800d4b6:	440b      	add	r3, r1
 800d4b8:	7b1b      	ldrb	r3, [r3, #12]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d002      	beq.n	800d4c4 <slave_validate_cmd+0x70>
    {
        return osError;
 800d4be:	f04f 33ff 	mov.w	r3, #4294967295
 800d4c2:	e000      	b.n	800d4c6 <slave_validate_cmd+0x72>
    }
    return osOK;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <slave_handle_read_discs>:

static void slave_handle_read_discs(modbus_slave *slave)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b087      	sub	sp, #28
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	7b9b      	ldrb	r3, [r3, #14]
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	021b      	lsls	r3, r3, #8
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	7bdb      	ldrb	r3, [r3, #15]
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	4413      	add	r3, r2
 800d4e8:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	7c1b      	ldrb	r3, [r3, #16]
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	021b      	lsls	r3, r3, #8
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7c5b      	ldrb	r3, [r3, #17]
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	4413      	add	r3, r2
 800d4fc:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	b291      	uxth	r1, r2
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d516:	4619      	mov	r1, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	791a      	ldrb	r2, [r3, #4]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	440b      	add	r3, r1
 800d520:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800d524:	8a7a      	ldrh	r2, [r7, #18]
 800d526:	8a3b      	ldrh	r3, [r7, #16]
 800d528:	4413      	add	r3, r2
 800d52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d52e:	dd20      	ble.n	800d572 <slave_handle_read_discs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	7b5a      	ldrb	r2, [r3, #13]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d53a:	1c59      	adds	r1, r3, #1
 800d53c:	b288      	uxth	r0, r1
 800d53e:	6879      	ldr	r1, [r7, #4]
 800d540:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800d544:	4619      	mov	r1, r3
 800d546:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800d54a:	b2da      	uxtb	r2, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	440b      	add	r3, r1
 800d550:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d55a:	1c5a      	adds	r2, r3, #1
 800d55c:	b291      	uxth	r1, r2
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d564:	461a      	mov	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4413      	add	r3, r2
 800d56a:	2202      	movs	r2, #2
 800d56c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 800d570:	e072      	b.n	800d658 <slave_handle_read_discs+0x18a>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 800d572:	8a3b      	ldrh	r3, [r7, #16]
 800d574:	f003 0307 	and.w	r3, r3, #7
 800d578:	b29b      	uxth	r3, r3
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d103      	bne.n	800d586 <slave_handle_read_discs+0xb8>
 800d57e:	8a3b      	ldrh	r3, [r7, #16]
 800d580:	08db      	lsrs	r3, r3, #3
 800d582:	b29b      	uxth	r3, r3
 800d584:	e004      	b.n	800d590 <slave_handle_read_discs+0xc2>
 800d586:	8a3b      	ldrh	r3, [r7, #16]
 800d588:	08db      	lsrs	r3, r3, #3
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	3301      	adds	r3, #1
 800d58e:	b29b      	uxth	r3, r3
 800d590:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 800d592:	2300      	movs	r3, #0
 800d594:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d59c:	1c5a      	adds	r2, r3, #1
 800d59e:	b291      	uxth	r1, r2
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	7b5a      	ldrb	r2, [r3, #13]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	440b      	add	r3, r1
 800d5b0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = byte_count;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d5ba:	1c5a      	adds	r2, r3, #1
 800d5bc:	b291      	uxth	r1, r2
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	89fb      	ldrh	r3, [r7, #14]
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	440b      	add	r3, r1
 800d5ce:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	82bb      	strh	r3, [r7, #20]
 800d5d6:	e03a      	b.n	800d64e <slave_handle_read_discs+0x180>
            if (i % 8 == 0)
 800d5d8:	8abb      	ldrh	r3, [r7, #20]
 800d5da:	f003 0307 	and.w	r3, r3, #7
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d101      	bne.n	800d5e8 <slave_handle_read_discs+0x11a>
                byte_data = 0x00;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 800d5e8:	8aba      	ldrh	r2, [r7, #20]
 800d5ea:	8a3b      	ldrh	r3, [r7, #16]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d214      	bcs.n	800d61a <slave_handle_read_discs+0x14c>
                byte_data = (slave->regs->discs[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d5f6:	8a79      	ldrh	r1, [r7, #18]
 800d5f8:	8abb      	ldrh	r3, [r7, #20]
 800d5fa:	440b      	add	r3, r1
 800d5fc:	5cd3      	ldrb	r3, [r2, r3]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d106      	bne.n	800d610 <slave_handle_read_discs+0x142>
 800d602:	7dfb      	ldrb	r3, [r7, #23]
 800d604:	085b      	lsrs	r3, r3, #1
 800d606:	b2db      	uxtb	r3, r3
 800d608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	e002      	b.n	800d616 <slave_handle_read_discs+0x148>
 800d610:	7dfb      	ldrb	r3, [r7, #23]
 800d612:	085b      	lsrs	r3, r3, #1
 800d614:	b2db      	uxtb	r3, r3
 800d616:	75fb      	strb	r3, [r7, #23]
 800d618:	e002      	b.n	800d620 <slave_handle_read_discs+0x152>
                byte_data = byte_data >> 1 & 0x7F;
 800d61a:	7dfb      	ldrb	r3, [r7, #23]
 800d61c:	085b      	lsrs	r3, r3, #1
 800d61e:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 800d620:	8abb      	ldrh	r3, [r7, #20]
 800d622:	3301      	adds	r3, #1
 800d624:	f003 0307 	and.w	r3, r3, #7
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10d      	bne.n	800d648 <slave_handle_read_discs+0x17a>
                slave->tx_buf[slave->tx_len++] = byte_data;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d632:	1c5a      	adds	r2, r3, #1
 800d634:	b291      	uxth	r1, r2
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d63c:	461a      	mov	r2, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4413      	add	r3, r2
 800d642:	7dfa      	ldrb	r2, [r7, #23]
 800d644:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 800d648:	8abb      	ldrh	r3, [r7, #20]
 800d64a:	3301      	adds	r3, #1
 800d64c:	82bb      	strh	r3, [r7, #20]
 800d64e:	8aba      	ldrh	r2, [r7, #20]
 800d650:	89fb      	ldrh	r3, [r7, #14]
 800d652:	00db      	lsls	r3, r3, #3
 800d654:	429a      	cmp	r2, r3
 800d656:	dbbf      	blt.n	800d5d8 <slave_handle_read_discs+0x10a>
}
 800d658:	bf00      	nop
 800d65a:	371c      	adds	r7, #28
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <slave_handle_read_coils>:

static void slave_handle_read_coils(modbus_slave *slave)
{
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	7b9b      	ldrb	r3, [r3, #14]
 800d670:	b29b      	uxth	r3, r3
 800d672:	021b      	lsls	r3, r3, #8
 800d674:	b29a      	uxth	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	7bdb      	ldrb	r3, [r3, #15]
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	4413      	add	r3, r2
 800d67e:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	7c1b      	ldrb	r3, [r3, #16]
 800d684:	b29b      	uxth	r3, r3
 800d686:	021b      	lsls	r3, r3, #8
 800d688:	b29a      	uxth	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	7c5b      	ldrb	r3, [r3, #17]
 800d68e:	b29b      	uxth	r3, r3
 800d690:	4413      	add	r3, r2
 800d692:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d6a2:	1c5a      	adds	r2, r3, #1
 800d6a4:	b291      	uxth	r1, r2
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	791a      	ldrb	r2, [r3, #4]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	440b      	add	r3, r1
 800d6b6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800d6ba:	8a7a      	ldrh	r2, [r7, #18]
 800d6bc:	8a3b      	ldrh	r3, [r7, #16]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6c4:	dd20      	ble.n	800d708 <slave_handle_read_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	7b5a      	ldrb	r2, [r3, #13]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d6d0:	1c59      	adds	r1, r3, #1
 800d6d2:	b288      	uxth	r0, r1
 800d6d4:	6879      	ldr	r1, [r7, #4]
 800d6d6:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800d6da:	4619      	mov	r1, r3
 800d6dc:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	440b      	add	r3, r1
 800d6e6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d6f0:	1c5a      	adds	r2, r3, #1
 800d6f2:	b291      	uxth	r1, r2
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4413      	add	r3, r2
 800d700:	2202      	movs	r2, #2
 800d702:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 800d706:	e074      	b.n	800d7f2 <slave_handle_read_coils+0x18e>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 800d708:	8a3b      	ldrh	r3, [r7, #16]
 800d70a:	f003 0307 	and.w	r3, r3, #7
 800d70e:	b29b      	uxth	r3, r3
 800d710:	2b00      	cmp	r3, #0
 800d712:	d103      	bne.n	800d71c <slave_handle_read_coils+0xb8>
 800d714:	8a3b      	ldrh	r3, [r7, #16]
 800d716:	08db      	lsrs	r3, r3, #3
 800d718:	b29b      	uxth	r3, r3
 800d71a:	e004      	b.n	800d726 <slave_handle_read_coils+0xc2>
 800d71c:	8a3b      	ldrh	r3, [r7, #16]
 800d71e:	08db      	lsrs	r3, r3, #3
 800d720:	b29b      	uxth	r3, r3
 800d722:	3301      	adds	r3, #1
 800d724:	b29b      	uxth	r3, r3
 800d726:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 800d728:	2300      	movs	r3, #0
 800d72a:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d732:	1c5a      	adds	r2, r3, #1
 800d734:	b291      	uxth	r1, r2
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d73c:	4619      	mov	r1, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	7b5a      	ldrb	r2, [r3, #13]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	440b      	add	r3, r1
 800d746:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = byte_count;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d750:	1c5a      	adds	r2, r3, #1
 800d752:	b291      	uxth	r1, r2
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d75a:	4619      	mov	r1, r3
 800d75c:	89fb      	ldrh	r3, [r7, #14]
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	440b      	add	r3, r1
 800d764:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 800d768:	2300      	movs	r3, #0
 800d76a:	82bb      	strh	r3, [r7, #20]
 800d76c:	e03c      	b.n	800d7e8 <slave_handle_read_coils+0x184>
            if (i % 8 == 0)
 800d76e:	8abb      	ldrh	r3, [r7, #20]
 800d770:	f003 0307 	and.w	r3, r3, #7
 800d774:	b29b      	uxth	r3, r3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d101      	bne.n	800d77e <slave_handle_read_coils+0x11a>
                byte_data = 0x00;
 800d77a:	2300      	movs	r3, #0
 800d77c:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 800d77e:	8aba      	ldrh	r2, [r7, #20]
 800d780:	8a3b      	ldrh	r3, [r7, #16]
 800d782:	429a      	cmp	r2, r3
 800d784:	d216      	bcs.n	800d7b4 <slave_handle_read_coils+0x150>
                byte_data = (slave->regs->coils[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d78c:	8a79      	ldrh	r1, [r7, #18]
 800d78e:	8abb      	ldrh	r3, [r7, #20]
 800d790:	440b      	add	r3, r1
 800d792:	4413      	add	r3, r2
 800d794:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d106      	bne.n	800d7aa <slave_handle_read_coils+0x146>
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	085b      	lsrs	r3, r3, #1
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	e002      	b.n	800d7b0 <slave_handle_read_coils+0x14c>
 800d7aa:	7dfb      	ldrb	r3, [r7, #23]
 800d7ac:	085b      	lsrs	r3, r3, #1
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	75fb      	strb	r3, [r7, #23]
 800d7b2:	e002      	b.n	800d7ba <slave_handle_read_coils+0x156>
                byte_data = byte_data >> 1 & 0x7F;
 800d7b4:	7dfb      	ldrb	r3, [r7, #23]
 800d7b6:	085b      	lsrs	r3, r3, #1
 800d7b8:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 800d7ba:	8abb      	ldrh	r3, [r7, #20]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	f003 0307 	and.w	r3, r3, #7
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10d      	bne.n	800d7e2 <slave_handle_read_coils+0x17e>
                slave->tx_buf[slave->tx_len++] = byte_data;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d7cc:	1c5a      	adds	r2, r3, #1
 800d7ce:	b291      	uxth	r1, r2
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4413      	add	r3, r2
 800d7dc:	7dfa      	ldrb	r2, [r7, #23]
 800d7de:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 800d7e2:	8abb      	ldrh	r3, [r7, #20]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	82bb      	strh	r3, [r7, #20]
 800d7e8:	8aba      	ldrh	r2, [r7, #20]
 800d7ea:	89fb      	ldrh	r3, [r7, #14]
 800d7ec:	00db      	lsls	r3, r3, #3
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	dbbd      	blt.n	800d76e <slave_handle_read_coils+0x10a>
}
 800d7f2:	bf00      	nop
 800d7f4:	371c      	adds	r7, #28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <slave_handle_read_input_regs>:

static void slave_handle_read_input_regs(modbus_slave *slave)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b085      	sub	sp, #20
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	7b9b      	ldrb	r3, [r3, #14]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	021b      	lsls	r3, r3, #8
 800d80e:	b29a      	uxth	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7bdb      	ldrb	r3, [r3, #15]
 800d814:	b29b      	uxth	r3, r3
 800d816:	4413      	add	r3, r2
 800d818:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	7c1b      	ldrb	r3, [r3, #16]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	021b      	lsls	r3, r3, #8
 800d822:	b29a      	uxth	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	7c5b      	ldrb	r3, [r3, #17]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	4413      	add	r3, r2
 800d82c:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	b291      	uxth	r1, r2
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d846:	4619      	mov	r1, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	791a      	ldrb	r2, [r3, #4]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	440b      	add	r3, r1
 800d850:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800d854:	89ba      	ldrh	r2, [r7, #12]
 800d856:	897b      	ldrh	r3, [r7, #10]
 800d858:	4413      	add	r3, r2
 800d85a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d85e:	dd20      	ble.n	800d8a2 <slave_handle_read_input_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	7b5a      	ldrb	r2, [r3, #13]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d86a:	1c59      	adds	r1, r3, #1
 800d86c:	b288      	uxth	r0, r1
 800d86e:	6879      	ldr	r1, [r7, #4]
 800d870:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800d874:	4619      	mov	r1, r3
 800d876:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	440b      	add	r3, r1
 800d880:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d88a:	1c5a      	adds	r2, r3, #1
 800d88c:	b291      	uxth	r1, r2
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d894:	461a      	mov	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4413      	add	r3, r2
 800d89a:	2202      	movs	r2, #2
 800d89c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
        }
    }
}
 800d8a0:	e05b      	b.n	800d95a <slave_handle_read_input_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	b291      	uxth	r1, r2
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	7b5a      	ldrb	r2, [r3, #13]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	440b      	add	r3, r1
 800d8bc:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 800d8c0:	897b      	ldrh	r3, [r7, #10]
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d8ca:	1c59      	adds	r1, r3, #1
 800d8cc:	b288      	uxth	r0, r1
 800d8ce:	6879      	ldr	r1, [r7, #4]
 800d8d0:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	0053      	lsls	r3, r2, #1
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	440b      	add	r3, r1
 800d8de:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	81fb      	strh	r3, [r7, #14]
 800d8e6:	e034      	b.n	800d952 <slave_handle_read_input_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800d8ee:	89f9      	ldrh	r1, [r7, #14]
 800d8f0:	89ba      	ldrh	r2, [r7, #12]
 800d8f2:	440a      	add	r2, r1
 800d8f4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800d8f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800d8fc:	121b      	asrs	r3, r3, #8
 800d8fe:	b218      	sxth	r0, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d906:	1c5a      	adds	r2, r3, #1
 800d908:	b291      	uxth	r1, r2
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d910:	4619      	mov	r1, r3
 800d912:	b2c2      	uxtb	r2, r0
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	440b      	add	r3, r1
 800d918:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800d922:	89f9      	ldrh	r1, [r7, #14]
 800d924:	89ba      	ldrh	r2, [r7, #12]
 800d926:	440a      	add	r2, r1
 800d928:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800d92c:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	b291      	uxth	r1, r2
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d940:	4619      	mov	r1, r3
 800d942:	b2c2      	uxtb	r2, r0
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	440b      	add	r3, r1
 800d948:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 800d94c:	89fb      	ldrh	r3, [r7, #14]
 800d94e:	3301      	adds	r3, #1
 800d950:	81fb      	strh	r3, [r7, #14]
 800d952:	89fa      	ldrh	r2, [r7, #14]
 800d954:	897b      	ldrh	r3, [r7, #10]
 800d956:	429a      	cmp	r2, r3
 800d958:	d3c6      	bcc.n	800d8e8 <slave_handle_read_input_regs+0xea>
}
 800d95a:	bf00      	nop
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <slave_handle_read_holding_regs>:

static void slave_handle_read_holding_regs(modbus_slave *slave)
{
 800d966:	b480      	push	{r7}
 800d968:	b085      	sub	sp, #20
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	7b9b      	ldrb	r3, [r3, #14]
 800d972:	b29b      	uxth	r3, r3
 800d974:	021b      	lsls	r3, r3, #8
 800d976:	b29a      	uxth	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	7bdb      	ldrb	r3, [r3, #15]
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	4413      	add	r3, r2
 800d980:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	7c1b      	ldrb	r3, [r3, #16]
 800d986:	b29b      	uxth	r3, r3
 800d988:	021b      	lsls	r3, r3, #8
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	7c5b      	ldrb	r3, [r3, #17]
 800d990:	b29b      	uxth	r3, r3
 800d992:	4413      	add	r3, r2
 800d994:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	b291      	uxth	r1, r2
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	791a      	ldrb	r2, [r3, #4]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	440b      	add	r3, r1
 800d9b8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800d9bc:	89ba      	ldrh	r2, [r7, #12]
 800d9be:	897b      	ldrh	r3, [r7, #10]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9c6:	dd20      	ble.n	800da0a <slave_handle_read_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	7b5a      	ldrb	r2, [r3, #13]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d9d2:	1c59      	adds	r1, r3, #1
 800d9d4:	b288      	uxth	r0, r1
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800d9dc:	4619      	mov	r1, r3
 800d9de:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	440b      	add	r3, r1
 800d9e8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d9f2:	1c5a      	adds	r2, r3, #1
 800d9f4:	b291      	uxth	r1, r2
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	4413      	add	r3, r2
 800da02:	2202      	movs	r2, #2
 800da04:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
        }
    }
}
 800da08:	e05b      	b.n	800dac2 <slave_handle_read_holding_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	b291      	uxth	r1, r2
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800da1a:	4619      	mov	r1, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	7b5a      	ldrb	r2, [r3, #13]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	440b      	add	r3, r1
 800da24:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 800da28:	897b      	ldrh	r3, [r7, #10]
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800da32:	1c59      	adds	r1, r3, #1
 800da34:	b288      	uxth	r0, r1
 800da36:	6879      	ldr	r1, [r7, #4]
 800da38:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800da3c:	4619      	mov	r1, r3
 800da3e:	0053      	lsls	r3, r2, #1
 800da40:	b2da      	uxtb	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	440b      	add	r3, r1
 800da46:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 800da4a:	2300      	movs	r3, #0
 800da4c:	81fb      	strh	r3, [r7, #14]
 800da4e:	e034      	b.n	800daba <slave_handle_read_holding_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800da56:	89f9      	ldrh	r1, [r7, #14]
 800da58:	89ba      	ldrh	r2, [r7, #12]
 800da5a:	440a      	add	r2, r1
 800da5c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800da60:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800da64:	121b      	asrs	r3, r3, #8
 800da66:	b218      	sxth	r0, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800da6e:	1c5a      	adds	r2, r3, #1
 800da70:	b291      	uxth	r1, r2
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800da78:	4619      	mov	r1, r3
 800da7a:	b2c2      	uxtb	r2, r0
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	440b      	add	r3, r1
 800da80:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800da8a:	89f9      	ldrh	r1, [r7, #14]
 800da8c:	89ba      	ldrh	r2, [r7, #12]
 800da8e:	440a      	add	r2, r1
 800da90:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800da94:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800da9e:	1c5a      	adds	r2, r3, #1
 800daa0:	b291      	uxth	r1, r2
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800daa8:	4619      	mov	r1, r3
 800daaa:	b2c2      	uxtb	r2, r0
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	440b      	add	r3, r1
 800dab0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 800dab4:	89fb      	ldrh	r3, [r7, #14]
 800dab6:	3301      	adds	r3, #1
 800dab8:	81fb      	strh	r3, [r7, #14]
 800daba:	89fa      	ldrh	r2, [r7, #14]
 800dabc:	897b      	ldrh	r3, [r7, #10]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d3c6      	bcc.n	800da50 <slave_handle_read_holding_regs+0xea>
}
 800dac2:	bf00      	nop
 800dac4:	3714      	adds	r7, #20
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <slave_compose_write_reply_tx_buffer>:

static void slave_compose_write_reply_tx_buffer(modbus_slave *slave)
{
 800dace:	b480      	push	{r7}
 800dad0:	b083      	sub	sp, #12
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dadc:	1c5a      	adds	r2, r3, #1
 800dade:	b291      	uxth	r1, r2
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dae6:	4619      	mov	r1, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7b5a      	ldrb	r2, [r3, #13]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	440b      	add	r3, r1
 800daf0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[2];
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dafa:	1c5a      	adds	r2, r3, #1
 800dafc:	b291      	uxth	r1, r2
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800db04:	4619      	mov	r1, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	7b9a      	ldrb	r2, [r3, #14]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	440b      	add	r3, r1
 800db0e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[3];
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800db18:	1c5a      	adds	r2, r3, #1
 800db1a:	b291      	uxth	r1, r2
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800db22:	4619      	mov	r1, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	7bda      	ldrb	r2, [r3, #15]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	440b      	add	r3, r1
 800db2c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[4];
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	b291      	uxth	r1, r2
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800db40:	4619      	mov	r1, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	7c1a      	ldrb	r2, [r3, #16]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	440b      	add	r3, r1
 800db4a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[5];
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800db54:	1c5a      	adds	r2, r3, #1
 800db56:	b291      	uxth	r1, r2
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800db5e:	4619      	mov	r1, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	7c5a      	ldrb	r2, [r3, #17]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	440b      	add	r3, r1
 800db68:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <slave_handle_write_single_coil>:

static void slave_handle_write_single_coil(modbus_slave *slave)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	7b9b      	ldrb	r3, [r3, #14]
 800db84:	b29b      	uxth	r3, r3
 800db86:	021b      	lsls	r3, r3, #8
 800db88:	b29a      	uxth	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	7bdb      	ldrb	r3, [r3, #15]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	4413      	add	r3, r2
 800db92:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dba2:	1c5a      	adds	r2, r3, #1
 800dba4:	b291      	uxth	r1, r2
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dbac:	4619      	mov	r1, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	791a      	ldrb	r2, [r3, #4]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	440b      	add	r3, r1
 800dbb6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + 1 > MODBUS_REG_LENGTH)
 800dbba:	89fb      	ldrh	r3, [r7, #14]
 800dbbc:	2bff      	cmp	r3, #255	; 0xff
 800dbbe:	d920      	bls.n	800dc02 <slave_handle_write_single_coil+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	7b5a      	ldrb	r2, [r3, #13]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dbca:	1c59      	adds	r1, r3, #1
 800dbcc:	b288      	uxth	r0, r1
 800dbce:	6879      	ldr	r1, [r7, #4]
 800dbd0:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	440b      	add	r3, r1
 800dbe0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dbea:	1c5a      	adds	r2, r3, #1
 800dbec:	b291      	uxth	r1, r2
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	2202      	movs	r2, #2
 800dbfc:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
    }
}
 800dc00:	e011      	b.n	800dc26 <slave_handle_write_single_coil+0xae>
        slave_compose_write_reply_tx_buffer(slave);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff ff63 	bl	800dace <slave_compose_write_reply_tx_buffer>
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	7c1b      	ldrb	r3, [r3, #16]
 800dc0c:	2bff      	cmp	r3, #255	; 0xff
 800dc0e:	bf0c      	ite	eq
 800dc10:	2301      	moveq	r3, #1
 800dc12:	2300      	movne	r3, #0
 800dc14:	b2d9      	uxtb	r1, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800dc1c:	89fb      	ldrh	r3, [r7, #14]
 800dc1e:	4413      	add	r3, r2
 800dc20:	460a      	mov	r2, r1
 800dc22:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 800dc26:	bf00      	nop
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <slave_handle_write_multi_coils>:

static void slave_handle_write_multi_coils(modbus_slave *slave)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b084      	sub	sp, #16
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	7b9b      	ldrb	r3, [r3, #14]
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	021b      	lsls	r3, r3, #8
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	7bdb      	ldrb	r3, [r3, #15]
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	4413      	add	r3, r2
 800dc48:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	7c1b      	ldrb	r3, [r3, #16]
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	021b      	lsls	r3, r3, #8
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	7c5b      	ldrb	r3, [r3, #17]
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	4413      	add	r3, r2
 800dc5c:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dc6c:	1c5a      	adds	r2, r3, #1
 800dc6e:	b291      	uxth	r1, r2
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dc76:	4619      	mov	r1, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	791a      	ldrb	r2, [r3, #4]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	440b      	add	r3, r1
 800dc80:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800dc84:	89ba      	ldrh	r2, [r7, #12]
 800dc86:	897b      	ldrh	r3, [r7, #10]
 800dc88:	4413      	add	r3, r2
 800dc8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc8e:	dd20      	ble.n	800dcd2 <slave_handle_write_multi_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	7b5a      	ldrb	r2, [r3, #13]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dc9a:	1c59      	adds	r1, r3, #1
 800dc9c:	b288      	uxth	r0, r1
 800dc9e:	6879      	ldr	r1, [r7, #4]
 800dca0:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800dca4:	4619      	mov	r1, r3
 800dca6:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800dcaa:	b2da      	uxtb	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	440b      	add	r3, r1
 800dcb0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dcba:	1c5a      	adds	r2, r3, #1
 800dcbc:	b291      	uxth	r1, r2
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4413      	add	r3, r2
 800dcca:	2202      	movs	r2, #2
 800dccc:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
        }
    }
}
 800dcd0:	e027      	b.n	800dd22 <slave_handle_write_multi_coils+0xf4>
        slave_compose_write_reply_tx_buffer(slave);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f7ff fefb 	bl	800dace <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 800dcd8:	2300      	movs	r3, #0
 800dcda:	81fb      	strh	r3, [r7, #14]
 800dcdc:	e01d      	b.n	800dd1a <slave_handle_write_multi_coils+0xec>
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
 800dcde:	89fb      	ldrh	r3, [r7, #14]
 800dce0:	08db      	lsrs	r3, r3, #3
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	3307      	adds	r3, #7
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	4413      	add	r3, r2
 800dcea:	7b1b      	ldrb	r3, [r3, #12]
 800dcec:	461a      	mov	r2, r3
 800dcee:	89fb      	ldrh	r3, [r7, #14]
 800dcf0:	f003 0307 	and.w	r3, r3, #7
 800dcf4:	fa42 f303 	asr.w	r3, r2, r3
 800dcf8:	b2d9      	uxtb	r1, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800dd00:	89b8      	ldrh	r0, [r7, #12]
 800dd02:	89fb      	ldrh	r3, [r7, #14]
 800dd04:	4403      	add	r3, r0
 800dd06:	f001 0101 	and.w	r1, r1, #1
 800dd0a:	b2c9      	uxtb	r1, r1
 800dd0c:	4413      	add	r3, r2
 800dd0e:	460a      	mov	r2, r1
 800dd10:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        for (uint16_t i = 0; i < qty; i++)
 800dd14:	89fb      	ldrh	r3, [r7, #14]
 800dd16:	3301      	adds	r3, #1
 800dd18:	81fb      	strh	r3, [r7, #14]
 800dd1a:	89fa      	ldrh	r2, [r7, #14]
 800dd1c:	897b      	ldrh	r3, [r7, #10]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d3dd      	bcc.n	800dcde <slave_handle_write_multi_coils+0xb0>
}
 800dd22:	bf00      	nop
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <slave_handle_write_single_holding_reg>:

static void slave_handle_write_single_holding_reg(modbus_slave *slave)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	7b9b      	ldrb	r3, [r3, #14]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	021b      	lsls	r3, r3, #8
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	7bdb      	ldrb	r3, [r3, #15]
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	4413      	add	r3, r2
 800dd44:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dd54:	1c5a      	adds	r2, r3, #1
 800dd56:	b291      	uxth	r1, r2
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dd5e:	4619      	mov	r1, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	791a      	ldrb	r2, [r3, #4]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	440b      	add	r3, r1
 800dd68:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + 1 > MODBUS_REG_LENGTH)
 800dd6c:	89fb      	ldrh	r3, [r7, #14]
 800dd6e:	2bff      	cmp	r3, #255	; 0xff
 800dd70:	d920      	bls.n	800ddb4 <slave_handle_write_single_holding_reg+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	7b5a      	ldrb	r2, [r3, #13]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dd7c:	1c59      	adds	r1, r3, #1
 800dd7e:	b288      	uxth	r0, r1
 800dd80:	6879      	ldr	r1, [r7, #4]
 800dd82:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800dd86:	4619      	mov	r1, r3
 800dd88:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800dd8c:	b2da      	uxtb	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	440b      	add	r3, r1
 800dd92:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dd9c:	1c5a      	adds	r2, r3, #1
 800dd9e:	b291      	uxth	r1, r2
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dda6:	461a      	mov	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4413      	add	r3, r2
 800ddac:	2202      	movs	r2, #2
 800ddae:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
    }
}
 800ddb2:	e015      	b.n	800dde0 <slave_handle_write_single_holding_reg+0xb6>
        slave_compose_write_reply_tx_buffer(slave);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff fe8a 	bl	800dace <slave_compose_write_reply_tx_buffer>
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	7c1b      	ldrb	r3, [r3, #16]
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	021b      	lsls	r3, r3, #8
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	7c5b      	ldrb	r3, [r3, #17]
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	4413      	add	r3, r2
 800ddcc:	b299      	uxth	r1, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800ddd4:	89fa      	ldrh	r2, [r7, #14]
 800ddd6:	b209      	sxth	r1, r1
 800ddd8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800dddc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800dde0:	bf00      	nop
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <slave_handle_write_multi_holding_regs>:

static void slave_handle_write_multi_holding_regs(modbus_slave *slave)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	7b9b      	ldrb	r3, [r3, #14]
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	021b      	lsls	r3, r3, #8
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	7bdb      	ldrb	r3, [r3, #15]
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	4413      	add	r3, r2
 800de02:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	7c1b      	ldrb	r3, [r3, #16]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	021b      	lsls	r3, r3, #8
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	7c5b      	ldrb	r3, [r3, #17]
 800de12:	b29b      	uxth	r3, r3
 800de14:	4413      	add	r3, r2
 800de16:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800de26:	1c5a      	adds	r2, r3, #1
 800de28:	b291      	uxth	r1, r2
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800de30:	4619      	mov	r1, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	791a      	ldrb	r2, [r3, #4]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	440b      	add	r3, r1
 800de3a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800de3e:	89ba      	ldrh	r2, [r7, #12]
 800de40:	897b      	ldrh	r3, [r7, #10]
 800de42:	4413      	add	r3, r2
 800de44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de48:	dd20      	ble.n	800de8c <slave_handle_write_multi_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7b5a      	ldrb	r2, [r3, #13]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800de54:	1c59      	adds	r1, r3, #1
 800de56:	b288      	uxth	r0, r1
 800de58:	6879      	ldr	r1, [r7, #4]
 800de5a:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800de5e:	4619      	mov	r1, r3
 800de60:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800de64:	b2da      	uxtb	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	440b      	add	r3, r1
 800de6a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800de74:	1c5a      	adds	r2, r3, #1
 800de76:	b291      	uxth	r1, r2
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800de7e:	461a      	mov	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	4413      	add	r3, r2
 800de84:	2202      	movs	r2, #2
 800de86:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
        }
    }
}
 800de8a:	e029      	b.n	800dee0 <slave_handle_write_multi_holding_regs+0xf8>
        slave_compose_write_reply_tx_buffer(slave);
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff fe1e 	bl	800dace <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 800de92:	2300      	movs	r3, #0
 800de94:	81fb      	strh	r3, [r7, #14]
 800de96:	e01f      	b.n	800ded8 <slave_handle_write_multi_holding_regs+0xf0>
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
 800de98:	89fb      	ldrh	r3, [r7, #14]
 800de9a:	005b      	lsls	r3, r3, #1
 800de9c:	3307      	adds	r3, #7
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	4413      	add	r3, r2
 800dea2:	7b1b      	ldrb	r3, [r3, #12]
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	021b      	lsls	r3, r3, #8
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	89fb      	ldrh	r3, [r7, #14]
 800deac:	3304      	adds	r3, #4
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	6879      	ldr	r1, [r7, #4]
 800deb2:	440b      	add	r3, r1
 800deb4:	7b1b      	ldrb	r3, [r3, #12]
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	4413      	add	r3, r2
 800deba:	b298      	uxth	r0, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800dec2:	89b9      	ldrh	r1, [r7, #12]
 800dec4:	89fa      	ldrh	r2, [r7, #14]
 800dec6:	440a      	add	r2, r1
 800dec8:	b201      	sxth	r1, r0
 800deca:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800dece:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint16_t i = 0; i < qty; i++)
 800ded2:	89fb      	ldrh	r3, [r7, #14]
 800ded4:	3301      	adds	r3, #1
 800ded6:	81fb      	strh	r3, [r7, #14]
 800ded8:	89fa      	ldrh	r2, [r7, #14]
 800deda:	897b      	ldrh	r3, [r7, #10]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d3db      	bcc.n	800de98 <slave_handle_write_multi_holding_regs+0xb0>
}
 800dee0:	bf00      	nop
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <slave_response>:

static void slave_response(modbus_slave *slave)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
    if (slave_validate_cmd(slave) != osOK)
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff faaf 	bl	800d454 <slave_validate_cmd>
 800def6:	4603      	mov	r3, r0
 800def8:	2b00      	cmp	r3, #0
 800defa:	f040 80b2 	bne.w	800e062 <slave_response+0x17a>
    {
        return;
    }
    slave->func_code = slave->rx_buf[1];
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	7b5a      	ldrb	r2, [r3, #13]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	715a      	strb	r2, [r3, #5]
    if (slave->func_code == MODBUS_FC_READ_DISCRETE_INPUTS)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	795b      	ldrb	r3, [r3, #5]
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d103      	bne.n	800df16 <slave_response+0x2e>
    {
        slave_handle_read_discs(slave);
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7ff fadd 	bl	800d4ce <slave_handle_read_discs>
 800df14:	e06a      	b.n	800dfec <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_COILS)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	795b      	ldrb	r3, [r3, #5]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d103      	bne.n	800df26 <slave_response+0x3e>
    {
        slave_handle_read_coils(slave);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7ff fba0 	bl	800d664 <slave_handle_read_coils>
 800df24:	e062      	b.n	800dfec <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_INPUT_REGISTERS)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	795b      	ldrb	r3, [r3, #5]
 800df2a:	2b04      	cmp	r3, #4
 800df2c:	d103      	bne.n	800df36 <slave_response+0x4e>
    {
        slave_handle_read_input_regs(slave);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff fc65 	bl	800d7fe <slave_handle_read_input_regs>
 800df34:	e05a      	b.n	800dfec <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_HOLDING_REGISTERS)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	795b      	ldrb	r3, [r3, #5]
 800df3a:	2b03      	cmp	r3, #3
 800df3c:	d103      	bne.n	800df46 <slave_response+0x5e>
    {
        slave_handle_read_holding_regs(slave);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7ff fd11 	bl	800d966 <slave_handle_read_holding_regs>
 800df44:	e052      	b.n	800dfec <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_COIL)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	795b      	ldrb	r3, [r3, #5]
 800df4a:	2b05      	cmp	r3, #5
 800df4c:	d103      	bne.n	800df56 <slave_response+0x6e>
    {
        slave_handle_write_single_coil(slave);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff fe12 	bl	800db78 <slave_handle_write_single_coil>
 800df54:	e04a      	b.n	800dfec <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_COILS)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	795b      	ldrb	r3, [r3, #5]
 800df5a:	2b0f      	cmp	r3, #15
 800df5c:	d103      	bne.n	800df66 <slave_response+0x7e>
    {
        slave_handle_write_multi_coils(slave);
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f7ff fe65 	bl	800dc2e <slave_handle_write_multi_coils>
 800df64:	e042      	b.n	800dfec <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_REGISTER)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	795b      	ldrb	r3, [r3, #5]
 800df6a:	2b06      	cmp	r3, #6
 800df6c:	d103      	bne.n	800df76 <slave_response+0x8e>
    {
        slave_handle_write_single_holding_reg(slave);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7ff fedb 	bl	800dd2a <slave_handle_write_single_holding_reg>
 800df74:	e03a      	b.n	800dfec <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_REGISTERS)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	795b      	ldrb	r3, [r3, #5]
 800df7a:	2b10      	cmp	r3, #16
 800df7c:	d103      	bne.n	800df86 <slave_response+0x9e>
    {
        slave_handle_write_multi_holding_regs(slave);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7ff ff32 	bl	800dde8 <slave_handle_write_multi_holding_regs>
 800df84:	e032      	b.n	800dfec <slave_response+0x104>
    }
    else
    {
        slave->tx_len = 0;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
        slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	b291      	uxth	r1, r2
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800df9e:	4619      	mov	r1, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	791a      	ldrb	r2, [r3, #4]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	440b      	add	r3, r1
 800dfa8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	7b5a      	ldrb	r2, [r3, #13]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dfb6:	1c59      	adds	r1, r3, #1
 800dfb8:	b288      	uxth	r0, r1
 800dfba:	6879      	ldr	r1, [r7, #4]
 800dfbc:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	440b      	add	r3, r1
 800dfcc:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x01;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dfd6:	1c5a      	adds	r2, r3, #1
 800dfd8:	b291      	uxth	r1, r2
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    }
    slave->buff_len = slave->tx_len;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->tx_buf);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f203 230e 	addw	r3, r3, #526	; 0x20e
 800dffc:	4619      	mov	r1, r3
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7ff f9ec 	bl	800d3dc <slave_crc16>
    slave->tx_buf[slave->tx_len++] = slave->crc_hi;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e00a:	1c5a      	adds	r2, r3, #1
 800e00c:	b291      	uxth	r1, r2
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e014:	4619      	mov	r1, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	799a      	ldrb	r2, [r3, #6]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	440b      	add	r3, r1
 800e01e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->crc_lo;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e028:	1c5a      	adds	r2, r3, #1
 800e02a:	b291      	uxth	r1, r2
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e032:	4619      	mov	r1, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	79da      	ldrb	r2, [r3, #7]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	440b      	add	r3, r1
 800e03c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave_set_tx_rx(slave, tx);
 800e040:	2101      	movs	r1, #1
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f8ac 	bl	800e1a0 <slave_set_tx_rx>
    HAL_UART_Transmit_DMA(slave->uart_port->uart, slave->tx_buf, slave->tx_len);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	6818      	ldr	r0, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f203 210e 	addw	r1, r3, #526	; 0x20e
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e05a:	461a      	mov	r2, r3
 800e05c:	f7fa f938 	bl	80082d0 <HAL_UART_Transmit_DMA>
 800e060:	e000      	b.n	800e064 <slave_response+0x17c>
        return;
 800e062:	bf00      	nop
}
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <ostimer_callback>:

static void ostimer_callback(void *args)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b084      	sub	sp, #16
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
    modbus_slave *slave = args;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	60fb      	str	r3, [r7, #12]
    if (slave->rx_len == (MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->NDTR))
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800e07c:	461a      	mov	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e08e:	429a      	cmp	r2, r3
 800e090:	d109      	bne.n	800e0a6 <ostimer_callback+0x3c>
    {
        slave->idle_timer_flag = 1;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2201      	movs	r2, #1
 800e096:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(slave->idle_sem);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fb fd63 	bl	8009b6c <osSemaphoreRelease>
    }
}
 800e0a6:	bf00      	nop
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
	...

0800e0b0 <slave_init>:

void slave_init(modbus_slave *slave, modbus_port *port, uint16_t slave_id, modbus_regs *regs_ptr)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	603b      	str	r3, [r7, #0]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	80fb      	strh	r3, [r7, #6]
    slave->idle_sem = osSemaphoreNew(1, 0, NULL);
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	2001      	movs	r0, #1
 800e0c6:	f7fb fc75 	bl	80099b4 <osSemaphoreNew>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    slave->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)slave, NULL);
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	4810      	ldr	r0, [pc, #64]	; (800e11c <slave_init+0x6c>)
 800e0da:	f7fb fbc1 	bl	8009860 <osTimerNew>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    slave->uart_port = port;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	601a      	str	r2, [r3, #0]
    slave->slave_id = slave_id;
 800e0ec:	88fb      	ldrh	r3, [r7, #6]
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	711a      	strb	r2, [r3, #4]
    slave->regs = regs_ptr;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	683a      	ldr	r2, [r7, #0]
 800e0f8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    __HAL_UART_ENABLE_IT(slave->uart_port->uart, UART_IT_IDLE);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68da      	ldr	r2, [r3, #12]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f042 0210 	orr.w	r2, r2, #16
 800e112:	60da      	str	r2, [r3, #12]
}
 800e114:	bf00      	nop
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	0800e06b 	.word	0x0800e06b

0800e120 <slave_uart_idle>:

void slave_uart_idle(modbus_slave *slave)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
    if (((READ_REG(slave->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(slave->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f003 0310 	and.w	r3, r3, #16
 800e136:	2b00      	cmp	r3, #0
 800e138:	d02e      	beq.n	800e198 <slave_uart_idle+0x78>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	f003 0310 	and.w	r3, r3, #16
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d025      	beq.n	800e198 <slave_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(slave->uart_port->uart);
 800e14c:	2300      	movs	r3, #0
 800e14e:	60fb      	str	r3, [r7, #12]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	60fb      	str	r3, [r7, #12]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	60fb      	str	r3, [r7, #12]
 800e168:	68fb      	ldr	r3, [r7, #12]
        slave->rx_len = MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->NDTR;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	b29b      	uxth	r3, r3
 800e178:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
        slave->idle_timer_flag = 0;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(slave->idle_sem);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800e192:	4618      	mov	r0, r3
 800e194:	f7fb fcea 	bl	8009b6c <osSemaphoreRelease>
    }
}
 800e198:	bf00      	nop
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <slave_set_tx_rx>:

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6858      	ldr	r0, [r3, #4]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	8919      	ldrh	r1, [r3, #8]
 800e1b8:	78fb      	ldrb	r3, [r7, #3]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	bf0c      	ite	eq
 800e1be:	2301      	moveq	r3, #1
 800e1c0:	2300      	movne	r3, #0
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	f7f6 fef7 	bl	8004fb8 <HAL_GPIO_WritePin>
}
 800e1ca:	bf00      	nop
 800e1cc:	3708      	adds	r7, #8
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <slave_wait_request>:

void slave_wait_request(modbus_slave *slave)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b082      	sub	sp, #8
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 800e1da:	e024      	b.n	800e226 <slave_wait_request+0x54>
    {
        if (slave->idle_timer_flag == 0)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d107      	bne.n	800e1f6 <slave_wait_request+0x24>
        {
            osTimerStart(slave->idle_timer, 2);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800e1ec:	2102      	movs	r1, #2
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fb fbb2 	bl	8009958 <osTimerStart>
 800e1f4:	e017      	b.n	800e226 <slave_wait_request+0x54>
        }
        else if (slave->idle_timer_flag == 1)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d112      	bne.n	800e226 <slave_wait_request+0x54>
        {
            HAL_UART_DMAStop(slave->uart_port->uart);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4618      	mov	r0, r3
 800e208:	f7fa f910 	bl	800842c <HAL_UART_DMAStop>
            slave_response(slave);
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff fe6b 	bl	800dee8 <slave_response>
            HAL_UART_Receive_DMA(slave->uart_port->uart, slave->rx_buf, MB_SLAVE_BUFFER_LENGTH);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6818      	ldr	r0, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	330c      	adds	r3, #12
 800e21c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e220:	4619      	mov	r1, r3
 800e222:	f7fa f8d3 	bl	80083cc <HAL_UART_Receive_DMA>
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800e22c:	f04f 31ff 	mov.w	r1, #4294967295
 800e230:	4618      	mov	r0, r3
 800e232:	f7fb fc49 	bl	8009ac8 <osSemaphoreAcquire>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d0cf      	beq.n	800e1dc <slave_wait_request+0xa>
        }
    }
}
 800e23c:	bf00      	nop
 800e23e:	bf00      	nop
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
	...

0800e248 <csro_ctrl_step>:

#include "csro_ctrl.h"

/* Model step function */
void csro_ctrl_step(void)
{
 800e248:	b480      	push	{r7}
 800e24a:	af00      	add	r7, sp, #0
    /* DataStoreWrite: '<Root>/Data Store Write' incorporates:
     *  DataStoreRead: '<Root>/Data Store Read'
     */
    sys_regs.inputs[100] = sys_regs.holdings[0];
 800e24c:	4b0e      	ldr	r3, [pc, #56]	; (800e288 <csro_ctrl_step+0x40>)
 800e24e:	f9b3 2400 	ldrsh.w	r2, [r3, #1024]	; 0x400
 800e252:	4b0d      	ldr	r3, [pc, #52]	; (800e288 <csro_ctrl_step+0x40>)
 800e254:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
    sys_regs.inputs[101] = sys_regs.holdings[1];
 800e258:	4b0b      	ldr	r3, [pc, #44]	; (800e288 <csro_ctrl_step+0x40>)
 800e25a:	f9b3 2402 	ldrsh.w	r2, [r3, #1026]	; 0x402
 800e25e:	4b0a      	ldr	r3, [pc, #40]	; (800e288 <csro_ctrl_step+0x40>)
 800e260:	f8a3 22ca 	strh.w	r2, [r3, #714]	; 0x2ca
    sys_regs.inputs[102] = sys_regs.holdings[2];
 800e264:	4b08      	ldr	r3, [pc, #32]	; (800e288 <csro_ctrl_step+0x40>)
 800e266:	f9b3 2404 	ldrsh.w	r2, [r3, #1028]	; 0x404
 800e26a:	4b07      	ldr	r3, [pc, #28]	; (800e288 <csro_ctrl_step+0x40>)
 800e26c:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
    sys_regs.inputs[103] = sys_regs.holdings[3];
 800e270:	4b05      	ldr	r3, [pc, #20]	; (800e288 <csro_ctrl_step+0x40>)
 800e272:	f9b3 2406 	ldrsh.w	r2, [r3, #1030]	; 0x406
 800e276:	4b04      	ldr	r3, [pc, #16]	; (800e288 <csro_ctrl_step+0x40>)
 800e278:	f8a3 22ce 	strh.w	r2, [r3, #718]	; 0x2ce
}
 800e27c:	bf00      	nop
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	2000be84 	.word	0x2000be84

0800e28c <__libc_init_array>:
 800e28c:	b570      	push	{r4, r5, r6, lr}
 800e28e:	4d0d      	ldr	r5, [pc, #52]	; (800e2c4 <__libc_init_array+0x38>)
 800e290:	4c0d      	ldr	r4, [pc, #52]	; (800e2c8 <__libc_init_array+0x3c>)
 800e292:	1b64      	subs	r4, r4, r5
 800e294:	10a4      	asrs	r4, r4, #2
 800e296:	2600      	movs	r6, #0
 800e298:	42a6      	cmp	r6, r4
 800e29a:	d109      	bne.n	800e2b0 <__libc_init_array+0x24>
 800e29c:	4d0b      	ldr	r5, [pc, #44]	; (800e2cc <__libc_init_array+0x40>)
 800e29e:	4c0c      	ldr	r4, [pc, #48]	; (800e2d0 <__libc_init_array+0x44>)
 800e2a0:	f000 fb0a 	bl	800e8b8 <_init>
 800e2a4:	1b64      	subs	r4, r4, r5
 800e2a6:	10a4      	asrs	r4, r4, #2
 800e2a8:	2600      	movs	r6, #0
 800e2aa:	42a6      	cmp	r6, r4
 800e2ac:	d105      	bne.n	800e2ba <__libc_init_array+0x2e>
 800e2ae:	bd70      	pop	{r4, r5, r6, pc}
 800e2b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2b4:	4798      	blx	r3
 800e2b6:	3601      	adds	r6, #1
 800e2b8:	e7ee      	b.n	800e298 <__libc_init_array+0xc>
 800e2ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2be:	4798      	blx	r3
 800e2c0:	3601      	adds	r6, #1
 800e2c2:	e7f2      	b.n	800e2aa <__libc_init_array+0x1e>
 800e2c4:	0800ef24 	.word	0x0800ef24
 800e2c8:	0800ef24 	.word	0x0800ef24
 800e2cc:	0800ef24 	.word	0x0800ef24
 800e2d0:	0800ef28 	.word	0x0800ef28

0800e2d4 <__retarget_lock_acquire_recursive>:
 800e2d4:	4770      	bx	lr

0800e2d6 <__retarget_lock_release_recursive>:
 800e2d6:	4770      	bx	lr

0800e2d8 <memcpy>:
 800e2d8:	440a      	add	r2, r1
 800e2da:	4291      	cmp	r1, r2
 800e2dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2e0:	d100      	bne.n	800e2e4 <memcpy+0xc>
 800e2e2:	4770      	bx	lr
 800e2e4:	b510      	push	{r4, lr}
 800e2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2ee:	4291      	cmp	r1, r2
 800e2f0:	d1f9      	bne.n	800e2e6 <memcpy+0xe>
 800e2f2:	bd10      	pop	{r4, pc}

0800e2f4 <memset>:
 800e2f4:	4402      	add	r2, r0
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d100      	bne.n	800e2fe <memset+0xa>
 800e2fc:	4770      	bx	lr
 800e2fe:	f803 1b01 	strb.w	r1, [r3], #1
 800e302:	e7f9      	b.n	800e2f8 <memset+0x4>

0800e304 <cleanup_glue>:
 800e304:	b538      	push	{r3, r4, r5, lr}
 800e306:	460c      	mov	r4, r1
 800e308:	6809      	ldr	r1, [r1, #0]
 800e30a:	4605      	mov	r5, r0
 800e30c:	b109      	cbz	r1, 800e312 <cleanup_glue+0xe>
 800e30e:	f7ff fff9 	bl	800e304 <cleanup_glue>
 800e312:	4621      	mov	r1, r4
 800e314:	4628      	mov	r0, r5
 800e316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e31a:	f000 b86f 	b.w	800e3fc <_free_r>
	...

0800e320 <_reclaim_reent>:
 800e320:	4b2c      	ldr	r3, [pc, #176]	; (800e3d4 <_reclaim_reent+0xb4>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4283      	cmp	r3, r0
 800e326:	b570      	push	{r4, r5, r6, lr}
 800e328:	4604      	mov	r4, r0
 800e32a:	d051      	beq.n	800e3d0 <_reclaim_reent+0xb0>
 800e32c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e32e:	b143      	cbz	r3, 800e342 <_reclaim_reent+0x22>
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d14a      	bne.n	800e3cc <_reclaim_reent+0xac>
 800e336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e338:	6819      	ldr	r1, [r3, #0]
 800e33a:	b111      	cbz	r1, 800e342 <_reclaim_reent+0x22>
 800e33c:	4620      	mov	r0, r4
 800e33e:	f000 f85d 	bl	800e3fc <_free_r>
 800e342:	6961      	ldr	r1, [r4, #20]
 800e344:	b111      	cbz	r1, 800e34c <_reclaim_reent+0x2c>
 800e346:	4620      	mov	r0, r4
 800e348:	f000 f858 	bl	800e3fc <_free_r>
 800e34c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e34e:	b111      	cbz	r1, 800e356 <_reclaim_reent+0x36>
 800e350:	4620      	mov	r0, r4
 800e352:	f000 f853 	bl	800e3fc <_free_r>
 800e356:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e358:	b111      	cbz	r1, 800e360 <_reclaim_reent+0x40>
 800e35a:	4620      	mov	r0, r4
 800e35c:	f000 f84e 	bl	800e3fc <_free_r>
 800e360:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e362:	b111      	cbz	r1, 800e36a <_reclaim_reent+0x4a>
 800e364:	4620      	mov	r0, r4
 800e366:	f000 f849 	bl	800e3fc <_free_r>
 800e36a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e36c:	b111      	cbz	r1, 800e374 <_reclaim_reent+0x54>
 800e36e:	4620      	mov	r0, r4
 800e370:	f000 f844 	bl	800e3fc <_free_r>
 800e374:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e376:	b111      	cbz	r1, 800e37e <_reclaim_reent+0x5e>
 800e378:	4620      	mov	r0, r4
 800e37a:	f000 f83f 	bl	800e3fc <_free_r>
 800e37e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e380:	b111      	cbz	r1, 800e388 <_reclaim_reent+0x68>
 800e382:	4620      	mov	r0, r4
 800e384:	f000 f83a 	bl	800e3fc <_free_r>
 800e388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e38a:	b111      	cbz	r1, 800e392 <_reclaim_reent+0x72>
 800e38c:	4620      	mov	r0, r4
 800e38e:	f000 f835 	bl	800e3fc <_free_r>
 800e392:	69a3      	ldr	r3, [r4, #24]
 800e394:	b1e3      	cbz	r3, 800e3d0 <_reclaim_reent+0xb0>
 800e396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e398:	4620      	mov	r0, r4
 800e39a:	4798      	blx	r3
 800e39c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e39e:	b1b9      	cbz	r1, 800e3d0 <_reclaim_reent+0xb0>
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3a6:	f7ff bfad 	b.w	800e304 <cleanup_glue>
 800e3aa:	5949      	ldr	r1, [r1, r5]
 800e3ac:	b941      	cbnz	r1, 800e3c0 <_reclaim_reent+0xa0>
 800e3ae:	3504      	adds	r5, #4
 800e3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3b2:	2d80      	cmp	r5, #128	; 0x80
 800e3b4:	68d9      	ldr	r1, [r3, #12]
 800e3b6:	d1f8      	bne.n	800e3aa <_reclaim_reent+0x8a>
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f000 f81f 	bl	800e3fc <_free_r>
 800e3be:	e7ba      	b.n	800e336 <_reclaim_reent+0x16>
 800e3c0:	680e      	ldr	r6, [r1, #0]
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f000 f81a 	bl	800e3fc <_free_r>
 800e3c8:	4631      	mov	r1, r6
 800e3ca:	e7ef      	b.n	800e3ac <_reclaim_reent+0x8c>
 800e3cc:	2500      	movs	r5, #0
 800e3ce:	e7ef      	b.n	800e3b0 <_reclaim_reent+0x90>
 800e3d0:	bd70      	pop	{r4, r5, r6, pc}
 800e3d2:	bf00      	nop
 800e3d4:	200000e4 	.word	0x200000e4

0800e3d8 <__errno>:
 800e3d8:	4b01      	ldr	r3, [pc, #4]	; (800e3e0 <__errno+0x8>)
 800e3da:	6818      	ldr	r0, [r3, #0]
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	200000e4 	.word	0x200000e4

0800e3e4 <__malloc_lock>:
 800e3e4:	4801      	ldr	r0, [pc, #4]	; (800e3ec <__malloc_lock+0x8>)
 800e3e6:	f7ff bf75 	b.w	800e2d4 <__retarget_lock_acquire_recursive>
 800e3ea:	bf00      	nop
 800e3ec:	20010098 	.word	0x20010098

0800e3f0 <__malloc_unlock>:
 800e3f0:	4801      	ldr	r0, [pc, #4]	; (800e3f8 <__malloc_unlock+0x8>)
 800e3f2:	f7ff bf70 	b.w	800e2d6 <__retarget_lock_release_recursive>
 800e3f6:	bf00      	nop
 800e3f8:	20010098 	.word	0x20010098

0800e3fc <_free_r>:
 800e3fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3fe:	2900      	cmp	r1, #0
 800e400:	d048      	beq.n	800e494 <_free_r+0x98>
 800e402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e406:	9001      	str	r0, [sp, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f1a1 0404 	sub.w	r4, r1, #4
 800e40e:	bfb8      	it	lt
 800e410:	18e4      	addlt	r4, r4, r3
 800e412:	f7ff ffe7 	bl	800e3e4 <__malloc_lock>
 800e416:	4a20      	ldr	r2, [pc, #128]	; (800e498 <_free_r+0x9c>)
 800e418:	9801      	ldr	r0, [sp, #4]
 800e41a:	6813      	ldr	r3, [r2, #0]
 800e41c:	4615      	mov	r5, r2
 800e41e:	b933      	cbnz	r3, 800e42e <_free_r+0x32>
 800e420:	6063      	str	r3, [r4, #4]
 800e422:	6014      	str	r4, [r2, #0]
 800e424:	b003      	add	sp, #12
 800e426:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e42a:	f7ff bfe1 	b.w	800e3f0 <__malloc_unlock>
 800e42e:	42a3      	cmp	r3, r4
 800e430:	d90b      	bls.n	800e44a <_free_r+0x4e>
 800e432:	6821      	ldr	r1, [r4, #0]
 800e434:	1862      	adds	r2, r4, r1
 800e436:	4293      	cmp	r3, r2
 800e438:	bf04      	itt	eq
 800e43a:	681a      	ldreq	r2, [r3, #0]
 800e43c:	685b      	ldreq	r3, [r3, #4]
 800e43e:	6063      	str	r3, [r4, #4]
 800e440:	bf04      	itt	eq
 800e442:	1852      	addeq	r2, r2, r1
 800e444:	6022      	streq	r2, [r4, #0]
 800e446:	602c      	str	r4, [r5, #0]
 800e448:	e7ec      	b.n	800e424 <_free_r+0x28>
 800e44a:	461a      	mov	r2, r3
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	b10b      	cbz	r3, 800e454 <_free_r+0x58>
 800e450:	42a3      	cmp	r3, r4
 800e452:	d9fa      	bls.n	800e44a <_free_r+0x4e>
 800e454:	6811      	ldr	r1, [r2, #0]
 800e456:	1855      	adds	r5, r2, r1
 800e458:	42a5      	cmp	r5, r4
 800e45a:	d10b      	bne.n	800e474 <_free_r+0x78>
 800e45c:	6824      	ldr	r4, [r4, #0]
 800e45e:	4421      	add	r1, r4
 800e460:	1854      	adds	r4, r2, r1
 800e462:	42a3      	cmp	r3, r4
 800e464:	6011      	str	r1, [r2, #0]
 800e466:	d1dd      	bne.n	800e424 <_free_r+0x28>
 800e468:	681c      	ldr	r4, [r3, #0]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	6053      	str	r3, [r2, #4]
 800e46e:	4421      	add	r1, r4
 800e470:	6011      	str	r1, [r2, #0]
 800e472:	e7d7      	b.n	800e424 <_free_r+0x28>
 800e474:	d902      	bls.n	800e47c <_free_r+0x80>
 800e476:	230c      	movs	r3, #12
 800e478:	6003      	str	r3, [r0, #0]
 800e47a:	e7d3      	b.n	800e424 <_free_r+0x28>
 800e47c:	6825      	ldr	r5, [r4, #0]
 800e47e:	1961      	adds	r1, r4, r5
 800e480:	428b      	cmp	r3, r1
 800e482:	bf04      	itt	eq
 800e484:	6819      	ldreq	r1, [r3, #0]
 800e486:	685b      	ldreq	r3, [r3, #4]
 800e488:	6063      	str	r3, [r4, #4]
 800e48a:	bf04      	itt	eq
 800e48c:	1949      	addeq	r1, r1, r5
 800e48e:	6021      	streq	r1, [r4, #0]
 800e490:	6054      	str	r4, [r2, #4]
 800e492:	e7c7      	b.n	800e424 <_free_r+0x28>
 800e494:	b003      	add	sp, #12
 800e496:	bd30      	pop	{r4, r5, pc}
 800e498:	2000af3c 	.word	0x2000af3c
 800e49c:	00000000 	.word	0x00000000

0800e4a0 <log>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	ed2d 8b02 	vpush	{d8}
 800e4a6:	ec55 4b10 	vmov	r4, r5, d0
 800e4aa:	f000 f841 	bl	800e530 <__ieee754_log>
 800e4ae:	4b1e      	ldr	r3, [pc, #120]	; (800e528 <log+0x88>)
 800e4b0:	eeb0 8a40 	vmov.f32	s16, s0
 800e4b4:	eef0 8a60 	vmov.f32	s17, s1
 800e4b8:	f993 3000 	ldrsb.w	r3, [r3]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	d01a      	beq.n	800e4f6 <log+0x56>
 800e4c0:	4622      	mov	r2, r4
 800e4c2:	462b      	mov	r3, r5
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	f7f2 fad8 	bl	8000a7c <__aeabi_dcmpun>
 800e4cc:	b998      	cbnz	r0, 800e4f6 <log+0x56>
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	f7f2 fac7 	bl	8000a68 <__aeabi_dcmpgt>
 800e4da:	b960      	cbnz	r0, 800e4f6 <log+0x56>
 800e4dc:	2200      	movs	r2, #0
 800e4de:	2300      	movs	r3, #0
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	f7f2 fa98 	bl	8000a18 <__aeabi_dcmpeq>
 800e4e8:	b160      	cbz	r0, 800e504 <log+0x64>
 800e4ea:	f7ff ff75 	bl	800e3d8 <__errno>
 800e4ee:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800e520 <log+0x80>
 800e4f2:	2322      	movs	r3, #34	; 0x22
 800e4f4:	6003      	str	r3, [r0, #0]
 800e4f6:	eeb0 0a48 	vmov.f32	s0, s16
 800e4fa:	eef0 0a68 	vmov.f32	s1, s17
 800e4fe:	ecbd 8b02 	vpop	{d8}
 800e502:	bd38      	pop	{r3, r4, r5, pc}
 800e504:	f7ff ff68 	bl	800e3d8 <__errno>
 800e508:	ecbd 8b02 	vpop	{d8}
 800e50c:	2321      	movs	r3, #33	; 0x21
 800e50e:	6003      	str	r3, [r0, #0]
 800e510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e514:	4805      	ldr	r0, [pc, #20]	; (800e52c <log+0x8c>)
 800e516:	f000 b9c7 	b.w	800e8a8 <nan>
 800e51a:	bf00      	nop
 800e51c:	f3af 8000 	nop.w
 800e520:	00000000 	.word	0x00000000
 800e524:	fff00000 	.word	0xfff00000
 800e528:	20000148 	.word	0x20000148
 800e52c:	0800ef18 	.word	0x0800ef18

0800e530 <__ieee754_log>:
 800e530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e534:	ec51 0b10 	vmov	r0, r1, d0
 800e538:	ed2d 8b04 	vpush	{d8-d9}
 800e53c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e540:	b083      	sub	sp, #12
 800e542:	460d      	mov	r5, r1
 800e544:	da29      	bge.n	800e59a <__ieee754_log+0x6a>
 800e546:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e54a:	4303      	orrs	r3, r0
 800e54c:	ee10 2a10 	vmov	r2, s0
 800e550:	d10c      	bne.n	800e56c <__ieee754_log+0x3c>
 800e552:	49cf      	ldr	r1, [pc, #828]	; (800e890 <__ieee754_log+0x360>)
 800e554:	2200      	movs	r2, #0
 800e556:	2300      	movs	r3, #0
 800e558:	2000      	movs	r0, #0
 800e55a:	f7f2 f91f 	bl	800079c <__aeabi_ddiv>
 800e55e:	ec41 0b10 	vmov	d0, r0, r1
 800e562:	b003      	add	sp, #12
 800e564:	ecbd 8b04 	vpop	{d8-d9}
 800e568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56c:	2900      	cmp	r1, #0
 800e56e:	da05      	bge.n	800e57c <__ieee754_log+0x4c>
 800e570:	460b      	mov	r3, r1
 800e572:	f7f1 fe31 	bl	80001d8 <__aeabi_dsub>
 800e576:	2200      	movs	r2, #0
 800e578:	2300      	movs	r3, #0
 800e57a:	e7ee      	b.n	800e55a <__ieee754_log+0x2a>
 800e57c:	4bc5      	ldr	r3, [pc, #788]	; (800e894 <__ieee754_log+0x364>)
 800e57e:	2200      	movs	r2, #0
 800e580:	f7f1 ffe2 	bl	8000548 <__aeabi_dmul>
 800e584:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800e588:	460d      	mov	r5, r1
 800e58a:	4ac3      	ldr	r2, [pc, #780]	; (800e898 <__ieee754_log+0x368>)
 800e58c:	4295      	cmp	r5, r2
 800e58e:	dd06      	ble.n	800e59e <__ieee754_log+0x6e>
 800e590:	4602      	mov	r2, r0
 800e592:	460b      	mov	r3, r1
 800e594:	f7f1 fe22 	bl	80001dc <__adddf3>
 800e598:	e7e1      	b.n	800e55e <__ieee754_log+0x2e>
 800e59a:	2300      	movs	r3, #0
 800e59c:	e7f5      	b.n	800e58a <__ieee754_log+0x5a>
 800e59e:	152c      	asrs	r4, r5, #20
 800e5a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e5a4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e5a8:	441c      	add	r4, r3
 800e5aa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800e5ae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e5b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5b6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e5ba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e5be:	ea42 0105 	orr.w	r1, r2, r5
 800e5c2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	4bb4      	ldr	r3, [pc, #720]	; (800e89c <__ieee754_log+0x36c>)
 800e5ca:	f7f1 fe05 	bl	80001d8 <__aeabi_dsub>
 800e5ce:	1cab      	adds	r3, r5, #2
 800e5d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	4682      	mov	sl, r0
 800e5d8:	468b      	mov	fp, r1
 800e5da:	f04f 0200 	mov.w	r2, #0
 800e5de:	dc53      	bgt.n	800e688 <__ieee754_log+0x158>
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f7f2 fa19 	bl	8000a18 <__aeabi_dcmpeq>
 800e5e6:	b1d0      	cbz	r0, 800e61e <__ieee754_log+0xee>
 800e5e8:	2c00      	cmp	r4, #0
 800e5ea:	f000 8122 	beq.w	800e832 <__ieee754_log+0x302>
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f7f1 ff40 	bl	8000474 <__aeabi_i2d>
 800e5f4:	a390      	add	r3, pc, #576	; (adr r3, 800e838 <__ieee754_log+0x308>)
 800e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fa:	4606      	mov	r6, r0
 800e5fc:	460f      	mov	r7, r1
 800e5fe:	f7f1 ffa3 	bl	8000548 <__aeabi_dmul>
 800e602:	a38f      	add	r3, pc, #572	; (adr r3, 800e840 <__ieee754_log+0x310>)
 800e604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e608:	4604      	mov	r4, r0
 800e60a:	460d      	mov	r5, r1
 800e60c:	4630      	mov	r0, r6
 800e60e:	4639      	mov	r1, r7
 800e610:	f7f1 ff9a 	bl	8000548 <__aeabi_dmul>
 800e614:	4602      	mov	r2, r0
 800e616:	460b      	mov	r3, r1
 800e618:	4620      	mov	r0, r4
 800e61a:	4629      	mov	r1, r5
 800e61c:	e7ba      	b.n	800e594 <__ieee754_log+0x64>
 800e61e:	a38a      	add	r3, pc, #552	; (adr r3, 800e848 <__ieee754_log+0x318>)
 800e620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e624:	4650      	mov	r0, sl
 800e626:	4659      	mov	r1, fp
 800e628:	f7f1 ff8e 	bl	8000548 <__aeabi_dmul>
 800e62c:	4602      	mov	r2, r0
 800e62e:	460b      	mov	r3, r1
 800e630:	2000      	movs	r0, #0
 800e632:	499b      	ldr	r1, [pc, #620]	; (800e8a0 <__ieee754_log+0x370>)
 800e634:	f7f1 fdd0 	bl	80001d8 <__aeabi_dsub>
 800e638:	4652      	mov	r2, sl
 800e63a:	4606      	mov	r6, r0
 800e63c:	460f      	mov	r7, r1
 800e63e:	465b      	mov	r3, fp
 800e640:	4650      	mov	r0, sl
 800e642:	4659      	mov	r1, fp
 800e644:	f7f1 ff80 	bl	8000548 <__aeabi_dmul>
 800e648:	4602      	mov	r2, r0
 800e64a:	460b      	mov	r3, r1
 800e64c:	4630      	mov	r0, r6
 800e64e:	4639      	mov	r1, r7
 800e650:	f7f1 ff7a 	bl	8000548 <__aeabi_dmul>
 800e654:	4606      	mov	r6, r0
 800e656:	460f      	mov	r7, r1
 800e658:	b914      	cbnz	r4, 800e660 <__ieee754_log+0x130>
 800e65a:	4632      	mov	r2, r6
 800e65c:	463b      	mov	r3, r7
 800e65e:	e0a2      	b.n	800e7a6 <__ieee754_log+0x276>
 800e660:	4620      	mov	r0, r4
 800e662:	f7f1 ff07 	bl	8000474 <__aeabi_i2d>
 800e666:	a374      	add	r3, pc, #464	; (adr r3, 800e838 <__ieee754_log+0x308>)
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	4680      	mov	r8, r0
 800e66e:	4689      	mov	r9, r1
 800e670:	f7f1 ff6a 	bl	8000548 <__aeabi_dmul>
 800e674:	a372      	add	r3, pc, #456	; (adr r3, 800e840 <__ieee754_log+0x310>)
 800e676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67a:	4604      	mov	r4, r0
 800e67c:	460d      	mov	r5, r1
 800e67e:	4640      	mov	r0, r8
 800e680:	4649      	mov	r1, r9
 800e682:	f7f1 ff61 	bl	8000548 <__aeabi_dmul>
 800e686:	e0a7      	b.n	800e7d8 <__ieee754_log+0x2a8>
 800e688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e68c:	f7f1 fda6 	bl	80001dc <__adddf3>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	4650      	mov	r0, sl
 800e696:	4659      	mov	r1, fp
 800e698:	f7f2 f880 	bl	800079c <__aeabi_ddiv>
 800e69c:	ec41 0b18 	vmov	d8, r0, r1
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f7f1 fee7 	bl	8000474 <__aeabi_i2d>
 800e6a6:	ec53 2b18 	vmov	r2, r3, d8
 800e6aa:	ec41 0b19 	vmov	d9, r0, r1
 800e6ae:	ec51 0b18 	vmov	r0, r1, d8
 800e6b2:	f7f1 ff49 	bl	8000548 <__aeabi_dmul>
 800e6b6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e6ba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	4680      	mov	r8, r0
 800e6c6:	4689      	mov	r9, r1
 800e6c8:	f7f1 ff3e 	bl	8000548 <__aeabi_dmul>
 800e6cc:	a360      	add	r3, pc, #384	; (adr r3, 800e850 <__ieee754_log+0x320>)
 800e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d2:	4606      	mov	r6, r0
 800e6d4:	460f      	mov	r7, r1
 800e6d6:	f7f1 ff37 	bl	8000548 <__aeabi_dmul>
 800e6da:	a35f      	add	r3, pc, #380	; (adr r3, 800e858 <__ieee754_log+0x328>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	f7f1 fd7c 	bl	80001dc <__adddf3>
 800e6e4:	4632      	mov	r2, r6
 800e6e6:	463b      	mov	r3, r7
 800e6e8:	f7f1 ff2e 	bl	8000548 <__aeabi_dmul>
 800e6ec:	a35c      	add	r3, pc, #368	; (adr r3, 800e860 <__ieee754_log+0x330>)
 800e6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f2:	f7f1 fd73 	bl	80001dc <__adddf3>
 800e6f6:	4632      	mov	r2, r6
 800e6f8:	463b      	mov	r3, r7
 800e6fa:	f7f1 ff25 	bl	8000548 <__aeabi_dmul>
 800e6fe:	a35a      	add	r3, pc, #360	; (adr r3, 800e868 <__ieee754_log+0x338>)
 800e700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e704:	f7f1 fd6a 	bl	80001dc <__adddf3>
 800e708:	4642      	mov	r2, r8
 800e70a:	464b      	mov	r3, r9
 800e70c:	f7f1 ff1c 	bl	8000548 <__aeabi_dmul>
 800e710:	a357      	add	r3, pc, #348	; (adr r3, 800e870 <__ieee754_log+0x340>)
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	4680      	mov	r8, r0
 800e718:	4689      	mov	r9, r1
 800e71a:	4630      	mov	r0, r6
 800e71c:	4639      	mov	r1, r7
 800e71e:	f7f1 ff13 	bl	8000548 <__aeabi_dmul>
 800e722:	a355      	add	r3, pc, #340	; (adr r3, 800e878 <__ieee754_log+0x348>)
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	f7f1 fd58 	bl	80001dc <__adddf3>
 800e72c:	4632      	mov	r2, r6
 800e72e:	463b      	mov	r3, r7
 800e730:	f7f1 ff0a 	bl	8000548 <__aeabi_dmul>
 800e734:	a352      	add	r3, pc, #328	; (adr r3, 800e880 <__ieee754_log+0x350>)
 800e736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73a:	f7f1 fd4f 	bl	80001dc <__adddf3>
 800e73e:	4632      	mov	r2, r6
 800e740:	463b      	mov	r3, r7
 800e742:	f7f1 ff01 	bl	8000548 <__aeabi_dmul>
 800e746:	460b      	mov	r3, r1
 800e748:	4602      	mov	r2, r0
 800e74a:	4649      	mov	r1, r9
 800e74c:	4640      	mov	r0, r8
 800e74e:	f7f1 fd45 	bl	80001dc <__adddf3>
 800e752:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e756:	9b01      	ldr	r3, [sp, #4]
 800e758:	3551      	adds	r5, #81	; 0x51
 800e75a:	431d      	orrs	r5, r3
 800e75c:	2d00      	cmp	r5, #0
 800e75e:	4680      	mov	r8, r0
 800e760:	4689      	mov	r9, r1
 800e762:	dd48      	ble.n	800e7f6 <__ieee754_log+0x2c6>
 800e764:	4b4e      	ldr	r3, [pc, #312]	; (800e8a0 <__ieee754_log+0x370>)
 800e766:	2200      	movs	r2, #0
 800e768:	4650      	mov	r0, sl
 800e76a:	4659      	mov	r1, fp
 800e76c:	f7f1 feec 	bl	8000548 <__aeabi_dmul>
 800e770:	4652      	mov	r2, sl
 800e772:	465b      	mov	r3, fp
 800e774:	f7f1 fee8 	bl	8000548 <__aeabi_dmul>
 800e778:	4602      	mov	r2, r0
 800e77a:	460b      	mov	r3, r1
 800e77c:	4606      	mov	r6, r0
 800e77e:	460f      	mov	r7, r1
 800e780:	4640      	mov	r0, r8
 800e782:	4649      	mov	r1, r9
 800e784:	f7f1 fd2a 	bl	80001dc <__adddf3>
 800e788:	ec53 2b18 	vmov	r2, r3, d8
 800e78c:	f7f1 fedc 	bl	8000548 <__aeabi_dmul>
 800e790:	4680      	mov	r8, r0
 800e792:	4689      	mov	r9, r1
 800e794:	b964      	cbnz	r4, 800e7b0 <__ieee754_log+0x280>
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	4630      	mov	r0, r6
 800e79c:	4639      	mov	r1, r7
 800e79e:	f7f1 fd1b 	bl	80001d8 <__aeabi_dsub>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	4650      	mov	r0, sl
 800e7a8:	4659      	mov	r1, fp
 800e7aa:	f7f1 fd15 	bl	80001d8 <__aeabi_dsub>
 800e7ae:	e6d6      	b.n	800e55e <__ieee754_log+0x2e>
 800e7b0:	a321      	add	r3, pc, #132	; (adr r3, 800e838 <__ieee754_log+0x308>)
 800e7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b6:	ec51 0b19 	vmov	r0, r1, d9
 800e7ba:	f7f1 fec5 	bl	8000548 <__aeabi_dmul>
 800e7be:	a320      	add	r3, pc, #128	; (adr r3, 800e840 <__ieee754_log+0x310>)
 800e7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	460d      	mov	r5, r1
 800e7c8:	ec51 0b19 	vmov	r0, r1, d9
 800e7cc:	f7f1 febc 	bl	8000548 <__aeabi_dmul>
 800e7d0:	4642      	mov	r2, r8
 800e7d2:	464b      	mov	r3, r9
 800e7d4:	f7f1 fd02 	bl	80001dc <__adddf3>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4630      	mov	r0, r6
 800e7de:	4639      	mov	r1, r7
 800e7e0:	f7f1 fcfa 	bl	80001d8 <__aeabi_dsub>
 800e7e4:	4652      	mov	r2, sl
 800e7e6:	465b      	mov	r3, fp
 800e7e8:	f7f1 fcf6 	bl	80001d8 <__aeabi_dsub>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	e7d9      	b.n	800e7aa <__ieee754_log+0x27a>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4650      	mov	r0, sl
 800e7fc:	4659      	mov	r1, fp
 800e7fe:	f7f1 fceb 	bl	80001d8 <__aeabi_dsub>
 800e802:	ec53 2b18 	vmov	r2, r3, d8
 800e806:	f7f1 fe9f 	bl	8000548 <__aeabi_dmul>
 800e80a:	4606      	mov	r6, r0
 800e80c:	460f      	mov	r7, r1
 800e80e:	2c00      	cmp	r4, #0
 800e810:	f43f af23 	beq.w	800e65a <__ieee754_log+0x12a>
 800e814:	a308      	add	r3, pc, #32	; (adr r3, 800e838 <__ieee754_log+0x308>)
 800e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81a:	ec51 0b19 	vmov	r0, r1, d9
 800e81e:	f7f1 fe93 	bl	8000548 <__aeabi_dmul>
 800e822:	a307      	add	r3, pc, #28	; (adr r3, 800e840 <__ieee754_log+0x310>)
 800e824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e828:	4604      	mov	r4, r0
 800e82a:	460d      	mov	r5, r1
 800e82c:	ec51 0b19 	vmov	r0, r1, d9
 800e830:	e727      	b.n	800e682 <__ieee754_log+0x152>
 800e832:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e888 <__ieee754_log+0x358>
 800e836:	e694      	b.n	800e562 <__ieee754_log+0x32>
 800e838:	fee00000 	.word	0xfee00000
 800e83c:	3fe62e42 	.word	0x3fe62e42
 800e840:	35793c76 	.word	0x35793c76
 800e844:	3dea39ef 	.word	0x3dea39ef
 800e848:	55555555 	.word	0x55555555
 800e84c:	3fd55555 	.word	0x3fd55555
 800e850:	df3e5244 	.word	0xdf3e5244
 800e854:	3fc2f112 	.word	0x3fc2f112
 800e858:	96cb03de 	.word	0x96cb03de
 800e85c:	3fc74664 	.word	0x3fc74664
 800e860:	94229359 	.word	0x94229359
 800e864:	3fd24924 	.word	0x3fd24924
 800e868:	55555593 	.word	0x55555593
 800e86c:	3fe55555 	.word	0x3fe55555
 800e870:	d078c69f 	.word	0xd078c69f
 800e874:	3fc39a09 	.word	0x3fc39a09
 800e878:	1d8e78af 	.word	0x1d8e78af
 800e87c:	3fcc71c5 	.word	0x3fcc71c5
 800e880:	9997fa04 	.word	0x9997fa04
 800e884:	3fd99999 	.word	0x3fd99999
	...
 800e890:	c3500000 	.word	0xc3500000
 800e894:	43500000 	.word	0x43500000
 800e898:	7fefffff 	.word	0x7fefffff
 800e89c:	3ff00000 	.word	0x3ff00000
 800e8a0:	3fe00000 	.word	0x3fe00000
 800e8a4:	00000000 	.word	0x00000000

0800e8a8 <nan>:
 800e8a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e8b0 <nan+0x8>
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	00000000 	.word	0x00000000
 800e8b4:	7ff80000 	.word	0x7ff80000

0800e8b8 <_init>:
 800e8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ba:	bf00      	nop
 800e8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8be:	bc08      	pop	{r3}
 800e8c0:	469e      	mov	lr, r3
 800e8c2:	4770      	bx	lr

0800e8c4 <_fini>:
 800e8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c6:	bf00      	nop
 800e8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ca:	bc08      	pop	{r3}
 800e8cc:	469e      	mov	lr, r3
 800e8ce:	4770      	bx	lr
