
csro_general_ctrl_2021_10_31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020cc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f54  08020e58  08020e58  00030e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024dac  08024dac  0004015c  2**0
                  CONTENTS
  4 .ARM          00000008  08024dac  08024dac  00034dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024db4  08024db4  0004015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024db4  08024db4  00034db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024db8  08024db8  00034db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08024dbc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004015c  2**0
                  CONTENTS
 10 .bss          0000e8f0  2000015c  2000015c  0004015c  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  2000ea4c  2000ea4c  0004015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005cd2d  00000000  00000000  0004018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000abe9  00000000  00000000  0009ceb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ca0  00000000  00000000  000a7aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a58  00000000  00000000  000aa748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000385bd  00000000  00000000  000ad1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00049c4b  00000000  00000000  000e575d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104436  00000000  00000000  0012f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002337de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c178  00000000  00000000  00233834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020e40 	.word	0x08020e40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	08020e40 	.word	0x08020e40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b75      	ldr	r3, [pc, #468]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000ef4:	4a75      	ldr	r2, [pc, #468]	; (80010cc <MX_ADC1_Init+0x1ec>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef8:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f00:	4b71      	ldr	r3, [pc, #452]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f06:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f0c:	4b6e      	ldr	r3, [pc, #440]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f12:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1a:	4b6b      	ldr	r3, [pc, #428]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b69      	ldr	r3, [pc, #420]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f22:	4a6b      	ldr	r2, [pc, #428]	; (80010d0 <MX_ADC1_Init+0x1f0>)
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f26:	4b68      	ldr	r3, [pc, #416]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000f2c:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f2e:	220d      	movs	r2, #13
 8000f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f32:	4b65      	ldr	r3, [pc, #404]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f40:	4861      	ldr	r0, [pc, #388]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f42:	f002 fd6b 	bl	8003a1c <HAL_ADC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 fd86 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f50:	2305      	movs	r3, #5
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f58:	2306      	movs	r3, #6
 8000f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4859      	ldr	r0, [pc, #356]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f62:	f002 fecd 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f6c:	f000 fd76 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f70:	2306      	movs	r3, #6
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4852      	ldr	r0, [pc, #328]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f7e:	f002 febf 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f88:	f000 fd68 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f90:	2303      	movs	r3, #3
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	484b      	ldr	r0, [pc, #300]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f9a:	f002 feb1 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000fa4:	f000 fd5a 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fa8:	230a      	movs	r3, #10
 8000faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4844      	ldr	r0, [pc, #272]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000fb6:	f002 fea3 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000fc0:	f000 fd4c 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	483d      	ldr	r0, [pc, #244]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000fd2:	f002 fe95 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000fdc:	f000 fd3e 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fe0:	230d      	movs	r3, #13
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4836      	ldr	r0, [pc, #216]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000fee:	f002 fe87 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000ff8:	f000 fd30 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001000:	2307      	movs	r3, #7
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	482f      	ldr	r0, [pc, #188]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 800100a:	f002 fe79 	bl	8003d00 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001014:	f000 fd22 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001018:	2303      	movs	r3, #3
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800101c:	2308      	movs	r3, #8
 800101e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4828      	ldr	r0, [pc, #160]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8001026:	f002 fe6b 	bl	8003d00 <HAL_ADC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001030:	f000 fd14 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001034:	2304      	movs	r3, #4
 8001036:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001038:	2309      	movs	r3, #9
 800103a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4821      	ldr	r0, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8001042:	f002 fe5d 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800104c:	f000 fd06 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001050:	2309      	movs	r3, #9
 8001052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001054:	230a      	movs	r3, #10
 8001056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	481a      	ldr	r0, [pc, #104]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 800105e:	f002 fe4f 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001068:	f000 fcf8 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800106c:	2310      	movs	r3, #16
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001070:	230b      	movs	r3, #11
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4813      	ldr	r0, [pc, #76]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 800107a:	f002 fe41 	bl	8003d00 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001084:	f000 fcea 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001088:	2311      	movs	r3, #17
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800108c:	230c      	movs	r3, #12
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8001096:	f002 fe33 	bl	8003d00 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80010a0:	f000 fcdc 	bl	8001a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80010a4:	2312      	movs	r3, #18
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80010a8:	230d      	movs	r3, #13
 80010aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 80010b2:	f002 fe25 	bl	8003d00 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80010bc:	f000 fcce 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200060fc 	.word	0x200060fc
 80010cc:	40012000 	.word	0x40012000
 80010d0:	0f000001 	.word	0x0f000001

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a49      	ldr	r2, [pc, #292]	; (8001218 <HAL_ADC_MspInit+0x144>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f040 808c 	bne.w	8001210 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	4b47      	ldr	r3, [pc, #284]	; (800121c <HAL_ADC_MspInit+0x148>)
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	4a46      	ldr	r2, [pc, #280]	; (800121c <HAL_ADC_MspInit+0x148>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	6453      	str	r3, [r2, #68]	; 0x44
 8001108:	4b44      	ldr	r3, [pc, #272]	; (800121c <HAL_ADC_MspInit+0x148>)
 800110a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	4b40      	ldr	r3, [pc, #256]	; (800121c <HAL_ADC_MspInit+0x148>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a3f      	ldr	r2, [pc, #252]	; (800121c <HAL_ADC_MspInit+0x148>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_ADC_MspInit+0x148>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	4b39      	ldr	r3, [pc, #228]	; (800121c <HAL_ADC_MspInit+0x148>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a38      	ldr	r2, [pc, #224]	; (800121c <HAL_ADC_MspInit+0x148>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_ADC_MspInit+0x148>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b32      	ldr	r3, [pc, #200]	; (800121c <HAL_ADC_MspInit+0x148>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a31      	ldr	r2, [pc, #196]	; (800121c <HAL_ADC_MspInit+0x148>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_ADC_MspInit+0x148>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = NTC_01_Pin|NTC_02_Pin|NTC_03_Pin;
 8001168:	230d      	movs	r3, #13
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4829      	ldr	r0, [pc, #164]	; (8001220 <HAL_ADC_MspInit+0x14c>)
 800117c:	f004 feea 	bl	8005f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_04_Pin|NTC_05_Pin|NTC_06_Pin|DP_01_Pin
 8001180:	2379      	movs	r3, #121	; 0x79
 8001182:	61fb      	str	r3, [r7, #28]
                          |DP_02_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4824      	ldr	r0, [pc, #144]	; (8001224 <HAL_ADC_MspInit+0x150>)
 8001194:	f004 fede 	bl	8005f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DP_03_Pin|VAL_FB_Pin;
 8001198:	2303      	movs	r3, #3
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	481f      	ldr	r0, [pc, #124]	; (8001228 <HAL_ADC_MspInit+0x154>)
 80011ac:	f004 fed2 	bl	8005f54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011b2:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <HAL_ADC_MspInit+0x15c>)
 80011b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <HAL_ADC_MspInit+0x158>)
 80011f6:	f003 f905 	bl	8004404 <HAL_DMA_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001200:	f000 fc2c 	bl	8001a5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_ADC_MspInit+0x158>)
 8001208:	639a      	str	r2, [r3, #56]	; 0x38
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_ADC_MspInit+0x158>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001210:	bf00      	nop
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40012000 	.word	0x40012000
 800121c:	40023800 	.word	0x40023800
 8001220:	40020800 	.word	0x40020800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	20006144 	.word	0x20006144
 8001230:	40026410 	.word	0x40026410

08001234 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <MX_DMA_Init+0xd8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <MX_DMA_Init+0xd8>)
 8001244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <MX_DMA_Init+0xd8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_DMA_Init+0xd8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2b      	ldr	r2, [pc, #172]	; (800130c <MX_DMA_Init+0xd8>)
 8001260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_DMA_Init+0xd8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	200c      	movs	r0, #12
 8001278:	f003 f89a 	bl	80043b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800127c:	200c      	movs	r0, #12
 800127e:	f003 f8b3 	bl	80043e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	200e      	movs	r0, #14
 8001288:	f003 f892 	bl	80043b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800128c:	200e      	movs	r0, #14
 800128e:	f003 f8ab 	bl	80043e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2010      	movs	r0, #16
 8001298:	f003 f88a 	bl	80043b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800129c:	2010      	movs	r0, #16
 800129e:	f003 f8a3 	bl	80043e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2105      	movs	r1, #5
 80012a6:	2011      	movs	r0, #17
 80012a8:	f003 f882 	bl	80043b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012ac:	2011      	movs	r0, #17
 80012ae:	f003 f89b 	bl	80043e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f003 f87a 	bl	80043b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012bc:	2038      	movs	r0, #56	; 0x38
 80012be:	f003 f893 	bl	80043e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	2039      	movs	r0, #57	; 0x39
 80012c8:	f003 f872 	bl	80043b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012cc:	2039      	movs	r0, #57	; 0x39
 80012ce:	f003 f88b 	bl	80043e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	203a      	movs	r0, #58	; 0x3a
 80012d8:	f003 f86a 	bl	80043b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012dc:	203a      	movs	r0, #58	; 0x3a
 80012de:	f003 f883 	bl	80043e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2105      	movs	r1, #5
 80012e6:	2045      	movs	r0, #69	; 0x45
 80012e8:	f003 f862 	bl	80043b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012ec:	2045      	movs	r0, #69	; 0x45
 80012ee:	f003 f87b 	bl	80043e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2105      	movs	r1, #5
 80012f6:	2046      	movs	r0, #70	; 0x46
 80012f8:	f003 f85a 	bl	80043b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012fc:	2046      	movs	r0, #70	; 0x46
 80012fe:	f003 f873 	bl	80043e8 <HAL_NVIC_EnableIRQ>

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  fnd_com_modbus_rtu_init();
 8001314:	f001 fbaa 	bl	8002a6c <fnd_com_modbus_rtu_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8001318:	4a24      	ldr	r2, [pc, #144]	; (80013ac <MX_FREERTOS_Init+0x9c>)
 800131a:	2100      	movs	r1, #0
 800131c:	4824      	ldr	r0, [pc, #144]	; (80013b0 <MX_FREERTOS_Init+0xa0>)
 800131e:	f00a f874 	bl	800b40a <osThreadNew>
 8001322:	4603      	mov	r3, r0
 8001324:	4a23      	ldr	r2, [pc, #140]	; (80013b4 <MX_FREERTOS_Init+0xa4>)
 8001326:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001328:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <MX_FREERTOS_Init+0xa8>)
 800132a:	2100      	movs	r1, #0
 800132c:	4823      	ldr	r0, [pc, #140]	; (80013bc <MX_FREERTOS_Init+0xac>)
 800132e:	f00a f86c 	bl	800b40a <osThreadNew>
 8001332:	4603      	mov	r3, r0
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <MX_FREERTOS_Init+0xb0>)
 8001336:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001338:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <MX_FREERTOS_Init+0xb4>)
 800133a:	2100      	movs	r1, #0
 800133c:	4822      	ldr	r0, [pc, #136]	; (80013c8 <MX_FREERTOS_Init+0xb8>)
 800133e:	f00a f864 	bl	800b40a <osThreadNew>
 8001342:	4603      	mov	r3, r0
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <MX_FREERTOS_Init+0xbc>)
 8001346:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8001348:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <MX_FREERTOS_Init+0xc0>)
 800134a:	2100      	movs	r1, #0
 800134c:	4821      	ldr	r0, [pc, #132]	; (80013d4 <MX_FREERTOS_Init+0xc4>)
 800134e:	f00a f85c 	bl	800b40a <osThreadNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <MX_FREERTOS_Init+0xc8>)
 8001356:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <MX_FREERTOS_Init+0xcc>)
 800135a:	2100      	movs	r1, #0
 800135c:	4820      	ldr	r0, [pc, #128]	; (80013e0 <MX_FREERTOS_Init+0xd0>)
 800135e:	f00a f854 	bl	800b40a <osThreadNew>
 8001362:	4603      	mov	r3, r0
 8001364:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <MX_FREERTOS_Init+0xd4>)
 8001366:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 8001368:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <MX_FREERTOS_Init+0xd8>)
 800136a:	2100      	movs	r1, #0
 800136c:	481f      	ldr	r0, [pc, #124]	; (80013ec <MX_FREERTOS_Init+0xdc>)
 800136e:	f00a f84c 	bl	800b40a <osThreadNew>
 8001372:	4603      	mov	r3, r0
 8001374:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <MX_FREERTOS_Init+0xe0>)
 8001376:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <MX_FREERTOS_Init+0xe4>)
 800137a:	2100      	movs	r1, #0
 800137c:	481e      	ldr	r0, [pc, #120]	; (80013f8 <MX_FREERTOS_Init+0xe8>)
 800137e:	f00a f844 	bl	800b40a <osThreadNew>
 8001382:	4603      	mov	r3, r0
 8001384:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <MX_FREERTOS_Init+0xec>)
 8001386:	6013      	str	r3, [r2, #0]

  /* creation of myTask08 */
  myTask08Handle = osThreadNew(StartTask08, NULL, &myTask08_attributes);
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <MX_FREERTOS_Init+0xf0>)
 800138a:	2100      	movs	r1, #0
 800138c:	481d      	ldr	r0, [pc, #116]	; (8001404 <MX_FREERTOS_Init+0xf4>)
 800138e:	f00a f83c 	bl	800b40a <osThreadNew>
 8001392:	4603      	mov	r3, r0
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <MX_FREERTOS_Init+0xf8>)
 8001396:	6013      	str	r3, [r2, #0]

  /* creation of myTask09 */
  myTask09Handle = osThreadNew(StartTask09, NULL, &myTask09_attributes);
 8001398:	4a1c      	ldr	r2, [pc, #112]	; (800140c <MX_FREERTOS_Init+0xfc>)
 800139a:	2100      	movs	r1, #0
 800139c:	481c      	ldr	r0, [pc, #112]	; (8001410 <MX_FREERTOS_Init+0x100>)
 800139e:	f00a f834 	bl	800b40a <osThreadNew>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <MX_FREERTOS_Init+0x104>)
 80013a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	080247c0 	.word	0x080247c0
 80013b0:	08001419 	.word	0x08001419
 80013b4:	20006208 	.word	0x20006208
 80013b8:	080247e4 	.word	0x080247e4
 80013bc:	0800142f 	.word	0x0800142f
 80013c0:	200061ec 	.word	0x200061ec
 80013c4:	08024808 	.word	0x08024808
 80013c8:	0800143d 	.word	0x0800143d
 80013cc:	20006200 	.word	0x20006200
 80013d0:	0802482c 	.word	0x0802482c
 80013d4:	0800144b 	.word	0x0800144b
 80013d8:	200061b8 	.word	0x200061b8
 80013dc:	08024850 	.word	0x08024850
 80013e0:	08001459 	.word	0x08001459
 80013e4:	200061b4 	.word	0x200061b4
 80013e8:	08024874 	.word	0x08024874
 80013ec:	08001467 	.word	0x08001467
 80013f0:	20006214 	.word	0x20006214
 80013f4:	08024898 	.word	0x08024898
 80013f8:	08001477 	.word	0x08001477
 80013fc:	20006204 	.word	0x20006204
 8001400:	080248bc 	.word	0x080248bc
 8001404:	0800148d 	.word	0x0800148d
 8001408:	200061bc 	.word	0x200061bc
 800140c:	080248e0 	.word	0x080248e0
 8001410:	08001501 	.word	0x08001501
 8001414:	20006210 	.word	0x20006210

08001418 <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001420:	f009 fab0 	bl	800a984 <MX_LWIP_Init>
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 8001424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001428:	f00a f881 	bl	800b52e <osDelay>
 800142c:	e7fa      	b.n	8001424 <StartTask01+0xc>

0800142e <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave1_wait();
 8001436:	f001 fbbf 	bl	8002bb8 <fnd_com_modbus_rtu_slave1_wait>
 800143a:	e7fc      	b.n	8001436 <StartTask02+0x8>

0800143c <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave2_wait();
 8001444:	f001 fbc2 	bl	8002bcc <fnd_com_modbus_rtu_slave2_wait>
 8001448:	e7fc      	b.n	8001444 <StartTask03+0x8>

0800144a <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave3_wait();
 8001452:	f001 fbc5 	bl	8002be0 <fnd_com_modbus_rtu_slave3_wait>
 8001456:	e7fc      	b.n	8001452 <StartTask04+0x8>

08001458 <StartTask05>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave4_wait();
 8001460:	f001 fbc8 	bl	8002bf4 <fnd_com_modbus_rtu_slave4_wait>
 8001464:	e7fc      	b.n	8001460 <StartTask05+0x8>

08001466 <StartTask06>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f00a f85d 	bl	800b52e <osDelay>
 8001474:	e7fb      	b.n	800146e <StartTask06+0x8>

08001476 <StartTask07>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(10);
 800147e:	200a      	movs	r0, #10
 8001480:	f00a f855 	bl	800b52e <osDelay>
    fnd_output_stepper_10ms_tick();
 8001484:	f002 fa4a 	bl	800391c <fnd_output_stepper_10ms_tick>
    osDelay(10);
 8001488:	e7f9      	b.n	800147e <StartTask07+0x8>
	...

0800148c <StartTask08>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */

  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8001494:	2064      	movs	r0, #100	; 0x64
 8001496:	f00a f84a 	bl	800b52e <osDelay>
    fnd_input_gpio_read_di(di_value);
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <StartTask08+0x4c>)
 800149c:	f001 fcf6 	bl	8002e8c <fnd_input_gpio_read_di>
    fnd_input_gpio_read_id(id_value);
 80014a0:	480e      	ldr	r0, [pc, #56]	; (80014dc <StartTask08+0x50>)
 80014a2:	f001 fd21 	bl	8002ee8 <fnd_input_gpio_read_id>

    fnd_input_adc_read_dp(&adc_value[0]);
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <StartTask08+0x54>)
 80014a8:	f001 fc4e 	bl	8002d48 <fnd_input_adc_read_dp>
    fnd_input_adc_read_ntc(&adc_value[3]);
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <StartTask08+0x58>)
 80014ae:	f001 fc6b 	bl	8002d88 <fnd_input_adc_read_ntc>
    fnd_input_adc_read_val_fb(&adc_value[9]);
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <StartTask08+0x5c>)
 80014b4:	f001 fcc8 	bl	8002e48 <fnd_input_adc_read_val_fb>

    fnd_input_i2c_read_sht(sht_value);
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <StartTask08+0x60>)
 80014ba:	f001 fe55 	bl	8003168 <fnd_input_i2c_read_sht>

    fnd_input_tim_input_read_speed(speed_value);
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <StartTask08+0x64>)
 80014c0:	f001 ff02 	bl	80032c8 <fnd_input_tim_input_read_speed>

    fnd_output_gpio_write_do(do_value);
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <StartTask08+0x68>)
 80014c6:	f001 ff25 	bl	8003314 <fnd_output_gpio_write_do>
    fnd_output_pwm_write_value(pwm_value);
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <StartTask08+0x6c>)
 80014cc:	f001 ff6a 	bl	80033a4 <fnd_output_pwm_write_value>
    fnd_output_stepper_set_position(step_value);
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <StartTask08+0x70>)
 80014d2:	f002 fa03 	bl	80038dc <fnd_output_stepper_set_position>
    osDelay(100);
 80014d6:	e7dd      	b.n	8001494 <StartTask08+0x8>
 80014d8:	200061e8 	.word	0x200061e8
 80014dc:	200061a4 	.word	0x200061a4
 80014e0:	200061c0 	.word	0x200061c0
 80014e4:	200061cc 	.word	0x200061cc
 80014e8:	200061e4 	.word	0x200061e4
 80014ec:	20006218 	.word	0x20006218
 80014f0:	2000620c 	.word	0x2000620c
 80014f4:	200061ac 	.word	0x200061ac
 80014f8:	200061f8 	.word	0x200061f8
 80014fc:	200061f0 	.word	0x200061f0

08001500 <StartTask09>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask09 */
void StartTask09(void *argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask09 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(200);
 8001508:	20c8      	movs	r0, #200	; 0xc8
 800150a:	f00a f810 	bl	800b52e <osDelay>
    HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 800150e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001512:	4802      	ldr	r0, [pc, #8]	; (800151c <StartTask09+0x1c>)
 8001514:	f004 feeb 	bl	80062ee <HAL_GPIO_TogglePin>
    osDelay(200);
 8001518:	e7f6      	b.n	8001508 <StartTask09+0x8>
 800151a:	bf00      	nop
 800151c:	40020800 	.word	0x40020800

08001520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <MX_GPIO_Init+0x1e8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a72      	ldr	r2, [pc, #456]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b70      	ldr	r3, [pc, #448]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a6b      	ldr	r2, [pc, #428]	; (8001708 <MX_GPIO_Init+0x1e8>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b69      	ldr	r3, [pc, #420]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b65      	ldr	r3, [pc, #404]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a64      	ldr	r2, [pc, #400]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b62      	ldr	r3, [pc, #392]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a5d      	ldr	r2, [pc, #372]	; (8001708 <MX_GPIO_Init+0x1e8>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b5b      	ldr	r3, [pc, #364]	; (8001708 <MX_GPIO_Init+0x1e8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b57      	ldr	r3, [pc, #348]	; (8001708 <MX_GPIO_Init+0x1e8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a56      	ldr	r2, [pc, #344]	; (8001708 <MX_GPIO_Init+0x1e8>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <MX_GPIO_Init+0x1e8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RLY_05_Pin|RLY_06_Pin|ID_LD_Pin|ID_CLK_Pin
 80015c2:	2200      	movs	r2, #0
 80015c4:	f24f 51ef 	movw	r1, #62959	; 0xf5ef
 80015c8:	4850      	ldr	r0, [pc, #320]	; (800170c <MX_GPIO_Init+0x1ec>)
 80015ca:	f004 fe77 	bl	80062bc <HAL_GPIO_WritePin>
                          |STEP_B4_Pin|STEP_B3_Pin|STEP_B2_Pin|STEP_B1_Pin
                          |STEP_A8_Pin|STEP_A7_Pin|STEP_A6_Pin|RLY_03_Pin
                          |RLY_04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_B8_Pin|STEP_B7_Pin|STEP_B6_Pin|LED_01_Pin
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 417d 	mov.w	r1, #64768	; 0xfd00
 80015d4:	484e      	ldr	r0, [pc, #312]	; (8001710 <MX_GPIO_Init+0x1f0>)
 80015d6:	f004 fe71 	bl	80062bc <HAL_GPIO_WritePin>
                          |DS1302_CLK_Pin|DS1302_IO_Pin|DS1302_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_B5_Pin|ETH_RSTN_Pin|STEP_A5_Pin|RS485_EN3_Pin
 80015da:	2200      	movs	r2, #0
 80015dc:	f24c 7104 	movw	r1, #50948	; 0xc704
 80015e0:	484c      	ldr	r0, [pc, #304]	; (8001714 <MX_GPIO_Init+0x1f4>)
 80015e2:	f004 fe6b 	bl	80062bc <HAL_GPIO_WritePin>
                          |RLY_01_Pin|RLY_02_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP_A4_Pin|STEP_A3_Pin|STEP_A2_Pin|STEP_A1_Pin
 80015e6:	2200      	movs	r2, #0
 80015e8:	f64b 4110 	movw	r1, #48144	; 0xbc10
 80015ec:	484a      	ldr	r0, [pc, #296]	; (8001718 <MX_GPIO_Init+0x1f8>)
 80015ee:	f004 fe65 	bl	80062bc <HAL_GPIO_WritePin>
                          |RS485_EN4_Pin|RS485_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN1_GPIO_Port, RS485_EN1_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f8:	4848      	ldr	r0, [pc, #288]	; (800171c <MX_GPIO_Init+0x1fc>)
 80015fa:	f004 fe5f 	bl	80062bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = RLY_05_Pin|RLY_06_Pin|ID_LD_Pin|ID_CLK_Pin
 80015fe:	f24f 53ef 	movw	r3, #62959	; 0xf5ef
 8001602:	617b      	str	r3, [r7, #20]
                          |STEP_B4_Pin|STEP_B3_Pin|STEP_B2_Pin|STEP_B1_Pin
                          |STEP_A8_Pin|STEP_A7_Pin|STEP_A6_Pin|RLY_03_Pin
                          |RLY_04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	483d      	ldr	r0, [pc, #244]	; (800170c <MX_GPIO_Init+0x1ec>)
 8001618:	f004 fc9c 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ID_DATA_Pin;
 800161c:	2310      	movs	r3, #16
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ID_DATA_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	4837      	ldr	r0, [pc, #220]	; (800170c <MX_GPIO_Init+0x1ec>)
 8001630:	f004 fc90 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_B8_Pin|STEP_B7_Pin|STEP_B6_Pin|LED_01_Pin
 8001634:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8001638:	617b      	str	r3, [r7, #20]
                          |DS1302_CLK_Pin|DS1302_IO_Pin|DS1302_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4830      	ldr	r0, [pc, #192]	; (8001710 <MX_GPIO_Init+0x1f0>)
 800164e:	f004 fc81 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = STEP_B5_Pin|ETH_RSTN_Pin|STEP_A5_Pin|RLY_01_Pin
 8001652:	f244 7304 	movw	r3, #18180	; 0x4704
 8001656:	617b      	str	r3, [r7, #20]
                          |RLY_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	482a      	ldr	r0, [pc, #168]	; (8001714 <MX_GPIO_Init+0x1f4>)
 800166c:	f004 fc72 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_EN3_Pin;
 8001670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800167a:	2302      	movs	r3, #2
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN3_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4822      	ldr	r0, [pc, #136]	; (8001714 <MX_GPIO_Init+0x1f4>)
 800168a:	f004 fc63 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STEP_A4_Pin|STEP_A3_Pin|STEP_A2_Pin|STEP_A1_Pin;
 800168e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	481c      	ldr	r0, [pc, #112]	; (8001718 <MX_GPIO_Init+0x1f8>)
 80016a8:	f004 fc54 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RS485_EN4_Pin|RS485_EN2_Pin;
 80016ac:	f248 0310 	movw	r3, #32784	; 0x8010
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4814      	ldr	r0, [pc, #80]	; (8001718 <MX_GPIO_Init+0x1f8>)
 80016c6:	f004 fc45 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_EN1_Pin;
 80016ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN1_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <MX_GPIO_Init+0x1fc>)
 80016e4:	f004 fc36 	bl	8005f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_04_Pin|DI_03_Pin|DI_02_Pin|DI_01_Pin;
 80016e8:	230f      	movs	r3, #15
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4807      	ldr	r0, [pc, #28]	; (8001718 <MX_GPIO_Init+0x1f8>)
 80016fc:	f004 fc2a 	bl	8005f54 <HAL_GPIO_Init>

}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	; 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40021000 	.word	0x40021000
 8001710:	40020800 	.word	0x40020800
 8001714:	40020400 	.word	0x40020400
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40020000 	.word	0x40020000

08001720 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C1_Init+0x50>)
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <MX_I2C1_Init+0x54>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C1_Init+0x50>)
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <MX_I2C1_Init+0x58>)
 800172e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C1_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_I2C1_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_I2C1_Init+0x50>)
 800173e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_I2C1_Init+0x50>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_I2C1_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_I2C1_Init+0x50>)
 800175e:	f004 fde1 	bl	8006324 <HAL_I2C_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001768:	f000 f978 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000627c 	.word	0x2000627c
 8001774:	40005400 	.word	0x40005400
 8001778:	000186a0 	.word	0x000186a0

0800177c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_I2C3_Init+0x50>)
 8001782:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <MX_I2C3_Init+0x54>)
 8001784:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_I2C3_Init+0x50>)
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <MX_I2C3_Init+0x58>)
 800178a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_I2C3_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_I2C3_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_I2C3_Init+0x50>)
 800179a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <MX_I2C3_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_I2C3_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <MX_I2C3_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_I2C3_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_I2C3_Init+0x50>)
 80017ba:	f004 fdb3 	bl	8006324 <HAL_I2C_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017c4:	f000 f94a 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20006228 	.word	0x20006228
 80017d0:	40005c00 	.word	0x40005c00
 80017d4:	000186a0 	.word	0x000186a0

080017d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a42      	ldr	r2, [pc, #264]	; (8001900 <HAL_I2C_MspInit+0x128>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12c      	bne.n	8001854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a40      	ldr	r2, [pc, #256]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TH_SCL1_Pin|TH_SDA1_Pin;
 8001816:	23c0      	movs	r3, #192	; 0xc0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181a:	2312      	movs	r3, #18
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001826:	2304      	movs	r3, #4
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4835      	ldr	r0, [pc, #212]	; (8001908 <HAL_I2C_MspInit+0x130>)
 8001832:	f004 fb8f 	bl	8005f54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 8001840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001852:	e050      	b.n	80018f6 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2c      	ldr	r2, [pc, #176]	; (800190c <HAL_I2C_MspInit+0x134>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d14b      	bne.n	80018f6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TH_SDA2_Pin;
 8001896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189c:	2312      	movs	r3, #18
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018a8:	2304      	movs	r3, #4
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TH_SDA2_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4817      	ldr	r0, [pc, #92]	; (8001910 <HAL_I2C_MspInit+0x138>)
 80018b4:	f004 fb4e 	bl	8005f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TH_SCL2_Pin;
 80018b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018be:	2312      	movs	r3, #18
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018ca:	2304      	movs	r3, #4
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TH_SCL2_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	480f      	ldr	r0, [pc, #60]	; (8001914 <HAL_I2C_MspInit+0x13c>)
 80018d6:	f004 fb3d 	bl	8005f54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 80018e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_I2C_MspInit+0x12c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
}
 80018f6:	bf00      	nop
 80018f8:	3730      	adds	r7, #48	; 0x30
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40005400 	.word	0x40005400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400
 800190c:	40005c00 	.word	0x40005c00
 8001910:	40020800 	.word	0x40020800
 8001914:	40020000 	.word	0x40020000

08001918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191c:	f002 f818 	bl	8003950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001920:	f000 f820 	bl	8001964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001924:	f7ff fdfc 	bl	8001520 <MX_GPIO_Init>
  MX_DMA_Init();
 8001928:	f7ff fc84 	bl	8001234 <MX_DMA_Init>
  MX_ADC1_Init();
 800192c:	f7ff fad8 	bl	8000ee0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001930:	f000 fd24 	bl	800237c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001934:	f000 fd4c 	bl	80023d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001938:	f000 fd74 	bl	8002424 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800193c:	f000 fd9c 	bl	8002478 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001940:	f7ff feee 	bl	8001720 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001944:	f7ff ff1a 	bl	800177c <MX_I2C3_Init>
  MX_TIM1_Init();
 8001948:	f000 faa4 	bl	8001e94 <MX_TIM1_Init>
  MX_TIM2_Init();
 800194c:	f000 fb52 	bl	8001ff4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001950:	f000 fbc6 	bl	80020e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001954:	f009 fcfa 	bl	800b34c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001958:	f7ff fcda 	bl	8001310 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800195c:	f009 fd1a 	bl	800b394 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001960:	e7fe      	b.n	8001960 <main+0x48>
	...

08001964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b094      	sub	sp, #80	; 0x50
 8001968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	2230      	movs	r2, #48	; 0x30
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f01e f8bd 	bl	801faf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <SystemClock_Config+0xcc>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <SystemClock_Config+0xcc>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001996:	6413      	str	r3, [r2, #64]	; 0x40
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <SystemClock_Config+0xcc>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <SystemClock_Config+0xd0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <SystemClock_Config+0xd0>)
 80019ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <SystemClock_Config+0xd0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c0:	2302      	movs	r3, #2
 80019c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c8:	2310      	movs	r3, #16
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019cc:	2302      	movs	r3, #2
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019d4:	2308      	movs	r3, #8
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019d8:	23a8      	movs	r3, #168	; 0xa8
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019dc:	2302      	movs	r3, #2
 80019de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019e0:	2304      	movs	r3, #4
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4618      	mov	r0, r3
 80019ea:	f005 fd5f 	bl	80074ac <HAL_RCC_OscConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019f4:	f000 f832 	bl	8001a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f8:	230f      	movs	r3, #15
 80019fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fc:	2302      	movs	r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2105      	movs	r1, #5
 8001a16:	4618      	mov	r0, r3
 8001a18:	f005 ffc0 	bl	800799c <HAL_RCC_ClockConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a22:	f000 f81b 	bl	8001a5c <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3750      	adds	r7, #80	; 0x50
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000

08001a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a4a:	f001 ffa3 	bl	8003994 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40002000 	.word	0x40002000

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <Error_Handler+0x8>
	...

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_MspInit+0x54>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_MspInit+0x54>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_MspInit+0x54>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_MspInit+0x54>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_MspInit+0x54>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_MspInit+0x54>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	210f      	movs	r1, #15
 8001aaa:	f06f 0001 	mvn.w	r0, #1
 8001aae:	f002 fc7f 	bl	80043b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	202d      	movs	r0, #45	; 0x2d
 8001ad6:	f002 fc6b 	bl	80043b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001ada:	202d      	movs	r0, #45	; 0x2d
 8001adc:	f002 fc84 	bl	80043e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_InitTick+0xa4>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_InitTick+0xa4>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_InitTick+0xa4>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001afc:	f107 0210 	add.w	r2, r7, #16
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f006 f918 	bl	8007d3c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b0c:	f006 f8ee 	bl	8007cec <HAL_RCC_GetPCLK1Freq>
 8001b10:	4603      	mov	r3, r0
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <HAL_InitTick+0xa8>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0c9b      	lsrs	r3, r3, #18
 8001b20:	3b01      	subs	r3, #1
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_InitTick+0xac>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_InitTick+0xb0>)
 8001b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_InitTick+0xac>)
 8001b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b30:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_InitTick+0xac>)
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_InitTick+0xac>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_InitTick+0xac>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <HAL_InitTick+0xac>)
 8001b46:	f006 f92b 	bl	8007da0 <HAL_TIM_Base_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d104      	bne.n	8001b5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001b50:	4806      	ldr	r0, [pc, #24]	; (8001b6c <HAL_InitTick+0xac>)
 8001b52:	f006 f975 	bl	8007e40 <HAL_TIM_Base_Start_IT>
 8001b56:	4603      	mov	r3, r0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3730      	adds	r7, #48	; 0x30
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	431bde83 	.word	0x431bde83
 8001b6c:	200062d0 	.word	0x200062d0
 8001b70:	40002000 	.word	0x40002000

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <DMA1_Stream1_IRQHandler+0x10>)
 8001ba6:	f002 fdc5 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200064b0 	.word	0x200064b0

08001bb4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <DMA1_Stream3_IRQHandler+0x10>)
 8001bba:	f002 fdbb 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20006554 	.word	0x20006554

08001bc8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <DMA1_Stream5_IRQHandler+0x10>)
 8001bce:	f002 fdb1 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200063f0 	.word	0x200063f0

08001bdc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <DMA1_Stream6_IRQHandler+0x10>)
 8001be2:	f002 fda7 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200066d4 	.word	0x200066d4

08001bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart1);
 8001bf4:	4803      	ldr	r0, [pc, #12]	; (8001c04 <USART1_IRQHandler+0x14>)
 8001bf6:	f000 ff67 	bl	8002ac8 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <USART1_IRQHandler+0x14>)
 8001bfc:	f007 fe18 	bl	8009830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20006734 	.word	0x20006734

08001c08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart2);
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <USART2_IRQHandler+0x14>)
 8001c0e:	f000 ff5b 	bl	8002ac8 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c12:	4802      	ldr	r0, [pc, #8]	; (8001c1c <USART2_IRQHandler+0x14>)
 8001c14:	f007 fe0c 	bl	8009830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200067bc 	.word	0x200067bc

08001c20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart3);
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <USART3_IRQHandler+0x14>)
 8001c26:	f000 ff4f 	bl	8002ac8 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c2a:	4802      	ldr	r0, [pc, #8]	; (8001c34 <USART3_IRQHandler+0x14>)
 8001c2c:	f007 fe00 	bl	8009830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20006510 	.word	0x20006510

08001c38 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c3e:	f006 fc13 	bl	8008468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200062d0 	.word	0x200062d0

08001c4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA2_Stream0_IRQHandler+0x10>)
 8001c52:	f002 fd6f 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20006144 	.word	0x20006144

08001c60 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <DMA2_Stream1_IRQHandler+0x10>)
 8001c66:	f002 fd65 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20006450 	.word	0x20006450

08001c74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <DMA2_Stream2_IRQHandler+0x10>)
 8001c7a:	f002 fd5b 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20006674 	.word	0x20006674

08001c88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <ETH_IRQHandler+0x10>)
 8001c8e:	f003 fb9f 	bl	80053d0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20009a64 	.word	0x20009a64

08001c9c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <DMA2_Stream6_IRQHandler+0x10>)
 8001ca2:	f002 fd47 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20006614 	.word	0x20006614

08001cb0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <DMA2_Stream7_IRQHandler+0x10>)
 8001cb6:	f002 fd3d 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200065b4 	.word	0x200065b4

08001cc4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart6);
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <USART6_IRQHandler+0x14>)
 8001cca:	f000 fefd 	bl	8002ac8 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cce:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <USART6_IRQHandler+0x14>)
 8001cd0:	f007 fdae 	bl	8009830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20006778 	.word	0x20006778

08001cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
	return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_kill>:

int _kill(int pid, int sig)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <_kill+0x20>)
 8001cf8:	2216      	movs	r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
	return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	2000ea38 	.word	0x2000ea38

08001d10 <_exit>:

void _exit (int status)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ffe5 	bl	8001cec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d22:	e7fe      	b.n	8001d22 <_exit+0x12>

08001d24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e00a      	b.n	8001d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d36:	f3af 8000 	nop.w
 8001d3a:	4601      	mov	r1, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60ba      	str	r2, [r7, #8]
 8001d42:	b2ca      	uxtb	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbf0      	blt.n	8001d36 <_read+0x12>
	}

return len;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e009      	b.n	8001d84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	60ba      	str	r2, [r7, #8]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf1      	blt.n	8001d70 <_write+0x12>
	}
	return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_close>:

int _close(int file)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_isatty>:

int _isatty(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
	return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d205      	bcs.n	8001e3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <_sbrk+0x6c>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	20020000 	.word	0x20020000
 8001e60:	00000800 	.word	0x00000800
 8001e64:	20000178 	.word	0x20000178
 8001e68:	2000ea50 	.word	0x2000ea50
 8001e6c:	2000ea38 	.word	0x2000ea38

08001e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <SystemInit+0x20>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <SystemInit+0x20>)
 8001e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b096      	sub	sp, #88	; 0x58
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
 8001ec2:	615a      	str	r2, [r3, #20]
 8001ec4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2220      	movs	r2, #32
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f01d fe10 	bl	801faf2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ed2:	4b46      	ldr	r3, [pc, #280]	; (8001fec <MX_TIM1_Init+0x158>)
 8001ed4:	4a46      	ldr	r2, [pc, #280]	; (8001ff0 <MX_TIM1_Init+0x15c>)
 8001ed6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001ed8:	4b44      	ldr	r3, [pc, #272]	; (8001fec <MX_TIM1_Init+0x158>)
 8001eda:	22a7      	movs	r2, #167	; 0xa7
 8001edc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ede:	4b43      	ldr	r3, [pc, #268]	; (8001fec <MX_TIM1_Init+0x158>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001ee4:	4b41      	ldr	r3, [pc, #260]	; (8001fec <MX_TIM1_Init+0x158>)
 8001ee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <MX_TIM1_Init+0x158>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <MX_TIM1_Init+0x158>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef8:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <MX_TIM1_Init+0x158>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001efe:	483b      	ldr	r0, [pc, #236]	; (8001fec <MX_TIM1_Init+0x158>)
 8001f00:	f005 ff4e 	bl	8007da0 <HAL_TIM_Base_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f0a:	f7ff fda7 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4834      	ldr	r0, [pc, #208]	; (8001fec <MX_TIM1_Init+0x158>)
 8001f1c:	f006 fd0a 	bl	8008934 <HAL_TIM_ConfigClockSource>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f26:	f7ff fd99 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f2a:	4830      	ldr	r0, [pc, #192]	; (8001fec <MX_TIM1_Init+0x158>)
 8001f2c:	f005 fff8 	bl	8007f20 <HAL_TIM_PWM_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f36:	f7ff fd91 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f46:	4619      	mov	r1, r3
 8001f48:	4828      	ldr	r0, [pc, #160]	; (8001fec <MX_TIM1_Init+0x158>)
 8001f4a:	f007 fa13 	bl	8009374 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f54:	f7ff fd82 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f58:	2360      	movs	r3, #96	; 0x60
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 199;
 8001f5c:	23c7      	movs	r3, #199	; 0xc7
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481b      	ldr	r0, [pc, #108]	; (8001fec <MX_TIM1_Init+0x158>)
 8001f7e:	f006 fc17 	bl	80087b0 <HAL_TIM_PWM_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001f88:	f7ff fd68 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.Pulse = 399;
 8001f8c:	f240 138f 	movw	r3, #399	; 0x18f
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f96:	2204      	movs	r2, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4814      	ldr	r0, [pc, #80]	; (8001fec <MX_TIM1_Init+0x158>)
 8001f9c:	f006 fc08 	bl	80087b0 <HAL_TIM_PWM_ConfigChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001fa6:	f7ff fd59 	bl	8001a5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4807      	ldr	r0, [pc, #28]	; (8001fec <MX_TIM1_Init+0x158>)
 8001fce:	f007 fa4d 	bl	800946c <HAL_TIMEx_ConfigBreakDeadTime>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001fd8:	f7ff fd40 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fdc:	4803      	ldr	r0, [pc, #12]	; (8001fec <MX_TIM1_Init+0x158>)
 8001fde:	f000 f96d 	bl	80022bc <HAL_TIM_MspPostInit>

}
 8001fe2:	bf00      	nop
 8001fe4:	3758      	adds	r7, #88	; 0x58
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20006360 	.word	0x20006360
 8001ff0:	40010000 	.word	0x40010000

08001ff4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	; 0x38
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	f107 0320 	add.w	r3, r7, #32
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
 8002020:	615a      	str	r2, [r3, #20]
 8002022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <MX_TIM2_Init+0xe8>)
 8002026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800202a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <MX_TIM2_Init+0xe8>)
 800202e:	22a7      	movs	r2, #167	; 0xa7
 8002030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <MX_TIM2_Init+0xe8>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <MX_TIM2_Init+0xe8>)
 800203a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800203e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	4b26      	ldr	r3, [pc, #152]	; (80020dc <MX_TIM2_Init+0xe8>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b25      	ldr	r3, [pc, #148]	; (80020dc <MX_TIM2_Init+0xe8>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800204c:	4823      	ldr	r0, [pc, #140]	; (80020dc <MX_TIM2_Init+0xe8>)
 800204e:	f005 fea7 	bl	8007da0 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002058:	f7ff fd00 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002066:	4619      	mov	r1, r3
 8002068:	481c      	ldr	r0, [pc, #112]	; (80020dc <MX_TIM2_Init+0xe8>)
 800206a:	f006 fc63 	bl	8008934 <HAL_TIM_ConfigClockSource>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002074:	f7ff fcf2 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002078:	4818      	ldr	r0, [pc, #96]	; (80020dc <MX_TIM2_Init+0xe8>)
 800207a:	f005 ff51 	bl	8007f20 <HAL_TIM_PWM_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002084:	f7ff fcea 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002090:	f107 0320 	add.w	r3, r7, #32
 8002094:	4619      	mov	r1, r3
 8002096:	4811      	ldr	r0, [pc, #68]	; (80020dc <MX_TIM2_Init+0xe8>)
 8002098:	f007 f96c 	bl	8009374 <HAL_TIMEx_MasterConfigSynchronization>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020a2:	f7ff fcdb 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a6:	2360      	movs	r3, #96	; 0x60
 80020a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 599;
 80020aa:	f240 2357 	movw	r3, #599	; 0x257
 80020ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	2204      	movs	r2, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <MX_TIM2_Init+0xe8>)
 80020c0:	f006 fb76 	bl	80087b0 <HAL_TIM_PWM_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80020ca:	f7ff fcc7 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020ce:	4803      	ldr	r0, [pc, #12]	; (80020dc <MX_TIM2_Init+0xe8>)
 80020d0:	f000 f8f4 	bl	80022bc <HAL_TIM_MspPostInit>

}
 80020d4:	bf00      	nop
 80020d6:	3738      	adds	r7, #56	; 0x38
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200063a8 	.word	0x200063a8

080020e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0318 	add.w	r3, r7, #24
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020fe:	463b      	mov	r3, r7
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <MX_TIM3_Init+0xf0>)
 800210c:	4a31      	ldr	r2, [pc, #196]	; (80021d4 <MX_TIM3_Init+0xf4>)
 800210e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <MX_TIM3_Init+0xf0>)
 8002112:	22a7      	movs	r2, #167	; 0xa7
 8002114:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <MX_TIM3_Init+0xf0>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <MX_TIM3_Init+0xf0>)
 800211e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <MX_TIM3_Init+0xf0>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <MX_TIM3_Init+0xf0>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002130:	4827      	ldr	r0, [pc, #156]	; (80021d0 <MX_TIM3_Init+0xf0>)
 8002132:	f005 fe35 	bl	8007da0 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800213c:	f7ff fc8e 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002144:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0318 	add.w	r3, r7, #24
 800214a:	4619      	mov	r1, r3
 800214c:	4820      	ldr	r0, [pc, #128]	; (80021d0 <MX_TIM3_Init+0xf0>)
 800214e:	f006 fbf1 	bl	8008934 <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002158:	f7ff fc80 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800215c:	481c      	ldr	r0, [pc, #112]	; (80021d0 <MX_TIM3_Init+0xf0>)
 800215e:	f006 f801 	bl	8008164 <HAL_TIM_IC_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002168:	f7ff fc78 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	4619      	mov	r1, r3
 800217a:	4815      	ldr	r0, [pc, #84]	; (80021d0 <MX_TIM3_Init+0xf0>)
 800217c:	f007 f8fa 	bl	8009374 <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002186:	f7ff fc69 	bl	8001a5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800218e:	2301      	movs	r3, #1
 8002190:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800219a:	463b      	mov	r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	4619      	mov	r1, r3
 80021a0:	480b      	ldr	r0, [pc, #44]	; (80021d0 <MX_TIM3_Init+0xf0>)
 80021a2:	f006 fa69 	bl	8008678 <HAL_TIM_IC_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80021ac:	f7ff fc56 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021b0:	463b      	mov	r3, r7
 80021b2:	2204      	movs	r2, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_TIM3_Init+0xf0>)
 80021b8:	f006 fa5e 	bl	8008678 <HAL_TIM_IC_ConfigChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80021c2:	f7ff fc4b 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20006318 	.word	0x20006318
 80021d4:	40000400 	.word	0x40000400

080021d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <HAL_TIM_Base_MspInit+0xd4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002216:	e044      	b.n	80022a2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d10e      	bne.n	8002240 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a21      	ldr	r2, [pc, #132]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]
}
 800223e:	e030      	b.n	80022a2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_TIM_Base_MspInit+0xdc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d12b      	bne.n	80022a2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_TIM_Base_MspInit+0xd8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN1_SPD_Pin|FAN2_SPD_Pin;
 8002282:	2330      	movs	r3, #48	; 0x30
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002292:	2302      	movs	r3, #2
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	4806      	ldr	r0, [pc, #24]	; (80022b8 <HAL_TIM_Base_MspInit+0xe0>)
 800229e:	f003 fe59 	bl	8005f54 <HAL_GPIO_Init>
}
 80022a2:	bf00      	nop
 80022a4:	3730      	adds	r7, #48	; 0x30
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40020400 	.word	0x40020400

080022bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a24      	ldr	r2, [pc, #144]	; (800236c <HAL_TIM_MspPostInit+0xb0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d11f      	bne.n	800231e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <HAL_TIM_MspPostInit+0xb4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a22      	ldr	r2, [pc, #136]	; (8002370 <HAL_TIM_MspPostInit+0xb4>)
 80022e8:	f043 0310 	orr.w	r3, r3, #16
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_TIM_MspPostInit+0xb4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_PWM_Pin|FAN2_PWM_Pin;
 80022fa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800230c:	2301      	movs	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	4817      	ldr	r0, [pc, #92]	; (8002374 <HAL_TIM_MspPostInit+0xb8>)
 8002318:	f003 fe1c 	bl	8005f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800231c:	e022      	b.n	8002364 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002326:	d11d      	bne.n	8002364 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_TIM_MspPostInit+0xb4>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_TIM_MspPostInit+0xb4>)
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_TIM_MspPostInit+0xb4>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VAL_PWM_Pin;
 8002344:	2308      	movs	r3, #8
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002354:	2301      	movs	r3, #1
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	4806      	ldr	r0, [pc, #24]	; (8002378 <HAL_TIM_MspPostInit+0xbc>)
 8002360:	f003 fdf8 	bl	8005f54 <HAL_GPIO_Init>
}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40010000 	.word	0x40010000
 8002370:	40023800 	.word	0x40023800
 8002374:	40021000 	.word	0x40021000
 8002378:	40020400 	.word	0x40020400

0800237c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <MX_USART1_UART_Init+0x50>)
 8002384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002388:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800238c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_USART1_UART_Init+0x4c>)
 80023b4:	f007 f8c0 	bl	8009538 <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023be:	f7ff fb4d 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20006734 	.word	0x20006734
 80023cc:	40011000 	.word	0x40011000

080023d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_USART2_UART_Init+0x4c>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <MX_USART2_UART_Init+0x50>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <MX_USART2_UART_Init+0x4c>)
 80023dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_USART2_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_USART2_UART_Init+0x4c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_USART2_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_USART2_UART_Init+0x4c>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <MX_USART2_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_USART2_UART_Init+0x4c>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_USART2_UART_Init+0x4c>)
 8002408:	f007 f896 	bl	8009538 <HAL_UART_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002412:	f7ff fb23 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200067bc 	.word	0x200067bc
 8002420:	40004400 	.word	0x40004400

08002424 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_USART3_UART_Init+0x4c>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <MX_USART3_UART_Init+0x50>)
 800242c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <MX_USART3_UART_Init+0x4c>)
 8002430:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002434:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_USART3_UART_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_USART3_UART_Init+0x4c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <MX_USART3_UART_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_USART3_UART_Init+0x4c>)
 800244a:	220c      	movs	r2, #12
 800244c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <MX_USART3_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_USART3_UART_Init+0x4c>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_USART3_UART_Init+0x4c>)
 800245c:	f007 f86c 	bl	8009538 <HAL_UART_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002466:	f7ff faf9 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20006510 	.word	0x20006510
 8002474:	40004800 	.word	0x40004800

08002478 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <MX_USART6_UART_Init+0x4c>)
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <MX_USART6_UART_Init+0x50>)
 8002480:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <MX_USART6_UART_Init+0x4c>)
 8002484:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002488:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_USART6_UART_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <MX_USART6_UART_Init+0x4c>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <MX_USART6_UART_Init+0x4c>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <MX_USART6_UART_Init+0x4c>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <MX_USART6_UART_Init+0x4c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <MX_USART6_UART_Init+0x4c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_USART6_UART_Init+0x4c>)
 80024b0:	f007 f842 	bl	8009538 <HAL_UART_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024ba:	f7ff facf 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20006778 	.word	0x20006778
 80024c8:	40011400 	.word	0x40011400

080024cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b090      	sub	sp, #64	; 0x40
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a97      	ldr	r2, [pc, #604]	; (8002748 <HAL_UART_MspInit+0x27c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	f040 8093 	bne.w	8002616 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f4:	4b95      	ldr	r3, [pc, #596]	; (800274c <HAL_UART_MspInit+0x280>)
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	4a94      	ldr	r2, [pc, #592]	; (800274c <HAL_UART_MspInit+0x280>)
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002500:	4b92      	ldr	r3, [pc, #584]	; (800274c <HAL_UART_MspInit+0x280>)
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
 8002510:	4b8e      	ldr	r3, [pc, #568]	; (800274c <HAL_UART_MspInit+0x280>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	4a8d      	ldr	r2, [pc, #564]	; (800274c <HAL_UART_MspInit+0x280>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6313      	str	r3, [r2, #48]	; 0x30
 800251c:	4b8b      	ldr	r3, [pc, #556]	; (800274c <HAL_UART_MspInit+0x280>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002528:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800253a:	2307      	movs	r3, #7
 800253c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002542:	4619      	mov	r1, r3
 8002544:	4882      	ldr	r0, [pc, #520]	; (8002750 <HAL_UART_MspInit+0x284>)
 8002546:	f003 fd05 	bl	8005f54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <HAL_UART_MspInit+0x288>)
 800254c:	4a82      	ldr	r2, [pc, #520]	; (8002758 <HAL_UART_MspInit+0x28c>)
 800254e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002550:	4b80      	ldr	r3, [pc, #512]	; (8002754 <HAL_UART_MspInit+0x288>)
 8002552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002556:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002558:	4b7e      	ldr	r3, [pc, #504]	; (8002754 <HAL_UART_MspInit+0x288>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255e:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <HAL_UART_MspInit+0x288>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002564:	4b7b      	ldr	r3, [pc, #492]	; (8002754 <HAL_UART_MspInit+0x288>)
 8002566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800256a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800256c:	4b79      	ldr	r3, [pc, #484]	; (8002754 <HAL_UART_MspInit+0x288>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002572:	4b78      	ldr	r3, [pc, #480]	; (8002754 <HAL_UART_MspInit+0x288>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002578:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_UART_MspInit+0x288>)
 800257a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002580:	4b74      	ldr	r3, [pc, #464]	; (8002754 <HAL_UART_MspInit+0x288>)
 8002582:	2200      	movs	r2, #0
 8002584:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002586:	4b73      	ldr	r3, [pc, #460]	; (8002754 <HAL_UART_MspInit+0x288>)
 8002588:	2200      	movs	r2, #0
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800258c:	4871      	ldr	r0, [pc, #452]	; (8002754 <HAL_UART_MspInit+0x288>)
 800258e:	f001 ff39 	bl	8004404 <HAL_DMA_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002598:	f7ff fa60 	bl	8001a5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a6d      	ldr	r2, [pc, #436]	; (8002754 <HAL_UART_MspInit+0x288>)
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
 80025a2:	4a6c      	ldr	r2, [pc, #432]	; (8002754 <HAL_UART_MspInit+0x288>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80025a8:	4b6c      	ldr	r3, [pc, #432]	; (800275c <HAL_UART_MspInit+0x290>)
 80025aa:	4a6d      	ldr	r2, [pc, #436]	; (8002760 <HAL_UART_MspInit+0x294>)
 80025ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80025ae:	4b6b      	ldr	r3, [pc, #428]	; (800275c <HAL_UART_MspInit+0x290>)
 80025b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025b6:	4b69      	ldr	r3, [pc, #420]	; (800275c <HAL_UART_MspInit+0x290>)
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025bc:	4b67      	ldr	r3, [pc, #412]	; (800275c <HAL_UART_MspInit+0x290>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025c2:	4b66      	ldr	r3, [pc, #408]	; (800275c <HAL_UART_MspInit+0x290>)
 80025c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025ca:	4b64      	ldr	r3, [pc, #400]	; (800275c <HAL_UART_MspInit+0x290>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d0:	4b62      	ldr	r3, [pc, #392]	; (800275c <HAL_UART_MspInit+0x290>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025d6:	4b61      	ldr	r3, [pc, #388]	; (800275c <HAL_UART_MspInit+0x290>)
 80025d8:	2200      	movs	r2, #0
 80025da:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025dc:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_UART_MspInit+0x290>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025e2:	4b5e      	ldr	r3, [pc, #376]	; (800275c <HAL_UART_MspInit+0x290>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025e8:	485c      	ldr	r0, [pc, #368]	; (800275c <HAL_UART_MspInit+0x290>)
 80025ea:	f001 ff0b 	bl	8004404 <HAL_DMA_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80025f4:	f7ff fa32 	bl	8001a5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a58      	ldr	r2, [pc, #352]	; (800275c <HAL_UART_MspInit+0x290>)
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34
 80025fe:	4a57      	ldr	r2, [pc, #348]	; (800275c <HAL_UART_MspInit+0x290>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2105      	movs	r1, #5
 8002608:	2025      	movs	r0, #37	; 0x25
 800260a:	f001 fed1 	bl	80043b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800260e:	2025      	movs	r0, #37	; 0x25
 8002610:	f001 feea 	bl	80043e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002614:	e1e2      	b.n	80029dc <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_UART_MspInit+0x298>)
 800261c:	4293      	cmp	r3, r2
 800261e:	f040 80ad 	bne.w	800277c <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	4b49      	ldr	r3, [pc, #292]	; (800274c <HAL_UART_MspInit+0x280>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a48      	ldr	r2, [pc, #288]	; (800274c <HAL_UART_MspInit+0x280>)
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_UART_MspInit+0x280>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	4b42      	ldr	r3, [pc, #264]	; (800274c <HAL_UART_MspInit+0x280>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a41      	ldr	r2, [pc, #260]	; (800274c <HAL_UART_MspInit+0x280>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_UART_MspInit+0x280>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800265a:	2360      	movs	r3, #96	; 0x60
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800266a:	2307      	movs	r3, #7
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800266e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002672:	4619      	mov	r1, r3
 8002674:	483c      	ldr	r0, [pc, #240]	; (8002768 <HAL_UART_MspInit+0x29c>)
 8002676:	f003 fc6d 	bl	8005f54 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800267a:	4b3c      	ldr	r3, [pc, #240]	; (800276c <HAL_UART_MspInit+0x2a0>)
 800267c:	4a3c      	ldr	r2, [pc, #240]	; (8002770 <HAL_UART_MspInit+0x2a4>)
 800267e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002680:	4b3a      	ldr	r3, [pc, #232]	; (800276c <HAL_UART_MspInit+0x2a0>)
 8002682:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002686:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002688:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_UART_MspInit+0x2a0>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800268e:	4b37      	ldr	r3, [pc, #220]	; (800276c <HAL_UART_MspInit+0x2a0>)
 8002690:	2200      	movs	r2, #0
 8002692:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002694:	4b35      	ldr	r3, [pc, #212]	; (800276c <HAL_UART_MspInit+0x2a0>)
 8002696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800269a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800269c:	4b33      	ldr	r3, [pc, #204]	; (800276c <HAL_UART_MspInit+0x2a0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026a2:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_UART_MspInit+0x2a0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_UART_MspInit+0x2a0>)
 80026aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b0:	4b2e      	ldr	r3, [pc, #184]	; (800276c <HAL_UART_MspInit+0x2a0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026b6:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_UART_MspInit+0x2a0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026bc:	482b      	ldr	r0, [pc, #172]	; (800276c <HAL_UART_MspInit+0x2a0>)
 80026be:	f001 fea1 	bl	8004404 <HAL_DMA_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_UART_MspInit+0x200>
      Error_Handler();
 80026c8:	f7ff f9c8 	bl	8001a5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_UART_MspInit+0x2a0>)
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
 80026d2:	4a26      	ldr	r2, [pc, #152]	; (800276c <HAL_UART_MspInit+0x2a0>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 80026da:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_UART_MspInit+0x2ac>)
 80026dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 80026e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026e6:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 80026f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002706:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 8002708:	2200      	movs	r2, #0
 800270a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 800270e:	2200      	movs	r2, #0
 8002710:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002712:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 8002714:	2200      	movs	r2, #0
 8002716:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002718:	4816      	ldr	r0, [pc, #88]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 800271a:	f001 fe73 	bl	8004404 <HAL_DMA_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002724:	f7ff f99a 	bl	8001a5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
 800272e:	4a11      	ldr	r2, [pc, #68]	; (8002774 <HAL_UART_MspInit+0x2a8>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002734:	2200      	movs	r2, #0
 8002736:	2105      	movs	r1, #5
 8002738:	2026      	movs	r0, #38	; 0x26
 800273a:	f001 fe39 	bl	80043b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800273e:	2026      	movs	r0, #38	; 0x26
 8002740:	f001 fe52 	bl	80043e8 <HAL_NVIC_EnableIRQ>
}
 8002744:	e14a      	b.n	80029dc <HAL_UART_MspInit+0x510>
 8002746:	bf00      	nop
 8002748:	40011000 	.word	0x40011000
 800274c:	40023800 	.word	0x40023800
 8002750:	40020000 	.word	0x40020000
 8002754:	20006674 	.word	0x20006674
 8002758:	40026440 	.word	0x40026440
 800275c:	200065b4 	.word	0x200065b4
 8002760:	400264b8 	.word	0x400264b8
 8002764:	40004400 	.word	0x40004400
 8002768:	40020c00 	.word	0x40020c00
 800276c:	200063f0 	.word	0x200063f0
 8002770:	40026088 	.word	0x40026088
 8002774:	200066d4 	.word	0x200066d4
 8002778:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a98      	ldr	r2, [pc, #608]	; (80029e4 <HAL_UART_MspInit+0x518>)
 8002782:	4293      	cmp	r3, r2
 8002784:	f040 8093 	bne.w	80028ae <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	4b96      	ldr	r3, [pc, #600]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	4a95      	ldr	r2, [pc, #596]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 8002792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002796:	6413      	str	r3, [r2, #64]	; 0x40
 8002798:	4b93      	ldr	r3, [pc, #588]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	4b8f      	ldr	r3, [pc, #572]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4a8e      	ldr	r2, [pc, #568]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 80027ae:	f043 0308 	orr.w	r3, r3, #8
 80027b2:	6313      	str	r3, [r2, #48]	; 0x30
 80027b4:	4b8c      	ldr	r3, [pc, #560]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027d2:	2307      	movs	r3, #7
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027da:	4619      	mov	r1, r3
 80027dc:	4883      	ldr	r0, [pc, #524]	; (80029ec <HAL_UART_MspInit+0x520>)
 80027de:	f003 fbb9 	bl	8005f54 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80027e2:	4b83      	ldr	r3, [pc, #524]	; (80029f0 <HAL_UART_MspInit+0x524>)
 80027e4:	4a83      	ldr	r2, [pc, #524]	; (80029f4 <HAL_UART_MspInit+0x528>)
 80027e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80027e8:	4b81      	ldr	r3, [pc, #516]	; (80029f0 <HAL_UART_MspInit+0x524>)
 80027ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f0:	4b7f      	ldr	r3, [pc, #508]	; (80029f0 <HAL_UART_MspInit+0x524>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f6:	4b7e      	ldr	r3, [pc, #504]	; (80029f0 <HAL_UART_MspInit+0x524>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027fc:	4b7c      	ldr	r3, [pc, #496]	; (80029f0 <HAL_UART_MspInit+0x524>)
 80027fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002802:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002804:	4b7a      	ldr	r3, [pc, #488]	; (80029f0 <HAL_UART_MspInit+0x524>)
 8002806:	2200      	movs	r2, #0
 8002808:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800280a:	4b79      	ldr	r3, [pc, #484]	; (80029f0 <HAL_UART_MspInit+0x524>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002810:	4b77      	ldr	r3, [pc, #476]	; (80029f0 <HAL_UART_MspInit+0x524>)
 8002812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002816:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002818:	4b75      	ldr	r3, [pc, #468]	; (80029f0 <HAL_UART_MspInit+0x524>)
 800281a:	2200      	movs	r2, #0
 800281c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800281e:	4b74      	ldr	r3, [pc, #464]	; (80029f0 <HAL_UART_MspInit+0x524>)
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002824:	4872      	ldr	r0, [pc, #456]	; (80029f0 <HAL_UART_MspInit+0x524>)
 8002826:	f001 fded 	bl	8004404 <HAL_DMA_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_UART_MspInit+0x368>
      Error_Handler();
 8002830:	f7ff f914 	bl	8001a5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_UART_MspInit+0x524>)
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
 800283a:	4a6d      	ldr	r2, [pc, #436]	; (80029f0 <HAL_UART_MspInit+0x524>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002840:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002842:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_UART_MspInit+0x530>)
 8002844:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002846:	4b6c      	ldr	r3, [pc, #432]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002848:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800284c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800284e:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002850:	2240      	movs	r2, #64	; 0x40
 8002852:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002854:	4b68      	ldr	r3, [pc, #416]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800285a:	4b67      	ldr	r3, [pc, #412]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 800285c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002860:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002862:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002868:	4b63      	ldr	r3, [pc, #396]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800286e:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002870:	2200      	movs	r2, #0
 8002872:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002874:	4b60      	ldr	r3, [pc, #384]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287a:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 800287c:	2200      	movs	r2, #0
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002880:	485d      	ldr	r0, [pc, #372]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002882:	f001 fdbf 	bl	8004404 <HAL_DMA_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 800288c:	f7ff f8e6 	bl	8001a5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a59      	ldr	r2, [pc, #356]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002894:	635a      	str	r2, [r3, #52]	; 0x34
 8002896:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <HAL_UART_MspInit+0x52c>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2105      	movs	r1, #5
 80028a0:	2027      	movs	r0, #39	; 0x27
 80028a2:	f001 fd85 	bl	80043b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028a6:	2027      	movs	r0, #39	; 0x27
 80028a8:	f001 fd9e 	bl	80043e8 <HAL_NVIC_EnableIRQ>
}
 80028ac:	e096      	b.n	80029dc <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART6)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a53      	ldr	r2, [pc, #332]	; (8002a00 <HAL_UART_MspInit+0x534>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f040 8091 	bne.w	80029dc <HAL_UART_MspInit+0x510>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	4b4a      	ldr	r3, [pc, #296]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a49      	ldr	r2, [pc, #292]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 80028c4:	f043 0320 	orr.w	r3, r3, #32
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a42      	ldr	r2, [pc, #264]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <HAL_UART_MspInit+0x51c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028f2:	23c0      	movs	r3, #192	; 0xc0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002902:	2308      	movs	r3, #8
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800290a:	4619      	mov	r1, r3
 800290c:	483d      	ldr	r0, [pc, #244]	; (8002a04 <HAL_UART_MspInit+0x538>)
 800290e:	f003 fb21 	bl	8005f54 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 8002914:	4a3d      	ldr	r2, [pc, #244]	; (8002a0c <HAL_UART_MspInit+0x540>)
 8002916:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 800291a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800291e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002920:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800292c:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 800292e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002932:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002934:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 8002936:	2200      	movs	r2, #0
 8002938:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800293a:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 8002942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002946:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002948:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 800294a:	2200      	movs	r2, #0
 800294c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 8002950:	2200      	movs	r2, #0
 8002952:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002954:	482c      	ldr	r0, [pc, #176]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 8002956:	f001 fd55 	bl	8004404 <HAL_DMA_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_MspInit+0x498>
      Error_Handler();
 8002960:	f7ff f87c 	bl	8001a5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
 800296a:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_UART_MspInit+0x53c>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_UART_MspInit+0x544>)
 8002972:	4a28      	ldr	r2, [pc, #160]	; (8002a14 <HAL_UART_MspInit+0x548>)
 8002974:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002976:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_UART_MspInit+0x544>)
 8002978:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800297c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_UART_MspInit+0x544>)
 8002980:	2240      	movs	r2, #64	; 0x40
 8002982:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_UART_MspInit+0x544>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_UART_MspInit+0x544>)
 800298c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002990:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002992:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_UART_MspInit+0x544>)
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_UART_MspInit+0x544>)
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <HAL_UART_MspInit+0x544>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_UART_MspInit+0x544>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_UART_MspInit+0x544>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80029b0:	4817      	ldr	r0, [pc, #92]	; (8002a10 <HAL_UART_MspInit+0x544>)
 80029b2:	f001 fd27 	bl	8004404 <HAL_DMA_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_UART_MspInit+0x4f4>
      Error_Handler();
 80029bc:	f7ff f84e 	bl	8001a5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <HAL_UART_MspInit+0x544>)
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_UART_MspInit+0x544>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2105      	movs	r1, #5
 80029d0:	2047      	movs	r0, #71	; 0x47
 80029d2:	f001 fced 	bl	80043b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80029d6:	2047      	movs	r0, #71	; 0x47
 80029d8:	f001 fd06 	bl	80043e8 <HAL_NVIC_EnableIRQ>
}
 80029dc:	bf00      	nop
 80029de:	3740      	adds	r7, #64	; 0x40
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40004800 	.word	0x40004800
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	200064b0 	.word	0x200064b0
 80029f4:	40026028 	.word	0x40026028
 80029f8:	20006554 	.word	0x20006554
 80029fc:	40026058 	.word	0x40026058
 8002a00:	40011400 	.word	0x40011400
 8002a04:	40020800 	.word	0x40020800
 8002a08:	20006450 	.word	0x20006450
 8002a0c:	40026428 	.word	0x40026428
 8002a10:	20006614 	.word	0x20006614
 8002a14:	400264a0 	.word	0x400264a0

08002a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a1c:	480d      	ldr	r0, [pc, #52]	; (8002a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a1e:	490e      	ldr	r1, [pc, #56]	; (8002a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a24:	e002      	b.n	8002a2c <LoopCopyDataInit>

08002a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2a:	3304      	adds	r3, #4

08002a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a30:	d3f9      	bcc.n	8002a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a32:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a34:	4c0b      	ldr	r4, [pc, #44]	; (8002a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a38:	e001      	b.n	8002a3e <LoopFillZerobss>

08002a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a3c:	3204      	adds	r2, #4

08002a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a40:	d3fb      	bcc.n	8002a3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a42:	f7ff fa15 	bl	8001e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a46:	f01d f811 	bl	801fa6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a4a:	f7fe ff65 	bl	8001918 <main>
  bx  lr    
 8002a4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a58:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8002a5c:	08024dbc 	.word	0x08024dbc
  ldr r2, =_sbss
 8002a60:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8002a64:	2000ea4c 	.word	0x2000ea4c

08002a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC_IRQHandler>
	...

08002a6c <fnd_com_modbus_rtu_init>:
                        RS485_EN4_Pin}};
modbus_regs sys_regs;
modbus_slave slaves[4];

void fnd_com_modbus_rtu_init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
    slave_init(&slaves[0], &port[0], 1, &sys_regs);
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <fnd_com_modbus_rtu_init+0x38>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	490c      	ldr	r1, [pc, #48]	; (8002aa8 <fnd_com_modbus_rtu_init+0x3c>)
 8002a76:	480d      	ldr	r0, [pc, #52]	; (8002aac <fnd_com_modbus_rtu_init+0x40>)
 8002a78:	f01c fe36 	bl	801f6e8 <slave_init>
    slave_init(&slaves[1], &port[1], 2, &sys_regs);
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <fnd_com_modbus_rtu_init+0x38>)
 8002a7e:	2202      	movs	r2, #2
 8002a80:	490b      	ldr	r1, [pc, #44]	; (8002ab0 <fnd_com_modbus_rtu_init+0x44>)
 8002a82:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <fnd_com_modbus_rtu_init+0x48>)
 8002a84:	f01c fe30 	bl	801f6e8 <slave_init>
    slave_init(&slaves[2], &port[2], 3, &sys_regs);
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <fnd_com_modbus_rtu_init+0x38>)
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	490a      	ldr	r1, [pc, #40]	; (8002ab8 <fnd_com_modbus_rtu_init+0x4c>)
 8002a8e:	480b      	ldr	r0, [pc, #44]	; (8002abc <fnd_com_modbus_rtu_init+0x50>)
 8002a90:	f01c fe2a 	bl	801f6e8 <slave_init>
    slave_init(&slaves[3], &port[3], 4, &sys_regs);
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <fnd_com_modbus_rtu_init+0x38>)
 8002a96:	2204      	movs	r2, #4
 8002a98:	4909      	ldr	r1, [pc, #36]	; (8002ac0 <fnd_com_modbus_rtu_init+0x54>)
 8002a9a:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <fnd_com_modbus_rtu_init+0x58>)
 8002a9c:	f01c fe24 	bl	801f6e8 <slave_init>
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20007880 	.word	0x20007880
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	20006800 	.word	0x20006800
 8002ab0:	20000010 	.word	0x20000010
 8002ab4:	20006c20 	.word	0x20006c20
 8002ab8:	2000001c 	.word	0x2000001c
 8002abc:	20007040 	.word	0x20007040
 8002ac0:	20000028 	.word	0x20000028
 8002ac4:	20007460 	.word	0x20007460

08002ac8 <fnd_com_modbus_rtu_uart_idle_irq>:
void fnd_com_modbus_rtu_uart_idle_irq(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d103      	bne.n	8002ae4 <fnd_com_modbus_rtu_uart_idle_irq+0x1c>
    {
        slave_uart_idle(&slaves[0]);
 8002adc:	4813      	ldr	r0, [pc, #76]	; (8002b2c <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 8002ade:	f01c fe3b 	bl	801f758 <slave_uart_idle>
    }
    else if (huart == slaves[3].uart_port->uart)
    {
        slave_uart_idle(&slaves[3]);
    }
}
 8002ae2:	e01f      	b.n	8002b24 <fnd_com_modbus_rtu_uart_idle_irq+0x5c>
    else if (huart == slaves[1].uart_port->uart)
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 8002ae6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d103      	bne.n	8002afa <fnd_com_modbus_rtu_uart_idle_irq+0x32>
        slave_uart_idle(&slaves[1]);
 8002af2:	480f      	ldr	r0, [pc, #60]	; (8002b30 <fnd_com_modbus_rtu_uart_idle_irq+0x68>)
 8002af4:	f01c fe30 	bl	801f758 <slave_uart_idle>
}
 8002af8:	e014      	b.n	8002b24 <fnd_com_modbus_rtu_uart_idle_irq+0x5c>
    else if (huart == slaves[2].uart_port->uart)
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 8002afc:	f8d3 3840 	ldr.w	r3, [r3, #2112]	; 0x840
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d103      	bne.n	8002b10 <fnd_com_modbus_rtu_uart_idle_irq+0x48>
        slave_uart_idle(&slaves[2]);
 8002b08:	480a      	ldr	r0, [pc, #40]	; (8002b34 <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 8002b0a:	f01c fe25 	bl	801f758 <slave_uart_idle>
}
 8002b0e:	e009      	b.n	8002b24 <fnd_com_modbus_rtu_uart_idle_irq+0x5c>
    else if (huart == slaves[3].uart_port->uart)
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 8002b12:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d102      	bne.n	8002b24 <fnd_com_modbus_rtu_uart_idle_irq+0x5c>
        slave_uart_idle(&slaves[3]);
 8002b1e:	4806      	ldr	r0, [pc, #24]	; (8002b38 <fnd_com_modbus_rtu_uart_idle_irq+0x70>)
 8002b20:	f01c fe1a 	bl	801f758 <slave_uart_idle>
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20006800 	.word	0x20006800
 8002b30:	20006c20 	.word	0x20006c20
 8002b34:	20007040 	.word	0x20007040
 8002b38:	20007460 	.word	0x20007460

08002b3c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_UART_TxCpltCallback+0x6c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d104      	bne.n	8002b5a <HAL_UART_TxCpltCallback+0x1e>
    {
        slave_set_tx_rx(&slaves[0], rx);
 8002b50:	2100      	movs	r1, #0
 8002b52:	4815      	ldr	r0, [pc, #84]	; (8002ba8 <HAL_UART_TxCpltCallback+0x6c>)
 8002b54:	f01c fe40 	bl	801f7d8 <slave_set_tx_rx>
 8002b58:	e00a      	b.n	8002b70 <HAL_UART_TxCpltCallback+0x34>
    }
    else if (huart == slaves[1].uart_port->uart)
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_UART_TxCpltCallback+0x6c>)
 8002b5c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d103      	bne.n	8002b70 <HAL_UART_TxCpltCallback+0x34>
    {
        slave_set_tx_rx(&slaves[1], rx);
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4810      	ldr	r0, [pc, #64]	; (8002bac <HAL_UART_TxCpltCallback+0x70>)
 8002b6c:	f01c fe34 	bl	801f7d8 <slave_set_tx_rx>
    }
    if (huart == slaves[2].uart_port->uart)
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_UART_TxCpltCallback+0x6c>)
 8002b72:	f8d3 3840 	ldr.w	r3, [r3, #2112]	; 0x840
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d104      	bne.n	8002b88 <HAL_UART_TxCpltCallback+0x4c>
    {
        slave_set_tx_rx(&slaves[2], rx);
 8002b7e:	2100      	movs	r1, #0
 8002b80:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <HAL_UART_TxCpltCallback+0x74>)
 8002b82:	f01c fe29 	bl	801f7d8 <slave_set_tx_rx>
    }
    else if (huart == slaves[3].uart_port->uart)
    {
        slave_set_tx_rx(&slaves[3], rx);
    }
}
 8002b86:	e00a      	b.n	8002b9e <HAL_UART_TxCpltCallback+0x62>
    else if (huart == slaves[3].uart_port->uart)
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_UART_TxCpltCallback+0x6c>)
 8002b8a:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d103      	bne.n	8002b9e <HAL_UART_TxCpltCallback+0x62>
        slave_set_tx_rx(&slaves[3], rx);
 8002b96:	2100      	movs	r1, #0
 8002b98:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <HAL_UART_TxCpltCallback+0x78>)
 8002b9a:	f01c fe1d 	bl	801f7d8 <slave_set_tx_rx>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20006800 	.word	0x20006800
 8002bac:	20006c20 	.word	0x20006c20
 8002bb0:	20007040 	.word	0x20007040
 8002bb4:	20007460 	.word	0x20007460

08002bb8 <fnd_com_modbus_rtu_slave1_wait>:

void fnd_com_modbus_rtu_slave1_wait(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[0]);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <fnd_com_modbus_rtu_slave1_wait+0x10>)
 8002bbe:	f01c fe24 	bl	801f80a <slave_wait_request>
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20006800 	.word	0x20006800

08002bcc <fnd_com_modbus_rtu_slave2_wait>:
void fnd_com_modbus_rtu_slave2_wait(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[1]);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <fnd_com_modbus_rtu_slave2_wait+0x10>)
 8002bd2:	f01c fe1a 	bl	801f80a <slave_wait_request>
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20006c20 	.word	0x20006c20

08002be0 <fnd_com_modbus_rtu_slave3_wait>:
void fnd_com_modbus_rtu_slave3_wait(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[2]);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <fnd_com_modbus_rtu_slave3_wait+0x10>)
 8002be6:	f01c fe10 	bl	801f80a <slave_wait_request>
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20007040 	.word	0x20007040

08002bf4 <fnd_com_modbus_rtu_slave4_wait>:
void fnd_com_modbus_rtu_slave4_wait(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[3]);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <fnd_com_modbus_rtu_slave4_wait+0x10>)
 8002bfa:	f01c fe06 	bl	801f80a <slave_wait_request>
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20007460 	.word	0x20007460

08002c08 <get_channel_average>:
#define VAL_FB_END_CH 9

uint32_t fnd_adc_data[ADC_TOTAL_CH * DATA_PER_CH];

static float get_channel_average(uint8_t ch_idx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
    float sum = 0;
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	72fb      	strb	r3, [r7, #11]
 8002c1c:	e017      	b.n	8002c4e <get_channel_average+0x46>
    {
        sum = sum + fnd_adc_data[ch_idx + i * ADC_TOTAL_CH];
 8002c1e:	79f9      	ldrb	r1, [r7, #7]
 8002c20:	7afa      	ldrb	r2, [r7, #11]
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <get_channel_average+0x6c>)
 8002c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c44:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002c48:	7afb      	ldrb	r3, [r7, #11]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	72fb      	strb	r3, [r7, #11]
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
 8002c50:	2b09      	cmp	r3, #9
 8002c52:	d9e4      	bls.n	8002c1e <get_channel_average+0x16>
    }
    return sum / DATA_PER_CH;
 8002c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c60:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c64:	eeb0 0a67 	vmov.f32	s0, s15
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20007e80 	.word	0x20007e80

08002c78 <calculate_ntc_temperature>:

static float calculate_ntc_temperature(double res_value, double res_ref, double b_value)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002c82:	ed87 1b02 	vstr	d1, [r7, #8]
 8002c86:	ed87 2b00 	vstr	d2, [r7]
    return (float)(1 / (((log(res_value / res_ref)) / b_value) + (1 / (273.15 + 25))) - 273.15);
 8002c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c92:	f7fd fdd3 	bl	800083c <__aeabi_ddiv>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	ec43 2b17 	vmov	d7, r2, r3
 8002c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002ca2:	eef0 0a67 	vmov.f32	s1, s15
 8002ca6:	f01d febf 	bl	8020a28 <log>
 8002caa:	ec51 0b10 	vmov	r0, r1, d0
 8002cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb2:	f7fd fdc3 	bl	800083c <__aeabi_ddiv>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	a315      	add	r3, pc, #84	; (adr r3, 8002d14 <calculate_ntc_temperature+0x9c>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fada 	bl	800027c <__adddf3>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	f04f 0000 	mov.w	r0, #0
 8002cd0:	490f      	ldr	r1, [pc, #60]	; (8002d10 <calculate_ntc_temperature+0x98>)
 8002cd2:	f7fd fdb3 	bl	800083c <__aeabi_ddiv>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	a30a      	add	r3, pc, #40	; (adr r3, 8002d08 <calculate_ntc_temperature+0x90>)
 8002ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce4:	f7fd fac8 	bl	8000278 <__aeabi_dsub>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f7fd ff2a 	bl	8000b48 <__aeabi_d2f>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	ee07 3a90 	vmov	s15, r3
}
 8002cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	f3af 8000 	nop.w
 8002d08:	66666666 	.word	0x66666666
 8002d0c:	40711266 	.word	0x40711266
 8002d10:	3ff00000 	.word	0x3ff00000
 8002d14:	dcb5db83 	.word	0xdcb5db83
 8002d18:	3f6b79e1 	.word	0x3f6b79e1

08002d1c <fnd_input_adc_init_check>:

static void fnd_input_adc_init_check(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
    static uint8_t init_flag = 0;
    if (init_flag == 0)
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <fnd_input_adc_init_check+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <fnd_input_adc_init_check+0x1c>
    {
        HAL_ADC_Start_DMA(&hadc1, fnd_adc_data, ADC_TOTAL_CH * DATA_PER_CH);
 8002d28:	2282      	movs	r2, #130	; 0x82
 8002d2a:	4905      	ldr	r1, [pc, #20]	; (8002d40 <fnd_input_adc_init_check+0x24>)
 8002d2c:	4805      	ldr	r0, [pc, #20]	; (8002d44 <fnd_input_adc_init_check+0x28>)
 8002d2e:	f000 feb9 	bl	8003aa4 <HAL_ADC_Start_DMA>
        init_flag = 1;
 8002d32:	4b02      	ldr	r3, [pc, #8]	; (8002d3c <fnd_input_adc_init_check+0x20>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
    }
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	2000017c 	.word	0x2000017c
 8002d40:	20007e80 	.word	0x20007e80
 8002d44:	200060fc 	.word	0x200060fc

08002d48 <fnd_input_adc_read_dp>:

void fnd_input_adc_read_dp(float *values)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
    fnd_input_adc_init_check();
 8002d50:	f7ff ffe4 	bl	8002d1c <fnd_input_adc_init_check>
    for (uint8_t i = 0; i < (DP_END_CH - DP_START_CH + 1); i++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e00e      	b.n	8002d78 <fnd_input_adc_read_dp+0x30>
    {
        float dp_adc_value = get_channel_average(i + DP_START_CH);
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff53 	bl	8002c08 <get_channel_average>
 8002d62:	ed87 0a02 	vstr	s0, [r7, #8]
        values[i] = dp_adc_value;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < (DP_END_CH - DP_START_CH + 1); i++)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	3301      	adds	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d9ed      	bls.n	8002d5a <fnd_input_adc_read_dp+0x12>
    }
}
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <fnd_input_adc_read_ntc>:

void fnd_input_adc_read_ntc(float *values)
{
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    fnd_input_adc_init_check();
 8002d90:	f7ff ffc4 	bl	8002d1c <fnd_input_adc_init_check>
    for (uint8_t i = 0; i < (NTC_END_CH - NTC_START_CH + 1); i++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	75fb      	strb	r3, [r7, #23]
 8002d98:	e041      	b.n	8002e1e <fnd_input_adc_read_ntc+0x96>
    {
        float ntc_adc_value = get_channel_average(i + NTC_START_CH);
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	3303      	adds	r3, #3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff31 	bl	8002c08 <get_channel_average>
 8002da6:	ed87 0a04 	vstr	s0, [r7, #16]
        float ntc_resister_value = (float)10.0 * ntc_adc_value / (4095.1 - ntc_adc_value);
 8002daa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db6:	ee17 0a90 	vmov	r0, s15
 8002dba:	f7fd fbbd 	bl	8000538 <__aeabi_f2d>
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	460d      	mov	r5, r1
 8002dc2:	6938      	ldr	r0, [r7, #16]
 8002dc4:	f7fd fbb8 	bl	8000538 <__aeabi_f2d>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	a11c      	add	r1, pc, #112	; (adr r1, 8002e40 <fnd_input_adc_read_ntc+0xb8>)
 8002dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dd2:	f7fd fa51 	bl	8000278 <__aeabi_dsub>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4620      	mov	r0, r4
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f7fd fd2d 	bl	800083c <__aeabi_ddiv>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fd fead 	bl	8000b48 <__aeabi_d2f>
 8002dee:	4603      	mov	r3, r0
 8002df0:	60fb      	str	r3, [r7, #12]
        values[i] = calculate_ntc_temperature(ntc_resister_value, 10.0, 3950);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7fd fba0 	bl	8000538 <__aeabi_f2d>
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	18d4      	adds	r4, r2, r3
 8002e00:	ed9f 2b0b 	vldr	d2, [pc, #44]	; 8002e30 <fnd_input_adc_read_ntc+0xa8>
 8002e04:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8002e38 <fnd_input_adc_read_ntc+0xb0>
 8002e08:	ec41 0b10 	vmov	d0, r0, r1
 8002e0c:	f7ff ff34 	bl	8002c78 <calculate_ntc_temperature>
 8002e10:	eef0 7a40 	vmov.f32	s15, s0
 8002e14:	edc4 7a00 	vstr	s15, [r4]
    for (uint8_t i = 0; i < (NTC_END_CH - NTC_START_CH + 1); i++)
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d9ba      	bls.n	8002d9a <fnd_input_adc_read_ntc+0x12>
    }
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	00000000 	.word	0x00000000
 8002e34:	40aedc00 	.word	0x40aedc00
 8002e38:	00000000 	.word	0x00000000
 8002e3c:	40240000 	.word	0x40240000
 8002e40:	33333333 	.word	0x33333333
 8002e44:	40affe33 	.word	0x40affe33

08002e48 <fnd_input_adc_read_val_fb>:

void fnd_input_adc_read_val_fb(float *values)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    fnd_input_adc_init_check();
 8002e50:	f7ff ff64 	bl	8002d1c <fnd_input_adc_init_check>
    for (uint8_t i = 0; i < (VAL_FB_END_CH - VAL_FB_START_CH + 1); i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e010      	b.n	8002e7c <fnd_input_adc_read_val_fb+0x34>
    {
        values[i] = get_channel_average(i + VAL_FB_START_CH);
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	3309      	adds	r3, #9
 8002e5e:	b2d9      	uxtb	r1, r3
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	18d4      	adds	r4, r2, r3
 8002e68:	4608      	mov	r0, r1
 8002e6a:	f7ff fecd 	bl	8002c08 <get_channel_average>
 8002e6e:	eef0 7a40 	vmov.f32	s15, s0
 8002e72:	edc4 7a00 	vstr	s15, [r4]
    for (uint8_t i = 0; i < (VAL_FB_END_CH - VAL_FB_START_CH + 1); i++)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0eb      	beq.n	8002e5a <fnd_input_adc_read_val_fb+0x12>
    }
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd90      	pop	{r4, r7, pc}

08002e8c <fnd_input_gpio_read_di>:

GPIO_TypeDef *gpio_input_port[4] = {DI_01_GPIO_Port, DI_02_GPIO_Port, DI_03_GPIO_Port, DI_04_GPIO_Port};
uint16_t gpio_input_pin[4] = {DI_01_Pin, DI_02_Pin, DI_03_Pin, DI_04_Pin};

void fnd_input_gpio_read_di(uint8_t *values)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	e019      	b.n	8002ece <fnd_input_gpio_read_di+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_input_port[i], gpio_input_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	4a10      	ldr	r2, [pc, #64]	; (8002ee0 <fnd_input_gpio_read_di+0x54>)
 8002e9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	490f      	ldr	r1, [pc, #60]	; (8002ee4 <fnd_input_gpio_read_di+0x58>)
 8002ea6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f003 f9ed 	bl	800628c <HAL_GPIO_ReadPin>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2d9      	uxtb	r1, r3
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d9e2      	bls.n	8002e9a <fnd_input_gpio_read_di+0xe>
    }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000034 	.word	0x20000034
 8002ee4:	20000044 	.word	0x20000044

08002ee8 <fnd_input_gpio_read_id>:

void fnd_input_gpio_read_id(uint8_t *values)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ID_LD_GPIO_Port, ID_LD_Pin, GPIO_PIN_RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2120      	movs	r1, #32
 8002ef4:	4821      	ldr	r0, [pc, #132]	; (8002f7c <fnd_input_gpio_read_id+0x94>)
 8002ef6:	f003 f9e1 	bl	80062bc <HAL_GPIO_WritePin>
    osDelay(1);
 8002efa:	2001      	movs	r0, #1
 8002efc:	f008 fb17 	bl	800b52e <osDelay>
    HAL_GPIO_WritePin(ID_LD_GPIO_Port, ID_LD_Pin, GPIO_PIN_SET);
 8002f00:	2201      	movs	r2, #1
 8002f02:	2120      	movs	r1, #32
 8002f04:	481d      	ldr	r0, [pc, #116]	; (8002f7c <fnd_input_gpio_read_id+0x94>)
 8002f06:	f003 f9d9 	bl	80062bc <HAL_GPIO_WritePin>
    values[7] = HAL_GPIO_ReadPin(ID_DATA_GPIO_Port, ID_DATA_Pin) == GPIO_PIN_SET ? 1 : 0;
 8002f0a:	2110      	movs	r1, #16
 8002f0c:	481b      	ldr	r0, [pc, #108]	; (8002f7c <fnd_input_gpio_read_id+0x94>)
 8002f0e:	f003 f9bd 	bl	800628c <HAL_GPIO_ReadPin>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3307      	adds	r3, #7
 8002f22:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 7; i++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	e020      	b.n	8002f6c <fnd_input_gpio_read_id+0x84>
    {
        HAL_GPIO_WritePin(ID_CLK_GPIO_Port, ID_CLK_Pin, GPIO_PIN_RESET);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2140      	movs	r1, #64	; 0x40
 8002f2e:	4813      	ldr	r0, [pc, #76]	; (8002f7c <fnd_input_gpio_read_id+0x94>)
 8002f30:	f003 f9c4 	bl	80062bc <HAL_GPIO_WritePin>
        osDelay(1);
 8002f34:	2001      	movs	r0, #1
 8002f36:	f008 fafa 	bl	800b52e <osDelay>
        HAL_GPIO_WritePin(ID_CLK_GPIO_Port, ID_CLK_Pin, GPIO_PIN_SET);
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	2140      	movs	r1, #64	; 0x40
 8002f3e:	480f      	ldr	r0, [pc, #60]	; (8002f7c <fnd_input_gpio_read_id+0x94>)
 8002f40:	f003 f9bc 	bl	80062bc <HAL_GPIO_WritePin>
        values[6 - i] = HAL_GPIO_ReadPin(ID_DATA_GPIO_Port, ID_DATA_Pin) == GPIO_PIN_SET ? 1 : 0;
 8002f44:	2110      	movs	r1, #16
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <fnd_input_gpio_read_id+0x94>)
 8002f48:	f003 f9a0 	bl	800628c <HAL_GPIO_ReadPin>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	f1c3 0306 	rsb	r3, r3, #6
 8002f5e:	4619      	mov	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	440b      	add	r3, r1
 8002f64:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 7; i++)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d9db      	bls.n	8002f2a <fnd_input_gpio_read_id+0x42>
    }
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000

08002f80 <sht_write_cmd>:
#define I2C_TIMEOUT 100

I2C_HandleTypeDef *sht_i2c[2] = {&hi2c1, &hi2c3};

static HAL_StatusTypeDef sht_write_cmd(I2C_HandleTypeDef *hi2c, uint16_t cmd)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
    uint8_t buff[2] = {cmd >> 8, cmd};
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	733b      	strb	r3, [r7, #12]
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(hi2c, SHT_ADDR, buff, 2, I2C_TIMEOUT);
 8002f9c:	f107 020c 	add.w	r2, r7, #12
 8002fa0:	2364      	movs	r3, #100	; 0x64
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	2188      	movs	r1, #136	; 0x88
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f003 faff 	bl	80065ac <HAL_I2C_Master_Transmit>
 8002fae:	4603      	mov	r3, r0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <calculate_crc>:

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xff;
 8002fc2:	23ff      	movs	r3, #255	; 0xff
 8002fc4:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < length; i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	e020      	b.n	800300e <calculate_crc+0x56>
    {
        crc ^= data[i];
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	4053      	eors	r3, r2
 8002fd8:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e010      	b.n	8003002 <calculate_crc+0x4a>
        {
            if ((crc & 0x80u) != 0)
 8002fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da06      	bge.n	8002ff6 <calculate_crc+0x3e>
            {
                crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002ff2:	75fb      	strb	r3, [r7, #23]
 8002ff4:	e002      	b.n	8002ffc <calculate_crc+0x44>
            }
            else
            {
                crc <<= 1u;
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b07      	cmp	r3, #7
 8003006:	d9eb      	bls.n	8002fe0 <calculate_crc+0x28>
    for (size_t i = 0; i < length; i++)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	3301      	adds	r3, #1
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d3da      	bcc.n	8002fcc <calculate_crc+0x14>
            }
        }
    }
    return crc;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
}
 8003018:	4618      	mov	r0, r3
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <fnd_input_i2c_read_sht_temp_humi>:

HAL_StatusTypeDef fnd_input_i2c_read_sht_temp_humi(uint8_t idx, float *values)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
    uint8_t buff[6] = {0};
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	2300      	movs	r3, #0
 8003036:	823b      	strh	r3, [r7, #16]

    if (HAL_I2C_IsDeviceReady(sht_i2c[idx], SHT_ADDR, 10, I2C_TIMEOUT) != HAL_OK)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	4a46      	ldr	r2, [pc, #280]	; (8003154 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 800303c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003040:	2364      	movs	r3, #100	; 0x64
 8003042:	220a      	movs	r2, #10
 8003044:	2188      	movs	r1, #136	; 0x88
 8003046:	f003 fdd5 	bl	8006bf4 <HAL_I2C_IsDeviceReady>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <fnd_input_i2c_read_sht_temp_humi+0x46>
    {
        if (idx == 0)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <fnd_input_i2c_read_sht_temp_humi+0x38>
        {
            MX_I2C1_Init();
 8003056:	f7fe fb63 	bl	8001720 <MX_I2C1_Init>
 800305a:	e004      	b.n	8003066 <fnd_input_i2c_read_sht_temp_humi+0x42>
        }
        else if (idx == 1)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <fnd_input_i2c_read_sht_temp_humi+0x42>
        {
            MX_I2C3_Init();
 8003062:	f7fe fb8b 	bl	800177c <MX_I2C3_Init>
        }
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e070      	b.n	800314c <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (sht_write_cmd(sht_i2c[idx], 0x240B) != HAL_OK)
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	4a39      	ldr	r2, [pc, #228]	; (8003154 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	f242 410b 	movw	r1, #9227	; 0x240b
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff82 	bl	8002f80 <sht_write_cmd>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <fnd_input_i2c_read_sht_temp_humi+0x62>
    {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e062      	b.n	800314c <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    osDelay(50);
 8003086:	2032      	movs	r0, #50	; 0x32
 8003088:	f008 fa51 	bl	800b52e <osDelay>

    if (HAL_I2C_Master_Receive(sht_i2c[idx], SHT_ADDR | 0x01, buff, 6, I2C_TIMEOUT) != HAL_OK)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	4a31      	ldr	r2, [pc, #196]	; (8003154 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 8003090:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003094:	f107 020c 	add.w	r2, r7, #12
 8003098:	2364      	movs	r3, #100	; 0x64
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2306      	movs	r3, #6
 800309e:	2189      	movs	r1, #137	; 0x89
 80030a0:	f003 fb82 	bl	80067a8 <HAL_I2C_Master_Receive>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <fnd_input_i2c_read_sht_temp_humi+0x8a>
    {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e04e      	b.n	800314c <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (calculate_crc(buff, 2) == buff[2] && calculate_crc(&buff[3], 2) == buff[5])
 80030ae:	f107 030c 	add.w	r3, r7, #12
 80030b2:	2102      	movs	r1, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff7f 	bl	8002fb8 <calculate_crc>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	7bbb      	ldrb	r3, [r7, #14]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d142      	bne.n	800314a <fnd_input_i2c_read_sht_temp_humi+0x126>
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	3303      	adds	r3, #3
 80030ca:	2102      	movs	r1, #2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff73 	bl	8002fb8 <calculate_crc>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	7c7b      	ldrb	r3, [r7, #17]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d136      	bne.n	800314a <fnd_input_i2c_read_sht_temp_humi+0x126>
    {
        uint16_t temp_value = ((uint16_t)buff[0] << 8) | buff[1];
 80030dc:	7b3b      	ldrb	r3, [r7, #12]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	b21a      	sxth	r2, r3
 80030e2:	7b7b      	ldrb	r3, [r7, #13]
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	82fb      	strh	r3, [r7, #22]
        values[0] = -45 + 175 * ((float)temp_value / 65535);
 80030ec:	8afb      	ldrh	r3, [r7, #22]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030f6:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003158 <fnd_input_i2c_read_sht_temp_humi+0x134>
 80030fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030fe:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800315c <fnd_input_i2c_read_sht_temp_humi+0x138>
 8003102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003106:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003160 <fnd_input_i2c_read_sht_temp_humi+0x13c>
 800310a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	edc3 7a00 	vstr	s15, [r3]

        uint16_t humi_value = ((uint16_t)buff[3] << 8) | buff[4];
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	b21a      	sxth	r2, r3
 800311a:	7c3b      	ldrb	r3, [r7, #16]
 800311c:	b21b      	sxth	r3, r3
 800311e:	4313      	orrs	r3, r2
 8003120:	b21b      	sxth	r3, r3
 8003122:	82bb      	strh	r3, [r7, #20]
        values[1] = 100 * ((float)humi_value / 65535);
 8003124:	8abb      	ldrh	r3, [r7, #20]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800312e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003158 <fnd_input_i2c_read_sht_temp_humi+0x134>
 8003132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	3304      	adds	r3, #4
 800313a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003164 <fnd_input_i2c_read_sht_temp_humi+0x140>
 800313e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003142:	edc3 7a00 	vstr	s15, [r3]
        return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <fnd_input_i2c_read_sht_temp_humi+0x128>
    }
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	2000004c 	.word	0x2000004c
 8003158:	477fff00 	.word	0x477fff00
 800315c:	432f0000 	.word	0x432f0000
 8003160:	42340000 	.word	0x42340000
 8003164:	42c80000 	.word	0x42c80000

08003168 <fnd_input_i2c_read_sht>:

void fnd_input_i2c_read_sht(float *values)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
    float sht1_values[2] = {0};
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
    float sht2_values[2] = {0};
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef status = fnd_input_i2c_read_sht_temp_humi(0, sht1_values);
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4619      	mov	r1, r3
 800318a:	2000      	movs	r0, #0
 800318c:	f7ff ff4a 	bl	8003024 <fnd_input_i2c_read_sht_temp_humi>
 8003190:	4603      	mov	r3, r0
 8003192:	777b      	strb	r3, [r7, #29]
    for (uint8_t i = 0; i < 2; i++)
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e023      	b.n	80031e2 <fnd_input_i2c_read_sht+0x7a>
    {
        values[i] = (status == HAL_OK) ? (int16_t)(sht1_values[i] * 10) : (-1);
 800319a:	7f7b      	ldrb	r3, [r7, #29]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d115      	bne.n	80031cc <fnd_input_i2c_read_sht+0x64>
 80031a0:	7ffb      	ldrb	r3, [r7, #31]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	f107 0220 	add.w	r2, r7, #32
 80031a8:	4413      	add	r3, r2
 80031aa:	3b0c      	subs	r3, #12
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031bc:	ee17 3a90 	vmov	r3, s15
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ca:	e001      	b.n	80031d0 <fnd_input_i2c_read_sht+0x68>
 80031cc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 2; i++)
 80031dc:	7ffb      	ldrb	r3, [r7, #31]
 80031de:	3301      	adds	r3, #1
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d9d8      	bls.n	800319a <fnd_input_i2c_read_sht+0x32>
    }
    status = fnd_input_i2c_read_sht_temp_humi(1, sht2_values);
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	4619      	mov	r1, r3
 80031ee:	2001      	movs	r0, #1
 80031f0:	f7ff ff18 	bl	8003024 <fnd_input_i2c_read_sht_temp_humi>
 80031f4:	4603      	mov	r3, r0
 80031f6:	777b      	strb	r3, [r7, #29]
    for (uint8_t i = 0; i < 2; i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	77bb      	strb	r3, [r7, #30]
 80031fc:	e024      	b.n	8003248 <fnd_input_i2c_read_sht+0xe0>
    {
        values[2 + i] = (status == HAL_OK) ? (int16_t)(sht2_values[i] * 10) : (-1);
 80031fe:	7f7b      	ldrb	r3, [r7, #29]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d115      	bne.n	8003230 <fnd_input_i2c_read_sht+0xc8>
 8003204:	7fbb      	ldrb	r3, [r7, #30]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	f107 0220 	add.w	r2, r7, #32
 800320c:	4413      	add	r3, r2
 800320e:	3b14      	subs	r3, #20
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800321c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003220:	ee17 3a90 	vmov	r3, s15
 8003224:	b21b      	sxth	r3, r3
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800322e:	e001      	b.n	8003234 <fnd_input_i2c_read_sht+0xcc>
 8003230:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003234:	7fbb      	ldrb	r3, [r7, #30]
 8003236:	3302      	adds	r3, #2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 2; i++)
 8003242:	7fbb      	ldrb	r3, [r7, #30]
 8003244:	3301      	adds	r3, #1
 8003246:	77bb      	strb	r3, [r7, #30]
 8003248:	7fbb      	ldrb	r3, [r7, #30]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d9d7      	bls.n	80031fe <fnd_input_i2c_read_sht+0x96>
    }
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <fnd_input_tim_input_capture_init_check>:
#include "tim.h"

uint32_t spd_pulse[2];

static void fnd_input_tim_input_capture_init_check(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
    static uint8_t init_flag = 0;
    if (init_flag == 0)
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <fnd_input_tim_input_capture_init_check+0x28>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <fnd_input_tim_input_capture_init_check+0x22>
    {
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003264:	2100      	movs	r1, #0
 8003266:	4807      	ldr	r0, [pc, #28]	; (8003284 <fnd_input_tim_input_capture_init_check+0x2c>)
 8003268:	f004 ffd6 	bl	8008218 <HAL_TIM_IC_Start_IT>
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800326c:	2104      	movs	r1, #4
 800326e:	4805      	ldr	r0, [pc, #20]	; (8003284 <fnd_input_tim_input_capture_init_check+0x2c>)
 8003270:	f004 ffd2 	bl	8008218 <HAL_TIM_IC_Start_IT>
        init_flag = 1;
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <fnd_input_tim_input_capture_init_check+0x28>)
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
    }
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	2000017d 	.word	0x2000017d
 8003284:	20006318 	.word	0x20006318

08003288 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7f1b      	ldrb	r3, [r3, #28]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_TIM_IC_CaptureCallback+0x1c>
    {
        spd_pulse[0]++;
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80032a0:	6013      	str	r3, [r2, #0]
    }
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
    {
        spd_pulse[1]++;
    }
}
 80032a2:	e008      	b.n	80032b6 <HAL_TIM_IC_CaptureCallback+0x2e>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7f1b      	ldrb	r3, [r3, #28]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_IC_CaptureCallback+0x2e>
        spd_pulse[1]++;
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	3301      	adds	r3, #1
 80032b2:	4a04      	ldr	r2, [pc, #16]	; (80032c4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80032b4:	6053      	str	r3, [r2, #4]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20008088 	.word	0x20008088

080032c8 <fnd_input_tim_input_read_speed>:

void fnd_input_tim_input_read_speed(uint16_t *values)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
    fnd_input_tim_input_capture_init_check();
 80032d0:	f7ff ffc2 	bl	8003258 <fnd_input_tim_input_capture_init_check>
    for (uint8_t i = 0; i < 2; i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	e011      	b.n	80032fe <fnd_input_tim_input_read_speed+0x36>
    {
        values[i] = spd_pulse[i];
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <fnd_input_tim_input_read_speed+0x48>)
 80032de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	b28a      	uxth	r2, r1
 80032ec:	801a      	strh	r2, [r3, #0]
        spd_pulse[i] = 0;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	4a07      	ldr	r2, [pc, #28]	; (8003310 <fnd_input_tim_input_read_speed+0x48>)
 80032f2:	2100      	movs	r1, #0
 80032f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 2; i++)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	3301      	adds	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d9ea      	bls.n	80032da <fnd_input_tim_input_read_speed+0x12>
    }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20008088 	.word	0x20008088

08003314 <fnd_output_gpio_write_do>:

GPIO_TypeDef *relay_port[6] = {RLY_01_GPIO_Port, RLY_02_GPIO_Port, RLY_03_GPIO_Port, RLY_04_GPIO_Port, RLY_05_GPIO_Port, RLY_06_GPIO_Port};
uint16_t relay_pin[6] = {RLY_01_Pin, RLY_02_Pin, RLY_03_Pin, RLY_04_Pin, RLY_05_Pin, RLY_06_Pin};

void fnd_output_gpio_write_do(uint8_t *values)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 6; i++)
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e016      	b.n	8003350 <fnd_output_gpio_write_do+0x3c>
    {
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <fnd_output_gpio_write_do+0x4c>)
 8003326:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <fnd_output_gpio_write_do+0x50>)
 800332e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	f002 ffb9 	bl	80062bc <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 6; i++)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	3301      	adds	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b05      	cmp	r3, #5
 8003354:	d9e5      	bls.n	8003322 <fnd_output_gpio_write_do+0xe>
    }
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000054 	.word	0x20000054
 8003364:	2000006c 	.word	0x2000006c

08003368 <fnd_output_pwm_check_init>:
#include "fnd_output.h"
#include "tim.h"

static void fnd_output_pwm_check_init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
    static uint8_t init_flag = 0;
    if (init_flag == 0)
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <fnd_output_pwm_check_init+0x30>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10e      	bne.n	8003392 <fnd_output_pwm_check_init+0x2a>
    {
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003374:	2100      	movs	r1, #0
 8003376:	4809      	ldr	r0, [pc, #36]	; (800339c <fnd_output_pwm_check_init+0x34>)
 8003378:	f004 fe2c 	bl	8007fd4 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800337c:	2104      	movs	r1, #4
 800337e:	4807      	ldr	r0, [pc, #28]	; (800339c <fnd_output_pwm_check_init+0x34>)
 8003380:	f004 fe28 	bl	8007fd4 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003384:	2104      	movs	r1, #4
 8003386:	4806      	ldr	r0, [pc, #24]	; (80033a0 <fnd_output_pwm_check_init+0x38>)
 8003388:	f004 fe24 	bl	8007fd4 <HAL_TIM_PWM_Start>
        init_flag = 1;
 800338c:	4b02      	ldr	r3, [pc, #8]	; (8003398 <fnd_output_pwm_check_init+0x30>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
    }
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	2000017e 	.word	0x2000017e
 800339c:	20006360 	.word	0x20006360
 80033a0:	200063a8 	.word	0x200063a8

080033a4 <fnd_output_pwm_write_value>:

void fnd_output_pwm_write_value(uint16_t *values)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    fnd_output_pwm_check_init();
 80033ac:	f7ff ffdc 	bl	8003368 <fnd_output_pwm_check_init>
    if (values[0] < 1000)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033b8:	d204      	bcs.n	80033c4 <fnd_output_pwm_write_value+0x20>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t)(values[0] / 1));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <fnd_output_pwm_write_value+0x58>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (values[1] < 1000)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3302      	adds	r3, #2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ce:	d205      	bcs.n	80033dc <fnd_output_pwm_write_value+0x38>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t)(values[1] / 1));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3302      	adds	r3, #2
 80033d4:	881a      	ldrh	r2, [r3, #0]
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <fnd_output_pwm_write_value+0x58>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if (values[2] < 1000)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033e6:	d205      	bcs.n	80033f4 <fnd_output_pwm_write_value+0x50>
    {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint16_t)(values[2] / 1));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	881a      	ldrh	r2, [r3, #0]
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <fnd_output_pwm_write_value+0x5c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20006360 	.word	0x20006360
 8003400:	200063a8 	.word	0x200063a8

08003404 <fnd_output_stepper_tick>:
                            STEP_A5_Pin, STEP_A6_Pin, STEP_A7_Pin, STEP_A8_Pin,
                            STEP_B1_Pin, STEP_B2_Pin, STEP_B3_Pin, STEP_B4_Pin,
                            STEP_B5_Pin, STEP_B6_Pin, STEP_B7_Pin, STEP_B8_Pin};

static void fnd_output_stepper_tick(stepper_motor *motor)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
    if (motor->current_pos == motor->target_pos)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8c1a      	ldrh	r2, [r3, #32]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8bdb      	ldrh	r3, [r3, #30]
 8003414:	429a      	cmp	r2, r3
 8003416:	d109      	bne.n	800342c <fnd_output_stepper_tick+0x28>
    {
        motor->mode = STOP;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	761a      	strb	r2, [r3, #24]
        motor->up_excite_cnt = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	835a      	strh	r2, [r3, #26]
        motor->down_excite_cnt = 0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	839a      	strh	r2, [r3, #28]
 800342a:	e034      	b.n	8003496 <fnd_output_stepper_tick+0x92>
    }
    else if (motor->current_pos < motor->target_pos)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8c1a      	ldrh	r2, [r3, #32]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8bdb      	ldrh	r3, [r3, #30]
 8003434:	429a      	cmp	r2, r3
 8003436:	d214      	bcs.n	8003462 <fnd_output_stepper_tick+0x5e>
    {
        motor->down_excite_cnt = 0;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	839a      	strh	r2, [r3, #28]
        if (motor->up_excite_cnt < EXCITE_TICKS)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8b5b      	ldrh	r3, [r3, #26]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d809      	bhi.n	800345a <fnd_output_stepper_tick+0x56>
        {
            motor->mode = UP_EXCITE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	761a      	strb	r2, [r3, #24]
            motor->up_excite_cnt = motor->up_excite_cnt + 1;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8b5b      	ldrh	r3, [r3, #26]
 8003450:	3301      	adds	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	835a      	strh	r2, [r3, #26]
 8003458:	e01d      	b.n	8003496 <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = UP;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	761a      	strb	r2, [r3, #24]
 8003460:	e019      	b.n	8003496 <fnd_output_stepper_tick+0x92>
        }
    }
    else if (motor->current_pos > motor->target_pos)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8c1a      	ldrh	r2, [r3, #32]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8bdb      	ldrh	r3, [r3, #30]
 800346a:	429a      	cmp	r2, r3
 800346c:	d913      	bls.n	8003496 <fnd_output_stepper_tick+0x92>
    {
        motor->up_excite_cnt = 0;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	835a      	strh	r2, [r3, #26]
        if (motor->down_excite_cnt < EXCITE_TICKS)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8b9b      	ldrh	r3, [r3, #28]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d809      	bhi.n	8003490 <fnd_output_stepper_tick+0x8c>
        {
            motor->mode = DOWN_EXCITE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2203      	movs	r2, #3
 8003480:	761a      	strb	r2, [r3, #24]
            motor->down_excite_cnt = motor->down_excite_cnt + 1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8b9b      	ldrh	r3, [r3, #28]
 8003486:	3301      	adds	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	839a      	strh	r2, [r3, #28]
 800348e:	e002      	b.n	8003496 <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = DOWN;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2204      	movs	r2, #4
 8003494:	761a      	strb	r2, [r3, #24]
        }
    }

    if (motor->mode == STOP)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7e1b      	ldrb	r3, [r3, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <fnd_output_stepper_tick+0xc8>
    {
        for (uint8_t i = 0; i < 4; i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	e00f      	b.n	80034c4 <fnd_output_stepper_tick+0xc0>
        {
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80034b6:	2200      	movs	r2, #0
 80034b8:	4619      	mov	r1, r3
 80034ba:	f002 feff 	bl	80062bc <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	3301      	adds	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d9ec      	bls.n	80034a4 <fnd_output_stepper_tick+0xa0>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}
 80034ca:	e179      	b.n	80037c0 <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == UP_EXCITE || motor->mode == DOWN_EXCITE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d003      	beq.n	80034dc <fnd_output_stepper_tick+0xd8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e1b      	ldrb	r3, [r3, #24]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d15c      	bne.n	8003596 <fnd_output_stepper_tick+0x192>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8a19      	ldrh	r1, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <fnd_output_stepper_tick+0xf8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d003      	beq.n	80034fc <fnd_output_stepper_tick+0xf8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034f8:	2b07      	cmp	r3, #7
 80034fa:	d101      	bne.n	8003500 <fnd_output_stepper_tick+0xfc>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <fnd_output_stepper_tick+0xfe>
 8003500:	2300      	movs	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	f002 fed9 	bl	80062bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6858      	ldr	r0, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8a59      	ldrh	r1, [r3, #18]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003516:	2b01      	cmp	r3, #1
 8003518:	d007      	beq.n	800352a <fnd_output_stepper_tick+0x126>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800351e:	2b02      	cmp	r3, #2
 8003520:	d003      	beq.n	800352a <fnd_output_stepper_tick+0x126>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003526:	2b03      	cmp	r3, #3
 8003528:	d101      	bne.n	800352e <fnd_output_stepper_tick+0x12a>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <fnd_output_stepper_tick+0x12c>
 800352e:	2300      	movs	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	f002 fec2 	bl	80062bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6898      	ldr	r0, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8a99      	ldrh	r1, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003544:	2b03      	cmp	r3, #3
 8003546:	d007      	beq.n	8003558 <fnd_output_stepper_tick+0x154>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800354c:	2b04      	cmp	r3, #4
 800354e:	d003      	beq.n	8003558 <fnd_output_stepper_tick+0x154>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003554:	2b05      	cmp	r3, #5
 8003556:	d101      	bne.n	800355c <fnd_output_stepper_tick+0x158>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <fnd_output_stepper_tick+0x15a>
 800355c:	2300      	movs	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	f002 feab 	bl	80062bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68d8      	ldr	r0, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8ad9      	ldrh	r1, [r3, #22]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003572:	2b05      	cmp	r3, #5
 8003574:	d007      	beq.n	8003586 <fnd_output_stepper_tick+0x182>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800357a:	2b06      	cmp	r3, #6
 800357c:	d003      	beq.n	8003586 <fnd_output_stepper_tick+0x182>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003582:	2b07      	cmp	r3, #7
 8003584:	d101      	bne.n	800358a <fnd_output_stepper_tick+0x186>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <fnd_output_stepper_tick+0x188>
 800358a:	2300      	movs	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	f002 fe94 	bl	80062bc <HAL_GPIO_WritePin>
}
 8003594:	e114      	b.n	80037c0 <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == UP)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7e1b      	ldrb	r3, [r3, #24]
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 8086 	bne.w	80036ac <fnd_output_stepper_tick+0x2a8>
        for (uint8_t i = 0; i < 4; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	73bb      	strb	r3, [r7, #14]
 80035a4:	e00f      	b.n	80035c6 <fnd_output_stepper_tick+0x1c2>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 80035a6:	7bba      	ldrb	r2, [r7, #14]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80035ae:	7bba      	ldrb	r2, [r7, #14]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3208      	adds	r2, #8
 80035b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80035b8:	2200      	movs	r2, #0
 80035ba:	4619      	mov	r1, r3
 80035bc:	f002 fe7e 	bl	80062bc <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 80035c0:	7bbb      	ldrb	r3, [r7, #14]
 80035c2:	3301      	adds	r3, #1
 80035c4:	73bb      	strb	r3, [r7, #14]
 80035c6:	7bbb      	ldrb	r3, [r7, #14]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d9ec      	bls.n	80035a6 <fnd_output_stepper_tick+0x1a2>
        motor->current_pos = motor->current_pos + 1;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8c1b      	ldrh	r3, [r3, #32]
 80035d0:	3301      	adds	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	841a      	strh	r2, [r3, #32]
        motor->phase = (motor->phase + 1) % 8;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035dc:	3301      	adds	r3, #1
 80035de:	425a      	negs	r2, r3
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	f002 0207 	and.w	r2, r2, #7
 80035e8:	bf58      	it	pl
 80035ea:	4253      	negpl	r3, r2
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8a19      	ldrh	r1, [r3, #16]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <fnd_output_stepper_tick+0x20e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003606:	2b01      	cmp	r3, #1
 8003608:	d003      	beq.n	8003612 <fnd_output_stepper_tick+0x20e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800360e:	2b07      	cmp	r3, #7
 8003610:	d101      	bne.n	8003616 <fnd_output_stepper_tick+0x212>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <fnd_output_stepper_tick+0x214>
 8003616:	2300      	movs	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	f002 fe4e 	bl	80062bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6858      	ldr	r0, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8a59      	ldrh	r1, [r3, #18]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800362c:	2b01      	cmp	r3, #1
 800362e:	d007      	beq.n	8003640 <fnd_output_stepper_tick+0x23c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003634:	2b02      	cmp	r3, #2
 8003636:	d003      	beq.n	8003640 <fnd_output_stepper_tick+0x23c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800363c:	2b03      	cmp	r3, #3
 800363e:	d101      	bne.n	8003644 <fnd_output_stepper_tick+0x240>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <fnd_output_stepper_tick+0x242>
 8003644:	2300      	movs	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	f002 fe37 	bl	80062bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6898      	ldr	r0, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8a99      	ldrh	r1, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800365a:	2b03      	cmp	r3, #3
 800365c:	d007      	beq.n	800366e <fnd_output_stepper_tick+0x26a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003662:	2b04      	cmp	r3, #4
 8003664:	d003      	beq.n	800366e <fnd_output_stepper_tick+0x26a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800366a:	2b05      	cmp	r3, #5
 800366c:	d101      	bne.n	8003672 <fnd_output_stepper_tick+0x26e>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <fnd_output_stepper_tick+0x270>
 8003672:	2300      	movs	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	f002 fe20 	bl	80062bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68d8      	ldr	r0, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8ad9      	ldrh	r1, [r3, #22]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003688:	2b05      	cmp	r3, #5
 800368a:	d007      	beq.n	800369c <fnd_output_stepper_tick+0x298>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003690:	2b06      	cmp	r3, #6
 8003692:	d003      	beq.n	800369c <fnd_output_stepper_tick+0x298>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003698:	2b07      	cmp	r3, #7
 800369a:	d101      	bne.n	80036a0 <fnd_output_stepper_tick+0x29c>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <fnd_output_stepper_tick+0x29e>
 80036a0:	2300      	movs	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	f002 fe09 	bl	80062bc <HAL_GPIO_WritePin>
}
 80036aa:	e089      	b.n	80037c0 <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == DOWN)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	7e1b      	ldrb	r3, [r3, #24]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	f040 8085 	bne.w	80037c0 <fnd_output_stepper_tick+0x3bc>
        for (uint8_t i = 0; i < 4; i++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	737b      	strb	r3, [r7, #13]
 80036ba:	e00f      	b.n	80036dc <fnd_output_stepper_tick+0x2d8>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 80036bc:	7b7a      	ldrb	r2, [r7, #13]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80036c4:	7b7a      	ldrb	r2, [r7, #13]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3208      	adds	r2, #8
 80036ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80036ce:	2200      	movs	r2, #0
 80036d0:	4619      	mov	r1, r3
 80036d2:	f002 fdf3 	bl	80062bc <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 80036d6:	7b7b      	ldrb	r3, [r7, #13]
 80036d8:	3301      	adds	r3, #1
 80036da:	737b      	strb	r3, [r7, #13]
 80036dc:	7b7b      	ldrb	r3, [r7, #13]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d9ec      	bls.n	80036bc <fnd_output_stepper_tick+0x2b8>
        motor->current_pos = motor->current_pos - 1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8c1b      	ldrh	r3, [r3, #32]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	841a      	strh	r2, [r3, #32]
        motor->phase = (motor->phase + 7) % 8;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036f2:	3307      	adds	r3, #7
 80036f4:	425a      	negs	r2, r3
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	f002 0207 	and.w	r2, r2, #7
 80036fe:	bf58      	it	pl
 8003700:	4253      	negpl	r3, r2
 8003702:	b29a      	uxth	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8a19      	ldrh	r1, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <fnd_output_stepper_tick+0x324>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800371c:	2b01      	cmp	r3, #1
 800371e:	d003      	beq.n	8003728 <fnd_output_stepper_tick+0x324>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003724:	2b07      	cmp	r3, #7
 8003726:	d101      	bne.n	800372c <fnd_output_stepper_tick+0x328>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <fnd_output_stepper_tick+0x32a>
 800372c:	2300      	movs	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	f002 fdc3 	bl	80062bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6858      	ldr	r0, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8a59      	ldrh	r1, [r3, #18]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003742:	2b01      	cmp	r3, #1
 8003744:	d007      	beq.n	8003756 <fnd_output_stepper_tick+0x352>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800374a:	2b02      	cmp	r3, #2
 800374c:	d003      	beq.n	8003756 <fnd_output_stepper_tick+0x352>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003752:	2b03      	cmp	r3, #3
 8003754:	d101      	bne.n	800375a <fnd_output_stepper_tick+0x356>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <fnd_output_stepper_tick+0x358>
 800375a:	2300      	movs	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	f002 fdac 	bl	80062bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6898      	ldr	r0, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8a99      	ldrh	r1, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003770:	2b03      	cmp	r3, #3
 8003772:	d007      	beq.n	8003784 <fnd_output_stepper_tick+0x380>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003778:	2b04      	cmp	r3, #4
 800377a:	d003      	beq.n	8003784 <fnd_output_stepper_tick+0x380>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003780:	2b05      	cmp	r3, #5
 8003782:	d101      	bne.n	8003788 <fnd_output_stepper_tick+0x384>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <fnd_output_stepper_tick+0x386>
 8003788:	2300      	movs	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	f002 fd95 	bl	80062bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68d8      	ldr	r0, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8ad9      	ldrh	r1, [r3, #22]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d007      	beq.n	80037b2 <fnd_output_stepper_tick+0x3ae>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d003      	beq.n	80037b2 <fnd_output_stepper_tick+0x3ae>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037ae:	2b07      	cmp	r3, #7
 80037b0:	d101      	bne.n	80037b6 <fnd_output_stepper_tick+0x3b2>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <fnd_output_stepper_tick+0x3b4>
 80037b6:	2300      	movs	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	f002 fd7e 	bl	80062bc <HAL_GPIO_WritePin>
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <fnd_output_stepper_check_init>:

static void fnd_output_stepper_check_init(void)
{
 80037c8:	b490      	push	{r4, r7}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
    static uint8_t init_flag = 0;

    if (init_flag == 0)
 80037ce:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <fnd_output_stepper_check_init+0x104>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d174      	bne.n	80038c0 <fnd_output_stepper_check_init+0xf8>
    {
        for (uint8_t i = 0; i < 4; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	71fb      	strb	r3, [r7, #7]
 80037da:	e06b      	b.n	80038b4 <fnd_output_stepper_check_init+0xec>
        {
            for (uint8_t j = 0; j < 4; j++)
 80037dc:	2300      	movs	r3, #0
 80037de:	71bb      	strb	r3, [r7, #6]
 80037e0:	e025      	b.n	800382e <fnd_output_stepper_check_init+0x66>
            {
                motor[i].gpio_port[j] = stepper_port[i * 4 + j];
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	009a      	lsls	r2, r3, #2
 80037e6:	79bb      	ldrb	r3, [r7, #6]
 80037e8:	4413      	add	r3, r2
 80037ea:	79fa      	ldrb	r2, [r7, #7]
 80037ec:	79b8      	ldrb	r0, [r7, #6]
 80037ee:	4938      	ldr	r1, [pc, #224]	; (80038d0 <fnd_output_stepper_check_init+0x108>)
 80037f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80037f4:	4c37      	ldr	r4, [pc, #220]	; (80038d4 <fnd_output_stepper_check_init+0x10c>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	4403      	add	r3, r0
 80037fe:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
                motor[i].gpio_pin[j] = stepper_pin[i * 4 + j];
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	009a      	lsls	r2, r3, #2
 8003806:	79bb      	ldrb	r3, [r7, #6]
 8003808:	4413      	add	r3, r2
 800380a:	79fa      	ldrb	r2, [r7, #7]
 800380c:	79b9      	ldrb	r1, [r7, #6]
 800380e:	4832      	ldr	r0, [pc, #200]	; (80038d8 <fnd_output_stepper_check_init+0x110>)
 8003810:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 8003814:	482f      	ldr	r0, [pc, #188]	; (80038d4 <fnd_output_stepper_check_init+0x10c>)
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	440b      	add	r3, r1
 8003820:	3308      	adds	r3, #8
 8003822:	4622      	mov	r2, r4
 8003824:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
            for (uint8_t j = 0; j < 4; j++)
 8003828:	79bb      	ldrb	r3, [r7, #6]
 800382a:	3301      	adds	r3, #1
 800382c:	71bb      	strb	r3, [r7, #6]
 800382e:	79bb      	ldrb	r3, [r7, #6]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d9d6      	bls.n	80037e2 <fnd_output_stepper_check_init+0x1a>
            }
            motor[i].current_pos = 1200;
 8003834:	79fa      	ldrb	r2, [r7, #7]
 8003836:	4927      	ldr	r1, [pc, #156]	; (80038d4 <fnd_output_stepper_check_init+0x10c>)
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3320      	adds	r3, #32
 8003844:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003848:	801a      	strh	r2, [r3, #0]
            motor[i].down_excite_cnt = 0;
 800384a:	79fa      	ldrb	r2, [r7, #7]
 800384c:	4921      	ldr	r1, [pc, #132]	; (80038d4 <fnd_output_stepper_check_init+0x10c>)
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	331c      	adds	r3, #28
 800385a:	2200      	movs	r2, #0
 800385c:	801a      	strh	r2, [r3, #0]
            motor[i].mode = STOP;
 800385e:	79fa      	ldrb	r2, [r7, #7]
 8003860:	491c      	ldr	r1, [pc, #112]	; (80038d4 <fnd_output_stepper_check_init+0x10c>)
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3318      	adds	r3, #24
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
            motor[i].phase = 0;
 8003872:	79fa      	ldrb	r2, [r7, #7]
 8003874:	4917      	ldr	r1, [pc, #92]	; (80038d4 <fnd_output_stepper_check_init+0x10c>)
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3322      	adds	r3, #34	; 0x22
 8003882:	2200      	movs	r2, #0
 8003884:	801a      	strh	r2, [r3, #0]
            motor[i].target_pos = 0;
 8003886:	79fa      	ldrb	r2, [r7, #7]
 8003888:	4912      	ldr	r1, [pc, #72]	; (80038d4 <fnd_output_stepper_check_init+0x10c>)
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	331e      	adds	r3, #30
 8003896:	2200      	movs	r2, #0
 8003898:	801a      	strh	r2, [r3, #0]
            motor[i].up_excite_cnt = 0;
 800389a:	79fa      	ldrb	r2, [r7, #7]
 800389c:	490d      	ldr	r1, [pc, #52]	; (80038d4 <fnd_output_stepper_check_init+0x10c>)
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	331a      	adds	r3, #26
 80038aa:	2200      	movs	r2, #0
 80038ac:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 0; i < 4; i++)
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	3301      	adds	r3, #1
 80038b2:	71fb      	strb	r3, [r7, #7]
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d990      	bls.n	80037dc <fnd_output_stepper_check_init+0x14>
        }
        init_flag = 1;
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <fnd_output_stepper_check_init+0x104>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
    }
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc90      	pop	{r4, r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	2000017f 	.word	0x2000017f
 80038d0:	20000078 	.word	0x20000078
 80038d4:	20008090 	.word	0x20008090
 80038d8:	200000b8 	.word	0x200000b8

080038dc <fnd_output_stepper_set_position>:

void fnd_output_stepper_set_position(uint16_t *values)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
    motor[0].target_pos = values[0];
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	881a      	ldrh	r2, [r3, #0]
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <fnd_output_stepper_set_position+0x3c>)
 80038ea:	83da      	strh	r2, [r3, #30]
    motor[1].target_pos = values[1];
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	885a      	ldrh	r2, [r3, #2]
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <fnd_output_stepper_set_position+0x3c>)
 80038f2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    motor[2].target_pos = values[2];
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	889a      	ldrh	r2, [r3, #4]
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <fnd_output_stepper_set_position+0x3c>)
 80038fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    motor[3].target_pos = values[3];
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	88da      	ldrh	r2, [r3, #6]
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <fnd_output_stepper_set_position+0x3c>)
 8003906:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20008090 	.word	0x20008090

0800391c <fnd_output_stepper_10ms_tick>:

void fnd_output_stepper_10ms_tick(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
    fnd_output_stepper_check_init();
 8003920:	f7ff ff52 	bl	80037c8 <fnd_output_stepper_check_init>
    fnd_output_stepper_tick(&motor[0]);
 8003924:	4806      	ldr	r0, [pc, #24]	; (8003940 <fnd_output_stepper_10ms_tick+0x24>)
 8003926:	f7ff fd6d 	bl	8003404 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[1]);
 800392a:	4806      	ldr	r0, [pc, #24]	; (8003944 <fnd_output_stepper_10ms_tick+0x28>)
 800392c:	f7ff fd6a 	bl	8003404 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[2]);
 8003930:	4805      	ldr	r0, [pc, #20]	; (8003948 <fnd_output_stepper_10ms_tick+0x2c>)
 8003932:	f7ff fd67 	bl	8003404 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[3]);
 8003936:	4805      	ldr	r0, [pc, #20]	; (800394c <fnd_output_stepper_10ms_tick+0x30>)
 8003938:	f7ff fd64 	bl	8003404 <fnd_output_stepper_tick>
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20008090 	.word	0x20008090
 8003944:	200080b4 	.word	0x200080b4
 8003948:	200080d8 	.word	0x200080d8
 800394c:	200080fc 	.word	0x200080fc

08003950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <HAL_Init+0x40>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0d      	ldr	r2, [pc, #52]	; (8003990 <HAL_Init+0x40>)
 800395a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800395e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_Init+0x40>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_Init+0x40>)
 8003966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800396a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <HAL_Init+0x40>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a07      	ldr	r2, [pc, #28]	; (8003990 <HAL_Init+0x40>)
 8003972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003978:	2003      	movs	r0, #3
 800397a:	f000 fd0e 	bl	800439a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800397e:	200f      	movs	r0, #15
 8003980:	f7fe f89e 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003984:	f7fe f870 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40023c00 	.word	0x40023c00

08003994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_IncTick+0x20>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_IncTick+0x24>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <HAL_IncTick+0x24>)
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	200000dc 	.word	0x200000dc
 80039b8:	20008120 	.word	0x20008120

080039bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return uwTick;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_GetTick+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20008120 	.word	0x20008120

080039d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff ffee 	bl	80039bc <HAL_GetTick>
 80039e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d005      	beq.n	80039fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_Delay+0x44>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039fa:	bf00      	nop
 80039fc:	f7ff ffde 	bl	80039bc <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d8f7      	bhi.n	80039fc <HAL_Delay+0x28>
  {
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200000dc 	.word	0x200000dc

08003a1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e033      	b.n	8003a9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd fb4a 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d118      	bne.n	8003a8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a62:	f023 0302 	bic.w	r3, r3, #2
 8003a66:	f043 0202 	orr.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa68 	bl	8003f44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
 8003a8a:	e001      	b.n	8003a90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_Start_DMA+0x1e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0e9      	b.n	8003c96 <HAL_ADC_Start_DMA+0x1f2>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d018      	beq.n	8003b0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ae8:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <HAL_ADC_Start_DMA+0x1fc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a6d      	ldr	r2, [pc, #436]	; (8003ca4 <HAL_ADC_Start_DMA+0x200>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0c9a      	lsrs	r2, r3, #18
 8003af4:	4613      	mov	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4413      	add	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003afc:	e002      	b.n	8003b04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f9      	bne.n	8003afe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b18:	d107      	bne.n	8003b2a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b28:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	f040 80a1 	bne.w	8003c7c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b78:	d106      	bne.n	8003b88 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f023 0206 	bic.w	r2, r3, #6
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
 8003b86:	e002      	b.n	8003b8e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <HAL_ADC_Start_DMA+0x204>)
 8003b98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	4a43      	ldr	r2, [pc, #268]	; (8003cac <HAL_ADC_Start_DMA+0x208>)
 8003ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	4a42      	ldr	r2, [pc, #264]	; (8003cb0 <HAL_ADC_Start_DMA+0x20c>)
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	4a41      	ldr	r2, [pc, #260]	; (8003cb4 <HAL_ADC_Start_DMA+0x210>)
 8003bb0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003bba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003bca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bda:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	334c      	adds	r3, #76	; 0x4c
 8003be6:	4619      	mov	r1, r3
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f000 fcb8 	bl	8004560 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d12a      	bne.n	8003c52 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2d      	ldr	r2, [pc, #180]	; (8003cb8 <HAL_ADC_Start_DMA+0x214>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d015      	beq.n	8003c32 <HAL_ADC_Start_DMA+0x18e>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2c      	ldr	r2, [pc, #176]	; (8003cbc <HAL_ADC_Start_DMA+0x218>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d105      	bne.n	8003c1c <HAL_ADC_Start_DMA+0x178>
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_ADC_Start_DMA+0x204>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a27      	ldr	r2, [pc, #156]	; (8003cc0 <HAL_ADC_Start_DMA+0x21c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d136      	bne.n	8003c94 <HAL_ADC_Start_DMA+0x1f0>
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_ADC_Start_DMA+0x204>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d130      	bne.n	8003c94 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d129      	bne.n	8003c94 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e020      	b.n	8003c94 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_ADC_Start_DMA+0x214>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d11b      	bne.n	8003c94 <HAL_ADC_Start_DMA+0x1f0>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d114      	bne.n	8003c94 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	e00b      	b.n	8003c94 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f043 0210 	orr.w	r2, r3, #16
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f043 0201 	orr.w	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	431bde83 	.word	0x431bde83
 8003ca8:	40012300 	.word	0x40012300
 8003cac:	0800413d 	.word	0x0800413d
 8003cb0:	080041f7 	.word	0x080041f7
 8003cb4:	08004213 	.word	0x08004213
 8003cb8:	40012000 	.word	0x40012000
 8003cbc:	40012100 	.word	0x40012100
 8003cc0:	40012200 	.word	0x40012200

08003cc4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x1c>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e105      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x228>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b09      	cmp	r3, #9
 8003d2a:	d925      	bls.n	8003d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68d9      	ldr	r1, [r3, #12]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	3b1e      	subs	r3, #30
 8003d42:	2207      	movs	r2, #7
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	400a      	ands	r2, r1
 8003d50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68d9      	ldr	r1, [r3, #12]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	4618      	mov	r0, r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4403      	add	r3, r0
 8003d6a:	3b1e      	subs	r3, #30
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e022      	b.n	8003dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6919      	ldr	r1, [r3, #16]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	400a      	ands	r2, r1
 8003d9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4618      	mov	r0, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4403      	add	r3, r0
 8003db4:	409a      	lsls	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d824      	bhi.n	8003e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3b05      	subs	r3, #5
 8003dd8:	221f      	movs	r2, #31
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	400a      	ands	r2, r1
 8003de6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4618      	mov	r0, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	3b05      	subs	r3, #5
 8003e02:	fa00 f203 	lsl.w	r2, r0, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0e:	e04c      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d824      	bhi.n	8003e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	3b23      	subs	r3, #35	; 0x23
 8003e2a:	221f      	movs	r2, #31
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43da      	mvns	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	400a      	ands	r2, r1
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4618      	mov	r0, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	3b23      	subs	r3, #35	; 0x23
 8003e54:	fa00 f203 	lsl.w	r2, r0, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e60:	e023      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	3b41      	subs	r3, #65	; 0x41
 8003e74:	221f      	movs	r2, #31
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	400a      	ands	r2, r1
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3b41      	subs	r3, #65	; 0x41
 8003e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eaa:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <HAL_ADC_ConfigChannel+0x234>)
 8003eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_ADC_ConfigChannel+0x238>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d109      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x1cc>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b12      	cmp	r3, #18
 8003ebe:	d105      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a19      	ldr	r2, [pc, #100]	; (8003f38 <HAL_ADC_ConfigChannel+0x238>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d123      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x21e>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d003      	beq.n	8003ee6 <HAL_ADC_ConfigChannel+0x1e6>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b11      	cmp	r3, #17
 8003ee4:	d11b      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d111      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_ADC_ConfigChannel+0x23c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <HAL_ADC_ConfigChannel+0x240>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	0c9a      	lsrs	r2, r3, #18
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f10:	e002      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f9      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40012300 	.word	0x40012300
 8003f38:	40012000 	.word	0x40012000
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	431bde83 	.word	0x431bde83

08003f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f4c:	4b79      	ldr	r3, [pc, #484]	; (8004134 <ADC_Init+0x1f0>)
 8003f4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	021a      	lsls	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	4a58      	ldr	r2, [pc, #352]	; (8004138 <ADC_Init+0x1f4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6899      	ldr	r1, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800400c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6899      	ldr	r1, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	e00f      	b.n	8004042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004040:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0202 	bic.w	r2, r2, #2
 8004050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7e1b      	ldrb	r3, [r3, #24]
 800405c:	005a      	lsls	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01b      	beq.n	80040a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800408e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	3b01      	subs	r3, #1
 800409c:	035a      	lsls	r2, r3, #13
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	e007      	b.n	80040b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	051a      	lsls	r2, r3, #20
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6899      	ldr	r1, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040fa:	025a      	lsls	r2, r3, #9
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6899      	ldr	r1, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	029a      	lsls	r2, r3, #10
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40012300 	.word	0x40012300
 8004138:	0f000001 	.word	0x0f000001

0800413c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004152:	2b00      	cmp	r3, #0
 8004154:	d13c      	bne.n	80041d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d12b      	bne.n	80041c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004174:	2b00      	cmp	r3, #0
 8004176:	d127      	bne.n	80041c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004190:	2b00      	cmp	r3, #0
 8004192:	d119      	bne.n	80041c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0220 	bic.w	r2, r2, #32
 80041a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff fd7b 	bl	8003cc4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041ce:	e00e      	b.n	80041ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff fd85 	bl	8003cec <HAL_ADC_ErrorCallback>
}
 80041e2:	e004      	b.n	80041ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff fd67 	bl	8003cd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2240      	movs	r2, #64	; 0x40
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	f043 0204 	orr.w	r2, r3, #4
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff fd5a 	bl	8003cec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800425c:	4013      	ands	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800426c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004272:	4a04      	ldr	r2, [pc, #16]	; (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	60d3      	str	r3, [r2, #12]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <__NVIC_GetPriorityGrouping+0x18>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	f003 0307 	and.w	r3, r3, #7
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	db0b      	blt.n	80042ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	f003 021f 	and.w	r2, r3, #31
 80042bc:	4907      	ldr	r1, [pc, #28]	; (80042dc <__NVIC_EnableIRQ+0x38>)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2001      	movs	r0, #1
 80042c6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000e100 	.word	0xe000e100

080042e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	db0a      	blt.n	800430a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	490c      	ldr	r1, [pc, #48]	; (800432c <__NVIC_SetPriority+0x4c>)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	440b      	add	r3, r1
 8004304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004308:	e00a      	b.n	8004320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4908      	ldr	r1, [pc, #32]	; (8004330 <__NVIC_SetPriority+0x50>)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	3b04      	subs	r3, #4
 8004318:	0112      	lsls	r2, r2, #4
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	440b      	add	r3, r1
 800431e:	761a      	strb	r2, [r3, #24]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000e100 	.word	0xe000e100
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f1c3 0307 	rsb	r3, r3, #7
 800434e:	2b04      	cmp	r3, #4
 8004350:	bf28      	it	cs
 8004352:	2304      	movcs	r3, #4
 8004354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3304      	adds	r3, #4
 800435a:	2b06      	cmp	r3, #6
 800435c:	d902      	bls.n	8004364 <NVIC_EncodePriority+0x30>
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3b03      	subs	r3, #3
 8004362:	e000      	b.n	8004366 <NVIC_EncodePriority+0x32>
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	401a      	ands	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800437c:	f04f 31ff 	mov.w	r1, #4294967295
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	43d9      	mvns	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	4313      	orrs	r3, r2
         );
}
 800438e:	4618      	mov	r0, r3
 8004390:	3724      	adds	r7, #36	; 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff ff4c 	bl	8004240 <__NVIC_SetPriorityGrouping>
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043c2:	f7ff ff61 	bl	8004288 <__NVIC_GetPriorityGrouping>
 80043c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	6978      	ldr	r0, [r7, #20]
 80043ce:	f7ff ffb1 	bl	8004334 <NVIC_EncodePriority>
 80043d2:	4602      	mov	r2, r0
 80043d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff ff80 	bl	80042e0 <__NVIC_SetPriority>
}
 80043e0:	bf00      	nop
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff ff54 	bl	80042a4 <__NVIC_EnableIRQ>
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff fad4 	bl	80039bc <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e099      	b.n	8004554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004440:	e00f      	b.n	8004462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004442:	f7ff fabb 	bl	80039bc <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b05      	cmp	r3, #5
 800444e:	d908      	bls.n	8004462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2203      	movs	r2, #3
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e078      	b.n	8004554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e8      	bne.n	8004442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4b38      	ldr	r3, [pc, #224]	; (800455c <HAL_DMA_Init+0x158>)
 800447c:	4013      	ands	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800448e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d107      	bne.n	80044cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	4313      	orrs	r3, r2
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d117      	bne.n	8004526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00e      	beq.n	8004526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fb01 	bl	8004b10 <DMA_CheckFifoParam>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2240      	movs	r2, #64	; 0x40
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004522:	2301      	movs	r3, #1
 8004524:	e016      	b.n	8004554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fab8 	bl	8004aa4 <DMA_CalcBaseAndBitshift>
 8004534:	4603      	mov	r3, r0
 8004536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	223f      	movs	r2, #63	; 0x3f
 800453e:	409a      	lsls	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	f010803f 	.word	0xf010803f

08004560 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_DMA_Start_IT+0x26>
 8004582:	2302      	movs	r3, #2
 8004584:	e040      	b.n	8004608 <HAL_DMA_Start_IT+0xa8>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d12f      	bne.n	80045fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2202      	movs	r2, #2
 800459e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fa4a 	bl	8004a48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b8:	223f      	movs	r2, #63	; 0x3f
 80045ba:	409a      	lsls	r2, r3
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0216 	orr.w	r2, r2, #22
 80045ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0208 	orr.w	r2, r2, #8
 80045e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e005      	b.n	8004606 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004602:	2302      	movs	r3, #2
 8004604:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004606:	7dfb      	ldrb	r3, [r7, #23]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800461e:	f7ff f9cd 	bl	80039bc <HAL_GetTick>
 8004622:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d008      	beq.n	8004642 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e052      	b.n	80046e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0216 	bic.w	r2, r2, #22
 8004650:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004660:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <HAL_DMA_Abort+0x62>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0208 	bic.w	r2, r2, #8
 8004680:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004692:	e013      	b.n	80046bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004694:	f7ff f992 	bl	80039bc <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d90c      	bls.n	80046bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2203      	movs	r2, #3
 80046ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e015      	b.n	80046e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e4      	bne.n	8004694 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ce:	223f      	movs	r2, #63	; 0x3f
 80046d0:	409a      	lsls	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d004      	beq.n	800470e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e00c      	b.n	8004728 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2205      	movs	r2, #5
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004740:	4b92      	ldr	r3, [pc, #584]	; (800498c <HAL_DMA_IRQHandler+0x258>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a92      	ldr	r2, [pc, #584]	; (8004990 <HAL_DMA_IRQHandler+0x25c>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0a9b      	lsrs	r3, r3, #10
 800474c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	2208      	movs	r2, #8
 8004760:	409a      	lsls	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01a      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	2208      	movs	r2, #8
 800478e:	409a      	lsls	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	2201      	movs	r2, #1
 80047a6:	409a      	lsls	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	2201      	movs	r2, #1
 80047c4:	409a      	lsls	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f043 0202 	orr.w	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	2204      	movs	r2, #4
 80047dc:	409a      	lsls	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d012      	beq.n	800480c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	2204      	movs	r2, #4
 80047fa:	409a      	lsls	r2, r3
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f043 0204 	orr.w	r2, r3, #4
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	2210      	movs	r2, #16
 8004812:	409a      	lsls	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d043      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d03c      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	2210      	movs	r2, #16
 8004830:	409a      	lsls	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d018      	beq.n	8004876 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d108      	bne.n	8004864 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d024      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
 8004862:	e01f      	b.n	80048a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4798      	blx	r3
 8004874:	e016      	b.n	80048a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0208 	bic.w	r2, r2, #8
 8004892:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	2220      	movs	r2, #32
 80048aa:	409a      	lsls	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 808e 	beq.w	80049d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8086 	beq.w	80049d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	2220      	movs	r2, #32
 80048cc:	409a      	lsls	r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d136      	bne.n	800494c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0216 	bic.w	r2, r2, #22
 80048ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <HAL_DMA_IRQHandler+0x1da>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0208 	bic.w	r2, r2, #8
 800491c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	223f      	movs	r2, #63	; 0x3f
 8004924:	409a      	lsls	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493e:	2b00      	cmp	r3, #0
 8004940:	d07d      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
        }
        return;
 800494a:	e078      	b.n	8004a3e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01c      	beq.n	8004994 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d108      	bne.n	800497a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	2b00      	cmp	r3, #0
 800496e:	d030      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
 8004978:	e02b      	b.n	80049d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d027      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
 800498a:	e022      	b.n	80049d2 <HAL_DMA_IRQHandler+0x29e>
 800498c:	20000000 	.word	0x20000000
 8004990:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0210 	bic.w	r2, r2, #16
 80049b0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d032      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d022      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2205      	movs	r2, #5
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	3301      	adds	r3, #1
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d307      	bcc.n	8004a1a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f2      	bne.n	80049fe <HAL_DMA_IRQHandler+0x2ca>
 8004a18:	e000      	b.n	8004a1c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a1a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
 8004a3c:	e000      	b.n	8004a40 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a3e:	bf00      	nop
    }
  }
}
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop

08004a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d108      	bne.n	8004a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a86:	e007      	b.n	8004a98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	3b10      	subs	r3, #16
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <DMA_CalcBaseAndBitshift+0x64>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	091b      	lsrs	r3, r3, #4
 8004abc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004abe:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <DMA_CalcBaseAndBitshift+0x68>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d909      	bls.n	8004ae6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	1d1a      	adds	r2, r3, #4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ae4:	e007      	b.n	8004af6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	aaaaaaab 	.word	0xaaaaaaab
 8004b0c:	0802491c 	.word	0x0802491c

08004b10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d11f      	bne.n	8004b6a <DMA_CheckFifoParam+0x5a>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d856      	bhi.n	8004bde <DMA_CheckFifoParam+0xce>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <DMA_CheckFifoParam+0x28>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004b5b 	.word	0x08004b5b
 8004b40:	08004b49 	.word	0x08004b49
 8004b44:	08004bdf 	.word	0x08004bdf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d046      	beq.n	8004be2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b58:	e043      	b.n	8004be2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b62:	d140      	bne.n	8004be6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b68:	e03d      	b.n	8004be6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b72:	d121      	bne.n	8004bb8 <DMA_CheckFifoParam+0xa8>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d837      	bhi.n	8004bea <DMA_CheckFifoParam+0xda>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <DMA_CheckFifoParam+0x70>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004b97 	.word	0x08004b97
 8004b88:	08004b91 	.word	0x08004b91
 8004b8c:	08004ba9 	.word	0x08004ba9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
      break;
 8004b94:	e030      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d025      	beq.n	8004bee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba6:	e022      	b.n	8004bee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bb0:	d11f      	bne.n	8004bf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bb6:	e01c      	b.n	8004bf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d903      	bls.n	8004bc6 <DMA_CheckFifoParam+0xb6>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d003      	beq.n	8004bcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bc4:	e018      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004bca:	e015      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00e      	beq.n	8004bf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      break;
 8004bdc:	e00b      	b.n	8004bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8004bde:	bf00      	nop
 8004be0:	e00a      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004be2:	bf00      	nop
 8004be4:	e008      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004be6:	bf00      	nop
 8004be8:	e006      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004bea:	bf00      	nop
 8004bec:	e004      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e002      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004bf6:	bf00      	nop
    }
  } 
  
  return status; 
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop

08004c08 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004c18:	4baa      	ldr	r3, [pc, #680]	; (8004ec4 <HAL_ETH_Init+0x2bc>)
 8004c1a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e183      	b.n	8004f36 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f005 ff20 	bl	800aa88 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	4b9e      	ldr	r3, [pc, #632]	; (8004ec8 <HAL_ETH_Init+0x2c0>)
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c50:	4a9d      	ldr	r2, [pc, #628]	; (8004ec8 <HAL_ETH_Init+0x2c0>)
 8004c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c56:	6453      	str	r3, [r2, #68]	; 0x44
 8004c58:	4b9b      	ldr	r3, [pc, #620]	; (8004ec8 <HAL_ETH_Init+0x2c0>)
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004c64:	4b99      	ldr	r3, [pc, #612]	; (8004ecc <HAL_ETH_Init+0x2c4>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a98      	ldr	r2, [pc, #608]	; (8004ecc <HAL_ETH_Init+0x2c4>)
 8004c6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c6e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004c70:	4b96      	ldr	r3, [pc, #600]	; (8004ecc <HAL_ETH_Init+0x2c4>)
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	4994      	ldr	r1, [pc, #592]	; (8004ecc <HAL_ETH_Init+0x2c4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c94:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c96:	f7fe fe91 	bl	80039bc <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004c9c:	e011      	b.n	8004cc2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004c9e:	f7fe fe8d 	bl	80039bc <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cac:	d909      	bls.n	8004cc2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e139      	b.n	8004f36 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e4      	bne.n	8004c9e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f023 031c 	bic.w	r3, r3, #28
 8004ce2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004ce4:	f002 fff6 	bl	8007cd4 <HAL_RCC_GetHCLKFreq>
 8004ce8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	4a78      	ldr	r2, [pc, #480]	; (8004ed0 <HAL_ETH_Init+0x2c8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d908      	bls.n	8004d04 <HAL_ETH_Init+0xfc>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	4a77      	ldr	r2, [pc, #476]	; (8004ed4 <HAL_ETH_Init+0x2cc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d804      	bhi.n	8004d04 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f043 0308 	orr.w	r3, r3, #8
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	e027      	b.n	8004d54 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	4a73      	ldr	r2, [pc, #460]	; (8004ed4 <HAL_ETH_Init+0x2cc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d908      	bls.n	8004d1e <HAL_ETH_Init+0x116>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	4a6d      	ldr	r2, [pc, #436]	; (8004ec4 <HAL_ETH_Init+0x2bc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d204      	bcs.n	8004d1e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f043 030c 	orr.w	r3, r3, #12
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	e01a      	b.n	8004d54 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	4a68      	ldr	r2, [pc, #416]	; (8004ec4 <HAL_ETH_Init+0x2bc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d303      	bcc.n	8004d2e <HAL_ETH_Init+0x126>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	4a6b      	ldr	r2, [pc, #428]	; (8004ed8 <HAL_ETH_Init+0x2d0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d911      	bls.n	8004d52 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	4a69      	ldr	r2, [pc, #420]	; (8004ed8 <HAL_ETH_Init+0x2d0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d908      	bls.n	8004d48 <HAL_ETH_Init+0x140>
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	4a68      	ldr	r2, [pc, #416]	; (8004edc <HAL_ETH_Init+0x2d4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d804      	bhi.n	8004d48 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f043 0304 	orr.w	r3, r3, #4
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	e005      	b.n	8004d54 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f043 0310 	orr.w	r3, r3, #16
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	e000      	b.n	8004d54 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004d52:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004d5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d60:	2100      	movs	r1, #0
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fc17 	bl	8005596 <HAL_ETH_WritePHYRegister>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fdcd 	bl	8005914 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0d7      	b.n	8004f36 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004d86:	20ff      	movs	r0, #255	; 0xff
 8004d88:	f7fe fe24 	bl	80039d4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80a5 	beq.w	8004ee0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d96:	f7fe fe11 	bl	80039bc <HAL_GetTick>
 8004d9a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004d9c:	f107 030c 	add.w	r3, r7, #12
 8004da0:	461a      	mov	r2, r3
 8004da2:	2101      	movs	r1, #1
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fb8e 	bl	80054c6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004daa:	f7fe fe07 	bl	80039bc <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d90f      	bls.n	8004ddc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004dc0:	6939      	ldr	r1, [r7, #16]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fda6 	bl	8005914 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0ac      	b.n	8004f36 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0da      	beq.n	8004d9c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dea:	2100      	movs	r1, #0
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fbd2 	bl	8005596 <HAL_ETH_WritePHYRegister>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004dfc:	6939      	ldr	r1, [r7, #16]
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fd88 	bl	8005914 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e092      	b.n	8004f36 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e10:	f7fe fdd4 	bl	80039bc <HAL_GetTick>
 8004e14:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004e16:	f107 030c 	add.w	r3, r7, #12
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fb51 	bl	80054c6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004e24:	f7fe fdca 	bl	80039bc <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d90f      	bls.n	8004e56 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004e3a:	6939      	ldr	r1, [r7, #16]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fd69 	bl	8005914 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e06f      	b.n	8004f36 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0da      	beq.n	8004e16 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	461a      	mov	r2, r3
 8004e66:	2110      	movs	r1, #16
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fb2c 	bl	80054c6 <HAL_ETH_ReadPHYRegister>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00b      	beq.n	8004e8c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004e78:	6939      	ldr	r1, [r7, #16]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fd4a 	bl	8005914 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e054      	b.n	8004f36 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e002      	b.n	8004ea6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]
 8004eb6:	e035      	b.n	8004f24 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	e030      	b.n	8004f24 <HAL_ETH_Init+0x31c>
 8004ec2:	bf00      	nop
 8004ec4:	03938700 	.word	0x03938700
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40013800 	.word	0x40013800
 8004ed0:	01312cff 	.word	0x01312cff
 8004ed4:	02160ebf 	.word	0x02160ebf
 8004ed8:	05f5e0ff 	.word	0x05f5e0ff
 8004edc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	08db      	lsrs	r3, r3, #3
 8004ee6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fb4c 	bl	8005596 <HAL_ETH_WritePHYRegister>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00b      	beq.n	8004f1c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004f08:	6939      	ldr	r1, [r7, #16]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fd02 	bl	8005914 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e00c      	b.n	8004f36 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004f1c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004f20:	f7fe fd58 	bl	80039d4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004f24:	6939      	ldr	r1, [r7, #16]
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fcf4 	bl	8005914 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop

08004f40 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_ETH_DMATxDescListInit+0x20>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e052      	b.n	8005006 <HAL_ETH_DMATxDescListInit+0xc6>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e030      	b.n	8004fde <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	015b      	lsls	r3, r3, #5
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	4413      	add	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f8c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d105      	bne.n	8004fb6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d208      	bcs.n	8004fd2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	015b      	lsls	r3, r3, #5
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4413      	add	r3, r2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	60da      	str	r2, [r3, #12]
 8004fd0:	e002      	b.n	8004fd8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d3ca      	bcc.n	8004f7c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff0:	3310      	adds	r3, #16
 8004ff2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
 800501e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_ETH_DMARxDescListInit+0x20>
 800502e:	2302      	movs	r3, #2
 8005030:	e056      	b.n	80050e0 <HAL_ETH_DMARxDescListInit+0xce>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e034      	b.n	80050b8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	015b      	lsls	r3, r3, #5
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4413      	add	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800505e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005066:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	461a      	mov	r2, r3
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d105      	bne.n	8005090 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	3b01      	subs	r3, #1
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	429a      	cmp	r2, r3
 8005098:	d208      	bcs.n	80050ac <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	3301      	adds	r3, #1
 800509e:	015b      	lsls	r3, r3, #5
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	4413      	add	r3, r2
 80050a4:	461a      	mov	r2, r3
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	e002      	b.n	80050b2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	3301      	adds	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3c6      	bcc.n	800504e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ca:	330c      	adds	r3, #12
 80050cc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_ETH_TransmitFrame+0x24>
 800510c:	2302      	movs	r3, #2
 800510e:	e0cd      	b.n	80052ac <HAL_ETH_TransmitFrame+0x1c0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8005136:	2301      	movs	r3, #1
 8005138:	e0b8      	b.n	80052ac <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	da09      	bge.n	8005158 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2212      	movs	r2, #18
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0a9      	b.n	80052ac <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800515e:	4293      	cmp	r3, r2
 8005160:	d915      	bls.n	800518e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	4a54      	ldr	r2, [pc, #336]	; (80052b8 <HAL_ETH_TransmitFrame+0x1cc>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	0a9b      	lsrs	r3, r3, #10
 800516c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	4b51      	ldr	r3, [pc, #324]	; (80052b8 <HAL_ETH_TransmitFrame+0x1cc>)
 8005172:	fba3 1302 	umull	r1, r3, r3, r2
 8005176:	0a9b      	lsrs	r3, r3, #10
 8005178:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	3301      	adds	r3, #1
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e001      	b.n	8005192 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800518e:	2301      	movs	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d11c      	bne.n	80051d2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80051a6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80051b2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80051c2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80051d0:	e04b      	b.n	800526a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	e044      	b.n	8005262 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051e6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d107      	bne.n	80051fe <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051fc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005206:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	3b01      	subs	r3, #1
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	429a      	cmp	r2, r3
 8005210:	d116      	bne.n	8005240 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005220:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	4a25      	ldr	r2, [pc, #148]	; (80052bc <HAL_ETH_TransmitFrame+0x1d0>)
 8005226:	fb02 f203 	mul.w	r2, r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	4413      	add	r3, r2
 800522e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005232:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800523e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800524e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	461a      	mov	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	3301      	adds	r3, #1
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	429a      	cmp	r2, r3
 8005268:	d3b6      	bcc.n	80051d8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005272:	3314      	adds	r3, #20
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005286:	3314      	adds	r3, #20
 8005288:	2204      	movs	r2, #4
 800528a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005294:	3304      	adds	r3, #4
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	ac02b00b 	.word	0xac02b00b
 80052bc:	fffffa0c 	.word	0xfffffa0c

080052c0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e074      	b.n	80053c4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80052ea:	e05a      	b.n	80053a2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005300:	d10d      	bne.n	800531e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	461a      	mov	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
 800531c:	e041      	b.n	80053a2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	461a      	mov	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	629a      	str	r2, [r3, #40]	; 0x28
 8005342:	e02e      	b.n	80053a2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	2b01      	cmp	r3, #1
 800535c:	d103      	bne.n	8005366 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	0c1b      	lsrs	r3, r3, #16
 800536e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005372:	1f1a      	subs	r2, r3, #4
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	461a      	mov	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	e010      	b.n	80053c4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	db02      	blt.n	80053b2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d99c      	bls.n	80052ec <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e0:	3314      	adds	r3, #20
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d112      	bne.n	8005412 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f005 fc0b 	bl	800ac08 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fa:	3314      	adds	r3, #20
 80053fc:	2240      	movs	r2, #64	; 0x40
 80053fe:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005410:	e01b      	b.n	800544a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541a:	3314      	adds	r3, #20
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b01      	cmp	r3, #1
 8005424:	d111      	bne.n	800544a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f839 	bl	800549e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005434:	3314      	adds	r3, #20
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005452:	3314      	adds	r3, #20
 8005454:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005458:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005462:	3314      	adds	r3, #20
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800546a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800546e:	d112      	bne.n	8005496 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f81e 	bl	80054b2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800547e:	3314      	adds	r3, #20
 8005480:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005484:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b086      	sub	sp, #24
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	460b      	mov	r3, r1
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b82      	cmp	r3, #130	; 0x82
 80054e6:	d101      	bne.n	80054ec <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
 80054ea:	e050      	b.n	800558e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2282      	movs	r2, #130	; 0x82
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 031c 	and.w	r3, r3, #28
 8005502:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8a1b      	ldrh	r3, [r3, #16]
 8005508:	02db      	lsls	r3, r3, #11
 800550a:	b29b      	uxth	r3, r3
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005512:	897b      	ldrh	r3, [r7, #10]
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0302 	bic.w	r3, r3, #2
 8005526:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005538:	f7fe fa40 	bl	80039bc <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800553e:	e015      	b.n	800556c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005540:	f7fe fa3c 	bl	80039bc <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554e:	d309      	bcc.n	8005564 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e014      	b.n	800558e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e4      	bne.n	8005540 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	b29b      	uxth	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	460b      	mov	r3, r1
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b42      	cmp	r3, #66	; 0x42
 80055b6:	d101      	bne.n	80055bc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
 80055ba:	e04e      	b.n	800565a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2242      	movs	r2, #66	; 0x42
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f003 031c 	and.w	r3, r3, #28
 80055d2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8a1b      	ldrh	r3, [r3, #16]
 80055d8:	02db      	lsls	r3, r3, #11
 80055da:	b29b      	uxth	r3, r3
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80055e2:	897b      	ldrh	r3, [r7, #10]
 80055e4:	019b      	lsls	r3, r3, #6
 80055e6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f043 0302 	orr.w	r3, r3, #2
 80055f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005612:	f7fe f9d3 	bl	80039bc <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005618:	e015      	b.n	8005646 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800561a:	f7fe f9cf 	bl	80039bc <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005628:	d309      	bcc.n	800563e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e00d      	b.n	800565a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e4      	bne.n	800561a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_ETH_Start+0x16>
 8005674:	2302      	movs	r3, #2
 8005676:	e01f      	b.n	80056b8 <HAL_ETH_Start+0x56>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb45 	bl	8005d18 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fb7c 	bl	8005d8c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fc13 	bl	8005ec0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fbb0 	bl	8005e00 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fbdd 	bl	8005e60 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_ETH_Stop+0x16>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e01f      	b.n	8005716 <HAL_ETH_Stop+0x56>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fba2 	bl	8005e30 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fbcf 	bl	8005e90 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fb67 	bl	8005dc6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fbe1 	bl	8005ec0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fb27 	bl	8005d52 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_ETH_ConfigMAC+0x1c>
 8005738:	2302      	movs	r3, #2
 800573a:	e0e4      	b.n	8005906 <HAL_ETH_ConfigMAC+0x1e6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80b1 	beq.w	80058b6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4b6c      	ldr	r3, [pc, #432]	; (8005910 <HAL_ETH_ConfigMAC+0x1f0>)
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800576c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8005772:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005778:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800577e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005784:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800578a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005790:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8005796:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800579c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80057a2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80057a8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80057ae:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80057c6:	2001      	movs	r0, #1
 80057c8:	f7fe f904 	bl	80039d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80057dc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80057e2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80057e8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80057ee:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80057f4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80057fa:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005806:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005808:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005812:	2001      	movs	r0, #1
 8005814:	f7fe f8de 	bl	80039d4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005828:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005832:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005842:	4013      	ands	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005850:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005856:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800585c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8005862:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005868:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005880:	2001      	movs	r0, #1
 8005882:	f7fe f8a7 	bl	80039d4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80058a6:	2001      	movs	r0, #1
 80058a8:	f7fe f894 	bl	80039d4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	61da      	str	r2, [r3, #28]
 80058b4:	e01e      	b.n	80058f4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80058c4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80058e6:	2001      	movs	r0, #1
 80058e8:	f7fe f874 	bl	80039d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	ff20810f 	.word	0xff20810f

08005914 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b0b0      	sub	sp, #192	; 0xc0
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005930:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005938:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800593a:	2300      	movs	r3, #0
 800593c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800593e:	2300      	movs	r3, #0
 8005940:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005942:	2300      	movs	r3, #0
 8005944:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005946:	2300      	movs	r3, #0
 8005948:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800594a:	2300      	movs	r3, #0
 800594c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800594e:	2300      	movs	r3, #0
 8005950:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d103      	bne.n	8005962 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800595a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800595e:	663b      	str	r3, [r7, #96]	; 0x60
 8005960:	e001      	b.n	8005966 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005962:	2300      	movs	r3, #0
 8005964:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800596a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800596c:	2300      	movs	r3, #0
 800596e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005970:	2300      	movs	r3, #0
 8005972:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005974:	2300      	movs	r3, #0
 8005976:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005978:	2300      	movs	r3, #0
 800597a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800597c:	2300      	movs	r3, #0
 800597e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005984:	2300      	movs	r3, #0
 8005986:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800598a:	2300      	movs	r3, #0
 800598c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005990:	2300      	movs	r3, #0
 8005992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005996:	2300      	movs	r3, #0
 8005998:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80059ba:	2300      	movs	r3, #0
 80059bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80059e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059ec:	4bac      	ldr	r3, [pc, #688]	; (8005ca0 <ETH_MACDMAConfig+0x38c>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80059f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80059f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80059f8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80059fc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80059fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005a00:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005a06:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005a0a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005a0e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005a14:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005a18:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005a1c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005a20:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005a24:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005a28:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005a2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a3c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a48:	2001      	movs	r0, #1
 8005a4a:	f7fd ffc3 	bl	80039d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a56:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a5c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005a60:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005a66:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005a6c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005a72:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005a78:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005a7c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005a84:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a86:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a92:	2001      	movs	r0, #1
 8005a94:	f7fd ff9e 	bl	80039d4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005aa0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005aaa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005ab4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005ac0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ac4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005ac8:	4013      	ands	r3, r2
 8005aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005ace:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ad2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005ad4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005ad8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005ada:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005ade:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005ae4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005aea:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005aec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005af0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005af2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b04:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b10:	2001      	movs	r0, #1
 8005b12:	f7fd ff5f 	bl	80039d4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b1e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005b20:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005b24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	f7fd ff4a 	bl	80039d4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b48:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b52:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005b58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b5c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005b6e:	2304      	movs	r3, #4
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b7c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b82:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b88:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005b92:	2300      	movs	r3, #0
 8005b94:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9e:	3318      	adds	r3, #24
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005ba6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005baa:	4b3e      	ldr	r3, [pc, #248]	; (8005ca4 <ETH_MACDMAConfig+0x390>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005bb2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005bb4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005bb6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005bb8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005bba:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005bbc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005bbe:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005bc0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005bc2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005bc4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005bc6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005bca:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005bce:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005bd2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005bd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be6:	3318      	adds	r3, #24
 8005be8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf6:	3318      	adds	r3, #24
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f7fd fee8 	bl	80039d4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0c:	3318      	adds	r3, #24
 8005c0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c12:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005c18:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005c1c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005c20:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005c24:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c28:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005c2a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005c2e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c3c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f7fd fec1 	bl	80039d4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c5e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d10f      	bne.n	8005c88 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c70:	331c      	adds	r3, #28
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c84:	331c      	adds	r3, #28
 8005c86:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f809 	bl	8005ca8 <ETH_MACAddressConfig>
}
 8005c96:	bf00      	nop
 8005c98:	37c0      	adds	r7, #192	; 0xc0
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	ff20810f 	.word	0xff20810f
 8005ca4:	f8de3f23 	.word	0xf8de3f23

08005ca8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3305      	adds	r3, #5
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	3204      	adds	r2, #4
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <ETH_MACAddressConfig+0x68>)
 8005cca:	4413      	add	r3, r2
 8005ccc:	461a      	mov	r2, r3
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3303      	adds	r3, #3
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	061a      	lsls	r2, r3, #24
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3302      	adds	r3, #2
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	4313      	orrs	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <ETH_MACAddressConfig+0x6c>)
 8005cfa:	4413      	add	r3, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6013      	str	r3, [r2, #0]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40028040 	.word	0x40028040
 8005d14:	40028044 	.word	0x40028044

08005d18 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0208 	orr.w	r2, r2, #8
 8005d32:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	f000 f8e9 	bl	8005f14 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	601a      	str	r2, [r3, #0]
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0208 	bic.w	r2, r2, #8
 8005d6c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005d76:	2001      	movs	r0, #1
 8005d78:	f000 f8cc 	bl	8005f14 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0204 	orr.w	r2, r2, #4
 8005da6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005db0:	2001      	movs	r0, #1
 8005db2:	f000 f8af 	bl	8005f14 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	601a      	str	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0204 	bic.w	r2, r2, #4
 8005de0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005dea:	2001      	movs	r0, #1
 8005dec:	f000 f892 	bl	8005f14 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	601a      	str	r2, [r3, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e10:	3318      	adds	r3, #24
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e20:	3318      	adds	r3, #24
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e40:	3318      	adds	r3, #24
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e50:	3318      	adds	r3, #24
 8005e52:	601a      	str	r2, [r3, #0]
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e70:	3318      	adds	r3, #24
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0202 	orr.w	r2, r2, #2
 8005e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e80:	3318      	adds	r3, #24
 8005e82:	601a      	str	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea0:	3318      	adds	r3, #24
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0202 	bic.w	r2, r2, #2
 8005eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	601a      	str	r2, [r3, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed4:	3318      	adds	r3, #24
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee4:	3318      	adds	r3, #24
 8005ee6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef0:	3318      	adds	r3, #24
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	f000 f80c 	bl	8005f14 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f06:	3318      	adds	r3, #24
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <ETH_Delay+0x38>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0b      	ldr	r2, [pc, #44]	; (8005f50 <ETH_Delay+0x3c>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	0a5b      	lsrs	r3, r3, #9
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005f30:	bf00      	nop
  } 
  while (Delay --);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1e5a      	subs	r2, r3, #1
 8005f36:	60fa      	str	r2, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1f9      	bne.n	8005f30 <ETH_Delay+0x1c>
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	20000000 	.word	0x20000000
 8005f50:	10624dd3 	.word	0x10624dd3

08005f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b089      	sub	sp, #36	; 0x24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	e16b      	b.n	8006248 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f70:	2201      	movs	r2, #1
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4013      	ands	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	f040 815a 	bne.w	8006242 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d005      	beq.n	8005fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d130      	bne.n	8006008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fdc:	2201      	movs	r2, #1
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	091b      	lsrs	r3, r3, #4
 8005ff2:	f003 0201 	and.w	r2, r3, #1
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	2b03      	cmp	r3, #3
 8006012:	d017      	beq.n	8006044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	2203      	movs	r2, #3
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	43db      	mvns	r3, r3
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	4013      	ands	r3, r2
 800602a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4313      	orrs	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d123      	bne.n	8006098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	08da      	lsrs	r2, r3, #3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3208      	adds	r2, #8
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	220f      	movs	r2, #15
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4013      	ands	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4313      	orrs	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	08da      	lsrs	r2, r3, #3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3208      	adds	r2, #8
 8006092:	69b9      	ldr	r1, [r7, #24]
 8006094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	2203      	movs	r2, #3
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 0203 	and.w	r2, r3, #3
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80b4 	beq.w	8006242 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	4b60      	ldr	r3, [pc, #384]	; (8006260 <HAL_GPIO_Init+0x30c>)
 80060e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e2:	4a5f      	ldr	r2, [pc, #380]	; (8006260 <HAL_GPIO_Init+0x30c>)
 80060e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060e8:	6453      	str	r3, [r2, #68]	; 0x44
 80060ea:	4b5d      	ldr	r3, [pc, #372]	; (8006260 <HAL_GPIO_Init+0x30c>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060f6:	4a5b      	ldr	r2, [pc, #364]	; (8006264 <HAL_GPIO_Init+0x310>)
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	089b      	lsrs	r3, r3, #2
 80060fc:	3302      	adds	r3, #2
 80060fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	220f      	movs	r2, #15
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a52      	ldr	r2, [pc, #328]	; (8006268 <HAL_GPIO_Init+0x314>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d02b      	beq.n	800617a <HAL_GPIO_Init+0x226>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a51      	ldr	r2, [pc, #324]	; (800626c <HAL_GPIO_Init+0x318>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d025      	beq.n	8006176 <HAL_GPIO_Init+0x222>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a50      	ldr	r2, [pc, #320]	; (8006270 <HAL_GPIO_Init+0x31c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01f      	beq.n	8006172 <HAL_GPIO_Init+0x21e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a4f      	ldr	r2, [pc, #316]	; (8006274 <HAL_GPIO_Init+0x320>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d019      	beq.n	800616e <HAL_GPIO_Init+0x21a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a4e      	ldr	r2, [pc, #312]	; (8006278 <HAL_GPIO_Init+0x324>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <HAL_GPIO_Init+0x216>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a4d      	ldr	r2, [pc, #308]	; (800627c <HAL_GPIO_Init+0x328>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00d      	beq.n	8006166 <HAL_GPIO_Init+0x212>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a4c      	ldr	r2, [pc, #304]	; (8006280 <HAL_GPIO_Init+0x32c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d007      	beq.n	8006162 <HAL_GPIO_Init+0x20e>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a4b      	ldr	r2, [pc, #300]	; (8006284 <HAL_GPIO_Init+0x330>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d101      	bne.n	800615e <HAL_GPIO_Init+0x20a>
 800615a:	2307      	movs	r3, #7
 800615c:	e00e      	b.n	800617c <HAL_GPIO_Init+0x228>
 800615e:	2308      	movs	r3, #8
 8006160:	e00c      	b.n	800617c <HAL_GPIO_Init+0x228>
 8006162:	2306      	movs	r3, #6
 8006164:	e00a      	b.n	800617c <HAL_GPIO_Init+0x228>
 8006166:	2305      	movs	r3, #5
 8006168:	e008      	b.n	800617c <HAL_GPIO_Init+0x228>
 800616a:	2304      	movs	r3, #4
 800616c:	e006      	b.n	800617c <HAL_GPIO_Init+0x228>
 800616e:	2303      	movs	r3, #3
 8006170:	e004      	b.n	800617c <HAL_GPIO_Init+0x228>
 8006172:	2302      	movs	r3, #2
 8006174:	e002      	b.n	800617c <HAL_GPIO_Init+0x228>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <HAL_GPIO_Init+0x228>
 800617a:	2300      	movs	r3, #0
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	f002 0203 	and.w	r2, r2, #3
 8006182:	0092      	lsls	r2, r2, #2
 8006184:	4093      	lsls	r3, r2
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	4313      	orrs	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800618c:	4935      	ldr	r1, [pc, #212]	; (8006264 <HAL_GPIO_Init+0x310>)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	089b      	lsrs	r3, r3, #2
 8006192:	3302      	adds	r3, #2
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800619a:	4b3b      	ldr	r3, [pc, #236]	; (8006288 <HAL_GPIO_Init+0x334>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061be:	4a32      	ldr	r2, [pc, #200]	; (8006288 <HAL_GPIO_Init+0x334>)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80061c4:	4b30      	ldr	r3, [pc, #192]	; (8006288 <HAL_GPIO_Init+0x334>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	4013      	ands	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061e8:	4a27      	ldr	r2, [pc, #156]	; (8006288 <HAL_GPIO_Init+0x334>)
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061ee:	4b26      	ldr	r3, [pc, #152]	; (8006288 <HAL_GPIO_Init+0x334>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	43db      	mvns	r3, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4013      	ands	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006212:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <HAL_GPIO_Init+0x334>)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006218:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <HAL_GPIO_Init+0x334>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	43db      	mvns	r3, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4013      	ands	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800623c:	4a12      	ldr	r2, [pc, #72]	; (8006288 <HAL_GPIO_Init+0x334>)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	3301      	adds	r3, #1
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b0f      	cmp	r3, #15
 800624c:	f67f ae90 	bls.w	8005f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006250:	bf00      	nop
 8006252:	bf00      	nop
 8006254:	3724      	adds	r7, #36	; 0x24
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800
 8006264:	40013800 	.word	0x40013800
 8006268:	40020000 	.word	0x40020000
 800626c:	40020400 	.word	0x40020400
 8006270:	40020800 	.word	0x40020800
 8006274:	40020c00 	.word	0x40020c00
 8006278:	40021000 	.word	0x40021000
 800627c:	40021400 	.word	0x40021400
 8006280:	40021800 	.word	0x40021800
 8006284:	40021c00 	.word	0x40021c00
 8006288:	40013c00 	.word	0x40013c00

0800628c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	887b      	ldrh	r3, [r7, #2]
 800629e:	4013      	ands	r3, r2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
 80062a8:	e001      	b.n	80062ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	807b      	strh	r3, [r7, #2]
 80062c8:	4613      	mov	r3, r2
 80062ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062cc:	787b      	ldrb	r3, [r7, #1]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062d2:	887a      	ldrh	r2, [r7, #2]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062d8:	e003      	b.n	80062e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062da:	887b      	ldrh	r3, [r7, #2]
 80062dc:	041a      	lsls	r2, r3, #16
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	619a      	str	r2, [r3, #24]
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006300:	887a      	ldrh	r2, [r7, #2]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4013      	ands	r3, r2
 8006306:	041a      	lsls	r2, r3, #16
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	43d9      	mvns	r1, r3
 800630c:	887b      	ldrh	r3, [r7, #2]
 800630e:	400b      	ands	r3, r1
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	619a      	str	r2, [r3, #24]
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
	...

08006324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e12b      	b.n	800658e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fb fa44 	bl	80017d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2224      	movs	r2, #36	; 0x24
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0201 	bic.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006388:	f001 fcb0 	bl	8007cec <HAL_RCC_GetPCLK1Freq>
 800638c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	4a81      	ldr	r2, [pc, #516]	; (8006598 <HAL_I2C_Init+0x274>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d807      	bhi.n	80063a8 <HAL_I2C_Init+0x84>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a80      	ldr	r2, [pc, #512]	; (800659c <HAL_I2C_Init+0x278>)
 800639c:	4293      	cmp	r3, r2
 800639e:	bf94      	ite	ls
 80063a0:	2301      	movls	r3, #1
 80063a2:	2300      	movhi	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	e006      	b.n	80063b6 <HAL_I2C_Init+0x92>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4a7d      	ldr	r2, [pc, #500]	; (80065a0 <HAL_I2C_Init+0x27c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	bf94      	ite	ls
 80063b0:	2301      	movls	r3, #1
 80063b2:	2300      	movhi	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e0e7      	b.n	800658e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4a78      	ldr	r2, [pc, #480]	; (80065a4 <HAL_I2C_Init+0x280>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	0c9b      	lsrs	r3, r3, #18
 80063c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	430a      	orrs	r2, r1
 80063dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	4a6a      	ldr	r2, [pc, #424]	; (8006598 <HAL_I2C_Init+0x274>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d802      	bhi.n	80063f8 <HAL_I2C_Init+0xd4>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	3301      	adds	r3, #1
 80063f6:	e009      	b.n	800640c <HAL_I2C_Init+0xe8>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	4a69      	ldr	r2, [pc, #420]	; (80065a8 <HAL_I2C_Init+0x284>)
 8006404:	fba2 2303 	umull	r2, r3, r2, r3
 8006408:	099b      	lsrs	r3, r3, #6
 800640a:	3301      	adds	r3, #1
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	430b      	orrs	r3, r1
 8006412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800641e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	495c      	ldr	r1, [pc, #368]	; (8006598 <HAL_I2C_Init+0x274>)
 8006428:	428b      	cmp	r3, r1
 800642a:	d819      	bhi.n	8006460 <HAL_I2C_Init+0x13c>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	1e59      	subs	r1, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	fbb1 f3f3 	udiv	r3, r1, r3
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006440:	400b      	ands	r3, r1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_I2C_Init+0x138>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1e59      	subs	r1, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	fbb1 f3f3 	udiv	r3, r1, r3
 8006454:	3301      	adds	r3, #1
 8006456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800645a:	e051      	b.n	8006500 <HAL_I2C_Init+0x1dc>
 800645c:	2304      	movs	r3, #4
 800645e:	e04f      	b.n	8006500 <HAL_I2C_Init+0x1dc>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d111      	bne.n	800648c <HAL_I2C_Init+0x168>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1e58      	subs	r0, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6859      	ldr	r1, [r3, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	440b      	add	r3, r1
 8006476:	fbb0 f3f3 	udiv	r3, r0, r3
 800647a:	3301      	adds	r3, #1
 800647c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006480:	2b00      	cmp	r3, #0
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e012      	b.n	80064b2 <HAL_I2C_Init+0x18e>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	1e58      	subs	r0, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6859      	ldr	r1, [r3, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	0099      	lsls	r1, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	fbb0 f3f3 	udiv	r3, r0, r3
 80064a2:	3301      	adds	r3, #1
 80064a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bf0c      	ite	eq
 80064ac:	2301      	moveq	r3, #1
 80064ae:	2300      	movne	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <HAL_I2C_Init+0x196>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e022      	b.n	8006500 <HAL_I2C_Init+0x1dc>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10e      	bne.n	80064e0 <HAL_I2C_Init+0x1bc>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1e58      	subs	r0, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	440b      	add	r3, r1
 80064d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80064d4:	3301      	adds	r3, #1
 80064d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064de:	e00f      	b.n	8006500 <HAL_I2C_Init+0x1dc>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	1e58      	subs	r0, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6859      	ldr	r1, [r3, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	0099      	lsls	r1, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064f6:	3301      	adds	r3, #1
 80064f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	6809      	ldr	r1, [r1, #0]
 8006504:	4313      	orrs	r3, r2
 8006506:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69da      	ldr	r2, [r3, #28]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800652e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6911      	ldr	r1, [r2, #16]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	68d2      	ldr	r2, [r2, #12]
 800653a:	4311      	orrs	r1, r2
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	430b      	orrs	r3, r1
 8006542:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695a      	ldr	r2, [r3, #20]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	000186a0 	.word	0x000186a0
 800659c:	001e847f 	.word	0x001e847f
 80065a0:	003d08ff 	.word	0x003d08ff
 80065a4:	431bde83 	.word	0x431bde83
 80065a8:	10624dd3 	.word	0x10624dd3

080065ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	607a      	str	r2, [r7, #4]
 80065b6:	461a      	mov	r2, r3
 80065b8:	460b      	mov	r3, r1
 80065ba:	817b      	strh	r3, [r7, #10]
 80065bc:	4613      	mov	r3, r2
 80065be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065c0:	f7fd f9fc 	bl	80039bc <HAL_GetTick>
 80065c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	f040 80e0 	bne.w	8006794 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	2319      	movs	r3, #25
 80065da:	2201      	movs	r2, #1
 80065dc:	4970      	ldr	r1, [pc, #448]	; (80067a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fd86 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065ea:	2302      	movs	r3, #2
 80065ec:	e0d3      	b.n	8006796 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_I2C_Master_Transmit+0x50>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e0cc      	b.n	8006796 <HAL_I2C_Master_Transmit+0x1ea>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d007      	beq.n	8006622 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006630:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2221      	movs	r2, #33	; 0x21
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2210      	movs	r2, #16
 800663e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	893a      	ldrh	r2, [r7, #8]
 8006652:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a50      	ldr	r2, [pc, #320]	; (80067a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006662:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006664:	8979      	ldrh	r1, [r7, #10]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fbf0 	bl	8006e50 <I2C_MasterRequestWrite>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e08d      	b.n	8006796 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006690:	e066      	b.n	8006760 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	6a39      	ldr	r1, [r7, #32]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fe00 	bl	800729c <I2C_WaitOnTXEFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d107      	bne.n	80066ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e06b      	b.n	8006796 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	781a      	ldrb	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d11b      	bne.n	8006734 <HAL_I2C_Master_Transmit+0x188>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006700:	2b00      	cmp	r3, #0
 8006702:	d017      	beq.n	8006734 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	6a39      	ldr	r1, [r7, #32]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fdf0 	bl	800731e <I2C_WaitOnBTFFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00d      	beq.n	8006760 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	2b04      	cmp	r3, #4
 800674a:	d107      	bne.n	800675c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800675a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e01a      	b.n	8006796 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006764:	2b00      	cmp	r3, #0
 8006766:	d194      	bne.n	8006692 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	e000      	b.n	8006796 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006794:	2302      	movs	r3, #2
  }
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	00100002 	.word	0x00100002
 80067a4:	ffff0000 	.word	0xffff0000

080067a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	; 0x30
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	461a      	mov	r2, r3
 80067b4:	460b      	mov	r3, r1
 80067b6:	817b      	strh	r3, [r7, #10]
 80067b8:	4613      	mov	r3, r2
 80067ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067bc:	f7fd f8fe 	bl	80039bc <HAL_GetTick>
 80067c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	f040 820b 	bne.w	8006be6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	2319      	movs	r3, #25
 80067d6:	2201      	movs	r2, #1
 80067d8:	497c      	ldr	r1, [pc, #496]	; (80069cc <HAL_I2C_Master_Receive+0x224>)
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fc88 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80067e6:	2302      	movs	r3, #2
 80067e8:	e1fe      	b.n	8006be8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_I2C_Master_Receive+0x50>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e1f7      	b.n	8006be8 <HAL_I2C_Master_Receive+0x440>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b01      	cmp	r3, #1
 800680c:	d007      	beq.n	800681e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0201 	orr.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800682c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2222      	movs	r2, #34	; 0x22
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2210      	movs	r2, #16
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	893a      	ldrh	r2, [r7, #8]
 800684e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4a5c      	ldr	r2, [pc, #368]	; (80069d0 <HAL_I2C_Master_Receive+0x228>)
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006860:	8979      	ldrh	r1, [r7, #10]
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 fb74 	bl	8006f54 <I2C_MasterRequestRead>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e1b8      	b.n	8006be8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d113      	bne.n	80068a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687e:	2300      	movs	r3, #0
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e18c      	b.n	8006bc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d11b      	bne.n	80068e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068be:	2300      	movs	r3, #0
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	61fb      	str	r3, [r7, #28]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	e16c      	b.n	8006bc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d11b      	bne.n	8006926 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800690c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800690e:	2300      	movs	r3, #0
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	e14c      	b.n	8006bc0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006934:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800694c:	e138      	b.n	8006bc0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006952:	2b03      	cmp	r3, #3
 8006954:	f200 80f1 	bhi.w	8006b3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695c:	2b01      	cmp	r3, #1
 800695e:	d123      	bne.n	80069a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006962:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fd1b 	bl	80073a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e139      	b.n	8006be8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069a6:	e10b      	b.n	8006bc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d14e      	bne.n	8006a4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	2200      	movs	r2, #0
 80069b8:	4906      	ldr	r1, [pc, #24]	; (80069d4 <HAL_I2C_Master_Receive+0x22c>)
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fb98 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d008      	beq.n	80069d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e10e      	b.n	8006be8 <HAL_I2C_Master_Receive+0x440>
 80069ca:	bf00      	nop
 80069cc:	00100002 	.word	0x00100002
 80069d0:	ffff0000 	.word	0xffff0000
 80069d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691a      	ldr	r2, [r3, #16]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691a      	ldr	r2, [r3, #16]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a4c:	e0b8      	b.n	8006bc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	2200      	movs	r2, #0
 8006a56:	4966      	ldr	r1, [pc, #408]	; (8006bf0 <HAL_I2C_Master_Receive+0x448>)
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 fb49 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e0bf      	b.n	8006be8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	494f      	ldr	r1, [pc, #316]	; (8006bf0 <HAL_I2C_Master_Receive+0x448>)
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fb1b 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e091      	b.n	8006be8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b38:	e042      	b.n	8006bc0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fc2e 	bl	80073a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e04c      	b.n	8006be8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f003 0304 	and.w	r3, r3, #4
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d118      	bne.n	8006bc0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f47f aec2 	bne.w	800694e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3728      	adds	r7, #40	; 0x28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	00010004 	.word	0x00010004

08006bf4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08a      	sub	sp, #40	; 0x28
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	460b      	mov	r3, r1
 8006c02:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006c04:	f7fc feda 	bl	80039bc <HAL_GetTick>
 8006c08:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	f040 8111 	bne.w	8006e3e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	2319      	movs	r3, #25
 8006c22:	2201      	movs	r2, #1
 8006c24:	4988      	ldr	r1, [pc, #544]	; (8006e48 <HAL_I2C_IsDeviceReady+0x254>)
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fa62 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006c32:	2302      	movs	r3, #2
 8006c34:	e104      	b.n	8006e40 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_I2C_IsDeviceReady+0x50>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e0fd      	b.n	8006e40 <HAL_I2C_IsDeviceReady+0x24c>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d007      	beq.n	8006c6a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0201 	orr.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2224      	movs	r2, #36	; 0x24
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a70      	ldr	r2, [pc, #448]	; (8006e4c <HAL_I2C_IsDeviceReady+0x258>)
 8006c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c9c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fa20 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00d      	beq.n	8006cd2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc4:	d103      	bne.n	8006cce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e0b6      	b.n	8006e40 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cd2:	897b      	ldrh	r3, [r7, #10]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ce0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006ce2:	f7fc fe6b 	bl	80039bc <HAL_GetTick>
 8006ce6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	bf0c      	ite	eq
 8006cf6:	2301      	moveq	r3, #1
 8006cf8:	2300      	movne	r3, #0
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0c:	bf0c      	ite	eq
 8006d0e:	2301      	moveq	r3, #1
 8006d10:	2300      	movne	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006d16:	e025      	b.n	8006d64 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d18:	f7fc fe50 	bl	80039bc <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d302      	bcc.n	8006d2e <HAL_I2C_IsDeviceReady+0x13a>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d103      	bne.n	8006d36 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	22a0      	movs	r2, #160	; 0xa0
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	bf0c      	ite	eq
 8006d44:	2301      	moveq	r3, #1
 8006d46:	2300      	movne	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5a:	bf0c      	ite	eq
 8006d5c:	2301      	moveq	r3, #1
 8006d5e:	2300      	movne	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2ba0      	cmp	r3, #160	; 0xa0
 8006d6e:	d005      	beq.n	8006d7c <HAL_I2C_IsDeviceReady+0x188>
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d102      	bne.n	8006d7c <HAL_I2C_IsDeviceReady+0x188>
 8006d76:	7dbb      	ldrb	r3, [r7, #22]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0cd      	beq.n	8006d18 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d129      	bne.n	8006de6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2319      	movs	r3, #25
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4921      	ldr	r1, [pc, #132]	; (8006e48 <HAL_I2C_IsDeviceReady+0x254>)
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 f994 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e036      	b.n	8006e40 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e02c      	b.n	8006e40 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dfe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	2319      	movs	r3, #25
 8006e06:	2201      	movs	r2, #1
 8006e08:	490f      	ldr	r1, [pc, #60]	; (8006e48 <HAL_I2C_IsDeviceReady+0x254>)
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f970 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e012      	b.n	8006e40 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	f4ff af32 	bcc.w	8006c8e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006e3e:	2302      	movs	r3, #2
  }
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3720      	adds	r7, #32
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	00100002 	.word	0x00100002
 8006e4c:	ffff0000 	.word	0xffff0000

08006e50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	607a      	str	r2, [r7, #4]
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d006      	beq.n	8006e7a <I2C_MasterRequestWrite+0x2a>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d003      	beq.n	8006e7a <I2C_MasterRequestWrite+0x2a>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e78:	d108      	bne.n	8006e8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e00b      	b.n	8006ea4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e90:	2b12      	cmp	r3, #18
 8006e92:	d107      	bne.n	8006ea4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ea2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f91d 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00d      	beq.n	8006ed8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eca:	d103      	bne.n	8006ed4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e035      	b.n	8006f44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ee0:	d108      	bne.n	8006ef4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ee2:	897b      	ldrh	r3, [r7, #10]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ef0:	611a      	str	r2, [r3, #16]
 8006ef2:	e01b      	b.n	8006f2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ef4:	897b      	ldrh	r3, [r7, #10]
 8006ef6:	11db      	asrs	r3, r3, #7
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f003 0306 	and.w	r3, r3, #6
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f063 030f 	orn	r3, r3, #15
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	490e      	ldr	r1, [pc, #56]	; (8006f4c <I2C_MasterRequestWrite+0xfc>)
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f943 	bl	800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e010      	b.n	8006f44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f22:	897b      	ldrh	r3, [r7, #10]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	4907      	ldr	r1, [pc, #28]	; (8006f50 <I2C_MasterRequestWrite+0x100>)
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f933 	bl	800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	00010008 	.word	0x00010008
 8006f50:	00010002 	.word	0x00010002

08006f54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af02      	add	r7, sp, #8
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	460b      	mov	r3, r1
 8006f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d006      	beq.n	8006f8e <I2C_MasterRequestRead+0x3a>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d003      	beq.n	8006f8e <I2C_MasterRequestRead+0x3a>
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f8c:	d108      	bne.n	8006fa0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	e00b      	b.n	8006fb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	2b11      	cmp	r3, #17
 8006fa6:	d107      	bne.n	8006fb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f893 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00d      	beq.n	8006fec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fde:	d103      	bne.n	8006fe8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e079      	b.n	80070e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff4:	d108      	bne.n	8007008 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ff6:	897b      	ldrh	r3, [r7, #10]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	f043 0301 	orr.w	r3, r3, #1
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	611a      	str	r2, [r3, #16]
 8007006:	e05f      	b.n	80070c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007008:	897b      	ldrh	r3, [r7, #10]
 800700a:	11db      	asrs	r3, r3, #7
 800700c:	b2db      	uxtb	r3, r3
 800700e:	f003 0306 	and.w	r3, r3, #6
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f063 030f 	orn	r3, r3, #15
 8007018:	b2da      	uxtb	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4930      	ldr	r1, [pc, #192]	; (80070e8 <I2C_MasterRequestRead+0x194>)
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 f8b9 	bl	800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e054      	b.n	80070e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007036:	897b      	ldrh	r3, [r7, #10]
 8007038:	b2da      	uxtb	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	4929      	ldr	r1, [pc, #164]	; (80070ec <I2C_MasterRequestRead+0x198>)
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f8a9 	bl	800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e044      	b.n	80070e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007056:	2300      	movs	r3, #0
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800707a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f831 	bl	80070f0 <I2C_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a2:	d103      	bne.n	80070ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e017      	b.n	80070e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80070b0:	897b      	ldrh	r3, [r7, #10]
 80070b2:	11db      	asrs	r3, r3, #7
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	f003 0306 	and.w	r3, r3, #6
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f063 030e 	orn	r3, r3, #14
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	4907      	ldr	r1, [pc, #28]	; (80070ec <I2C_MasterRequestRead+0x198>)
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 f865 	bl	800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	00010008 	.word	0x00010008
 80070ec:	00010002 	.word	0x00010002

080070f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007100:	e025      	b.n	800714e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d021      	beq.n	800714e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800710a:	f7fc fc57 	bl	80039bc <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d302      	bcc.n	8007120 <I2C_WaitOnFlagUntilTimeout+0x30>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d116      	bne.n	800714e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f043 0220 	orr.w	r2, r3, #32
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e023      	b.n	8007196 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	0c1b      	lsrs	r3, r3, #16
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b01      	cmp	r3, #1
 8007156:	d10d      	bne.n	8007174 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	43da      	mvns	r2, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	e00c      	b.n	800718e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	43da      	mvns	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4013      	ands	r3, r2
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	bf0c      	ite	eq
 8007186:	2301      	moveq	r3, #1
 8007188:	2300      	movne	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	429a      	cmp	r2, r3
 8007192:	d0b6      	beq.n	8007102 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
 80071aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071ac:	e051      	b.n	8007252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071bc:	d123      	bne.n	8007206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f043 0204 	orr.w	r2, r3, #4
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e046      	b.n	8007294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720c:	d021      	beq.n	8007252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720e:	f7fc fbd5 	bl	80039bc <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d116      	bne.n	8007252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2220      	movs	r2, #32
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f043 0220 	orr.w	r2, r3, #32
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e020      	b.n	8007294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	0c1b      	lsrs	r3, r3, #16
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10c      	bne.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	43da      	mvns	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4013      	ands	r3, r2
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	bf14      	ite	ne
 800726e:	2301      	movne	r3, #1
 8007270:	2300      	moveq	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	e00b      	b.n	800728e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	43da      	mvns	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4013      	ands	r3, r2
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d18d      	bne.n	80071ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072a8:	e02d      	b.n	8007306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 f8ce 	bl	800744c <I2C_IsAcknowledgeFailed>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e02d      	b.n	8007316 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	d021      	beq.n	8007306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c2:	f7fc fb7b 	bl	80039bc <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d302      	bcc.n	80072d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d116      	bne.n	8007306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e007      	b.n	8007316 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007310:	2b80      	cmp	r3, #128	; 0x80
 8007312:	d1ca      	bne.n	80072aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800732a:	e02d      	b.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f88d 	bl	800744c <I2C_IsAcknowledgeFailed>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e02d      	b.n	8007398 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007342:	d021      	beq.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007344:	f7fc fb3a 	bl	80039bc <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	429a      	cmp	r2, r3
 8007352:	d302      	bcc.n	800735a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d116      	bne.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	f043 0220 	orr.w	r2, r3, #32
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e007      	b.n	8007398 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b04      	cmp	r3, #4
 8007394:	d1ca      	bne.n	800732c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073ac:	e042      	b.n	8007434 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d119      	bne.n	80073f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0210 	mvn.w	r2, #16
 80073c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e029      	b.n	8007444 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f0:	f7fc fae4 	bl	80039bc <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d302      	bcc.n	8007406 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d116      	bne.n	8007434 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	f043 0220 	orr.w	r2, r3, #32
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e007      	b.n	8007444 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d1b5      	bne.n	80073ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800745e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007462:	d11b      	bne.n	800749c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800746c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	f043 0204 	orr.w	r2, r3, #4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e000      	b.n	800749e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e264      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d075      	beq.n	80075b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074ca:	4ba3      	ldr	r3, [pc, #652]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 030c 	and.w	r3, r3, #12
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d00c      	beq.n	80074f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074d6:	4ba0      	ldr	r3, [pc, #640]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074de:	2b08      	cmp	r3, #8
 80074e0:	d112      	bne.n	8007508 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074e2:	4b9d      	ldr	r3, [pc, #628]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ee:	d10b      	bne.n	8007508 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f0:	4b99      	ldr	r3, [pc, #612]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d05b      	beq.n	80075b4 <HAL_RCC_OscConfig+0x108>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d157      	bne.n	80075b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e23f      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007510:	d106      	bne.n	8007520 <HAL_RCC_OscConfig+0x74>
 8007512:	4b91      	ldr	r3, [pc, #580]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a90      	ldr	r2, [pc, #576]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	e01d      	b.n	800755c <HAL_RCC_OscConfig+0xb0>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007528:	d10c      	bne.n	8007544 <HAL_RCC_OscConfig+0x98>
 800752a:	4b8b      	ldr	r3, [pc, #556]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a8a      	ldr	r2, [pc, #552]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4b88      	ldr	r3, [pc, #544]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a87      	ldr	r2, [pc, #540]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800753c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	e00b      	b.n	800755c <HAL_RCC_OscConfig+0xb0>
 8007544:	4b84      	ldr	r3, [pc, #528]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a83      	ldr	r2, [pc, #524]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800754a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	4b81      	ldr	r3, [pc, #516]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a80      	ldr	r2, [pc, #512]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800755a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d013      	beq.n	800758c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007564:	f7fc fa2a 	bl	80039bc <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800756c:	f7fc fa26 	bl	80039bc <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b64      	cmp	r3, #100	; 0x64
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e204      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800757e:	4b76      	ldr	r3, [pc, #472]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0f0      	beq.n	800756c <HAL_RCC_OscConfig+0xc0>
 800758a:	e014      	b.n	80075b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800758c:	f7fc fa16 	bl	80039bc <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007592:	e008      	b.n	80075a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007594:	f7fc fa12 	bl	80039bc <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b64      	cmp	r3, #100	; 0x64
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e1f0      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075a6:	4b6c      	ldr	r3, [pc, #432]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f0      	bne.n	8007594 <HAL_RCC_OscConfig+0xe8>
 80075b2:	e000      	b.n	80075b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d063      	beq.n	800768a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075c2:	4b65      	ldr	r3, [pc, #404]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 030c 	and.w	r3, r3, #12
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075ce:	4b62      	ldr	r3, [pc, #392]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d11c      	bne.n	8007614 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075da:	4b5f      	ldr	r3, [pc, #380]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d116      	bne.n	8007614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075e6:	4b5c      	ldr	r3, [pc, #368]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_RCC_OscConfig+0x152>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d001      	beq.n	80075fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e1c4      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075fe:	4b56      	ldr	r3, [pc, #344]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4952      	ldr	r1, [pc, #328]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800760e:	4313      	orrs	r3, r2
 8007610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007612:	e03a      	b.n	800768a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d020      	beq.n	800765e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800761c:	4b4f      	ldr	r3, [pc, #316]	; (800775c <HAL_RCC_OscConfig+0x2b0>)
 800761e:	2201      	movs	r2, #1
 8007620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007622:	f7fc f9cb 	bl	80039bc <HAL_GetTick>
 8007626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007628:	e008      	b.n	800763c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800762a:	f7fc f9c7 	bl	80039bc <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e1a5      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763c:	4b46      	ldr	r3, [pc, #280]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0f0      	beq.n	800762a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007648:	4b43      	ldr	r3, [pc, #268]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4940      	ldr	r1, [pc, #256]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007658:	4313      	orrs	r3, r2
 800765a:	600b      	str	r3, [r1, #0]
 800765c:	e015      	b.n	800768a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800765e:	4b3f      	ldr	r3, [pc, #252]	; (800775c <HAL_RCC_OscConfig+0x2b0>)
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fc f9aa 	bl	80039bc <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800766c:	f7fc f9a6 	bl	80039bc <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e184      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800767e:	4b36      	ldr	r3, [pc, #216]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f0      	bne.n	800766c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	2b00      	cmp	r3, #0
 8007694:	d030      	beq.n	80076f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d016      	beq.n	80076cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800769e:	4b30      	ldr	r3, [pc, #192]	; (8007760 <HAL_RCC_OscConfig+0x2b4>)
 80076a0:	2201      	movs	r2, #1
 80076a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a4:	f7fc f98a 	bl	80039bc <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ac:	f7fc f986 	bl	80039bc <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e164      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076be:	4b26      	ldr	r3, [pc, #152]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80076c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0f0      	beq.n	80076ac <HAL_RCC_OscConfig+0x200>
 80076ca:	e015      	b.n	80076f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076cc:	4b24      	ldr	r3, [pc, #144]	; (8007760 <HAL_RCC_OscConfig+0x2b4>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076d2:	f7fc f973 	bl	80039bc <HAL_GetTick>
 80076d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076da:	f7fc f96f 	bl	80039bc <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e14d      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ec:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80076ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f0      	bne.n	80076da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 80a0 	beq.w	8007846 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007706:	2300      	movs	r3, #0
 8007708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10f      	bne.n	8007736 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]
 800771a:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	4a0e      	ldr	r2, [pc, #56]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007724:	6413      	str	r3, [r2, #64]	; 0x40
 8007726:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800772e:	60bb      	str	r3, [r7, #8]
 8007730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <HAL_RCC_OscConfig+0x2b8>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773e:	2b00      	cmp	r3, #0
 8007740:	d121      	bne.n	8007786 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007742:	4b08      	ldr	r3, [pc, #32]	; (8007764 <HAL_RCC_OscConfig+0x2b8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a07      	ldr	r2, [pc, #28]	; (8007764 <HAL_RCC_OscConfig+0x2b8>)
 8007748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800774c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800774e:	f7fc f935 	bl	80039bc <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007754:	e011      	b.n	800777a <HAL_RCC_OscConfig+0x2ce>
 8007756:	bf00      	nop
 8007758:	40023800 	.word	0x40023800
 800775c:	42470000 	.word	0x42470000
 8007760:	42470e80 	.word	0x42470e80
 8007764:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007768:	f7fc f928 	bl	80039bc <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e106      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800777a:	4b85      	ldr	r3, [pc, #532]	; (8007990 <HAL_RCC_OscConfig+0x4e4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f0      	beq.n	8007768 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d106      	bne.n	800779c <HAL_RCC_OscConfig+0x2f0>
 800778e:	4b81      	ldr	r3, [pc, #516]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	4a80      	ldr	r2, [pc, #512]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	6713      	str	r3, [r2, #112]	; 0x70
 800779a:	e01c      	b.n	80077d6 <HAL_RCC_OscConfig+0x32a>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	d10c      	bne.n	80077be <HAL_RCC_OscConfig+0x312>
 80077a4:	4b7b      	ldr	r3, [pc, #492]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80077a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a8:	4a7a      	ldr	r2, [pc, #488]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80077aa:	f043 0304 	orr.w	r3, r3, #4
 80077ae:	6713      	str	r3, [r2, #112]	; 0x70
 80077b0:	4b78      	ldr	r3, [pc, #480]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80077b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b4:	4a77      	ldr	r2, [pc, #476]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	6713      	str	r3, [r2, #112]	; 0x70
 80077bc:	e00b      	b.n	80077d6 <HAL_RCC_OscConfig+0x32a>
 80077be:	4b75      	ldr	r3, [pc, #468]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	4a74      	ldr	r2, [pc, #464]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	6713      	str	r3, [r2, #112]	; 0x70
 80077ca:	4b72      	ldr	r3, [pc, #456]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	4a71      	ldr	r2, [pc, #452]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80077d0:	f023 0304 	bic.w	r3, r3, #4
 80077d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d015      	beq.n	800780a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077de:	f7fc f8ed 	bl	80039bc <HAL_GetTick>
 80077e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e4:	e00a      	b.n	80077fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077e6:	f7fc f8e9 	bl	80039bc <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e0c5      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077fc:	4b65      	ldr	r3, [pc, #404]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0ee      	beq.n	80077e6 <HAL_RCC_OscConfig+0x33a>
 8007808:	e014      	b.n	8007834 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800780a:	f7fc f8d7 	bl	80039bc <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007810:	e00a      	b.n	8007828 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007812:	f7fc f8d3 	bl	80039bc <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007820:	4293      	cmp	r3, r2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e0af      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007828:	4b5a      	ldr	r3, [pc, #360]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 800782a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1ee      	bne.n	8007812 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d105      	bne.n	8007846 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800783a:	4b56      	ldr	r3, [pc, #344]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	4a55      	ldr	r2, [pc, #340]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 8007840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007844:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 809b 	beq.w	8007986 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007850:	4b50      	ldr	r3, [pc, #320]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 030c 	and.w	r3, r3, #12
 8007858:	2b08      	cmp	r3, #8
 800785a:	d05c      	beq.n	8007916 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d141      	bne.n	80078e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007864:	4b4c      	ldr	r3, [pc, #304]	; (8007998 <HAL_RCC_OscConfig+0x4ec>)
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800786a:	f7fc f8a7 	bl	80039bc <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007872:	f7fc f8a3 	bl	80039bc <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e081      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007884:	4b43      	ldr	r3, [pc, #268]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f0      	bne.n	8007872 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	019b      	lsls	r3, r3, #6
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	3b01      	subs	r3, #1
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b2:	061b      	lsls	r3, r3, #24
 80078b4:	4937      	ldr	r1, [pc, #220]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078ba:	4b37      	ldr	r3, [pc, #220]	; (8007998 <HAL_RCC_OscConfig+0x4ec>)
 80078bc:	2201      	movs	r2, #1
 80078be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078c0:	f7fc f87c 	bl	80039bc <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078c8:	f7fc f878 	bl	80039bc <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e056      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078da:	4b2e      	ldr	r3, [pc, #184]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0x41c>
 80078e6:	e04e      	b.n	8007986 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e8:	4b2b      	ldr	r3, [pc, #172]	; (8007998 <HAL_RCC_OscConfig+0x4ec>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ee:	f7fc f865 	bl	80039bc <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078f6:	f7fc f861 	bl	80039bc <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e03f      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007908:	4b22      	ldr	r3, [pc, #136]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f0      	bne.n	80078f6 <HAL_RCC_OscConfig+0x44a>
 8007914:	e037      	b.n	8007986 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e032      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007922:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <HAL_RCC_OscConfig+0x4e8>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d028      	beq.n	8007982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800793a:	429a      	cmp	r2, r3
 800793c:	d121      	bne.n	8007982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007948:	429a      	cmp	r2, r3
 800794a:	d11a      	bne.n	8007982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007952:	4013      	ands	r3, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007958:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800795a:	4293      	cmp	r3, r2
 800795c:	d111      	bne.n	8007982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	085b      	lsrs	r3, r3, #1
 800796a:	3b01      	subs	r3, #1
 800796c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800796e:	429a      	cmp	r2, r3
 8007970:	d107      	bne.n	8007982 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800797e:	429a      	cmp	r2, r3
 8007980:	d001      	beq.n	8007986 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e000      	b.n	8007988 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40007000 	.word	0x40007000
 8007994:	40023800 	.word	0x40023800
 8007998:	42470060 	.word	0x42470060

0800799c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e0cc      	b.n	8007b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079b0:	4b68      	ldr	r3, [pc, #416]	; (8007b54 <HAL_RCC_ClockConfig+0x1b8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d90c      	bls.n	80079d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079be:	4b65      	ldr	r3, [pc, #404]	; (8007b54 <HAL_RCC_ClockConfig+0x1b8>)
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079c6:	4b63      	ldr	r3, [pc, #396]	; (8007b54 <HAL_RCC_ClockConfig+0x1b8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d001      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e0b8      	b.n	8007b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d020      	beq.n	8007a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079f0:	4b59      	ldr	r3, [pc, #356]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	4a58      	ldr	r2, [pc, #352]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 80079f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a08:	4b53      	ldr	r3, [pc, #332]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	4a52      	ldr	r2, [pc, #328]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a14:	4b50      	ldr	r3, [pc, #320]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	494d      	ldr	r1, [pc, #308]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d044      	beq.n	8007abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d107      	bne.n	8007a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a3a:	4b47      	ldr	r3, [pc, #284]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d119      	bne.n	8007a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e07f      	b.n	8007b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d003      	beq.n	8007a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d107      	bne.n	8007a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a5a:	4b3f      	ldr	r3, [pc, #252]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e06f      	b.n	8007b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a6a:	4b3b      	ldr	r3, [pc, #236]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e067      	b.n	8007b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a7a:	4b37      	ldr	r3, [pc, #220]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f023 0203 	bic.w	r2, r3, #3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	4934      	ldr	r1, [pc, #208]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a8c:	f7fb ff96 	bl	80039bc <HAL_GetTick>
 8007a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a92:	e00a      	b.n	8007aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a94:	f7fb ff92 	bl	80039bc <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e04f      	b.n	8007b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aaa:	4b2b      	ldr	r3, [pc, #172]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 020c 	and.w	r2, r3, #12
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d1eb      	bne.n	8007a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <HAL_RCC_ClockConfig+0x1b8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d20c      	bcs.n	8007ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aca:	4b22      	ldr	r3, [pc, #136]	; (8007b54 <HAL_RCC_ClockConfig+0x1b8>)
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ad2:	4b20      	ldr	r3, [pc, #128]	; (8007b54 <HAL_RCC_ClockConfig+0x1b8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d001      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e032      	b.n	8007b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d008      	beq.n	8007b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007af0:	4b19      	ldr	r3, [pc, #100]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	4916      	ldr	r1, [pc, #88]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d009      	beq.n	8007b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b0e:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	490e      	ldr	r1, [pc, #56]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b22:	f000 f821 	bl	8007b68 <HAL_RCC_GetSysClockFreq>
 8007b26:	4602      	mov	r2, r0
 8007b28:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	091b      	lsrs	r3, r3, #4
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	490a      	ldr	r1, [pc, #40]	; (8007b5c <HAL_RCC_ClockConfig+0x1c0>)
 8007b34:	5ccb      	ldrb	r3, [r1, r3]
 8007b36:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3a:	4a09      	ldr	r2, [pc, #36]	; (8007b60 <HAL_RCC_ClockConfig+0x1c4>)
 8007b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b3e:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <HAL_RCC_ClockConfig+0x1c8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7f9 ffbc 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40023c00 	.word	0x40023c00
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	08024904 	.word	0x08024904
 8007b60:	20000000 	.word	0x20000000
 8007b64:	200000d8 	.word	0x200000d8

08007b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b68:	b5b0      	push	{r4, r5, r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6079      	str	r1, [r7, #4]
 8007b72:	2100      	movs	r1, #0
 8007b74:	60f9      	str	r1, [r7, #12]
 8007b76:	2100      	movs	r1, #0
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b7e:	4952      	ldr	r1, [pc, #328]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007b80:	6889      	ldr	r1, [r1, #8]
 8007b82:	f001 010c 	and.w	r1, r1, #12
 8007b86:	2908      	cmp	r1, #8
 8007b88:	d00d      	beq.n	8007ba6 <HAL_RCC_GetSysClockFreq+0x3e>
 8007b8a:	2908      	cmp	r1, #8
 8007b8c:	f200 8094 	bhi.w	8007cb8 <HAL_RCC_GetSysClockFreq+0x150>
 8007b90:	2900      	cmp	r1, #0
 8007b92:	d002      	beq.n	8007b9a <HAL_RCC_GetSysClockFreq+0x32>
 8007b94:	2904      	cmp	r1, #4
 8007b96:	d003      	beq.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x38>
 8007b98:	e08e      	b.n	8007cb8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b9a:	4b4c      	ldr	r3, [pc, #304]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x164>)
 8007b9c:	60bb      	str	r3, [r7, #8]
       break;
 8007b9e:	e08e      	b.n	8007cbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ba0:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007ba2:	60bb      	str	r3, [r7, #8]
      break;
 8007ba4:	e08b      	b.n	8007cbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ba6:	4948      	ldr	r1, [pc, #288]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007ba8:	6849      	ldr	r1, [r1, #4]
 8007baa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007bae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bb0:	4945      	ldr	r1, [pc, #276]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007bb2:	6849      	ldr	r1, [r1, #4]
 8007bb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007bb8:	2900      	cmp	r1, #0
 8007bba:	d024      	beq.n	8007c06 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bbc:	4942      	ldr	r1, [pc, #264]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007bbe:	6849      	ldr	r1, [r1, #4]
 8007bc0:	0989      	lsrs	r1, r1, #6
 8007bc2:	4608      	mov	r0, r1
 8007bc4:	f04f 0100 	mov.w	r1, #0
 8007bc8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007bcc:	f04f 0500 	mov.w	r5, #0
 8007bd0:	ea00 0204 	and.w	r2, r0, r4
 8007bd4:	ea01 0305 	and.w	r3, r1, r5
 8007bd8:	493d      	ldr	r1, [pc, #244]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007bda:	fb01 f003 	mul.w	r0, r1, r3
 8007bde:	2100      	movs	r1, #0
 8007be0:	fb01 f102 	mul.w	r1, r1, r2
 8007be4:	1844      	adds	r4, r0, r1
 8007be6:	493a      	ldr	r1, [pc, #232]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007be8:	fba2 0101 	umull	r0, r1, r2, r1
 8007bec:	1863      	adds	r3, r4, r1
 8007bee:	4619      	mov	r1, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	f7f8 fff6 	bl	8000be8 <__aeabi_uldivmod>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4613      	mov	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	e04a      	b.n	8007c9c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c06:	4b30      	ldr	r3, [pc, #192]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	099b      	lsrs	r3, r3, #6
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f04f 0300 	mov.w	r3, #0
 8007c12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c16:	f04f 0100 	mov.w	r1, #0
 8007c1a:	ea02 0400 	and.w	r4, r2, r0
 8007c1e:	ea03 0501 	and.w	r5, r3, r1
 8007c22:	4620      	mov	r0, r4
 8007c24:	4629      	mov	r1, r5
 8007c26:	f04f 0200 	mov.w	r2, #0
 8007c2a:	f04f 0300 	mov.w	r3, #0
 8007c2e:	014b      	lsls	r3, r1, #5
 8007c30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c34:	0142      	lsls	r2, r0, #5
 8007c36:	4610      	mov	r0, r2
 8007c38:	4619      	mov	r1, r3
 8007c3a:	1b00      	subs	r0, r0, r4
 8007c3c:	eb61 0105 	sbc.w	r1, r1, r5
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	018b      	lsls	r3, r1, #6
 8007c4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c4e:	0182      	lsls	r2, r0, #6
 8007c50:	1a12      	subs	r2, r2, r0
 8007c52:	eb63 0301 	sbc.w	r3, r3, r1
 8007c56:	f04f 0000 	mov.w	r0, #0
 8007c5a:	f04f 0100 	mov.w	r1, #0
 8007c5e:	00d9      	lsls	r1, r3, #3
 8007c60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c64:	00d0      	lsls	r0, r2, #3
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	1912      	adds	r2, r2, r4
 8007c6c:	eb45 0303 	adc.w	r3, r5, r3
 8007c70:	f04f 0000 	mov.w	r0, #0
 8007c74:	f04f 0100 	mov.w	r1, #0
 8007c78:	0299      	lsls	r1, r3, #10
 8007c7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007c7e:	0290      	lsls	r0, r2, #10
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4610      	mov	r0, r2
 8007c86:	4619      	mov	r1, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f04f 0300 	mov.w	r3, #0
 8007c90:	f7f8 ffaa 	bl	8000be8 <__aeabi_uldivmod>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4613      	mov	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	0c1b      	lsrs	r3, r3, #16
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb4:	60bb      	str	r3, [r7, #8]
      break;
 8007cb6:	e002      	b.n	8007cbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007cb8:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x164>)
 8007cba:	60bb      	str	r3, [r7, #8]
      break;
 8007cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	00f42400 	.word	0x00f42400
 8007cd0:	017d7840 	.word	0x017d7840

08007cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cd8:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cda:	681b      	ldr	r3, [r3, #0]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	20000000 	.word	0x20000000

08007cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cf0:	f7ff fff0 	bl	8007cd4 <HAL_RCC_GetHCLKFreq>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	0a9b      	lsrs	r3, r3, #10
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	4903      	ldr	r1, [pc, #12]	; (8007d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d02:	5ccb      	ldrb	r3, [r1, r3]
 8007d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	40023800 	.word	0x40023800
 8007d10:	08024914 	.word	0x08024914

08007d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d18:	f7ff ffdc 	bl	8007cd4 <HAL_RCC_GetHCLKFreq>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	0b5b      	lsrs	r3, r3, #13
 8007d24:	f003 0307 	and.w	r3, r3, #7
 8007d28:	4903      	ldr	r1, [pc, #12]	; (8007d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d2a:	5ccb      	ldrb	r3, [r1, r3]
 8007d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	40023800 	.word	0x40023800
 8007d38:	08024914 	.word	0x08024914

08007d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	220f      	movs	r2, #15
 8007d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d4c:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <HAL_RCC_GetClockConfig+0x5c>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f003 0203 	and.w	r2, r3, #3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007d58:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <HAL_RCC_GetClockConfig+0x5c>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007d64:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <HAL_RCC_GetClockConfig+0x5c>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007d70:	4b09      	ldr	r3, [pc, #36]	; (8007d98 <HAL_RCC_GetClockConfig+0x5c>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	08db      	lsrs	r3, r3, #3
 8007d76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d7e:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <HAL_RCC_GetClockConfig+0x60>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0207 	and.w	r2, r3, #7
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	601a      	str	r2, [r3, #0]
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	40023c00 	.word	0x40023c00

08007da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e041      	b.n	8007e36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fa fa06 	bl	80021d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f000 fe8e 	bl	8008b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d001      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e04e      	b.n	8007ef6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a23      	ldr	r2, [pc, #140]	; (8007f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d022      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x80>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e82:	d01d      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x80>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a1f      	ldr	r2, [pc, #124]	; (8007f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d018      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x80>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1e      	ldr	r2, [pc, #120]	; (8007f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x80>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1c      	ldr	r2, [pc, #112]	; (8007f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x80>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x80>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a19      	ldr	r2, [pc, #100]	; (8007f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0x80>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a18      	ldr	r2, [pc, #96]	; (8007f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d111      	bne.n	8007ee4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b06      	cmp	r3, #6
 8007ed0:	d010      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0201 	orr.w	r2, r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee2:	e007      	b.n	8007ef4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0201 	orr.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40000400 	.word	0x40000400
 8007f0c:	40000800 	.word	0x40000800
 8007f10:	40000c00 	.word	0x40000c00
 8007f14:	40010400 	.word	0x40010400
 8007f18:	40014000 	.word	0x40014000
 8007f1c:	40001800 	.word	0x40001800

08007f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e041      	b.n	8007fb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f839 	bl	8007fbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4610      	mov	r0, r2
 8007f60:	f000 fdce 	bl	8008b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
	...

08007fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d109      	bne.n	8007ff8 <HAL_TIM_PWM_Start+0x24>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	bf14      	ite	ne
 8007ff0:	2301      	movne	r3, #1
 8007ff2:	2300      	moveq	r3, #0
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	e022      	b.n	800803e <HAL_TIM_PWM_Start+0x6a>
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d109      	bne.n	8008012 <HAL_TIM_PWM_Start+0x3e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b01      	cmp	r3, #1
 8008008:	bf14      	ite	ne
 800800a:	2301      	movne	r3, #1
 800800c:	2300      	moveq	r3, #0
 800800e:	b2db      	uxtb	r3, r3
 8008010:	e015      	b.n	800803e <HAL_TIM_PWM_Start+0x6a>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b08      	cmp	r3, #8
 8008016:	d109      	bne.n	800802c <HAL_TIM_PWM_Start+0x58>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b01      	cmp	r3, #1
 8008022:	bf14      	ite	ne
 8008024:	2301      	movne	r3, #1
 8008026:	2300      	moveq	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	e008      	b.n	800803e <HAL_TIM_PWM_Start+0x6a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	bf14      	ite	ne
 8008038:	2301      	movne	r3, #1
 800803a:	2300      	moveq	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e07c      	b.n	8008140 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d104      	bne.n	8008056 <HAL_TIM_PWM_Start+0x82>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008054:	e013      	b.n	800807e <HAL_TIM_PWM_Start+0xaa>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b04      	cmp	r3, #4
 800805a:	d104      	bne.n	8008066 <HAL_TIM_PWM_Start+0x92>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008064:	e00b      	b.n	800807e <HAL_TIM_PWM_Start+0xaa>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b08      	cmp	r3, #8
 800806a:	d104      	bne.n	8008076 <HAL_TIM_PWM_Start+0xa2>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008074:	e003      	b.n	800807e <HAL_TIM_PWM_Start+0xaa>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2202      	movs	r2, #2
 800807a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2201      	movs	r2, #1
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f001 f94e 	bl	8009328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a2d      	ldr	r2, [pc, #180]	; (8008148 <HAL_TIM_PWM_Start+0x174>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d004      	beq.n	80080a0 <HAL_TIM_PWM_Start+0xcc>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a2c      	ldr	r2, [pc, #176]	; (800814c <HAL_TIM_PWM_Start+0x178>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d101      	bne.n	80080a4 <HAL_TIM_PWM_Start+0xd0>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e000      	b.n	80080a6 <HAL_TIM_PWM_Start+0xd2>
 80080a4:	2300      	movs	r3, #0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a22      	ldr	r2, [pc, #136]	; (8008148 <HAL_TIM_PWM_Start+0x174>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d022      	beq.n	800810a <HAL_TIM_PWM_Start+0x136>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080cc:	d01d      	beq.n	800810a <HAL_TIM_PWM_Start+0x136>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a1f      	ldr	r2, [pc, #124]	; (8008150 <HAL_TIM_PWM_Start+0x17c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d018      	beq.n	800810a <HAL_TIM_PWM_Start+0x136>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1d      	ldr	r2, [pc, #116]	; (8008154 <HAL_TIM_PWM_Start+0x180>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d013      	beq.n	800810a <HAL_TIM_PWM_Start+0x136>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a1c      	ldr	r2, [pc, #112]	; (8008158 <HAL_TIM_PWM_Start+0x184>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00e      	beq.n	800810a <HAL_TIM_PWM_Start+0x136>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a16      	ldr	r2, [pc, #88]	; (800814c <HAL_TIM_PWM_Start+0x178>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d009      	beq.n	800810a <HAL_TIM_PWM_Start+0x136>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a18      	ldr	r2, [pc, #96]	; (800815c <HAL_TIM_PWM_Start+0x188>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d004      	beq.n	800810a <HAL_TIM_PWM_Start+0x136>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a16      	ldr	r2, [pc, #88]	; (8008160 <HAL_TIM_PWM_Start+0x18c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d111      	bne.n	800812e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b06      	cmp	r3, #6
 800811a:	d010      	beq.n	800813e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 0201 	orr.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812c:	e007      	b.n	800813e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0201 	orr.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40010000 	.word	0x40010000
 800814c:	40010400 	.word	0x40010400
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40014000 	.word	0x40014000
 8008160:	40001800 	.word	0x40001800

08008164 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e041      	b.n	80081fa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f839 	bl	8008202 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f000 fcac 	bl	8008b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
	...

08008218 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d104      	bne.n	8008236 <HAL_TIM_IC_Start_IT+0x1e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008232:	b2db      	uxtb	r3, r3
 8008234:	e013      	b.n	800825e <HAL_TIM_IC_Start_IT+0x46>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b04      	cmp	r3, #4
 800823a:	d104      	bne.n	8008246 <HAL_TIM_IC_Start_IT+0x2e>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008242:	b2db      	uxtb	r3, r3
 8008244:	e00b      	b.n	800825e <HAL_TIM_IC_Start_IT+0x46>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b08      	cmp	r3, #8
 800824a:	d104      	bne.n	8008256 <HAL_TIM_IC_Start_IT+0x3e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008252:	b2db      	uxtb	r3, r3
 8008254:	e003      	b.n	800825e <HAL_TIM_IC_Start_IT+0x46>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800825c:	b2db      	uxtb	r3, r3
 800825e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d104      	bne.n	8008270 <HAL_TIM_IC_Start_IT+0x58>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800826c:	b2db      	uxtb	r3, r3
 800826e:	e013      	b.n	8008298 <HAL_TIM_IC_Start_IT+0x80>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b04      	cmp	r3, #4
 8008274:	d104      	bne.n	8008280 <HAL_TIM_IC_Start_IT+0x68>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800827c:	b2db      	uxtb	r3, r3
 800827e:	e00b      	b.n	8008298 <HAL_TIM_IC_Start_IT+0x80>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b08      	cmp	r3, #8
 8008284:	d104      	bne.n	8008290 <HAL_TIM_IC_Start_IT+0x78>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800828c:	b2db      	uxtb	r3, r3
 800828e:	e003      	b.n	8008298 <HAL_TIM_IC_Start_IT+0x80>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008296:	b2db      	uxtb	r3, r3
 8008298:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d102      	bne.n	80082a6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80082a0:	7b7b      	ldrb	r3, [r7, #13]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d001      	beq.n	80082aa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e0cc      	b.n	8008444 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <HAL_TIM_IC_Start_IT+0xa2>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b8:	e013      	b.n	80082e2 <HAL_TIM_IC_Start_IT+0xca>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d104      	bne.n	80082ca <HAL_TIM_IC_Start_IT+0xb2>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082c8:	e00b      	b.n	80082e2 <HAL_TIM_IC_Start_IT+0xca>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d104      	bne.n	80082da <HAL_TIM_IC_Start_IT+0xc2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082d8:	e003      	b.n	80082e2 <HAL_TIM_IC_Start_IT+0xca>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2202      	movs	r2, #2
 80082de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <HAL_TIM_IC_Start_IT+0xda>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082f0:	e013      	b.n	800831a <HAL_TIM_IC_Start_IT+0x102>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	d104      	bne.n	8008302 <HAL_TIM_IC_Start_IT+0xea>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008300:	e00b      	b.n	800831a <HAL_TIM_IC_Start_IT+0x102>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d104      	bne.n	8008312 <HAL_TIM_IC_Start_IT+0xfa>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008310:	e003      	b.n	800831a <HAL_TIM_IC_Start_IT+0x102>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2202      	movs	r2, #2
 8008316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b0c      	cmp	r3, #12
 800831e:	d841      	bhi.n	80083a4 <HAL_TIM_IC_Start_IT+0x18c>
 8008320:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <HAL_TIM_IC_Start_IT+0x110>)
 8008322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008326:	bf00      	nop
 8008328:	0800835d 	.word	0x0800835d
 800832c:	080083a5 	.word	0x080083a5
 8008330:	080083a5 	.word	0x080083a5
 8008334:	080083a5 	.word	0x080083a5
 8008338:	0800836f 	.word	0x0800836f
 800833c:	080083a5 	.word	0x080083a5
 8008340:	080083a5 	.word	0x080083a5
 8008344:	080083a5 	.word	0x080083a5
 8008348:	08008381 	.word	0x08008381
 800834c:	080083a5 	.word	0x080083a5
 8008350:	080083a5 	.word	0x080083a5
 8008354:	080083a5 	.word	0x080083a5
 8008358:	08008393 	.word	0x08008393
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0202 	orr.w	r2, r2, #2
 800836a:	60da      	str	r2, [r3, #12]
      break;
 800836c:	e01d      	b.n	80083aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f042 0204 	orr.w	r2, r2, #4
 800837c:	60da      	str	r2, [r3, #12]
      break;
 800837e:	e014      	b.n	80083aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0208 	orr.w	r2, r2, #8
 800838e:	60da      	str	r2, [r3, #12]
      break;
 8008390:	e00b      	b.n	80083aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f042 0210 	orr.w	r2, r2, #16
 80083a0:	60da      	str	r2, [r3, #12]
      break;
 80083a2:	e002      	b.n	80083aa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
      break;
 80083a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d148      	bne.n	8008442 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2201      	movs	r2, #1
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 ffb5 	bl	8009328 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a22      	ldr	r2, [pc, #136]	; (800844c <HAL_TIM_IC_Start_IT+0x234>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d022      	beq.n	800840e <HAL_TIM_IC_Start_IT+0x1f6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d0:	d01d      	beq.n	800840e <HAL_TIM_IC_Start_IT+0x1f6>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a1e      	ldr	r2, [pc, #120]	; (8008450 <HAL_TIM_IC_Start_IT+0x238>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d018      	beq.n	800840e <HAL_TIM_IC_Start_IT+0x1f6>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a1c      	ldr	r2, [pc, #112]	; (8008454 <HAL_TIM_IC_Start_IT+0x23c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d013      	beq.n	800840e <HAL_TIM_IC_Start_IT+0x1f6>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a1b      	ldr	r2, [pc, #108]	; (8008458 <HAL_TIM_IC_Start_IT+0x240>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00e      	beq.n	800840e <HAL_TIM_IC_Start_IT+0x1f6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a19      	ldr	r2, [pc, #100]	; (800845c <HAL_TIM_IC_Start_IT+0x244>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d009      	beq.n	800840e <HAL_TIM_IC_Start_IT+0x1f6>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a18      	ldr	r2, [pc, #96]	; (8008460 <HAL_TIM_IC_Start_IT+0x248>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d004      	beq.n	800840e <HAL_TIM_IC_Start_IT+0x1f6>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a16      	ldr	r2, [pc, #88]	; (8008464 <HAL_TIM_IC_Start_IT+0x24c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d111      	bne.n	8008432 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 0307 	and.w	r3, r3, #7
 8008418:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b06      	cmp	r3, #6
 800841e:	d010      	beq.n	8008442 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008430:	e007      	b.n	8008442 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f042 0201 	orr.w	r2, r2, #1
 8008440:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40010000 	.word	0x40010000
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00
 800845c:	40010400 	.word	0x40010400
 8008460:	40014000 	.word	0x40014000
 8008464:	40001800 	.word	0x40001800

08008468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b02      	cmp	r3, #2
 800847c:	d122      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b02      	cmp	r3, #2
 800848a:	d11b      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0202 	mvn.w	r2, #2
 8008494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fa feec 	bl	8003288 <HAL_TIM_IC_CaptureCallback>
 80084b0:	e005      	b.n	80084be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fb05 	bl	8008ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fb0c 	bl	8008ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d122      	bne.n	8008518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d11b      	bne.n	8008518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0204 	mvn.w	r2, #4
 80084e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2202      	movs	r2, #2
 80084ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7fa fec2 	bl	8003288 <HAL_TIM_IC_CaptureCallback>
 8008504:	e005      	b.n	8008512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fadb 	bl	8008ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fae2 	bl	8008ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b08      	cmp	r3, #8
 8008524:	d122      	bne.n	800856c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b08      	cmp	r3, #8
 8008532:	d11b      	bne.n	800856c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0208 	mvn.w	r2, #8
 800853c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2204      	movs	r2, #4
 8008542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fa fe98 	bl	8003288 <HAL_TIM_IC_CaptureCallback>
 8008558:	e005      	b.n	8008566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fab1 	bl	8008ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fab8 	bl	8008ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0310 	and.w	r3, r3, #16
 8008576:	2b10      	cmp	r3, #16
 8008578:	d122      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b10      	cmp	r3, #16
 8008586:	d11b      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0210 	mvn.w	r2, #16
 8008590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2208      	movs	r2, #8
 8008596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fa fe6e 	bl	8003288 <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa87 	bl	8008ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa8e 	bl	8008ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d10e      	bne.n	80085ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d107      	bne.n	80085ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0201 	mvn.w	r2, #1
 80085e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7f9 fa26 	bl	8001a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f6:	2b80      	cmp	r3, #128	; 0x80
 80085f8:	d10e      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d107      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 ff86 	bl	8009524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d10e      	bne.n	8008644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	d107      	bne.n	8008644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800863c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa53 	bl	8008aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b20      	cmp	r3, #32
 8008650:	d10e      	bne.n	8008670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b20      	cmp	r3, #32
 800865e:	d107      	bne.n	8008670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0220 	mvn.w	r2, #32
 8008668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 ff50 	bl	8009510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800868e:	2b01      	cmp	r3, #1
 8008690:	d101      	bne.n	8008696 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008692:	2302      	movs	r3, #2
 8008694:	e088      	b.n	80087a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d11b      	bne.n	80086dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	6819      	ldr	r1, [r3, #0]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f000 fc74 	bl	8008fa0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 020c 	bic.w	r2, r2, #12
 80086c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6999      	ldr	r1, [r3, #24]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	689a      	ldr	r2, [r3, #8]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	619a      	str	r2, [r3, #24]
 80086da:	e060      	b.n	800879e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d11c      	bne.n	800871c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6819      	ldr	r1, [r3, #0]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f000 fcf8 	bl	80090e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699a      	ldr	r2, [r3, #24]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008704:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6999      	ldr	r1, [r3, #24]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	021a      	lsls	r2, r3, #8
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	619a      	str	r2, [r3, #24]
 800871a:	e040      	b.n	800879e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b08      	cmp	r3, #8
 8008720:	d11b      	bne.n	800875a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6818      	ldr	r0, [r3, #0]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6819      	ldr	r1, [r3, #0]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f000 fd45 	bl	80091c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69da      	ldr	r2, [r3, #28]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 020c 	bic.w	r2, r2, #12
 8008744:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	69d9      	ldr	r1, [r3, #28]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	61da      	str	r2, [r3, #28]
 8008758:	e021      	b.n	800879e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b0c      	cmp	r3, #12
 800875e:	d11c      	bne.n	800879a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6819      	ldr	r1, [r3, #0]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f000 fd62 	bl	8009238 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69da      	ldr	r2, [r3, #28]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008782:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69d9      	ldr	r1, [r3, #28]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	021a      	lsls	r2, r3, #8
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	61da      	str	r2, [r3, #28]
 8008798:	e001      	b.n	800879e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087ca:	2302      	movs	r3, #2
 80087cc:	e0ae      	b.n	800892c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b0c      	cmp	r3, #12
 80087da:	f200 809f 	bhi.w	800891c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	08008819 	.word	0x08008819
 80087e8:	0800891d 	.word	0x0800891d
 80087ec:	0800891d 	.word	0x0800891d
 80087f0:	0800891d 	.word	0x0800891d
 80087f4:	08008859 	.word	0x08008859
 80087f8:	0800891d 	.word	0x0800891d
 80087fc:	0800891d 	.word	0x0800891d
 8008800:	0800891d 	.word	0x0800891d
 8008804:	0800889b 	.word	0x0800889b
 8008808:	0800891d 	.word	0x0800891d
 800880c:	0800891d 	.word	0x0800891d
 8008810:	0800891d 	.word	0x0800891d
 8008814:	080088db 	.word	0x080088db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fa0e 	bl	8008c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699a      	ldr	r2, [r3, #24]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0208 	orr.w	r2, r2, #8
 8008832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699a      	ldr	r2, [r3, #24]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0204 	bic.w	r2, r2, #4
 8008842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6999      	ldr	r1, [r3, #24]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	691a      	ldr	r2, [r3, #16]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	430a      	orrs	r2, r1
 8008854:	619a      	str	r2, [r3, #24]
      break;
 8008856:	e064      	b.n	8008922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68b9      	ldr	r1, [r7, #8]
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fa5e 	bl	8008d20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699a      	ldr	r2, [r3, #24]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6999      	ldr	r1, [r3, #24]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	021a      	lsls	r2, r3, #8
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	619a      	str	r2, [r3, #24]
      break;
 8008898:	e043      	b.n	8008922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 fab3 	bl	8008e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69da      	ldr	r2, [r3, #28]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f042 0208 	orr.w	r2, r2, #8
 80088b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69da      	ldr	r2, [r3, #28]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0204 	bic.w	r2, r2, #4
 80088c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69d9      	ldr	r1, [r3, #28]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	691a      	ldr	r2, [r3, #16]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	61da      	str	r2, [r3, #28]
      break;
 80088d8:	e023      	b.n	8008922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fb07 	bl	8008ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69da      	ldr	r2, [r3, #28]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69d9      	ldr	r1, [r3, #28]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	021a      	lsls	r2, r3, #8
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	61da      	str	r2, [r3, #28]
      break;
 800891a:	e002      	b.n	8008922 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	75fb      	strb	r3, [r7, #23]
      break;
 8008920:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008948:	2b01      	cmp	r3, #1
 800894a:	d101      	bne.n	8008950 <HAL_TIM_ConfigClockSource+0x1c>
 800894c:	2302      	movs	r3, #2
 800894e:	e0b4      	b.n	8008aba <HAL_TIM_ConfigClockSource+0x186>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800896e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008988:	d03e      	beq.n	8008a08 <HAL_TIM_ConfigClockSource+0xd4>
 800898a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800898e:	f200 8087 	bhi.w	8008aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8008992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008996:	f000 8086 	beq.w	8008aa6 <HAL_TIM_ConfigClockSource+0x172>
 800899a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800899e:	d87f      	bhi.n	8008aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80089a0:	2b70      	cmp	r3, #112	; 0x70
 80089a2:	d01a      	beq.n	80089da <HAL_TIM_ConfigClockSource+0xa6>
 80089a4:	2b70      	cmp	r3, #112	; 0x70
 80089a6:	d87b      	bhi.n	8008aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b60      	cmp	r3, #96	; 0x60
 80089aa:	d050      	beq.n	8008a4e <HAL_TIM_ConfigClockSource+0x11a>
 80089ac:	2b60      	cmp	r3, #96	; 0x60
 80089ae:	d877      	bhi.n	8008aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80089b0:	2b50      	cmp	r3, #80	; 0x50
 80089b2:	d03c      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0xfa>
 80089b4:	2b50      	cmp	r3, #80	; 0x50
 80089b6:	d873      	bhi.n	8008aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80089b8:	2b40      	cmp	r3, #64	; 0x40
 80089ba:	d058      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x13a>
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	d86f      	bhi.n	8008aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80089c0:	2b30      	cmp	r3, #48	; 0x30
 80089c2:	d064      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x15a>
 80089c4:	2b30      	cmp	r3, #48	; 0x30
 80089c6:	d86b      	bhi.n	8008aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	d060      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x15a>
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d867      	bhi.n	8008aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d05c      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x15a>
 80089d4:	2b10      	cmp	r3, #16
 80089d6:	d05a      	beq.n	8008a8e <HAL_TIM_ConfigClockSource+0x15a>
 80089d8:	e062      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6899      	ldr	r1, [r3, #8]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f000 fc7d 	bl	80092e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	609a      	str	r2, [r3, #8]
      break;
 8008a06:	e04f      	b.n	8008aa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	6899      	ldr	r1, [r3, #8]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f000 fc66 	bl	80092e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689a      	ldr	r2, [r3, #8]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a2a:	609a      	str	r2, [r3, #8]
      break;
 8008a2c:	e03c      	b.n	8008aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6859      	ldr	r1, [r3, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f000 fb24 	bl	8009088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2150      	movs	r1, #80	; 0x50
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fc33 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008a4c:	e02c      	b.n	8008aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6818      	ldr	r0, [r3, #0]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	6859      	ldr	r1, [r3, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f000 fb80 	bl	8009160 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2160      	movs	r1, #96	; 0x60
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fc23 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008a6c:	e01c      	b.n	8008aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	6859      	ldr	r1, [r3, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f000 fb04 	bl	8009088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2140      	movs	r1, #64	; 0x40
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fc13 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008a8c:	e00c      	b.n	8008aa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f000 fc0a 	bl	80092b2 <TIM_ITRx_SetConfig>
      break;
 8008a9e:	e003      	b.n	8008aa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa4:	e000      	b.n	8008aa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a40      	ldr	r2, [pc, #256]	; (8008c14 <TIM_Base_SetConfig+0x114>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d013      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1e:	d00f      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a3d      	ldr	r2, [pc, #244]	; (8008c18 <TIM_Base_SetConfig+0x118>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00b      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a3c      	ldr	r2, [pc, #240]	; (8008c1c <TIM_Base_SetConfig+0x11c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d007      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a3b      	ldr	r2, [pc, #236]	; (8008c20 <TIM_Base_SetConfig+0x120>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d003      	beq.n	8008b40 <TIM_Base_SetConfig+0x40>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a3a      	ldr	r2, [pc, #232]	; (8008c24 <TIM_Base_SetConfig+0x124>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d108      	bne.n	8008b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a2f      	ldr	r2, [pc, #188]	; (8008c14 <TIM_Base_SetConfig+0x114>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d02b      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b60:	d027      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a2c      	ldr	r2, [pc, #176]	; (8008c18 <TIM_Base_SetConfig+0x118>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d023      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a2b      	ldr	r2, [pc, #172]	; (8008c1c <TIM_Base_SetConfig+0x11c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d01f      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a2a      	ldr	r2, [pc, #168]	; (8008c20 <TIM_Base_SetConfig+0x120>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d01b      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a29      	ldr	r2, [pc, #164]	; (8008c24 <TIM_Base_SetConfig+0x124>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d017      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a28      	ldr	r2, [pc, #160]	; (8008c28 <TIM_Base_SetConfig+0x128>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d013      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a27      	ldr	r2, [pc, #156]	; (8008c2c <TIM_Base_SetConfig+0x12c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00f      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a26      	ldr	r2, [pc, #152]	; (8008c30 <TIM_Base_SetConfig+0x130>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00b      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a25      	ldr	r2, [pc, #148]	; (8008c34 <TIM_Base_SetConfig+0x134>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d007      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a24      	ldr	r2, [pc, #144]	; (8008c38 <TIM_Base_SetConfig+0x138>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d003      	beq.n	8008bb2 <TIM_Base_SetConfig+0xb2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a23      	ldr	r2, [pc, #140]	; (8008c3c <TIM_Base_SetConfig+0x13c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d108      	bne.n	8008bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a0a      	ldr	r2, [pc, #40]	; (8008c14 <TIM_Base_SetConfig+0x114>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_Base_SetConfig+0xf8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a0c      	ldr	r2, [pc, #48]	; (8008c24 <TIM_Base_SetConfig+0x124>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d103      	bne.n	8008c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	615a      	str	r2, [r3, #20]
}
 8008c06:	bf00      	nop
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	40010000 	.word	0x40010000
 8008c18:	40000400 	.word	0x40000400
 8008c1c:	40000800 	.word	0x40000800
 8008c20:	40000c00 	.word	0x40000c00
 8008c24:	40010400 	.word	0x40010400
 8008c28:	40014000 	.word	0x40014000
 8008c2c:	40014400 	.word	0x40014400
 8008c30:	40014800 	.word	0x40014800
 8008c34:	40001800 	.word	0x40001800
 8008c38:	40001c00 	.word	0x40001c00
 8008c3c:	40002000 	.word	0x40002000

08008c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	f023 0201 	bic.w	r2, r3, #1
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 0302 	bic.w	r3, r3, #2
 8008c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a20      	ldr	r2, [pc, #128]	; (8008d18 <TIM_OC1_SetConfig+0xd8>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d003      	beq.n	8008ca4 <TIM_OC1_SetConfig+0x64>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a1f      	ldr	r2, [pc, #124]	; (8008d1c <TIM_OC1_SetConfig+0xdc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d10c      	bne.n	8008cbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f023 0308 	bic.w	r3, r3, #8
 8008caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f023 0304 	bic.w	r3, r3, #4
 8008cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <TIM_OC1_SetConfig+0xd8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d003      	beq.n	8008cce <TIM_OC1_SetConfig+0x8e>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a14      	ldr	r2, [pc, #80]	; (8008d1c <TIM_OC1_SetConfig+0xdc>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d111      	bne.n	8008cf2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	621a      	str	r2, [r3, #32]
}
 8008d0c:	bf00      	nop
 8008d0e:	371c      	adds	r7, #28
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	40010000 	.word	0x40010000
 8008d1c:	40010400 	.word	0x40010400

08008d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	f023 0210 	bic.w	r2, r3, #16
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f023 0320 	bic.w	r3, r3, #32
 8008d6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	011b      	lsls	r3, r3, #4
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a22      	ldr	r2, [pc, #136]	; (8008e04 <TIM_OC2_SetConfig+0xe4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d003      	beq.n	8008d88 <TIM_OC2_SetConfig+0x68>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a21      	ldr	r2, [pc, #132]	; (8008e08 <TIM_OC2_SetConfig+0xe8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d10d      	bne.n	8008da4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008da2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a17      	ldr	r2, [pc, #92]	; (8008e04 <TIM_OC2_SetConfig+0xe4>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d003      	beq.n	8008db4 <TIM_OC2_SetConfig+0x94>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a16      	ldr	r2, [pc, #88]	; (8008e08 <TIM_OC2_SetConfig+0xe8>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d113      	bne.n	8008ddc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	621a      	str	r2, [r3, #32]
}
 8008df6:	bf00      	nop
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	40010000 	.word	0x40010000
 8008e08:	40010400 	.word	0x40010400

08008e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0303 	bic.w	r3, r3, #3
 8008e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a21      	ldr	r2, [pc, #132]	; (8008eec <TIM_OC3_SetConfig+0xe0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d003      	beq.n	8008e72 <TIM_OC3_SetConfig+0x66>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <TIM_OC3_SetConfig+0xe4>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d10d      	bne.n	8008e8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a16      	ldr	r2, [pc, #88]	; (8008eec <TIM_OC3_SetConfig+0xe0>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d003      	beq.n	8008e9e <TIM_OC3_SetConfig+0x92>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <TIM_OC3_SetConfig+0xe4>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d113      	bne.n	8008ec6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	011b      	lsls	r3, r3, #4
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	621a      	str	r2, [r3, #32]
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	40010000 	.word	0x40010000
 8008ef0:	40010400 	.word	0x40010400

08008ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	021b      	lsls	r3, r3, #8
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	031b      	lsls	r3, r3, #12
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a12      	ldr	r2, [pc, #72]	; (8008f98 <TIM_OC4_SetConfig+0xa4>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d003      	beq.n	8008f5c <TIM_OC4_SetConfig+0x68>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <TIM_OC4_SetConfig+0xa8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d109      	bne.n	8008f70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	019b      	lsls	r3, r3, #6
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	621a      	str	r2, [r3, #32]
}
 8008f8a:	bf00      	nop
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	40010000 	.word	0x40010000
 8008f9c:	40010400 	.word	0x40010400

08008fa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	f023 0201 	bic.w	r2, r3, #1
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	4a28      	ldr	r2, [pc, #160]	; (800906c <TIM_TI1_SetConfig+0xcc>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d01b      	beq.n	8009006 <TIM_TI1_SetConfig+0x66>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd4:	d017      	beq.n	8009006 <TIM_TI1_SetConfig+0x66>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	4a25      	ldr	r2, [pc, #148]	; (8009070 <TIM_TI1_SetConfig+0xd0>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d013      	beq.n	8009006 <TIM_TI1_SetConfig+0x66>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4a24      	ldr	r2, [pc, #144]	; (8009074 <TIM_TI1_SetConfig+0xd4>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d00f      	beq.n	8009006 <TIM_TI1_SetConfig+0x66>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4a23      	ldr	r2, [pc, #140]	; (8009078 <TIM_TI1_SetConfig+0xd8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d00b      	beq.n	8009006 <TIM_TI1_SetConfig+0x66>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4a22      	ldr	r2, [pc, #136]	; (800907c <TIM_TI1_SetConfig+0xdc>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d007      	beq.n	8009006 <TIM_TI1_SetConfig+0x66>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4a21      	ldr	r2, [pc, #132]	; (8009080 <TIM_TI1_SetConfig+0xe0>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d003      	beq.n	8009006 <TIM_TI1_SetConfig+0x66>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4a20      	ldr	r2, [pc, #128]	; (8009084 <TIM_TI1_SetConfig+0xe4>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d101      	bne.n	800900a <TIM_TI1_SetConfig+0x6a>
 8009006:	2301      	movs	r3, #1
 8009008:	e000      	b.n	800900c <TIM_TI1_SetConfig+0x6c>
 800900a:	2300      	movs	r3, #0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d008      	beq.n	8009022 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f023 0303 	bic.w	r3, r3, #3
 8009016:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4313      	orrs	r3, r2
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	e003      	b.n	800902a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f043 0301 	orr.w	r3, r3, #1
 8009028:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	011b      	lsls	r3, r3, #4
 8009036:	b2db      	uxtb	r3, r3
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	4313      	orrs	r3, r2
 800903c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f023 030a 	bic.w	r3, r3, #10
 8009044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f003 030a 	and.w	r3, r3, #10
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	4313      	orrs	r3, r2
 8009050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	621a      	str	r2, [r3, #32]
}
 800905e:	bf00      	nop
 8009060:	371c      	adds	r7, #28
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	40010000 	.word	0x40010000
 8009070:	40000400 	.word	0x40000400
 8009074:	40000800 	.word	0x40000800
 8009078:	40000c00 	.word	0x40000c00
 800907c:	40010400 	.word	0x40010400
 8009080:	40014000 	.word	0x40014000
 8009084:	40001800 	.word	0x40001800

08009088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	f023 0201 	bic.w	r2, r3, #1
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f023 030a 	bic.w	r3, r3, #10
 80090c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	621a      	str	r2, [r3, #32]
}
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b087      	sub	sp, #28
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	f023 0210 	bic.w	r2, r3, #16
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	021b      	lsls	r3, r3, #8
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	031b      	lsls	r3, r3, #12
 800912a:	b29b      	uxth	r3, r3
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	4313      	orrs	r3, r2
 8009130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009138:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	621a      	str	r2, [r3, #32]
}
 8009154:	bf00      	nop
 8009156:	371c      	adds	r7, #28
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	f023 0210 	bic.w	r2, r3, #16
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800918a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	031b      	lsls	r3, r3, #12
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	4313      	orrs	r3, r2
 8009194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800919c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	011b      	lsls	r3, r3, #4
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	621a      	str	r2, [r3, #32]
}
 80091b4:	bf00      	nop
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f023 0303 	bic.w	r3, r3, #3
 80091ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	b2db      	uxtb	r3, r3
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009210:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	4313      	orrs	r3, r2
 800921e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	621a      	str	r2, [r3, #32]
}
 800922c:	bf00      	nop
 800922e:	371c      	adds	r7, #28
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6a1b      	ldr	r3, [r3, #32]
 800925c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009264:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	021b      	lsls	r3, r3, #8
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	4313      	orrs	r3, r2
 800926e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009276:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	031b      	lsls	r3, r3, #12
 800927c:	b29b      	uxth	r3, r3
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	4313      	orrs	r3, r2
 8009282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800928a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	031b      	lsls	r3, r3, #12
 8009290:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	4313      	orrs	r3, r2
 8009298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	621a      	str	r2, [r3, #32]
}
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	f043 0307 	orr.w	r3, r3, #7
 80092d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	609a      	str	r2, [r3, #8]
}
 80092dc:	bf00      	nop
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	021a      	lsls	r2, r3, #8
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	431a      	orrs	r2, r3
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	4313      	orrs	r3, r2
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	4313      	orrs	r3, r2
 8009314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	609a      	str	r2, [r3, #8]
}
 800931c:	bf00      	nop
 800931e:	371c      	adds	r7, #28
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f003 031f 	and.w	r3, r3, #31
 800933a:	2201      	movs	r2, #1
 800933c:	fa02 f303 	lsl.w	r3, r2, r3
 8009340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6a1a      	ldr	r2, [r3, #32]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	43db      	mvns	r3, r3
 800934a:	401a      	ands	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6a1a      	ldr	r2, [r3, #32]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f003 031f 	and.w	r3, r3, #31
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	fa01 f303 	lsl.w	r3, r1, r3
 8009360:	431a      	orrs	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	621a      	str	r2, [r3, #32]
}
 8009366:	bf00      	nop
 8009368:	371c      	adds	r7, #28
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
	...

08009374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009388:	2302      	movs	r3, #2
 800938a:	e05a      	b.n	8009442 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2202      	movs	r2, #2
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a21      	ldr	r2, [pc, #132]	; (8009450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d022      	beq.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d8:	d01d      	beq.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a1d      	ldr	r2, [pc, #116]	; (8009454 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d018      	beq.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a1b      	ldr	r2, [pc, #108]	; (8009458 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d013      	beq.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a1a      	ldr	r2, [pc, #104]	; (800945c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d00e      	beq.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a18      	ldr	r2, [pc, #96]	; (8009460 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d009      	beq.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a17      	ldr	r2, [pc, #92]	; (8009464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d004      	beq.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a15      	ldr	r2, [pc, #84]	; (8009468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d10c      	bne.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800941c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	4313      	orrs	r3, r2
 8009426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	40010000 	.word	0x40010000
 8009454:	40000400 	.word	0x40000400
 8009458:	40000800 	.word	0x40000800
 800945c:	40000c00 	.word	0x40000c00
 8009460:	40010400 	.word	0x40010400
 8009464:	40014000 	.word	0x40014000
 8009468:	40001800 	.word	0x40001800

0800946c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009484:	2302      	movs	r3, #2
 8009486:	e03d      	b.n	8009504 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e03f      	b.n	80095ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d106      	bne.n	8009564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7f8 ffb4 	bl	80024cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2224      	movs	r2, #36	; 0x24
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800957a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 ffc9 	bl	800a514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	691a      	ldr	r2, [r3, #16]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	695a      	ldr	r2, [r3, #20]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08c      	sub	sp, #48	; 0x30
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	4613      	mov	r3, r2
 80095e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d165      	bne.n	80096ba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <HAL_UART_Transmit_DMA+0x26>
 80095f4:	88fb      	ldrh	r3, [r7, #6]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e05e      	b.n	80096bc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009604:	2b01      	cmp	r3, #1
 8009606:	d101      	bne.n	800960c <HAL_UART_Transmit_DMA+0x38>
 8009608:	2302      	movs	r3, #2
 800960a:	e057      	b.n	80096bc <HAL_UART_Transmit_DMA+0xe8>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	88fa      	ldrh	r2, [r7, #6]
 800961e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	88fa      	ldrh	r2, [r7, #6]
 8009624:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2221      	movs	r2, #33	; 0x21
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009638:	4a22      	ldr	r2, [pc, #136]	; (80096c4 <HAL_UART_Transmit_DMA+0xf0>)
 800963a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009640:	4a21      	ldr	r2, [pc, #132]	; (80096c8 <HAL_UART_Transmit_DMA+0xf4>)
 8009642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009648:	4a20      	ldr	r2, [pc, #128]	; (80096cc <HAL_UART_Transmit_DMA+0xf8>)
 800964a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009650:	2200      	movs	r2, #0
 8009652:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	6819      	ldr	r1, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3304      	adds	r3, #4
 8009668:	461a      	mov	r2, r3
 800966a:	88fb      	ldrh	r3, [r7, #6]
 800966c:	f7fa ff78 	bl	8004560 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009678:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3314      	adds	r3, #20
 8009688:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	617b      	str	r3, [r7, #20]
   return(result);
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009698:	62bb      	str	r3, [r7, #40]	; 0x28
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3314      	adds	r3, #20
 80096a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096a2:	627a      	str	r2, [r7, #36]	; 0x24
 80096a4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	6a39      	ldr	r1, [r7, #32]
 80096a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096aa:	e841 2300 	strex	r3, r2, [r1]
 80096ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e5      	bne.n	8009682 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	e000      	b.n	80096bc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80096ba:	2302      	movs	r3, #2
  }
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3730      	adds	r7, #48	; 0x30
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	08009db5 	.word	0x08009db5
 80096c8:	08009e4f 	.word	0x08009e4f
 80096cc:	08009fc7 	.word	0x08009fc7

080096d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d11d      	bne.n	8009726 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <HAL_UART_Receive_DMA+0x26>
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e016      	b.n	8009728 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009700:	2b01      	cmp	r3, #1
 8009702:	d101      	bne.n	8009708 <HAL_UART_Receive_DMA+0x38>
 8009704:	2302      	movs	r3, #2
 8009706:	e00f      	b.n	8009728 <HAL_UART_Receive_DMA+0x58>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009716:	88fb      	ldrh	r3, [r7, #6]
 8009718:	461a      	mov	r2, r3
 800971a:	68b9      	ldr	r1, [r7, #8]
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 fc9d 	bl	800a05c <UART_Start_Receive_DMA>
 8009722:	4603      	mov	r3, r0
 8009724:	e000      	b.n	8009728 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009726:	2302      	movs	r3, #2
  }
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b090      	sub	sp, #64	; 0x40
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009738:	2300      	movs	r3, #0
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009746:	2b80      	cmp	r3, #128	; 0x80
 8009748:	bf0c      	ite	eq
 800974a:	2301      	moveq	r3, #1
 800974c:	2300      	movne	r3, #0
 800974e:	b2db      	uxtb	r3, r3
 8009750:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b21      	cmp	r3, #33	; 0x21
 800975c:	d128      	bne.n	80097b0 <HAL_UART_DMAStop+0x80>
 800975e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009760:	2b00      	cmp	r3, #0
 8009762:	d025      	beq.n	80097b0 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3314      	adds	r3, #20
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	623b      	str	r3, [r7, #32]
   return(result);
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800977a:	63bb      	str	r3, [r7, #56]	; 0x38
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3314      	adds	r3, #20
 8009782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009784:	633a      	str	r2, [r7, #48]	; 0x30
 8009786:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800978a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e5      	bne.n	8009764 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979c:	2b00      	cmp	r3, #0
 800979e:	d004      	beq.n	80097aa <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fa ff33 	bl	8004610 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fcf0 	bl	800a190 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ba:	2b40      	cmp	r3, #64	; 0x40
 80097bc:	bf0c      	ite	eq
 80097be:	2301      	moveq	r3, #1
 80097c0:	2300      	movne	r3, #0
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b22      	cmp	r3, #34	; 0x22
 80097d0:	d128      	bne.n	8009824 <HAL_UART_DMAStop+0xf4>
 80097d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d025      	beq.n	8009824 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3314      	adds	r3, #20
 80097de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ee:	637b      	str	r3, [r7, #52]	; 0x34
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3314      	adds	r3, #20
 80097f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097f8:	61fa      	str	r2, [r7, #28]
 80097fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	69b9      	ldr	r1, [r7, #24]
 80097fe:	69fa      	ldr	r2, [r7, #28]
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	617b      	str	r3, [r7, #20]
   return(result);
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e5      	bne.n	80097d8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009810:	2b00      	cmp	r3, #0
 8009812:	d004      	beq.n	800981e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	4618      	mov	r0, r3
 800981a:	f7fa fef9 	bl	8004610 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fcde 	bl	800a1e0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3740      	adds	r7, #64	; 0x40
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b0ba      	sub	sp, #232	; 0xe8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009856:	2300      	movs	r3, #0
 8009858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800985c:	2300      	movs	r3, #0
 800985e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009866:	f003 030f 	and.w	r3, r3, #15
 800986a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800986e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10f      	bne.n	8009896 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987a:	f003 0320 	and.w	r3, r3, #32
 800987e:	2b00      	cmp	r3, #0
 8009880:	d009      	beq.n	8009896 <HAL_UART_IRQHandler+0x66>
 8009882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009886:	f003 0320 	and.w	r3, r3, #32
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fd85 	bl	800a39e <UART_Receive_IT>
      return;
 8009894:	e256      	b.n	8009d44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 80de 	beq.w	8009a5c <HAL_UART_IRQHandler+0x22c>
 80098a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d106      	bne.n	80098ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 80d1 	beq.w	8009a5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00b      	beq.n	80098de <HAL_UART_IRQHandler+0xae>
 80098c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d005      	beq.n	80098de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d6:	f043 0201 	orr.w	r2, r3, #1
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00b      	beq.n	8009902 <HAL_UART_IRQHandler+0xd2>
 80098ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fa:	f043 0202 	orr.w	r2, r3, #2
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00b      	beq.n	8009926 <HAL_UART_IRQHandler+0xf6>
 800990e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	d005      	beq.n	8009926 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991e:	f043 0204 	orr.w	r2, r3, #4
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800992a:	f003 0308 	and.w	r3, r3, #8
 800992e:	2b00      	cmp	r3, #0
 8009930:	d011      	beq.n	8009956 <HAL_UART_IRQHandler+0x126>
 8009932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b00      	cmp	r3, #0
 800993c:	d105      	bne.n	800994a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800993e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	2b00      	cmp	r3, #0
 8009948:	d005      	beq.n	8009956 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994e:	f043 0208 	orr.w	r2, r3, #8
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 81ed 	beq.w	8009d3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009964:	f003 0320 	and.w	r3, r3, #32
 8009968:	2b00      	cmp	r3, #0
 800996a:	d008      	beq.n	800997e <HAL_UART_IRQHandler+0x14e>
 800996c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009970:	f003 0320 	and.w	r3, r3, #32
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fd10 	bl	800a39e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009988:	2b40      	cmp	r3, #64	; 0x40
 800998a:	bf0c      	ite	eq
 800998c:	2301      	moveq	r3, #1
 800998e:	2300      	movne	r3, #0
 8009990:	b2db      	uxtb	r3, r3
 8009992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <HAL_UART_IRQHandler+0x17a>
 80099a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d04f      	beq.n	8009a4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fc18 	bl	800a1e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	d141      	bne.n	8009a42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3314      	adds	r3, #20
 80099c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80099d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3314      	adds	r3, #20
 80099e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1d9      	bne.n	80099be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d013      	beq.n	8009a3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a16:	4a7d      	ldr	r2, [pc, #500]	; (8009c0c <HAL_UART_IRQHandler+0x3dc>)
 8009a18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fa fe66 	bl	80046f0 <HAL_DMA_Abort_IT>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d016      	beq.n	8009a58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a34:	4610      	mov	r0, r2
 8009a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a38:	e00e      	b.n	8009a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f9a4 	bl	8009d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a40:	e00a      	b.n	8009a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f9a0 	bl	8009d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a48:	e006      	b.n	8009a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f99c 	bl	8009d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009a56:	e170      	b.n	8009d3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a58:	bf00      	nop
    return;
 8009a5a:	e16e      	b.n	8009d3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	f040 814a 	bne.w	8009cfa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6a:	f003 0310 	and.w	r3, r3, #16
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 8143 	beq.w	8009cfa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a78:	f003 0310 	and.w	r3, r3, #16
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 813c 	beq.w	8009cfa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a82:	2300      	movs	r3, #0
 8009a84:	60bb      	str	r3, [r7, #8]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	60bb      	str	r3, [r7, #8]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	60bb      	str	r3, [r7, #8]
 8009a96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa2:	2b40      	cmp	r3, #64	; 0x40
 8009aa4:	f040 80b4 	bne.w	8009c10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ab4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8140 	beq.w	8009d3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	f080 8139 	bcs.w	8009d3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ad2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ade:	f000 8088 	beq.w	8009bf2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	330c      	adds	r3, #12
 8009ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	330c      	adds	r3, #12
 8009b0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009b0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1d9      	bne.n	8009ae2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3314      	adds	r3, #20
 8009b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3314      	adds	r3, #20
 8009b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e1      	bne.n	8009b2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3314      	adds	r3, #20
 8009b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3314      	adds	r3, #20
 8009b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b96:	e841 2300 	strex	r3, r2, [r1]
 8009b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1e3      	bne.n	8009b6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2220      	movs	r2, #32
 8009ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bba:	e853 3f00 	ldrex	r3, [r3]
 8009bbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bc2:	f023 0310 	bic.w	r3, r3, #16
 8009bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	330c      	adds	r3, #12
 8009bd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009bd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009bd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e3      	bne.n	8009bb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fa fd0f 	bl	8004610 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f8ca 	bl	8009d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c08:	e099      	b.n	8009d3e <HAL_UART_IRQHandler+0x50e>
 8009c0a:	bf00      	nop
 8009c0c:	0800a2a7 	.word	0x0800a2a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 808b 	beq.w	8009d42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 8086 	beq.w	8009d42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	330c      	adds	r3, #12
 8009c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	330c      	adds	r3, #12
 8009c56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009c5a:	647a      	str	r2, [r7, #68]	; 0x44
 8009c5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e3      	bne.n	8009c36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3314      	adds	r3, #20
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	f023 0301 	bic.w	r3, r3, #1
 8009c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3314      	adds	r3, #20
 8009c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c92:	633a      	str	r2, [r7, #48]	; 0x30
 8009c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1e3      	bne.n	8009c6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	330c      	adds	r3, #12
 8009cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	e853 3f00 	ldrex	r3, [r3]
 8009cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f023 0310 	bic.w	r3, r3, #16
 8009cca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	330c      	adds	r3, #12
 8009cd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009cd8:	61fa      	str	r2, [r7, #28]
 8009cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cdc:	69b9      	ldr	r1, [r7, #24]
 8009cde:	69fa      	ldr	r2, [r7, #28]
 8009ce0:	e841 2300 	strex	r3, r2, [r1]
 8009ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e3      	bne.n	8009cb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f852 	bl	8009d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cf8:	e023      	b.n	8009d42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d009      	beq.n	8009d1a <HAL_UART_IRQHandler+0x4ea>
 8009d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fadb 	bl	800a2ce <UART_Transmit_IT>
    return;
 8009d18:	e014      	b.n	8009d44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00e      	beq.n	8009d44 <HAL_UART_IRQHandler+0x514>
 8009d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d008      	beq.n	8009d44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fb1b 	bl	800a36e <UART_EndTransmit_IT>
    return;
 8009d38:	e004      	b.n	8009d44 <HAL_UART_IRQHandler+0x514>
    return;
 8009d3a:	bf00      	nop
 8009d3c:	e002      	b.n	8009d44 <HAL_UART_IRQHandler+0x514>
      return;
 8009d3e:	bf00      	nop
 8009d40:	e000      	b.n	8009d44 <HAL_UART_IRQHandler+0x514>
      return;
 8009d42:	bf00      	nop
  }
}
 8009d44:	37e8      	adds	r7, #232	; 0xe8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop

08009d4c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b090      	sub	sp, #64	; 0x40
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d137      	bne.n	8009e40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3314      	adds	r3, #20
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	623b      	str	r3, [r7, #32]
   return(result);
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3314      	adds	r3, #20
 8009df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009df6:	633a      	str	r2, [r7, #48]	; 0x30
 8009df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e5      	bne.n	8009dd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	330c      	adds	r3, #12
 8009e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e20:	637b      	str	r3, [r7, #52]	; 0x34
 8009e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	330c      	adds	r3, #12
 8009e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e2a:	61fa      	str	r2, [r7, #28]
 8009e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	69b9      	ldr	r1, [r7, #24]
 8009e30:	69fa      	ldr	r2, [r7, #28]
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	617b      	str	r3, [r7, #20]
   return(result);
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e5      	bne.n	8009e0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e3e:	e002      	b.n	8009e46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009e40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009e42:	f7f8 fe7b 	bl	8002b3c <HAL_UART_TxCpltCallback>
}
 8009e46:	bf00      	nop
 8009e48:	3740      	adds	r7, #64	; 0x40
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7ff ff75 	bl	8009d4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e62:	bf00      	nop
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b09c      	sub	sp, #112	; 0x70
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d172      	bne.n	8009f6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e88:	2200      	movs	r2, #0
 8009e8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	330c      	adds	r3, #12
 8009e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e96:	e853 3f00 	ldrex	r3, [r3]
 8009e9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	330c      	adds	r3, #12
 8009eaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009eac:	65ba      	str	r2, [r7, #88]	; 0x58
 8009eae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009eb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009eb4:	e841 2300 	strex	r3, r2, [r1]
 8009eb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e5      	bne.n	8009e8c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3314      	adds	r3, #20
 8009ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	e853 3f00 	ldrex	r3, [r3]
 8009ece:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed2:	f023 0301 	bic.w	r3, r3, #1
 8009ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8009ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3314      	adds	r3, #20
 8009ede:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ee0:	647a      	str	r2, [r7, #68]	; 0x44
 8009ee2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ee8:	e841 2300 	strex	r3, r2, [r1]
 8009eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1e5      	bne.n	8009ec0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3314      	adds	r3, #20
 8009efa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	e853 3f00 	ldrex	r3, [r3]
 8009f02:	623b      	str	r3, [r7, #32]
   return(result);
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8009f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3314      	adds	r3, #20
 8009f12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f14:	633a      	str	r2, [r7, #48]	; 0x30
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f1c:	e841 2300 	strex	r3, r2, [r1]
 8009f20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1e5      	bne.n	8009ef4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d119      	bne.n	8009f6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0310 	bic.w	r3, r3, #16
 8009f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	330c      	adds	r3, #12
 8009f56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f58:	61fa      	str	r2, [r7, #28]
 8009f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5c:	69b9      	ldr	r1, [r7, #24]
 8009f5e:	69fa      	ldr	r2, [r7, #28]
 8009f60:	e841 2300 	strex	r3, r2, [r1]
 8009f64:	617b      	str	r3, [r7, #20]
   return(result);
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1e5      	bne.n	8009f38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d106      	bne.n	8009f82 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f7c:	f7ff ff0e 	bl	8009d9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f80:	e002      	b.n	8009f88 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009f82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f84:	f7ff feec 	bl	8009d60 <HAL_UART_RxCpltCallback>
}
 8009f88:	bf00      	nop
 8009f8a:	3770      	adds	r7, #112	; 0x70
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d108      	bne.n	8009fb8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009faa:	085b      	lsrs	r3, r3, #1
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	4619      	mov	r1, r3
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff fef3 	bl	8009d9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fb6:	e002      	b.n	8009fbe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7ff fedb 	bl	8009d74 <HAL_UART_RxHalfCpltCallback>
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe2:	2b80      	cmp	r3, #128	; 0x80
 8009fe4:	bf0c      	ite	eq
 8009fe6:	2301      	moveq	r3, #1
 8009fe8:	2300      	movne	r3, #0
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b21      	cmp	r3, #33	; 0x21
 8009ff8:	d108      	bne.n	800a00c <UART_DMAError+0x46>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d005      	beq.n	800a00c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2200      	movs	r2, #0
 800a004:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a006:	68b8      	ldr	r0, [r7, #8]
 800a008:	f000 f8c2 	bl	800a190 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a016:	2b40      	cmp	r3, #64	; 0x40
 800a018:	bf0c      	ite	eq
 800a01a:	2301      	moveq	r3, #1
 800a01c:	2300      	movne	r3, #0
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b22      	cmp	r3, #34	; 0x22
 800a02c:	d108      	bne.n	800a040 <UART_DMAError+0x7a>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2200      	movs	r2, #0
 800a038:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a03a:	68b8      	ldr	r0, [r7, #8]
 800a03c:	f000 f8d0 	bl	800a1e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a044:	f043 0210 	orr.w	r2, r3, #16
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a04c:	68b8      	ldr	r0, [r7, #8]
 800a04e:	f7ff fe9b 	bl	8009d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b098      	sub	sp, #96	; 0x60
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	4613      	mov	r3, r2
 800a068:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	88fa      	ldrh	r2, [r7, #6]
 800a074:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2222      	movs	r2, #34	; 0x22
 800a080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a088:	4a3e      	ldr	r2, [pc, #248]	; (800a184 <UART_Start_Receive_DMA+0x128>)
 800a08a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	4a3d      	ldr	r2, [pc, #244]	; (800a188 <UART_Start_Receive_DMA+0x12c>)
 800a092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	4a3c      	ldr	r2, [pc, #240]	; (800a18c <UART_Start_Receive_DMA+0x130>)
 800a09a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a0a4:	f107 0308 	add.w	r3, r7, #8
 800a0a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	88fb      	ldrh	r3, [r7, #6]
 800a0bc:	f7fa fa50 	bl	8004560 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	613b      	str	r3, [r7, #16]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	613b      	str	r3, [r7, #16]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	613b      	str	r3, [r7, #16]
 800a0d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	330c      	adds	r3, #12
 800a0e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0e8:	e853 3f00 	ldrex	r3, [r3]
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	330c      	adds	r3, #12
 800a0fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a100:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a102:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1e5      	bne.n	800a0de <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3314      	adds	r3, #20
 800a118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	e853 3f00 	ldrex	r3, [r3]
 800a120:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	f043 0301 	orr.w	r3, r3, #1
 800a128:	657b      	str	r3, [r7, #84]	; 0x54
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3314      	adds	r3, #20
 800a130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a132:	63ba      	str	r2, [r7, #56]	; 0x38
 800a134:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e5      	bne.n	800a112 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3314      	adds	r3, #20
 800a14c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	617b      	str	r3, [r7, #20]
   return(result);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15c:	653b      	str	r3, [r7, #80]	; 0x50
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3314      	adds	r3, #20
 800a164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a166:	627a      	str	r2, [r7, #36]	; 0x24
 800a168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16a:	6a39      	ldr	r1, [r7, #32]
 800a16c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16e:	e841 2300 	strex	r3, r2, [r1]
 800a172:	61fb      	str	r3, [r7, #28]
   return(result);
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e5      	bne.n	800a146 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3760      	adds	r7, #96	; 0x60
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	08009e6b 	.word	0x08009e6b
 800a188:	08009f91 	.word	0x08009f91
 800a18c:	08009fc7 	.word	0x08009fc7

0800a190 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b089      	sub	sp, #36	; 0x24
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	330c      	adds	r3, #12
 800a19e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	e853 3f00 	ldrex	r3, [r3]
 800a1a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a1ae:	61fb      	str	r3, [r7, #28]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	330c      	adds	r3, #12
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	61ba      	str	r2, [r7, #24]
 800a1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1bc:	6979      	ldr	r1, [r7, #20]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	e841 2300 	strex	r3, r2, [r1]
 800a1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1e5      	bne.n	800a198 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a1d4:	bf00      	nop
 800a1d6:	3724      	adds	r7, #36	; 0x24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b095      	sub	sp, #84	; 0x54
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	330c      	adds	r3, #12
 800a1ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	330c      	adds	r3, #12
 800a206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a208:	643a      	str	r2, [r7, #64]	; 0x40
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a20e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e5      	bne.n	800a1e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3314      	adds	r3, #20
 800a222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	e853 3f00 	ldrex	r3, [r3]
 800a22a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f023 0301 	bic.w	r3, r3, #1
 800a232:	64bb      	str	r3, [r7, #72]	; 0x48
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3314      	adds	r3, #20
 800a23a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a23c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a23e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a244:	e841 2300 	strex	r3, r2, [r1]
 800a248:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1e5      	bne.n	800a21c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a254:	2b01      	cmp	r3, #1
 800a256:	d119      	bne.n	800a28c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	330c      	adds	r3, #12
 800a25e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	e853 3f00 	ldrex	r3, [r3]
 800a266:	60bb      	str	r3, [r7, #8]
   return(result);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f023 0310 	bic.w	r3, r3, #16
 800a26e:	647b      	str	r3, [r7, #68]	; 0x44
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	330c      	adds	r3, #12
 800a276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a278:	61ba      	str	r2, [r7, #24]
 800a27a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27c:	6979      	ldr	r1, [r7, #20]
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	e841 2300 	strex	r3, r2, [r1]
 800a284:	613b      	str	r3, [r7, #16]
   return(result);
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e5      	bne.n	800a258 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2220      	movs	r2, #32
 800a290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a29a:	bf00      	nop
 800a29c:	3754      	adds	r7, #84	; 0x54
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f7ff fd61 	bl	8009d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2c6:	bf00      	nop
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b085      	sub	sp, #20
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b21      	cmp	r3, #33	; 0x21
 800a2e0:	d13e      	bne.n	800a360 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ea:	d114      	bne.n	800a316 <UART_Transmit_IT+0x48>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d110      	bne.n	800a316 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a1b      	ldr	r3, [r3, #32]
 800a2f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a308:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	1c9a      	adds	r2, r3, #2
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	621a      	str	r2, [r3, #32]
 800a314:	e008      	b.n	800a328 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	1c59      	adds	r1, r3, #1
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	6211      	str	r1, [r2, #32]
 800a320:	781a      	ldrb	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29b      	uxth	r3, r3
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	4619      	mov	r1, r3
 800a336:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10f      	bne.n	800a35c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a34a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a35a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	e000      	b.n	800a362 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a360:	2302      	movs	r3, #2
  }
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68da      	ldr	r2, [r3, #12]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a384:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2220      	movs	r2, #32
 800a38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7f8 fbd4 	bl	8002b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b08c      	sub	sp, #48	; 0x30
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b22      	cmp	r3, #34	; 0x22
 800a3b0:	f040 80ab 	bne.w	800a50a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3bc:	d117      	bne.n	800a3ee <UART_Receive_IT+0x50>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d113      	bne.n	800a3ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e6:	1c9a      	adds	r2, r3, #2
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	629a      	str	r2, [r3, #40]	; 0x28
 800a3ec:	e026      	b.n	800a43c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a400:	d007      	beq.n	800a412 <UART_Receive_IT+0x74>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10a      	bne.n	800a420 <UART_Receive_IT+0x82>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	e008      	b.n	800a432 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a440:	b29b      	uxth	r3, r3
 800a442:	3b01      	subs	r3, #1
 800a444:	b29b      	uxth	r3, r3
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	4619      	mov	r1, r3
 800a44a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d15a      	bne.n	800a506 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68da      	ldr	r2, [r3, #12]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f022 0220 	bic.w	r2, r2, #32
 800a45e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68da      	ldr	r2, [r3, #12]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a46e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	695a      	ldr	r2, [r3, #20]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f022 0201 	bic.w	r2, r2, #1
 800a47e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2220      	movs	r2, #32
 800a484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d135      	bne.n	800a4fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	330c      	adds	r3, #12
 800a49c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	e853 3f00 	ldrex	r3, [r3]
 800a4a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f023 0310 	bic.w	r3, r3, #16
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	330c      	adds	r3, #12
 800a4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b6:	623a      	str	r2, [r7, #32]
 800a4b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ba:	69f9      	ldr	r1, [r7, #28]
 800a4bc:	6a3a      	ldr	r2, [r7, #32]
 800a4be:	e841 2300 	strex	r3, r2, [r1]
 800a4c2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1e5      	bne.n	800a496 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0310 	and.w	r3, r3, #16
 800a4d4:	2b10      	cmp	r3, #16
 800a4d6:	d10a      	bne.n	800a4ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff fc51 	bl	8009d9c <HAL_UARTEx_RxEventCallback>
 800a4fa:	e002      	b.n	800a502 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff fc2f 	bl	8009d60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	e002      	b.n	800a50c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	e000      	b.n	800a50c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a50a:	2302      	movs	r3, #2
  }
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3730      	adds	r7, #48	; 0x30
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	b09f      	sub	sp, #124	; 0x7c
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52a:	68d9      	ldr	r1, [r3, #12]
 800a52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	ea40 0301 	orr.w	r3, r0, r1
 800a534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a538:	689a      	ldr	r2, [r3, #8]
 800a53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	431a      	orrs	r2, r3
 800a540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	431a      	orrs	r2, r3
 800a546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a548:	69db      	ldr	r3, [r3, #28]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a54e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a558:	f021 010c 	bic.w	r1, r1, #12
 800a55c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a562:	430b      	orrs	r3, r1
 800a564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a572:	6999      	ldr	r1, [r3, #24]
 800a574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	ea40 0301 	orr.w	r3, r0, r1
 800a57c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	4bc5      	ldr	r3, [pc, #788]	; (800a898 <UART_SetConfig+0x384>)
 800a584:	429a      	cmp	r2, r3
 800a586:	d004      	beq.n	800a592 <UART_SetConfig+0x7e>
 800a588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	4bc3      	ldr	r3, [pc, #780]	; (800a89c <UART_SetConfig+0x388>)
 800a58e:	429a      	cmp	r2, r3
 800a590:	d103      	bne.n	800a59a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a592:	f7fd fbbf 	bl	8007d14 <HAL_RCC_GetPCLK2Freq>
 800a596:	6778      	str	r0, [r7, #116]	; 0x74
 800a598:	e002      	b.n	800a5a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a59a:	f7fd fba7 	bl	8007cec <HAL_RCC_GetPCLK1Freq>
 800a59e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5a8:	f040 80b6 	bne.w	800a718 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5ae:	461c      	mov	r4, r3
 800a5b0:	f04f 0500 	mov.w	r5, #0
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	1891      	adds	r1, r2, r2
 800a5ba:	6439      	str	r1, [r7, #64]	; 0x40
 800a5bc:	415b      	adcs	r3, r3
 800a5be:	647b      	str	r3, [r7, #68]	; 0x44
 800a5c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5c4:	1912      	adds	r2, r2, r4
 800a5c6:	eb45 0303 	adc.w	r3, r5, r3
 800a5ca:	f04f 0000 	mov.w	r0, #0
 800a5ce:	f04f 0100 	mov.w	r1, #0
 800a5d2:	00d9      	lsls	r1, r3, #3
 800a5d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5d8:	00d0      	lsls	r0, r2, #3
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	1911      	adds	r1, r2, r4
 800a5e0:	6639      	str	r1, [r7, #96]	; 0x60
 800a5e2:	416b      	adcs	r3, r5
 800a5e4:	667b      	str	r3, [r7, #100]	; 0x64
 800a5e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	f04f 0300 	mov.w	r3, #0
 800a5f0:	1891      	adds	r1, r2, r2
 800a5f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a5f4:	415b      	adcs	r3, r3
 800a5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a5fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a600:	f7f6 faf2 	bl	8000be8 <__aeabi_uldivmod>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4ba5      	ldr	r3, [pc, #660]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a60a:	fba3 2302 	umull	r2, r3, r3, r2
 800a60e:	095b      	lsrs	r3, r3, #5
 800a610:	011e      	lsls	r6, r3, #4
 800a612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a614:	461c      	mov	r4, r3
 800a616:	f04f 0500 	mov.w	r5, #0
 800a61a:	4622      	mov	r2, r4
 800a61c:	462b      	mov	r3, r5
 800a61e:	1891      	adds	r1, r2, r2
 800a620:	6339      	str	r1, [r7, #48]	; 0x30
 800a622:	415b      	adcs	r3, r3
 800a624:	637b      	str	r3, [r7, #52]	; 0x34
 800a626:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a62a:	1912      	adds	r2, r2, r4
 800a62c:	eb45 0303 	adc.w	r3, r5, r3
 800a630:	f04f 0000 	mov.w	r0, #0
 800a634:	f04f 0100 	mov.w	r1, #0
 800a638:	00d9      	lsls	r1, r3, #3
 800a63a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a63e:	00d0      	lsls	r0, r2, #3
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	1911      	adds	r1, r2, r4
 800a646:	65b9      	str	r1, [r7, #88]	; 0x58
 800a648:	416b      	adcs	r3, r5
 800a64a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a64c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	461a      	mov	r2, r3
 800a652:	f04f 0300 	mov.w	r3, #0
 800a656:	1891      	adds	r1, r2, r2
 800a658:	62b9      	str	r1, [r7, #40]	; 0x28
 800a65a:	415b      	adcs	r3, r3
 800a65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a65e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a662:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a666:	f7f6 fabf 	bl	8000be8 <__aeabi_uldivmod>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4b8c      	ldr	r3, [pc, #560]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a670:	fba3 1302 	umull	r1, r3, r3, r2
 800a674:	095b      	lsrs	r3, r3, #5
 800a676:	2164      	movs	r1, #100	; 0x64
 800a678:	fb01 f303 	mul.w	r3, r1, r3
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	00db      	lsls	r3, r3, #3
 800a680:	3332      	adds	r3, #50	; 0x32
 800a682:	4a87      	ldr	r2, [pc, #540]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a684:	fba2 2303 	umull	r2, r3, r2, r3
 800a688:	095b      	lsrs	r3, r3, #5
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a690:	441e      	add	r6, r3
 800a692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a694:	4618      	mov	r0, r3
 800a696:	f04f 0100 	mov.w	r1, #0
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	1894      	adds	r4, r2, r2
 800a6a0:	623c      	str	r4, [r7, #32]
 800a6a2:	415b      	adcs	r3, r3
 800a6a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6aa:	1812      	adds	r2, r2, r0
 800a6ac:	eb41 0303 	adc.w	r3, r1, r3
 800a6b0:	f04f 0400 	mov.w	r4, #0
 800a6b4:	f04f 0500 	mov.w	r5, #0
 800a6b8:	00dd      	lsls	r5, r3, #3
 800a6ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6be:	00d4      	lsls	r4, r2, #3
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	1814      	adds	r4, r2, r0
 800a6c6:	653c      	str	r4, [r7, #80]	; 0x50
 800a6c8:	414b      	adcs	r3, r1
 800a6ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a6cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	f04f 0300 	mov.w	r3, #0
 800a6d6:	1891      	adds	r1, r2, r2
 800a6d8:	61b9      	str	r1, [r7, #24]
 800a6da:	415b      	adcs	r3, r3
 800a6dc:	61fb      	str	r3, [r7, #28]
 800a6de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a6e6:	f7f6 fa7f 	bl	8000be8 <__aeabi_uldivmod>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4b6c      	ldr	r3, [pc, #432]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a6f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6f4:	095b      	lsrs	r3, r3, #5
 800a6f6:	2164      	movs	r1, #100	; 0x64
 800a6f8:	fb01 f303 	mul.w	r3, r1, r3
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	3332      	adds	r3, #50	; 0x32
 800a702:	4a67      	ldr	r2, [pc, #412]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a704:	fba2 2303 	umull	r2, r3, r2, r3
 800a708:	095b      	lsrs	r3, r3, #5
 800a70a:	f003 0207 	and.w	r2, r3, #7
 800a70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4432      	add	r2, r6
 800a714:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a716:	e0b9      	b.n	800a88c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a71a:	461c      	mov	r4, r3
 800a71c:	f04f 0500 	mov.w	r5, #0
 800a720:	4622      	mov	r2, r4
 800a722:	462b      	mov	r3, r5
 800a724:	1891      	adds	r1, r2, r2
 800a726:	6139      	str	r1, [r7, #16]
 800a728:	415b      	adcs	r3, r3
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a730:	1912      	adds	r2, r2, r4
 800a732:	eb45 0303 	adc.w	r3, r5, r3
 800a736:	f04f 0000 	mov.w	r0, #0
 800a73a:	f04f 0100 	mov.w	r1, #0
 800a73e:	00d9      	lsls	r1, r3, #3
 800a740:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a744:	00d0      	lsls	r0, r2, #3
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	eb12 0804 	adds.w	r8, r2, r4
 800a74e:	eb43 0905 	adc.w	r9, r3, r5
 800a752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	4618      	mov	r0, r3
 800a758:	f04f 0100 	mov.w	r1, #0
 800a75c:	f04f 0200 	mov.w	r2, #0
 800a760:	f04f 0300 	mov.w	r3, #0
 800a764:	008b      	lsls	r3, r1, #2
 800a766:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a76a:	0082      	lsls	r2, r0, #2
 800a76c:	4640      	mov	r0, r8
 800a76e:	4649      	mov	r1, r9
 800a770:	f7f6 fa3a 	bl	8000be8 <__aeabi_uldivmod>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4b49      	ldr	r3, [pc, #292]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a77a:	fba3 2302 	umull	r2, r3, r3, r2
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	011e      	lsls	r6, r3, #4
 800a782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a784:	4618      	mov	r0, r3
 800a786:	f04f 0100 	mov.w	r1, #0
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	1894      	adds	r4, r2, r2
 800a790:	60bc      	str	r4, [r7, #8]
 800a792:	415b      	adcs	r3, r3
 800a794:	60fb      	str	r3, [r7, #12]
 800a796:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a79a:	1812      	adds	r2, r2, r0
 800a79c:	eb41 0303 	adc.w	r3, r1, r3
 800a7a0:	f04f 0400 	mov.w	r4, #0
 800a7a4:	f04f 0500 	mov.w	r5, #0
 800a7a8:	00dd      	lsls	r5, r3, #3
 800a7aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a7ae:	00d4      	lsls	r4, r2, #3
 800a7b0:	4622      	mov	r2, r4
 800a7b2:	462b      	mov	r3, r5
 800a7b4:	1814      	adds	r4, r2, r0
 800a7b6:	64bc      	str	r4, [r7, #72]	; 0x48
 800a7b8:	414b      	adcs	r3, r1
 800a7ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f04f 0100 	mov.w	r1, #0
 800a7c6:	f04f 0200 	mov.w	r2, #0
 800a7ca:	f04f 0300 	mov.w	r3, #0
 800a7ce:	008b      	lsls	r3, r1, #2
 800a7d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a7d4:	0082      	lsls	r2, r0, #2
 800a7d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a7da:	f7f6 fa05 	bl	8000be8 <__aeabi_uldivmod>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4b2f      	ldr	r3, [pc, #188]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a7e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a7e8:	095b      	lsrs	r3, r3, #5
 800a7ea:	2164      	movs	r1, #100	; 0x64
 800a7ec:	fb01 f303 	mul.w	r3, r1, r3
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	011b      	lsls	r3, r3, #4
 800a7f4:	3332      	adds	r3, #50	; 0x32
 800a7f6:	4a2a      	ldr	r2, [pc, #168]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a7f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7fc:	095b      	lsrs	r3, r3, #5
 800a7fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a802:	441e      	add	r6, r3
 800a804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a806:	4618      	mov	r0, r3
 800a808:	f04f 0100 	mov.w	r1, #0
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	1894      	adds	r4, r2, r2
 800a812:	603c      	str	r4, [r7, #0]
 800a814:	415b      	adcs	r3, r3
 800a816:	607b      	str	r3, [r7, #4]
 800a818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a81c:	1812      	adds	r2, r2, r0
 800a81e:	eb41 0303 	adc.w	r3, r1, r3
 800a822:	f04f 0400 	mov.w	r4, #0
 800a826:	f04f 0500 	mov.w	r5, #0
 800a82a:	00dd      	lsls	r5, r3, #3
 800a82c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a830:	00d4      	lsls	r4, r2, #3
 800a832:	4622      	mov	r2, r4
 800a834:	462b      	mov	r3, r5
 800a836:	eb12 0a00 	adds.w	sl, r2, r0
 800a83a:	eb43 0b01 	adc.w	fp, r3, r1
 800a83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	4618      	mov	r0, r3
 800a844:	f04f 0100 	mov.w	r1, #0
 800a848:	f04f 0200 	mov.w	r2, #0
 800a84c:	f04f 0300 	mov.w	r3, #0
 800a850:	008b      	lsls	r3, r1, #2
 800a852:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a856:	0082      	lsls	r2, r0, #2
 800a858:	4650      	mov	r0, sl
 800a85a:	4659      	mov	r1, fp
 800a85c:	f7f6 f9c4 	bl	8000be8 <__aeabi_uldivmod>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4b0e      	ldr	r3, [pc, #56]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a866:	fba3 1302 	umull	r1, r3, r3, r2
 800a86a:	095b      	lsrs	r3, r3, #5
 800a86c:	2164      	movs	r1, #100	; 0x64
 800a86e:	fb01 f303 	mul.w	r3, r1, r3
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	011b      	lsls	r3, r3, #4
 800a876:	3332      	adds	r3, #50	; 0x32
 800a878:	4a09      	ldr	r2, [pc, #36]	; (800a8a0 <UART_SetConfig+0x38c>)
 800a87a:	fba2 2303 	umull	r2, r3, r2, r3
 800a87e:	095b      	lsrs	r3, r3, #5
 800a880:	f003 020f 	and.w	r2, r3, #15
 800a884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4432      	add	r2, r6
 800a88a:	609a      	str	r2, [r3, #8]
}
 800a88c:	bf00      	nop
 800a88e:	377c      	adds	r7, #124	; 0x7c
 800a890:	46bd      	mov	sp, r7
 800a892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a896:	bf00      	nop
 800a898:	40011000 	.word	0x40011000
 800a89c:	40011400 	.word	0x40011400
 800a8a0:	51eb851f 	.word	0x51eb851f

0800a8a4 <tcpecho_thread>:
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
static void tcpecho_thread(void *arg)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08c      	sub	sp, #48	; 0x30
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
  err_t recv_err;

  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	2010      	movs	r0, #16
 800a8b2:	f004 fd71 	bl	800f398 <netconn_new_with_proto_and_callback>
 800a8b6:	6238      	str	r0, [r7, #32]

  if (conn != NULL)
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d05d      	beq.n	800a97a <tcpecho_thread+0xd6>
  {
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 8000);
 800a8be:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	6a38      	ldr	r0, [r7, #32]
 800a8c6:	f004 fe21 	bl	800f50c <netconn_bind>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	77fb      	strb	r3, [r7, #31]

    if (err == ERR_OK)
 800a8ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d14d      	bne.n	800a972 <tcpecho_thread+0xce>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 800a8d6:	21ff      	movs	r1, #255	; 0xff
 800a8d8:	6a38      	ldr	r0, [r7, #32]
 800a8da:	f004 fe4f 	bl	800f57c <netconn_listen_with_backlog>

      while (1)
      {
        /* Grab new connection. */
        accept_err = netconn_accept(conn, &newconn);
 800a8de:	f107 0318 	add.w	r3, r7, #24
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6a38      	ldr	r0, [r7, #32]
 800a8e6:	f004 fe75 	bl	800f5d4 <netconn_accept>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	77bb      	strb	r3, [r7, #30]

        /* Process the new connection. */
        if (accept_err == ERR_OK)
 800a8ee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1f3      	bne.n	800a8de <tcpecho_thread+0x3a>
        {
          recv_err = netconn_recv(newconn, &buf);
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	f107 0214 	add.w	r2, r7, #20
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f005 f870 	bl	800f9e4 <netconn_recv>
 800a904:	4603      	mov	r3, r0
 800a906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (recv_err == ERR_OK)
 800a90a:	e025      	b.n	800a958 <tcpecho_thread+0xb4>
          {
            do
            {
              netbuf_data(buf, &data, &len);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f107 020e 	add.w	r2, r7, #14
 800a912:	f107 0110 	add.w	r1, r7, #16
 800a916:	4618      	mov	r0, r3
 800a918:	f006 fdfa 	bl	8011510 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 800a91c:	69b8      	ldr	r0, [r7, #24]
 800a91e:	6939      	ldr	r1, [r7, #16]
 800a920:	89fb      	ldrh	r3, [r7, #14]
 800a922:	461a      	mov	r2, r3
 800a924:	2300      	movs	r3, #0
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	2301      	movs	r3, #1
 800a92a:	f005 f8d5 	bl	800fad8 <netconn_write_partly>

            } while (netbuf_next(buf) >= 0);
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	4618      	mov	r0, r3
 800a932:	f006 fe37 	bl	80115a4 <netbuf_next>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	dae7      	bge.n	800a90c <tcpecho_thread+0x68>

            netbuf_delete(buf);
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	4618      	mov	r0, r3
 800a940:	f006 fdc6 	bl	80114d0 <netbuf_delete>
            recv_err = netconn_recv(newconn, &buf);
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	f107 0214 	add.w	r2, r7, #20
 800a94a:	4611      	mov	r1, r2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f005 f849 	bl	800f9e4 <netconn_recv>
 800a952:	4603      	mov	r3, r0
 800a954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (recv_err == ERR_OK)
 800a958:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d0d5      	beq.n	800a90c <tcpecho_thread+0x68>
          }

          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	4618      	mov	r0, r3
 800a964:	f005 f9ba 	bl	800fcdc <netconn_close>
          netconn_delete(newconn);
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f004 fdb2 	bl	800f4d4 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 800a970:	e7b5      	b.n	800a8de <tcpecho_thread+0x3a>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	4618      	mov	r0, r3
 800a976:	f004 fdad 	bl	800f4d4 <netconn_delete>
    }
  }
}
 800a97a:	bf00      	nop
 800a97c:	3728      	adds	r7, #40	; 0x28
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <MX_LWIP_Init>:

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init(NULL, NULL);
 800a98a:	2100      	movs	r1, #0
 800a98c:	2000      	movs	r0, #0
 800a98e:	f006 ffa7 	bl	80118e0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800a992:	4b2f      	ldr	r3, [pc, #188]	; (800aa50 <MX_LWIP_Init+0xcc>)
 800a994:	2200      	movs	r2, #0
 800a996:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800a998:	4b2e      	ldr	r3, [pc, #184]	; (800aa54 <MX_LWIP_Init+0xd0>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800a99e:	4b2e      	ldr	r3, [pc, #184]	; (800aa58 <MX_LWIP_Init+0xd4>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a9a4:	4b2d      	ldr	r3, [pc, #180]	; (800aa5c <MX_LWIP_Init+0xd8>)
 800a9a6:	9302      	str	r3, [sp, #8]
 800a9a8:	4b2d      	ldr	r3, [pc, #180]	; (800aa60 <MX_LWIP_Init+0xdc>)
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	4b29      	ldr	r3, [pc, #164]	; (800aa58 <MX_LWIP_Init+0xd4>)
 800a9b2:	4a28      	ldr	r2, [pc, #160]	; (800aa54 <MX_LWIP_Init+0xd0>)
 800a9b4:	4926      	ldr	r1, [pc, #152]	; (800aa50 <MX_LWIP_Init+0xcc>)
 800a9b6:	482b      	ldr	r0, [pc, #172]	; (800aa64 <MX_LWIP_Init+0xe0>)
 800a9b8:	f007 fd16 	bl	80123e8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a9bc:	4829      	ldr	r0, [pc, #164]	; (800aa64 <MX_LWIP_Init+0xe0>)
 800a9be:	f007 fecd 	bl	801275c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a9c2:	4b28      	ldr	r3, [pc, #160]	; (800aa64 <MX_LWIP_Init+0xe0>)
 800a9c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9c8:	089b      	lsrs	r3, r3, #2
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a9d4:	4823      	ldr	r0, [pc, #140]	; (800aa64 <MX_LWIP_Init+0xe0>)
 800a9d6:	f007 fed1 	bl	801277c <netif_set_up>
 800a9da:	e002      	b.n	800a9e2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a9dc:	4821      	ldr	r0, [pc, #132]	; (800aa64 <MX_LWIP_Init+0xe0>)
 800a9de:	f007 ff39 	bl	8012854 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800a9e2:	4921      	ldr	r1, [pc, #132]	; (800aa68 <MX_LWIP_Init+0xe4>)
 800a9e4:	481f      	ldr	r0, [pc, #124]	; (800aa64 <MX_LWIP_Init+0xe0>)
 800a9e6:	f007 ffcf 	bl	8012988 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	f000 ff86 	bl	800b900 <osSemaphoreNew>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	4a1d      	ldr	r2, [pc, #116]	; (800aa6c <MX_LWIP_Init+0xe8>)
 800a9f8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800a9fa:	4b1d      	ldr	r3, [pc, #116]	; (800aa70 <MX_LWIP_Init+0xec>)
 800a9fc:	4a19      	ldr	r2, [pc, #100]	; (800aa64 <MX_LWIP_Init+0xe0>)
 800a9fe:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800aa00:	4b1a      	ldr	r3, [pc, #104]	; (800aa6c <MX_LWIP_Init+0xe8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a1a      	ldr	r2, [pc, #104]	; (800aa70 <MX_LWIP_Init+0xec>)
 800aa06:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
  /* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800aa08:	2224      	movs	r2, #36	; 0x24
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4819      	ldr	r0, [pc, #100]	; (800aa74 <MX_LWIP_Init+0xf0>)
 800aa0e:	f015 f870 	bl	801faf2 <memset>
  attributes.name = "LinkThr";
 800aa12:	4b18      	ldr	r3, [pc, #96]	; (800aa74 <MX_LWIP_Init+0xf0>)
 800aa14:	4a18      	ldr	r2, [pc, #96]	; (800aa78 <MX_LWIP_Init+0xf4>)
 800aa16:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800aa18:	4b16      	ldr	r3, [pc, #88]	; (800aa74 <MX_LWIP_Init+0xf0>)
 800aa1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa1e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800aa20:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <MX_LWIP_Init+0xf0>)
 800aa22:	2210      	movs	r2, #16
 800aa24:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800aa26:	4a13      	ldr	r2, [pc, #76]	; (800aa74 <MX_LWIP_Init+0xf0>)
 800aa28:	4911      	ldr	r1, [pc, #68]	; (800aa70 <MX_LWIP_Init+0xec>)
 800aa2a:	4814      	ldr	r0, [pc, #80]	; (800aa7c <MX_LWIP_Init+0xf8>)
 800aa2c:	f000 fced 	bl	800b40a <osThreadNew>
  /* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800aa30:	480c      	ldr	r0, [pc, #48]	; (800aa64 <MX_LWIP_Init+0xe0>)
 800aa32:	f010 f841 	bl	801aab8 <dhcp_start>

  /* USER CODE BEGIN 3 */
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 800aa36:	2305      	movs	r3, #5
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa3e:	2200      	movs	r2, #0
 800aa40:	490f      	ldr	r1, [pc, #60]	; (800aa80 <MX_LWIP_Init+0xfc>)
 800aa42:	4810      	ldr	r0, [pc, #64]	; (800aa84 <MX_LWIP_Init+0x100>)
 800aa44:	f013 ffa8 	bl	801e998 <sys_thread_new>
  /* USER CODE END 3 */
}
 800aa48:	bf00      	nop
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20008188 	.word	0x20008188
 800aa54:	2000818c 	.word	0x2000818c
 800aa58:	20008190 	.word	0x20008190
 800aa5c:	080117f1 	.word	0x080117f1
 800aa60:	0800b0d5 	.word	0x0800b0d5
 800aa64:	20008150 	.word	0x20008150
 800aa68:	0800b1b9 	.word	0x0800b1b9
 800aa6c:	20000180 	.word	0x20000180
 800aa70:	20008124 	.word	0x20008124
 800aa74:	2000812c 	.word	0x2000812c
 800aa78:	08020ec4 	.word	0x08020ec4
 800aa7c:	0800b141 	.word	0x0800b141
 800aa80:	0800a8a5 	.word	0x0800a8a5
 800aa84:	08020ecc 	.word	0x08020ecc

0800aa88 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08e      	sub	sp, #56	; 0x38
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa94:	2200      	movs	r2, #0
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	605a      	str	r2, [r3, #4]
 800aa9a:	609a      	str	r2, [r3, #8]
 800aa9c:	60da      	str	r2, [r3, #12]
 800aa9e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a53      	ldr	r2, [pc, #332]	; (800abf4 <HAL_ETH_MspInit+0x16c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	f040 809f 	bne.w	800abea <HAL_ETH_MspInit+0x162>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800aaac:	2300      	movs	r3, #0
 800aaae:	623b      	str	r3, [r7, #32]
 800aab0:	4b51      	ldr	r3, [pc, #324]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800aab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab4:	4a50      	ldr	r2, [pc, #320]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800aab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aaba:	6313      	str	r3, [r2, #48]	; 0x30
 800aabc:	4b4e      	ldr	r3, [pc, #312]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800aabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aac4:	623b      	str	r3, [r7, #32]
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	2300      	movs	r3, #0
 800aaca:	61fb      	str	r3, [r7, #28]
 800aacc:	4b4a      	ldr	r3, [pc, #296]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800aace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad0:	4a49      	ldr	r2, [pc, #292]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800aad2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aad6:	6313      	str	r3, [r2, #48]	; 0x30
 800aad8:	4b47      	ldr	r3, [pc, #284]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800aada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aadc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aae0:	61fb      	str	r3, [r7, #28]
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	2300      	movs	r3, #0
 800aae6:	61bb      	str	r3, [r7, #24]
 800aae8:	4b43      	ldr	r3, [pc, #268]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800aaea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaec:	4a42      	ldr	r2, [pc, #264]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800aaee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aaf2:	6313      	str	r3, [r2, #48]	; 0x30
 800aaf4:	4b40      	ldr	r3, [pc, #256]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800aaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aafc:	61bb      	str	r3, [r7, #24]
 800aafe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab00:	2300      	movs	r3, #0
 800ab02:	617b      	str	r3, [r7, #20]
 800ab04:	4b3c      	ldr	r3, [pc, #240]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800ab06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab08:	4a3b      	ldr	r2, [pc, #236]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800ab0a:	f043 0304 	orr.w	r3, r3, #4
 800ab0e:	6313      	str	r3, [r2, #48]	; 0x30
 800ab10:	4b39      	ldr	r3, [pc, #228]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800ab12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	613b      	str	r3, [r7, #16]
 800ab20:	4b35      	ldr	r3, [pc, #212]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800ab22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab24:	4a34      	ldr	r2, [pc, #208]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800ab26:	f043 0301 	orr.w	r3, r3, #1
 800ab2a:	6313      	str	r3, [r2, #48]	; 0x30
 800ab2c:	4b32      	ldr	r3, [pc, #200]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	613b      	str	r3, [r7, #16]
 800ab36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60fb      	str	r3, [r7, #12]
 800ab3c:	4b2e      	ldr	r3, [pc, #184]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	4a2d      	ldr	r2, [pc, #180]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800ab42:	f043 0302 	orr.w	r3, r3, #2
 800ab46:	6313      	str	r3, [r2, #48]	; 0x30
 800ab48:	4b2b      	ldr	r3, [pc, #172]	; (800abf8 <HAL_ETH_MspInit+0x170>)
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ab54:	2332      	movs	r3, #50	; 0x32
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab58:	2302      	movs	r3, #2
 800ab5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab60:	2303      	movs	r3, #3
 800ab62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ab64:	230b      	movs	r3, #11
 800ab66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4823      	ldr	r0, [pc, #140]	; (800abfc <HAL_ETH_MspInit+0x174>)
 800ab70:	f7fb f9f0 	bl	8005f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ab74:	2386      	movs	r3, #134	; 0x86
 800ab76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab80:	2303      	movs	r3, #3
 800ab82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ab84:	230b      	movs	r3, #11
 800ab86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	481c      	ldr	r0, [pc, #112]	; (800ac00 <HAL_ETH_MspInit+0x178>)
 800ab90:	f7fb f9e0 	bl	8005f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800ab94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aba2:	2303      	movs	r3, #3
 800aba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aba6:	230b      	movs	r3, #11
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800abaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abae:	4619      	mov	r1, r3
 800abb0:	4814      	ldr	r0, [pc, #80]	; (800ac04 <HAL_ETH_MspInit+0x17c>)
 800abb2:	f7fb f9cf 	bl	8005f54 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800abb6:	2200      	movs	r2, #0
 800abb8:	2105      	movs	r1, #5
 800abba:	203d      	movs	r0, #61	; 0x3d
 800abbc:	f7f9 fbf8 	bl	80043b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800abc0:	203d      	movs	r0, #61	; 0x3d
 800abc2:	f7f9 fc11 	bl	80043e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */
    HAL_GPIO_WritePin(ETH_RSTN_GPIO_Port, ETH_RSTN_Pin, GPIO_PIN_RESET);
 800abc6:	2200      	movs	r2, #0
 800abc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800abcc:	480d      	ldr	r0, [pc, #52]	; (800ac04 <HAL_ETH_MspInit+0x17c>)
 800abce:	f7fb fb75 	bl	80062bc <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800abd2:	2032      	movs	r0, #50	; 0x32
 800abd4:	f7f8 fefe 	bl	80039d4 <HAL_Delay>
    HAL_GPIO_WritePin(ETH_RSTN_GPIO_Port, ETH_RSTN_Pin, GPIO_PIN_SET);
 800abd8:	2201      	movs	r2, #1
 800abda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800abde:	4809      	ldr	r0, [pc, #36]	; (800ac04 <HAL_ETH_MspInit+0x17c>)
 800abe0:	f7fb fb6c 	bl	80062bc <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800abe4:	2032      	movs	r0, #50	; 0x32
 800abe6:	f7f8 fef5 	bl	80039d4 <HAL_Delay>
  /* USER CODE END ETH_MspInit 1 */
  }
}
 800abea:	bf00      	nop
 800abec:	3738      	adds	r7, #56	; 0x38
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	40028000 	.word	0x40028000
 800abf8:	40023800 	.word	0x40023800
 800abfc:	40020800 	.word	0x40020800
 800ac00:	40020000 	.word	0x40020000
 800ac04:	40020400 	.word	0x40020400

0800ac08 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800ac10:	4b04      	ldr	r3, [pc, #16]	; (800ac24 <HAL_ETH_RxCpltCallback+0x1c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 ff4f 	bl	800bab8 <osSemaphoreRelease>
}
 800ac1a:	bf00      	nop
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	20000184 	.word	0x20000184

0800ac28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b090      	sub	sp, #64	; 0x40
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ac34:	4b5d      	ldr	r3, [pc, #372]	; (800adac <low_level_init+0x184>)
 800ac36:	4a5e      	ldr	r2, [pc, #376]	; (800adb0 <low_level_init+0x188>)
 800ac38:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ac3a:	4b5c      	ldr	r3, [pc, #368]	; (800adac <low_level_init+0x184>)
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800ac40:	4b5a      	ldr	r3, [pc, #360]	; (800adac <low_level_init+0x184>)
 800ac42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ac46:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ac48:	4b58      	ldr	r3, [pc, #352]	; (800adac <low_level_init+0x184>)
 800ac4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac4e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ac50:	4b56      	ldr	r3, [pc, #344]	; (800adac <low_level_init+0x184>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800ac56:	2300      	movs	r3, #0
 800ac58:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800ac5a:	2380      	movs	r3, #128	; 0x80
 800ac5c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800ac5e:	23e1      	movs	r3, #225	; 0xe1
 800ac60:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800ac62:	2300      	movs	r3, #0
 800ac64:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800ac66:	2300      	movs	r3, #0
 800ac68:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800ac6e:	4a4f      	ldr	r2, [pc, #316]	; (800adac <low_level_init+0x184>)
 800ac70:	f107 030c 	add.w	r3, r7, #12
 800ac74:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800ac76:	4b4d      	ldr	r3, [pc, #308]	; (800adac <low_level_init+0x184>)
 800ac78:	2201      	movs	r2, #1
 800ac7a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ac7c:	4b4b      	ldr	r3, [pc, #300]	; (800adac <low_level_init+0x184>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ac82:	4b4a      	ldr	r3, [pc, #296]	; (800adac <low_level_init+0x184>)
 800ac84:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ac88:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ac8a:	4848      	ldr	r0, [pc, #288]	; (800adac <low_level_init+0x184>)
 800ac8c:	f7f9 ffbc 	bl	8004c08 <HAL_ETH_Init>
 800ac90:	4603      	mov	r3, r0
 800ac92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800ac96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d108      	bne.n	800acb0 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aca4:	f043 0304 	orr.w	r3, r3, #4
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800acb0:	2304      	movs	r3, #4
 800acb2:	4a40      	ldr	r2, [pc, #256]	; (800adb4 <low_level_init+0x18c>)
 800acb4:	4940      	ldr	r1, [pc, #256]	; (800adb8 <low_level_init+0x190>)
 800acb6:	483d      	ldr	r0, [pc, #244]	; (800adac <low_level_init+0x184>)
 800acb8:	f7fa f942 	bl	8004f40 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800acbc:	2304      	movs	r3, #4
 800acbe:	4a3f      	ldr	r2, [pc, #252]	; (800adbc <low_level_init+0x194>)
 800acc0:	493f      	ldr	r1, [pc, #252]	; (800adc0 <low_level_init+0x198>)
 800acc2:	483a      	ldr	r0, [pc, #232]	; (800adac <low_level_init+0x184>)
 800acc4:	f7fa f9a5 	bl	8005012 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2206      	movs	r2, #6
 800accc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800acd0:	4b36      	ldr	r3, [pc, #216]	; (800adac <low_level_init+0x184>)
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	781a      	ldrb	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800acdc:	4b33      	ldr	r3, [pc, #204]	; (800adac <low_level_init+0x184>)
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	785a      	ldrb	r2, [r3, #1]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ace8:	4b30      	ldr	r3, [pc, #192]	; (800adac <low_level_init+0x184>)
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	789a      	ldrb	r2, [r3, #2]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800acf4:	4b2d      	ldr	r3, [pc, #180]	; (800adac <low_level_init+0x184>)
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	78da      	ldrb	r2, [r3, #3]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ad00:	4b2a      	ldr	r3, [pc, #168]	; (800adac <low_level_init+0x184>)
 800ad02:	695b      	ldr	r3, [r3, #20]
 800ad04:	791a      	ldrb	r2, [r3, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ad0c:	4b27      	ldr	r3, [pc, #156]	; (800adac <low_level_init+0x184>)
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	795a      	ldrb	r2, [r3, #5]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ad1e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad26:	f043 030a 	orr.w	r3, r3, #10
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800ad32:	2200      	movs	r2, #0
 800ad34:	2101      	movs	r1, #1
 800ad36:	2001      	movs	r0, #1
 800ad38:	f000 fde2 	bl	800b900 <osSemaphoreNew>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	4a21      	ldr	r2, [pc, #132]	; (800adc4 <low_level_init+0x19c>)
 800ad40:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800ad42:	f107 0314 	add.w	r3, r7, #20
 800ad46:	2224      	movs	r2, #36	; 0x24
 800ad48:	2100      	movs	r1, #0
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f014 fed1 	bl	801faf2 <memset>
  attributes.name = "EthIf";
 800ad50:	4b1d      	ldr	r3, [pc, #116]	; (800adc8 <low_level_init+0x1a0>)
 800ad52:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800ad54:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800ad58:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800ad5a:	2330      	movs	r3, #48	; 0x30
 800ad5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800ad5e:	f107 0314 	add.w	r3, r7, #20
 800ad62:	461a      	mov	r2, r3
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	4819      	ldr	r0, [pc, #100]	; (800adcc <low_level_init+0x1a4>)
 800ad68:	f000 fb4f 	bl	800b40a <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800ad6c:	480f      	ldr	r0, [pc, #60]	; (800adac <low_level_init+0x184>)
 800ad6e:	f7fa fc78 	bl	8005662 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800ad72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ad76:	461a      	mov	r2, r3
 800ad78:	211d      	movs	r1, #29
 800ad7a:	480c      	ldr	r0, [pc, #48]	; (800adac <low_level_init+0x184>)
 800ad7c:	f7fa fba3 	bl	80054c6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	f043 030b 	orr.w	r3, r3, #11
 800ad86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ad88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	211d      	movs	r1, #29
 800ad8e:	4807      	ldr	r0, [pc, #28]	; (800adac <low_level_init+0x184>)
 800ad90:	f7fa fc01 	bl	8005596 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800ad94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ad98:	461a      	mov	r2, r3
 800ad9a:	211d      	movs	r1, #29
 800ad9c:	4803      	ldr	r0, [pc, #12]	; (800adac <low_level_init+0x184>)
 800ad9e:	f7fa fb92 	bl	80054c6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ada2:	bf00      	nop
 800ada4:	3740      	adds	r7, #64	; 0x40
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20009a64 	.word	0x20009a64
 800adb0:	40028000 	.word	0x40028000
 800adb4:	20009aac 	.word	0x20009aac
 800adb8:	20008194 	.word	0x20008194
 800adbc:	20008214 	.word	0x20008214
 800adc0:	200099e4 	.word	0x200099e4
 800adc4:	20000184 	.word	0x20000184
 800adc8:	08020edc 	.word	0x08020edc
 800adcc:	0800b075 	.word	0x0800b075

0800add0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08a      	sub	sp, #40	; 0x28
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800adda:	4b4b      	ldr	r3, [pc, #300]	; (800af08 <low_level_output+0x138>)
 800addc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800adee:	2300      	movs	r3, #0
 800adf0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800adf2:	4b45      	ldr	r3, [pc, #276]	; (800af08 <low_level_output+0x138>)
 800adf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	623b      	str	r3, [r7, #32]
 800ae00:	e05a      	b.n	800aeb8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	da03      	bge.n	800ae12 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800ae0a:	23f8      	movs	r3, #248	; 0xf8
 800ae0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800ae10:	e05c      	b.n	800aecc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	895b      	ldrh	r3, [r3, #10]
 800ae16:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ae1c:	e02f      	b.n	800ae7e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800ae1e:	69fa      	ldr	r2, [r7, #28]
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	18d0      	adds	r0, r2, r3
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	18d1      	adds	r1, r2, r3
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800ae32:	3304      	adds	r3, #4
 800ae34:	461a      	mov	r2, r3
 800ae36:	f014 fe4e 	bl	801fad6 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	da03      	bge.n	800ae50 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800ae48:	23f8      	movs	r3, #248	; 0xf8
 800ae4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800ae4e:	e03d      	b.n	800aecc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800ae60:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800ae6c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800ae78:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	4413      	add	r3, r2
 800ae84:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d8c8      	bhi.n	800ae1e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800ae8c:	69fa      	ldr	r2, [r7, #28]
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	18d0      	adds	r0, r2, r3
 800ae92:	6a3b      	ldr	r3, [r7, #32]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	4413      	add	r3, r2
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	f014 fe1a 	bl	801fad6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	4413      	add	r3, r2
 800aea8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4413      	add	r3, r2
 800aeb0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	623b      	str	r3, [r7, #32]
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1a1      	bne.n	800ae02 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800aebe:	6979      	ldr	r1, [r7, #20]
 800aec0:	4811      	ldr	r0, [pc, #68]	; (800af08 <low_level_output+0x138>)
 800aec2:	f7fa f913 	bl	80050ec <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800aecc:	4b0e      	ldr	r3, [pc, #56]	; (800af08 <low_level_output+0x138>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed4:	3314      	adds	r3, #20
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0320 	and.w	r3, r3, #32
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00d      	beq.n	800aefc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800aee0:	4b09      	ldr	r3, [pc, #36]	; (800af08 <low_level_output+0x138>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee8:	3314      	adds	r3, #20
 800aeea:	2220      	movs	r2, #32
 800aeec:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800aeee:	4b06      	ldr	r3, [pc, #24]	; (800af08 <low_level_output+0x138>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef6:	3304      	adds	r3, #4
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800aefc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800af00:	4618      	mov	r0, r3
 800af02:	3728      	adds	r7, #40	; 0x28
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	20009a64 	.word	0x20009a64

0800af0c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08c      	sub	sp, #48	; 0x30
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800af18:	2300      	movs	r3, #0
 800af1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800af20:	2300      	movs	r3, #0
 800af22:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800af30:	484f      	ldr	r0, [pc, #316]	; (800b070 <low_level_input+0x164>)
 800af32:	f7fa f9c5 	bl	80052c0 <HAL_ETH_GetReceivedFrame_IT>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <low_level_input+0x34>

    return NULL;
 800af3c:	2300      	movs	r3, #0
 800af3e:	e092      	b.n	800b066 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800af40:	4b4b      	ldr	r3, [pc, #300]	; (800b070 <low_level_input+0x164>)
 800af42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af44:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800af46:	4b4a      	ldr	r3, [pc, #296]	; (800b070 <low_level_input+0x164>)
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800af4c:	89fb      	ldrh	r3, [r7, #14]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d007      	beq.n	800af62 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800af52:	89fb      	ldrh	r3, [r7, #14]
 800af54:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800af58:	4619      	mov	r1, r3
 800af5a:	2000      	movs	r0, #0
 800af5c:	f007 fdde 	bl	8012b1c <pbuf_alloc>
 800af60:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d04b      	beq.n	800b000 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800af68:	4b41      	ldr	r3, [pc, #260]	; (800b070 <low_level_input+0x164>)
 800af6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800af72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af74:	62bb      	str	r3, [r7, #40]	; 0x28
 800af76:	e040      	b.n	800affa <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	895b      	ldrh	r3, [r3, #10]
 800af7c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800af82:	e021      	b.n	800afc8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af86:	685a      	ldr	r2, [r3, #4]
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	18d0      	adds	r0, r2, r3
 800af8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	18d1      	adds	r1, r2, r3
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800af98:	3304      	adds	r3, #4
 800af9a:	461a      	mov	r2, r3
 800af9c:	f014 fd9b 	bl	801fad6 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800afac:	69fa      	ldr	r2, [r7, #28]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	4413      	add	r3, r2
 800afb2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800afb6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800afb8:	69ba      	ldr	r2, [r7, #24]
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800afc2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800afc4:	2300      	movs	r3, #0
 800afc6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	4413      	add	r3, r2
 800afce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d8d6      	bhi.n	800af84 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	18d0      	adds	r0, r2, r3
 800afde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	4413      	add	r3, r2
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	4619      	mov	r1, r3
 800afe8:	f014 fd75 	bl	801fad6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800afec:	69fa      	ldr	r2, [r7, #28]
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	4413      	add	r3, r2
 800aff2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	62bb      	str	r3, [r7, #40]	; 0x28
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1bb      	bne.n	800af78 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b000:	4b1b      	ldr	r3, [pc, #108]	; (800b070 <low_level_input+0x164>)
 800b002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b004:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b006:	2300      	movs	r3, #0
 800b008:	613b      	str	r3, [r7, #16]
 800b00a:	e00b      	b.n	800b024 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	3301      	adds	r3, #1
 800b022:	613b      	str	r3, [r7, #16]
 800b024:	4b12      	ldr	r3, [pc, #72]	; (800b070 <low_level_input+0x164>)
 800b026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d3ee      	bcc.n	800b00c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b02e:	4b10      	ldr	r3, [pc, #64]	; (800b070 <low_level_input+0x164>)
 800b030:	2200      	movs	r2, #0
 800b032:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b034:	4b0e      	ldr	r3, [pc, #56]	; (800b070 <low_level_input+0x164>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b03c:	3314      	adds	r3, #20
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00d      	beq.n	800b064 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b048:	4b09      	ldr	r3, [pc, #36]	; (800b070 <low_level_input+0x164>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b050:	3314      	adds	r3, #20
 800b052:	2280      	movs	r2, #128	; 0x80
 800b054:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b056:	4b06      	ldr	r3, [pc, #24]	; (800b070 <low_level_input+0x164>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b05e:	3308      	adds	r3, #8
 800b060:	2200      	movs	r2, #0
 800b062:	601a      	str	r2, [r3, #0]
  }
  return p;
 800b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b066:	4618      	mov	r0, r3
 800b068:	3730      	adds	r7, #48	; 0x30
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20009a64 	.word	0x20009a64

0800b074 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b080:	4b12      	ldr	r3, [pc, #72]	; (800b0cc <ethernetif_input+0x58>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f04f 31ff 	mov.w	r1, #4294967295
 800b088:	4618      	mov	r0, r3
 800b08a:	f000 fcc3 	bl	800ba14 <osSemaphoreAcquire>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1f5      	bne.n	800b080 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800b094:	480e      	ldr	r0, [pc, #56]	; (800b0d0 <ethernetif_input+0x5c>)
 800b096:	f013 fc63 	bl	801e960 <sys_mutex_lock>
        p = low_level_input( netif );
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f7ff ff36 	bl	800af0c <low_level_input>
 800b0a0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00a      	beq.n	800b0be <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	68f9      	ldr	r1, [r7, #12]
 800b0ae:	68b8      	ldr	r0, [r7, #8]
 800b0b0:	4798      	blx	r3
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800b0b8:	68b8      	ldr	r0, [r7, #8]
 800b0ba:	f008 f813 	bl	80130e4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800b0be:	4804      	ldr	r0, [pc, #16]	; (800b0d0 <ethernetif_input+0x5c>)
 800b0c0:	f013 fc5d 	bl	801e97e <sys_mutex_unlock>
      } while(p!=NULL);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1e4      	bne.n	800b094 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b0ca:	e7d9      	b.n	800b080 <ethernetif_input+0xc>
 800b0cc:	20000184 	.word	0x20000184
 800b0d0:	2000b2bc 	.word	0x2000b2bc

0800b0d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <ethernetif_init+0x1c>
 800b0e2:	4b0e      	ldr	r3, [pc, #56]	; (800b11c <ethernetif_init+0x48>)
 800b0e4:	f240 2233 	movw	r2, #563	; 0x233
 800b0e8:	490d      	ldr	r1, [pc, #52]	; (800b120 <ethernetif_init+0x4c>)
 800b0ea:	480e      	ldr	r0, [pc, #56]	; (800b124 <ethernetif_init+0x50>)
 800b0ec:	f014 fd64 	bl	801fbb8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2273      	movs	r2, #115	; 0x73
 800b0f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2274      	movs	r2, #116	; 0x74
 800b0fc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a09      	ldr	r2, [pc, #36]	; (800b128 <ethernetif_init+0x54>)
 800b104:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a08      	ldr	r2, [pc, #32]	; (800b12c <ethernetif_init+0x58>)
 800b10a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff fd8b 	bl	800ac28 <low_level_init>

  return ERR_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	08020ee4 	.word	0x08020ee4
 800b120:	08020f00 	.word	0x08020f00
 800b124:	08020f10 	.word	0x08020f10
 800b128:	0801c985 	.word	0x0801c985
 800b12c:	0800add1 	.word	0x0800add1

0800b130 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b134:	f7f8 fc42 	bl	80039bc <HAL_GetTick>
 800b138:	4603      	mov	r3, r0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	bd80      	pop	{r7, pc}
	...

0800b140 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b150:	f107 0308 	add.w	r3, r7, #8
 800b154:	461a      	mov	r2, r3
 800b156:	2101      	movs	r1, #1
 800b158:	4816      	ldr	r0, [pc, #88]	; (800b1b4 <ethernetif_set_link+0x74>)
 800b15a:	f7fa f9b4 	bl	80054c6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	f003 0304 	and.w	r3, r3, #4
 800b164:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b16e:	f003 0304 	and.w	r3, r3, #4
 800b172:	2b00      	cmp	r3, #0
 800b174:	d108      	bne.n	800b188 <ethernetif_set_link+0x48>
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d005      	beq.n	800b188 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4618      	mov	r0, r3
 800b182:	f007 fb99 	bl	80128b8 <netif_set_link_up>
 800b186:	e011      	b.n	800b1ac <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b190:	089b      	lsrs	r3, r3, #2
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d007      	beq.n	800b1ac <ethernetif_set_link+0x6c>
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d104      	bne.n	800b1ac <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f007 fbbe 	bl	8012928 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800b1ac:	20c8      	movs	r0, #200	; 0xc8
 800b1ae:	f000 f9be 	bl	800b52e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b1b2:	e7cd      	b.n	800b150 <ethernetif_set_link+0x10>
 800b1b4:	20009a64 	.word	0x20009a64

0800b1b8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b1ce:	089b      	lsrs	r3, r3, #2
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d05d      	beq.n	800b296 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b1da:	4b34      	ldr	r3, [pc, #208]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d03f      	beq.n	800b262 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b1e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	4830      	ldr	r0, [pc, #192]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b1ea:	f7fa f9d4 	bl	8005596 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b1ee:	f7f8 fbe5 	bl	80039bc <HAL_GetTick>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b1f6:	f107 0308 	add.w	r3, r7, #8
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	2101      	movs	r1, #1
 800b1fe:	482b      	ldr	r0, [pc, #172]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b200:	f7fa f961 	bl	80054c6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b204:	f7f8 fbda 	bl	80039bc <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b212:	d828      	bhi.n	800b266 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	f003 0320 	and.w	r3, r3, #32
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0eb      	beq.n	800b1f6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b21e:	f107 0308 	add.w	r3, r7, #8
 800b222:	461a      	mov	r2, r3
 800b224:	2110      	movs	r1, #16
 800b226:	4821      	ldr	r0, [pc, #132]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b228:	f7fa f94d 	bl	80054c6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	f003 0304 	and.w	r3, r3, #4
 800b232:	2b00      	cmp	r3, #0
 800b234:	d004      	beq.n	800b240 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b236:	4b1d      	ldr	r3, [pc, #116]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b23c:	60da      	str	r2, [r3, #12]
 800b23e:	e002      	b.n	800b246 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b240:	4b1a      	ldr	r3, [pc, #104]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b242:	2200      	movs	r2, #0
 800b244:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	f003 0302 	and.w	r3, r3, #2
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b250:	4b16      	ldr	r3, [pc, #88]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b252:	2200      	movs	r2, #0
 800b254:	609a      	str	r2, [r3, #8]
 800b256:	e016      	b.n	800b286 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b258:	4b14      	ldr	r3, [pc, #80]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b25a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b25e:	609a      	str	r2, [r3, #8]
 800b260:	e011      	b.n	800b286 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b262:	bf00      	nop
 800b264:	e000      	b.n	800b268 <ethernetif_update_config+0xb0>
          goto error;
 800b266:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b268:	4b10      	ldr	r3, [pc, #64]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	08db      	lsrs	r3, r3, #3
 800b26e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b270:	4b0e      	ldr	r3, [pc, #56]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	085b      	lsrs	r3, r3, #1
 800b276:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b278:	4313      	orrs	r3, r2
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	461a      	mov	r2, r3
 800b27e:	2100      	movs	r1, #0
 800b280:	480a      	ldr	r0, [pc, #40]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b282:	f7fa f988 	bl	8005596 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b286:	2100      	movs	r1, #0
 800b288:	4808      	ldr	r0, [pc, #32]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b28a:	f7fa fa49 	bl	8005720 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b28e:	4807      	ldr	r0, [pc, #28]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b290:	f7fa f9e7 	bl	8005662 <HAL_ETH_Start>
 800b294:	e002      	b.n	800b29c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b296:	4805      	ldr	r0, [pc, #20]	; (800b2ac <ethernetif_update_config+0xf4>)
 800b298:	f7fa fa12 	bl	80056c0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 f807 	bl	800b2b0 <ethernetif_notify_conn_changed>
}
 800b2a2:	bf00      	nop
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20009a64 	.word	0x20009a64

0800b2b0 <ethernetif_notify_conn_changed>:
 * @brief  This function notify user about link status changement.
 * @param  netif: the network interface
 * @retval None
 */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <__NVIC_SetPriority>:
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	6039      	str	r1, [r7, #0]
 800b2ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b2d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	db0a      	blt.n	800b2ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	490c      	ldr	r1, [pc, #48]	; (800b310 <__NVIC_SetPriority+0x4c>)
 800b2de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2e2:	0112      	lsls	r2, r2, #4
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	440b      	add	r3, r1
 800b2e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b2ec:	e00a      	b.n	800b304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	4908      	ldr	r1, [pc, #32]	; (800b314 <__NVIC_SetPriority+0x50>)
 800b2f4:	79fb      	ldrb	r3, [r7, #7]
 800b2f6:	f003 030f 	and.w	r3, r3, #15
 800b2fa:	3b04      	subs	r3, #4
 800b2fc:	0112      	lsls	r2, r2, #4
 800b2fe:	b2d2      	uxtb	r2, r2
 800b300:	440b      	add	r3, r1
 800b302:	761a      	strb	r2, [r3, #24]
}
 800b304:	bf00      	nop
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	e000e100 	.word	0xe000e100
 800b314:	e000ed00 	.word	0xe000ed00

0800b318 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b318:	b580      	push	{r7, lr}
 800b31a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b31c:	4b05      	ldr	r3, [pc, #20]	; (800b334 <SysTick_Handler+0x1c>)
 800b31e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b320:	f002 fdfa 	bl	800df18 <xTaskGetSchedulerState>
 800b324:	4603      	mov	r3, r0
 800b326:	2b01      	cmp	r3, #1
 800b328:	d001      	beq.n	800b32e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b32a:	f003 fd9d 	bl	800ee68 <xPortSysTickHandler>
  }
}
 800b32e:	bf00      	nop
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	e000e010 	.word	0xe000e010

0800b338 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b33c:	2100      	movs	r1, #0
 800b33e:	f06f 0004 	mvn.w	r0, #4
 800b342:	f7ff ffbf 	bl	800b2c4 <__NVIC_SetPriority>
#endif
}
 800b346:	bf00      	nop
 800b348:	bd80      	pop	{r7, pc}
	...

0800b34c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b352:	f3ef 8305 	mrs	r3, IPSR
 800b356:	603b      	str	r3, [r7, #0]
  return(result);
 800b358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b35e:	f06f 0305 	mvn.w	r3, #5
 800b362:	607b      	str	r3, [r7, #4]
 800b364:	e00c      	b.n	800b380 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b366:	4b0a      	ldr	r3, [pc, #40]	; (800b390 <osKernelInitialize+0x44>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d105      	bne.n	800b37a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b36e:	4b08      	ldr	r3, [pc, #32]	; (800b390 <osKernelInitialize+0x44>)
 800b370:	2201      	movs	r2, #1
 800b372:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b374:	2300      	movs	r3, #0
 800b376:	607b      	str	r3, [r7, #4]
 800b378:	e002      	b.n	800b380 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b37a:	f04f 33ff 	mov.w	r3, #4294967295
 800b37e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b380:	687b      	ldr	r3, [r7, #4]
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	20000188 	.word	0x20000188

0800b394 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b39a:	f3ef 8305 	mrs	r3, IPSR
 800b39e:	603b      	str	r3, [r7, #0]
  return(result);
 800b3a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <osKernelStart+0x1a>
    stat = osErrorISR;
 800b3a6:	f06f 0305 	mvn.w	r3, #5
 800b3aa:	607b      	str	r3, [r7, #4]
 800b3ac:	e010      	b.n	800b3d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b3ae:	4b0b      	ldr	r3, [pc, #44]	; (800b3dc <osKernelStart+0x48>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d109      	bne.n	800b3ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b3b6:	f7ff ffbf 	bl	800b338 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b3ba:	4b08      	ldr	r3, [pc, #32]	; (800b3dc <osKernelStart+0x48>)
 800b3bc:	2202      	movs	r2, #2
 800b3be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b3c0:	f002 f92c 	bl	800d61c <vTaskStartScheduler>
      stat = osOK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	607b      	str	r3, [r7, #4]
 800b3c8:	e002      	b.n	800b3d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b3d0:	687b      	ldr	r3, [r7, #4]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20000188 	.word	0x20000188

0800b3e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e6:	f3ef 8305 	mrs	r3, IPSR
 800b3ea:	603b      	str	r3, [r7, #0]
  return(result);
 800b3ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b3f2:	f002 fa3f 	bl	800d874 <xTaskGetTickCountFromISR>
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	e002      	b.n	800b400 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b3fa:	f002 fa2b 	bl	800d854 <xTaskGetTickCount>
 800b3fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b400:	687b      	ldr	r3, [r7, #4]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b08e      	sub	sp, #56	; 0x38
 800b40e:	af04      	add	r7, sp, #16
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b41a:	f3ef 8305 	mrs	r3, IPSR
 800b41e:	617b      	str	r3, [r7, #20]
  return(result);
 800b420:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b422:	2b00      	cmp	r3, #0
 800b424:	d17e      	bne.n	800b524 <osThreadNew+0x11a>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d07b      	beq.n	800b524 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b42c:	2380      	movs	r3, #128	; 0x80
 800b42e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b430:	2318      	movs	r3, #24
 800b432:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b434:	2300      	movs	r3, #0
 800b436:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b438:	f04f 33ff 	mov.w	r3, #4294967295
 800b43c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d045      	beq.n	800b4d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <osThreadNew+0x48>
        name = attr->name;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d002      	beq.n	800b460 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d008      	beq.n	800b478 <osThreadNew+0x6e>
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	2b38      	cmp	r3, #56	; 0x38
 800b46a:	d805      	bhi.n	800b478 <osThreadNew+0x6e>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <osThreadNew+0x72>
        return (NULL);
 800b478:	2300      	movs	r3, #0
 800b47a:	e054      	b.n	800b526 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	695b      	ldr	r3, [r3, #20]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d003      	beq.n	800b48c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	089b      	lsrs	r3, r3, #2
 800b48a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00e      	beq.n	800b4b2 <osThreadNew+0xa8>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	2bbb      	cmp	r3, #187	; 0xbb
 800b49a:	d90a      	bls.n	800b4b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d006      	beq.n	800b4b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <osThreadNew+0xa8>
        mem = 1;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	61bb      	str	r3, [r7, #24]
 800b4b0:	e010      	b.n	800b4d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10c      	bne.n	800b4d4 <osThreadNew+0xca>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d108      	bne.n	800b4d4 <osThreadNew+0xca>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d104      	bne.n	800b4d4 <osThreadNew+0xca>
          mem = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	61bb      	str	r3, [r7, #24]
 800b4ce:	e001      	b.n	800b4d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d110      	bne.n	800b4fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b4e2:	9202      	str	r2, [sp, #8]
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	6a3a      	ldr	r2, [r7, #32]
 800b4ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f001 fea7 	bl	800d244 <xTaskCreateStatic>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	613b      	str	r3, [r7, #16]
 800b4fa:	e013      	b.n	800b524 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d110      	bne.n	800b524 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	b29a      	uxth	r2, r3
 800b506:	f107 0310 	add.w	r3, r7, #16
 800b50a:	9301      	str	r3, [sp, #4]
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f001 fef2 	bl	800d2fe <xTaskCreate>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d001      	beq.n	800b524 <osThreadNew+0x11a>
            hTask = NULL;
 800b520:	2300      	movs	r3, #0
 800b522:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b524:	693b      	ldr	r3, [r7, #16]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3728      	adds	r7, #40	; 0x28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b536:	f3ef 8305 	mrs	r3, IPSR
 800b53a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b53c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <osDelay+0x1c>
    stat = osErrorISR;
 800b542:	f06f 0305 	mvn.w	r3, #5
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	e007      	b.n	800b55a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <osDelay+0x2c>
      vTaskDelay(ticks);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f002 f82d 	bl	800d5b4 <vTaskDelay>
    }
  }

  return (stat);
 800b55a:	68fb      	ldr	r3, [r7, #12]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f003 fa99 	bl	800eaa4 <pvTimerGetTimerID>
 800b572:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d005      	beq.n	800b586 <TimerCallback+0x22>
    callb->func (callb->arg);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	6852      	ldr	r2, [r2, #4]
 800b582:	4610      	mov	r0, r2
 800b584:	4798      	blx	r3
  }
}
 800b586:	bf00      	nop
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b590:	b580      	push	{r7, lr}
 800b592:	b08c      	sub	sp, #48	; 0x30
 800b594:	af02      	add	r7, sp, #8
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	607a      	str	r2, [r7, #4]
 800b59a:	603b      	str	r3, [r7, #0]
 800b59c:	460b      	mov	r3, r1
 800b59e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5a4:	f3ef 8305 	mrs	r3, IPSR
 800b5a8:	613b      	str	r3, [r7, #16]
  return(result);
 800b5aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d163      	bne.n	800b678 <osTimerNew+0xe8>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d060      	beq.n	800b678 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b5b6:	2008      	movs	r0, #8
 800b5b8:	f003 fce6 	bl	800ef88 <pvPortMalloc>
 800b5bc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d059      	beq.n	800b678 <osTimerNew+0xe8>
      callb->func = func;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b5d0:	7afb      	ldrb	r3, [r7, #11]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d102      	bne.n	800b5dc <osTimerNew+0x4c>
        reload = pdFALSE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	61fb      	str	r3, [r7, #28]
 800b5da:	e001      	b.n	800b5e0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d01c      	beq.n	800b62a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <osTimerNew+0x6e>
          name = attr->name;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d006      	beq.n	800b614 <osTimerNew+0x84>
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	2b2b      	cmp	r3, #43	; 0x2b
 800b60c:	d902      	bls.n	800b614 <osTimerNew+0x84>
          mem = 1;
 800b60e:	2301      	movs	r3, #1
 800b610:	61bb      	str	r3, [r7, #24]
 800b612:	e00c      	b.n	800b62e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d108      	bne.n	800b62e <osTimerNew+0x9e>
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d104      	bne.n	800b62e <osTimerNew+0x9e>
            mem = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	61bb      	str	r3, [r7, #24]
 800b628:	e001      	b.n	800b62e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d10c      	bne.n	800b64e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	4b12      	ldr	r3, [pc, #72]	; (800b684 <osTimerNew+0xf4>)
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	69fa      	ldr	r2, [r7, #28]
 800b642:	2101      	movs	r1, #1
 800b644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b646:	f002 feae 	bl	800e3a6 <xTimerCreateStatic>
 800b64a:	6238      	str	r0, [r7, #32]
 800b64c:	e00b      	b.n	800b666 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d108      	bne.n	800b666 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b654:	4b0b      	ldr	r3, [pc, #44]	; (800b684 <osTimerNew+0xf4>)
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	69fa      	ldr	r2, [r7, #28]
 800b65c:	2101      	movs	r1, #1
 800b65e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b660:	f002 fe80 	bl	800e364 <xTimerCreate>
 800b664:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d105      	bne.n	800b678 <osTimerNew+0xe8>
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <osTimerNew+0xe8>
        vPortFree (callb);
 800b672:	6978      	ldr	r0, [r7, #20]
 800b674:	f003 fd54 	bl	800f120 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b678:	6a3b      	ldr	r3, [r7, #32]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3728      	adds	r7, #40	; 0x28
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	0800b565 	.word	0x0800b565

0800b688 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af02      	add	r7, sp, #8
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b696:	f3ef 8305 	mrs	r3, IPSR
 800b69a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b69c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d003      	beq.n	800b6aa <osTimerStart+0x22>
    stat = osErrorISR;
 800b6a2:	f06f 0305 	mvn.w	r3, #5
 800b6a6:	617b      	str	r3, [r7, #20]
 800b6a8:	e017      	b.n	800b6da <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d103      	bne.n	800b6b8 <osTimerStart+0x30>
    stat = osErrorParameter;
 800b6b0:	f06f 0303 	mvn.w	r3, #3
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	e010      	b.n	800b6da <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	2104      	movs	r1, #4
 800b6c2:	6938      	ldr	r0, [r7, #16]
 800b6c4:	f002 fee8 	bl	800e498 <xTimerGenericCommand>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d102      	bne.n	800b6d4 <osTimerStart+0x4c>
      stat = osOK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]
 800b6d2:	e002      	b.n	800b6da <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b6d4:	f06f 0302 	mvn.w	r3, #2
 800b6d8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b6da:	697b      	ldr	r3, [r7, #20]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b088      	sub	sp, #32
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6f0:	f3ef 8305 	mrs	r3, IPSR
 800b6f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6f6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d174      	bne.n	800b7e6 <osMutexNew+0x102>
    if (attr != NULL) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <osMutexNew+0x26>
      type = attr->attr_bits;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	61bb      	str	r3, [r7, #24]
 800b708:	e001      	b.n	800b70e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b70a:	2300      	movs	r3, #0
 800b70c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	f003 0301 	and.w	r3, r3, #1
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <osMutexNew+0x3a>
      rmtx = 1U;
 800b718:	2301      	movs	r3, #1
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	e001      	b.n	800b722 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b71e:	2300      	movs	r3, #0
 800b720:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	f003 0308 	and.w	r3, r3, #8
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d15c      	bne.n	800b7e6 <osMutexNew+0x102>
      mem = -1;
 800b72c:	f04f 33ff 	mov.w	r3, #4294967295
 800b730:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d015      	beq.n	800b764 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d006      	beq.n	800b74e <osMutexNew+0x6a>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	2b4f      	cmp	r3, #79	; 0x4f
 800b746:	d902      	bls.n	800b74e <osMutexNew+0x6a>
          mem = 1;
 800b748:	2301      	movs	r3, #1
 800b74a:	613b      	str	r3, [r7, #16]
 800b74c:	e00c      	b.n	800b768 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d108      	bne.n	800b768 <osMutexNew+0x84>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d104      	bne.n	800b768 <osMutexNew+0x84>
            mem = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	613b      	str	r3, [r7, #16]
 800b762:	e001      	b.n	800b768 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b764:	2300      	movs	r3, #0
 800b766:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d112      	bne.n	800b794 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d007      	beq.n	800b784 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	4619      	mov	r1, r3
 800b77a:	2004      	movs	r0, #4
 800b77c:	f000 fdd1 	bl	800c322 <xQueueCreateMutexStatic>
 800b780:	61f8      	str	r0, [r7, #28]
 800b782:	e016      	b.n	800b7b2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	4619      	mov	r1, r3
 800b78a:	2001      	movs	r0, #1
 800b78c:	f000 fdc9 	bl	800c322 <xQueueCreateMutexStatic>
 800b790:	61f8      	str	r0, [r7, #28]
 800b792:	e00e      	b.n	800b7b2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10b      	bne.n	800b7b2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d004      	beq.n	800b7aa <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b7a0:	2004      	movs	r0, #4
 800b7a2:	f000 fda6 	bl	800c2f2 <xQueueCreateMutex>
 800b7a6:	61f8      	str	r0, [r7, #28]
 800b7a8:	e003      	b.n	800b7b2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	f000 fda1 	bl	800c2f2 <xQueueCreateMutex>
 800b7b0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00c      	beq.n	800b7d2 <osMutexNew+0xee>
        if (attr != NULL) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <osMutexNew+0xe2>
          name = attr->name;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	e001      	b.n	800b7ca <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b7ca:	68f9      	ldr	r1, [r7, #12]
 800b7cc:	69f8      	ldr	r0, [r7, #28]
 800b7ce:	f001 fcb1 	bl	800d134 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d006      	beq.n	800b7e6 <osMutexNew+0x102>
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	f043 0301 	orr.w	r3, r3, #1
 800b7e4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b7e6:	69fb      	ldr	r3, [r7, #28]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3720      	adds	r7, #32
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f023 0301 	bic.w	r3, r3, #1
 800b800:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b80e:	f3ef 8305 	mrs	r3, IPSR
 800b812:	60bb      	str	r3, [r7, #8]
  return(result);
 800b814:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b816:	2b00      	cmp	r3, #0
 800b818:	d003      	beq.n	800b822 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b81a:	f06f 0305 	mvn.w	r3, #5
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	e02c      	b.n	800b87c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d103      	bne.n	800b830 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b828:	f06f 0303 	mvn.w	r3, #3
 800b82c:	617b      	str	r3, [r7, #20]
 800b82e:	e025      	b.n	800b87c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d011      	beq.n	800b85a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b836:	6839      	ldr	r1, [r7, #0]
 800b838:	6938      	ldr	r0, [r7, #16]
 800b83a:	f000 fdc1 	bl	800c3c0 <xQueueTakeMutexRecursive>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b01      	cmp	r3, #1
 800b842:	d01b      	beq.n	800b87c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b84a:	f06f 0301 	mvn.w	r3, #1
 800b84e:	617b      	str	r3, [r7, #20]
 800b850:	e014      	b.n	800b87c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b852:	f06f 0302 	mvn.w	r3, #2
 800b856:	617b      	str	r3, [r7, #20]
 800b858:	e010      	b.n	800b87c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6938      	ldr	r0, [r7, #16]
 800b85e:	f001 f955 	bl	800cb0c <xQueueSemaphoreTake>
 800b862:	4603      	mov	r3, r0
 800b864:	2b01      	cmp	r3, #1
 800b866:	d009      	beq.n	800b87c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b86e:	f06f 0301 	mvn.w	r3, #1
 800b872:	617b      	str	r3, [r7, #20]
 800b874:	e002      	b.n	800b87c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b876:	f06f 0302 	mvn.w	r3, #2
 800b87a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b87c:	697b      	ldr	r3, [r7, #20]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b886:	b580      	push	{r7, lr}
 800b888:	b086      	sub	sp, #24
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f023 0301 	bic.w	r3, r3, #1
 800b894:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a2:	f3ef 8305 	mrs	r3, IPSR
 800b8a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8a8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b8ae:	f06f 0305 	mvn.w	r3, #5
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	e01f      	b.n	800b8f6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d103      	bne.n	800b8c4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b8bc:	f06f 0303 	mvn.w	r3, #3
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	e018      	b.n	800b8f6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d009      	beq.n	800b8de <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b8ca:	6938      	ldr	r0, [r7, #16]
 800b8cc:	f000 fd44 	bl	800c358 <xQueueGiveMutexRecursive>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d00f      	beq.n	800b8f6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b8d6:	f06f 0302 	mvn.w	r3, #2
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	e00b      	b.n	800b8f6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b8de:	2300      	movs	r3, #0
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	6938      	ldr	r0, [r7, #16]
 800b8e6:	f000 fe0b 	bl	800c500 <xQueueGenericSend>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d002      	beq.n	800b8f6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b8f0:	f06f 0302 	mvn.w	r3, #2
 800b8f4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b8f6:	697b      	ldr	r3, [r7, #20]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b900:	b580      	push	{r7, lr}
 800b902:	b08a      	sub	sp, #40	; 0x28
 800b904:	af02      	add	r7, sp, #8
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b90c:	2300      	movs	r3, #0
 800b90e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b910:	f3ef 8305 	mrs	r3, IPSR
 800b914:	613b      	str	r3, [r7, #16]
  return(result);
 800b916:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d175      	bne.n	800ba08 <osSemaphoreNew+0x108>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d072      	beq.n	800ba08 <osSemaphoreNew+0x108>
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	429a      	cmp	r2, r3
 800b928:	d86e      	bhi.n	800ba08 <osSemaphoreNew+0x108>
    mem = -1;
 800b92a:	f04f 33ff 	mov.w	r3, #4294967295
 800b92e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d015      	beq.n	800b962 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d006      	beq.n	800b94c <osSemaphoreNew+0x4c>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	2b4f      	cmp	r3, #79	; 0x4f
 800b944:	d902      	bls.n	800b94c <osSemaphoreNew+0x4c>
        mem = 1;
 800b946:	2301      	movs	r3, #1
 800b948:	61bb      	str	r3, [r7, #24]
 800b94a:	e00c      	b.n	800b966 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d108      	bne.n	800b966 <osSemaphoreNew+0x66>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d104      	bne.n	800b966 <osSemaphoreNew+0x66>
          mem = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	61bb      	str	r3, [r7, #24]
 800b960:	e001      	b.n	800b966 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96c:	d04c      	beq.n	800ba08 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d128      	bne.n	800b9c6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d10a      	bne.n	800b990 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	2203      	movs	r2, #3
 800b980:	9200      	str	r2, [sp, #0]
 800b982:	2200      	movs	r2, #0
 800b984:	2100      	movs	r1, #0
 800b986:	2001      	movs	r0, #1
 800b988:	f000 fbc4 	bl	800c114 <xQueueGenericCreateStatic>
 800b98c:	61f8      	str	r0, [r7, #28]
 800b98e:	e005      	b.n	800b99c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b990:	2203      	movs	r2, #3
 800b992:	2100      	movs	r1, #0
 800b994:	2001      	movs	r0, #1
 800b996:	f000 fc35 	bl	800c204 <xQueueGenericCreate>
 800b99a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d022      	beq.n	800b9e8 <osSemaphoreNew+0xe8>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01f      	beq.n	800b9e8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	69f8      	ldr	r0, [r7, #28]
 800b9b0:	f000 fda6 	bl	800c500 <xQueueGenericSend>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d016      	beq.n	800b9e8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b9ba:	69f8      	ldr	r0, [r7, #28]
 800b9bc:	f001 fa6e 	bl	800ce9c <vQueueDelete>
            hSemaphore = NULL;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	61fb      	str	r3, [r7, #28]
 800b9c4:	e010      	b.n	800b9e8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d108      	bne.n	800b9de <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	68b9      	ldr	r1, [r7, #8]
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 fd29 	bl	800c42c <xQueueCreateCountingSemaphoreStatic>
 800b9da:	61f8      	str	r0, [r7, #28]
 800b9dc:	e004      	b.n	800b9e8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 fd5a 	bl	800c49a <xQueueCreateCountingSemaphore>
 800b9e6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00c      	beq.n	800ba08 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d003      	beq.n	800b9fc <osSemaphoreNew+0xfc>
          name = attr->name;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	617b      	str	r3, [r7, #20]
 800b9fa:	e001      	b.n	800ba00 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ba00:	6979      	ldr	r1, [r7, #20]
 800ba02:	69f8      	ldr	r0, [r7, #28]
 800ba04:	f001 fb96 	bl	800d134 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ba08:	69fb      	ldr	r3, [r7, #28]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3720      	adds	r7, #32
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d103      	bne.n	800ba34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ba2c:	f06f 0303 	mvn.w	r3, #3
 800ba30:	617b      	str	r3, [r7, #20]
 800ba32:	e039      	b.n	800baa8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba34:	f3ef 8305 	mrs	r3, IPSR
 800ba38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d022      	beq.n	800ba86 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ba46:	f06f 0303 	mvn.w	r3, #3
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	e02c      	b.n	800baa8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ba52:	f107 0308 	add.w	r3, r7, #8
 800ba56:	461a      	mov	r2, r3
 800ba58:	2100      	movs	r1, #0
 800ba5a:	6938      	ldr	r0, [r7, #16]
 800ba5c:	f001 f962 	bl	800cd24 <xQueueReceiveFromISR>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d003      	beq.n	800ba6e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ba66:	f06f 0302 	mvn.w	r3, #2
 800ba6a:	617b      	str	r3, [r7, #20]
 800ba6c:	e01c      	b.n	800baa8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d019      	beq.n	800baa8 <osSemaphoreAcquire+0x94>
 800ba74:	4b0f      	ldr	r3, [pc, #60]	; (800bab4 <osSemaphoreAcquire+0xa0>)
 800ba76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba7a:	601a      	str	r2, [r3, #0]
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	e010      	b.n	800baa8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6938      	ldr	r0, [r7, #16]
 800ba8a:	f001 f83f 	bl	800cb0c <xQueueSemaphoreTake>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d009      	beq.n	800baa8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ba9a:	f06f 0301 	mvn.w	r3, #1
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	e002      	b.n	800baa8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800baa2:	f06f 0302 	mvn.w	r3, #2
 800baa6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800baa8:	697b      	ldr	r3, [r7, #20]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3718      	adds	r7, #24
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	e000ed04 	.word	0xe000ed04

0800bab8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d103      	bne.n	800bad6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bace:	f06f 0303 	mvn.w	r3, #3
 800bad2:	617b      	str	r3, [r7, #20]
 800bad4:	e02c      	b.n	800bb30 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bad6:	f3ef 8305 	mrs	r3, IPSR
 800bada:	60fb      	str	r3, [r7, #12]
  return(result);
 800badc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d01a      	beq.n	800bb18 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bae6:	f107 0308 	add.w	r3, r7, #8
 800baea:	4619      	mov	r1, r3
 800baec:	6938      	ldr	r0, [r7, #16]
 800baee:	f000 fea0 	bl	800c832 <xQueueGiveFromISR>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d003      	beq.n	800bb00 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800baf8:	f06f 0302 	mvn.w	r3, #2
 800bafc:	617b      	str	r3, [r7, #20]
 800bafe:	e017      	b.n	800bb30 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d014      	beq.n	800bb30 <osSemaphoreRelease+0x78>
 800bb06:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <osSemaphoreRelease+0x84>)
 800bb08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	e00b      	b.n	800bb30 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bb18:	2300      	movs	r3, #0
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	6938      	ldr	r0, [r7, #16]
 800bb20:	f000 fcee 	bl	800c500 <xQueueGenericSend>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d002      	beq.n	800bb30 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800bb2a:	f06f 0302 	mvn.w	r3, #2
 800bb2e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bb30:	697b      	ldr	r3, [r7, #20]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3718      	adds	r7, #24
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	e000ed04 	.word	0xe000ed04

0800bb40 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb4c:	f3ef 8305 	mrs	r3, IPSR
 800bb50:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb52:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800bb58:	f06f 0305 	mvn.w	r3, #5
 800bb5c:	617b      	str	r3, [r7, #20]
 800bb5e:	e00e      	b.n	800bb7e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d103      	bne.n	800bb6e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800bb66:	f06f 0303 	mvn.w	r3, #3
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	e007      	b.n	800bb7e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800bb6e:	6938      	ldr	r0, [r7, #16]
 800bb70:	f001 fb0a 	bl	800d188 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800bb74:	2300      	movs	r3, #0
 800bb76:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800bb78:	6938      	ldr	r0, [r7, #16]
 800bb7a:	f001 f98f 	bl	800ce9c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800bb7e:	697b      	ldr	r3, [r7, #20]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08a      	sub	sp, #40	; 0x28
 800bb8c:	af02      	add	r7, sp, #8
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bb94:	2300      	movs	r3, #0
 800bb96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb98:	f3ef 8305 	mrs	r3, IPSR
 800bb9c:	613b      	str	r3, [r7, #16]
  return(result);
 800bb9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d15f      	bne.n	800bc64 <osMessageQueueNew+0xdc>
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d05c      	beq.n	800bc64 <osMessageQueueNew+0xdc>
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d059      	beq.n	800bc64 <osMessageQueueNew+0xdc>
    mem = -1;
 800bbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d029      	beq.n	800bc10 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d012      	beq.n	800bbea <osMessageQueueNew+0x62>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	2b4f      	cmp	r3, #79	; 0x4f
 800bbca:	d90e      	bls.n	800bbea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00a      	beq.n	800bbea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	695a      	ldr	r2, [r3, #20]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68b9      	ldr	r1, [r7, #8]
 800bbdc:	fb01 f303 	mul.w	r3, r1, r3
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d302      	bcc.n	800bbea <osMessageQueueNew+0x62>
        mem = 1;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	61bb      	str	r3, [r7, #24]
 800bbe8:	e014      	b.n	800bc14 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d110      	bne.n	800bc14 <osMessageQueueNew+0x8c>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10c      	bne.n	800bc14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d108      	bne.n	800bc14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d104      	bne.n	800bc14 <osMessageQueueNew+0x8c>
          mem = 0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	61bb      	str	r3, [r7, #24]
 800bc0e:	e001      	b.n	800bc14 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d10b      	bne.n	800bc32 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	691a      	ldr	r2, [r3, #16]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	2100      	movs	r1, #0
 800bc24:	9100      	str	r1, [sp, #0]
 800bc26:	68b9      	ldr	r1, [r7, #8]
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f000 fa73 	bl	800c114 <xQueueGenericCreateStatic>
 800bc2e:	61f8      	str	r0, [r7, #28]
 800bc30:	e008      	b.n	800bc44 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d105      	bne.n	800bc44 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bc38:	2200      	movs	r2, #0
 800bc3a:	68b9      	ldr	r1, [r7, #8]
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 fae1 	bl	800c204 <xQueueGenericCreate>
 800bc42:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00c      	beq.n	800bc64 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d003      	beq.n	800bc58 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	617b      	str	r3, [r7, #20]
 800bc56:	e001      	b.n	800bc5c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bc5c:	6979      	ldr	r1, [r7, #20]
 800bc5e:	69f8      	ldr	r0, [r7, #28]
 800bc60:	f001 fa68 	bl	800d134 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bc64:	69fb      	ldr	r3, [r7, #28]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3720      	adds	r7, #32
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
	...

0800bc70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc88:	f3ef 8305 	mrs	r3, IPSR
 800bc8c:	617b      	str	r3, [r7, #20]
  return(result);
 800bc8e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d028      	beq.n	800bce6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <osMessageQueuePut+0x36>
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <osMessageQueuePut+0x36>
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bca6:	f06f 0303 	mvn.w	r3, #3
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	e038      	b.n	800bd20 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bcb2:	f107 0210 	add.w	r2, r7, #16
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	68b9      	ldr	r1, [r7, #8]
 800bcba:	69b8      	ldr	r0, [r7, #24]
 800bcbc:	f000 fd1e 	bl	800c6fc <xQueueGenericSendFromISR>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d003      	beq.n	800bcce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bcc6:	f06f 0302 	mvn.w	r3, #2
 800bcca:	61fb      	str	r3, [r7, #28]
 800bccc:	e028      	b.n	800bd20 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d025      	beq.n	800bd20 <osMessageQueuePut+0xb0>
 800bcd4:	4b15      	ldr	r3, [pc, #84]	; (800bd2c <osMessageQueuePut+0xbc>)
 800bcd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	e01c      	b.n	800bd20 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <osMessageQueuePut+0x82>
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d103      	bne.n	800bcfa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bcf2:	f06f 0303 	mvn.w	r3, #3
 800bcf6:	61fb      	str	r3, [r7, #28]
 800bcf8:	e012      	b.n	800bd20 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	683a      	ldr	r2, [r7, #0]
 800bcfe:	68b9      	ldr	r1, [r7, #8]
 800bd00:	69b8      	ldr	r0, [r7, #24]
 800bd02:	f000 fbfd 	bl	800c500 <xQueueGenericSend>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d009      	beq.n	800bd20 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d003      	beq.n	800bd1a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bd12:	f06f 0301 	mvn.w	r3, #1
 800bd16:	61fb      	str	r3, [r7, #28]
 800bd18:	e002      	b.n	800bd20 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bd1a:	f06f 0302 	mvn.w	r3, #2
 800bd1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bd20:	69fb      	ldr	r3, [r7, #28]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3720      	adds	r7, #32
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	e000ed04 	.word	0xe000ed04

0800bd30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b088      	sub	sp, #32
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
 800bd3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd46:	f3ef 8305 	mrs	r3, IPSR
 800bd4a:	617b      	str	r3, [r7, #20]
  return(result);
 800bd4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d028      	beq.n	800bda4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d005      	beq.n	800bd64 <osMessageQueueGet+0x34>
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <osMessageQueueGet+0x34>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d003      	beq.n	800bd6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bd64:	f06f 0303 	mvn.w	r3, #3
 800bd68:	61fb      	str	r3, [r7, #28]
 800bd6a:	e037      	b.n	800bddc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bd70:	f107 0310 	add.w	r3, r7, #16
 800bd74:	461a      	mov	r2, r3
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	69b8      	ldr	r0, [r7, #24]
 800bd7a:	f000 ffd3 	bl	800cd24 <xQueueReceiveFromISR>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d003      	beq.n	800bd8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bd84:	f06f 0302 	mvn.w	r3, #2
 800bd88:	61fb      	str	r3, [r7, #28]
 800bd8a:	e027      	b.n	800bddc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d024      	beq.n	800bddc <osMessageQueueGet+0xac>
 800bd92:	4b15      	ldr	r3, [pc, #84]	; (800bde8 <osMessageQueueGet+0xb8>)
 800bd94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd98:	601a      	str	r2, [r3, #0]
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	e01b      	b.n	800bddc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <osMessageQueueGet+0x80>
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d103      	bne.n	800bdb8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bdb0:	f06f 0303 	mvn.w	r3, #3
 800bdb4:	61fb      	str	r3, [r7, #28]
 800bdb6:	e011      	b.n	800bddc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	68b9      	ldr	r1, [r7, #8]
 800bdbc:	69b8      	ldr	r0, [r7, #24]
 800bdbe:	f000 fdc5 	bl	800c94c <xQueueReceive>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d009      	beq.n	800bddc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d003      	beq.n	800bdd6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bdce:	f06f 0301 	mvn.w	r3, #1
 800bdd2:	61fb      	str	r3, [r7, #28]
 800bdd4:	e002      	b.n	800bddc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bdd6:	f06f 0302 	mvn.w	r3, #2
 800bdda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bddc:	69fb      	ldr	r3, [r7, #28]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3720      	adds	r7, #32
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	e000ed04 	.word	0xe000ed04

0800bdec <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d102      	bne.n	800be04 <osMessageQueueGetCount+0x18>
    count = 0U;
 800bdfe:	2300      	movs	r3, #0
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	e00e      	b.n	800be22 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be04:	f3ef 8305 	mrs	r3, IPSR
 800be08:	60fb      	str	r3, [r7, #12]
  return(result);
 800be0a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d004      	beq.n	800be1a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800be10:	6938      	ldr	r0, [r7, #16]
 800be12:	f001 f825 	bl	800ce60 <uxQueueMessagesWaitingFromISR>
 800be16:	6178      	str	r0, [r7, #20]
 800be18:	e003      	b.n	800be22 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800be1a:	6938      	ldr	r0, [r7, #16]
 800be1c:	f001 f802 	bl	800ce24 <uxQueueMessagesWaiting>
 800be20:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800be22:	697b      	ldr	r3, [r7, #20]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be38:	f3ef 8305 	mrs	r3, IPSR
 800be3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800be3e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800be40:	2b00      	cmp	r3, #0
 800be42:	d003      	beq.n	800be4c <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800be44:	f06f 0305 	mvn.w	r3, #5
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	e00e      	b.n	800be6a <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d103      	bne.n	800be5a <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800be52:	f06f 0303 	mvn.w	r3, #3
 800be56:	617b      	str	r3, [r7, #20]
 800be58:	e007      	b.n	800be6a <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800be5a:	6938      	ldr	r0, [r7, #16]
 800be5c:	f001 f994 	bl	800d188 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800be60:	2300      	movs	r3, #0
 800be62:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800be64:	6938      	ldr	r0, [r7, #16]
 800be66:	f001 f819 	bl	800ce9c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800be6a:	697b      	ldr	r3, [r7, #20]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	4a07      	ldr	r2, [pc, #28]	; (800bea0 <vApplicationGetIdleTaskMemory+0x2c>)
 800be84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	4a06      	ldr	r2, [pc, #24]	; (800bea4 <vApplicationGetIdleTaskMemory+0x30>)
 800be8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2280      	movs	r2, #128	; 0x80
 800be90:	601a      	str	r2, [r3, #0]
}
 800be92:	bf00      	nop
 800be94:	3714      	adds	r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	2000018c 	.word	0x2000018c
 800bea4:	20000248 	.word	0x20000248

0800bea8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4a07      	ldr	r2, [pc, #28]	; (800bed4 <vApplicationGetTimerTaskMemory+0x2c>)
 800beb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	4a06      	ldr	r2, [pc, #24]	; (800bed8 <vApplicationGetTimerTaskMemory+0x30>)
 800bebe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bec6:	601a      	str	r2, [r3, #0]
}
 800bec8:	bf00      	nop
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	20000448 	.word	0x20000448
 800bed8:	20000504 	.word	0x20000504

0800bedc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f103 0208 	add.w	r2, r3, #8
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f04f 32ff 	mov.w	r2, #4294967295
 800bef4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f103 0208 	add.w	r2, r3, #8
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f103 0208 	add.w	r2, r3, #8
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf2a:	bf00      	nop
 800bf2c:	370c      	adds	r7, #12
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf36:	b480      	push	{r7}
 800bf38:	b085      	sub	sp, #20
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	1c5a      	adds	r2, r3, #1
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	601a      	str	r2, [r3, #0]
}
 800bf72:	bf00      	nop
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b085      	sub	sp, #20
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf94:	d103      	bne.n	800bf9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	60fb      	str	r3, [r7, #12]
 800bf9c:	e00c      	b.n	800bfb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	60fb      	str	r3, [r7, #12]
 800bfa4:	e002      	b.n	800bfac <vListInsert+0x2e>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	60fb      	str	r3, [r7, #12]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d2f6      	bcs.n	800bfa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	601a      	str	r2, [r3, #0]
}
 800bfe4:	bf00      	nop
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	6892      	ldr	r2, [r2, #8]
 800c006:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	6852      	ldr	r2, [r2, #4]
 800c010:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d103      	bne.n	800c024 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	1e5a      	subs	r2, r3, #1
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10a      	bne.n	800c06e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c06e:	f002 fe69 	bl	800ed44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07a:	68f9      	ldr	r1, [r7, #12]
 800c07c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c07e:	fb01 f303 	mul.w	r3, r1, r3
 800c082:	441a      	add	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2200      	movs	r2, #0
 800c08c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	68f9      	ldr	r1, [r7, #12]
 800c0a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0a4:	fb01 f303 	mul.w	r3, r1, r3
 800c0a8:	441a      	add	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	22ff      	movs	r2, #255	; 0xff
 800c0b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	22ff      	movs	r2, #255	; 0xff
 800c0ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d114      	bne.n	800c0ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d01a      	beq.n	800c102 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3310      	adds	r3, #16
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f001 fd4f 	bl	800db74 <xTaskRemoveFromEventList>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d012      	beq.n	800c102 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0dc:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <xQueueGenericReset+0xcc>)
 800c0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0e2:	601a      	str	r2, [r3, #0]
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	e009      	b.n	800c102 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3310      	adds	r3, #16
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff fef2 	bl	800bedc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3324      	adds	r3, #36	; 0x24
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff feed 	bl	800bedc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c102:	f002 fe4f 	bl	800eda4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c106:	2301      	movs	r3, #1
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	e000ed04 	.word	0xe000ed04

0800c114 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c114:	b580      	push	{r7, lr}
 800c116:	b08e      	sub	sp, #56	; 0x38
 800c118:	af02      	add	r7, sp, #8
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c13a:	bf00      	nop
 800c13c:	e7fe      	b.n	800c13c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <xQueueGenericCreateStatic+0x52>
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <xQueueGenericCreateStatic+0x56>
 800c166:	2301      	movs	r3, #1
 800c168:	e000      	b.n	800c16c <xQueueGenericCreateStatic+0x58>
 800c16a:	2300      	movs	r3, #0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	623b      	str	r3, [r7, #32]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d102      	bne.n	800c192 <xQueueGenericCreateStatic+0x7e>
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <xQueueGenericCreateStatic+0x82>
 800c192:	2301      	movs	r3, #1
 800c194:	e000      	b.n	800c198 <xQueueGenericCreateStatic+0x84>
 800c196:	2300      	movs	r3, #0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10a      	bne.n	800c1b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	61fb      	str	r3, [r7, #28]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1b2:	2350      	movs	r3, #80	; 0x50
 800c1b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b50      	cmp	r3, #80	; 0x50
 800c1ba:	d00a      	beq.n	800c1d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	61bb      	str	r3, [r7, #24]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c1d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00d      	beq.n	800c1fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	68b9      	ldr	r1, [r7, #8]
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f000 f83f 	bl	800c278 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3730      	adds	r7, #48	; 0x30
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c204:	b580      	push	{r7, lr}
 800c206:	b08a      	sub	sp, #40	; 0x28
 800c208:	af02      	add	r7, sp, #8
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	4613      	mov	r3, r2
 800c210:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10a      	bne.n	800c22e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	613b      	str	r3, [r7, #16]
}
 800c22a:	bf00      	nop
 800c22c:	e7fe      	b.n	800c22c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	fb02 f303 	mul.w	r3, r2, r3
 800c236:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	3350      	adds	r3, #80	; 0x50
 800c23c:	4618      	mov	r0, r3
 800c23e:	f002 fea3 	bl	800ef88 <pvPortMalloc>
 800c242:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d011      	beq.n	800c26e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	3350      	adds	r3, #80	; 0x50
 800c252:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c25c:	79fa      	ldrb	r2, [r7, #7]
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	4613      	mov	r3, r2
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	68b9      	ldr	r1, [r7, #8]
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f000 f805 	bl	800c278 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c26e:	69bb      	ldr	r3, [r7, #24]
	}
 800c270:	4618      	mov	r0, r3
 800c272:	3720      	adds	r7, #32
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
 800c284:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d103      	bne.n	800c294 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	69ba      	ldr	r2, [r7, #24]
 800c290:	601a      	str	r2, [r3, #0]
 800c292:	e002      	b.n	800c29a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2a6:	2101      	movs	r1, #1
 800c2a8:	69b8      	ldr	r0, [r7, #24]
 800c2aa:	f7ff fecb 	bl	800c044 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	78fa      	ldrb	r2, [r7, #3]
 800c2b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2b6:	bf00      	nop
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00e      	beq.n	800c2ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c2de:	2300      	movs	r3, #0
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f90b 	bl	800c500 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c2ea:	bf00      	nop
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b086      	sub	sp, #24
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	617b      	str	r3, [r7, #20]
 800c300:	2300      	movs	r3, #0
 800c302:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c304:	79fb      	ldrb	r3, [r7, #7]
 800c306:	461a      	mov	r2, r3
 800c308:	6939      	ldr	r1, [r7, #16]
 800c30a:	6978      	ldr	r0, [r7, #20]
 800c30c:	f7ff ff7a 	bl	800c204 <xQueueGenericCreate>
 800c310:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f7ff ffd3 	bl	800c2be <prvInitialiseMutex>

		return xNewQueue;
 800c318:	68fb      	ldr	r3, [r7, #12]
	}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c322:	b580      	push	{r7, lr}
 800c324:	b088      	sub	sp, #32
 800c326:	af02      	add	r7, sp, #8
 800c328:	4603      	mov	r3, r0
 800c32a:	6039      	str	r1, [r7, #0]
 800c32c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c32e:	2301      	movs	r3, #1
 800c330:	617b      	str	r3, [r7, #20]
 800c332:	2300      	movs	r3, #0
 800c334:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c336:	79fb      	ldrb	r3, [r7, #7]
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2200      	movs	r2, #0
 800c33e:	6939      	ldr	r1, [r7, #16]
 800c340:	6978      	ldr	r0, [r7, #20]
 800c342:	f7ff fee7 	bl	800c114 <xQueueGenericCreateStatic>
 800c346:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f7ff ffb8 	bl	800c2be <prvInitialiseMutex>

		return xNewQueue;
 800c34e:	68fb      	ldr	r3, [r7, #12]
	}
 800c350:	4618      	mov	r0, r3
 800c352:	3718      	adds	r7, #24
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c358:	b590      	push	{r4, r7, lr}
 800c35a:	b087      	sub	sp, #28
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d10a      	bne.n	800c380 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	60fb      	str	r3, [r7, #12]
}
 800c37c:	bf00      	nop
 800c37e:	e7fe      	b.n	800c37e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	689c      	ldr	r4, [r3, #8]
 800c384:	f001 fdb8 	bl	800def8 <xTaskGetCurrentTaskHandle>
 800c388:	4603      	mov	r3, r0
 800c38a:	429c      	cmp	r4, r3
 800c38c:	d111      	bne.n	800c3b2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	1e5a      	subs	r2, r3, #1
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d105      	bne.n	800c3ac <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	6938      	ldr	r0, [r7, #16]
 800c3a8:	f000 f8aa 	bl	800c500 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	617b      	str	r3, [r7, #20]
 800c3b0:	e001      	b.n	800c3b6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c3b6:	697b      	ldr	r3, [r7, #20]
	}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	371c      	adds	r7, #28
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd90      	pop	{r4, r7, pc}

0800c3c0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c3c0:	b590      	push	{r4, r7, lr}
 800c3c2:	b087      	sub	sp, #28
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10a      	bne.n	800c3ea <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	60fb      	str	r3, [r7, #12]
}
 800c3e6:	bf00      	nop
 800c3e8:	e7fe      	b.n	800c3e8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	689c      	ldr	r4, [r3, #8]
 800c3ee:	f001 fd83 	bl	800def8 <xTaskGetCurrentTaskHandle>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	429c      	cmp	r4, r3
 800c3f6:	d107      	bne.n	800c408 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c402:	2301      	movs	r3, #1
 800c404:	617b      	str	r3, [r7, #20]
 800c406:	e00c      	b.n	800c422 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6938      	ldr	r0, [r7, #16]
 800c40c:	f000 fb7e 	bl	800cb0c <xQueueSemaphoreTake>
 800c410:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d004      	beq.n	800c422 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c422:	697b      	ldr	r3, [r7, #20]
	}
 800c424:	4618      	mov	r0, r3
 800c426:	371c      	adds	r7, #28
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd90      	pop	{r4, r7, pc}

0800c42c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08a      	sub	sp, #40	; 0x28
 800c430:	af02      	add	r7, sp, #8
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	61bb      	str	r3, [r7, #24]
}
 800c450:	bf00      	nop
 800c452:	e7fe      	b.n	800c452 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c454:	68ba      	ldr	r2, [r7, #8]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d90a      	bls.n	800c472 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	617b      	str	r3, [r7, #20]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c472:	2302      	movs	r3, #2
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	2100      	movs	r1, #0
 800c47c:	68f8      	ldr	r0, [r7, #12]
 800c47e:	f7ff fe49 	bl	800c114 <xQueueGenericCreateStatic>
 800c482:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d002      	beq.n	800c490 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c490:	69fb      	ldr	r3, [r7, #28]
	}
 800c492:	4618      	mov	r0, r3
 800c494:	3720      	adds	r7, #32
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b086      	sub	sp, #24
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10a      	bne.n	800c4c0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	613b      	str	r3, [r7, #16]
}
 800c4bc:	bf00      	nop
 800c4be:	e7fe      	b.n	800c4be <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d90a      	bls.n	800c4de <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	60fb      	str	r3, [r7, #12]
}
 800c4da:	bf00      	nop
 800c4dc:	e7fe      	b.n	800c4dc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4de:	2202      	movs	r2, #2
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fe8e 	bl	800c204 <xQueueGenericCreate>
 800c4e8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	683a      	ldr	r2, [r7, #0]
 800c4f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c4f6:	697b      	ldr	r3, [r7, #20]
	}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3718      	adds	r7, #24
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08e      	sub	sp, #56	; 0x38
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c50e:	2300      	movs	r3, #0
 800c510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10a      	bne.n	800c532 <xQueueGenericSend+0x32>
	__asm volatile
 800c51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c52e:	bf00      	nop
 800c530:	e7fe      	b.n	800c530 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d103      	bne.n	800c540 <xQueueGenericSend+0x40>
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d101      	bne.n	800c544 <xQueueGenericSend+0x44>
 800c540:	2301      	movs	r3, #1
 800c542:	e000      	b.n	800c546 <xQueueGenericSend+0x46>
 800c544:	2300      	movs	r3, #0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10a      	bne.n	800c560 <xQueueGenericSend+0x60>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c55c:	bf00      	nop
 800c55e:	e7fe      	b.n	800c55e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b02      	cmp	r3, #2
 800c564:	d103      	bne.n	800c56e <xQueueGenericSend+0x6e>
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d101      	bne.n	800c572 <xQueueGenericSend+0x72>
 800c56e:	2301      	movs	r3, #1
 800c570:	e000      	b.n	800c574 <xQueueGenericSend+0x74>
 800c572:	2300      	movs	r3, #0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10a      	bne.n	800c58e <xQueueGenericSend+0x8e>
	__asm volatile
 800c578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57c:	f383 8811 	msr	BASEPRI, r3
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	623b      	str	r3, [r7, #32]
}
 800c58a:	bf00      	nop
 800c58c:	e7fe      	b.n	800c58c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c58e:	f001 fcc3 	bl	800df18 <xTaskGetSchedulerState>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <xQueueGenericSend+0x9e>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d101      	bne.n	800c5a2 <xQueueGenericSend+0xa2>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e000      	b.n	800c5a4 <xQueueGenericSend+0xa4>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10a      	bne.n	800c5be <xQueueGenericSend+0xbe>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	61fb      	str	r3, [r7, #28]
}
 800c5ba:	bf00      	nop
 800c5bc:	e7fe      	b.n	800c5bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5be:	f002 fbc1 	bl	800ed44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d302      	bcc.n	800c5d4 <xQueueGenericSend+0xd4>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d129      	bne.n	800c628 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5da:	f000 fc9a 	bl	800cf12 <prvCopyDataToQueue>
 800c5de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d010      	beq.n	800c60a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	3324      	adds	r3, #36	; 0x24
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 fac1 	bl	800db74 <xTaskRemoveFromEventList>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d013      	beq.n	800c620 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c5f8:	4b3f      	ldr	r3, [pc, #252]	; (800c6f8 <xQueueGenericSend+0x1f8>)
 800c5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5fe:	601a      	str	r2, [r3, #0]
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	e00a      	b.n	800c620 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d007      	beq.n	800c620 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c610:	4b39      	ldr	r3, [pc, #228]	; (800c6f8 <xQueueGenericSend+0x1f8>)
 800c612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c616:	601a      	str	r2, [r3, #0]
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c620:	f002 fbc0 	bl	800eda4 <vPortExitCritical>
				return pdPASS;
 800c624:	2301      	movs	r3, #1
 800c626:	e063      	b.n	800c6f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d103      	bne.n	800c636 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c62e:	f002 fbb9 	bl	800eda4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c632:	2300      	movs	r3, #0
 800c634:	e05c      	b.n	800c6f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d106      	bne.n	800c64a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c63c:	f107 0314 	add.w	r3, r7, #20
 800c640:	4618      	mov	r0, r3
 800c642:	f001 fafb 	bl	800dc3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c646:	2301      	movs	r3, #1
 800c648:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c64a:	f002 fbab 	bl	800eda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c64e:	f001 f855 	bl	800d6fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c652:	f002 fb77 	bl	800ed44 <vPortEnterCritical>
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c65c:	b25b      	sxtb	r3, r3
 800c65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c662:	d103      	bne.n	800c66c <xQueueGenericSend+0x16c>
 800c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c666:	2200      	movs	r2, #0
 800c668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c672:	b25b      	sxtb	r3, r3
 800c674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c678:	d103      	bne.n	800c682 <xQueueGenericSend+0x182>
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c682:	f002 fb8f 	bl	800eda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c686:	1d3a      	adds	r2, r7, #4
 800c688:	f107 0314 	add.w	r3, r7, #20
 800c68c:	4611      	mov	r1, r2
 800c68e:	4618      	mov	r0, r3
 800c690:	f001 faea 	bl	800dc68 <xTaskCheckForTimeOut>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d124      	bne.n	800c6e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c69a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c69c:	f000 fd31 	bl	800d102 <prvIsQueueFull>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d018      	beq.n	800c6d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	3310      	adds	r3, #16
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 fa10 	bl	800dad4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6b6:	f000 fcbc 	bl	800d032 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6ba:	f001 f82d 	bl	800d718 <xTaskResumeAll>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f47f af7c 	bne.w	800c5be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c6c6:	4b0c      	ldr	r3, [pc, #48]	; (800c6f8 <xQueueGenericSend+0x1f8>)
 800c6c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6cc:	601a      	str	r2, [r3, #0]
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	e772      	b.n	800c5be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c6d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6da:	f000 fcaa 	bl	800d032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6de:	f001 f81b 	bl	800d718 <xTaskResumeAll>
 800c6e2:	e76c      	b.n	800c5be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6e6:	f000 fca4 	bl	800d032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6ea:	f001 f815 	bl	800d718 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c6ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3738      	adds	r7, #56	; 0x38
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b090      	sub	sp, #64	; 0x40
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c710:	2b00      	cmp	r3, #0
 800c712:	d10a      	bne.n	800c72a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c718:	f383 8811 	msr	BASEPRI, r3
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	f3bf 8f4f 	dsb	sy
 800c724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c726:	bf00      	nop
 800c728:	e7fe      	b.n	800c728 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d103      	bne.n	800c738 <xQueueGenericSendFromISR+0x3c>
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <xQueueGenericSendFromISR+0x40>
 800c738:	2301      	movs	r3, #1
 800c73a:	e000      	b.n	800c73e <xQueueGenericSendFromISR+0x42>
 800c73c:	2300      	movs	r3, #0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10a      	bne.n	800c758 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c754:	bf00      	nop
 800c756:	e7fe      	b.n	800c756 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d103      	bne.n	800c766 <xQueueGenericSendFromISR+0x6a>
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c762:	2b01      	cmp	r3, #1
 800c764:	d101      	bne.n	800c76a <xQueueGenericSendFromISR+0x6e>
 800c766:	2301      	movs	r3, #1
 800c768:	e000      	b.n	800c76c <xQueueGenericSendFromISR+0x70>
 800c76a:	2300      	movs	r3, #0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10a      	bne.n	800c786 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	623b      	str	r3, [r7, #32]
}
 800c782:	bf00      	nop
 800c784:	e7fe      	b.n	800c784 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c786:	f002 fbbf 	bl	800ef08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c78a:	f3ef 8211 	mrs	r2, BASEPRI
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	61fa      	str	r2, [r7, #28]
 800c7a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c7a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d302      	bcc.n	800c7b8 <xQueueGenericSendFromISR+0xbc>
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d12f      	bne.n	800c818 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	68b9      	ldr	r1, [r7, #8]
 800c7cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7ce:	f000 fba0 	bl	800cf12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c7d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7da:	d112      	bne.n	800c802 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d016      	beq.n	800c812 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	3324      	adds	r3, #36	; 0x24
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f001 f9c3 	bl	800db74 <xTaskRemoveFromEventList>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00e      	beq.n	800c812 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00b      	beq.n	800c812 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	e007      	b.n	800c812 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c802:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c806:	3301      	adds	r3, #1
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	b25a      	sxtb	r2, r3
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c812:	2301      	movs	r3, #1
 800c814:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c816:	e001      	b.n	800c81c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c818:	2300      	movs	r3, #0
 800c81a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c826:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3740      	adds	r7, #64	; 0x40
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b08e      	sub	sp, #56	; 0x38
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10a      	bne.n	800c85c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	623b      	str	r3, [r7, #32]
}
 800c858:	bf00      	nop
 800c85a:	e7fe      	b.n	800c85a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00a      	beq.n	800c87a <xQueueGiveFromISR+0x48>
	__asm volatile
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	61fb      	str	r3, [r7, #28]
}
 800c876:	bf00      	nop
 800c878:	e7fe      	b.n	800c878 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d103      	bne.n	800c88a <xQueueGiveFromISR+0x58>
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <xQueueGiveFromISR+0x5c>
 800c88a:	2301      	movs	r3, #1
 800c88c:	e000      	b.n	800c890 <xQueueGiveFromISR+0x5e>
 800c88e:	2300      	movs	r3, #0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10a      	bne.n	800c8aa <xQueueGiveFromISR+0x78>
	__asm volatile
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	61bb      	str	r3, [r7, #24]
}
 800c8a6:	bf00      	nop
 800c8a8:	e7fe      	b.n	800c8a8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8aa:	f002 fb2d 	bl	800ef08 <vPortValidateInterruptPriority>
	__asm volatile
 800c8ae:	f3ef 8211 	mrs	r2, BASEPRI
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	617a      	str	r2, [r7, #20]
 800c8c4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c8c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d22b      	bcs.n	800c932 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	1c5a      	adds	r2, r3, #1
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f4:	d112      	bne.n	800c91c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d016      	beq.n	800c92c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c900:	3324      	adds	r3, #36	; 0x24
 800c902:	4618      	mov	r0, r3
 800c904:	f001 f936 	bl	800db74 <xTaskRemoveFromEventList>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00e      	beq.n	800c92c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00b      	beq.n	800c92c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	2201      	movs	r2, #1
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	e007      	b.n	800c92c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c920:	3301      	adds	r3, #1
 800c922:	b2db      	uxtb	r3, r3
 800c924:	b25a      	sxtb	r2, r3
 800c926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c92c:	2301      	movs	r3, #1
 800c92e:	637b      	str	r3, [r7, #52]	; 0x34
 800c930:	e001      	b.n	800c936 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c932:	2300      	movs	r3, #0
 800c934:	637b      	str	r3, [r7, #52]	; 0x34
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c938:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f383 8811 	msr	BASEPRI, r3
}
 800c940:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c944:	4618      	mov	r0, r3
 800c946:	3738      	adds	r7, #56	; 0x38
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b08c      	sub	sp, #48	; 0x30
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c958:	2300      	movs	r3, #0
 800c95a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10a      	bne.n	800c97c <xQueueReceive+0x30>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	623b      	str	r3, [r7, #32]
}
 800c978:	bf00      	nop
 800c97a:	e7fe      	b.n	800c97a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d103      	bne.n	800c98a <xQueueReceive+0x3e>
 800c982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c986:	2b00      	cmp	r3, #0
 800c988:	d101      	bne.n	800c98e <xQueueReceive+0x42>
 800c98a:	2301      	movs	r3, #1
 800c98c:	e000      	b.n	800c990 <xQueueReceive+0x44>
 800c98e:	2300      	movs	r3, #0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d10a      	bne.n	800c9aa <xQueueReceive+0x5e>
	__asm volatile
 800c994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	61fb      	str	r3, [r7, #28]
}
 800c9a6:	bf00      	nop
 800c9a8:	e7fe      	b.n	800c9a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9aa:	f001 fab5 	bl	800df18 <xTaskGetSchedulerState>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d102      	bne.n	800c9ba <xQueueReceive+0x6e>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d101      	bne.n	800c9be <xQueueReceive+0x72>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e000      	b.n	800c9c0 <xQueueReceive+0x74>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10a      	bne.n	800c9da <xQueueReceive+0x8e>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	61bb      	str	r3, [r7, #24]
}
 800c9d6:	bf00      	nop
 800c9d8:	e7fe      	b.n	800c9d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9da:	f002 f9b3 	bl	800ed44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d01f      	beq.n	800ca2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9ea:	68b9      	ldr	r1, [r7, #8]
 800c9ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ee:	f000 fafa 	bl	800cfe6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f4:	1e5a      	subs	r2, r3, #1
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00f      	beq.n	800ca22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	3310      	adds	r3, #16
 800ca06:	4618      	mov	r0, r3
 800ca08:	f001 f8b4 	bl	800db74 <xTaskRemoveFromEventList>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d007      	beq.n	800ca22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca12:	4b3d      	ldr	r3, [pc, #244]	; (800cb08 <xQueueReceive+0x1bc>)
 800ca14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca18:	601a      	str	r2, [r3, #0]
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca22:	f002 f9bf 	bl	800eda4 <vPortExitCritical>
				return pdPASS;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e069      	b.n	800cafe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d103      	bne.n	800ca38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca30:	f002 f9b8 	bl	800eda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca34:	2300      	movs	r3, #0
 800ca36:	e062      	b.n	800cafe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d106      	bne.n	800ca4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca3e:	f107 0310 	add.w	r3, r7, #16
 800ca42:	4618      	mov	r0, r3
 800ca44:	f001 f8fa 	bl	800dc3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca4c:	f002 f9aa 	bl	800eda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca50:	f000 fe54 	bl	800d6fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca54:	f002 f976 	bl	800ed44 <vPortEnterCritical>
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca5e:	b25b      	sxtb	r3, r3
 800ca60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca64:	d103      	bne.n	800ca6e <xQueueReceive+0x122>
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca74:	b25b      	sxtb	r3, r3
 800ca76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7a:	d103      	bne.n	800ca84 <xQueueReceive+0x138>
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca84:	f002 f98e 	bl	800eda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca88:	1d3a      	adds	r2, r7, #4
 800ca8a:	f107 0310 	add.w	r3, r7, #16
 800ca8e:	4611      	mov	r1, r2
 800ca90:	4618      	mov	r0, r3
 800ca92:	f001 f8e9 	bl	800dc68 <xTaskCheckForTimeOut>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d123      	bne.n	800cae4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca9e:	f000 fb1a 	bl	800d0d6 <prvIsQueueEmpty>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d017      	beq.n	800cad8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caaa:	3324      	adds	r3, #36	; 0x24
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	4611      	mov	r1, r2
 800cab0:	4618      	mov	r0, r3
 800cab2:	f001 f80f 	bl	800dad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cab8:	f000 fabb 	bl	800d032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cabc:	f000 fe2c 	bl	800d718 <xTaskResumeAll>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d189      	bne.n	800c9da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cac6:	4b10      	ldr	r3, [pc, #64]	; (800cb08 <xQueueReceive+0x1bc>)
 800cac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cacc:	601a      	str	r2, [r3, #0]
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	e780      	b.n	800c9da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cada:	f000 faaa 	bl	800d032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cade:	f000 fe1b 	bl	800d718 <xTaskResumeAll>
 800cae2:	e77a      	b.n	800c9da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cae6:	f000 faa4 	bl	800d032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800caea:	f000 fe15 	bl	800d718 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800caee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caf0:	f000 faf1 	bl	800d0d6 <prvIsQueueEmpty>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f43f af6f 	beq.w	800c9da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cafc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3730      	adds	r7, #48	; 0x30
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	e000ed04 	.word	0xe000ed04

0800cb0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b08e      	sub	sp, #56	; 0x38
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb16:	2300      	movs	r3, #0
 800cb18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10a      	bne.n	800cb3e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	623b      	str	r3, [r7, #32]
}
 800cb3a:	bf00      	nop
 800cb3c:	e7fe      	b.n	800cb3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00a      	beq.n	800cb5c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	61fb      	str	r3, [r7, #28]
}
 800cb58:	bf00      	nop
 800cb5a:	e7fe      	b.n	800cb5a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb5c:	f001 f9dc 	bl	800df18 <xTaskGetSchedulerState>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d102      	bne.n	800cb6c <xQueueSemaphoreTake+0x60>
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <xQueueSemaphoreTake+0x64>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e000      	b.n	800cb72 <xQueueSemaphoreTake+0x66>
 800cb70:	2300      	movs	r3, #0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10a      	bne.n	800cb8c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	61bb      	str	r3, [r7, #24]
}
 800cb88:	bf00      	nop
 800cb8a:	e7fe      	b.n	800cb8a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb8c:	f002 f8da 	bl	800ed44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb94:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d024      	beq.n	800cbe6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9e:	1e5a      	subs	r2, r3, #1
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d104      	bne.n	800cbb6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbac:	f001 fb2a 	bl	800e204 <pvTaskIncrementMutexHeldCount>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00f      	beq.n	800cbde <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	3310      	adds	r3, #16
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 ffd6 	bl	800db74 <xTaskRemoveFromEventList>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d007      	beq.n	800cbde <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cbce:	4b54      	ldr	r3, [pc, #336]	; (800cd20 <xQueueSemaphoreTake+0x214>)
 800cbd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbde:	f002 f8e1 	bl	800eda4 <vPortExitCritical>
				return pdPASS;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e097      	b.n	800cd16 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d111      	bne.n	800cc10 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00a      	beq.n	800cc08 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	617b      	str	r3, [r7, #20]
}
 800cc04:	bf00      	nop
 800cc06:	e7fe      	b.n	800cc06 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc08:	f002 f8cc 	bl	800eda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e082      	b.n	800cd16 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d106      	bne.n	800cc24 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc16:	f107 030c 	add.w	r3, r7, #12
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 f80e 	bl	800dc3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc24:	f002 f8be 	bl	800eda4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc28:	f000 fd68 	bl	800d6fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc2c:	f002 f88a 	bl	800ed44 <vPortEnterCritical>
 800cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc36:	b25b      	sxtb	r3, r3
 800cc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3c:	d103      	bne.n	800cc46 <xQueueSemaphoreTake+0x13a>
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc4c:	b25b      	sxtb	r3, r3
 800cc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc52:	d103      	bne.n	800cc5c <xQueueSemaphoreTake+0x150>
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc5c:	f002 f8a2 	bl	800eda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc60:	463a      	mov	r2, r7
 800cc62:	f107 030c 	add.w	r3, r7, #12
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 fffd 	bl	800dc68 <xTaskCheckForTimeOut>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d132      	bne.n	800ccda <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc76:	f000 fa2e 	bl	800d0d6 <prvIsQueueEmpty>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d026      	beq.n	800ccce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d109      	bne.n	800cc9c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cc88:	f002 f85c 	bl	800ed44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f001 f95f 	bl	800df54 <xTaskPriorityInherit>
 800cc96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cc98:	f002 f884 	bl	800eda4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	3324      	adds	r3, #36	; 0x24
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	4611      	mov	r1, r2
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 ff15 	bl	800dad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccac:	f000 f9c1 	bl	800d032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccb0:	f000 fd32 	bl	800d718 <xTaskResumeAll>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f47f af68 	bne.w	800cb8c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ccbc:	4b18      	ldr	r3, [pc, #96]	; (800cd20 <xQueueSemaphoreTake+0x214>)
 800ccbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	e75e      	b.n	800cb8c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ccce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccd0:	f000 f9af 	bl	800d032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccd4:	f000 fd20 	bl	800d718 <xTaskResumeAll>
 800ccd8:	e758      	b.n	800cb8c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ccda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccdc:	f000 f9a9 	bl	800d032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cce0:	f000 fd1a 	bl	800d718 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cce6:	f000 f9f6 	bl	800d0d6 <prvIsQueueEmpty>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f43f af4d 	beq.w	800cb8c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00d      	beq.n	800cd14 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ccf8:	f002 f824 	bl	800ed44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ccfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccfe:	f000 f8f0 	bl	800cee2 <prvGetDisinheritPriorityAfterTimeout>
 800cd02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f001 f9f8 	bl	800e100 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd10:	f002 f848 	bl	800eda4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3738      	adds	r7, #56	; 0x38
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	e000ed04 	.word	0xe000ed04

0800cd24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08e      	sub	sp, #56	; 0x38
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10a      	bne.n	800cd50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	623b      	str	r3, [r7, #32]
}
 800cd4c:	bf00      	nop
 800cd4e:	e7fe      	b.n	800cd4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d103      	bne.n	800cd5e <xQueueReceiveFromISR+0x3a>
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d101      	bne.n	800cd62 <xQueueReceiveFromISR+0x3e>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e000      	b.n	800cd64 <xQueueReceiveFromISR+0x40>
 800cd62:	2300      	movs	r3, #0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	61fb      	str	r3, [r7, #28]
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd7e:	f002 f8c3 	bl	800ef08 <vPortValidateInterruptPriority>
	__asm volatile
 800cd82:	f3ef 8211 	mrs	r2, BASEPRI
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	61ba      	str	r2, [r7, #24]
 800cd98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cd9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d02f      	beq.n	800ce0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdb4:	68b9      	ldr	r1, [r7, #8]
 800cdb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdb8:	f000 f915 	bl	800cfe6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	1e5a      	subs	r2, r3, #1
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cdc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdcc:	d112      	bne.n	800cdf4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d016      	beq.n	800ce04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	3310      	adds	r3, #16
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 feca 	bl	800db74 <xTaskRemoveFromEventList>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00e      	beq.n	800ce04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00b      	beq.n	800ce04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	601a      	str	r2, [r3, #0]
 800cdf2:	e007      	b.n	800ce04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cdf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	b25a      	sxtb	r2, r3
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce04:	2301      	movs	r3, #1
 800ce06:	637b      	str	r3, [r7, #52]	; 0x34
 800ce08:	e001      	b.n	800ce0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce10:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	f383 8811 	msr	BASEPRI, r3
}
 800ce18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3738      	adds	r7, #56	; 0x38
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10a      	bne.n	800ce48 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	60bb      	str	r3, [r7, #8]
}
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ce48:	f001 ff7c 	bl	800ed44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce50:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ce52:	f001 ffa7 	bl	800eda4 <vPortExitCritical>

	return uxReturn;
 800ce56:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ce60:	b480      	push	{r7}
 800ce62:	b087      	sub	sp, #28
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10a      	bne.n	800ce88 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	60fb      	str	r3, [r7, #12]
}
 800ce84:	bf00      	nop
 800ce86:	e7fe      	b.n	800ce86 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ce8e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ce90:	4618      	mov	r0, r3
 800ce92:	371c      	adds	r7, #28
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10a      	bne.n	800cec4 <vQueueDelete+0x28>
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	60bb      	str	r3, [r7, #8]
}
 800cec0:	bf00      	nop
 800cec2:	e7fe      	b.n	800cec2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f000 f95f 	bl	800d188 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f002 f923 	bl	800f120 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ceda:	bf00      	nop
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cee2:	b480      	push	{r7}
 800cee4:	b085      	sub	sp, #20
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d006      	beq.n	800cf00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cefc:	60fb      	str	r3, [r7, #12]
 800cefe:	e001      	b.n	800cf04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cf00:	2300      	movs	r3, #0
 800cf02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cf04:	68fb      	ldr	r3, [r7, #12]
	}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b086      	sub	sp, #24
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	60f8      	str	r0, [r7, #12]
 800cf1a:	60b9      	str	r1, [r7, #8]
 800cf1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10d      	bne.n	800cf4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d14d      	bne.n	800cfd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f001 f871 	bl	800e024 <xTaskPriorityDisinherit>
 800cf42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	609a      	str	r2, [r3, #8]
 800cf4a:	e043      	b.n	800cfd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d119      	bne.n	800cf86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6858      	ldr	r0, [r3, #4]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	68b9      	ldr	r1, [r7, #8]
 800cf5e:	f012 fdba 	bl	801fad6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	441a      	add	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d32b      	bcc.n	800cfd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	605a      	str	r2, [r3, #4]
 800cf84:	e026      	b.n	800cfd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	68d8      	ldr	r0, [r3, #12]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8e:	461a      	mov	r2, r3
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	f012 fda0 	bl	801fad6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	68da      	ldr	r2, [r3, #12]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf9e:	425b      	negs	r3, r3
 800cfa0:	441a      	add	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d207      	bcs.n	800cfc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	689a      	ldr	r2, [r3, #8]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfba:	425b      	negs	r3, r3
 800cfbc:	441a      	add	r2, r3
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d105      	bne.n	800cfd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cfdc:	697b      	ldr	r3, [r7, #20]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b082      	sub	sp, #8
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d018      	beq.n	800d02a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68da      	ldr	r2, [r3, #12]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d000:	441a      	add	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68da      	ldr	r2, [r3, #12]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d303      	bcc.n	800d01a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68d9      	ldr	r1, [r3, #12]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d022:	461a      	mov	r2, r3
 800d024:	6838      	ldr	r0, [r7, #0]
 800d026:	f012 fd56 	bl	801fad6 <memcpy>
	}
}
 800d02a:	bf00      	nop
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d03a:	f001 fe83 	bl	800ed44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d044:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d046:	e011      	b.n	800d06c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d012      	beq.n	800d076 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	3324      	adds	r3, #36	; 0x24
 800d054:	4618      	mov	r0, r3
 800d056:	f000 fd8d 	bl	800db74 <xTaskRemoveFromEventList>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d001      	beq.n	800d064 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d060:	f000 fe64 	bl	800dd2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d064:	7bfb      	ldrb	r3, [r7, #15]
 800d066:	3b01      	subs	r3, #1
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d070:	2b00      	cmp	r3, #0
 800d072:	dce9      	bgt.n	800d048 <prvUnlockQueue+0x16>
 800d074:	e000      	b.n	800d078 <prvUnlockQueue+0x46>
					break;
 800d076:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	22ff      	movs	r2, #255	; 0xff
 800d07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d080:	f001 fe90 	bl	800eda4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d084:	f001 fe5e 	bl	800ed44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d08e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d090:	e011      	b.n	800d0b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d012      	beq.n	800d0c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	3310      	adds	r3, #16
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 fd68 	bl	800db74 <xTaskRemoveFromEventList>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d0aa:	f000 fe3f 	bl	800dd2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d0ae:	7bbb      	ldrb	r3, [r7, #14]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	dce9      	bgt.n	800d092 <prvUnlockQueue+0x60>
 800d0be:	e000      	b.n	800d0c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d0c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	22ff      	movs	r2, #255	; 0xff
 800d0c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d0ca:	f001 fe6b 	bl	800eda4 <vPortExitCritical>
}
 800d0ce:	bf00      	nop
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0de:	f001 fe31 	bl	800ed44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d102      	bne.n	800d0f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	e001      	b.n	800d0f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0f4:	f001 fe56 	bl	800eda4 <vPortExitCritical>

	return xReturn;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d10a:	f001 fe1b 	bl	800ed44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d116:	429a      	cmp	r2, r3
 800d118:	d102      	bne.n	800d120 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d11a:	2301      	movs	r3, #1
 800d11c:	60fb      	str	r3, [r7, #12]
 800d11e:	e001      	b.n	800d124 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d120:	2300      	movs	r3, #0
 800d122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d124:	f001 fe3e 	bl	800eda4 <vPortExitCritical>

	return xReturn;
 800d128:	68fb      	ldr	r3, [r7, #12]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d13e:	2300      	movs	r3, #0
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	e014      	b.n	800d16e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d144:	4a0f      	ldr	r2, [pc, #60]	; (800d184 <vQueueAddToRegistry+0x50>)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10b      	bne.n	800d168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d150:	490c      	ldr	r1, [pc, #48]	; (800d184 <vQueueAddToRegistry+0x50>)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d15a:	4a0a      	ldr	r2, [pc, #40]	; (800d184 <vQueueAddToRegistry+0x50>)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	4413      	add	r3, r2
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d166:	e006      	b.n	800d176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	3301      	adds	r3, #1
 800d16c:	60fb      	str	r3, [r7, #12]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2b07      	cmp	r3, #7
 800d172:	d9e7      	bls.n	800d144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d174:	bf00      	nop
 800d176:	bf00      	nop
 800d178:	3714      	adds	r7, #20
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	2000b27c 	.word	0x2000b27c

0800d188 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d190:	2300      	movs	r3, #0
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	e016      	b.n	800d1c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d196:	4a10      	ldr	r2, [pc, #64]	; (800d1d8 <vQueueUnregisterQueue+0x50>)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	00db      	lsls	r3, r3, #3
 800d19c:	4413      	add	r3, r2
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d10b      	bne.n	800d1be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d1a6:	4a0c      	ldr	r2, [pc, #48]	; (800d1d8 <vQueueUnregisterQueue+0x50>)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d1b0:	4a09      	ldr	r2, [pc, #36]	; (800d1d8 <vQueueUnregisterQueue+0x50>)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	4413      	add	r3, r2
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	605a      	str	r2, [r3, #4]
				break;
 800d1bc:	e006      	b.n	800d1cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	60fb      	str	r3, [r7, #12]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2b07      	cmp	r3, #7
 800d1c8:	d9e5      	bls.n	800d196 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d1ca:	bf00      	nop
 800d1cc:	bf00      	nop
 800d1ce:	3714      	adds	r7, #20
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	2000b27c 	.word	0x2000b27c

0800d1dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d1ec:	f001 fdaa 	bl	800ed44 <vPortEnterCritical>
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1f6:	b25b      	sxtb	r3, r3
 800d1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1fc:	d103      	bne.n	800d206 <vQueueWaitForMessageRestricted+0x2a>
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d20c:	b25b      	sxtb	r3, r3
 800d20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d212:	d103      	bne.n	800d21c <vQueueWaitForMessageRestricted+0x40>
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d21c:	f001 fdc2 	bl	800eda4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d224:	2b00      	cmp	r3, #0
 800d226:	d106      	bne.n	800d236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	3324      	adds	r3, #36	; 0x24
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	68b9      	ldr	r1, [r7, #8]
 800d230:	4618      	mov	r0, r3
 800d232:	f000 fc73 	bl	800db1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d236:	6978      	ldr	r0, [r7, #20]
 800d238:	f7ff fefb 	bl	800d032 <prvUnlockQueue>
	}
 800d23c:	bf00      	nop
 800d23e:	3718      	adds	r7, #24
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d244:	b580      	push	{r7, lr}
 800d246:	b08e      	sub	sp, #56	; 0x38
 800d248:	af04      	add	r7, sp, #16
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	607a      	str	r2, [r7, #4]
 800d250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10a      	bne.n	800d26e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	623b      	str	r3, [r7, #32]
}
 800d26a:	bf00      	nop
 800d26c:	e7fe      	b.n	800d26c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10a      	bne.n	800d28a <xTaskCreateStatic+0x46>
	__asm volatile
 800d274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	61fb      	str	r3, [r7, #28]
}
 800d286:	bf00      	nop
 800d288:	e7fe      	b.n	800d288 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d28a:	23bc      	movs	r3, #188	; 0xbc
 800d28c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	2bbc      	cmp	r3, #188	; 0xbc
 800d292:	d00a      	beq.n	800d2aa <xTaskCreateStatic+0x66>
	__asm volatile
 800d294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d298:	f383 8811 	msr	BASEPRI, r3
 800d29c:	f3bf 8f6f 	isb	sy
 800d2a0:	f3bf 8f4f 	dsb	sy
 800d2a4:	61bb      	str	r3, [r7, #24]
}
 800d2a6:	bf00      	nop
 800d2a8:	e7fe      	b.n	800d2a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d2aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d01e      	beq.n	800d2f0 <xTaskCreateStatic+0xac>
 800d2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d01b      	beq.n	800d2f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	9303      	str	r3, [sp, #12]
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	9302      	str	r3, [sp, #8]
 800d2d2:	f107 0314 	add.w	r3, r7, #20
 800d2d6:	9301      	str	r3, [sp, #4]
 800d2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	68b9      	ldr	r1, [r7, #8]
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f000 f850 	bl	800d388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2ea:	f000 f8f3 	bl	800d4d4 <prvAddNewTaskToReadyList>
 800d2ee:	e001      	b.n	800d2f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d2f4:	697b      	ldr	r3, [r7, #20]
	}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3728      	adds	r7, #40	; 0x28
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b08c      	sub	sp, #48	; 0x30
 800d302:	af04      	add	r7, sp, #16
 800d304:	60f8      	str	r0, [r7, #12]
 800d306:	60b9      	str	r1, [r7, #8]
 800d308:	603b      	str	r3, [r7, #0]
 800d30a:	4613      	mov	r3, r2
 800d30c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d30e:	88fb      	ldrh	r3, [r7, #6]
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	4618      	mov	r0, r3
 800d314:	f001 fe38 	bl	800ef88 <pvPortMalloc>
 800d318:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00e      	beq.n	800d33e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d320:	20bc      	movs	r0, #188	; 0xbc
 800d322:	f001 fe31 	bl	800ef88 <pvPortMalloc>
 800d326:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d003      	beq.n	800d336 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	697a      	ldr	r2, [r7, #20]
 800d332:	631a      	str	r2, [r3, #48]	; 0x30
 800d334:	e005      	b.n	800d342 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d336:	6978      	ldr	r0, [r7, #20]
 800d338:	f001 fef2 	bl	800f120 <vPortFree>
 800d33c:	e001      	b.n	800d342 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d33e:	2300      	movs	r3, #0
 800d340:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d017      	beq.n	800d378 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	2200      	movs	r2, #0
 800d34c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d350:	88fa      	ldrh	r2, [r7, #6]
 800d352:	2300      	movs	r3, #0
 800d354:	9303      	str	r3, [sp, #12]
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	9302      	str	r3, [sp, #8]
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	68b9      	ldr	r1, [r7, #8]
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f000 f80e 	bl	800d388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d36c:	69f8      	ldr	r0, [r7, #28]
 800d36e:	f000 f8b1 	bl	800d4d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d372:	2301      	movs	r3, #1
 800d374:	61bb      	str	r3, [r7, #24]
 800d376:	e002      	b.n	800d37e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d378:	f04f 33ff 	mov.w	r3, #4294967295
 800d37c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d37e:	69bb      	ldr	r3, [r7, #24]
	}
 800d380:	4618      	mov	r0, r3
 800d382:	3720      	adds	r7, #32
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b088      	sub	sp, #32
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d398:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	461a      	mov	r2, r3
 800d3a0:	21a5      	movs	r1, #165	; 0xa5
 800d3a2:	f012 fba6 	bl	801faf2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4413      	add	r3, r2
 800d3b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	f023 0307 	bic.w	r3, r3, #7
 800d3be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	f003 0307 	and.w	r3, r3, #7
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00a      	beq.n	800d3e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	617b      	str	r3, [r7, #20]
}
 800d3dc:	bf00      	nop
 800d3de:	e7fe      	b.n	800d3de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d01f      	beq.n	800d426 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	61fb      	str	r3, [r7, #28]
 800d3ea:	e012      	b.n	800d412 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	7819      	ldrb	r1, [r3, #0]
 800d3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	3334      	adds	r3, #52	; 0x34
 800d3fc:	460a      	mov	r2, r1
 800d3fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d400:	68ba      	ldr	r2, [r7, #8]
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	4413      	add	r3, r2
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d006      	beq.n	800d41a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	3301      	adds	r3, #1
 800d410:	61fb      	str	r3, [r7, #28]
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	2b0f      	cmp	r3, #15
 800d416:	d9e9      	bls.n	800d3ec <prvInitialiseNewTask+0x64>
 800d418:	e000      	b.n	800d41c <prvInitialiseNewTask+0x94>
			{
				break;
 800d41a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41e:	2200      	movs	r2, #0
 800d420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d424:	e003      	b.n	800d42e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	2200      	movs	r2, #0
 800d42a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	2b37      	cmp	r3, #55	; 0x37
 800d432:	d901      	bls.n	800d438 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d434:	2337      	movs	r3, #55	; 0x37
 800d436:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d43c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d442:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d446:	2200      	movs	r2, #0
 800d448:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	3304      	adds	r3, #4
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fe fd64 	bl	800bf1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	3318      	adds	r3, #24
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fe fd5f 	bl	800bf1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d462:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d466:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d472:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	2200      	movs	r2, #0
 800d478:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	2200      	movs	r2, #0
 800d480:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d486:	3354      	adds	r3, #84	; 0x54
 800d488:	2260      	movs	r2, #96	; 0x60
 800d48a:	2100      	movs	r1, #0
 800d48c:	4618      	mov	r0, r3
 800d48e:	f012 fb30 	bl	801faf2 <memset>
 800d492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d494:	4a0c      	ldr	r2, [pc, #48]	; (800d4c8 <prvInitialiseNewTask+0x140>)
 800d496:	659a      	str	r2, [r3, #88]	; 0x58
 800d498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49a:	4a0c      	ldr	r2, [pc, #48]	; (800d4cc <prvInitialiseNewTask+0x144>)
 800d49c:	65da      	str	r2, [r3, #92]	; 0x5c
 800d49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a0:	4a0b      	ldr	r2, [pc, #44]	; (800d4d0 <prvInitialiseNewTask+0x148>)
 800d4a2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4a4:	683a      	ldr	r2, [r7, #0]
 800d4a6:	68f9      	ldr	r1, [r7, #12]
 800d4a8:	69b8      	ldr	r0, [r7, #24]
 800d4aa:	f001 fb1b 	bl	800eae4 <pxPortInitialiseStack>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4c0:	bf00      	nop
 800d4c2:	3720      	adds	r7, #32
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	08024c80 	.word	0x08024c80
 800d4cc:	08024ca0 	.word	0x08024ca0
 800d4d0:	08024c60 	.word	0x08024c60

0800d4d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d4dc:	f001 fc32 	bl	800ed44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d4e0:	4b2d      	ldr	r3, [pc, #180]	; (800d598 <prvAddNewTaskToReadyList+0xc4>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	4a2c      	ldr	r2, [pc, #176]	; (800d598 <prvAddNewTaskToReadyList+0xc4>)
 800d4e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d4ea:	4b2c      	ldr	r3, [pc, #176]	; (800d59c <prvAddNewTaskToReadyList+0xc8>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d109      	bne.n	800d506 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d4f2:	4a2a      	ldr	r2, [pc, #168]	; (800d59c <prvAddNewTaskToReadyList+0xc8>)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d4f8:	4b27      	ldr	r3, [pc, #156]	; (800d598 <prvAddNewTaskToReadyList+0xc4>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d110      	bne.n	800d522 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d500:	f000 fc38 	bl	800dd74 <prvInitialiseTaskLists>
 800d504:	e00d      	b.n	800d522 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d506:	4b26      	ldr	r3, [pc, #152]	; (800d5a0 <prvAddNewTaskToReadyList+0xcc>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d109      	bne.n	800d522 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d50e:	4b23      	ldr	r3, [pc, #140]	; (800d59c <prvAddNewTaskToReadyList+0xc8>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d518:	429a      	cmp	r2, r3
 800d51a:	d802      	bhi.n	800d522 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d51c:	4a1f      	ldr	r2, [pc, #124]	; (800d59c <prvAddNewTaskToReadyList+0xc8>)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d522:	4b20      	ldr	r3, [pc, #128]	; (800d5a4 <prvAddNewTaskToReadyList+0xd0>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3301      	adds	r3, #1
 800d528:	4a1e      	ldr	r2, [pc, #120]	; (800d5a4 <prvAddNewTaskToReadyList+0xd0>)
 800d52a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d52c:	4b1d      	ldr	r3, [pc, #116]	; (800d5a4 <prvAddNewTaskToReadyList+0xd0>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d538:	4b1b      	ldr	r3, [pc, #108]	; (800d5a8 <prvAddNewTaskToReadyList+0xd4>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d903      	bls.n	800d548 <prvAddNewTaskToReadyList+0x74>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d544:	4a18      	ldr	r2, [pc, #96]	; (800d5a8 <prvAddNewTaskToReadyList+0xd4>)
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54c:	4613      	mov	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4413      	add	r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4a15      	ldr	r2, [pc, #84]	; (800d5ac <prvAddNewTaskToReadyList+0xd8>)
 800d556:	441a      	add	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	3304      	adds	r3, #4
 800d55c:	4619      	mov	r1, r3
 800d55e:	4610      	mov	r0, r2
 800d560:	f7fe fce9 	bl	800bf36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d564:	f001 fc1e 	bl	800eda4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d568:	4b0d      	ldr	r3, [pc, #52]	; (800d5a0 <prvAddNewTaskToReadyList+0xcc>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00e      	beq.n	800d58e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d570:	4b0a      	ldr	r3, [pc, #40]	; (800d59c <prvAddNewTaskToReadyList+0xc8>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d207      	bcs.n	800d58e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d57e:	4b0c      	ldr	r3, [pc, #48]	; (800d5b0 <prvAddNewTaskToReadyList+0xdc>)
 800d580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d584:	601a      	str	r2, [r3, #0]
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d58e:	bf00      	nop
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	20000dd8 	.word	0x20000dd8
 800d59c:	20000904 	.word	0x20000904
 800d5a0:	20000de4 	.word	0x20000de4
 800d5a4:	20000df4 	.word	0x20000df4
 800d5a8:	20000de0 	.word	0x20000de0
 800d5ac:	20000908 	.word	0x20000908
 800d5b0:	e000ed04 	.word	0xe000ed04

0800d5b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d017      	beq.n	800d5f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d5c6:	4b13      	ldr	r3, [pc, #76]	; (800d614 <vTaskDelay+0x60>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00a      	beq.n	800d5e4 <vTaskDelay+0x30>
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	60bb      	str	r3, [r7, #8]
}
 800d5e0:	bf00      	nop
 800d5e2:	e7fe      	b.n	800d5e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d5e4:	f000 f88a 	bl	800d6fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 fe1e 	bl	800e22c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d5f0:	f000 f892 	bl	800d718 <xTaskResumeAll>
 800d5f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d107      	bne.n	800d60c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d5fc:	4b06      	ldr	r3, [pc, #24]	; (800d618 <vTaskDelay+0x64>)
 800d5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d602:	601a      	str	r2, [r3, #0]
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d60c:	bf00      	nop
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20000e00 	.word	0x20000e00
 800d618:	e000ed04 	.word	0xe000ed04

0800d61c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08a      	sub	sp, #40	; 0x28
 800d620:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d622:	2300      	movs	r3, #0
 800d624:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d626:	2300      	movs	r3, #0
 800d628:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d62a:	463a      	mov	r2, r7
 800d62c:	1d39      	adds	r1, r7, #4
 800d62e:	f107 0308 	add.w	r3, r7, #8
 800d632:	4618      	mov	r0, r3
 800d634:	f7fe fc1e 	bl	800be74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68ba      	ldr	r2, [r7, #8]
 800d63e:	9202      	str	r2, [sp, #8]
 800d640:	9301      	str	r3, [sp, #4]
 800d642:	2300      	movs	r3, #0
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	2300      	movs	r3, #0
 800d648:	460a      	mov	r2, r1
 800d64a:	4924      	ldr	r1, [pc, #144]	; (800d6dc <vTaskStartScheduler+0xc0>)
 800d64c:	4824      	ldr	r0, [pc, #144]	; (800d6e0 <vTaskStartScheduler+0xc4>)
 800d64e:	f7ff fdf9 	bl	800d244 <xTaskCreateStatic>
 800d652:	4603      	mov	r3, r0
 800d654:	4a23      	ldr	r2, [pc, #140]	; (800d6e4 <vTaskStartScheduler+0xc8>)
 800d656:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d658:	4b22      	ldr	r3, [pc, #136]	; (800d6e4 <vTaskStartScheduler+0xc8>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d660:	2301      	movs	r3, #1
 800d662:	617b      	str	r3, [r7, #20]
 800d664:	e001      	b.n	800d66a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d666:	2300      	movs	r3, #0
 800d668:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d102      	bne.n	800d676 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d670:	f000 fe30 	bl	800e2d4 <xTimerCreateTimerTask>
 800d674:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d11b      	bne.n	800d6b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800d67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	613b      	str	r3, [r7, #16]
}
 800d68e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d690:	4b15      	ldr	r3, [pc, #84]	; (800d6e8 <vTaskStartScheduler+0xcc>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	3354      	adds	r3, #84	; 0x54
 800d696:	4a15      	ldr	r2, [pc, #84]	; (800d6ec <vTaskStartScheduler+0xd0>)
 800d698:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d69a:	4b15      	ldr	r3, [pc, #84]	; (800d6f0 <vTaskStartScheduler+0xd4>)
 800d69c:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d6a2:	4b14      	ldr	r3, [pc, #80]	; (800d6f4 <vTaskStartScheduler+0xd8>)
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d6a8:	4b13      	ldr	r3, [pc, #76]	; (800d6f8 <vTaskStartScheduler+0xdc>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d6ae:	f001 faa7 	bl	800ec00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d6b2:	e00e      	b.n	800d6d2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ba:	d10a      	bne.n	800d6d2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800d6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	60fb      	str	r3, [r7, #12]
}
 800d6ce:	bf00      	nop
 800d6d0:	e7fe      	b.n	800d6d0 <vTaskStartScheduler+0xb4>
}
 800d6d2:	bf00      	nop
 800d6d4:	3718      	adds	r7, #24
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	08020f38 	.word	0x08020f38
 800d6e0:	0800dd45 	.word	0x0800dd45
 800d6e4:	20000dfc 	.word	0x20000dfc
 800d6e8:	20000904 	.word	0x20000904
 800d6ec:	200000f4 	.word	0x200000f4
 800d6f0:	20000df8 	.word	0x20000df8
 800d6f4:	20000de4 	.word	0x20000de4
 800d6f8:	20000ddc 	.word	0x20000ddc

0800d6fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d700:	4b04      	ldr	r3, [pc, #16]	; (800d714 <vTaskSuspendAll+0x18>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3301      	adds	r3, #1
 800d706:	4a03      	ldr	r2, [pc, #12]	; (800d714 <vTaskSuspendAll+0x18>)
 800d708:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d70a:	bf00      	nop
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	20000e00 	.word	0x20000e00

0800d718 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d71e:	2300      	movs	r3, #0
 800d720:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d722:	2300      	movs	r3, #0
 800d724:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d726:	4b42      	ldr	r3, [pc, #264]	; (800d830 <xTaskResumeAll+0x118>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10a      	bne.n	800d744 <xTaskResumeAll+0x2c>
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	603b      	str	r3, [r7, #0]
}
 800d740:	bf00      	nop
 800d742:	e7fe      	b.n	800d742 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d744:	f001 fafe 	bl	800ed44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d748:	4b39      	ldr	r3, [pc, #228]	; (800d830 <xTaskResumeAll+0x118>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	3b01      	subs	r3, #1
 800d74e:	4a38      	ldr	r2, [pc, #224]	; (800d830 <xTaskResumeAll+0x118>)
 800d750:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d752:	4b37      	ldr	r3, [pc, #220]	; (800d830 <xTaskResumeAll+0x118>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d162      	bne.n	800d820 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d75a:	4b36      	ldr	r3, [pc, #216]	; (800d834 <xTaskResumeAll+0x11c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d05e      	beq.n	800d820 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d762:	e02f      	b.n	800d7c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d764:	4b34      	ldr	r3, [pc, #208]	; (800d838 <xTaskResumeAll+0x120>)
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	3318      	adds	r3, #24
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fc3d 	bl	800bff0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	3304      	adds	r3, #4
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fe fc38 	bl	800bff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d784:	4b2d      	ldr	r3, [pc, #180]	; (800d83c <xTaskResumeAll+0x124>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d903      	bls.n	800d794 <xTaskResumeAll+0x7c>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d790:	4a2a      	ldr	r2, [pc, #168]	; (800d83c <xTaskResumeAll+0x124>)
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4a27      	ldr	r2, [pc, #156]	; (800d840 <xTaskResumeAll+0x128>)
 800d7a2:	441a      	add	r2, r3
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	3304      	adds	r3, #4
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	f7fe fbc3 	bl	800bf36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b4:	4b23      	ldr	r3, [pc, #140]	; (800d844 <xTaskResumeAll+0x12c>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d302      	bcc.n	800d7c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d7be:	4b22      	ldr	r3, [pc, #136]	; (800d848 <xTaskResumeAll+0x130>)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7c4:	4b1c      	ldr	r3, [pc, #112]	; (800d838 <xTaskResumeAll+0x120>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1cb      	bne.n	800d764 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d7d2:	f000 fb71 	bl	800deb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d7d6:	4b1d      	ldr	r3, [pc, #116]	; (800d84c <xTaskResumeAll+0x134>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d010      	beq.n	800d804 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d7e2:	f000 f859 	bl	800d898 <xTaskIncrementTick>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d7ec:	4b16      	ldr	r3, [pc, #88]	; (800d848 <xTaskResumeAll+0x130>)
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d1f1      	bne.n	800d7e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d7fe:	4b13      	ldr	r3, [pc, #76]	; (800d84c <xTaskResumeAll+0x134>)
 800d800:	2200      	movs	r2, #0
 800d802:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d804:	4b10      	ldr	r3, [pc, #64]	; (800d848 <xTaskResumeAll+0x130>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d009      	beq.n	800d820 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d80c:	2301      	movs	r3, #1
 800d80e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d810:	4b0f      	ldr	r3, [pc, #60]	; (800d850 <xTaskResumeAll+0x138>)
 800d812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d816:	601a      	str	r2, [r3, #0]
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d820:	f001 fac0 	bl	800eda4 <vPortExitCritical>

	return xAlreadyYielded;
 800d824:	68bb      	ldr	r3, [r7, #8]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	20000e00 	.word	0x20000e00
 800d834:	20000dd8 	.word	0x20000dd8
 800d838:	20000d98 	.word	0x20000d98
 800d83c:	20000de0 	.word	0x20000de0
 800d840:	20000908 	.word	0x20000908
 800d844:	20000904 	.word	0x20000904
 800d848:	20000dec 	.word	0x20000dec
 800d84c:	20000de8 	.word	0x20000de8
 800d850:	e000ed04 	.word	0xe000ed04

0800d854 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d85a:	4b05      	ldr	r3, [pc, #20]	; (800d870 <xTaskGetTickCount+0x1c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d860:	687b      	ldr	r3, [r7, #4]
}
 800d862:	4618      	mov	r0, r3
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	20000ddc 	.word	0x20000ddc

0800d874 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d87a:	f001 fb45 	bl	800ef08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d87e:	2300      	movs	r3, #0
 800d880:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d882:	4b04      	ldr	r3, [pc, #16]	; (800d894 <xTaskGetTickCountFromISR+0x20>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d888:	683b      	ldr	r3, [r7, #0]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20000ddc 	.word	0x20000ddc

0800d898 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8a2:	4b4f      	ldr	r3, [pc, #316]	; (800d9e0 <xTaskIncrementTick+0x148>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f040 808f 	bne.w	800d9ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d8ac:	4b4d      	ldr	r3, [pc, #308]	; (800d9e4 <xTaskIncrementTick+0x14c>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d8b4:	4a4b      	ldr	r2, [pc, #300]	; (800d9e4 <xTaskIncrementTick+0x14c>)
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d120      	bne.n	800d902 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d8c0:	4b49      	ldr	r3, [pc, #292]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00a      	beq.n	800d8e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ce:	f383 8811 	msr	BASEPRI, r3
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	f3bf 8f4f 	dsb	sy
 800d8da:	603b      	str	r3, [r7, #0]
}
 800d8dc:	bf00      	nop
 800d8de:	e7fe      	b.n	800d8de <xTaskIncrementTick+0x46>
 800d8e0:	4b41      	ldr	r3, [pc, #260]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	60fb      	str	r3, [r7, #12]
 800d8e6:	4b41      	ldr	r3, [pc, #260]	; (800d9ec <xTaskIncrementTick+0x154>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a3f      	ldr	r2, [pc, #252]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d8ec:	6013      	str	r3, [r2, #0]
 800d8ee:	4a3f      	ldr	r2, [pc, #252]	; (800d9ec <xTaskIncrementTick+0x154>)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6013      	str	r3, [r2, #0]
 800d8f4:	4b3e      	ldr	r3, [pc, #248]	; (800d9f0 <xTaskIncrementTick+0x158>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	4a3d      	ldr	r2, [pc, #244]	; (800d9f0 <xTaskIncrementTick+0x158>)
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	f000 fadb 	bl	800deb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d902:	4b3c      	ldr	r3, [pc, #240]	; (800d9f4 <xTaskIncrementTick+0x15c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d349      	bcc.n	800d9a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d90c:	4b36      	ldr	r3, [pc, #216]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d104      	bne.n	800d920 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d916:	4b37      	ldr	r3, [pc, #220]	; (800d9f4 <xTaskIncrementTick+0x15c>)
 800d918:	f04f 32ff 	mov.w	r2, #4294967295
 800d91c:	601a      	str	r2, [r3, #0]
					break;
 800d91e:	e03f      	b.n	800d9a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d920:	4b31      	ldr	r3, [pc, #196]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d930:	693a      	ldr	r2, [r7, #16]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	429a      	cmp	r2, r3
 800d936:	d203      	bcs.n	800d940 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d938:	4a2e      	ldr	r2, [pc, #184]	; (800d9f4 <xTaskIncrementTick+0x15c>)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d93e:	e02f      	b.n	800d9a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	3304      	adds	r3, #4
 800d944:	4618      	mov	r0, r3
 800d946:	f7fe fb53 	bl	800bff0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d004      	beq.n	800d95c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	3318      	adds	r3, #24
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe fb4a 	bl	800bff0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d960:	4b25      	ldr	r3, [pc, #148]	; (800d9f8 <xTaskIncrementTick+0x160>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	429a      	cmp	r2, r3
 800d966:	d903      	bls.n	800d970 <xTaskIncrementTick+0xd8>
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96c:	4a22      	ldr	r2, [pc, #136]	; (800d9f8 <xTaskIncrementTick+0x160>)
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d974:	4613      	mov	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4a1f      	ldr	r2, [pc, #124]	; (800d9fc <xTaskIncrementTick+0x164>)
 800d97e:	441a      	add	r2, r3
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	3304      	adds	r3, #4
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	f7fe fad5 	bl	800bf36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d990:	4b1b      	ldr	r3, [pc, #108]	; (800da00 <xTaskIncrementTick+0x168>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d996:	429a      	cmp	r2, r3
 800d998:	d3b8      	bcc.n	800d90c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d99a:	2301      	movs	r3, #1
 800d99c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d99e:	e7b5      	b.n	800d90c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d9a0:	4b17      	ldr	r3, [pc, #92]	; (800da00 <xTaskIncrementTick+0x168>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a6:	4915      	ldr	r1, [pc, #84]	; (800d9fc <xTaskIncrementTick+0x164>)
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	440b      	add	r3, r1
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d901      	bls.n	800d9bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d9bc:	4b11      	ldr	r3, [pc, #68]	; (800da04 <xTaskIncrementTick+0x16c>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d007      	beq.n	800d9d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	617b      	str	r3, [r7, #20]
 800d9c8:	e004      	b.n	800d9d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d9ca:	4b0f      	ldr	r3, [pc, #60]	; (800da08 <xTaskIncrementTick+0x170>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	4a0d      	ldr	r2, [pc, #52]	; (800da08 <xTaskIncrementTick+0x170>)
 800d9d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d9d4:	697b      	ldr	r3, [r7, #20]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	20000e00 	.word	0x20000e00
 800d9e4:	20000ddc 	.word	0x20000ddc
 800d9e8:	20000d90 	.word	0x20000d90
 800d9ec:	20000d94 	.word	0x20000d94
 800d9f0:	20000df0 	.word	0x20000df0
 800d9f4:	20000df8 	.word	0x20000df8
 800d9f8:	20000de0 	.word	0x20000de0
 800d9fc:	20000908 	.word	0x20000908
 800da00:	20000904 	.word	0x20000904
 800da04:	20000dec 	.word	0x20000dec
 800da08:	20000de8 	.word	0x20000de8

0800da0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da12:	4b2a      	ldr	r3, [pc, #168]	; (800dabc <vTaskSwitchContext+0xb0>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da1a:	4b29      	ldr	r3, [pc, #164]	; (800dac0 <vTaskSwitchContext+0xb4>)
 800da1c:	2201      	movs	r2, #1
 800da1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da20:	e046      	b.n	800dab0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800da22:	4b27      	ldr	r3, [pc, #156]	; (800dac0 <vTaskSwitchContext+0xb4>)
 800da24:	2200      	movs	r2, #0
 800da26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da28:	4b26      	ldr	r3, [pc, #152]	; (800dac4 <vTaskSwitchContext+0xb8>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	60fb      	str	r3, [r7, #12]
 800da2e:	e010      	b.n	800da52 <vTaskSwitchContext+0x46>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10a      	bne.n	800da4c <vTaskSwitchContext+0x40>
	__asm volatile
 800da36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3a:	f383 8811 	msr	BASEPRI, r3
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	607b      	str	r3, [r7, #4]
}
 800da48:	bf00      	nop
 800da4a:	e7fe      	b.n	800da4a <vTaskSwitchContext+0x3e>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	3b01      	subs	r3, #1
 800da50:	60fb      	str	r3, [r7, #12]
 800da52:	491d      	ldr	r1, [pc, #116]	; (800dac8 <vTaskSwitchContext+0xbc>)
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	4613      	mov	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4413      	add	r3, r2
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	440b      	add	r3, r1
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d0e4      	beq.n	800da30 <vTaskSwitchContext+0x24>
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	4613      	mov	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4a15      	ldr	r2, [pc, #84]	; (800dac8 <vTaskSwitchContext+0xbc>)
 800da72:	4413      	add	r3, r2
 800da74:	60bb      	str	r3, [r7, #8]
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	605a      	str	r2, [r3, #4]
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	685a      	ldr	r2, [r3, #4]
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	3308      	adds	r3, #8
 800da88:	429a      	cmp	r2, r3
 800da8a:	d104      	bne.n	800da96 <vTaskSwitchContext+0x8a>
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	605a      	str	r2, [r3, #4]
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	4a0b      	ldr	r2, [pc, #44]	; (800dacc <vTaskSwitchContext+0xc0>)
 800da9e:	6013      	str	r3, [r2, #0]
 800daa0:	4a08      	ldr	r2, [pc, #32]	; (800dac4 <vTaskSwitchContext+0xb8>)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800daa6:	4b09      	ldr	r3, [pc, #36]	; (800dacc <vTaskSwitchContext+0xc0>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3354      	adds	r3, #84	; 0x54
 800daac:	4a08      	ldr	r2, [pc, #32]	; (800dad0 <vTaskSwitchContext+0xc4>)
 800daae:	6013      	str	r3, [r2, #0]
}
 800dab0:	bf00      	nop
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	20000e00 	.word	0x20000e00
 800dac0:	20000dec 	.word	0x20000dec
 800dac4:	20000de0 	.word	0x20000de0
 800dac8:	20000908 	.word	0x20000908
 800dacc:	20000904 	.word	0x20000904
 800dad0:	200000f4 	.word	0x200000f4

0800dad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d10a      	bne.n	800dafa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae8:	f383 8811 	msr	BASEPRI, r3
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	60fb      	str	r3, [r7, #12]
}
 800daf6:	bf00      	nop
 800daf8:	e7fe      	b.n	800daf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dafa:	4b07      	ldr	r3, [pc, #28]	; (800db18 <vTaskPlaceOnEventList+0x44>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3318      	adds	r3, #24
 800db00:	4619      	mov	r1, r3
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7fe fa3b 	bl	800bf7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db08:	2101      	movs	r1, #1
 800db0a:	6838      	ldr	r0, [r7, #0]
 800db0c:	f000 fb8e 	bl	800e22c <prvAddCurrentTaskToDelayedList>
}
 800db10:	bf00      	nop
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	20000904 	.word	0x20000904

0800db1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d10a      	bne.n	800db44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800db2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db32:	f383 8811 	msr	BASEPRI, r3
 800db36:	f3bf 8f6f 	isb	sy
 800db3a:	f3bf 8f4f 	dsb	sy
 800db3e:	617b      	str	r3, [r7, #20]
}
 800db40:	bf00      	nop
 800db42:	e7fe      	b.n	800db42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db44:	4b0a      	ldr	r3, [pc, #40]	; (800db70 <vTaskPlaceOnEventListRestricted+0x54>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3318      	adds	r3, #24
 800db4a:	4619      	mov	r1, r3
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f7fe f9f2 	bl	800bf36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800db58:	f04f 33ff 	mov.w	r3, #4294967295
 800db5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	68b8      	ldr	r0, [r7, #8]
 800db62:	f000 fb63 	bl	800e22c <prvAddCurrentTaskToDelayedList>
	}
 800db66:	bf00      	nop
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	20000904 	.word	0x20000904

0800db74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10a      	bne.n	800dba0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	60fb      	str	r3, [r7, #12]
}
 800db9c:	bf00      	nop
 800db9e:	e7fe      	b.n	800db9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	3318      	adds	r3, #24
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fe fa23 	bl	800bff0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbaa:	4b1e      	ldr	r3, [pc, #120]	; (800dc24 <xTaskRemoveFromEventList+0xb0>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d11d      	bne.n	800dbee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fe fa1a 	bl	800bff0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc0:	4b19      	ldr	r3, [pc, #100]	; (800dc28 <xTaskRemoveFromEventList+0xb4>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d903      	bls.n	800dbd0 <xTaskRemoveFromEventList+0x5c>
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbcc:	4a16      	ldr	r2, [pc, #88]	; (800dc28 <xTaskRemoveFromEventList+0xb4>)
 800dbce:	6013      	str	r3, [r2, #0]
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	4a13      	ldr	r2, [pc, #76]	; (800dc2c <xTaskRemoveFromEventList+0xb8>)
 800dbde:	441a      	add	r2, r3
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	4610      	mov	r0, r2
 800dbe8:	f7fe f9a5 	bl	800bf36 <vListInsertEnd>
 800dbec:	e005      	b.n	800dbfa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	3318      	adds	r3, #24
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	480e      	ldr	r0, [pc, #56]	; (800dc30 <xTaskRemoveFromEventList+0xbc>)
 800dbf6:	f7fe f99e 	bl	800bf36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfe:	4b0d      	ldr	r3, [pc, #52]	; (800dc34 <xTaskRemoveFromEventList+0xc0>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d905      	bls.n	800dc14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc0c:	4b0a      	ldr	r3, [pc, #40]	; (800dc38 <xTaskRemoveFromEventList+0xc4>)
 800dc0e:	2201      	movs	r2, #1
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	e001      	b.n	800dc18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dc14:	2300      	movs	r3, #0
 800dc16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dc18:	697b      	ldr	r3, [r7, #20]
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3718      	adds	r7, #24
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	20000e00 	.word	0x20000e00
 800dc28:	20000de0 	.word	0x20000de0
 800dc2c:	20000908 	.word	0x20000908
 800dc30:	20000d98 	.word	0x20000d98
 800dc34:	20000904 	.word	0x20000904
 800dc38:	20000dec 	.word	0x20000dec

0800dc3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc44:	4b06      	ldr	r3, [pc, #24]	; (800dc60 <vTaskInternalSetTimeOutState+0x24>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc4c:	4b05      	ldr	r3, [pc, #20]	; (800dc64 <vTaskInternalSetTimeOutState+0x28>)
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	605a      	str	r2, [r3, #4]
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	20000df0 	.word	0x20000df0
 800dc64:	20000ddc 	.word	0x20000ddc

0800dc68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b088      	sub	sp, #32
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10a      	bne.n	800dc8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7c:	f383 8811 	msr	BASEPRI, r3
 800dc80:	f3bf 8f6f 	isb	sy
 800dc84:	f3bf 8f4f 	dsb	sy
 800dc88:	613b      	str	r3, [r7, #16]
}
 800dc8a:	bf00      	nop
 800dc8c:	e7fe      	b.n	800dc8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10a      	bne.n	800dcaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	60fb      	str	r3, [r7, #12]
}
 800dca6:	bf00      	nop
 800dca8:	e7fe      	b.n	800dca8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dcaa:	f001 f84b 	bl	800ed44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dcae:	4b1d      	ldr	r3, [pc, #116]	; (800dd24 <xTaskCheckForTimeOut+0xbc>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	69ba      	ldr	r2, [r7, #24]
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc6:	d102      	bne.n	800dcce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	61fb      	str	r3, [r7, #28]
 800dccc:	e023      	b.n	800dd16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	4b15      	ldr	r3, [pc, #84]	; (800dd28 <xTaskCheckForTimeOut+0xc0>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d007      	beq.n	800dcea <xTaskCheckForTimeOut+0x82>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	69ba      	ldr	r2, [r7, #24]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d302      	bcc.n	800dcea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dce4:	2301      	movs	r3, #1
 800dce6:	61fb      	str	r3, [r7, #28]
 800dce8:	e015      	b.n	800dd16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	697a      	ldr	r2, [r7, #20]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d20b      	bcs.n	800dd0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	1ad2      	subs	r2, r2, r3
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7ff ff9b 	bl	800dc3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	61fb      	str	r3, [r7, #28]
 800dd0a:	e004      	b.n	800dd16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dd12:	2301      	movs	r3, #1
 800dd14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dd16:	f001 f845 	bl	800eda4 <vPortExitCritical>

	return xReturn;
 800dd1a:	69fb      	ldr	r3, [r7, #28]
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3720      	adds	r7, #32
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	20000ddc 	.word	0x20000ddc
 800dd28:	20000df0 	.word	0x20000df0

0800dd2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dd30:	4b03      	ldr	r3, [pc, #12]	; (800dd40 <vTaskMissedYield+0x14>)
 800dd32:	2201      	movs	r2, #1
 800dd34:	601a      	str	r2, [r3, #0]
}
 800dd36:	bf00      	nop
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	20000dec 	.word	0x20000dec

0800dd44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd4c:	f000 f852 	bl	800ddf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd50:	4b06      	ldr	r3, [pc, #24]	; (800dd6c <prvIdleTask+0x28>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d9f9      	bls.n	800dd4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800dd58:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <prvIdleTask+0x2c>)
 800dd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd5e:	601a      	str	r2, [r3, #0]
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dd68:	e7f0      	b.n	800dd4c <prvIdleTask+0x8>
 800dd6a:	bf00      	nop
 800dd6c:	20000908 	.word	0x20000908
 800dd70:	e000ed04 	.word	0xe000ed04

0800dd74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	607b      	str	r3, [r7, #4]
 800dd7e:	e00c      	b.n	800dd9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	4613      	mov	r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4413      	add	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4a12      	ldr	r2, [pc, #72]	; (800ddd4 <prvInitialiseTaskLists+0x60>)
 800dd8c:	4413      	add	r3, r2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe f8a4 	bl	800bedc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3301      	adds	r3, #1
 800dd98:	607b      	str	r3, [r7, #4]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2b37      	cmp	r3, #55	; 0x37
 800dd9e:	d9ef      	bls.n	800dd80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dda0:	480d      	ldr	r0, [pc, #52]	; (800ddd8 <prvInitialiseTaskLists+0x64>)
 800dda2:	f7fe f89b 	bl	800bedc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dda6:	480d      	ldr	r0, [pc, #52]	; (800dddc <prvInitialiseTaskLists+0x68>)
 800dda8:	f7fe f898 	bl	800bedc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ddac:	480c      	ldr	r0, [pc, #48]	; (800dde0 <prvInitialiseTaskLists+0x6c>)
 800ddae:	f7fe f895 	bl	800bedc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ddb2:	480c      	ldr	r0, [pc, #48]	; (800dde4 <prvInitialiseTaskLists+0x70>)
 800ddb4:	f7fe f892 	bl	800bedc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ddb8:	480b      	ldr	r0, [pc, #44]	; (800dde8 <prvInitialiseTaskLists+0x74>)
 800ddba:	f7fe f88f 	bl	800bedc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ddbe:	4b0b      	ldr	r3, [pc, #44]	; (800ddec <prvInitialiseTaskLists+0x78>)
 800ddc0:	4a05      	ldr	r2, [pc, #20]	; (800ddd8 <prvInitialiseTaskLists+0x64>)
 800ddc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ddc4:	4b0a      	ldr	r3, [pc, #40]	; (800ddf0 <prvInitialiseTaskLists+0x7c>)
 800ddc6:	4a05      	ldr	r2, [pc, #20]	; (800dddc <prvInitialiseTaskLists+0x68>)
 800ddc8:	601a      	str	r2, [r3, #0]
}
 800ddca:	bf00      	nop
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	20000908 	.word	0x20000908
 800ddd8:	20000d68 	.word	0x20000d68
 800dddc:	20000d7c 	.word	0x20000d7c
 800dde0:	20000d98 	.word	0x20000d98
 800dde4:	20000dac 	.word	0x20000dac
 800dde8:	20000dc4 	.word	0x20000dc4
 800ddec:	20000d90 	.word	0x20000d90
 800ddf0:	20000d94 	.word	0x20000d94

0800ddf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddfa:	e019      	b.n	800de30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ddfc:	f000 ffa2 	bl	800ed44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de00:	4b10      	ldr	r3, [pc, #64]	; (800de44 <prvCheckTasksWaitingTermination+0x50>)
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	3304      	adds	r3, #4
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7fe f8ef 	bl	800bff0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de12:	4b0d      	ldr	r3, [pc, #52]	; (800de48 <prvCheckTasksWaitingTermination+0x54>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3b01      	subs	r3, #1
 800de18:	4a0b      	ldr	r2, [pc, #44]	; (800de48 <prvCheckTasksWaitingTermination+0x54>)
 800de1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800de1c:	4b0b      	ldr	r3, [pc, #44]	; (800de4c <prvCheckTasksWaitingTermination+0x58>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	3b01      	subs	r3, #1
 800de22:	4a0a      	ldr	r2, [pc, #40]	; (800de4c <prvCheckTasksWaitingTermination+0x58>)
 800de24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800de26:	f000 ffbd 	bl	800eda4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 f810 	bl	800de50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de30:	4b06      	ldr	r3, [pc, #24]	; (800de4c <prvCheckTasksWaitingTermination+0x58>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1e1      	bne.n	800ddfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	20000dac 	.word	0x20000dac
 800de48:	20000dd8 	.word	0x20000dd8
 800de4c:	20000dc0 	.word	0x20000dc0

0800de50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3354      	adds	r3, #84	; 0x54
 800de5c:	4618      	mov	r0, r3
 800de5e:	f011 ff11 	bl	801fc84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d108      	bne.n	800de7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de70:	4618      	mov	r0, r3
 800de72:	f001 f955 	bl	800f120 <vPortFree>
				vPortFree( pxTCB );
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f001 f952 	bl	800f120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de7c:	e018      	b.n	800deb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800de84:	2b01      	cmp	r3, #1
 800de86:	d103      	bne.n	800de90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f001 f949 	bl	800f120 <vPortFree>
	}
 800de8e:	e00f      	b.n	800deb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800de96:	2b02      	cmp	r3, #2
 800de98:	d00a      	beq.n	800deb0 <prvDeleteTCB+0x60>
	__asm volatile
 800de9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	60fb      	str	r3, [r7, #12]
}
 800deac:	bf00      	nop
 800deae:	e7fe      	b.n	800deae <prvDeleteTCB+0x5e>
	}
 800deb0:	bf00      	nop
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800debe:	4b0c      	ldr	r3, [pc, #48]	; (800def0 <prvResetNextTaskUnblockTime+0x38>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d104      	bne.n	800ded2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dec8:	4b0a      	ldr	r3, [pc, #40]	; (800def4 <prvResetNextTaskUnblockTime+0x3c>)
 800deca:	f04f 32ff 	mov.w	r2, #4294967295
 800dece:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ded0:	e008      	b.n	800dee4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ded2:	4b07      	ldr	r3, [pc, #28]	; (800def0 <prvResetNextTaskUnblockTime+0x38>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	4a04      	ldr	r2, [pc, #16]	; (800def4 <prvResetNextTaskUnblockTime+0x3c>)
 800dee2:	6013      	str	r3, [r2, #0]
}
 800dee4:	bf00      	nop
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr
 800def0:	20000d90 	.word	0x20000d90
 800def4:	20000df8 	.word	0x20000df8

0800def8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800defe:	4b05      	ldr	r3, [pc, #20]	; (800df14 <xTaskGetCurrentTaskHandle+0x1c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	607b      	str	r3, [r7, #4]

		return xReturn;
 800df04:	687b      	ldr	r3, [r7, #4]
	}
 800df06:	4618      	mov	r0, r3
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	20000904 	.word	0x20000904

0800df18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800df1e:	4b0b      	ldr	r3, [pc, #44]	; (800df4c <xTaskGetSchedulerState+0x34>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d102      	bne.n	800df2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800df26:	2301      	movs	r3, #1
 800df28:	607b      	str	r3, [r7, #4]
 800df2a:	e008      	b.n	800df3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df2c:	4b08      	ldr	r3, [pc, #32]	; (800df50 <xTaskGetSchedulerState+0x38>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d102      	bne.n	800df3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800df34:	2302      	movs	r3, #2
 800df36:	607b      	str	r3, [r7, #4]
 800df38:	e001      	b.n	800df3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800df3a:	2300      	movs	r3, #0
 800df3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800df3e:	687b      	ldr	r3, [r7, #4]
	}
 800df40:	4618      	mov	r0, r3
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	20000de4 	.word	0x20000de4
 800df50:	20000e00 	.word	0x20000e00

0800df54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800df60:	2300      	movs	r3, #0
 800df62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d051      	beq.n	800e00e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df6e:	4b2a      	ldr	r3, [pc, #168]	; (800e018 <xTaskPriorityInherit+0xc4>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df74:	429a      	cmp	r2, r3
 800df76:	d241      	bcs.n	800dffc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	699b      	ldr	r3, [r3, #24]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	db06      	blt.n	800df8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df80:	4b25      	ldr	r3, [pc, #148]	; (800e018 <xTaskPriorityInherit+0xc4>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	6959      	ldr	r1, [r3, #20]
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df96:	4613      	mov	r3, r2
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	4413      	add	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4a1f      	ldr	r2, [pc, #124]	; (800e01c <xTaskPriorityInherit+0xc8>)
 800dfa0:	4413      	add	r3, r2
 800dfa2:	4299      	cmp	r1, r3
 800dfa4:	d122      	bne.n	800dfec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fe f820 	bl	800bff0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dfb0:	4b19      	ldr	r3, [pc, #100]	; (800e018 <xTaskPriorityInherit+0xc4>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfbe:	4b18      	ldr	r3, [pc, #96]	; (800e020 <xTaskPriorityInherit+0xcc>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d903      	bls.n	800dfce <xTaskPriorityInherit+0x7a>
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfca:	4a15      	ldr	r2, [pc, #84]	; (800e020 <xTaskPriorityInherit+0xcc>)
 800dfcc:	6013      	str	r3, [r2, #0]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4a10      	ldr	r2, [pc, #64]	; (800e01c <xTaskPriorityInherit+0xc8>)
 800dfdc:	441a      	add	r2, r3
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	4610      	mov	r0, r2
 800dfe6:	f7fd ffa6 	bl	800bf36 <vListInsertEnd>
 800dfea:	e004      	b.n	800dff6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dfec:	4b0a      	ldr	r3, [pc, #40]	; (800e018 <xTaskPriorityInherit+0xc4>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dff6:	2301      	movs	r3, #1
 800dff8:	60fb      	str	r3, [r7, #12]
 800dffa:	e008      	b.n	800e00e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e000:	4b05      	ldr	r3, [pc, #20]	; (800e018 <xTaskPriorityInherit+0xc4>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e006:	429a      	cmp	r2, r3
 800e008:	d201      	bcs.n	800e00e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e00a:	2301      	movs	r3, #1
 800e00c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e00e:	68fb      	ldr	r3, [r7, #12]
	}
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	20000904 	.word	0x20000904
 800e01c:	20000908 	.word	0x20000908
 800e020:	20000de0 	.word	0x20000de0

0800e024 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e030:	2300      	movs	r3, #0
 800e032:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d056      	beq.n	800e0e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e03a:	4b2e      	ldr	r3, [pc, #184]	; (800e0f4 <xTaskPriorityDisinherit+0xd0>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	429a      	cmp	r2, r3
 800e042:	d00a      	beq.n	800e05a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	60fb      	str	r3, [r7, #12]
}
 800e056:	bf00      	nop
 800e058:	e7fe      	b.n	800e058 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10a      	bne.n	800e078 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	60bb      	str	r3, [r7, #8]
}
 800e074:	bf00      	nop
 800e076:	e7fe      	b.n	800e076 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e07c:	1e5a      	subs	r2, r3, #1
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d02c      	beq.n	800e0e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e092:	2b00      	cmp	r3, #0
 800e094:	d128      	bne.n	800e0e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	3304      	adds	r3, #4
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7fd ffa8 	bl	800bff0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b8:	4b0f      	ldr	r3, [pc, #60]	; (800e0f8 <xTaskPriorityDisinherit+0xd4>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d903      	bls.n	800e0c8 <xTaskPriorityDisinherit+0xa4>
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c4:	4a0c      	ldr	r2, [pc, #48]	; (800e0f8 <xTaskPriorityDisinherit+0xd4>)
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4a09      	ldr	r2, [pc, #36]	; (800e0fc <xTaskPriorityDisinherit+0xd8>)
 800e0d6:	441a      	add	r2, r3
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	3304      	adds	r3, #4
 800e0dc:	4619      	mov	r1, r3
 800e0de:	4610      	mov	r0, r2
 800e0e0:	f7fd ff29 	bl	800bf36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0e8:	697b      	ldr	r3, [r7, #20]
	}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	20000904 	.word	0x20000904
 800e0f8:	20000de0 	.word	0x20000de0
 800e0fc:	20000908 	.word	0x20000908

0800e100 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e100:	b580      	push	{r7, lr}
 800e102:	b088      	sub	sp, #32
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e10e:	2301      	movs	r3, #1
 800e110:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d06a      	beq.n	800e1ee <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10a      	bne.n	800e136 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	60fb      	str	r3, [r7, #12]
}
 800e132:	bf00      	nop
 800e134:	e7fe      	b.n	800e134 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e13a:	683a      	ldr	r2, [r7, #0]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d902      	bls.n	800e146 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	61fb      	str	r3, [r7, #28]
 800e144:	e002      	b.n	800e14c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e14a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e150:	69fa      	ldr	r2, [r7, #28]
 800e152:	429a      	cmp	r2, r3
 800e154:	d04b      	beq.n	800e1ee <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e15a:	697a      	ldr	r2, [r7, #20]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d146      	bne.n	800e1ee <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e160:	4b25      	ldr	r3, [pc, #148]	; (800e1f8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	69ba      	ldr	r2, [r7, #24]
 800e166:	429a      	cmp	r2, r3
 800e168:	d10a      	bne.n	800e180 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	60bb      	str	r3, [r7, #8]
}
 800e17c:	bf00      	nop
 800e17e:	e7fe      	b.n	800e17e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e184:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	69fa      	ldr	r2, [r7, #28]
 800e18a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	2b00      	cmp	r3, #0
 800e192:	db04      	blt.n	800e19e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	6959      	ldr	r1, [r3, #20]
 800e1a2:	693a      	ldr	r2, [r7, #16]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4a13      	ldr	r2, [pc, #76]	; (800e1fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e1ae:	4413      	add	r3, r2
 800e1b0:	4299      	cmp	r1, r3
 800e1b2:	d11c      	bne.n	800e1ee <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fd ff19 	bl	800bff0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c2:	4b0f      	ldr	r3, [pc, #60]	; (800e200 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d903      	bls.n	800e1d2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ce:	4a0c      	ldr	r2, [pc, #48]	; (800e200 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e1d0:	6013      	str	r3, [r2, #0]
 800e1d2:	69bb      	ldr	r3, [r7, #24]
 800e1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	4413      	add	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4a07      	ldr	r2, [pc, #28]	; (800e1fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e1e0:	441a      	add	r2, r3
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	f7fd fea4 	bl	800bf36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1ee:	bf00      	nop
 800e1f0:	3720      	adds	r7, #32
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	20000904 	.word	0x20000904
 800e1fc:	20000908 	.word	0x20000908
 800e200:	20000de0 	.word	0x20000de0

0800e204 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e204:	b480      	push	{r7}
 800e206:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e208:	4b07      	ldr	r3, [pc, #28]	; (800e228 <pvTaskIncrementMutexHeldCount+0x24>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d004      	beq.n	800e21a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e210:	4b05      	ldr	r3, [pc, #20]	; (800e228 <pvTaskIncrementMutexHeldCount+0x24>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e216:	3201      	adds	r2, #1
 800e218:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e21a:	4b03      	ldr	r3, [pc, #12]	; (800e228 <pvTaskIncrementMutexHeldCount+0x24>)
 800e21c:	681b      	ldr	r3, [r3, #0]
	}
 800e21e:	4618      	mov	r0, r3
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr
 800e228:	20000904 	.word	0x20000904

0800e22c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e236:	4b21      	ldr	r3, [pc, #132]	; (800e2bc <prvAddCurrentTaskToDelayedList+0x90>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e23c:	4b20      	ldr	r3, [pc, #128]	; (800e2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	3304      	adds	r3, #4
 800e242:	4618      	mov	r0, r3
 800e244:	f7fd fed4 	bl	800bff0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24e:	d10a      	bne.n	800e266 <prvAddCurrentTaskToDelayedList+0x3a>
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d007      	beq.n	800e266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e256:	4b1a      	ldr	r3, [pc, #104]	; (800e2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3304      	adds	r3, #4
 800e25c:	4619      	mov	r1, r3
 800e25e:	4819      	ldr	r0, [pc, #100]	; (800e2c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800e260:	f7fd fe69 	bl	800bf36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e264:	e026      	b.n	800e2b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	4413      	add	r3, r2
 800e26c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e26e:	4b14      	ldr	r3, [pc, #80]	; (800e2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d209      	bcs.n	800e292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e27e:	4b12      	ldr	r3, [pc, #72]	; (800e2c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	3304      	adds	r3, #4
 800e288:	4619      	mov	r1, r3
 800e28a:	4610      	mov	r0, r2
 800e28c:	f7fd fe77 	bl	800bf7e <vListInsert>
}
 800e290:	e010      	b.n	800e2b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e292:	4b0e      	ldr	r3, [pc, #56]	; (800e2cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	4b0a      	ldr	r3, [pc, #40]	; (800e2c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3304      	adds	r3, #4
 800e29c:	4619      	mov	r1, r3
 800e29e:	4610      	mov	r0, r2
 800e2a0:	f7fd fe6d 	bl	800bf7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2a4:	4b0a      	ldr	r3, [pc, #40]	; (800e2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d202      	bcs.n	800e2b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e2ae:	4a08      	ldr	r2, [pc, #32]	; (800e2d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	6013      	str	r3, [r2, #0]
}
 800e2b4:	bf00      	nop
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	20000ddc 	.word	0x20000ddc
 800e2c0:	20000904 	.word	0x20000904
 800e2c4:	20000dc4 	.word	0x20000dc4
 800e2c8:	20000d94 	.word	0x20000d94
 800e2cc:	20000d90 	.word	0x20000d90
 800e2d0:	20000df8 	.word	0x20000df8

0800e2d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b08a      	sub	sp, #40	; 0x28
 800e2d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e2de:	f000 fba1 	bl	800ea24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e2e2:	4b1c      	ldr	r3, [pc, #112]	; (800e354 <xTimerCreateTimerTask+0x80>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d021      	beq.n	800e32e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e2f2:	1d3a      	adds	r2, r7, #4
 800e2f4:	f107 0108 	add.w	r1, r7, #8
 800e2f8:	f107 030c 	add.w	r3, r7, #12
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7fd fdd3 	bl	800bea8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e302:	6879      	ldr	r1, [r7, #4]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	9202      	str	r2, [sp, #8]
 800e30a:	9301      	str	r3, [sp, #4]
 800e30c:	2302      	movs	r3, #2
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	2300      	movs	r3, #0
 800e312:	460a      	mov	r2, r1
 800e314:	4910      	ldr	r1, [pc, #64]	; (800e358 <xTimerCreateTimerTask+0x84>)
 800e316:	4811      	ldr	r0, [pc, #68]	; (800e35c <xTimerCreateTimerTask+0x88>)
 800e318:	f7fe ff94 	bl	800d244 <xTaskCreateStatic>
 800e31c:	4603      	mov	r3, r0
 800e31e:	4a10      	ldr	r2, [pc, #64]	; (800e360 <xTimerCreateTimerTask+0x8c>)
 800e320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e322:	4b0f      	ldr	r3, [pc, #60]	; (800e360 <xTimerCreateTimerTask+0x8c>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e32a:	2301      	movs	r3, #1
 800e32c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d10a      	bne.n	800e34a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	613b      	str	r3, [r7, #16]
}
 800e346:	bf00      	nop
 800e348:	e7fe      	b.n	800e348 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e34a:	697b      	ldr	r3, [r7, #20]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3718      	adds	r7, #24
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	20000e34 	.word	0x20000e34
 800e358:	08020f40 	.word	0x08020f40
 800e35c:	0800e5cd 	.word	0x0800e5cd
 800e360:	20000e38 	.word	0x20000e38

0800e364 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e364:	b580      	push	{r7, lr}
 800e366:	b088      	sub	sp, #32
 800e368:	af02      	add	r7, sp, #8
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
 800e370:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e372:	202c      	movs	r0, #44	; 0x2c
 800e374:	f000 fe08 	bl	800ef88 <pvPortMalloc>
 800e378:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d00d      	beq.n	800e39c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	2200      	movs	r2, #0
 800e384:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	68b9      	ldr	r1, [r7, #8]
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f000 f843 	bl	800e422 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e39c:	697b      	ldr	r3, [r7, #20]
	}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3718      	adds	r7, #24
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b08a      	sub	sp, #40	; 0x28
 800e3aa:	af02      	add	r7, sp, #8
 800e3ac:	60f8      	str	r0, [r7, #12]
 800e3ae:	60b9      	str	r1, [r7, #8]
 800e3b0:	607a      	str	r2, [r7, #4]
 800e3b2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e3b4:	232c      	movs	r3, #44	; 0x2c
 800e3b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	2b2c      	cmp	r3, #44	; 0x2c
 800e3bc:	d00a      	beq.n	800e3d4 <xTimerCreateStatic+0x2e>
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	61bb      	str	r3, [r7, #24]
}
 800e3d0:	bf00      	nop
 800e3d2:	e7fe      	b.n	800e3d2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e3d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10a      	bne.n	800e3f2 <xTimerCreateStatic+0x4c>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	617b      	str	r3, [r7, #20]
}
 800e3ee:	bf00      	nop
 800e3f0:	e7fe      	b.n	800e3f0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00d      	beq.n	800e418 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	2202      	movs	r2, #2
 800e400:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	9301      	str	r3, [sp, #4]
 800e408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	68b9      	ldr	r1, [r7, #8]
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f000 f805 	bl	800e422 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e418:	69fb      	ldr	r3, [r7, #28]
	}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3720      	adds	r7, #32
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b086      	sub	sp, #24
 800e426:	af00      	add	r7, sp, #0
 800e428:	60f8      	str	r0, [r7, #12]
 800e42a:	60b9      	str	r1, [r7, #8]
 800e42c:	607a      	str	r2, [r7, #4]
 800e42e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10a      	bne.n	800e44c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43a:	f383 8811 	msr	BASEPRI, r3
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	617b      	str	r3, [r7, #20]
}
 800e448:	bf00      	nop
 800e44a:	e7fe      	b.n	800e44a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d01e      	beq.n	800e490 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e452:	f000 fae7 	bl	800ea24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	6a3a      	ldr	r2, [r7, #32]
 800e46c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e470:	3304      	adds	r3, #4
 800e472:	4618      	mov	r0, r3
 800e474:	f7fd fd52 	bl	800bf1c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d008      	beq.n	800e490 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e484:	f043 0304 	orr.w	r3, r3, #4
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e490:	bf00      	nop
 800e492:	3718      	adds	r7, #24
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08a      	sub	sp, #40	; 0x28
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
 800e4a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d10a      	bne.n	800e4c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b4:	f383 8811 	msr	BASEPRI, r3
 800e4b8:	f3bf 8f6f 	isb	sy
 800e4bc:	f3bf 8f4f 	dsb	sy
 800e4c0:	623b      	str	r3, [r7, #32]
}
 800e4c2:	bf00      	nop
 800e4c4:	e7fe      	b.n	800e4c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e4c6:	4b1a      	ldr	r3, [pc, #104]	; (800e530 <xTimerGenericCommand+0x98>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d02a      	beq.n	800e524 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b05      	cmp	r3, #5
 800e4de:	dc18      	bgt.n	800e512 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e4e0:	f7ff fd1a 	bl	800df18 <xTaskGetSchedulerState>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d109      	bne.n	800e4fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4ea:	4b11      	ldr	r3, [pc, #68]	; (800e530 <xTimerGenericCommand+0x98>)
 800e4ec:	6818      	ldr	r0, [r3, #0]
 800e4ee:	f107 0110 	add.w	r1, r7, #16
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4f6:	f7fe f803 	bl	800c500 <xQueueGenericSend>
 800e4fa:	6278      	str	r0, [r7, #36]	; 0x24
 800e4fc:	e012      	b.n	800e524 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4fe:	4b0c      	ldr	r3, [pc, #48]	; (800e530 <xTimerGenericCommand+0x98>)
 800e500:	6818      	ldr	r0, [r3, #0]
 800e502:	f107 0110 	add.w	r1, r7, #16
 800e506:	2300      	movs	r3, #0
 800e508:	2200      	movs	r2, #0
 800e50a:	f7fd fff9 	bl	800c500 <xQueueGenericSend>
 800e50e:	6278      	str	r0, [r7, #36]	; 0x24
 800e510:	e008      	b.n	800e524 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e512:	4b07      	ldr	r3, [pc, #28]	; (800e530 <xTimerGenericCommand+0x98>)
 800e514:	6818      	ldr	r0, [r3, #0]
 800e516:	f107 0110 	add.w	r1, r7, #16
 800e51a:	2300      	movs	r3, #0
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	f7fe f8ed 	bl	800c6fc <xQueueGenericSendFromISR>
 800e522:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e526:	4618      	mov	r0, r3
 800e528:	3728      	adds	r7, #40	; 0x28
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	20000e34 	.word	0x20000e34

0800e534 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b088      	sub	sp, #32
 800e538:	af02      	add	r7, sp, #8
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e53e:	4b22      	ldr	r3, [pc, #136]	; (800e5c8 <prvProcessExpiredTimer+0x94>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	3304      	adds	r3, #4
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7fd fd4f 	bl	800bff0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e558:	f003 0304 	and.w	r3, r3, #4
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d022      	beq.n	800e5a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	699a      	ldr	r2, [r3, #24]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	18d1      	adds	r1, r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	683a      	ldr	r2, [r7, #0]
 800e56c:	6978      	ldr	r0, [r7, #20]
 800e56e:	f000 f8d1 	bl	800e714 <prvInsertTimerInActiveList>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d01f      	beq.n	800e5b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e578:	2300      	movs	r3, #0
 800e57a:	9300      	str	r3, [sp, #0]
 800e57c:	2300      	movs	r3, #0
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	2100      	movs	r1, #0
 800e582:	6978      	ldr	r0, [r7, #20]
 800e584:	f7ff ff88 	bl	800e498 <xTimerGenericCommand>
 800e588:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d113      	bne.n	800e5b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	60fb      	str	r3, [r7, #12]
}
 800e5a2:	bf00      	nop
 800e5a4:	e7fe      	b.n	800e5a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5ac:	f023 0301 	bic.w	r3, r3, #1
 800e5b0:	b2da      	uxtb	r2, r3
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	6a1b      	ldr	r3, [r3, #32]
 800e5bc:	6978      	ldr	r0, [r7, #20]
 800e5be:	4798      	blx	r3
}
 800e5c0:	bf00      	nop
 800e5c2:	3718      	adds	r7, #24
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	20000e2c 	.word	0x20000e2c

0800e5cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5d4:	f107 0308 	add.w	r3, r7, #8
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 f857 	bl	800e68c <prvGetNextExpireTime>
 800e5de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f000 f803 	bl	800e5f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5ea:	f000 f8d5 	bl	800e798 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5ee:	e7f1      	b.n	800e5d4 <prvTimerTask+0x8>

0800e5f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5fa:	f7ff f87f 	bl	800d6fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5fe:	f107 0308 	add.w	r3, r7, #8
 800e602:	4618      	mov	r0, r3
 800e604:	f000 f866 	bl	800e6d4 <prvSampleTimeNow>
 800e608:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d130      	bne.n	800e672 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10a      	bne.n	800e62c <prvProcessTimerOrBlockTask+0x3c>
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d806      	bhi.n	800e62c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e61e:	f7ff f87b 	bl	800d718 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e622:	68f9      	ldr	r1, [r7, #12]
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7ff ff85 	bl	800e534 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e62a:	e024      	b.n	800e676 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d008      	beq.n	800e644 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e632:	4b13      	ldr	r3, [pc, #76]	; (800e680 <prvProcessTimerOrBlockTask+0x90>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <prvProcessTimerOrBlockTask+0x50>
 800e63c:	2301      	movs	r3, #1
 800e63e:	e000      	b.n	800e642 <prvProcessTimerOrBlockTask+0x52>
 800e640:	2300      	movs	r3, #0
 800e642:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e644:	4b0f      	ldr	r3, [pc, #60]	; (800e684 <prvProcessTimerOrBlockTask+0x94>)
 800e646:	6818      	ldr	r0, [r3, #0]
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	683a      	ldr	r2, [r7, #0]
 800e650:	4619      	mov	r1, r3
 800e652:	f7fe fdc3 	bl	800d1dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e656:	f7ff f85f 	bl	800d718 <xTaskResumeAll>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d10a      	bne.n	800e676 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e660:	4b09      	ldr	r3, [pc, #36]	; (800e688 <prvProcessTimerOrBlockTask+0x98>)
 800e662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e666:	601a      	str	r2, [r3, #0]
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	f3bf 8f6f 	isb	sy
}
 800e670:	e001      	b.n	800e676 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e672:	f7ff f851 	bl	800d718 <xTaskResumeAll>
}
 800e676:	bf00      	nop
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	20000e30 	.word	0x20000e30
 800e684:	20000e34 	.word	0x20000e34
 800e688:	e000ed04 	.word	0xe000ed04

0800e68c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e68c:	b480      	push	{r7}
 800e68e:	b085      	sub	sp, #20
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e694:	4b0e      	ldr	r3, [pc, #56]	; (800e6d0 <prvGetNextExpireTime+0x44>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d101      	bne.n	800e6a2 <prvGetNextExpireTime+0x16>
 800e69e:	2201      	movs	r2, #1
 800e6a0:	e000      	b.n	800e6a4 <prvGetNextExpireTime+0x18>
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d105      	bne.n	800e6bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6b0:	4b07      	ldr	r3, [pc, #28]	; (800e6d0 <prvGetNextExpireTime+0x44>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	60fb      	str	r3, [r7, #12]
 800e6ba:	e001      	b.n	800e6c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3714      	adds	r7, #20
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	20000e2c 	.word	0x20000e2c

0800e6d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e6dc:	f7ff f8ba 	bl	800d854 <xTaskGetTickCount>
 800e6e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e6e2:	4b0b      	ldr	r3, [pc, #44]	; (800e710 <prvSampleTimeNow+0x3c>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d205      	bcs.n	800e6f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6ec:	f000 f936 	bl	800e95c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	601a      	str	r2, [r3, #0]
 800e6f6:	e002      	b.n	800e6fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6fe:	4a04      	ldr	r2, [pc, #16]	; (800e710 <prvSampleTimeNow+0x3c>)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e704:	68fb      	ldr	r3, [r7, #12]
}
 800e706:	4618      	mov	r0, r3
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	20000e3c 	.word	0x20000e3c

0800e714 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
 800e720:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e722:	2300      	movs	r3, #0
 800e724:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e732:	68ba      	ldr	r2, [r7, #8]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	429a      	cmp	r2, r3
 800e738:	d812      	bhi.n	800e760 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	1ad2      	subs	r2, r2, r3
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	429a      	cmp	r2, r3
 800e746:	d302      	bcc.n	800e74e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e748:	2301      	movs	r3, #1
 800e74a:	617b      	str	r3, [r7, #20]
 800e74c:	e01b      	b.n	800e786 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e74e:	4b10      	ldr	r3, [pc, #64]	; (800e790 <prvInsertTimerInActiveList+0x7c>)
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3304      	adds	r3, #4
 800e756:	4619      	mov	r1, r3
 800e758:	4610      	mov	r0, r2
 800e75a:	f7fd fc10 	bl	800bf7e <vListInsert>
 800e75e:	e012      	b.n	800e786 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	429a      	cmp	r2, r3
 800e766:	d206      	bcs.n	800e776 <prvInsertTimerInActiveList+0x62>
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d302      	bcc.n	800e776 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e770:	2301      	movs	r3, #1
 800e772:	617b      	str	r3, [r7, #20]
 800e774:	e007      	b.n	800e786 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e776:	4b07      	ldr	r3, [pc, #28]	; (800e794 <prvInsertTimerInActiveList+0x80>)
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	3304      	adds	r3, #4
 800e77e:	4619      	mov	r1, r3
 800e780:	4610      	mov	r0, r2
 800e782:	f7fd fbfc 	bl	800bf7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e786:	697b      	ldr	r3, [r7, #20]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	20000e30 	.word	0x20000e30
 800e794:	20000e2c 	.word	0x20000e2c

0800e798 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b08e      	sub	sp, #56	; 0x38
 800e79c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e79e:	e0ca      	b.n	800e936 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	da18      	bge.n	800e7d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e7a6:	1d3b      	adds	r3, r7, #4
 800e7a8:	3304      	adds	r3, #4
 800e7aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10a      	bne.n	800e7c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	61fb      	str	r3, [r7, #28]
}
 800e7c4:	bf00      	nop
 800e7c6:	e7fe      	b.n	800e7c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ce:	6850      	ldr	r0, [r2, #4]
 800e7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7d2:	6892      	ldr	r2, [r2, #8]
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f2c0 80aa 	blt.w	800e934 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	695b      	ldr	r3, [r3, #20]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d004      	beq.n	800e7f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7fd fbfd 	bl	800bff0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7f6:	463b      	mov	r3, r7
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7ff ff6b 	bl	800e6d4 <prvSampleTimeNow>
 800e7fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b09      	cmp	r3, #9
 800e804:	f200 8097 	bhi.w	800e936 <prvProcessReceivedCommands+0x19e>
 800e808:	a201      	add	r2, pc, #4	; (adr r2, 800e810 <prvProcessReceivedCommands+0x78>)
 800e80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80e:	bf00      	nop
 800e810:	0800e839 	.word	0x0800e839
 800e814:	0800e839 	.word	0x0800e839
 800e818:	0800e839 	.word	0x0800e839
 800e81c:	0800e8ad 	.word	0x0800e8ad
 800e820:	0800e8c1 	.word	0x0800e8c1
 800e824:	0800e90b 	.word	0x0800e90b
 800e828:	0800e839 	.word	0x0800e839
 800e82c:	0800e839 	.word	0x0800e839
 800e830:	0800e8ad 	.word	0x0800e8ad
 800e834:	0800e8c1 	.word	0x0800e8c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e83e:	f043 0301 	orr.w	r3, r3, #1
 800e842:	b2da      	uxtb	r2, r3
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	18d1      	adds	r1, r2, r3
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e858:	f7ff ff5c 	bl	800e714 <prvInsertTimerInActiveList>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d069      	beq.n	800e936 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e864:	6a1b      	ldr	r3, [r3, #32]
 800e866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e868:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e870:	f003 0304 	and.w	r3, r3, #4
 800e874:	2b00      	cmp	r3, #0
 800e876:	d05e      	beq.n	800e936 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e878:	68ba      	ldr	r2, [r7, #8]
 800e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	441a      	add	r2, r3
 800e880:	2300      	movs	r3, #0
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	2300      	movs	r3, #0
 800e886:	2100      	movs	r1, #0
 800e888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e88a:	f7ff fe05 	bl	800e498 <xTimerGenericCommand>
 800e88e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d14f      	bne.n	800e936 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	61bb      	str	r3, [r7, #24]
}
 800e8a8:	bf00      	nop
 800e8aa:	e7fe      	b.n	800e8aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8b2:	f023 0301 	bic.w	r3, r3, #1
 800e8b6:	b2da      	uxtb	r2, r3
 800e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e8be:	e03a      	b.n	800e936 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8c6:	f043 0301 	orr.w	r3, r3, #1
 800e8ca:	b2da      	uxtb	r2, r3
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	699b      	ldr	r3, [r3, #24]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10a      	bne.n	800e8f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	617b      	str	r3, [r7, #20]
}
 800e8f2:	bf00      	nop
 800e8f4:	e7fe      	b.n	800e8f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f8:	699a      	ldr	r2, [r3, #24]
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fc:	18d1      	adds	r1, r2, r3
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e904:	f7ff ff06 	bl	800e714 <prvInsertTimerInActiveList>
					break;
 800e908:	e015      	b.n	800e936 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e910:	f003 0302 	and.w	r3, r3, #2
 800e914:	2b00      	cmp	r3, #0
 800e916:	d103      	bne.n	800e920 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e91a:	f000 fc01 	bl	800f120 <vPortFree>
 800e91e:	e00a      	b.n	800e936 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e926:	f023 0301 	bic.w	r3, r3, #1
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e932:	e000      	b.n	800e936 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e934:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e936:	4b08      	ldr	r3, [pc, #32]	; (800e958 <prvProcessReceivedCommands+0x1c0>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	1d39      	adds	r1, r7, #4
 800e93c:	2200      	movs	r2, #0
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fe f804 	bl	800c94c <xQueueReceive>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	f47f af2a 	bne.w	800e7a0 <prvProcessReceivedCommands+0x8>
	}
}
 800e94c:	bf00      	nop
 800e94e:	bf00      	nop
 800e950:	3730      	adds	r7, #48	; 0x30
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	20000e34 	.word	0x20000e34

0800e95c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b088      	sub	sp, #32
 800e960:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e962:	e048      	b.n	800e9f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e964:	4b2d      	ldr	r3, [pc, #180]	; (800ea1c <prvSwitchTimerLists+0xc0>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e96e:	4b2b      	ldr	r3, [pc, #172]	; (800ea1c <prvSwitchTimerLists+0xc0>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	3304      	adds	r3, #4
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7fd fb37 	bl	800bff0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e990:	f003 0304 	and.w	r3, r3, #4
 800e994:	2b00      	cmp	r3, #0
 800e996:	d02e      	beq.n	800e9f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	4413      	add	r3, r2
 800e9a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d90e      	bls.n	800e9c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	68ba      	ldr	r2, [r7, #8]
 800e9ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	68fa      	ldr	r2, [r7, #12]
 800e9b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9b6:	4b19      	ldr	r3, [pc, #100]	; (800ea1c <prvSwitchTimerLists+0xc0>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	3304      	adds	r3, #4
 800e9be:	4619      	mov	r1, r3
 800e9c0:	4610      	mov	r0, r2
 800e9c2:	f7fd fadc 	bl	800bf7e <vListInsert>
 800e9c6:	e016      	b.n	800e9f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	693a      	ldr	r2, [r7, #16]
 800e9d0:	2100      	movs	r1, #0
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f7ff fd60 	bl	800e498 <xTimerGenericCommand>
 800e9d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10a      	bne.n	800e9f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e4:	f383 8811 	msr	BASEPRI, r3
 800e9e8:	f3bf 8f6f 	isb	sy
 800e9ec:	f3bf 8f4f 	dsb	sy
 800e9f0:	603b      	str	r3, [r7, #0]
}
 800e9f2:	bf00      	nop
 800e9f4:	e7fe      	b.n	800e9f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9f6:	4b09      	ldr	r3, [pc, #36]	; (800ea1c <prvSwitchTimerLists+0xc0>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1b1      	bne.n	800e964 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ea00:	4b06      	ldr	r3, [pc, #24]	; (800ea1c <prvSwitchTimerLists+0xc0>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ea06:	4b06      	ldr	r3, [pc, #24]	; (800ea20 <prvSwitchTimerLists+0xc4>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a04      	ldr	r2, [pc, #16]	; (800ea1c <prvSwitchTimerLists+0xc0>)
 800ea0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ea0e:	4a04      	ldr	r2, [pc, #16]	; (800ea20 <prvSwitchTimerLists+0xc4>)
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	6013      	str	r3, [r2, #0]
}
 800ea14:	bf00      	nop
 800ea16:	3718      	adds	r7, #24
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	20000e2c 	.word	0x20000e2c
 800ea20:	20000e30 	.word	0x20000e30

0800ea24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ea2a:	f000 f98b 	bl	800ed44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ea2e:	4b15      	ldr	r3, [pc, #84]	; (800ea84 <prvCheckForValidListAndQueue+0x60>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d120      	bne.n	800ea78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea36:	4814      	ldr	r0, [pc, #80]	; (800ea88 <prvCheckForValidListAndQueue+0x64>)
 800ea38:	f7fd fa50 	bl	800bedc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea3c:	4813      	ldr	r0, [pc, #76]	; (800ea8c <prvCheckForValidListAndQueue+0x68>)
 800ea3e:	f7fd fa4d 	bl	800bedc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea42:	4b13      	ldr	r3, [pc, #76]	; (800ea90 <prvCheckForValidListAndQueue+0x6c>)
 800ea44:	4a10      	ldr	r2, [pc, #64]	; (800ea88 <prvCheckForValidListAndQueue+0x64>)
 800ea46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea48:	4b12      	ldr	r3, [pc, #72]	; (800ea94 <prvCheckForValidListAndQueue+0x70>)
 800ea4a:	4a10      	ldr	r2, [pc, #64]	; (800ea8c <prvCheckForValidListAndQueue+0x68>)
 800ea4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	4b11      	ldr	r3, [pc, #68]	; (800ea98 <prvCheckForValidListAndQueue+0x74>)
 800ea54:	4a11      	ldr	r2, [pc, #68]	; (800ea9c <prvCheckForValidListAndQueue+0x78>)
 800ea56:	2110      	movs	r1, #16
 800ea58:	200a      	movs	r0, #10
 800ea5a:	f7fd fb5b 	bl	800c114 <xQueueGenericCreateStatic>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	4a08      	ldr	r2, [pc, #32]	; (800ea84 <prvCheckForValidListAndQueue+0x60>)
 800ea62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea64:	4b07      	ldr	r3, [pc, #28]	; (800ea84 <prvCheckForValidListAndQueue+0x60>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d005      	beq.n	800ea78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea6c:	4b05      	ldr	r3, [pc, #20]	; (800ea84 <prvCheckForValidListAndQueue+0x60>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	490b      	ldr	r1, [pc, #44]	; (800eaa0 <prvCheckForValidListAndQueue+0x7c>)
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fe fb5e 	bl	800d134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea78:	f000 f994 	bl	800eda4 <vPortExitCritical>
}
 800ea7c:	bf00      	nop
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	20000e34 	.word	0x20000e34
 800ea88:	20000e04 	.word	0x20000e04
 800ea8c:	20000e18 	.word	0x20000e18
 800ea90:	20000e2c 	.word	0x20000e2c
 800ea94:	20000e30 	.word	0x20000e30
 800ea98:	20000ee0 	.word	0x20000ee0
 800ea9c:	20000e40 	.word	0x20000e40
 800eaa0:	08020f48 	.word	0x08020f48

0800eaa4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d10a      	bne.n	800eacc <pvTimerGetTimerID+0x28>
	__asm volatile
 800eab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaba:	f383 8811 	msr	BASEPRI, r3
 800eabe:	f3bf 8f6f 	isb	sy
 800eac2:	f3bf 8f4f 	dsb	sy
 800eac6:	60fb      	str	r3, [r7, #12]
}
 800eac8:	bf00      	nop
 800eaca:	e7fe      	b.n	800eaca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800eacc:	f000 f93a 	bl	800ed44 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	69db      	ldr	r3, [r3, #28]
 800ead4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ead6:	f000 f965 	bl	800eda4 <vPortExitCritical>

	return pvReturn;
 800eada:	693b      	ldr	r3, [r7, #16]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3718      	adds	r7, #24
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eae4:	b480      	push	{r7}
 800eae6:	b085      	sub	sp, #20
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	3b04      	subs	r3, #4
 800eaf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eafc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	3b04      	subs	r3, #4
 800eb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	f023 0201 	bic.w	r2, r3, #1
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3b04      	subs	r3, #4
 800eb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb14:	4a0c      	ldr	r2, [pc, #48]	; (800eb48 <pxPortInitialiseStack+0x64>)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	3b14      	subs	r3, #20
 800eb1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	3b04      	subs	r3, #4
 800eb2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f06f 0202 	mvn.w	r2, #2
 800eb32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	3b20      	subs	r3, #32
 800eb38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3714      	adds	r7, #20
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	0800eb4d 	.word	0x0800eb4d

0800eb4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eb56:	4b12      	ldr	r3, [pc, #72]	; (800eba0 <prvTaskExitError+0x54>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5e:	d00a      	beq.n	800eb76 <prvTaskExitError+0x2a>
	__asm volatile
 800eb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb64:	f383 8811 	msr	BASEPRI, r3
 800eb68:	f3bf 8f6f 	isb	sy
 800eb6c:	f3bf 8f4f 	dsb	sy
 800eb70:	60fb      	str	r3, [r7, #12]
}
 800eb72:	bf00      	nop
 800eb74:	e7fe      	b.n	800eb74 <prvTaskExitError+0x28>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	60bb      	str	r3, [r7, #8]
}
 800eb88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eb8a:	bf00      	nop
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d0fc      	beq.n	800eb8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb92:	bf00      	nop
 800eb94:	bf00      	nop
 800eb96:	3714      	adds	r7, #20
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr
 800eba0:	200000e0 	.word	0x200000e0
	...

0800ebb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ebb0:	4b07      	ldr	r3, [pc, #28]	; (800ebd0 <pxCurrentTCBConst2>)
 800ebb2:	6819      	ldr	r1, [r3, #0]
 800ebb4:	6808      	ldr	r0, [r1, #0]
 800ebb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebba:	f380 8809 	msr	PSP, r0
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	f04f 0000 	mov.w	r0, #0
 800ebc6:	f380 8811 	msr	BASEPRI, r0
 800ebca:	4770      	bx	lr
 800ebcc:	f3af 8000 	nop.w

0800ebd0 <pxCurrentTCBConst2>:
 800ebd0:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ebd4:	bf00      	nop
 800ebd6:	bf00      	nop

0800ebd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ebd8:	4808      	ldr	r0, [pc, #32]	; (800ebfc <prvPortStartFirstTask+0x24>)
 800ebda:	6800      	ldr	r0, [r0, #0]
 800ebdc:	6800      	ldr	r0, [r0, #0]
 800ebde:	f380 8808 	msr	MSP, r0
 800ebe2:	f04f 0000 	mov.w	r0, #0
 800ebe6:	f380 8814 	msr	CONTROL, r0
 800ebea:	b662      	cpsie	i
 800ebec:	b661      	cpsie	f
 800ebee:	f3bf 8f4f 	dsb	sy
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	df00      	svc	0
 800ebf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ebfa:	bf00      	nop
 800ebfc:	e000ed08 	.word	0xe000ed08

0800ec00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec06:	4b46      	ldr	r3, [pc, #280]	; (800ed20 <xPortStartScheduler+0x120>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4a46      	ldr	r2, [pc, #280]	; (800ed24 <xPortStartScheduler+0x124>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d10a      	bne.n	800ec26 <xPortStartScheduler+0x26>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	613b      	str	r3, [r7, #16]
}
 800ec22:	bf00      	nop
 800ec24:	e7fe      	b.n	800ec24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ec26:	4b3e      	ldr	r3, [pc, #248]	; (800ed20 <xPortStartScheduler+0x120>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a3f      	ldr	r2, [pc, #252]	; (800ed28 <xPortStartScheduler+0x128>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d10a      	bne.n	800ec46 <xPortStartScheduler+0x46>
	__asm volatile
 800ec30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec34:	f383 8811 	msr	BASEPRI, r3
 800ec38:	f3bf 8f6f 	isb	sy
 800ec3c:	f3bf 8f4f 	dsb	sy
 800ec40:	60fb      	str	r3, [r7, #12]
}
 800ec42:	bf00      	nop
 800ec44:	e7fe      	b.n	800ec44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ec46:	4b39      	ldr	r3, [pc, #228]	; (800ed2c <xPortStartScheduler+0x12c>)
 800ec48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	22ff      	movs	r2, #255	; 0xff
 800ec56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec60:	78fb      	ldrb	r3, [r7, #3]
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	4b31      	ldr	r3, [pc, #196]	; (800ed30 <xPortStartScheduler+0x130>)
 800ec6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec6e:	4b31      	ldr	r3, [pc, #196]	; (800ed34 <xPortStartScheduler+0x134>)
 800ec70:	2207      	movs	r2, #7
 800ec72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec74:	e009      	b.n	800ec8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ec76:	4b2f      	ldr	r3, [pc, #188]	; (800ed34 <xPortStartScheduler+0x134>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	3b01      	subs	r3, #1
 800ec7c:	4a2d      	ldr	r2, [pc, #180]	; (800ed34 <xPortStartScheduler+0x134>)
 800ec7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec80:	78fb      	ldrb	r3, [r7, #3]
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	005b      	lsls	r3, r3, #1
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec8a:	78fb      	ldrb	r3, [r7, #3]
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec92:	2b80      	cmp	r3, #128	; 0x80
 800ec94:	d0ef      	beq.n	800ec76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec96:	4b27      	ldr	r3, [pc, #156]	; (800ed34 <xPortStartScheduler+0x134>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f1c3 0307 	rsb	r3, r3, #7
 800ec9e:	2b04      	cmp	r3, #4
 800eca0:	d00a      	beq.n	800ecb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800eca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca6:	f383 8811 	msr	BASEPRI, r3
 800ecaa:	f3bf 8f6f 	isb	sy
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	60bb      	str	r3, [r7, #8]
}
 800ecb4:	bf00      	nop
 800ecb6:	e7fe      	b.n	800ecb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ecb8:	4b1e      	ldr	r3, [pc, #120]	; (800ed34 <xPortStartScheduler+0x134>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	021b      	lsls	r3, r3, #8
 800ecbe:	4a1d      	ldr	r2, [pc, #116]	; (800ed34 <xPortStartScheduler+0x134>)
 800ecc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ecc2:	4b1c      	ldr	r3, [pc, #112]	; (800ed34 <xPortStartScheduler+0x134>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ecca:	4a1a      	ldr	r2, [pc, #104]	; (800ed34 <xPortStartScheduler+0x134>)
 800eccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	b2da      	uxtb	r2, r3
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ecd6:	4b18      	ldr	r3, [pc, #96]	; (800ed38 <xPortStartScheduler+0x138>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4a17      	ldr	r2, [pc, #92]	; (800ed38 <xPortStartScheduler+0x138>)
 800ecdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ece0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ece2:	4b15      	ldr	r3, [pc, #84]	; (800ed38 <xPortStartScheduler+0x138>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a14      	ldr	r2, [pc, #80]	; (800ed38 <xPortStartScheduler+0x138>)
 800ece8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ecec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ecee:	f000 f8dd 	bl	800eeac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ecf2:	4b12      	ldr	r3, [pc, #72]	; (800ed3c <xPortStartScheduler+0x13c>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ecf8:	f000 f8fc 	bl	800eef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ecfc:	4b10      	ldr	r3, [pc, #64]	; (800ed40 <xPortStartScheduler+0x140>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a0f      	ldr	r2, [pc, #60]	; (800ed40 <xPortStartScheduler+0x140>)
 800ed02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ed06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ed08:	f7ff ff66 	bl	800ebd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ed0c:	f7fe fe7e 	bl	800da0c <vTaskSwitchContext>
	prvTaskExitError();
 800ed10:	f7ff ff1c 	bl	800eb4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ed14:	2300      	movs	r3, #0
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3718      	adds	r7, #24
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	e000ed00 	.word	0xe000ed00
 800ed24:	410fc271 	.word	0x410fc271
 800ed28:	410fc270 	.word	0x410fc270
 800ed2c:	e000e400 	.word	0xe000e400
 800ed30:	20000f30 	.word	0x20000f30
 800ed34:	20000f34 	.word	0x20000f34
 800ed38:	e000ed20 	.word	0xe000ed20
 800ed3c:	200000e0 	.word	0x200000e0
 800ed40:	e000ef34 	.word	0xe000ef34

0800ed44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
	__asm volatile
 800ed4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4e:	f383 8811 	msr	BASEPRI, r3
 800ed52:	f3bf 8f6f 	isb	sy
 800ed56:	f3bf 8f4f 	dsb	sy
 800ed5a:	607b      	str	r3, [r7, #4]
}
 800ed5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ed5e:	4b0f      	ldr	r3, [pc, #60]	; (800ed9c <vPortEnterCritical+0x58>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	3301      	adds	r3, #1
 800ed64:	4a0d      	ldr	r2, [pc, #52]	; (800ed9c <vPortEnterCritical+0x58>)
 800ed66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ed68:	4b0c      	ldr	r3, [pc, #48]	; (800ed9c <vPortEnterCritical+0x58>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d10f      	bne.n	800ed90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ed70:	4b0b      	ldr	r3, [pc, #44]	; (800eda0 <vPortEnterCritical+0x5c>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00a      	beq.n	800ed90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ed7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7e:	f383 8811 	msr	BASEPRI, r3
 800ed82:	f3bf 8f6f 	isb	sy
 800ed86:	f3bf 8f4f 	dsb	sy
 800ed8a:	603b      	str	r3, [r7, #0]
}
 800ed8c:	bf00      	nop
 800ed8e:	e7fe      	b.n	800ed8e <vPortEnterCritical+0x4a>
	}
}
 800ed90:	bf00      	nop
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr
 800ed9c:	200000e0 	.word	0x200000e0
 800eda0:	e000ed04 	.word	0xe000ed04

0800eda4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800edaa:	4b12      	ldr	r3, [pc, #72]	; (800edf4 <vPortExitCritical+0x50>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10a      	bne.n	800edc8 <vPortExitCritical+0x24>
	__asm volatile
 800edb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	607b      	str	r3, [r7, #4]
}
 800edc4:	bf00      	nop
 800edc6:	e7fe      	b.n	800edc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800edc8:	4b0a      	ldr	r3, [pc, #40]	; (800edf4 <vPortExitCritical+0x50>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	3b01      	subs	r3, #1
 800edce:	4a09      	ldr	r2, [pc, #36]	; (800edf4 <vPortExitCritical+0x50>)
 800edd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800edd2:	4b08      	ldr	r3, [pc, #32]	; (800edf4 <vPortExitCritical+0x50>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d105      	bne.n	800ede6 <vPortExitCritical+0x42>
 800edda:	2300      	movs	r3, #0
 800eddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	f383 8811 	msr	BASEPRI, r3
}
 800ede4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ede6:	bf00      	nop
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	200000e0 	.word	0x200000e0
	...

0800ee00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ee00:	f3ef 8009 	mrs	r0, PSP
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	4b15      	ldr	r3, [pc, #84]	; (800ee60 <pxCurrentTCBConst>)
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	f01e 0f10 	tst.w	lr, #16
 800ee10:	bf08      	it	eq
 800ee12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1a:	6010      	str	r0, [r2, #0]
 800ee1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ee20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ee24:	f380 8811 	msr	BASEPRI, r0
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f7fe fdec 	bl	800da0c <vTaskSwitchContext>
 800ee34:	f04f 0000 	mov.w	r0, #0
 800ee38:	f380 8811 	msr	BASEPRI, r0
 800ee3c:	bc09      	pop	{r0, r3}
 800ee3e:	6819      	ldr	r1, [r3, #0]
 800ee40:	6808      	ldr	r0, [r1, #0]
 800ee42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee46:	f01e 0f10 	tst.w	lr, #16
 800ee4a:	bf08      	it	eq
 800ee4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee50:	f380 8809 	msr	PSP, r0
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	f3af 8000 	nop.w

0800ee60 <pxCurrentTCBConst>:
 800ee60:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ee64:	bf00      	nop
 800ee66:	bf00      	nop

0800ee68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ee6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	607b      	str	r3, [r7, #4]
}
 800ee80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ee82:	f7fe fd09 	bl	800d898 <xTaskIncrementTick>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d003      	beq.n	800ee94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ee8c:	4b06      	ldr	r3, [pc, #24]	; (800eea8 <xPortSysTickHandler+0x40>)
 800ee8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee92:	601a      	str	r2, [r3, #0]
 800ee94:	2300      	movs	r3, #0
 800ee96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	f383 8811 	msr	BASEPRI, r3
}
 800ee9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eea0:	bf00      	nop
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	e000ed04 	.word	0xe000ed04

0800eeac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eeac:	b480      	push	{r7}
 800eeae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eeb0:	4b0b      	ldr	r3, [pc, #44]	; (800eee0 <vPortSetupTimerInterrupt+0x34>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eeb6:	4b0b      	ldr	r3, [pc, #44]	; (800eee4 <vPortSetupTimerInterrupt+0x38>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eebc:	4b0a      	ldr	r3, [pc, #40]	; (800eee8 <vPortSetupTimerInterrupt+0x3c>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4a0a      	ldr	r2, [pc, #40]	; (800eeec <vPortSetupTimerInterrupt+0x40>)
 800eec2:	fba2 2303 	umull	r2, r3, r2, r3
 800eec6:	099b      	lsrs	r3, r3, #6
 800eec8:	4a09      	ldr	r2, [pc, #36]	; (800eef0 <vPortSetupTimerInterrupt+0x44>)
 800eeca:	3b01      	subs	r3, #1
 800eecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eece:	4b04      	ldr	r3, [pc, #16]	; (800eee0 <vPortSetupTimerInterrupt+0x34>)
 800eed0:	2207      	movs	r2, #7
 800eed2:	601a      	str	r2, [r3, #0]
}
 800eed4:	bf00      	nop
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop
 800eee0:	e000e010 	.word	0xe000e010
 800eee4:	e000e018 	.word	0xe000e018
 800eee8:	20000000 	.word	0x20000000
 800eeec:	10624dd3 	.word	0x10624dd3
 800eef0:	e000e014 	.word	0xe000e014

0800eef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ef04 <vPortEnableVFP+0x10>
 800eef8:	6801      	ldr	r1, [r0, #0]
 800eefa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eefe:	6001      	str	r1, [r0, #0]
 800ef00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ef02:	bf00      	nop
 800ef04:	e000ed88 	.word	0xe000ed88

0800ef08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ef0e:	f3ef 8305 	mrs	r3, IPSR
 800ef12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2b0f      	cmp	r3, #15
 800ef18:	d914      	bls.n	800ef44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ef1a:	4a17      	ldr	r2, [pc, #92]	; (800ef78 <vPortValidateInterruptPriority+0x70>)
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	4413      	add	r3, r2
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ef24:	4b15      	ldr	r3, [pc, #84]	; (800ef7c <vPortValidateInterruptPriority+0x74>)
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	7afa      	ldrb	r2, [r7, #11]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d20a      	bcs.n	800ef44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ef2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef32:	f383 8811 	msr	BASEPRI, r3
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	f3bf 8f4f 	dsb	sy
 800ef3e:	607b      	str	r3, [r7, #4]
}
 800ef40:	bf00      	nop
 800ef42:	e7fe      	b.n	800ef42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ef44:	4b0e      	ldr	r3, [pc, #56]	; (800ef80 <vPortValidateInterruptPriority+0x78>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ef4c:	4b0d      	ldr	r3, [pc, #52]	; (800ef84 <vPortValidateInterruptPriority+0x7c>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d90a      	bls.n	800ef6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ef54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef58:	f383 8811 	msr	BASEPRI, r3
 800ef5c:	f3bf 8f6f 	isb	sy
 800ef60:	f3bf 8f4f 	dsb	sy
 800ef64:	603b      	str	r3, [r7, #0]
}
 800ef66:	bf00      	nop
 800ef68:	e7fe      	b.n	800ef68 <vPortValidateInterruptPriority+0x60>
	}
 800ef6a:	bf00      	nop
 800ef6c:	3714      	adds	r7, #20
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr
 800ef76:	bf00      	nop
 800ef78:	e000e3f0 	.word	0xe000e3f0
 800ef7c:	20000f30 	.word	0x20000f30
 800ef80:	e000ed0c 	.word	0xe000ed0c
 800ef84:	20000f34 	.word	0x20000f34

0800ef88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b08a      	sub	sp, #40	; 0x28
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ef90:	2300      	movs	r3, #0
 800ef92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ef94:	f7fe fbb2 	bl	800d6fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ef98:	4b5b      	ldr	r3, [pc, #364]	; (800f108 <pvPortMalloc+0x180>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d101      	bne.n	800efa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800efa0:	f000 f920 	bl	800f1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800efa4:	4b59      	ldr	r3, [pc, #356]	; (800f10c <pvPortMalloc+0x184>)
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4013      	ands	r3, r2
 800efac:	2b00      	cmp	r3, #0
 800efae:	f040 8093 	bne.w	800f0d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d01d      	beq.n	800eff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800efb8:	2208      	movs	r2, #8
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4413      	add	r3, r2
 800efbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f003 0307 	and.w	r3, r3, #7
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d014      	beq.n	800eff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f023 0307 	bic.w	r3, r3, #7
 800efd0:	3308      	adds	r3, #8
 800efd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f003 0307 	and.w	r3, r3, #7
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00a      	beq.n	800eff4 <pvPortMalloc+0x6c>
	__asm volatile
 800efde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe2:	f383 8811 	msr	BASEPRI, r3
 800efe6:	f3bf 8f6f 	isb	sy
 800efea:	f3bf 8f4f 	dsb	sy
 800efee:	617b      	str	r3, [r7, #20]
}
 800eff0:	bf00      	nop
 800eff2:	e7fe      	b.n	800eff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d06e      	beq.n	800f0d8 <pvPortMalloc+0x150>
 800effa:	4b45      	ldr	r3, [pc, #276]	; (800f110 <pvPortMalloc+0x188>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	429a      	cmp	r2, r3
 800f002:	d869      	bhi.n	800f0d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f004:	4b43      	ldr	r3, [pc, #268]	; (800f114 <pvPortMalloc+0x18c>)
 800f006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f008:	4b42      	ldr	r3, [pc, #264]	; (800f114 <pvPortMalloc+0x18c>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f00e:	e004      	b.n	800f01a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	429a      	cmp	r2, r3
 800f022:	d903      	bls.n	800f02c <pvPortMalloc+0xa4>
 800f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d1f1      	bne.n	800f010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f02c:	4b36      	ldr	r3, [pc, #216]	; (800f108 <pvPortMalloc+0x180>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f032:	429a      	cmp	r2, r3
 800f034:	d050      	beq.n	800f0d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2208      	movs	r2, #8
 800f03c:	4413      	add	r3, r2
 800f03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	6a3b      	ldr	r3, [r7, #32]
 800f046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04a:	685a      	ldr	r2, [r3, #4]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	1ad2      	subs	r2, r2, r3
 800f050:	2308      	movs	r3, #8
 800f052:	005b      	lsls	r3, r3, #1
 800f054:	429a      	cmp	r2, r3
 800f056:	d91f      	bls.n	800f098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4413      	add	r3, r2
 800f05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	f003 0307 	and.w	r3, r3, #7
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00a      	beq.n	800f080 <pvPortMalloc+0xf8>
	__asm volatile
 800f06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06e:	f383 8811 	msr	BASEPRI, r3
 800f072:	f3bf 8f6f 	isb	sy
 800f076:	f3bf 8f4f 	dsb	sy
 800f07a:	613b      	str	r3, [r7, #16]
}
 800f07c:	bf00      	nop
 800f07e:	e7fe      	b.n	800f07e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f082:	685a      	ldr	r2, [r3, #4]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	1ad2      	subs	r2, r2, r3
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f092:	69b8      	ldr	r0, [r7, #24]
 800f094:	f000 f908 	bl	800f2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f098:	4b1d      	ldr	r3, [pc, #116]	; (800f110 <pvPortMalloc+0x188>)
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	4a1b      	ldr	r2, [pc, #108]	; (800f110 <pvPortMalloc+0x188>)
 800f0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0a6:	4b1a      	ldr	r3, [pc, #104]	; (800f110 <pvPortMalloc+0x188>)
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	4b1b      	ldr	r3, [pc, #108]	; (800f118 <pvPortMalloc+0x190>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d203      	bcs.n	800f0ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f0b2:	4b17      	ldr	r3, [pc, #92]	; (800f110 <pvPortMalloc+0x188>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4a18      	ldr	r2, [pc, #96]	; (800f118 <pvPortMalloc+0x190>)
 800f0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	685a      	ldr	r2, [r3, #4]
 800f0be:	4b13      	ldr	r3, [pc, #76]	; (800f10c <pvPortMalloc+0x184>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	431a      	orrs	r2, r3
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f0ce:	4b13      	ldr	r3, [pc, #76]	; (800f11c <pvPortMalloc+0x194>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	4a11      	ldr	r2, [pc, #68]	; (800f11c <pvPortMalloc+0x194>)
 800f0d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f0d8:	f7fe fb1e 	bl	800d718 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	f003 0307 	and.w	r3, r3, #7
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00a      	beq.n	800f0fc <pvPortMalloc+0x174>
	__asm volatile
 800f0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ea:	f383 8811 	msr	BASEPRI, r3
 800f0ee:	f3bf 8f6f 	isb	sy
 800f0f2:	f3bf 8f4f 	dsb	sy
 800f0f6:	60fb      	str	r3, [r7, #12]
}
 800f0f8:	bf00      	nop
 800f0fa:	e7fe      	b.n	800f0fa <pvPortMalloc+0x172>
	return pvReturn;
 800f0fc:	69fb      	ldr	r3, [r7, #28]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3728      	adds	r7, #40	; 0x28
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	20005f40 	.word	0x20005f40
 800f10c:	20005f54 	.word	0x20005f54
 800f110:	20005f44 	.word	0x20005f44
 800f114:	20005f38 	.word	0x20005f38
 800f118:	20005f48 	.word	0x20005f48
 800f11c:	20005f4c 	.word	0x20005f4c

0800f120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d04d      	beq.n	800f1ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f132:	2308      	movs	r3, #8
 800f134:	425b      	negs	r3, r3
 800f136:	697a      	ldr	r2, [r7, #20]
 800f138:	4413      	add	r3, r2
 800f13a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	4b24      	ldr	r3, [pc, #144]	; (800f1d8 <vPortFree+0xb8>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4013      	ands	r3, r2
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10a      	bne.n	800f164 <vPortFree+0x44>
	__asm volatile
 800f14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f152:	f383 8811 	msr	BASEPRI, r3
 800f156:	f3bf 8f6f 	isb	sy
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	60fb      	str	r3, [r7, #12]
}
 800f160:	bf00      	nop
 800f162:	e7fe      	b.n	800f162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00a      	beq.n	800f182 <vPortFree+0x62>
	__asm volatile
 800f16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f170:	f383 8811 	msr	BASEPRI, r3
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	60bb      	str	r3, [r7, #8]
}
 800f17e:	bf00      	nop
 800f180:	e7fe      	b.n	800f180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	685a      	ldr	r2, [r3, #4]
 800f186:	4b14      	ldr	r3, [pc, #80]	; (800f1d8 <vPortFree+0xb8>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4013      	ands	r3, r2
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d01e      	beq.n	800f1ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d11a      	bne.n	800f1ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	685a      	ldr	r2, [r3, #4]
 800f19c:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <vPortFree+0xb8>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	43db      	mvns	r3, r3
 800f1a2:	401a      	ands	r2, r3
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f1a8:	f7fe faa8 	bl	800d6fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	685a      	ldr	r2, [r3, #4]
 800f1b0:	4b0a      	ldr	r3, [pc, #40]	; (800f1dc <vPortFree+0xbc>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	4a09      	ldr	r2, [pc, #36]	; (800f1dc <vPortFree+0xbc>)
 800f1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f1ba:	6938      	ldr	r0, [r7, #16]
 800f1bc:	f000 f874 	bl	800f2a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f1c0:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <vPortFree+0xc0>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	4a06      	ldr	r2, [pc, #24]	; (800f1e0 <vPortFree+0xc0>)
 800f1c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f1ca:	f7fe faa5 	bl	800d718 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f1ce:	bf00      	nop
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20005f54 	.word	0x20005f54
 800f1dc:	20005f44 	.word	0x20005f44
 800f1e0:	20005f50 	.word	0x20005f50

0800f1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f1ea:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800f1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f1f0:	4b27      	ldr	r3, [pc, #156]	; (800f290 <prvHeapInit+0xac>)
 800f1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f003 0307 	and.w	r3, r3, #7
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d00c      	beq.n	800f218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	3307      	adds	r3, #7
 800f202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f023 0307 	bic.w	r3, r3, #7
 800f20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f20c:	68ba      	ldr	r2, [r7, #8]
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	1ad3      	subs	r3, r2, r3
 800f212:	4a1f      	ldr	r2, [pc, #124]	; (800f290 <prvHeapInit+0xac>)
 800f214:	4413      	add	r3, r2
 800f216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f21c:	4a1d      	ldr	r2, [pc, #116]	; (800f294 <prvHeapInit+0xb0>)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f222:	4b1c      	ldr	r3, [pc, #112]	; (800f294 <prvHeapInit+0xb0>)
 800f224:	2200      	movs	r2, #0
 800f226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	4413      	add	r3, r2
 800f22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f230:	2208      	movs	r2, #8
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	1a9b      	subs	r3, r3, r2
 800f236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f023 0307 	bic.w	r3, r3, #7
 800f23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	4a15      	ldr	r2, [pc, #84]	; (800f298 <prvHeapInit+0xb4>)
 800f244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f246:	4b14      	ldr	r3, [pc, #80]	; (800f298 <prvHeapInit+0xb4>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2200      	movs	r2, #0
 800f24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f24e:	4b12      	ldr	r3, [pc, #72]	; (800f298 <prvHeapInit+0xb4>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2200      	movs	r2, #0
 800f254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	68fa      	ldr	r2, [r7, #12]
 800f25e:	1ad2      	subs	r2, r2, r3
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f264:	4b0c      	ldr	r3, [pc, #48]	; (800f298 <prvHeapInit+0xb4>)
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	4a0a      	ldr	r2, [pc, #40]	; (800f29c <prvHeapInit+0xb8>)
 800f272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	4a09      	ldr	r2, [pc, #36]	; (800f2a0 <prvHeapInit+0xbc>)
 800f27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f27c:	4b09      	ldr	r3, [pc, #36]	; (800f2a4 <prvHeapInit+0xc0>)
 800f27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f282:	601a      	str	r2, [r3, #0]
}
 800f284:	bf00      	nop
 800f286:	3714      	adds	r7, #20
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr
 800f290:	20000f38 	.word	0x20000f38
 800f294:	20005f38 	.word	0x20005f38
 800f298:	20005f40 	.word	0x20005f40
 800f29c:	20005f48 	.word	0x20005f48
 800f2a0:	20005f44 	.word	0x20005f44
 800f2a4:	20005f54 	.word	0x20005f54

0800f2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f2b0:	4b28      	ldr	r3, [pc, #160]	; (800f354 <prvInsertBlockIntoFreeList+0xac>)
 800f2b2:	60fb      	str	r3, [r7, #12]
 800f2b4:	e002      	b.n	800f2bc <prvInsertBlockIntoFreeList+0x14>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d8f7      	bhi.n	800f2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	68ba      	ldr	r2, [r7, #8]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d108      	bne.n	800f2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	685a      	ldr	r2, [r3, #4]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	441a      	add	r2, r3
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	68ba      	ldr	r2, [r7, #8]
 800f2f4:	441a      	add	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d118      	bne.n	800f330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	4b15      	ldr	r3, [pc, #84]	; (800f358 <prvInsertBlockIntoFreeList+0xb0>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	429a      	cmp	r2, r3
 800f308:	d00d      	beq.n	800f326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	441a      	add	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	e008      	b.n	800f338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f326:	4b0c      	ldr	r3, [pc, #48]	; (800f358 <prvInsertBlockIntoFreeList+0xb0>)
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	e003      	b.n	800f338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d002      	beq.n	800f346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f346:	bf00      	nop
 800f348:	3714      	adds	r7, #20
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	20005f38 	.word	0x20005f38
 800f358:	20005f40 	.word	0x20005f40

0800f35c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	330c      	adds	r3, #12
 800f36c:	461a      	mov	r2, r3
 800f36e:	6839      	ldr	r1, [r7, #0]
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f002 fa9f 	bl	80118b4 <tcpip_send_msg_wait_sem>
 800f376:	4603      	mov	r3, r0
 800f378:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d103      	bne.n	800f38a <netconn_apimsg+0x2e>
    return apimsg->err;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f388:	e001      	b.n	800f38e <netconn_apimsg+0x32>
  }
  return err;
 800f38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
	...

0800f398 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b08c      	sub	sp, #48	; 0x30
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	4603      	mov	r3, r0
 800f3a0:	603a      	str	r2, [r7, #0]
 800f3a2:	71fb      	strb	r3, [r7, #7]
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800f3a8:	79fb      	ldrb	r3, [r7, #7]
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f001 f923 	bl	80105f8 <netconn_alloc>
 800f3b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800f3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d054      	beq.n	800f464 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800f3ba:	79bb      	ldrb	r3, [r7, #6]
 800f3bc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800f3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800f3c2:	f107 0308 	add.w	r3, r7, #8
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	4829      	ldr	r0, [pc, #164]	; (800f470 <netconn_new_with_proto_and_callback+0xd8>)
 800f3ca:	f7ff ffc7 	bl	800f35c <netconn_apimsg>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800f3d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d043      	beq.n	800f464 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d005      	beq.n	800f3f0 <netconn_new_with_proto_and_callback+0x58>
 800f3e4:	4b23      	ldr	r3, [pc, #140]	; (800f474 <netconn_new_with_proto_and_callback+0xdc>)
 800f3e6:	22a3      	movs	r2, #163	; 0xa3
 800f3e8:	4923      	ldr	r1, [pc, #140]	; (800f478 <netconn_new_with_proto_and_callback+0xe0>)
 800f3ea:	4824      	ldr	r0, [pc, #144]	; (800f47c <netconn_new_with_proto_and_callback+0xe4>)
 800f3ec:	f010 fbe4 	bl	801fbb8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	3310      	adds	r3, #16
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f00f f9e5 	bl	801e7c4 <sys_mbox_valid>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d105      	bne.n	800f40c <netconn_new_with_proto_and_callback+0x74>
 800f400:	4b1c      	ldr	r3, [pc, #112]	; (800f474 <netconn_new_with_proto_and_callback+0xdc>)
 800f402:	22a4      	movs	r2, #164	; 0xa4
 800f404:	491e      	ldr	r1, [pc, #120]	; (800f480 <netconn_new_with_proto_and_callback+0xe8>)
 800f406:	481d      	ldr	r0, [pc, #116]	; (800f47c <netconn_new_with_proto_and_callback+0xe4>)
 800f408:	f010 fbd6 	bl	801fbb8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800f40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40e:	3314      	adds	r3, #20
 800f410:	4618      	mov	r0, r3
 800f412:	f00f f9d7 	bl	801e7c4 <sys_mbox_valid>
 800f416:	4603      	mov	r3, r0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d005      	beq.n	800f428 <netconn_new_with_proto_and_callback+0x90>
 800f41c:	4b15      	ldr	r3, [pc, #84]	; (800f474 <netconn_new_with_proto_and_callback+0xdc>)
 800f41e:	22a6      	movs	r2, #166	; 0xa6
 800f420:	4918      	ldr	r1, [pc, #96]	; (800f484 <netconn_new_with_proto_and_callback+0xec>)
 800f422:	4816      	ldr	r0, [pc, #88]	; (800f47c <netconn_new_with_proto_and_callback+0xe4>)
 800f424:	f010 fbc8 	bl	801fbb8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800f428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42a:	330c      	adds	r3, #12
 800f42c:	4618      	mov	r0, r3
 800f42e:	f00f fa57 	bl	801e8e0 <sys_sem_valid>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d105      	bne.n	800f444 <netconn_new_with_proto_and_callback+0xac>
 800f438:	4b0e      	ldr	r3, [pc, #56]	; (800f474 <netconn_new_with_proto_and_callback+0xdc>)
 800f43a:	22a9      	movs	r2, #169	; 0xa9
 800f43c:	4912      	ldr	r1, [pc, #72]	; (800f488 <netconn_new_with_proto_and_callback+0xf0>)
 800f43e:	480f      	ldr	r0, [pc, #60]	; (800f47c <netconn_new_with_proto_and_callback+0xe4>)
 800f440:	f010 fbba 	bl	801fbb8 <iprintf>
      sys_sem_free(&conn->op_completed);
 800f444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f446:	330c      	adds	r3, #12
 800f448:	4618      	mov	r0, r3
 800f44a:	f00f fa3c 	bl	801e8c6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800f44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f450:	3310      	adds	r3, #16
 800f452:	4618      	mov	r0, r3
 800f454:	f00f f942 	bl	801e6dc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800f458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f45a:	2007      	movs	r0, #7
 800f45c:	f002 ff92 	bl	8012384 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800f460:	2300      	movs	r3, #0
 800f462:	e000      	b.n	800f466 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800f464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f466:	4618      	mov	r0, r3
 800f468:	3730      	adds	r7, #48	; 0x30
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	080105cd 	.word	0x080105cd
 800f474:	08020f50 	.word	0x08020f50
 800f478:	08020f84 	.word	0x08020f84
 800f47c:	08020fa8 	.word	0x08020fa8
 800f480:	08020fd0 	.word	0x08020fd0
 800f484:	08020fe8 	.word	0x08020fe8
 800f488:	0802100c 	.word	0x0802100c

0800f48c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b08c      	sub	sp, #48	; 0x30
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d101      	bne.n	800f49e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800f49a:	2300      	movs	r3, #0
 800f49c:	e014      	b.n	800f4c8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f4a2:	2329      	movs	r3, #41	; 0x29
 800f4a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800f4a6:	f107 030c 	add.w	r3, r7, #12
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	4808      	ldr	r0, [pc, #32]	; (800f4d0 <netconn_prepare_delete+0x44>)
 800f4ae:	f7ff ff55 	bl	800f35c <netconn_apimsg>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800f4b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d002      	beq.n	800f4c6 <netconn_prepare_delete+0x3a>
    return err;
 800f4c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f4c4:	e000      	b.n	800f4c8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800f4c6:	2300      	movs	r3, #0
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3730      	adds	r7, #48	; 0x30
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	08010b31 	.word	0x08010b31

0800f4d4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d101      	bne.n	800f4e6 <netconn_delete+0x12>
    return ERR_OK;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	e00d      	b.n	800f502 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff ffd0 	bl	800f48c <netconn_prepare_delete>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800f4f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d102      	bne.n	800f4fe <netconn_delete+0x2a>
    netconn_free(conn);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f001 f8eb 	bl	80106d4 <netconn_free>
  }
  return err;
 800f4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
	...

0800f50c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b08e      	sub	sp, #56	; 0x38
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	4613      	mov	r3, r2
 800f518:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d109      	bne.n	800f534 <netconn_bind+0x28>
 800f520:	4b11      	ldr	r3, [pc, #68]	; (800f568 <netconn_bind+0x5c>)
 800f522:	f44f 729c 	mov.w	r2, #312	; 0x138
 800f526:	4911      	ldr	r1, [pc, #68]	; (800f56c <netconn_bind+0x60>)
 800f528:	4811      	ldr	r0, [pc, #68]	; (800f570 <netconn_bind+0x64>)
 800f52a:	f010 fb45 	bl	801fbb8 <iprintf>
 800f52e:	f06f 030f 	mvn.w	r3, #15
 800f532:	e015      	b.n	800f560 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d101      	bne.n	800f53e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800f53a:	4b0e      	ldr	r3, [pc, #56]	; (800f574 <netconn_bind+0x68>)
 800f53c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800f546:	88fb      	ldrh	r3, [r7, #6]
 800f548:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800f54a:	f107 0314 	add.w	r3, r7, #20
 800f54e:	4619      	mov	r1, r3
 800f550:	4809      	ldr	r0, [pc, #36]	; (800f578 <netconn_bind+0x6c>)
 800f552:	f7ff ff03 	bl	800f35c <netconn_apimsg>
 800f556:	4603      	mov	r3, r0
 800f558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800f55c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f560:	4618      	mov	r0, r3
 800f562:	3738      	adds	r7, #56	; 0x38
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	08020f50 	.word	0x08020f50
 800f56c:	08021088 	.word	0x08021088
 800f570:	08020fa8 	.word	0x08020fa8
 800f574:	08024a48 	.word	0x08024a48
 800f578:	08010cf9 	.word	0x08010cf9

0800f57c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b08c      	sub	sp, #48	; 0x30
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	460b      	mov	r3, r1
 800f586:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d109      	bne.n	800f5a2 <netconn_listen_with_backlog+0x26>
 800f58e:	4b0d      	ldr	r3, [pc, #52]	; (800f5c4 <netconn_listen_with_backlog+0x48>)
 800f590:	f240 12bb 	movw	r2, #443	; 0x1bb
 800f594:	490c      	ldr	r1, [pc, #48]	; (800f5c8 <netconn_listen_with_backlog+0x4c>)
 800f596:	480d      	ldr	r0, [pc, #52]	; (800f5cc <netconn_listen_with_backlog+0x50>)
 800f598:	f010 fb0e 	bl	801fbb8 <iprintf>
 800f59c:	f06f 030f 	mvn.w	r3, #15
 800f5a0:	e00c      	b.n	800f5bc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800f5a6:	f107 030c 	add.w	r3, r7, #12
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	4808      	ldr	r0, [pc, #32]	; (800f5d0 <netconn_listen_with_backlog+0x54>)
 800f5ae:	f7ff fed5 	bl	800f35c <netconn_apimsg>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f5b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3730      	adds	r7, #48	; 0x30
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	08020f50 	.word	0x08020f50
 800f5c8:	08021108 	.word	0x08021108
 800f5cc:	08020fa8 	.word	0x08020fa8
 800f5d0:	08010d6d 	.word	0x08010d6d

0800f5d4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d109      	bne.n	800f5f8 <netconn_accept+0x24>
 800f5e4:	4b3d      	ldr	r3, [pc, #244]	; (800f6dc <netconn_accept+0x108>)
 800f5e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f5ea:	493d      	ldr	r1, [pc, #244]	; (800f6e0 <netconn_accept+0x10c>)
 800f5ec:	483d      	ldr	r0, [pc, #244]	; (800f6e4 <netconn_accept+0x110>)
 800f5ee:	f010 fae3 	bl	801fbb8 <iprintf>
 800f5f2:	f06f 030f 	mvn.w	r3, #15
 800f5f6:	e06c      	b.n	800f6d2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d109      	bne.n	800f618 <netconn_accept+0x44>
 800f604:	4b35      	ldr	r3, [pc, #212]	; (800f6dc <netconn_accept+0x108>)
 800f606:	f240 12e3 	movw	r2, #483	; 0x1e3
 800f60a:	4937      	ldr	r1, [pc, #220]	; (800f6e8 <netconn_accept+0x114>)
 800f60c:	4835      	ldr	r0, [pc, #212]	; (800f6e4 <netconn_accept+0x110>)
 800f60e:	f010 fad3 	bl	801fbb8 <iprintf>
 800f612:	f06f 030f 	mvn.w	r3, #15
 800f616:	e05c      	b.n	800f6d2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 fb6c 	bl	800fcf6 <netconn_err>
 800f61e:	4603      	mov	r3, r0
 800f620:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800f622:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d002      	beq.n	800f630 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800f62a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f62e:	e050      	b.n	800f6d2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	3314      	adds	r3, #20
 800f634:	4618      	mov	r0, r3
 800f636:	f00f f8c5 	bl	801e7c4 <sys_mbox_valid>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d005      	beq.n	800f64c <netconn_accept+0x78>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	7f1b      	ldrb	r3, [r3, #28]
 800f644:	f003 0301 	and.w	r3, r3, #1
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d002      	beq.n	800f652 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800f64c:	f06f 030e 	mvn.w	r3, #14
 800f650:	e03f      	b.n	800f6d2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	7f1b      	ldrb	r3, [r3, #28]
 800f656:	f003 0302 	and.w	r3, r3, #2
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00e      	beq.n	800f67c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	3314      	adds	r3, #20
 800f662:	f107 020c 	add.w	r2, r7, #12
 800f666:	4611      	mov	r1, r2
 800f668:	4618      	mov	r0, r3
 800f66a:	f00f f894 	bl	801e796 <sys_arch_mbox_tryfetch>
 800f66e:	4603      	mov	r3, r0
 800f670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f674:	d10a      	bne.n	800f68c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800f676:	f06f 0306 	mvn.w	r3, #6
 800f67a:	e02a      	b.n	800f6d2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	3314      	adds	r3, #20
 800f680:	f107 010c 	add.w	r1, r7, #12
 800f684:	2200      	movs	r2, #0
 800f686:	4618      	mov	r0, r3
 800f688:	f00f f854 	bl	801e734 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f690:	2b00      	cmp	r3, #0
 800f692:	d005      	beq.n	800f6a0 <netconn_accept+0xcc>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f698:	2200      	movs	r2, #0
 800f69a:	2101      	movs	r1, #1
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f107 0213 	add.w	r2, r7, #19
 800f6a6:	4611      	mov	r1, r2
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f000 fb75 	bl	800fd98 <lwip_netconn_is_err_msg>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d002      	beq.n	800f6ba <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800f6b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6b8:	e00b      	b.n	800f6d2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d102      	bne.n	800f6c6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800f6c0:	f06f 030e 	mvn.w	r3, #14
 800f6c4:	e005      	b.n	800f6d2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	697a      	ldr	r2, [r7, #20]
 800f6ce:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f6d0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3718      	adds	r7, #24
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	08020f50 	.word	0x08020f50
 800f6e0:	08021128 	.word	0x08021128
 800f6e4:	08020fa8 	.word	0x08020fa8
 800f6e8:	08021148 	.word	0x08021148

0800f6ec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b088      	sub	sp, #32
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d109      	bne.n	800f718 <netconn_recv_data+0x2c>
 800f704:	4b58      	ldr	r3, [pc, #352]	; (800f868 <netconn_recv_data+0x17c>)
 800f706:	f44f 7212 	mov.w	r2, #584	; 0x248
 800f70a:	4958      	ldr	r1, [pc, #352]	; (800f86c <netconn_recv_data+0x180>)
 800f70c:	4858      	ldr	r0, [pc, #352]	; (800f870 <netconn_recv_data+0x184>)
 800f70e:	f010 fa53 	bl	801fbb8 <iprintf>
 800f712:	f06f 030f 	mvn.w	r3, #15
 800f716:	e0a2      	b.n	800f85e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	2200      	movs	r2, #0
 800f71c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d109      	bne.n	800f738 <netconn_recv_data+0x4c>
 800f724:	4b50      	ldr	r3, [pc, #320]	; (800f868 <netconn_recv_data+0x17c>)
 800f726:	f240 224a 	movw	r2, #586	; 0x24a
 800f72a:	4952      	ldr	r1, [pc, #328]	; (800f874 <netconn_recv_data+0x188>)
 800f72c:	4850      	ldr	r0, [pc, #320]	; (800f870 <netconn_recv_data+0x184>)
 800f72e:	f010 fa43 	bl	801fbb8 <iprintf>
 800f732:	f06f 030f 	mvn.w	r3, #15
 800f736:	e092      	b.n	800f85e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	3310      	adds	r3, #16
 800f73c:	4618      	mov	r0, r3
 800f73e:	f00f f841 	bl	801e7c4 <sys_mbox_valid>
 800f742:	4603      	mov	r3, r0
 800f744:	2b00      	cmp	r3, #0
 800f746:	d10e      	bne.n	800f766 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f000 fad4 	bl	800fcf6 <netconn_err>
 800f74e:	4603      	mov	r3, r0
 800f750:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800f752:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d002      	beq.n	800f760 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800f75a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f75e:	e07e      	b.n	800f85e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800f760:	f06f 030a 	mvn.w	r3, #10
 800f764:	e07b      	b.n	800f85e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	7f1b      	ldrb	r3, [r3, #28]
 800f76a:	f003 0302 	and.w	r3, r3, #2
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d10f      	bne.n	800f792 <netconn_recv_data+0xa6>
 800f772:	79fb      	ldrb	r3, [r7, #7]
 800f774:	f003 0304 	and.w	r3, r3, #4
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d10a      	bne.n	800f792 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	7f1b      	ldrb	r3, [r3, #28]
 800f780:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f784:	2b00      	cmp	r3, #0
 800f786:	d104      	bne.n	800f792 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d023      	beq.n	800f7da <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	3310      	adds	r3, #16
 800f796:	f107 0218 	add.w	r2, r7, #24
 800f79a:	4611      	mov	r1, r2
 800f79c:	4618      	mov	r0, r3
 800f79e:	f00e fffa 	bl	801e796 <sys_arch_mbox_tryfetch>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a8:	d11f      	bne.n	800f7ea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800f7aa:	68f8      	ldr	r0, [r7, #12]
 800f7ac:	f000 faa3 	bl	800fcf6 <netconn_err>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800f7b4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d002      	beq.n	800f7c2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800f7bc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f7c0:	e04d      	b.n	800f85e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	7f1b      	ldrb	r3, [r3, #28]
 800f7c6:	f003 0301 	and.w	r3, r3, #1
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d002      	beq.n	800f7d4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800f7ce:	f06f 030a 	mvn.w	r3, #10
 800f7d2:	e044      	b.n	800f85e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800f7d4:	f06f 0306 	mvn.w	r3, #6
 800f7d8:	e041      	b.n	800f85e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	3310      	adds	r3, #16
 800f7de:	f107 0118 	add.w	r1, r7, #24
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f00e ffa5 	bl	801e734 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7f2:	2b10      	cmp	r3, #16
 800f7f4:	d117      	bne.n	800f826 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	f107 0217 	add.w	r2, r7, #23
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	4618      	mov	r0, r3
 800f800:	f000 faca 	bl	800fd98 <lwip_netconn_is_err_msg>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d009      	beq.n	800f81e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800f80a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f80e:	f113 0f0f 	cmn.w	r3, #15
 800f812:	d101      	bne.n	800f818 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800f814:	2300      	movs	r3, #0
 800f816:	e022      	b.n	800f85e <netconn_recv_data+0x172>
      }
      return err;
 800f818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f81c:	e01f      	b.n	800f85e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800f81e:	69bb      	ldr	r3, [r7, #24]
 800f820:	891b      	ldrh	r3, [r3, #8]
 800f822:	83fb      	strh	r3, [r7, #30]
 800f824:	e00d      	b.n	800f842 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d106      	bne.n	800f83a <netconn_recv_data+0x14e>
 800f82c:	4b0e      	ldr	r3, [pc, #56]	; (800f868 <netconn_recv_data+0x17c>)
 800f82e:	f240 2291 	movw	r2, #657	; 0x291
 800f832:	4911      	ldr	r1, [pc, #68]	; (800f878 <netconn_recv_data+0x18c>)
 800f834:	480e      	ldr	r0, [pc, #56]	; (800f870 <netconn_recv_data+0x184>)
 800f836:	f010 f9bf 	bl	801fbb8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	891b      	ldrh	r3, [r3, #8]
 800f840:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f846:	2b00      	cmp	r3, #0
 800f848:	d005      	beq.n	800f856 <netconn_recv_data+0x16a>
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84e:	8bfa      	ldrh	r2, [r7, #30]
 800f850:	2101      	movs	r1, #1
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800f856:	69ba      	ldr	r2, [r7, #24]
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3720      	adds	r7, #32
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	08020f50 	.word	0x08020f50
 800f86c:	08021168 	.word	0x08021168
 800f870:	08020fa8 	.word	0x08020fa8
 800f874:	08021188 	.word	0x08021188
 800f878:	080211a4 	.word	0x080211a4

0800f87c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d005      	beq.n	800f89a <netconn_tcp_recvd_msg+0x1e>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f896:	2b10      	cmp	r3, #16
 800f898:	d009      	beq.n	800f8ae <netconn_tcp_recvd_msg+0x32>
 800f89a:	4b0c      	ldr	r3, [pc, #48]	; (800f8cc <netconn_tcp_recvd_msg+0x50>)
 800f89c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800f8a0:	490b      	ldr	r1, [pc, #44]	; (800f8d0 <netconn_tcp_recvd_msg+0x54>)
 800f8a2:	480c      	ldr	r0, [pc, #48]	; (800f8d4 <netconn_tcp_recvd_msg+0x58>)
 800f8a4:	f010 f988 	bl	801fbb8 <iprintf>
 800f8a8:	f06f 030f 	mvn.w	r3, #15
 800f8ac:	e00a      	b.n	800f8c4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	68fa      	ldr	r2, [r7, #12]
 800f8b2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	68ba      	ldr	r2, [r7, #8]
 800f8b8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800f8ba:	6879      	ldr	r1, [r7, #4]
 800f8bc:	4806      	ldr	r0, [pc, #24]	; (800f8d8 <netconn_tcp_recvd_msg+0x5c>)
 800f8be:	f7ff fd4d 	bl	800f35c <netconn_apimsg>
 800f8c2:	4603      	mov	r3, r0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3710      	adds	r7, #16
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	08020f50 	.word	0x08020f50
 800f8d0:	080211b0 	.word	0x080211b0
 800f8d4:	08020fa8 	.word	0x08020fa8
 800f8d8:	08010e9d 	.word	0x08010e9d

0800f8dc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b090      	sub	sp, #64	; 0x40
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	3310      	adds	r3, #16
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f00e ff68 	bl	801e7c4 <sys_mbox_valid>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d102      	bne.n	800f900 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800f8fa:	f06f 030a 	mvn.w	r3, #10
 800f8fe:	e06d      	b.n	800f9dc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	7f1b      	ldrb	r3, [r3, #28]
 800f904:	b25b      	sxtb	r3, r3
 800f906:	2b00      	cmp	r3, #0
 800f908:	da07      	bge.n	800f91a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	7f1b      	ldrb	r3, [r3, #28]
 800f90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f912:	b2da      	uxtb	r2, r3
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800f918:	e039      	b.n	800f98e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800f91a:	79fb      	ldrb	r3, [r7, #7]
 800f91c:	461a      	mov	r2, r3
 800f91e:	68b9      	ldr	r1, [r7, #8]
 800f920:	68f8      	ldr	r0, [r7, #12]
 800f922:	f7ff fee3 	bl	800f6ec <netconn_recv_data>
 800f926:	4603      	mov	r3, r0
 800f928:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800f92c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f930:	2b00      	cmp	r3, #0
 800f932:	d002      	beq.n	800f93a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800f934:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f938:	e050      	b.n	800f9dc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800f940:	79fb      	ldrb	r3, [r7, #7]
 800f942:	f003 0308 	and.w	r3, r3, #8
 800f946:	2b00      	cmp	r3, #0
 800f948:	d10e      	bne.n	800f968 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800f94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d002      	beq.n	800f956 <netconn_recv_data_tcp+0x7a>
 800f950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f952:	891b      	ldrh	r3, [r3, #8]
 800f954:	e000      	b.n	800f958 <netconn_recv_data_tcp+0x7c>
 800f956:	2301      	movs	r3, #1
 800f958:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800f95a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f95c:	f107 0214 	add.w	r2, r7, #20
 800f960:	4619      	mov	r1, r3
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f7ff ff8a 	bl	800f87c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800f968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d134      	bne.n	800f9d8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800f96e:	79fb      	ldrb	r3, [r7, #7]
 800f970:	f003 0310 	and.w	r3, r3, #16
 800f974:	2b00      	cmp	r3, #0
 800f976:	d009      	beq.n	800f98c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	7f1b      	ldrb	r3, [r3, #28]
 800f97c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f980:	b2da      	uxtb	r2, r3
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800f986:	f06f 0306 	mvn.w	r3, #6
 800f98a:	e027      	b.n	800f9dc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800f98c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f992:	2b00      	cmp	r3, #0
 800f994:	d005      	beq.n	800f9a2 <netconn_recv_data_tcp+0xc6>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99a:	2200      	movs	r2, #0
 800f99c:	2101      	movs	r1, #1
 800f99e:	68f8      	ldr	r0, [r7, #12]
 800f9a0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d10f      	bne.n	800f9ca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800f9aa:	68f8      	ldr	r0, [r7, #12]
 800f9ac:	f000 f9a3 	bl	800fcf6 <netconn_err>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800f9b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d002      	beq.n	800f9c4 <netconn_recv_data_tcp+0xe8>
          return err;
 800f9be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f9c2:	e00b      	b.n	800f9dc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800f9c4:	f06f 030d 	mvn.w	r3, #13
 800f9c8:	e008      	b.n	800f9dc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800f9ca:	2101      	movs	r1, #1
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f000 f955 	bl	800fc7c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800f9d2:	f06f 030e 	mvn.w	r3, #14
 800f9d6:	e001      	b.n	800f9dc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800f9d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3740      	adds	r7, #64	; 0x40
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d109      	bne.n	800fa0c <netconn_recv+0x28>
 800f9f8:	4b32      	ldr	r3, [pc, #200]	; (800fac4 <netconn_recv+0xe0>)
 800f9fa:	f240 3263 	movw	r2, #867	; 0x363
 800f9fe:	4932      	ldr	r1, [pc, #200]	; (800fac8 <netconn_recv+0xe4>)
 800fa00:	4832      	ldr	r0, [pc, #200]	; (800facc <netconn_recv+0xe8>)
 800fa02:	f010 f8d9 	bl	801fbb8 <iprintf>
 800fa06:	f06f 030f 	mvn.w	r3, #15
 800fa0a:	e056      	b.n	800faba <netconn_recv+0xd6>
  *new_buf = NULL;
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d109      	bne.n	800fa2c <netconn_recv+0x48>
 800fa18:	4b2a      	ldr	r3, [pc, #168]	; (800fac4 <netconn_recv+0xe0>)
 800fa1a:	f240 3265 	movw	r2, #869	; 0x365
 800fa1e:	492c      	ldr	r1, [pc, #176]	; (800fad0 <netconn_recv+0xec>)
 800fa20:	482a      	ldr	r0, [pc, #168]	; (800facc <netconn_recv+0xe8>)
 800fa22:	f010 f8c9 	bl	801fbb8 <iprintf>
 800fa26:	f06f 030f 	mvn.w	r3, #15
 800fa2a:	e046      	b.n	800faba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa34:	2b10      	cmp	r3, #16
 800fa36:	d13a      	bne.n	800faae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800fa3c:	2006      	movs	r0, #6
 800fa3e:	f002 fc4f 	bl	80122e0 <memp_malloc>
 800fa42:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d102      	bne.n	800fa50 <netconn_recv+0x6c>
      return ERR_MEM;
 800fa4a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa4e:	e034      	b.n	800faba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800fa50:	f107 030c 	add.w	r3, r7, #12
 800fa54:	2200      	movs	r2, #0
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff ff3f 	bl	800f8dc <netconn_recv_data_tcp>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800fa62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d006      	beq.n	800fa78 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800fa6a:	6979      	ldr	r1, [r7, #20]
 800fa6c:	2006      	movs	r0, #6
 800fa6e:	f002 fc89 	bl	8012384 <memp_free>
      return err;
 800fa72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa76:	e020      	b.n	800faba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d106      	bne.n	800fa8c <netconn_recv+0xa8>
 800fa7e:	4b11      	ldr	r3, [pc, #68]	; (800fac4 <netconn_recv+0xe0>)
 800fa80:	f240 3279 	movw	r2, #889	; 0x379
 800fa84:	4913      	ldr	r1, [pc, #76]	; (800fad4 <netconn_recv+0xf0>)
 800fa86:	4811      	ldr	r0, [pc, #68]	; (800facc <netconn_recv+0xe8>)
 800fa88:	f010 f896 	bl	801fbb8 <iprintf>

    buf->p = p;
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	2200      	movs	r2, #0
 800faa2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	697a      	ldr	r2, [r7, #20]
 800faa8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800faaa:	2300      	movs	r3, #0
 800faac:	e005      	b.n	800faba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800faae:	2200      	movs	r2, #0
 800fab0:	6839      	ldr	r1, [r7, #0]
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f7ff fe1a 	bl	800f6ec <netconn_recv_data>
 800fab8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3718      	adds	r7, #24
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	08020f50 	.word	0x08020f50
 800fac8:	08021168 	.word	0x08021168
 800facc:	08020fa8 	.word	0x08020fa8
 800fad0:	08021188 	.word	0x08021188
 800fad4:	08021200 	.word	0x08021200

0800fad8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af02      	add	r7, sp, #8
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
 800fae4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800faee:	78fa      	ldrb	r2, [r7, #3]
 800faf0:	f107 0110 	add.w	r1, r7, #16
 800faf4:	6a3b      	ldr	r3, [r7, #32]
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	4613      	mov	r3, r2
 800fafa:	2201      	movs	r2, #1
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f000 f805 	bl	800fb0c <netconn_write_vectors_partly>
 800fb02:	4603      	mov	r3, r0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b092      	sub	sp, #72	; 0x48
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	4611      	mov	r1, r2
 800fb18:	461a      	mov	r2, r3
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	80fb      	strh	r3, [r7, #6]
 800fb1e:	4613      	mov	r3, r2
 800fb20:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d109      	bne.n	800fb3c <netconn_write_vectors_partly+0x30>
 800fb28:	4b4e      	ldr	r3, [pc, #312]	; (800fc64 <netconn_write_vectors_partly+0x158>)
 800fb2a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800fb2e:	494e      	ldr	r1, [pc, #312]	; (800fc68 <netconn_write_vectors_partly+0x15c>)
 800fb30:	484e      	ldr	r0, [pc, #312]	; (800fc6c <netconn_write_vectors_partly+0x160>)
 800fb32:	f010 f841 	bl	801fbb8 <iprintf>
 800fb36:	f06f 030f 	mvn.w	r3, #15
 800fb3a:	e08e      	b.n	800fc5a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb44:	2b10      	cmp	r3, #16
 800fb46:	d009      	beq.n	800fb5c <netconn_write_vectors_partly+0x50>
 800fb48:	4b46      	ldr	r3, [pc, #280]	; (800fc64 <netconn_write_vectors_partly+0x158>)
 800fb4a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800fb4e:	4948      	ldr	r1, [pc, #288]	; (800fc70 <netconn_write_vectors_partly+0x164>)
 800fb50:	4846      	ldr	r0, [pc, #280]	; (800fc6c <netconn_write_vectors_partly+0x160>)
 800fb52:	f010 f831 	bl	801fbb8 <iprintf>
 800fb56:	f06f 0305 	mvn.w	r3, #5
 800fb5a:	e07e      	b.n	800fc5a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	7f1b      	ldrb	r3, [r3, #28]
 800fb60:	f003 0302 	and.w	r3, r3, #2
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d104      	bne.n	800fb72 <netconn_write_vectors_partly+0x66>
 800fb68:	797b      	ldrb	r3, [r7, #5]
 800fb6a:	f003 0304 	and.w	r3, r3, #4
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d001      	beq.n	800fb76 <netconn_write_vectors_partly+0x6a>
 800fb72:	2301      	movs	r3, #1
 800fb74:	e000      	b.n	800fb78 <netconn_write_vectors_partly+0x6c>
 800fb76:	2300      	movs	r3, #0
 800fb78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800fb7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d005      	beq.n	800fb90 <netconn_write_vectors_partly+0x84>
 800fb84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d102      	bne.n	800fb90 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800fb8a:	f06f 0305 	mvn.w	r3, #5
 800fb8e:	e064      	b.n	800fc5a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800fb90:	2300      	movs	r3, #0
 800fb92:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800fb94:	2300      	movs	r3, #0
 800fb96:	643b      	str	r3, [r7, #64]	; 0x40
 800fb98:	e015      	b.n	800fbc6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800fb9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb9c:	00db      	lsls	r3, r3, #3
 800fb9e:	68ba      	ldr	r2, [r7, #8]
 800fba0:	4413      	add	r3, r2
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fba6:	4413      	add	r3, r2
 800fba8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800fbaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbac:	00db      	lsls	r3, r3, #3
 800fbae:	68ba      	ldr	r2, [r7, #8]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d202      	bcs.n	800fbc0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800fbba:	f06f 0305 	mvn.w	r3, #5
 800fbbe:	e04c      	b.n	800fc5a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800fbc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	643b      	str	r3, [r7, #64]	; 0x40
 800fbc6:	88fb      	ldrh	r3, [r7, #6]
 800fbc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	dbe5      	blt.n	800fb9a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800fbce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	e040      	b.n	800fc5a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800fbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	da0a      	bge.n	800fbf4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800fbde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d102      	bne.n	800fbea <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800fbe4:	f06f 0305 	mvn.w	r3, #5
 800fbe8:	e037      	b.n	800fc5a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800fbea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fbee:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800fbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800fbfc:	88fb      	ldrh	r3, [r7, #6]
 800fbfe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800fc00:	2300      	movs	r3, #0
 800fc02:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800fc04:	797b      	ldrb	r3, [r7, #5]
 800fc06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800fc0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc0c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800fc12:	f107 0314 	add.w	r3, r7, #20
 800fc16:	4619      	mov	r1, r3
 800fc18:	4816      	ldr	r0, [pc, #88]	; (800fc74 <netconn_write_vectors_partly+0x168>)
 800fc1a:	f7ff fb9f 	bl	800f35c <netconn_apimsg>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800fc24:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d114      	bne.n	800fc56 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800fc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d002      	beq.n	800fc38 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800fc32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc36:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800fc38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d10a      	bne.n	800fc56 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800fc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d006      	beq.n	800fc56 <netconn_write_vectors_partly+0x14a>
 800fc48:	4b06      	ldr	r3, [pc, #24]	; (800fc64 <netconn_write_vectors_partly+0x158>)
 800fc4a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fc4e:	490a      	ldr	r1, [pc, #40]	; (800fc78 <netconn_write_vectors_partly+0x16c>)
 800fc50:	4806      	ldr	r0, [pc, #24]	; (800fc6c <netconn_write_vectors_partly+0x160>)
 800fc52:	f00f ffb1 	bl	801fbb8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800fc56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3748      	adds	r7, #72	; 0x48
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	08020f50 	.word	0x08020f50
 800fc68:	08021228 	.word	0x08021228
 800fc6c:	08020fa8 	.word	0x08020fa8
 800fc70:	08021244 	.word	0x08021244
 800fc74:	080112a1 	.word	0x080112a1
 800fc78:	08021268 	.word	0x08021268

0800fc7c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b08c      	sub	sp, #48	; 0x30
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	460b      	mov	r3, r1
 800fc86:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d109      	bne.n	800fca2 <netconn_close_shutdown+0x26>
 800fc8e:	4b0f      	ldr	r3, [pc, #60]	; (800fccc <netconn_close_shutdown+0x50>)
 800fc90:	f240 4247 	movw	r2, #1095	; 0x447
 800fc94:	490e      	ldr	r1, [pc, #56]	; (800fcd0 <netconn_close_shutdown+0x54>)
 800fc96:	480f      	ldr	r0, [pc, #60]	; (800fcd4 <netconn_close_shutdown+0x58>)
 800fc98:	f00f ff8e 	bl	801fbb8 <iprintf>
 800fc9c:	f06f 030f 	mvn.w	r3, #15
 800fca0:	e010      	b.n	800fcc4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800fca6:	78fb      	ldrb	r3, [r7, #3]
 800fca8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800fcaa:	2329      	movs	r3, #41	; 0x29
 800fcac:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800fcae:	f107 030c 	add.w	r3, r7, #12
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	4808      	ldr	r0, [pc, #32]	; (800fcd8 <netconn_close_shutdown+0x5c>)
 800fcb6:	f7ff fb51 	bl	800f35c <netconn_apimsg>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800fcc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3730      	adds	r7, #48	; 0x30
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	08020f50 	.word	0x08020f50
 800fcd0:	0802128c 	.word	0x0802128c
 800fcd4:	08020fa8 	.word	0x08020fa8
 800fcd8:	080113b9 	.word	0x080113b9

0800fcdc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800fce4:	2103      	movs	r1, #3
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7ff ffc8 	bl	800fc7c <netconn_close_shutdown>
 800fcec:	4603      	mov	r3, r0
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3708      	adds	r7, #8
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800fcf6:	b580      	push	{r7, lr}
 800fcf8:	b084      	sub	sp, #16
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d101      	bne.n	800fd08 <netconn_err+0x12>
    return ERR_OK;
 800fd04:	2300      	movs	r3, #0
 800fd06:	e00d      	b.n	800fd24 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800fd08:	f00e fe66 	bl	801e9d8 <sys_arch_protect>
 800fd0c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	7a1b      	ldrb	r3, [r3, #8]
 800fd12:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2200      	movs	r2, #0
 800fd18:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800fd1a:	68f8      	ldr	r0, [r7, #12]
 800fd1c:	f00e fe6a 	bl	801e9f4 <sys_arch_unprotect>
  return err;
 800fd20:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3710      	adds	r7, #16
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	4603      	mov	r3, r0
 800fd34:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800fd36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd3a:	f113 0f0d 	cmn.w	r3, #13
 800fd3e:	d009      	beq.n	800fd54 <lwip_netconn_err_to_msg+0x28>
 800fd40:	f113 0f0d 	cmn.w	r3, #13
 800fd44:	dc0c      	bgt.n	800fd60 <lwip_netconn_err_to_msg+0x34>
 800fd46:	f113 0f0f 	cmn.w	r3, #15
 800fd4a:	d007      	beq.n	800fd5c <lwip_netconn_err_to_msg+0x30>
 800fd4c:	f113 0f0e 	cmn.w	r3, #14
 800fd50:	d002      	beq.n	800fd58 <lwip_netconn_err_to_msg+0x2c>
 800fd52:	e005      	b.n	800fd60 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800fd54:	4b0a      	ldr	r3, [pc, #40]	; (800fd80 <lwip_netconn_err_to_msg+0x54>)
 800fd56:	e00e      	b.n	800fd76 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800fd58:	4b0a      	ldr	r3, [pc, #40]	; (800fd84 <lwip_netconn_err_to_msg+0x58>)
 800fd5a:	e00c      	b.n	800fd76 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800fd5c:	4b0a      	ldr	r3, [pc, #40]	; (800fd88 <lwip_netconn_err_to_msg+0x5c>)
 800fd5e:	e00a      	b.n	800fd76 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800fd60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d005      	beq.n	800fd74 <lwip_netconn_err_to_msg+0x48>
 800fd68:	4b08      	ldr	r3, [pc, #32]	; (800fd8c <lwip_netconn_err_to_msg+0x60>)
 800fd6a:	227d      	movs	r2, #125	; 0x7d
 800fd6c:	4908      	ldr	r1, [pc, #32]	; (800fd90 <lwip_netconn_err_to_msg+0x64>)
 800fd6e:	4809      	ldr	r0, [pc, #36]	; (800fd94 <lwip_netconn_err_to_msg+0x68>)
 800fd70:	f00f ff22 	bl	801fbb8 <iprintf>
      return NULL;
 800fd74:	2300      	movs	r3, #0
  }
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3708      	adds	r7, #8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	08024924 	.word	0x08024924
 800fd84:	08024925 	.word	0x08024925
 800fd88:	08024926 	.word	0x08024926
 800fd8c:	080212a8 	.word	0x080212a8
 800fd90:	080212dc 	.word	0x080212dc
 800fd94:	080212ec 	.word	0x080212ec

0800fd98 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d105      	bne.n	800fdb4 <lwip_netconn_is_err_msg+0x1c>
 800fda8:	4b12      	ldr	r3, [pc, #72]	; (800fdf4 <lwip_netconn_is_err_msg+0x5c>)
 800fdaa:	2285      	movs	r2, #133	; 0x85
 800fdac:	4912      	ldr	r1, [pc, #72]	; (800fdf8 <lwip_netconn_is_err_msg+0x60>)
 800fdae:	4813      	ldr	r0, [pc, #76]	; (800fdfc <lwip_netconn_is_err_msg+0x64>)
 800fdb0:	f00f ff02 	bl	801fbb8 <iprintf>

  if (msg == &netconn_aborted) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	4a12      	ldr	r2, [pc, #72]	; (800fe00 <lwip_netconn_is_err_msg+0x68>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d104      	bne.n	800fdc6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	22f3      	movs	r2, #243	; 0xf3
 800fdc0:	701a      	strb	r2, [r3, #0]
    return 1;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e012      	b.n	800fdec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4a0e      	ldr	r2, [pc, #56]	; (800fe04 <lwip_netconn_is_err_msg+0x6c>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d104      	bne.n	800fdd8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	22f2      	movs	r2, #242	; 0xf2
 800fdd2:	701a      	strb	r2, [r3, #0]
    return 1;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	e009      	b.n	800fdec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4a0b      	ldr	r2, [pc, #44]	; (800fe08 <lwip_netconn_is_err_msg+0x70>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d104      	bne.n	800fdea <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	22f1      	movs	r2, #241	; 0xf1
 800fde4:	701a      	strb	r2, [r3, #0]
    return 1;
 800fde6:	2301      	movs	r3, #1
 800fde8:	e000      	b.n	800fdec <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	080212a8 	.word	0x080212a8
 800fdf8:	08021314 	.word	0x08021314
 800fdfc:	080212ec 	.word	0x080212ec
 800fe00:	08024924 	.word	0x08024924
 800fe04:	08024925 	.word	0x08024925
 800fe08:	08024926 	.word	0x08024926

0800fe0c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b088      	sub	sp, #32
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	607a      	str	r2, [r7, #4]
 800fe18:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d105      	bne.n	800fe2c <recv_udp+0x20>
 800fe20:	4b34      	ldr	r3, [pc, #208]	; (800fef4 <recv_udp+0xe8>)
 800fe22:	22e5      	movs	r2, #229	; 0xe5
 800fe24:	4934      	ldr	r1, [pc, #208]	; (800fef8 <recv_udp+0xec>)
 800fe26:	4835      	ldr	r0, [pc, #212]	; (800fefc <recv_udp+0xf0>)
 800fe28:	f00f fec6 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d105      	bne.n	800fe3e <recv_udp+0x32>
 800fe32:	4b30      	ldr	r3, [pc, #192]	; (800fef4 <recv_udp+0xe8>)
 800fe34:	22e6      	movs	r2, #230	; 0xe6
 800fe36:	4932      	ldr	r1, [pc, #200]	; (800ff00 <recv_udp+0xf4>)
 800fe38:	4830      	ldr	r0, [pc, #192]	; (800fefc <recv_udp+0xf0>)
 800fe3a:	f00f febd 	bl	801fbb8 <iprintf>
  conn = (struct netconn *)arg;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d103      	bne.n	800fe50 <recv_udp+0x44>
    pbuf_free(p);
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f003 f94b 	bl	80130e4 <pbuf_free>
    return;
 800fe4e:	e04d      	b.n	800feec <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	68ba      	ldr	r2, [r7, #8]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d005      	beq.n	800fe66 <recv_udp+0x5a>
 800fe5a:	4b26      	ldr	r3, [pc, #152]	; (800fef4 <recv_udp+0xe8>)
 800fe5c:	22ee      	movs	r2, #238	; 0xee
 800fe5e:	4929      	ldr	r1, [pc, #164]	; (800ff04 <recv_udp+0xf8>)
 800fe60:	4826      	ldr	r0, [pc, #152]	; (800fefc <recv_udp+0xf0>)
 800fe62:	f00f fea9 	bl	801fbb8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	3310      	adds	r3, #16
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f00e fcaa 	bl	801e7c4 <sys_mbox_valid>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d103      	bne.n	800fe7e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f003 f934 	bl	80130e4 <pbuf_free>
    return;
 800fe7c:	e036      	b.n	800feec <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800fe7e:	2006      	movs	r0, #6
 800fe80:	f002 fa2e 	bl	80122e0 <memp_malloc>
 800fe84:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d103      	bne.n	800fe94 <recv_udp+0x88>
    pbuf_free(p);
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f003 f929 	bl	80130e4 <pbuf_free>
    return;
 800fe92:	e02b      	b.n	800feec <recv_udp+0xe0>
  } else {
    buf->p = p;
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d002      	beq.n	800feac <recv_udp+0xa0>
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	e000      	b.n	800feae <recv_udp+0xa2>
 800feac:	2300      	movs	r3, #0
 800feae:	69ba      	ldr	r2, [r7, #24]
 800feb0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800feb6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	891b      	ldrh	r3, [r3, #8]
 800febc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	3310      	adds	r3, #16
 800fec2:	69b9      	ldr	r1, [r7, #24]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f00e fc1b 	bl	801e700 <sys_mbox_trypost>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d003      	beq.n	800fed8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800fed0:	69b8      	ldr	r0, [r7, #24]
 800fed2:	f001 fafd 	bl	80114d0 <netbuf_delete>
    return;
 800fed6:	e009      	b.n	800feec <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d005      	beq.n	800feec <recv_udp+0xe0>
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee4:	8afa      	ldrh	r2, [r7, #22]
 800fee6:	2100      	movs	r1, #0
 800fee8:	69f8      	ldr	r0, [r7, #28]
 800feea:	4798      	blx	r3
  }
}
 800feec:	3720      	adds	r7, #32
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
 800fef2:	bf00      	nop
 800fef4:	080212a8 	.word	0x080212a8
 800fef8:	08021320 	.word	0x08021320
 800fefc:	080212ec 	.word	0x080212ec
 800ff00:	08021344 	.word	0x08021344
 800ff04:	08021364 	.word	0x08021364

0800ff08 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b088      	sub	sp, #32
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	607a      	str	r2, [r7, #4]
 800ff14:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d106      	bne.n	800ff2a <recv_tcp+0x22>
 800ff1c:	4b36      	ldr	r3, [pc, #216]	; (800fff8 <recv_tcp+0xf0>)
 800ff1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ff22:	4936      	ldr	r1, [pc, #216]	; (800fffc <recv_tcp+0xf4>)
 800ff24:	4836      	ldr	r0, [pc, #216]	; (8010000 <recv_tcp+0xf8>)
 800ff26:	f00f fe47 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d106      	bne.n	800ff3e <recv_tcp+0x36>
 800ff30:	4b31      	ldr	r3, [pc, #196]	; (800fff8 <recv_tcp+0xf0>)
 800ff32:	f240 122d 	movw	r2, #301	; 0x12d
 800ff36:	4933      	ldr	r1, [pc, #204]	; (8010004 <recv_tcp+0xfc>)
 800ff38:	4831      	ldr	r0, [pc, #196]	; (8010000 <recv_tcp+0xf8>)
 800ff3a:	f00f fe3d 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ff3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d006      	beq.n	800ff54 <recv_tcp+0x4c>
 800ff46:	4b2c      	ldr	r3, [pc, #176]	; (800fff8 <recv_tcp+0xf0>)
 800ff48:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ff4c:	492e      	ldr	r1, [pc, #184]	; (8010008 <recv_tcp+0x100>)
 800ff4e:	482c      	ldr	r0, [pc, #176]	; (8010000 <recv_tcp+0xf8>)
 800ff50:	f00f fe32 	bl	801fbb8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d102      	bne.n	800ff64 <recv_tcp+0x5c>
    return ERR_VAL;
 800ff5e:	f06f 0305 	mvn.w	r3, #5
 800ff62:	e045      	b.n	800fff0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	68ba      	ldr	r2, [r7, #8]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d006      	beq.n	800ff7c <recv_tcp+0x74>
 800ff6e:	4b22      	ldr	r3, [pc, #136]	; (800fff8 <recv_tcp+0xf0>)
 800ff70:	f240 1235 	movw	r2, #309	; 0x135
 800ff74:	4925      	ldr	r1, [pc, #148]	; (801000c <recv_tcp+0x104>)
 800ff76:	4822      	ldr	r0, [pc, #136]	; (8010000 <recv_tcp+0xf8>)
 800ff78:	f00f fe1e 	bl	801fbb8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	3310      	adds	r3, #16
 800ff80:	4618      	mov	r0, r3
 800ff82:	f00e fc1f 	bl	801e7c4 <sys_mbox_valid>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d10d      	bne.n	800ffa8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d008      	beq.n	800ffa4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	891b      	ldrh	r3, [r3, #8]
 800ff96:	4619      	mov	r1, r3
 800ff98:	68b8      	ldr	r0, [r7, #8]
 800ff9a:	f004 f86b 	bl	8014074 <tcp_recved>
      pbuf_free(p);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f003 f8a0 	bl	80130e4 <pbuf_free>
    }
    return ERR_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	e023      	b.n	800fff0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d005      	beq.n	800ffba <recv_tcp+0xb2>
    msg = p;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	891b      	ldrh	r3, [r3, #8]
 800ffb6:	83fb      	strh	r3, [r7, #30]
 800ffb8:	e003      	b.n	800ffc2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ffba:	4b15      	ldr	r3, [pc, #84]	; (8010010 <recv_tcp+0x108>)
 800ffbc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	3310      	adds	r3, #16
 800ffc6:	69b9      	ldr	r1, [r7, #24]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f00e fb99 	bl	801e700 <sys_mbox_trypost>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d002      	beq.n	800ffda <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ffd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffd8:	e00a      	b.n	800fff0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d005      	beq.n	800ffee <recv_tcp+0xe6>
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe6:	8bfa      	ldrh	r2, [r7, #30]
 800ffe8:	2100      	movs	r1, #0
 800ffea:	6978      	ldr	r0, [r7, #20]
 800ffec:	4798      	blx	r3
  }

  return ERR_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3720      	adds	r7, #32
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	080212a8 	.word	0x080212a8
 800fffc:	08021384 	.word	0x08021384
 8010000:	080212ec 	.word	0x080212ec
 8010004:	080213a8 	.word	0x080213a8
 8010008:	080213c8 	.word	0x080213c8
 801000c:	080213e0 	.word	0x080213e0
 8010010:	08024926 	.word	0x08024926

08010014 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d106      	bne.n	8010036 <poll_tcp+0x22>
 8010028:	4b29      	ldr	r3, [pc, #164]	; (80100d0 <poll_tcp+0xbc>)
 801002a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 801002e:	4929      	ldr	r1, [pc, #164]	; (80100d4 <poll_tcp+0xc0>)
 8010030:	4829      	ldr	r0, [pc, #164]	; (80100d8 <poll_tcp+0xc4>)
 8010032:	f00f fdc1 	bl	801fbb8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	785b      	ldrb	r3, [r3, #1]
 801003a:	2b01      	cmp	r3, #1
 801003c:	d104      	bne.n	8010048 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801003e:	2101      	movs	r1, #1
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f000 ff61 	bl	8010f08 <lwip_netconn_do_writemore>
 8010046:	e016      	b.n	8010076 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	785b      	ldrb	r3, [r3, #1]
 801004c:	2b04      	cmp	r3, #4
 801004e:	d112      	bne.n	8010076 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6a1b      	ldr	r3, [r3, #32]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d00a      	beq.n	801006e <poll_tcp+0x5a>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6a1b      	ldr	r3, [r3, #32]
 801005c:	7a5b      	ldrb	r3, [r3, #9]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d005      	beq.n	801006e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	6a1b      	ldr	r3, [r3, #32]
 8010066:	7a5a      	ldrb	r2, [r3, #9]
 8010068:	3a01      	subs	r2, #1
 801006a:	b2d2      	uxtb	r2, r2
 801006c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801006e:	2101      	movs	r1, #1
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f000 fbf7 	bl	8010864 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	7f1b      	ldrb	r3, [r3, #28]
 801007a:	f003 0310 	and.w	r3, r3, #16
 801007e:	2b00      	cmp	r3, #0
 8010080:	d021      	beq.n	80100c6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d01d      	beq.n	80100c6 <poll_tcp+0xb2>
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010092:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8010096:	d316      	bcc.n	80100c6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80100a0:	2b04      	cmp	r3, #4
 80100a2:	d810      	bhi.n	80100c6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	7f1b      	ldrb	r3, [r3, #28]
 80100a8:	f023 0310 	bic.w	r3, r3, #16
 80100ac:	b2da      	uxtb	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d005      	beq.n	80100c6 <poll_tcp+0xb2>
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100be:	2200      	movs	r2, #0
 80100c0:	2102      	movs	r1, #2
 80100c2:	68f8      	ldr	r0, [r7, #12]
 80100c4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80100c6:	2300      	movs	r3, #0
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3710      	adds	r7, #16
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	080212a8 	.word	0x080212a8
 80100d4:	08021400 	.word	0x08021400
 80100d8:	080212ec 	.word	0x080212ec

080100dc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b086      	sub	sp, #24
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	60b9      	str	r1, [r7, #8]
 80100e6:	4613      	mov	r3, r2
 80100e8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d106      	bne.n	8010102 <sent_tcp+0x26>
 80100f4:	4b20      	ldr	r3, [pc, #128]	; (8010178 <sent_tcp+0x9c>)
 80100f6:	f240 1293 	movw	r2, #403	; 0x193
 80100fa:	4920      	ldr	r1, [pc, #128]	; (801017c <sent_tcp+0xa0>)
 80100fc:	4820      	ldr	r0, [pc, #128]	; (8010180 <sent_tcp+0xa4>)
 80100fe:	f00f fd5b 	bl	801fbb8 <iprintf>

  if (conn) {
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d032      	beq.n	801016e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	785b      	ldrb	r3, [r3, #1]
 801010c:	2b01      	cmp	r3, #1
 801010e:	d104      	bne.n	801011a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8010110:	2101      	movs	r1, #1
 8010112:	6978      	ldr	r0, [r7, #20]
 8010114:	f000 fef8 	bl	8010f08 <lwip_netconn_do_writemore>
 8010118:	e007      	b.n	801012a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	785b      	ldrb	r3, [r3, #1]
 801011e:	2b04      	cmp	r3, #4
 8010120:	d103      	bne.n	801012a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010122:	2101      	movs	r1, #1
 8010124:	6978      	ldr	r0, [r7, #20]
 8010126:	f000 fb9d 	bl	8010864 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d01d      	beq.n	801016e <sent_tcp+0x92>
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801013a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801013e:	d316      	bcc.n	801016e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010148:	2b04      	cmp	r3, #4
 801014a:	d810      	bhi.n	801016e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	7f1b      	ldrb	r3, [r3, #28]
 8010150:	f023 0310 	bic.w	r3, r3, #16
 8010154:	b2da      	uxtb	r2, r3
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801015e:	2b00      	cmp	r3, #0
 8010160:	d005      	beq.n	801016e <sent_tcp+0x92>
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010166:	88fa      	ldrh	r2, [r7, #6]
 8010168:	2102      	movs	r1, #2
 801016a:	6978      	ldr	r0, [r7, #20]
 801016c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801016e:	2300      	movs	r3, #0
}
 8010170:	4618      	mov	r0, r3
 8010172:	3718      	adds	r7, #24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	080212a8 	.word	0x080212a8
 801017c:	08021400 	.word	0x08021400
 8010180:	080212ec 	.word	0x080212ec

08010184 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b088      	sub	sp, #32
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	460b      	mov	r3, r1
 801018e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d106      	bne.n	80101a8 <err_tcp+0x24>
 801019a:	4b5f      	ldr	r3, [pc, #380]	; (8010318 <err_tcp+0x194>)
 801019c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80101a0:	495e      	ldr	r1, [pc, #376]	; (801031c <err_tcp+0x198>)
 80101a2:	485f      	ldr	r0, [pc, #380]	; (8010320 <err_tcp+0x19c>)
 80101a4:	f00f fd08 	bl	801fbb8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80101a8:	f00e fc16 	bl	801e9d8 <sys_arch_protect>
 80101ac:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80101ae:	69fb      	ldr	r3, [r7, #28]
 80101b0:	2200      	movs	r2, #0
 80101b2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	78fa      	ldrb	r2, [r7, #3]
 80101b8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	7f1b      	ldrb	r3, [r3, #28]
 80101be:	f043 0301 	orr.w	r3, r3, #1
 80101c2:	b2da      	uxtb	r2, r3
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80101c8:	69fb      	ldr	r3, [r7, #28]
 80101ca:	785b      	ldrb	r3, [r3, #1]
 80101cc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	2200      	movs	r2, #0
 80101d2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80101d4:	69b8      	ldr	r0, [r7, #24]
 80101d6:	f00e fc0d 	bl	801e9f4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d005      	beq.n	80101ee <err_tcp+0x6a>
 80101e2:	69fb      	ldr	r3, [r7, #28]
 80101e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e6:	2200      	movs	r2, #0
 80101e8:	2104      	movs	r1, #4
 80101ea:	69f8      	ldr	r0, [r7, #28]
 80101ec:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d005      	beq.n	8010202 <err_tcp+0x7e>
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fa:	2200      	movs	r2, #0
 80101fc:	2100      	movs	r1, #0
 80101fe:	69f8      	ldr	r0, [r7, #28]
 8010200:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010202:	69fb      	ldr	r3, [r7, #28]
 8010204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010206:	2b00      	cmp	r3, #0
 8010208:	d005      	beq.n	8010216 <err_tcp+0x92>
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801020e:	2200      	movs	r2, #0
 8010210:	2102      	movs	r1, #2
 8010212:	69f8      	ldr	r0, [r7, #28]
 8010214:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801021a:	4618      	mov	r0, r3
 801021c:	f7ff fd86 	bl	800fd2c <lwip_netconn_err_to_msg>
 8010220:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	3310      	adds	r3, #16
 8010226:	4618      	mov	r0, r3
 8010228:	f00e facc 	bl	801e7c4 <sys_mbox_valid>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d005      	beq.n	801023e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8010232:	69fb      	ldr	r3, [r7, #28]
 8010234:	3310      	adds	r3, #16
 8010236:	6939      	ldr	r1, [r7, #16]
 8010238:	4618      	mov	r0, r3
 801023a:	f00e fa61 	bl	801e700 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	3314      	adds	r3, #20
 8010242:	4618      	mov	r0, r3
 8010244:	f00e fabe 	bl	801e7c4 <sys_mbox_valid>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d005      	beq.n	801025a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	3314      	adds	r3, #20
 8010252:	6939      	ldr	r1, [r7, #16]
 8010254:	4618      	mov	r0, r3
 8010256:	f00e fa53 	bl	801e700 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801025a:	7dfb      	ldrb	r3, [r7, #23]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d005      	beq.n	801026c <err_tcp+0xe8>
 8010260:	7dfb      	ldrb	r3, [r7, #23]
 8010262:	2b04      	cmp	r3, #4
 8010264:	d002      	beq.n	801026c <err_tcp+0xe8>
 8010266:	7dfb      	ldrb	r3, [r7, #23]
 8010268:	2b03      	cmp	r3, #3
 801026a:	d143      	bne.n	80102f4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	7f1b      	ldrb	r3, [r3, #28]
 8010270:	f003 0304 	and.w	r3, r3, #4
 8010274:	2b00      	cmp	r3, #0
 8010276:	bf14      	ite	ne
 8010278:	2301      	movne	r3, #1
 801027a:	2300      	moveq	r3, #0
 801027c:	b2db      	uxtb	r3, r3
 801027e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	7f1b      	ldrb	r3, [r3, #28]
 8010284:	f023 0304 	bic.w	r3, r3, #4
 8010288:	b2da      	uxtb	r2, r3
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d13b      	bne.n	801030c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	6a1b      	ldr	r3, [r3, #32]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d106      	bne.n	80102aa <err_tcp+0x126>
 801029c:	4b1e      	ldr	r3, [pc, #120]	; (8010318 <err_tcp+0x194>)
 801029e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80102a2:	4920      	ldr	r1, [pc, #128]	; (8010324 <err_tcp+0x1a0>)
 80102a4:	481e      	ldr	r0, [pc, #120]	; (8010320 <err_tcp+0x19c>)
 80102a6:	f00f fc87 	bl	801fbb8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80102aa:	7dfb      	ldrb	r3, [r7, #23]
 80102ac:	2b04      	cmp	r3, #4
 80102ae:	d104      	bne.n	80102ba <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	6a1b      	ldr	r3, [r3, #32]
 80102b4:	2200      	movs	r2, #0
 80102b6:	711a      	strb	r2, [r3, #4]
 80102b8:	e003      	b.n	80102c2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	6a1b      	ldr	r3, [r3, #32]
 80102be:	78fa      	ldrb	r2, [r7, #3]
 80102c0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	6a1b      	ldr	r3, [r3, #32]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	330c      	adds	r3, #12
 80102ca:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80102cc:	68b8      	ldr	r0, [r7, #8]
 80102ce:	f00e fb07 	bl	801e8e0 <sys_sem_valid>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d106      	bne.n	80102e6 <err_tcp+0x162>
 80102d8:	4b0f      	ldr	r3, [pc, #60]	; (8010318 <err_tcp+0x194>)
 80102da:	f240 12ef 	movw	r2, #495	; 0x1ef
 80102de:	4912      	ldr	r1, [pc, #72]	; (8010328 <err_tcp+0x1a4>)
 80102e0:	480f      	ldr	r0, [pc, #60]	; (8010320 <err_tcp+0x19c>)
 80102e2:	f00f fc69 	bl	801fbb8 <iprintf>
      conn->current_msg = NULL;
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	2200      	movs	r2, #0
 80102ea:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80102ec:	68b8      	ldr	r0, [r7, #8]
 80102ee:	f00e fadd 	bl	801e8ac <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80102f2:	e00b      	b.n	801030c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	6a1b      	ldr	r3, [r3, #32]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d008      	beq.n	801030e <err_tcp+0x18a>
 80102fc:	4b06      	ldr	r3, [pc, #24]	; (8010318 <err_tcp+0x194>)
 80102fe:	f240 12f7 	movw	r2, #503	; 0x1f7
 8010302:	490a      	ldr	r1, [pc, #40]	; (801032c <err_tcp+0x1a8>)
 8010304:	4806      	ldr	r0, [pc, #24]	; (8010320 <err_tcp+0x19c>)
 8010306:	f00f fc57 	bl	801fbb8 <iprintf>
  }
}
 801030a:	e000      	b.n	801030e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 801030c:	bf00      	nop
}
 801030e:	bf00      	nop
 8010310:	3720      	adds	r7, #32
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	080212a8 	.word	0x080212a8
 801031c:	08021400 	.word	0x08021400
 8010320:	080212ec 	.word	0x080212ec
 8010324:	08021410 	.word	0x08021410
 8010328:	0802142c 	.word	0x0802142c
 801032c:	08021448 	.word	0x08021448

08010330 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801033e:	6879      	ldr	r1, [r7, #4]
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	f004 fd5d 	bl	8014e00 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010346:	490a      	ldr	r1, [pc, #40]	; (8010370 <setup_tcp+0x40>)
 8010348:	68f8      	ldr	r0, [r7, #12]
 801034a:	f004 fd6b 	bl	8014e24 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801034e:	4909      	ldr	r1, [pc, #36]	; (8010374 <setup_tcp+0x44>)
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f004 fd89 	bl	8014e68 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010356:	2202      	movs	r2, #2
 8010358:	4907      	ldr	r1, [pc, #28]	; (8010378 <setup_tcp+0x48>)
 801035a:	68f8      	ldr	r0, [r7, #12]
 801035c:	f004 fde0 	bl	8014f20 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8010360:	4906      	ldr	r1, [pc, #24]	; (801037c <setup_tcp+0x4c>)
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f004 fda2 	bl	8014eac <tcp_err>
}
 8010368:	bf00      	nop
 801036a:	3710      	adds	r7, #16
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	0800ff09 	.word	0x0800ff09
 8010374:	080100dd 	.word	0x080100dd
 8010378:	08010015 	.word	0x08010015
 801037c:	08010185 	.word	0x08010185

08010380 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8010380:	b590      	push	{r4, r7, lr}
 8010382:	b089      	sub	sp, #36	; 0x24
 8010384:	af00      	add	r7, sp, #0
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	4613      	mov	r3, r2
 801038c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d102      	bne.n	801039e <accept_function+0x1e>
    return ERR_VAL;
 8010398:	f06f 0305 	mvn.w	r3, #5
 801039c:	e0a1      	b.n	80104e2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	3314      	adds	r3, #20
 80103a2:	4618      	mov	r0, r3
 80103a4:	f00e fa0e 	bl	801e7c4 <sys_mbox_valid>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d102      	bne.n	80103b4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80103ae:	f06f 0305 	mvn.w	r3, #5
 80103b2:	e096      	b.n	80104e2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d11b      	bne.n	80103f2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	f103 0414 	add.w	r4, r3, #20
 80103c0:	f06f 000c 	mvn.w	r0, #12
 80103c4:	f7ff fcb2 	bl	800fd2c <lwip_netconn_err_to_msg>
 80103c8:	4603      	mov	r3, r0
 80103ca:	4619      	mov	r1, r3
 80103cc:	4620      	mov	r0, r4
 80103ce:	f00e f997 	bl	801e700 <sys_mbox_trypost>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d109      	bne.n	80103ec <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d005      	beq.n	80103ec <accept_function+0x6c>
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e4:	2200      	movs	r2, #0
 80103e6:	2100      	movs	r1, #0
 80103e8:	69f8      	ldr	r0, [r7, #28]
 80103ea:	4798      	blx	r3
    }
    return ERR_VAL;
 80103ec:	f06f 0305 	mvn.w	r3, #5
 80103f0:	e077      	b.n	80104e2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80103f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d006      	beq.n	8010408 <accept_function+0x88>
 80103fa:	4b3c      	ldr	r3, [pc, #240]	; (80104ec <accept_function+0x16c>)
 80103fc:	f240 222a 	movw	r2, #554	; 0x22a
 8010400:	493b      	ldr	r1, [pc, #236]	; (80104f0 <accept_function+0x170>)
 8010402:	483c      	ldr	r0, [pc, #240]	; (80104f4 <accept_function+0x174>)
 8010404:	f00f fbd8 	bl	801fbb8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	781a      	ldrb	r2, [r3, #0]
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010410:	4619      	mov	r1, r3
 8010412:	4610      	mov	r0, r2
 8010414:	f000 f8f0 	bl	80105f8 <netconn_alloc>
 8010418:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d11b      	bne.n	8010458 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	f103 0414 	add.w	r4, r3, #20
 8010426:	f06f 000c 	mvn.w	r0, #12
 801042a:	f7ff fc7f 	bl	800fd2c <lwip_netconn_err_to_msg>
 801042e:	4603      	mov	r3, r0
 8010430:	4619      	mov	r1, r3
 8010432:	4620      	mov	r0, r4
 8010434:	f00e f964 	bl	801e700 <sys_mbox_trypost>
 8010438:	4603      	mov	r3, r0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d109      	bne.n	8010452 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010442:	2b00      	cmp	r3, #0
 8010444:	d005      	beq.n	8010452 <accept_function+0xd2>
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801044a:	2200      	movs	r2, #0
 801044c:	2100      	movs	r1, #0
 801044e:	69f8      	ldr	r0, [r7, #28]
 8010450:	4798      	blx	r3
    }
    return ERR_MEM;
 8010452:	f04f 33ff 	mov.w	r3, #4294967295
 8010456:	e044      	b.n	80104e2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 801045e:	69b8      	ldr	r0, [r7, #24]
 8010460:	f7ff ff66 	bl	8010330 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	3314      	adds	r3, #20
 8010468:	69b9      	ldr	r1, [r7, #24]
 801046a:	4618      	mov	r0, r3
 801046c:	f00e f948 	bl	801e700 <sys_mbox_trypost>
 8010470:	4603      	mov	r3, r0
 8010472:	2b00      	cmp	r3, #0
 8010474:	d02a      	beq.n	80104cc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 801047c:	2100      	movs	r1, #0
 801047e:	6978      	ldr	r0, [r7, #20]
 8010480:	f004 fcbe 	bl	8014e00 <tcp_arg>
    tcp_recv(pcb, NULL);
 8010484:	2100      	movs	r1, #0
 8010486:	6978      	ldr	r0, [r7, #20]
 8010488:	f004 fccc 	bl	8014e24 <tcp_recv>
    tcp_sent(pcb, NULL);
 801048c:	2100      	movs	r1, #0
 801048e:	6978      	ldr	r0, [r7, #20]
 8010490:	f004 fcea 	bl	8014e68 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8010494:	2200      	movs	r2, #0
 8010496:	2100      	movs	r1, #0
 8010498:	6978      	ldr	r0, [r7, #20]
 801049a:	f004 fd41 	bl	8014f20 <tcp_poll>
    tcp_err(pcb, NULL);
 801049e:	2100      	movs	r1, #0
 80104a0:	6978      	ldr	r0, [r7, #20]
 80104a2:	f004 fd03 	bl	8014eac <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	2200      	movs	r2, #0
 80104aa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	3310      	adds	r3, #16
 80104b0:	4618      	mov	r0, r3
 80104b2:	f00e f913 	bl	801e6dc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	3310      	adds	r3, #16
 80104ba:	4618      	mov	r0, r3
 80104bc:	f00e f993 	bl	801e7e6 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80104c0:	69b8      	ldr	r0, [r7, #24]
 80104c2:	f000 f907 	bl	80106d4 <netconn_free>
    return ERR_MEM;
 80104c6:	f04f 33ff 	mov.w	r3, #4294967295
 80104ca:	e00a      	b.n	80104e2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d005      	beq.n	80104e0 <accept_function+0x160>
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d8:	2200      	movs	r2, #0
 80104da:	2100      	movs	r1, #0
 80104dc:	69f8      	ldr	r0, [r7, #28]
 80104de:	4798      	blx	r3
  }

  return ERR_OK;
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3724      	adds	r7, #36	; 0x24
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd90      	pop	{r4, r7, pc}
 80104ea:	bf00      	nop
 80104ec:	080212a8 	.word	0x080212a8
 80104f0:	08021464 	.word	0x08021464
 80104f4:	080212ec 	.word	0x080212ec

080104f8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80104f8:	b590      	push	{r4, r7, lr}
 80104fa:	b085      	sub	sp, #20
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010500:	2300      	movs	r3, #0
 8010502:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d006      	beq.n	801051c <pcb_new+0x24>
 801050e:	4b2b      	ldr	r3, [pc, #172]	; (80105bc <pcb_new+0xc4>)
 8010510:	f240 2265 	movw	r2, #613	; 0x265
 8010514:	492a      	ldr	r1, [pc, #168]	; (80105c0 <pcb_new+0xc8>)
 8010516:	482b      	ldr	r0, [pc, #172]	; (80105c4 <pcb_new+0xcc>)
 8010518:	f00f fb4e 	bl	801fbb8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010526:	2b10      	cmp	r3, #16
 8010528:	d022      	beq.n	8010570 <pcb_new+0x78>
 801052a:	2b20      	cmp	r3, #32
 801052c:	d133      	bne.n	8010596 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681c      	ldr	r4, [r3, #0]
 8010532:	7bfb      	ldrb	r3, [r7, #15]
 8010534:	4618      	mov	r0, r3
 8010536:	f009 ff06 	bl	801a346 <udp_new_ip_type>
 801053a:	4603      	mov	r3, r0
 801053c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d02a      	beq.n	801059e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	2b22      	cmp	r3, #34	; 0x22
 8010550:	d104      	bne.n	801055c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	2201      	movs	r2, #1
 801055a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	6858      	ldr	r0, [r3, #4]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	461a      	mov	r2, r3
 8010568:	4917      	ldr	r1, [pc, #92]	; (80105c8 <pcb_new+0xd0>)
 801056a:	f009 fe73 	bl	801a254 <udp_recv>
      }
      break;
 801056e:	e016      	b.n	801059e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681c      	ldr	r4, [r3, #0]
 8010574:	7bfb      	ldrb	r3, [r7, #15]
 8010576:	4618      	mov	r0, r3
 8010578:	f004 fc34 	bl	8014de4 <tcp_new_ip_type>
 801057c:	4603      	mov	r3, r0
 801057e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00b      	beq.n	80105a2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	4618      	mov	r0, r3
 8010590:	f7ff fece 	bl	8010330 <setup_tcp>
      }
      break;
 8010594:	e005      	b.n	80105a2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	22fa      	movs	r2, #250	; 0xfa
 801059a:	711a      	strb	r2, [r3, #4]
      return;
 801059c:	e00a      	b.n	80105b4 <pcb_new+0xbc>
      break;
 801059e:	bf00      	nop
 80105a0:	e000      	b.n	80105a4 <pcb_new+0xac>
      break;
 80105a2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d102      	bne.n	80105b4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	22ff      	movs	r2, #255	; 0xff
 80105b2:	711a      	strb	r2, [r3, #4]
  }
}
 80105b4:	3714      	adds	r7, #20
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd90      	pop	{r4, r7, pc}
 80105ba:	bf00      	nop
 80105bc:	080212a8 	.word	0x080212a8
 80105c0:	0802148c 	.word	0x0802148c
 80105c4:	080212ec 	.word	0x080212ec
 80105c8:	0800fe0d 	.word	0x0800fe0d

080105cc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2200      	movs	r2, #0
 80105dc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d102      	bne.n	80105ee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80105e8:	68f8      	ldr	r0, [r7, #12]
 80105ea:	f7ff ff85 	bl	80104f8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80105ee:	bf00      	nop
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
	...

080105f8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b086      	sub	sp, #24
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	4603      	mov	r3, r0
 8010600:	6039      	str	r1, [r7, #0]
 8010602:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010608:	2007      	movs	r0, #7
 801060a:	f001 fe69 	bl	80122e0 <memp_malloc>
 801060e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d101      	bne.n	801061a <netconn_alloc+0x22>
    return NULL;
 8010616:	2300      	movs	r3, #0
 8010618:	e052      	b.n	80106c0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2200      	movs	r2, #0
 801061e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	79fa      	ldrb	r2, [r7, #7]
 8010624:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2200      	movs	r2, #0
 801062a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 801062c:	79fb      	ldrb	r3, [r7, #7]
 801062e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010632:	2b10      	cmp	r3, #16
 8010634:	d004      	beq.n	8010640 <netconn_alloc+0x48>
 8010636:	2b20      	cmp	r3, #32
 8010638:	d105      	bne.n	8010646 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801063a:	2306      	movs	r3, #6
 801063c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801063e:	e00a      	b.n	8010656 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010640:	2306      	movs	r3, #6
 8010642:	617b      	str	r3, [r7, #20]
      break;
 8010644:	e007      	b.n	8010656 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010646:	4b20      	ldr	r3, [pc, #128]	; (80106c8 <netconn_alloc+0xd0>)
 8010648:	f240 22e5 	movw	r2, #741	; 0x2e5
 801064c:	491f      	ldr	r1, [pc, #124]	; (80106cc <netconn_alloc+0xd4>)
 801064e:	4820      	ldr	r0, [pc, #128]	; (80106d0 <netconn_alloc+0xd8>)
 8010650:	f00f fab2 	bl	801fbb8 <iprintf>
      goto free_and_return;
 8010654:	e02f      	b.n	80106b6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	3310      	adds	r3, #16
 801065a:	6979      	ldr	r1, [r7, #20]
 801065c:	4618      	mov	r0, r3
 801065e:	f00e f823 	bl	801e6a8 <sys_mbox_new>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d125      	bne.n	80106b4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	330c      	adds	r3, #12
 801066c:	2100      	movs	r1, #0
 801066e:	4618      	mov	r0, r3
 8010670:	f00e f8c6 	bl	801e800 <sys_sem_new>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d005      	beq.n	8010686 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	3310      	adds	r3, #16
 801067e:	4618      	mov	r0, r3
 8010680:	f00e f82c 	bl	801e6dc <sys_mbox_free>
    goto free_and_return;
 8010684:	e017      	b.n	80106b6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	3314      	adds	r3, #20
 801068a:	4618      	mov	r0, r3
 801068c:	f00e f8ab 	bl	801e7e6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	2200      	movs	r2, #0
 8010694:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	f04f 32ff 	mov.w	r2, #4294967295
 801069c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	683a      	ldr	r2, [r7, #0]
 80106a2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2200      	movs	r2, #0
 80106a8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	7cfa      	ldrb	r2, [r7, #19]
 80106ae:	771a      	strb	r2, [r3, #28]
  return conn;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	e005      	b.n	80106c0 <netconn_alloc+0xc8>
    goto free_and_return;
 80106b4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80106b6:	68f9      	ldr	r1, [r7, #12]
 80106b8:	2007      	movs	r0, #7
 80106ba:	f001 fe63 	bl	8012384 <memp_free>
  return NULL;
 80106be:	2300      	movs	r3, #0
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3718      	adds	r7, #24
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	080212a8 	.word	0x080212a8
 80106cc:	080214ac 	.word	0x080214ac
 80106d0:	080212ec 	.word	0x080212ec

080106d4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d006      	beq.n	80106f2 <netconn_free+0x1e>
 80106e4:	4b1b      	ldr	r3, [pc, #108]	; (8010754 <netconn_free+0x80>)
 80106e6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80106ea:	491b      	ldr	r1, [pc, #108]	; (8010758 <netconn_free+0x84>)
 80106ec:	481b      	ldr	r0, [pc, #108]	; (801075c <netconn_free+0x88>)
 80106ee:	f00f fa63 	bl	801fbb8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	3310      	adds	r3, #16
 80106f6:	4618      	mov	r0, r3
 80106f8:	f00e f864 	bl	801e7c4 <sys_mbox_valid>
 80106fc:	4603      	mov	r3, r0
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d006      	beq.n	8010710 <netconn_free+0x3c>
 8010702:	4b14      	ldr	r3, [pc, #80]	; (8010754 <netconn_free+0x80>)
 8010704:	f240 3223 	movw	r2, #803	; 0x323
 8010708:	4915      	ldr	r1, [pc, #84]	; (8010760 <netconn_free+0x8c>)
 801070a:	4814      	ldr	r0, [pc, #80]	; (801075c <netconn_free+0x88>)
 801070c:	f00f fa54 	bl	801fbb8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	3314      	adds	r3, #20
 8010714:	4618      	mov	r0, r3
 8010716:	f00e f855 	bl	801e7c4 <sys_mbox_valid>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d006      	beq.n	801072e <netconn_free+0x5a>
 8010720:	4b0c      	ldr	r3, [pc, #48]	; (8010754 <netconn_free+0x80>)
 8010722:	f240 3226 	movw	r2, #806	; 0x326
 8010726:	490f      	ldr	r1, [pc, #60]	; (8010764 <netconn_free+0x90>)
 8010728:	480c      	ldr	r0, [pc, #48]	; (801075c <netconn_free+0x88>)
 801072a:	f00f fa45 	bl	801fbb8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	330c      	adds	r3, #12
 8010732:	4618      	mov	r0, r3
 8010734:	f00e f8c7 	bl	801e8c6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	330c      	adds	r3, #12
 801073c:	4618      	mov	r0, r3
 801073e:	f00e f8e0 	bl	801e902 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8010742:	6879      	ldr	r1, [r7, #4]
 8010744:	2007      	movs	r0, #7
 8010746:	f001 fe1d 	bl	8012384 <memp_free>
}
 801074a:	bf00      	nop
 801074c:	3708      	adds	r7, #8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	080212a8 	.word	0x080212a8
 8010758:	080214d4 	.word	0x080214d4
 801075c:	080212ec 	.word	0x080212ec
 8010760:	08021504 	.word	0x08021504
 8010764:	08021540 	.word	0x08021540

08010768 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b086      	sub	sp, #24
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	3310      	adds	r3, #16
 8010774:	4618      	mov	r0, r3
 8010776:	f00e f825 	bl	801e7c4 <sys_mbox_valid>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d02f      	beq.n	80107e0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010780:	e018      	b.n	80107b4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801078a:	2b10      	cmp	r3, #16
 801078c:	d10e      	bne.n	80107ac <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	f107 020f 	add.w	r2, r7, #15
 8010794:	4611      	mov	r1, r2
 8010796:	4618      	mov	r0, r3
 8010798:	f7ff fafe 	bl	800fd98 <lwip_netconn_is_err_msg>
 801079c:	4603      	mov	r3, r0
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d108      	bne.n	80107b4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	4618      	mov	r0, r3
 80107a6:	f002 fc9d 	bl	80130e4 <pbuf_free>
 80107aa:	e003      	b.n	80107b4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	4618      	mov	r0, r3
 80107b0:	f000 fe8e 	bl	80114d0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	3310      	adds	r3, #16
 80107b8:	f107 0210 	add.w	r2, r7, #16
 80107bc:	4611      	mov	r1, r2
 80107be:	4618      	mov	r0, r3
 80107c0:	f00d ffe9 	bl	801e796 <sys_arch_mbox_tryfetch>
 80107c4:	4603      	mov	r3, r0
 80107c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ca:	d1da      	bne.n	8010782 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	3310      	adds	r3, #16
 80107d0:	4618      	mov	r0, r3
 80107d2:	f00d ff83 	bl	801e6dc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	3310      	adds	r3, #16
 80107da:	4618      	mov	r0, r3
 80107dc:	f00e f803 	bl	801e7e6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	3314      	adds	r3, #20
 80107e4:	4618      	mov	r0, r3
 80107e6:	f00d ffed 	bl	801e7c4 <sys_mbox_valid>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d034      	beq.n	801085a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80107f0:	e01d      	b.n	801082e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	f107 020e 	add.w	r2, r7, #14
 80107f8:	4611      	mov	r1, r2
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7ff facc 	bl	800fd98 <lwip_netconn_is_err_msg>
 8010800:	4603      	mov	r3, r0
 8010802:	2b00      	cmp	r3, #0
 8010804:	d113      	bne.n	801082e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801080a:	6978      	ldr	r0, [r7, #20]
 801080c:	f7ff ffac 	bl	8010768 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d007      	beq.n	8010828 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	4618      	mov	r0, r3
 801081e:	f003 fa61 	bl	8013ce4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	2200      	movs	r2, #0
 8010826:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010828:	6978      	ldr	r0, [r7, #20]
 801082a:	f7ff ff53 	bl	80106d4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	3314      	adds	r3, #20
 8010832:	f107 0210 	add.w	r2, r7, #16
 8010836:	4611      	mov	r1, r2
 8010838:	4618      	mov	r0, r3
 801083a:	f00d ffac 	bl	801e796 <sys_arch_mbox_tryfetch>
 801083e:	4603      	mov	r3, r0
 8010840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010844:	d1d5      	bne.n	80107f2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	3314      	adds	r3, #20
 801084a:	4618      	mov	r0, r3
 801084c:	f00d ff46 	bl	801e6dc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	3314      	adds	r3, #20
 8010854:	4618      	mov	r0, r3
 8010856:	f00d ffc6 	bl	801e7e6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801085a:	bf00      	nop
 801085c:	3718      	adds	r7, #24
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
	...

08010864 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b086      	sub	sp, #24
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	460b      	mov	r3, r1
 801086e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010870:	2300      	movs	r3, #0
 8010872:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d106      	bne.n	8010888 <lwip_netconn_do_close_internal+0x24>
 801087a:	4ba1      	ldr	r3, [pc, #644]	; (8010b00 <lwip_netconn_do_close_internal+0x29c>)
 801087c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8010880:	49a0      	ldr	r1, [pc, #640]	; (8010b04 <lwip_netconn_do_close_internal+0x2a0>)
 8010882:	48a1      	ldr	r0, [pc, #644]	; (8010b08 <lwip_netconn_do_close_internal+0x2a4>)
 8010884:	f00f f998 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010890:	2b10      	cmp	r3, #16
 8010892:	d006      	beq.n	80108a2 <lwip_netconn_do_close_internal+0x3e>
 8010894:	4b9a      	ldr	r3, [pc, #616]	; (8010b00 <lwip_netconn_do_close_internal+0x29c>)
 8010896:	f240 32a3 	movw	r2, #931	; 0x3a3
 801089a:	499c      	ldr	r1, [pc, #624]	; (8010b0c <lwip_netconn_do_close_internal+0x2a8>)
 801089c:	489a      	ldr	r0, [pc, #616]	; (8010b08 <lwip_netconn_do_close_internal+0x2a4>)
 801089e:	f00f f98b 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	785b      	ldrb	r3, [r3, #1]
 80108a6:	2b04      	cmp	r3, #4
 80108a8:	d006      	beq.n	80108b8 <lwip_netconn_do_close_internal+0x54>
 80108aa:	4b95      	ldr	r3, [pc, #596]	; (8010b00 <lwip_netconn_do_close_internal+0x29c>)
 80108ac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80108b0:	4997      	ldr	r1, [pc, #604]	; (8010b10 <lwip_netconn_do_close_internal+0x2ac>)
 80108b2:	4895      	ldr	r0, [pc, #596]	; (8010b08 <lwip_netconn_do_close_internal+0x2a4>)
 80108b4:	f00f f980 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d106      	bne.n	80108ce <lwip_netconn_do_close_internal+0x6a>
 80108c0:	4b8f      	ldr	r3, [pc, #572]	; (8010b00 <lwip_netconn_do_close_internal+0x29c>)
 80108c2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80108c6:	4993      	ldr	r1, [pc, #588]	; (8010b14 <lwip_netconn_do_close_internal+0x2b0>)
 80108c8:	488f      	ldr	r0, [pc, #572]	; (8010b08 <lwip_netconn_do_close_internal+0x2a4>)
 80108ca:	f00f f975 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6a1b      	ldr	r3, [r3, #32]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d106      	bne.n	80108e4 <lwip_netconn_do_close_internal+0x80>
 80108d6:	4b8a      	ldr	r3, [pc, #552]	; (8010b00 <lwip_netconn_do_close_internal+0x29c>)
 80108d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80108dc:	498e      	ldr	r1, [pc, #568]	; (8010b18 <lwip_netconn_do_close_internal+0x2b4>)
 80108de:	488a      	ldr	r0, [pc, #552]	; (8010b08 <lwip_netconn_do_close_internal+0x2a4>)
 80108e0:	f00f f96a 	bl	801fbb8 <iprintf>

  tpcb = conn->pcb.tcp;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6a1b      	ldr	r3, [r3, #32]
 80108ee:	7a1b      	ldrb	r3, [r3, #8]
 80108f0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80108f2:	7bfb      	ldrb	r3, [r7, #15]
 80108f4:	f003 0301 	and.w	r3, r3, #1
 80108f8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80108fa:	7bfb      	ldrb	r3, [r7, #15]
 80108fc:	f003 0302 	and.w	r3, r3, #2
 8010900:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8010902:	7bfb      	ldrb	r3, [r7, #15]
 8010904:	2b03      	cmp	r3, #3
 8010906:	d102      	bne.n	801090e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8010908:	2301      	movs	r3, #1
 801090a:	75bb      	strb	r3, [r7, #22]
 801090c:	e01f      	b.n	801094e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 801090e:	7bbb      	ldrb	r3, [r7, #14]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00e      	beq.n	8010932 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8010918:	2b05      	cmp	r3, #5
 801091a:	d007      	beq.n	801092c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8010920:	2b06      	cmp	r3, #6
 8010922:	d003      	beq.n	801092c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8010928:	2b08      	cmp	r3, #8
 801092a:	d102      	bne.n	8010932 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 801092c:	2301      	movs	r3, #1
 801092e:	75bb      	strb	r3, [r7, #22]
 8010930:	e00d      	b.n	801094e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8010932:	7b7b      	ldrb	r3, [r7, #13]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d008      	beq.n	801094a <lwip_netconn_do_close_internal+0xe6>
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	8b5b      	ldrh	r3, [r3, #26]
 801093c:	f003 0310 	and.w	r3, r3, #16
 8010940:	2b00      	cmp	r3, #0
 8010942:	d002      	beq.n	801094a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8010944:	2301      	movs	r3, #1
 8010946:	75bb      	strb	r3, [r7, #22]
 8010948:	e001      	b.n	801094e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801094a:	2300      	movs	r3, #0
 801094c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801094e:	7dbb      	ldrb	r3, [r7, #22]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d003      	beq.n	801095c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8010954:	2100      	movs	r1, #0
 8010956:	6938      	ldr	r0, [r7, #16]
 8010958:	f004 fa52 	bl	8014e00 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	7d1b      	ldrb	r3, [r3, #20]
 8010960:	2b01      	cmp	r3, #1
 8010962:	d104      	bne.n	801096e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8010964:	2100      	movs	r1, #0
 8010966:	6938      	ldr	r0, [r7, #16]
 8010968:	f004 fac2 	bl	8014ef0 <tcp_accept>
 801096c:	e01d      	b.n	80109aa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801096e:	7bbb      	ldrb	r3, [r7, #14]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d007      	beq.n	8010984 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010974:	2100      	movs	r1, #0
 8010976:	6938      	ldr	r0, [r7, #16]
 8010978:	f004 fa54 	bl	8014e24 <tcp_recv>
      tcp_accept(tpcb, NULL);
 801097c:	2100      	movs	r1, #0
 801097e:	6938      	ldr	r0, [r7, #16]
 8010980:	f004 fab6 	bl	8014ef0 <tcp_accept>
    }
    if (shut_tx) {
 8010984:	7b7b      	ldrb	r3, [r7, #13]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d003      	beq.n	8010992 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801098a:	2100      	movs	r1, #0
 801098c:	6938      	ldr	r0, [r7, #16]
 801098e:	f004 fa6b 	bl	8014e68 <tcp_sent>
    }
    if (shut_close) {
 8010992:	7dbb      	ldrb	r3, [r7, #22]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d008      	beq.n	80109aa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010998:	2200      	movs	r2, #0
 801099a:	2100      	movs	r1, #0
 801099c:	6938      	ldr	r0, [r7, #16]
 801099e:	f004 fabf 	bl	8014f20 <tcp_poll>
      tcp_err(tpcb, NULL);
 80109a2:	2100      	movs	r1, #0
 80109a4:	6938      	ldr	r0, [r7, #16]
 80109a6:	f004 fa81 	bl	8014eac <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80109aa:	7dbb      	ldrb	r3, [r7, #22]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d005      	beq.n	80109bc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80109b0:	6938      	ldr	r0, [r7, #16]
 80109b2:	f003 f851 	bl	8013a58 <tcp_close>
 80109b6:	4603      	mov	r3, r0
 80109b8:	75fb      	strb	r3, [r7, #23]
 80109ba:	e007      	b.n	80109cc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80109bc:	7bbb      	ldrb	r3, [r7, #14]
 80109be:	7b7a      	ldrb	r2, [r7, #13]
 80109c0:	4619      	mov	r1, r3
 80109c2:	6938      	ldr	r0, [r7, #16]
 80109c4:	f003 f874 	bl	8013ab0 <tcp_shutdown>
 80109c8:	4603      	mov	r3, r0
 80109ca:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80109cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d102      	bne.n	80109da <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80109d4:	2301      	movs	r3, #1
 80109d6:	757b      	strb	r3, [r7, #21]
 80109d8:	e016      	b.n	8010a08 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80109da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80109de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109e2:	d10f      	bne.n	8010a04 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6a1b      	ldr	r3, [r3, #32]
 80109e8:	7a5b      	ldrb	r3, [r3, #9]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d10c      	bne.n	8010a08 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80109ee:	2301      	movs	r3, #1
 80109f0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80109f2:	7dbb      	ldrb	r3, [r7, #22]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d007      	beq.n	8010a08 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80109f8:	6938      	ldr	r0, [r7, #16]
 80109fa:	f003 f973 	bl	8013ce4 <tcp_abort>
          err = ERR_OK;
 80109fe:	2300      	movs	r3, #0
 8010a00:	75fb      	strb	r3, [r7, #23]
 8010a02:	e001      	b.n	8010a08 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8010a04:	2301      	movs	r3, #1
 8010a06:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8010a08:	7d7b      	ldrb	r3, [r7, #21]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d044      	beq.n	8010a98 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a1b      	ldr	r3, [r3, #32]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	330c      	adds	r3, #12
 8010a16:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6a1b      	ldr	r3, [r3, #32]
 8010a1c:	7dfa      	ldrb	r2, [r7, #23]
 8010a1e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8010a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d129      	bne.n	8010a88 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8010a34:	7dbb      	ldrb	r3, [r7, #22]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d00c      	beq.n	8010a54 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d005      	beq.n	8010a54 <lwip_netconn_do_close_internal+0x1f0>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	2104      	movs	r1, #4
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	4798      	blx	r3
      }
      if (shut_rx) {
 8010a54:	7bbb      	ldrb	r3, [r7, #14]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d009      	beq.n	8010a6e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d005      	beq.n	8010a6e <lwip_netconn_do_close_internal+0x20a>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a66:	2200      	movs	r2, #0
 8010a68:	2100      	movs	r1, #0
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	4798      	blx	r3
      }
      if (shut_tx) {
 8010a6e:	7b7b      	ldrb	r3, [r7, #13]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d009      	beq.n	8010a88 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d005      	beq.n	8010a88 <lwip_netconn_do_close_internal+0x224>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a80:	2200      	movs	r2, #0
 8010a82:	2102      	movs	r1, #2
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010a88:	78fb      	ldrb	r3, [r7, #3]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d002      	beq.n	8010a94 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8010a8e:	68b8      	ldr	r0, [r7, #8]
 8010a90:	f00d ff0c 	bl	801e8ac <sys_sem_signal>
    }
    return ERR_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	e02e      	b.n	8010af6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8010a98:	7d7b      	ldrb	r3, [r7, #21]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d11e      	bne.n	8010adc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	7d1b      	ldrb	r3, [r3, #20]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d106      	bne.n	8010ab4 <lwip_netconn_do_close_internal+0x250>
 8010aa6:	4b16      	ldr	r3, [pc, #88]	; (8010b00 <lwip_netconn_do_close_internal+0x29c>)
 8010aa8:	f240 4241 	movw	r2, #1089	; 0x441
 8010aac:	491b      	ldr	r1, [pc, #108]	; (8010b1c <lwip_netconn_do_close_internal+0x2b8>)
 8010aae:	4816      	ldr	r0, [pc, #88]	; (8010b08 <lwip_netconn_do_close_internal+0x2a4>)
 8010ab0:	f00f f882 	bl	801fbb8 <iprintf>
    if (shut_tx) {
 8010ab4:	7b7b      	ldrb	r3, [r7, #13]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d003      	beq.n	8010ac2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8010aba:	4919      	ldr	r1, [pc, #100]	; (8010b20 <lwip_netconn_do_close_internal+0x2bc>)
 8010abc:	6938      	ldr	r0, [r7, #16]
 8010abe:	f004 f9d3 	bl	8014e68 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	4917      	ldr	r1, [pc, #92]	; (8010b24 <lwip_netconn_do_close_internal+0x2c0>)
 8010ac6:	6938      	ldr	r0, [r7, #16]
 8010ac8:	f004 fa2a 	bl	8014f20 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8010acc:	4916      	ldr	r1, [pc, #88]	; (8010b28 <lwip_netconn_do_close_internal+0x2c4>)
 8010ace:	6938      	ldr	r0, [r7, #16]
 8010ad0:	f004 f9ec 	bl	8014eac <tcp_err>
    tcp_arg(tpcb, conn);
 8010ad4:	6879      	ldr	r1, [r7, #4]
 8010ad6:	6938      	ldr	r0, [r7, #16]
 8010ad8:	f004 f992 	bl	8014e00 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8010adc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d106      	bne.n	8010af2 <lwip_netconn_do_close_internal+0x28e>
 8010ae4:	4b06      	ldr	r3, [pc, #24]	; (8010b00 <lwip_netconn_do_close_internal+0x29c>)
 8010ae6:	f240 424d 	movw	r2, #1101	; 0x44d
 8010aea:	4910      	ldr	r1, [pc, #64]	; (8010b2c <lwip_netconn_do_close_internal+0x2c8>)
 8010aec:	4806      	ldr	r0, [pc, #24]	; (8010b08 <lwip_netconn_do_close_internal+0x2a4>)
 8010aee:	f00f f863 	bl	801fbb8 <iprintf>
  return err;
 8010af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3718      	adds	r7, #24
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	080212a8 	.word	0x080212a8
 8010b04:	0802157c 	.word	0x0802157c
 8010b08:	080212ec 	.word	0x080212ec
 8010b0c:	0802158c 	.word	0x0802158c
 8010b10:	080215ac 	.word	0x080215ac
 8010b14:	080215d0 	.word	0x080215d0
 8010b18:	08021410 	.word	0x08021410
 8010b1c:	080215e4 	.word	0x080215e4
 8010b20:	080100dd 	.word	0x080100dd
 8010b24:	08010015 	.word	0x08010015
 8010b28:	08010185 	.word	0x08010185
 8010b2c:	08021608 	.word	0x08021608

08010b30 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b084      	sub	sp, #16
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	785b      	ldrb	r3, [r3, #1]
 8010b42:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8010b44:	7afb      	ldrb	r3, [r7, #11]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00d      	beq.n	8010b66 <lwip_netconn_do_delconn+0x36>
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b54:	2b10      	cmp	r3, #16
 8010b56:	d006      	beq.n	8010b66 <lwip_netconn_do_delconn+0x36>
 8010b58:	4b60      	ldr	r3, [pc, #384]	; (8010cdc <lwip_netconn_do_delconn+0x1ac>)
 8010b5a:	f240 425e 	movw	r2, #1118	; 0x45e
 8010b5e:	4960      	ldr	r1, [pc, #384]	; (8010ce0 <lwip_netconn_do_delconn+0x1b0>)
 8010b60:	4860      	ldr	r0, [pc, #384]	; (8010ce4 <lwip_netconn_do_delconn+0x1b4>)
 8010b62:	f00f f829 	bl	801fbb8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8010b66:	7afb      	ldrb	r3, [r7, #11]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d005      	beq.n	8010b78 <lwip_netconn_do_delconn+0x48>
 8010b6c:	7afb      	ldrb	r3, [r7, #11]
 8010b6e:	2b02      	cmp	r3, #2
 8010b70:	d002      	beq.n	8010b78 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8010b72:	7afb      	ldrb	r3, [r7, #11]
 8010b74:	2b03      	cmp	r3, #3
 8010b76:	d109      	bne.n	8010b8c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010b78:	7afb      	ldrb	r3, [r7, #11]
 8010b7a:	2b03      	cmp	r3, #3
 8010b7c:	d10a      	bne.n	8010b94 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	7f1b      	ldrb	r3, [r3, #28]
 8010b84:	f003 0304 	and.w	r3, r3, #4
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d103      	bne.n	8010b94 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	22fb      	movs	r2, #251	; 0xfb
 8010b90:	711a      	strb	r2, [r3, #4]
 8010b92:	e097      	b.n	8010cc4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8010b94:	7afb      	ldrb	r3, [r7, #11]
 8010b96:	2b03      	cmp	r3, #3
 8010b98:	d10d      	bne.n	8010bb6 <lwip_netconn_do_delconn+0x86>
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	7f1b      	ldrb	r3, [r3, #28]
 8010ba0:	f003 0304 	and.w	r3, r3, #4
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d106      	bne.n	8010bb6 <lwip_netconn_do_delconn+0x86>
 8010ba8:	4b4c      	ldr	r3, [pc, #304]	; (8010cdc <lwip_netconn_do_delconn+0x1ac>)
 8010baa:	f240 427a 	movw	r2, #1146	; 0x47a
 8010bae:	494e      	ldr	r1, [pc, #312]	; (8010ce8 <lwip_netconn_do_delconn+0x1b8>)
 8010bb0:	484c      	ldr	r0, [pc, #304]	; (8010ce4 <lwip_netconn_do_delconn+0x1b4>)
 8010bb2:	f00f f801 	bl	801fbb8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7ff fdd1 	bl	8010768 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d05f      	beq.n	8010c90 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bda:	2b10      	cmp	r3, #16
 8010bdc:	d00d      	beq.n	8010bfa <lwip_netconn_do_delconn+0xca>
 8010bde:	2b20      	cmp	r3, #32
 8010be0:	d151      	bne.n	8010c86 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	2200      	movs	r2, #0
 8010bea:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f009 fb4e 	bl	801a294 <udp_remove>
          break;
 8010bf8:	e046      	b.n	8010c88 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	6a1b      	ldr	r3, [r3, #32]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d006      	beq.n	8010c12 <lwip_netconn_do_delconn+0xe2>
 8010c04:	4b35      	ldr	r3, [pc, #212]	; (8010cdc <lwip_netconn_do_delconn+0x1ac>)
 8010c06:	f240 4294 	movw	r2, #1172	; 0x494
 8010c0a:	4938      	ldr	r1, [pc, #224]	; (8010cec <lwip_netconn_do_delconn+0x1bc>)
 8010c0c:	4835      	ldr	r0, [pc, #212]	; (8010ce4 <lwip_netconn_do_delconn+0x1b4>)
 8010c0e:	f00e ffd3 	bl	801fbb8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2204      	movs	r2, #4
 8010c18:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2203      	movs	r2, #3
 8010c1e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	68fa      	ldr	r2, [r7, #12]
 8010c26:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7ff fe18 	bl	8010864 <lwip_netconn_do_close_internal>
 8010c34:	4603      	mov	r3, r0
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d04b      	beq.n	8010cd2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	785b      	ldrb	r3, [r3, #1]
 8010c40:	2b04      	cmp	r3, #4
 8010c42:	d006      	beq.n	8010c52 <lwip_netconn_do_delconn+0x122>
 8010c44:	4b25      	ldr	r3, [pc, #148]	; (8010cdc <lwip_netconn_do_delconn+0x1ac>)
 8010c46:	f240 429a 	movw	r2, #1178	; 0x49a
 8010c4a:	4929      	ldr	r1, [pc, #164]	; (8010cf0 <lwip_netconn_do_delconn+0x1c0>)
 8010c4c:	4825      	ldr	r0, [pc, #148]	; (8010ce4 <lwip_netconn_do_delconn+0x1b4>)
 8010c4e:	f00e ffb3 	bl	801fbb8 <iprintf>
            UNLOCK_TCPIP_CORE();
 8010c52:	4828      	ldr	r0, [pc, #160]	; (8010cf4 <lwip_netconn_do_delconn+0x1c4>)
 8010c54:	f00d fe93 	bl	801e97e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	330c      	adds	r3, #12
 8010c5e:	2100      	movs	r1, #0
 8010c60:	4618      	mov	r0, r3
 8010c62:	f00d fdf2 	bl	801e84a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8010c66:	4823      	ldr	r0, [pc, #140]	; (8010cf4 <lwip_netconn_do_delconn+0x1c4>)
 8010c68:	f00d fe7a 	bl	801e960 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	785b      	ldrb	r3, [r3, #1]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d02d      	beq.n	8010cd2 <lwip_netconn_do_delconn+0x1a2>
 8010c76:	4b19      	ldr	r3, [pc, #100]	; (8010cdc <lwip_netconn_do_delconn+0x1ac>)
 8010c78:	f240 429e 	movw	r2, #1182	; 0x49e
 8010c7c:	491c      	ldr	r1, [pc, #112]	; (8010cf0 <lwip_netconn_do_delconn+0x1c0>)
 8010c7e:	4819      	ldr	r0, [pc, #100]	; (8010ce4 <lwip_netconn_do_delconn+0x1b4>)
 8010c80:	f00e ff9a 	bl	801fbb8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8010c84:	e025      	b.n	8010cd2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8010c86:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d007      	beq.n	8010caa <lwip_netconn_do_delconn+0x17a>
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca0:	68fa      	ldr	r2, [r7, #12]
 8010ca2:	6810      	ldr	r0, [r2, #0]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d007      	beq.n	8010cc4 <lwip_netconn_do_delconn+0x194>
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cba:	68fa      	ldr	r2, [r7, #12]
 8010cbc:	6810      	ldr	r0, [r2, #0]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	2102      	movs	r1, #2
 8010cc2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	330c      	adds	r3, #12
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f00d fe08 	bl	801e8e0 <sys_sem_valid>
 8010cd0:	e000      	b.n	8010cd4 <lwip_netconn_do_delconn+0x1a4>
          return;
 8010cd2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8010cd4:	3710      	adds	r7, #16
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	080212a8 	.word	0x080212a8
 8010ce0:	08021618 	.word	0x08021618
 8010ce4:	080212ec 	.word	0x080212ec
 8010ce8:	0802162c 	.word	0x0802162c
 8010cec:	0802164c 	.word	0x0802164c
 8010cf0:	08021668 	.word	0x08021668
 8010cf4:	2000b2bc 	.word	0x2000b2bc

08010cf8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d025      	beq.n	8010d5a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d18:	2b10      	cmp	r3, #16
 8010d1a:	d00e      	beq.n	8010d3a <lwip_netconn_do_bind+0x42>
 8010d1c:	2b20      	cmp	r3, #32
 8010d1e:	d119      	bne.n	8010d54 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	6858      	ldr	r0, [r3, #4]
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	6899      	ldr	r1, [r3, #8]
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	899b      	ldrh	r3, [r3, #12]
 8010d2e:	461a      	mov	r2, r3
 8010d30:	f009 f99a 	bl	801a068 <udp_bind>
 8010d34:	4603      	mov	r3, r0
 8010d36:	73fb      	strb	r3, [r7, #15]
        break;
 8010d38:	e011      	b.n	8010d5e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	6858      	ldr	r0, [r3, #4]
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	6899      	ldr	r1, [r3, #8]
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	899b      	ldrh	r3, [r3, #12]
 8010d48:	461a      	mov	r2, r3
 8010d4a:	f002 ffd7 	bl	8013cfc <tcp_bind>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	73fb      	strb	r3, [r7, #15]
        break;
 8010d52:	e004      	b.n	8010d5e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8010d54:	23fa      	movs	r3, #250	; 0xfa
 8010d56:	73fb      	strb	r3, [r7, #15]
        break;
 8010d58:	e001      	b.n	8010d5e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8010d5a:	23fa      	movs	r3, #250	; 0xfa
 8010d5c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	7bfa      	ldrb	r2, [r7, #15]
 8010d62:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010d64:	bf00      	nop
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d07f      	beq.n	8010e82 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d8c:	2b10      	cmp	r3, #16
 8010d8e:	d175      	bne.n	8010e7c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	785b      	ldrb	r3, [r3, #1]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d165      	bne.n	8010e66 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	7d1b      	ldrb	r3, [r3, #20]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d002      	beq.n	8010dac <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8010da6:	23fa      	movs	r3, #250	; 0xfa
 8010da8:	72fb      	strb	r3, [r7, #11]
 8010daa:	e06c      	b.n	8010e86 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8010dac:	23ff      	movs	r3, #255	; 0xff
 8010dae:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	f107 020b 	add.w	r2, r7, #11
 8010dba:	7cf9      	ldrb	r1, [r7, #19]
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f003 f855 	bl	8013e6c <tcp_listen_with_backlog_and_err>
 8010dc2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d05d      	beq.n	8010e86 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	3310      	adds	r3, #16
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f00d fcf7 	bl	801e7c4 <sys_mbox_valid>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00b      	beq.n	8010df4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	3310      	adds	r3, #16
 8010de2:	4618      	mov	r0, r3
 8010de4:	f00d fc7a 	bl	801e6dc <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	3310      	adds	r3, #16
 8010dee:	4618      	mov	r0, r3
 8010df0:	f00d fcf9 	bl	801e7e6 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8010df4:	2300      	movs	r3, #0
 8010df6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	3314      	adds	r3, #20
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f00d fce0 	bl	801e7c4 <sys_mbox_valid>
 8010e04:	4603      	mov	r3, r0
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d108      	bne.n	8010e1c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	3314      	adds	r3, #20
 8010e10:	2106      	movs	r1, #6
 8010e12:	4618      	mov	r0, r3
 8010e14:	f00d fc48 	bl	801e6a8 <sys_mbox_new>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8010e1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d118      	bne.n	8010e56 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2202      	movs	r2, #2
 8010e2a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	68fa      	ldr	r2, [r7, #12]
 8010e32:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	685a      	ldr	r2, [r3, #4]
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	4619      	mov	r1, r3
 8010e40:	4610      	mov	r0, r2
 8010e42:	f003 ffdd 	bl	8014e00 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	4912      	ldr	r1, [pc, #72]	; (8010e98 <lwip_netconn_do_listen+0x12c>)
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f004 f84e 	bl	8014ef0 <tcp_accept>
 8010e54:	e017      	b.n	8010e86 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f002 fdfe 	bl	8013a58 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	2200      	movs	r2, #0
 8010e62:	605a      	str	r2, [r3, #4]
 8010e64:	e00f      	b.n	8010e86 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	785b      	ldrb	r3, [r3, #1]
 8010e6c:	2b02      	cmp	r3, #2
 8010e6e:	d102      	bne.n	8010e76 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8010e70:	2300      	movs	r3, #0
 8010e72:	72fb      	strb	r3, [r7, #11]
 8010e74:	e007      	b.n	8010e86 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8010e76:	23f5      	movs	r3, #245	; 0xf5
 8010e78:	72fb      	strb	r3, [r7, #11]
 8010e7a:	e004      	b.n	8010e86 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8010e7c:	23f0      	movs	r3, #240	; 0xf0
 8010e7e:	72fb      	strb	r3, [r7, #11]
 8010e80:	e001      	b.n	8010e86 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8010e82:	23f5      	movs	r3, #245	; 0xf5
 8010e84:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8010e86:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010e8e:	bf00      	nop
 8010e90:	3718      	adds	r7, #24
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	08010381 	.word	0x08010381

08010e9c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b086      	sub	sp, #24
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010ea8:	693b      	ldr	r3, [r7, #16]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d022      	beq.n	8010efe <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ec2:	2b10      	cmp	r3, #16
 8010ec4:	d11b      	bne.n	8010efe <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ed2:	d202      	bcs.n	8010eda <lwip_netconn_do_recv+0x3e>
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	e001      	b.n	8010ede <lwip_netconn_do_recv+0x42>
 8010eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ede:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	89fa      	ldrh	r2, [r7, #14]
 8010ee8:	4611      	mov	r1, r2
 8010eea:	4618      	mov	r0, r3
 8010eec:	f003 f8c2 	bl	8014074 <tcp_recved>
        remaining -= recved;
 8010ef0:	89fb      	ldrh	r3, [r7, #14]
 8010ef2:	697a      	ldr	r2, [r7, #20]
 8010ef4:	1ad3      	subs	r3, r2, r3
 8010ef6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d1e6      	bne.n	8010ecc <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010efe:	bf00      	nop
 8010f00:	3718      	adds	r7, #24
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}
	...

08010f08 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b088      	sub	sp, #32
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	460b      	mov	r3, r1
 8010f12:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010f14:	2300      	movs	r3, #0
 8010f16:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d106      	bne.n	8010f2c <lwip_netconn_do_writemore+0x24>
 8010f1e:	4b96      	ldr	r3, [pc, #600]	; (8011178 <lwip_netconn_do_writemore+0x270>)
 8010f20:	f240 6273 	movw	r2, #1651	; 0x673
 8010f24:	4995      	ldr	r1, [pc, #596]	; (801117c <lwip_netconn_do_writemore+0x274>)
 8010f26:	4896      	ldr	r0, [pc, #600]	; (8011180 <lwip_netconn_do_writemore+0x278>)
 8010f28:	f00e fe46 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	785b      	ldrb	r3, [r3, #1]
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d006      	beq.n	8010f42 <lwip_netconn_do_writemore+0x3a>
 8010f34:	4b90      	ldr	r3, [pc, #576]	; (8011178 <lwip_netconn_do_writemore+0x270>)
 8010f36:	f240 6274 	movw	r2, #1652	; 0x674
 8010f3a:	4992      	ldr	r1, [pc, #584]	; (8011184 <lwip_netconn_do_writemore+0x27c>)
 8010f3c:	4890      	ldr	r0, [pc, #576]	; (8011180 <lwip_netconn_do_writemore+0x278>)
 8010f3e:	f00e fe3b 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6a1b      	ldr	r3, [r3, #32]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d106      	bne.n	8010f58 <lwip_netconn_do_writemore+0x50>
 8010f4a:	4b8b      	ldr	r3, [pc, #556]	; (8011178 <lwip_netconn_do_writemore+0x270>)
 8010f4c:	f240 6275 	movw	r2, #1653	; 0x675
 8010f50:	498d      	ldr	r1, [pc, #564]	; (8011188 <lwip_netconn_do_writemore+0x280>)
 8010f52:	488b      	ldr	r0, [pc, #556]	; (8011180 <lwip_netconn_do_writemore+0x278>)
 8010f54:	f00e fe30 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d106      	bne.n	8010f6e <lwip_netconn_do_writemore+0x66>
 8010f60:	4b85      	ldr	r3, [pc, #532]	; (8011178 <lwip_netconn_do_writemore+0x270>)
 8010f62:	f240 6276 	movw	r2, #1654	; 0x676
 8010f66:	4989      	ldr	r1, [pc, #548]	; (801118c <lwip_netconn_do_writemore+0x284>)
 8010f68:	4885      	ldr	r0, [pc, #532]	; (8011180 <lwip_netconn_do_writemore+0x278>)
 8010f6a:	f00e fe25 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6a1b      	ldr	r3, [r3, #32]
 8010f72:	699a      	ldr	r2, [r3, #24]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6a1b      	ldr	r3, [r3, #32]
 8010f78:	695b      	ldr	r3, [r3, #20]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d306      	bcc.n	8010f8c <lwip_netconn_do_writemore+0x84>
 8010f7e:	4b7e      	ldr	r3, [pc, #504]	; (8011178 <lwip_netconn_do_writemore+0x270>)
 8010f80:	f240 6277 	movw	r2, #1655	; 0x677
 8010f84:	4982      	ldr	r1, [pc, #520]	; (8011190 <lwip_netconn_do_writemore+0x288>)
 8010f86:	487e      	ldr	r0, [pc, #504]	; (8011180 <lwip_netconn_do_writemore+0x278>)
 8010f88:	f00e fe16 	bl	801fbb8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6a1b      	ldr	r3, [r3, #32]
 8010f90:	899b      	ldrh	r3, [r3, #12]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d106      	bne.n	8010fa4 <lwip_netconn_do_writemore+0x9c>
 8010f96:	4b78      	ldr	r3, [pc, #480]	; (8011178 <lwip_netconn_do_writemore+0x270>)
 8010f98:	f240 6279 	movw	r2, #1657	; 0x679
 8010f9c:	497d      	ldr	r1, [pc, #500]	; (8011194 <lwip_netconn_do_writemore+0x28c>)
 8010f9e:	4878      	ldr	r0, [pc, #480]	; (8011180 <lwip_netconn_do_writemore+0x278>)
 8010fa0:	f00e fe0a 	bl	801fbb8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6a1b      	ldr	r3, [r3, #32]
 8010fa8:	7f1b      	ldrb	r3, [r3, #28]
 8010faa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	7f1b      	ldrb	r3, [r3, #28]
 8010fb0:	f003 0302 	and.w	r3, r3, #2
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d104      	bne.n	8010fc2 <lwip_netconn_do_writemore+0xba>
 8010fb8:	7ebb      	ldrb	r3, [r7, #26]
 8010fba:	f003 0304 	and.w	r3, r3, #4
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d001      	beq.n	8010fc6 <lwip_netconn_do_writemore+0xbe>
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	e000      	b.n	8010fc8 <lwip_netconn_do_writemore+0xc0>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6a1b      	ldr	r3, [r3, #32]
 8010fce:	689b      	ldr	r3, [r3, #8]
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6a1b      	ldr	r3, [r3, #32]
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	4413      	add	r3, r2
 8010fda:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6a1b      	ldr	r3, [r3, #32]
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	685a      	ldr	r2, [r3, #4]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6a1b      	ldr	r3, [r3, #32]
 8010fe8:	691b      	ldr	r3, [r3, #16]
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ff4:	d307      	bcc.n	8011006 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ffa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010ffc:	7ebb      	ldrb	r3, [r7, #26]
 8010ffe:	f043 0302 	orr.w	r3, r3, #2
 8011002:	76bb      	strb	r3, [r7, #26]
 8011004:	e001      	b.n	801100a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011012:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8011014:	89fa      	ldrh	r2, [r7, #14]
 8011016:	8bbb      	ldrh	r3, [r7, #28]
 8011018:	429a      	cmp	r2, r3
 801101a:	d216      	bcs.n	801104a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 801101c:	89fb      	ldrh	r3, [r7, #14]
 801101e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8011020:	7e3b      	ldrb	r3, [r7, #24]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d00d      	beq.n	8011042 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8011026:	8bbb      	ldrh	r3, [r7, #28]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d10e      	bne.n	801104a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6a1b      	ldr	r3, [r3, #32]
 8011030:	699b      	ldr	r3, [r3, #24]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d102      	bne.n	801103c <lwip_netconn_do_writemore+0x134>
 8011036:	f06f 0306 	mvn.w	r3, #6
 801103a:	e000      	b.n	801103e <lwip_netconn_do_writemore+0x136>
 801103c:	2300      	movs	r3, #0
 801103e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8011040:	e07d      	b.n	801113e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8011042:	7ebb      	ldrb	r3, [r7, #26]
 8011044:	f043 0302 	orr.w	r3, r3, #2
 8011048:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6a1b      	ldr	r3, [r3, #32]
 801104e:	691a      	ldr	r2, [r3, #16]
 8011050:	8bbb      	ldrh	r3, [r7, #28]
 8011052:	441a      	add	r2, r3
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6a1b      	ldr	r3, [r3, #32]
 8011058:	689b      	ldr	r3, [r3, #8]
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	429a      	cmp	r2, r3
 801105e:	d906      	bls.n	801106e <lwip_netconn_do_writemore+0x166>
 8011060:	4b45      	ldr	r3, [pc, #276]	; (8011178 <lwip_netconn_do_writemore+0x270>)
 8011062:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8011066:	494c      	ldr	r1, [pc, #304]	; (8011198 <lwip_netconn_do_writemore+0x290>)
 8011068:	4845      	ldr	r0, [pc, #276]	; (8011180 <lwip_netconn_do_writemore+0x278>)
 801106a:	f00e fda5 	bl	801fbb8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801106e:	8bbb      	ldrh	r3, [r7, #28]
 8011070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011074:	4293      	cmp	r3, r2
 8011076:	d103      	bne.n	8011080 <lwip_netconn_do_writemore+0x178>
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801107e:	d209      	bcs.n	8011094 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011084:	8bba      	ldrh	r2, [r7, #28]
 8011086:	429a      	cmp	r2, r3
 8011088:	d10b      	bne.n	80110a2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6a1b      	ldr	r3, [r3, #32]
 801108e:	899b      	ldrh	r3, [r3, #12]
 8011090:	2b01      	cmp	r3, #1
 8011092:	d906      	bls.n	80110a2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8011094:	2301      	movs	r3, #1
 8011096:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011098:	7ebb      	ldrb	r3, [r7, #26]
 801109a:	f043 0302 	orr.w	r3, r3, #2
 801109e:	76bb      	strb	r3, [r7, #26]
 80110a0:	e001      	b.n	80110a6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80110a2:	2300      	movs	r3, #0
 80110a4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6858      	ldr	r0, [r3, #4]
 80110aa:	7ebb      	ldrb	r3, [r7, #26]
 80110ac:	8bba      	ldrh	r2, [r7, #28]
 80110ae:	6979      	ldr	r1, [r7, #20]
 80110b0:	f006 fde4 	bl	8017c7c <tcp_write>
 80110b4:	4603      	mov	r3, r0
 80110b6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80110b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d12c      	bne.n	801111a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6a1b      	ldr	r3, [r3, #32]
 80110c4:	6999      	ldr	r1, [r3, #24]
 80110c6:	8bba      	ldrh	r2, [r7, #28]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6a1b      	ldr	r3, [r3, #32]
 80110cc:	440a      	add	r2, r1
 80110ce:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6a1b      	ldr	r3, [r3, #32]
 80110d4:	6919      	ldr	r1, [r3, #16]
 80110d6:	8bba      	ldrh	r2, [r7, #28]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6a1b      	ldr	r3, [r3, #32]
 80110dc:	440a      	add	r2, r1
 80110de:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6a1b      	ldr	r3, [r3, #32]
 80110e4:	691a      	ldr	r2, [r3, #16]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6a1b      	ldr	r3, [r3, #32]
 80110ea:	689b      	ldr	r3, [r3, #8]
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d113      	bne.n	801111a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6a1b      	ldr	r3, [r3, #32]
 80110f6:	899a      	ldrh	r2, [r3, #12]
 80110f8:	3a01      	subs	r2, #1
 80110fa:	b292      	uxth	r2, r2
 80110fc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6a1b      	ldr	r3, [r3, #32]
 8011102:	899b      	ldrh	r3, [r3, #12]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d008      	beq.n	801111a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6a1b      	ldr	r3, [r3, #32]
 801110c:	689a      	ldr	r2, [r3, #8]
 801110e:	3208      	adds	r2, #8
 8011110:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6a1b      	ldr	r3, [r3, #32]
 8011116:	2200      	movs	r2, #0
 8011118:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801111a:	7e7b      	ldrb	r3, [r7, #25]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d004      	beq.n	801112a <lwip_netconn_do_writemore+0x222>
 8011120:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011124:	2b00      	cmp	r3, #0
 8011126:	f43f af50 	beq.w	8010fca <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801112a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d004      	beq.n	801113c <lwip_netconn_do_writemore+0x234>
 8011132:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801113a:	d146      	bne.n	80111ca <lwip_netconn_do_writemore+0x2c2>
err_mem:
 801113c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801113e:	7e3b      	ldrb	r3, [r7, #24]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d02b      	beq.n	801119c <lwip_netconn_do_writemore+0x294>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6a1b      	ldr	r3, [r3, #32]
 8011148:	699a      	ldr	r2, [r3, #24]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6a1b      	ldr	r3, [r3, #32]
 801114e:	695b      	ldr	r3, [r3, #20]
 8011150:	429a      	cmp	r2, r3
 8011152:	d223      	bcs.n	801119c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011158:	2b00      	cmp	r3, #0
 801115a:	d005      	beq.n	8011168 <lwip_netconn_do_writemore+0x260>
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011160:	2200      	movs	r2, #0
 8011162:	2103      	movs	r1, #3
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	7f1b      	ldrb	r3, [r3, #28]
 801116c:	f043 0310 	orr.w	r3, r3, #16
 8011170:	b2da      	uxtb	r2, r3
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	771a      	strb	r2, [r3, #28]
 8011176:	e028      	b.n	80111ca <lwip_netconn_do_writemore+0x2c2>
 8011178:	080212a8 	.word	0x080212a8
 801117c:	08021400 	.word	0x08021400
 8011180:	080212ec 	.word	0x080212ec
 8011184:	08021708 	.word	0x08021708
 8011188:	08021410 	.word	0x08021410
 801118c:	08021728 	.word	0x08021728
 8011190:	08021740 	.word	0x08021740
 8011194:	08021780 	.word	0x08021780
 8011198:	080217a8 	.word	0x080217a8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80111a4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80111a8:	d305      	bcc.n	80111b6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80111b2:	2b04      	cmp	r3, #4
 80111b4:	d909      	bls.n	80111ca <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d005      	beq.n	80111ca <lwip_netconn_do_writemore+0x2c2>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c2:	2200      	movs	r2, #0
 80111c4:	2103      	movs	r1, #3
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80111ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d11d      	bne.n	801120e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6a1b      	ldr	r3, [r3, #32]
 80111d6:	699a      	ldr	r2, [r3, #24]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6a1b      	ldr	r3, [r3, #32]
 80111dc:	695b      	ldr	r3, [r3, #20]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d002      	beq.n	80111e8 <lwip_netconn_do_writemore+0x2e0>
 80111e2:	7e3b      	ldrb	r3, [r7, #24]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d001      	beq.n	80111ec <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80111e8:	2301      	movs	r3, #1
 80111ea:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	4618      	mov	r0, r3
 80111f2:	f007 fb2d 	bl	8018850 <tcp_output>
 80111f6:	4603      	mov	r3, r0
 80111f8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80111fa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80111fe:	f113 0f04 	cmn.w	r3, #4
 8011202:	d12c      	bne.n	801125e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011204:	7b3b      	ldrb	r3, [r7, #12]
 8011206:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011208:	2301      	movs	r3, #1
 801120a:	76fb      	strb	r3, [r7, #27]
 801120c:	e027      	b.n	801125e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801120e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011216:	d120      	bne.n	801125a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	4618      	mov	r0, r3
 801121e:	f007 fb17 	bl	8018850 <tcp_output>
 8011222:	4603      	mov	r3, r0
 8011224:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8011226:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801122a:	f113 0f04 	cmn.w	r3, #4
 801122e:	d104      	bne.n	801123a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011230:	7b7b      	ldrb	r3, [r7, #13]
 8011232:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011234:	2301      	movs	r3, #1
 8011236:	76fb      	strb	r3, [r7, #27]
 8011238:	e011      	b.n	801125e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 801123a:	7e3b      	ldrb	r3, [r7, #24]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00e      	beq.n	801125e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6a1b      	ldr	r3, [r3, #32]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d102      	bne.n	8011250 <lwip_netconn_do_writemore+0x348>
 801124a:	f06f 0306 	mvn.w	r3, #6
 801124e:	e000      	b.n	8011252 <lwip_netconn_do_writemore+0x34a>
 8011250:	2300      	movs	r3, #0
 8011252:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011254:	2301      	movs	r3, #1
 8011256:	76fb      	strb	r3, [r7, #27]
 8011258:	e001      	b.n	801125e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801125a:	2301      	movs	r3, #1
 801125c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801125e:	7efb      	ldrb	r3, [r7, #27]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d015      	beq.n	8011290 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	6a1b      	ldr	r3, [r3, #32]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	330c      	adds	r3, #12
 801126c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6a1b      	ldr	r3, [r3, #32]
 8011272:	7ffa      	ldrb	r2, [r7, #31]
 8011274:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2200      	movs	r2, #0
 801127a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2200      	movs	r2, #0
 8011280:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011282:	78fb      	ldrb	r3, [r7, #3]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d006      	beq.n	8011296 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8011288:	68b8      	ldr	r0, [r7, #8]
 801128a:	f00d fb0f 	bl	801e8ac <sys_sem_signal>
 801128e:	e002      	b.n	8011296 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8011290:	f04f 33ff 	mov.w	r3, #4294967295
 8011294:	e000      	b.n	8011298 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	3720      	adds	r7, #32
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7fe fd20 	bl	800fcf6 <netconn_err>
 80112b6:	4603      	mov	r3, r0
 80112b8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80112ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d166      	bne.n	8011390 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112cc:	2b10      	cmp	r3, #16
 80112ce:	d15d      	bne.n	801138c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	785b      	ldrb	r3, [r3, #1]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d002      	beq.n	80112e0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80112da:	23fb      	movs	r3, #251	; 0xfb
 80112dc:	73fb      	strb	r3, [r7, #15]
 80112de:	e057      	b.n	8011390 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d04d      	beq.n	8011386 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2201      	movs	r2, #1
 80112f0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	6a1b      	ldr	r3, [r3, #32]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d006      	beq.n	801130a <lwip_netconn_do_write+0x6a>
 80112fc:	4b28      	ldr	r3, [pc, #160]	; (80113a0 <lwip_netconn_do_write+0x100>)
 80112fe:	f240 7223 	movw	r2, #1827	; 0x723
 8011302:	4928      	ldr	r1, [pc, #160]	; (80113a4 <lwip_netconn_do_write+0x104>)
 8011304:	4828      	ldr	r0, [pc, #160]	; (80113a8 <lwip_netconn_do_write+0x108>)
 8011306:	f00e fc57 	bl	801fbb8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	695b      	ldr	r3, [r3, #20]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d106      	bne.n	8011320 <lwip_netconn_do_write+0x80>
 8011312:	4b23      	ldr	r3, [pc, #140]	; (80113a0 <lwip_netconn_do_write+0x100>)
 8011314:	f240 7224 	movw	r2, #1828	; 0x724
 8011318:	4924      	ldr	r1, [pc, #144]	; (80113ac <lwip_netconn_do_write+0x10c>)
 801131a:	4823      	ldr	r0, [pc, #140]	; (80113a8 <lwip_netconn_do_write+0x108>)
 801131c:	f00e fc4c 	bl	801fbb8 <iprintf>
        msg->conn->current_msg = msg;
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2100      	movs	r1, #0
 801132e:	4618      	mov	r0, r3
 8011330:	f7ff fdea 	bl	8010f08 <lwip_netconn_do_writemore>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d02e      	beq.n	8011398 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	785b      	ldrb	r3, [r3, #1]
 8011340:	2b01      	cmp	r3, #1
 8011342:	d006      	beq.n	8011352 <lwip_netconn_do_write+0xb2>
 8011344:	4b16      	ldr	r3, [pc, #88]	; (80113a0 <lwip_netconn_do_write+0x100>)
 8011346:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801134a:	4919      	ldr	r1, [pc, #100]	; (80113b0 <lwip_netconn_do_write+0x110>)
 801134c:	4816      	ldr	r0, [pc, #88]	; (80113a8 <lwip_netconn_do_write+0x108>)
 801134e:	f00e fc33 	bl	801fbb8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8011352:	4818      	ldr	r0, [pc, #96]	; (80113b4 <lwip_netconn_do_write+0x114>)
 8011354:	f00d fb13 	bl	801e97e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	330c      	adds	r3, #12
 801135e:	2100      	movs	r1, #0
 8011360:	4618      	mov	r0, r3
 8011362:	f00d fa72 	bl	801e84a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8011366:	4813      	ldr	r0, [pc, #76]	; (80113b4 <lwip_netconn_do_write+0x114>)
 8011368:	f00d fafa 	bl	801e960 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	785b      	ldrb	r3, [r3, #1]
 8011372:	2b01      	cmp	r3, #1
 8011374:	d110      	bne.n	8011398 <lwip_netconn_do_write+0xf8>
 8011376:	4b0a      	ldr	r3, [pc, #40]	; (80113a0 <lwip_netconn_do_write+0x100>)
 8011378:	f240 722c 	movw	r2, #1836	; 0x72c
 801137c:	490c      	ldr	r1, [pc, #48]	; (80113b0 <lwip_netconn_do_write+0x110>)
 801137e:	480a      	ldr	r0, [pc, #40]	; (80113a8 <lwip_netconn_do_write+0x108>)
 8011380:	f00e fc1a 	bl	801fbb8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8011384:	e008      	b.n	8011398 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8011386:	23f5      	movs	r3, #245	; 0xf5
 8011388:	73fb      	strb	r3, [r7, #15]
 801138a:	e001      	b.n	8011390 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 801138c:	23fa      	movs	r3, #250	; 0xfa
 801138e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	7bfa      	ldrb	r2, [r7, #15]
 8011394:	711a      	strb	r2, [r3, #4]
 8011396:	e000      	b.n	801139a <lwip_netconn_do_write+0xfa>
        return;
 8011398:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801139a:	3710      	adds	r7, #16
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	080212a8 	.word	0x080212a8
 80113a4:	0802164c 	.word	0x0802164c
 80113a8:	080212ec 	.word	0x080212ec
 80113ac:	080217d4 	.word	0x080217d4
 80113b0:	08021668 	.word	0x08021668
 80113b4:	2000b2bc 	.word	0x2000b2bc

080113b8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	785b      	ldrb	r3, [r3, #1]
 80113ca:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d069      	beq.n	80114aa <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80113e0:	2b10      	cmp	r3, #16
 80113e2:	d162      	bne.n	80114aa <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80113e8:	2b03      	cmp	r3, #3
 80113ea:	d002      	beq.n	80113f2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80113ec:	7afb      	ldrb	r3, [r7, #11]
 80113ee:	2b02      	cmp	r3, #2
 80113f0:	d05b      	beq.n	80114aa <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80113f2:	7afb      	ldrb	r3, [r7, #11]
 80113f4:	2b03      	cmp	r3, #3
 80113f6:	d103      	bne.n	8011400 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	22f5      	movs	r2, #245	; 0xf5
 80113fc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80113fe:	e059      	b.n	80114b4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8011400:	7afb      	ldrb	r3, [r7, #11]
 8011402:	2b01      	cmp	r3, #1
 8011404:	d103      	bne.n	801140e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	22fb      	movs	r2, #251	; 0xfb
 801140a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801140c:	e052      	b.n	80114b4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	7a1b      	ldrb	r3, [r3, #8]
 8011412:	f003 0301 	and.w	r3, r3, #1
 8011416:	2b00      	cmp	r3, #0
 8011418:	d004      	beq.n	8011424 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	4618      	mov	r0, r3
 8011420:	f7ff f9a2 	bl	8010768 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	6a1b      	ldr	r3, [r3, #32]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d006      	beq.n	801143c <lwip_netconn_do_close+0x84>
 801142e:	4b23      	ldr	r3, [pc, #140]	; (80114bc <lwip_netconn_do_close+0x104>)
 8011430:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8011434:	4922      	ldr	r1, [pc, #136]	; (80114c0 <lwip_netconn_do_close+0x108>)
 8011436:	4823      	ldr	r0, [pc, #140]	; (80114c4 <lwip_netconn_do_close+0x10c>)
 8011438:	f00e fbbe 	bl	801fbb8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2204      	movs	r2, #4
 8011442:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	68fa      	ldr	r2, [r7, #12]
 801144a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2100      	movs	r1, #0
 8011452:	4618      	mov	r0, r3
 8011454:	f7ff fa06 	bl	8010864 <lwip_netconn_do_close_internal>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d029      	beq.n	80114b2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	785b      	ldrb	r3, [r3, #1]
 8011464:	2b04      	cmp	r3, #4
 8011466:	d006      	beq.n	8011476 <lwip_netconn_do_close+0xbe>
 8011468:	4b14      	ldr	r3, [pc, #80]	; (80114bc <lwip_netconn_do_close+0x104>)
 801146a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 801146e:	4916      	ldr	r1, [pc, #88]	; (80114c8 <lwip_netconn_do_close+0x110>)
 8011470:	4814      	ldr	r0, [pc, #80]	; (80114c4 <lwip_netconn_do_close+0x10c>)
 8011472:	f00e fba1 	bl	801fbb8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8011476:	4815      	ldr	r0, [pc, #84]	; (80114cc <lwip_netconn_do_close+0x114>)
 8011478:	f00d fa81 	bl	801e97e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	330c      	adds	r3, #12
 8011482:	2100      	movs	r1, #0
 8011484:	4618      	mov	r0, r3
 8011486:	f00d f9e0 	bl	801e84a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801148a:	4810      	ldr	r0, [pc, #64]	; (80114cc <lwip_netconn_do_close+0x114>)
 801148c:	f00d fa68 	bl	801e960 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	785b      	ldrb	r3, [r3, #1]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d00b      	beq.n	80114b2 <lwip_netconn_do_close+0xfa>
 801149a:	4b08      	ldr	r3, [pc, #32]	; (80114bc <lwip_netconn_do_close+0x104>)
 801149c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80114a0:	4909      	ldr	r1, [pc, #36]	; (80114c8 <lwip_netconn_do_close+0x110>)
 80114a2:	4808      	ldr	r0, [pc, #32]	; (80114c4 <lwip_netconn_do_close+0x10c>)
 80114a4:	f00e fb88 	bl	801fbb8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80114a8:	e003      	b.n	80114b2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	22f5      	movs	r2, #245	; 0xf5
 80114ae:	711a      	strb	r2, [r3, #4]
 80114b0:	e000      	b.n	80114b4 <lwip_netconn_do_close+0xfc>
      return;
 80114b2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	080212a8 	.word	0x080212a8
 80114c0:	0802164c 	.word	0x0802164c
 80114c4:	080212ec 	.word	0x080212ec
 80114c8:	08021668 	.word	0x08021668
 80114cc:	2000b2bc 	.word	0x2000b2bc

080114d0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d013      	beq.n	8011506 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d00b      	beq.n	80114fe <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	4618      	mov	r0, r3
 80114ec:	f001 fdfa 	bl	80130e4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2200      	movs	r2, #0
 80114f4:	605a      	str	r2, [r3, #4]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	685a      	ldr	r2, [r3, #4]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80114fe:	6879      	ldr	r1, [r7, #4]
 8011500:	2006      	movs	r0, #6
 8011502:	f000 ff3f 	bl	8012384 <memp_free>
  }
}
 8011506:	bf00      	nop
 8011508:	3708      	adds	r7, #8
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
	...

08011510 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d108      	bne.n	8011534 <netbuf_data+0x24>
 8011522:	4b1b      	ldr	r3, [pc, #108]	; (8011590 <netbuf_data+0x80>)
 8011524:	22c6      	movs	r2, #198	; 0xc6
 8011526:	491b      	ldr	r1, [pc, #108]	; (8011594 <netbuf_data+0x84>)
 8011528:	481b      	ldr	r0, [pc, #108]	; (8011598 <netbuf_data+0x88>)
 801152a:	f00e fb45 	bl	801fbb8 <iprintf>
 801152e:	f06f 030f 	mvn.w	r3, #15
 8011532:	e029      	b.n	8011588 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d108      	bne.n	801154c <netbuf_data+0x3c>
 801153a:	4b15      	ldr	r3, [pc, #84]	; (8011590 <netbuf_data+0x80>)
 801153c:	22c7      	movs	r2, #199	; 0xc7
 801153e:	4917      	ldr	r1, [pc, #92]	; (801159c <netbuf_data+0x8c>)
 8011540:	4815      	ldr	r0, [pc, #84]	; (8011598 <netbuf_data+0x88>)
 8011542:	f00e fb39 	bl	801fbb8 <iprintf>
 8011546:	f06f 030f 	mvn.w	r3, #15
 801154a:	e01d      	b.n	8011588 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d108      	bne.n	8011564 <netbuf_data+0x54>
 8011552:	4b0f      	ldr	r3, [pc, #60]	; (8011590 <netbuf_data+0x80>)
 8011554:	22c8      	movs	r2, #200	; 0xc8
 8011556:	4912      	ldr	r1, [pc, #72]	; (80115a0 <netbuf_data+0x90>)
 8011558:	480f      	ldr	r0, [pc, #60]	; (8011598 <netbuf_data+0x88>)
 801155a:	f00e fb2d 	bl	801fbb8 <iprintf>
 801155e:	f06f 030f 	mvn.w	r3, #15
 8011562:	e011      	b.n	8011588 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	685b      	ldr	r3, [r3, #4]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d102      	bne.n	8011572 <netbuf_data+0x62>
    return ERR_BUF;
 801156c:	f06f 0301 	mvn.w	r3, #1
 8011570:	e00a      	b.n	8011588 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	685a      	ldr	r2, [r3, #4]
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	895a      	ldrh	r2, [r3, #10]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8011586:	2300      	movs	r3, #0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3710      	adds	r7, #16
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	08021800 	.word	0x08021800
 8011594:	08021908 	.word	0x08021908
 8011598:	08021850 	.word	0x08021850
 801159c:	08021924 	.word	0x08021924
 80115a0:	08021944 	.word	0x08021944

080115a4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d108      	bne.n	80115c4 <netbuf_next+0x20>
 80115b2:	4b11      	ldr	r3, [pc, #68]	; (80115f8 <netbuf_next+0x54>)
 80115b4:	22e0      	movs	r2, #224	; 0xe0
 80115b6:	4911      	ldr	r1, [pc, #68]	; (80115fc <netbuf_next+0x58>)
 80115b8:	4811      	ldr	r0, [pc, #68]	; (8011600 <netbuf_next+0x5c>)
 80115ba:	f00e fafd 	bl	801fbb8 <iprintf>
 80115be:	f04f 33ff 	mov.w	r3, #4294967295
 80115c2:	e014      	b.n	80115ee <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d102      	bne.n	80115d4 <netbuf_next+0x30>
    return -1;
 80115ce:	f04f 33ff 	mov.w	r3, #4294967295
 80115d2:	e00c      	b.n	80115ee <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d101      	bne.n	80115ec <netbuf_next+0x48>
    return 1;
 80115e8:	2301      	movs	r3, #1
 80115ea:	e000      	b.n	80115ee <netbuf_next+0x4a>
  }
  return 0;
 80115ec:	2300      	movs	r3, #0
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3708      	adds	r7, #8
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	08021800 	.word	0x08021800
 80115fc:	08021960 	.word	0x08021960
 8011600:	08021850 	.word	0x08021850

08011604 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801160e:	f008 f9d7 	bl	80199c0 <sys_timeouts_sleeptime>
 8011612:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801161a:	d10b      	bne.n	8011634 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801161c:	4813      	ldr	r0, [pc, #76]	; (801166c <tcpip_timeouts_mbox_fetch+0x68>)
 801161e:	f00d f9ae 	bl	801e97e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011622:	2200      	movs	r2, #0
 8011624:	6839      	ldr	r1, [r7, #0]
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f00d f884 	bl	801e734 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801162c:	480f      	ldr	r0, [pc, #60]	; (801166c <tcpip_timeouts_mbox_fetch+0x68>)
 801162e:	f00d f997 	bl	801e960 <sys_mutex_lock>
    return;
 8011632:	e018      	b.n	8011666 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d102      	bne.n	8011640 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801163a:	f008 f987 	bl	801994c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801163e:	e7e6      	b.n	801160e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011640:	480a      	ldr	r0, [pc, #40]	; (801166c <tcpip_timeouts_mbox_fetch+0x68>)
 8011642:	f00d f99c 	bl	801e97e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011646:	68fa      	ldr	r2, [r7, #12]
 8011648:	6839      	ldr	r1, [r7, #0]
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f00d f872 	bl	801e734 <sys_arch_mbox_fetch>
 8011650:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011652:	4806      	ldr	r0, [pc, #24]	; (801166c <tcpip_timeouts_mbox_fetch+0x68>)
 8011654:	f00d f984 	bl	801e960 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801165e:	d102      	bne.n	8011666 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011660:	f008 f974 	bl	801994c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011664:	e7d3      	b.n	801160e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011666:	3710      	adds	r7, #16
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	2000b2bc 	.word	0x2000b2bc

08011670 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011678:	4810      	ldr	r0, [pc, #64]	; (80116bc <tcpip_thread+0x4c>)
 801167a:	f00d f971 	bl	801e960 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801167e:	4b10      	ldr	r3, [pc, #64]	; (80116c0 <tcpip_thread+0x50>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d005      	beq.n	8011692 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011686:	4b0e      	ldr	r3, [pc, #56]	; (80116c0 <tcpip_thread+0x50>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	4a0e      	ldr	r2, [pc, #56]	; (80116c4 <tcpip_thread+0x54>)
 801168c:	6812      	ldr	r2, [r2, #0]
 801168e:	4610      	mov	r0, r2
 8011690:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011692:	f107 030c 	add.w	r3, r7, #12
 8011696:	4619      	mov	r1, r3
 8011698:	480b      	ldr	r0, [pc, #44]	; (80116c8 <tcpip_thread+0x58>)
 801169a:	f7ff ffb3 	bl	8011604 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d106      	bne.n	80116b2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80116a4:	4b09      	ldr	r3, [pc, #36]	; (80116cc <tcpip_thread+0x5c>)
 80116a6:	2291      	movs	r2, #145	; 0x91
 80116a8:	4909      	ldr	r1, [pc, #36]	; (80116d0 <tcpip_thread+0x60>)
 80116aa:	480a      	ldr	r0, [pc, #40]	; (80116d4 <tcpip_thread+0x64>)
 80116ac:	f00e fa84 	bl	801fbb8 <iprintf>
      continue;
 80116b0:	e003      	b.n	80116ba <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	4618      	mov	r0, r3
 80116b6:	f000 f80f 	bl	80116d8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80116ba:	e7ea      	b.n	8011692 <tcpip_thread+0x22>
 80116bc:	2000b2bc 	.word	0x2000b2bc
 80116c0:	20005f58 	.word	0x20005f58
 80116c4:	20005f5c 	.word	0x20005f5c
 80116c8:	20005f60 	.word	0x20005f60
 80116cc:	08021998 	.word	0x08021998
 80116d0:	080219c8 	.word	0x080219c8
 80116d4:	080219e8 	.word	0x080219e8

080116d8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	2b02      	cmp	r3, #2
 80116e6:	d026      	beq.n	8011736 <tcpip_thread_handle_msg+0x5e>
 80116e8:	2b02      	cmp	r3, #2
 80116ea:	dc2b      	bgt.n	8011744 <tcpip_thread_handle_msg+0x6c>
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d002      	beq.n	80116f6 <tcpip_thread_handle_msg+0x1e>
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d015      	beq.n	8011720 <tcpip_thread_handle_msg+0x48>
 80116f4:	e026      	b.n	8011744 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	6850      	ldr	r0, [r2, #4]
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	6892      	ldr	r2, [r2, #8]
 8011702:	4611      	mov	r1, r2
 8011704:	4798      	blx	r3
 8011706:	4603      	mov	r3, r0
 8011708:	2b00      	cmp	r3, #0
 801170a:	d004      	beq.n	8011716 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	4618      	mov	r0, r3
 8011712:	f001 fce7 	bl	80130e4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011716:	6879      	ldr	r1, [r7, #4]
 8011718:	2009      	movs	r0, #9
 801171a:	f000 fe33 	bl	8012384 <memp_free>
      break;
 801171e:	e018      	b.n	8011752 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	687a      	ldr	r2, [r7, #4]
 8011726:	6892      	ldr	r2, [r2, #8]
 8011728:	4610      	mov	r0, r2
 801172a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801172c:	6879      	ldr	r1, [r7, #4]
 801172e:	2008      	movs	r0, #8
 8011730:	f000 fe28 	bl	8012384 <memp_free>
      break;
 8011734:	e00d      	b.n	8011752 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	6892      	ldr	r2, [r2, #8]
 801173e:	4610      	mov	r0, r2
 8011740:	4798      	blx	r3
      break;
 8011742:	e006      	b.n	8011752 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011744:	4b05      	ldr	r3, [pc, #20]	; (801175c <tcpip_thread_handle_msg+0x84>)
 8011746:	22cf      	movs	r2, #207	; 0xcf
 8011748:	4905      	ldr	r1, [pc, #20]	; (8011760 <tcpip_thread_handle_msg+0x88>)
 801174a:	4806      	ldr	r0, [pc, #24]	; (8011764 <tcpip_thread_handle_msg+0x8c>)
 801174c:	f00e fa34 	bl	801fbb8 <iprintf>
      break;
 8011750:	bf00      	nop
  }
}
 8011752:	bf00      	nop
 8011754:	3708      	adds	r7, #8
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop
 801175c:	08021998 	.word	0x08021998
 8011760:	080219c8 	.word	0x080219c8
 8011764:	080219e8 	.word	0x080219e8

08011768 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b086      	sub	sp, #24
 801176c:	af00      	add	r7, sp, #0
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011774:	481a      	ldr	r0, [pc, #104]	; (80117e0 <tcpip_inpkt+0x78>)
 8011776:	f00d f825 	bl	801e7c4 <sys_mbox_valid>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d105      	bne.n	801178c <tcpip_inpkt+0x24>
 8011780:	4b18      	ldr	r3, [pc, #96]	; (80117e4 <tcpip_inpkt+0x7c>)
 8011782:	22fc      	movs	r2, #252	; 0xfc
 8011784:	4918      	ldr	r1, [pc, #96]	; (80117e8 <tcpip_inpkt+0x80>)
 8011786:	4819      	ldr	r0, [pc, #100]	; (80117ec <tcpip_inpkt+0x84>)
 8011788:	f00e fa16 	bl	801fbb8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801178c:	2009      	movs	r0, #9
 801178e:	f000 fda7 	bl	80122e0 <memp_malloc>
 8011792:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d102      	bne.n	80117a0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801179a:	f04f 33ff 	mov.w	r3, #4294967295
 801179e:	e01a      	b.n	80117d6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	2200      	movs	r2, #0
 80117a4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	68fa      	ldr	r2, [r7, #12]
 80117aa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	68ba      	ldr	r2, [r7, #8]
 80117b0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	687a      	ldr	r2, [r7, #4]
 80117b6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80117b8:	6979      	ldr	r1, [r7, #20]
 80117ba:	4809      	ldr	r0, [pc, #36]	; (80117e0 <tcpip_inpkt+0x78>)
 80117bc:	f00c ffa0 	bl	801e700 <sys_mbox_trypost>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d006      	beq.n	80117d4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80117c6:	6979      	ldr	r1, [r7, #20]
 80117c8:	2009      	movs	r0, #9
 80117ca:	f000 fddb 	bl	8012384 <memp_free>
    return ERR_MEM;
 80117ce:	f04f 33ff 	mov.w	r3, #4294967295
 80117d2:	e000      	b.n	80117d6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80117d4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	20005f60 	.word	0x20005f60
 80117e4:	08021998 	.word	0x08021998
 80117e8:	08021a10 	.word	0x08021a10
 80117ec:	080219e8 	.word	0x080219e8

080117f0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011800:	f003 0318 	and.w	r3, r3, #24
 8011804:	2b00      	cmp	r3, #0
 8011806:	d006      	beq.n	8011816 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011808:	4a08      	ldr	r2, [pc, #32]	; (801182c <tcpip_input+0x3c>)
 801180a:	6839      	ldr	r1, [r7, #0]
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f7ff ffab 	bl	8011768 <tcpip_inpkt>
 8011812:	4603      	mov	r3, r0
 8011814:	e005      	b.n	8011822 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011816:	4a06      	ldr	r2, [pc, #24]	; (8011830 <tcpip_input+0x40>)
 8011818:	6839      	ldr	r1, [r7, #0]
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7ff ffa4 	bl	8011768 <tcpip_inpkt>
 8011820:	4603      	mov	r3, r0
}
 8011822:	4618      	mov	r0, r3
 8011824:	3708      	adds	r7, #8
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	0801e4fd 	.word	0x0801e4fd
 8011830:	0801d3d5 	.word	0x0801d3d5

08011834 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b084      	sub	sp, #16
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801183e:	4819      	ldr	r0, [pc, #100]	; (80118a4 <tcpip_try_callback+0x70>)
 8011840:	f00c ffc0 	bl	801e7c4 <sys_mbox_valid>
 8011844:	4603      	mov	r3, r0
 8011846:	2b00      	cmp	r3, #0
 8011848:	d106      	bne.n	8011858 <tcpip_try_callback+0x24>
 801184a:	4b17      	ldr	r3, [pc, #92]	; (80118a8 <tcpip_try_callback+0x74>)
 801184c:	f240 125d 	movw	r2, #349	; 0x15d
 8011850:	4916      	ldr	r1, [pc, #88]	; (80118ac <tcpip_try_callback+0x78>)
 8011852:	4817      	ldr	r0, [pc, #92]	; (80118b0 <tcpip_try_callback+0x7c>)
 8011854:	f00e f9b0 	bl	801fbb8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011858:	2008      	movs	r0, #8
 801185a:	f000 fd41 	bl	80122e0 <memp_malloc>
 801185e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d102      	bne.n	801186c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011866:	f04f 33ff 	mov.w	r3, #4294967295
 801186a:	e017      	b.n	801189c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	2201      	movs	r2, #1
 8011870:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	683a      	ldr	r2, [r7, #0]
 801187c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801187e:	68f9      	ldr	r1, [r7, #12]
 8011880:	4808      	ldr	r0, [pc, #32]	; (80118a4 <tcpip_try_callback+0x70>)
 8011882:	f00c ff3d 	bl	801e700 <sys_mbox_trypost>
 8011886:	4603      	mov	r3, r0
 8011888:	2b00      	cmp	r3, #0
 801188a:	d006      	beq.n	801189a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801188c:	68f9      	ldr	r1, [r7, #12]
 801188e:	2008      	movs	r0, #8
 8011890:	f000 fd78 	bl	8012384 <memp_free>
    return ERR_MEM;
 8011894:	f04f 33ff 	mov.w	r3, #4294967295
 8011898:	e000      	b.n	801189c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	3710      	adds	r7, #16
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	20005f60 	.word	0x20005f60
 80118a8:	08021998 	.word	0x08021998
 80118ac:	08021a10 	.word	0x08021a10
 80118b0:	080219e8 	.word	0x080219e8

080118b4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80118c0:	4806      	ldr	r0, [pc, #24]	; (80118dc <tcpip_send_msg_wait_sem+0x28>)
 80118c2:	f00d f84d 	bl	801e960 <sys_mutex_lock>
  fn(apimsg);
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	68b8      	ldr	r0, [r7, #8]
 80118ca:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80118cc:	4803      	ldr	r0, [pc, #12]	; (80118dc <tcpip_send_msg_wait_sem+0x28>)
 80118ce:	f00d f856 	bl	801e97e <sys_mutex_unlock>
  return ERR_OK;
 80118d2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3710      	adds	r7, #16
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	2000b2bc 	.word	0x2000b2bc

080118e0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af02      	add	r7, sp, #8
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80118ea:	f000 f871 	bl	80119d0 <lwip_init>

  tcpip_init_done = initfunc;
 80118ee:	4a17      	ldr	r2, [pc, #92]	; (801194c <tcpip_init+0x6c>)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80118f4:	4a16      	ldr	r2, [pc, #88]	; (8011950 <tcpip_init+0x70>)
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80118fa:	2106      	movs	r1, #6
 80118fc:	4815      	ldr	r0, [pc, #84]	; (8011954 <tcpip_init+0x74>)
 80118fe:	f00c fed3 	bl	801e6a8 <sys_mbox_new>
 8011902:	4603      	mov	r3, r0
 8011904:	2b00      	cmp	r3, #0
 8011906:	d006      	beq.n	8011916 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011908:	4b13      	ldr	r3, [pc, #76]	; (8011958 <tcpip_init+0x78>)
 801190a:	f240 2261 	movw	r2, #609	; 0x261
 801190e:	4913      	ldr	r1, [pc, #76]	; (801195c <tcpip_init+0x7c>)
 8011910:	4813      	ldr	r0, [pc, #76]	; (8011960 <tcpip_init+0x80>)
 8011912:	f00e f951 	bl	801fbb8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011916:	4813      	ldr	r0, [pc, #76]	; (8011964 <tcpip_init+0x84>)
 8011918:	f00d f80c 	bl	801e934 <sys_mutex_new>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d006      	beq.n	8011930 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011922:	4b0d      	ldr	r3, [pc, #52]	; (8011958 <tcpip_init+0x78>)
 8011924:	f240 2265 	movw	r2, #613	; 0x265
 8011928:	490f      	ldr	r1, [pc, #60]	; (8011968 <tcpip_init+0x88>)
 801192a:	480d      	ldr	r0, [pc, #52]	; (8011960 <tcpip_init+0x80>)
 801192c:	f00e f944 	bl	801fbb8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011930:	2318      	movs	r3, #24
 8011932:	9300      	str	r3, [sp, #0]
 8011934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011938:	2200      	movs	r2, #0
 801193a:	490c      	ldr	r1, [pc, #48]	; (801196c <tcpip_init+0x8c>)
 801193c:	480c      	ldr	r0, [pc, #48]	; (8011970 <tcpip_init+0x90>)
 801193e:	f00d f82b 	bl	801e998 <sys_thread_new>
}
 8011942:	bf00      	nop
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
 801194a:	bf00      	nop
 801194c:	20005f58 	.word	0x20005f58
 8011950:	20005f5c 	.word	0x20005f5c
 8011954:	20005f60 	.word	0x20005f60
 8011958:	08021998 	.word	0x08021998
 801195c:	08021a20 	.word	0x08021a20
 8011960:	080219e8 	.word	0x080219e8
 8011964:	2000b2bc 	.word	0x2000b2bc
 8011968:	08021a44 	.word	0x08021a44
 801196c:	08011671 	.word	0x08011671
 8011970:	08021a68 	.word	0x08021a68

08011974 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	4603      	mov	r3, r0
 801197c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801197e:	88fb      	ldrh	r3, [r7, #6]
 8011980:	021b      	lsls	r3, r3, #8
 8011982:	b21a      	sxth	r2, r3
 8011984:	88fb      	ldrh	r3, [r7, #6]
 8011986:	0a1b      	lsrs	r3, r3, #8
 8011988:	b29b      	uxth	r3, r3
 801198a:	b21b      	sxth	r3, r3
 801198c:	4313      	orrs	r3, r2
 801198e:	b21b      	sxth	r3, r3
 8011990:	b29b      	uxth	r3, r3
}
 8011992:	4618      	mov	r0, r3
 8011994:	370c      	adds	r7, #12
 8011996:	46bd      	mov	sp, r7
 8011998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199c:	4770      	bx	lr

0801199e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801199e:	b480      	push	{r7}
 80119a0:	b083      	sub	sp, #12
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	061a      	lsls	r2, r3, #24
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	021b      	lsls	r3, r3, #8
 80119ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80119b2:	431a      	orrs	r2, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	0a1b      	lsrs	r3, r3, #8
 80119b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80119bc:	431a      	orrs	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	0e1b      	lsrs	r3, r3, #24
 80119c2:	4313      	orrs	r3, r2
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80119d6:	2300      	movs	r3, #0
 80119d8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80119da:	f00c ff9f 	bl	801e91c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80119de:	f000 f8d5 	bl	8011b8c <mem_init>
  memp_init();
 80119e2:	f000 fc31 	bl	8012248 <memp_init>
  pbuf_init();
  netif_init();
 80119e6:	f000 fcf7 	bl	80123d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80119ea:	f008 f821 	bl	8019a30 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80119ee:	f001 fe23 	bl	8013638 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80119f2:	f007 ff63 	bl	80198bc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80119f6:	bf00      	nop
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
	...

08011a00 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011a00:	b480      	push	{r7}
 8011a02:	b083      	sub	sp, #12
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	4603      	mov	r3, r0
 8011a08:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011a0a:	4b05      	ldr	r3, [pc, #20]	; (8011a20 <ptr_to_mem+0x20>)
 8011a0c:	681a      	ldr	r2, [r3, #0]
 8011a0e:	88fb      	ldrh	r3, [r7, #6]
 8011a10:	4413      	add	r3, r2
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	370c      	adds	r7, #12
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr
 8011a1e:	bf00      	nop
 8011a20:	20005f64 	.word	0x20005f64

08011a24 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011a2c:	4b05      	ldr	r3, [pc, #20]	; (8011a44 <mem_to_ptr+0x20>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	b29b      	uxth	r3, r3
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	370c      	adds	r7, #12
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
 8011a44:	20005f64 	.word	0x20005f64

08011a48 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011a48:	b590      	push	{r4, r7, lr}
 8011a4a:	b085      	sub	sp, #20
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011a50:	4b45      	ldr	r3, [pc, #276]	; (8011b68 <plug_holes+0x120>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d206      	bcs.n	8011a68 <plug_holes+0x20>
 8011a5a:	4b44      	ldr	r3, [pc, #272]	; (8011b6c <plug_holes+0x124>)
 8011a5c:	f240 12df 	movw	r2, #479	; 0x1df
 8011a60:	4943      	ldr	r1, [pc, #268]	; (8011b70 <plug_holes+0x128>)
 8011a62:	4844      	ldr	r0, [pc, #272]	; (8011b74 <plug_holes+0x12c>)
 8011a64:	f00e f8a8 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011a68:	4b43      	ldr	r3, [pc, #268]	; (8011b78 <plug_holes+0x130>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d306      	bcc.n	8011a80 <plug_holes+0x38>
 8011a72:	4b3e      	ldr	r3, [pc, #248]	; (8011b6c <plug_holes+0x124>)
 8011a74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011a78:	4940      	ldr	r1, [pc, #256]	; (8011b7c <plug_holes+0x134>)
 8011a7a:	483e      	ldr	r0, [pc, #248]	; (8011b74 <plug_holes+0x12c>)
 8011a7c:	f00e f89c 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	791b      	ldrb	r3, [r3, #4]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d006      	beq.n	8011a96 <plug_holes+0x4e>
 8011a88:	4b38      	ldr	r3, [pc, #224]	; (8011b6c <plug_holes+0x124>)
 8011a8a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011a8e:	493c      	ldr	r1, [pc, #240]	; (8011b80 <plug_holes+0x138>)
 8011a90:	4838      	ldr	r0, [pc, #224]	; (8011b74 <plug_holes+0x12c>)
 8011a92:	f00e f891 	bl	801fbb8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	881b      	ldrh	r3, [r3, #0]
 8011a9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a9e:	d906      	bls.n	8011aae <plug_holes+0x66>
 8011aa0:	4b32      	ldr	r3, [pc, #200]	; (8011b6c <plug_holes+0x124>)
 8011aa2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8011aa6:	4937      	ldr	r1, [pc, #220]	; (8011b84 <plug_holes+0x13c>)
 8011aa8:	4832      	ldr	r0, [pc, #200]	; (8011b74 <plug_holes+0x12c>)
 8011aaa:	f00e f885 	bl	801fbb8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7ff ffa4 	bl	8011a00 <ptr_to_mem>
 8011ab8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011aba:	687a      	ldr	r2, [r7, #4]
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d024      	beq.n	8011b0c <plug_holes+0xc4>
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	791b      	ldrb	r3, [r3, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d120      	bne.n	8011b0c <plug_holes+0xc4>
 8011aca:	4b2b      	ldr	r3, [pc, #172]	; (8011b78 <plug_holes+0x130>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d01b      	beq.n	8011b0c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011ad4:	4b2c      	ldr	r3, [pc, #176]	; (8011b88 <plug_holes+0x140>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	68fa      	ldr	r2, [r7, #12]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d102      	bne.n	8011ae4 <plug_holes+0x9c>
      lfree = mem;
 8011ade:	4a2a      	ldr	r2, [pc, #168]	; (8011b88 <plug_holes+0x140>)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	881a      	ldrh	r2, [r3, #0]
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011af4:	d00a      	beq.n	8011b0c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	881b      	ldrh	r3, [r3, #0]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7ff ff80 	bl	8011a00 <ptr_to_mem>
 8011b00:	4604      	mov	r4, r0
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7ff ff8e 	bl	8011a24 <mem_to_ptr>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	885b      	ldrh	r3, [r3, #2]
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff ff75 	bl	8011a00 <ptr_to_mem>
 8011b16:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011b18:	68ba      	ldr	r2, [r7, #8]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d01f      	beq.n	8011b60 <plug_holes+0x118>
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	791b      	ldrb	r3, [r3, #4]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d11b      	bne.n	8011b60 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011b28:	4b17      	ldr	r3, [pc, #92]	; (8011b88 <plug_holes+0x140>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d102      	bne.n	8011b38 <plug_holes+0xf0>
      lfree = pmem;
 8011b32:	4a15      	ldr	r2, [pc, #84]	; (8011b88 <plug_holes+0x140>)
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	881a      	ldrh	r2, [r3, #0]
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	881b      	ldrh	r3, [r3, #0]
 8011b44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b48:	d00a      	beq.n	8011b60 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	881b      	ldrh	r3, [r3, #0]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7ff ff56 	bl	8011a00 <ptr_to_mem>
 8011b54:	4604      	mov	r4, r0
 8011b56:	68b8      	ldr	r0, [r7, #8]
 8011b58:	f7ff ff64 	bl	8011a24 <mem_to_ptr>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011b60:	bf00      	nop
 8011b62:	3714      	adds	r7, #20
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd90      	pop	{r4, r7, pc}
 8011b68:	20005f64 	.word	0x20005f64
 8011b6c:	08021a78 	.word	0x08021a78
 8011b70:	08021aa8 	.word	0x08021aa8
 8011b74:	08021ac0 	.word	0x08021ac0
 8011b78:	20005f68 	.word	0x20005f68
 8011b7c:	08021ae8 	.word	0x08021ae8
 8011b80:	08021b04 	.word	0x08021b04
 8011b84:	08021b20 	.word	0x08021b20
 8011b88:	20005f70 	.word	0x20005f70

08011b8c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011b92:	4b1f      	ldr	r3, [pc, #124]	; (8011c10 <mem_init+0x84>)
 8011b94:	3303      	adds	r3, #3
 8011b96:	f023 0303 	bic.w	r3, r3, #3
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	4b1d      	ldr	r3, [pc, #116]	; (8011c14 <mem_init+0x88>)
 8011b9e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011ba0:	4b1c      	ldr	r3, [pc, #112]	; (8011c14 <mem_init+0x88>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011bac:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011bba:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8011bbe:	f7ff ff1f 	bl	8011a00 <ptr_to_mem>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	4a14      	ldr	r2, [pc, #80]	; (8011c18 <mem_init+0x8c>)
 8011bc6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011bc8:	4b13      	ldr	r3, [pc, #76]	; (8011c18 <mem_init+0x8c>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	2201      	movs	r2, #1
 8011bce:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011bd0:	4b11      	ldr	r3, [pc, #68]	; (8011c18 <mem_init+0x8c>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011bd8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011bda:	4b0f      	ldr	r3, [pc, #60]	; (8011c18 <mem_init+0x8c>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011be2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011be4:	4b0b      	ldr	r3, [pc, #44]	; (8011c14 <mem_init+0x88>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	4a0c      	ldr	r2, [pc, #48]	; (8011c1c <mem_init+0x90>)
 8011bea:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011bec:	480c      	ldr	r0, [pc, #48]	; (8011c20 <mem_init+0x94>)
 8011bee:	f00c fea1 	bl	801e934 <sys_mutex_new>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d006      	beq.n	8011c06 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011bf8:	4b0a      	ldr	r3, [pc, #40]	; (8011c24 <mem_init+0x98>)
 8011bfa:	f240 221f 	movw	r2, #543	; 0x21f
 8011bfe:	490a      	ldr	r1, [pc, #40]	; (8011c28 <mem_init+0x9c>)
 8011c00:	480a      	ldr	r0, [pc, #40]	; (8011c2c <mem_init+0xa0>)
 8011c02:	f00d ffd9 	bl	801fbb8 <iprintf>
  }
}
 8011c06:	bf00      	nop
 8011c08:	3708      	adds	r7, #8
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	2000b2d8 	.word	0x2000b2d8
 8011c14:	20005f64 	.word	0x20005f64
 8011c18:	20005f68 	.word	0x20005f68
 8011c1c:	20005f70 	.word	0x20005f70
 8011c20:	20005f6c 	.word	0x20005f6c
 8011c24:	08021a78 	.word	0x08021a78
 8011c28:	08021b4c 	.word	0x08021b4c
 8011c2c:	08021ac0 	.word	0x08021ac0

08011c30 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b086      	sub	sp, #24
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f7ff fef3 	bl	8011a24 <mem_to_ptr>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7ff feda 	bl	8011a00 <ptr_to_mem>
 8011c4c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	885b      	ldrh	r3, [r3, #2]
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7ff fed4 	bl	8011a00 <ptr_to_mem>
 8011c58:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c62:	d818      	bhi.n	8011c96 <mem_link_valid+0x66>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	885b      	ldrh	r3, [r3, #2]
 8011c68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c6c:	d813      	bhi.n	8011c96 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011c72:	8afa      	ldrh	r2, [r7, #22]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d004      	beq.n	8011c82 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	881b      	ldrh	r3, [r3, #0]
 8011c7c:	8afa      	ldrh	r2, [r7, #22]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d109      	bne.n	8011c96 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011c82:	4b08      	ldr	r3, [pc, #32]	; (8011ca4 <mem_link_valid+0x74>)
 8011c84:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011c86:	693a      	ldr	r2, [r7, #16]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d006      	beq.n	8011c9a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	885b      	ldrh	r3, [r3, #2]
 8011c90:	8afa      	ldrh	r2, [r7, #22]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d001      	beq.n	8011c9a <mem_link_valid+0x6a>
    return 0;
 8011c96:	2300      	movs	r3, #0
 8011c98:	e000      	b.n	8011c9c <mem_link_valid+0x6c>
  }
  return 1;
 8011c9a:	2301      	movs	r3, #1
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3718      	adds	r7, #24
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	20005f68 	.word	0x20005f68

08011ca8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b088      	sub	sp, #32
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d070      	beq.n	8011d98 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f003 0303 	and.w	r3, r3, #3
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00d      	beq.n	8011cdc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011cc0:	4b37      	ldr	r3, [pc, #220]	; (8011da0 <mem_free+0xf8>)
 8011cc2:	f240 2273 	movw	r2, #627	; 0x273
 8011cc6:	4937      	ldr	r1, [pc, #220]	; (8011da4 <mem_free+0xfc>)
 8011cc8:	4837      	ldr	r0, [pc, #220]	; (8011da8 <mem_free+0x100>)
 8011cca:	f00d ff75 	bl	801fbb8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011cce:	f00c fe83 	bl	801e9d8 <sys_arch_protect>
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	68f8      	ldr	r0, [r7, #12]
 8011cd6:	f00c fe8d 	bl	801e9f4 <sys_arch_unprotect>
    return;
 8011cda:	e05e      	b.n	8011d9a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	3b08      	subs	r3, #8
 8011ce0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011ce2:	4b32      	ldr	r3, [pc, #200]	; (8011dac <mem_free+0x104>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	69fa      	ldr	r2, [r7, #28]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d306      	bcc.n	8011cfa <mem_free+0x52>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f103 020c 	add.w	r2, r3, #12
 8011cf2:	4b2f      	ldr	r3, [pc, #188]	; (8011db0 <mem_free+0x108>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d90d      	bls.n	8011d16 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011cfa:	4b29      	ldr	r3, [pc, #164]	; (8011da0 <mem_free+0xf8>)
 8011cfc:	f240 227f 	movw	r2, #639	; 0x27f
 8011d00:	492c      	ldr	r1, [pc, #176]	; (8011db4 <mem_free+0x10c>)
 8011d02:	4829      	ldr	r0, [pc, #164]	; (8011da8 <mem_free+0x100>)
 8011d04:	f00d ff58 	bl	801fbb8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011d08:	f00c fe66 	bl	801e9d8 <sys_arch_protect>
 8011d0c:	6138      	str	r0, [r7, #16]
 8011d0e:	6938      	ldr	r0, [r7, #16]
 8011d10:	f00c fe70 	bl	801e9f4 <sys_arch_unprotect>
    return;
 8011d14:	e041      	b.n	8011d9a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011d16:	4828      	ldr	r0, [pc, #160]	; (8011db8 <mem_free+0x110>)
 8011d18:	f00c fe22 	bl	801e960 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	791b      	ldrb	r3, [r3, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d110      	bne.n	8011d46 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011d24:	4b1e      	ldr	r3, [pc, #120]	; (8011da0 <mem_free+0xf8>)
 8011d26:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011d2a:	4924      	ldr	r1, [pc, #144]	; (8011dbc <mem_free+0x114>)
 8011d2c:	481e      	ldr	r0, [pc, #120]	; (8011da8 <mem_free+0x100>)
 8011d2e:	f00d ff43 	bl	801fbb8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011d32:	4821      	ldr	r0, [pc, #132]	; (8011db8 <mem_free+0x110>)
 8011d34:	f00c fe23 	bl	801e97e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011d38:	f00c fe4e 	bl	801e9d8 <sys_arch_protect>
 8011d3c:	6178      	str	r0, [r7, #20]
 8011d3e:	6978      	ldr	r0, [r7, #20]
 8011d40:	f00c fe58 	bl	801e9f4 <sys_arch_unprotect>
    return;
 8011d44:	e029      	b.n	8011d9a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011d46:	69f8      	ldr	r0, [r7, #28]
 8011d48:	f7ff ff72 	bl	8011c30 <mem_link_valid>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d110      	bne.n	8011d74 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011d52:	4b13      	ldr	r3, [pc, #76]	; (8011da0 <mem_free+0xf8>)
 8011d54:	f240 2295 	movw	r2, #661	; 0x295
 8011d58:	4919      	ldr	r1, [pc, #100]	; (8011dc0 <mem_free+0x118>)
 8011d5a:	4813      	ldr	r0, [pc, #76]	; (8011da8 <mem_free+0x100>)
 8011d5c:	f00d ff2c 	bl	801fbb8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011d60:	4815      	ldr	r0, [pc, #84]	; (8011db8 <mem_free+0x110>)
 8011d62:	f00c fe0c 	bl	801e97e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011d66:	f00c fe37 	bl	801e9d8 <sys_arch_protect>
 8011d6a:	61b8      	str	r0, [r7, #24]
 8011d6c:	69b8      	ldr	r0, [r7, #24]
 8011d6e:	f00c fe41 	bl	801e9f4 <sys_arch_unprotect>
    return;
 8011d72:	e012      	b.n	8011d9a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	2200      	movs	r2, #0
 8011d78:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011d7a:	4b12      	ldr	r3, [pc, #72]	; (8011dc4 <mem_free+0x11c>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	69fa      	ldr	r2, [r7, #28]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d202      	bcs.n	8011d8a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011d84:	4a0f      	ldr	r2, [pc, #60]	; (8011dc4 <mem_free+0x11c>)
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011d8a:	69f8      	ldr	r0, [r7, #28]
 8011d8c:	f7ff fe5c 	bl	8011a48 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011d90:	4809      	ldr	r0, [pc, #36]	; (8011db8 <mem_free+0x110>)
 8011d92:	f00c fdf4 	bl	801e97e <sys_mutex_unlock>
 8011d96:	e000      	b.n	8011d9a <mem_free+0xf2>
    return;
 8011d98:	bf00      	nop
}
 8011d9a:	3720      	adds	r7, #32
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}
 8011da0:	08021a78 	.word	0x08021a78
 8011da4:	08021b68 	.word	0x08021b68
 8011da8:	08021ac0 	.word	0x08021ac0
 8011dac:	20005f64 	.word	0x20005f64
 8011db0:	20005f68 	.word	0x20005f68
 8011db4:	08021b8c 	.word	0x08021b8c
 8011db8:	20005f6c 	.word	0x20005f6c
 8011dbc:	08021ba8 	.word	0x08021ba8
 8011dc0:	08021bd0 	.word	0x08021bd0
 8011dc4:	20005f70 	.word	0x20005f70

08011dc8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b088      	sub	sp, #32
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011dd4:	887b      	ldrh	r3, [r7, #2]
 8011dd6:	3303      	adds	r3, #3
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	f023 0303 	bic.w	r3, r3, #3
 8011dde:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011de0:	8bfb      	ldrh	r3, [r7, #30]
 8011de2:	2b0b      	cmp	r3, #11
 8011de4:	d801      	bhi.n	8011dea <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011de6:	230c      	movs	r3, #12
 8011de8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011dea:	8bfb      	ldrh	r3, [r7, #30]
 8011dec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011df0:	d803      	bhi.n	8011dfa <mem_trim+0x32>
 8011df2:	8bfa      	ldrh	r2, [r7, #30]
 8011df4:	887b      	ldrh	r3, [r7, #2]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d201      	bcs.n	8011dfe <mem_trim+0x36>
    return NULL;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	e0d8      	b.n	8011fb0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011dfe:	4b6e      	ldr	r3, [pc, #440]	; (8011fb8 <mem_trim+0x1f0>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d304      	bcc.n	8011e12 <mem_trim+0x4a>
 8011e08:	4b6c      	ldr	r3, [pc, #432]	; (8011fbc <mem_trim+0x1f4>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	687a      	ldr	r2, [r7, #4]
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d306      	bcc.n	8011e20 <mem_trim+0x58>
 8011e12:	4b6b      	ldr	r3, [pc, #428]	; (8011fc0 <mem_trim+0x1f8>)
 8011e14:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011e18:	496a      	ldr	r1, [pc, #424]	; (8011fc4 <mem_trim+0x1fc>)
 8011e1a:	486b      	ldr	r0, [pc, #428]	; (8011fc8 <mem_trim+0x200>)
 8011e1c:	f00d fecc 	bl	801fbb8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011e20:	4b65      	ldr	r3, [pc, #404]	; (8011fb8 <mem_trim+0x1f0>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	687a      	ldr	r2, [r7, #4]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d304      	bcc.n	8011e34 <mem_trim+0x6c>
 8011e2a:	4b64      	ldr	r3, [pc, #400]	; (8011fbc <mem_trim+0x1f4>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d307      	bcc.n	8011e44 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011e34:	f00c fdd0 	bl	801e9d8 <sys_arch_protect>
 8011e38:	60b8      	str	r0, [r7, #8]
 8011e3a:	68b8      	ldr	r0, [r7, #8]
 8011e3c:	f00c fdda 	bl	801e9f4 <sys_arch_unprotect>
    return rmem;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	e0b5      	b.n	8011fb0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	3b08      	subs	r3, #8
 8011e48:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011e4a:	69b8      	ldr	r0, [r7, #24]
 8011e4c:	f7ff fdea 	bl	8011a24 <mem_to_ptr>
 8011e50:	4603      	mov	r3, r0
 8011e52:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	881a      	ldrh	r2, [r3, #0]
 8011e58:	8afb      	ldrh	r3, [r7, #22]
 8011e5a:	1ad3      	subs	r3, r2, r3
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	3b08      	subs	r3, #8
 8011e60:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011e62:	8bfa      	ldrh	r2, [r7, #30]
 8011e64:	8abb      	ldrh	r3, [r7, #20]
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d906      	bls.n	8011e78 <mem_trim+0xb0>
 8011e6a:	4b55      	ldr	r3, [pc, #340]	; (8011fc0 <mem_trim+0x1f8>)
 8011e6c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011e70:	4956      	ldr	r1, [pc, #344]	; (8011fcc <mem_trim+0x204>)
 8011e72:	4855      	ldr	r0, [pc, #340]	; (8011fc8 <mem_trim+0x200>)
 8011e74:	f00d fea0 	bl	801fbb8 <iprintf>
  if (newsize > size) {
 8011e78:	8bfa      	ldrh	r2, [r7, #30]
 8011e7a:	8abb      	ldrh	r3, [r7, #20]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d901      	bls.n	8011e84 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011e80:	2300      	movs	r3, #0
 8011e82:	e095      	b.n	8011fb0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011e84:	8bfa      	ldrh	r2, [r7, #30]
 8011e86:	8abb      	ldrh	r3, [r7, #20]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d101      	bne.n	8011e90 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	e08f      	b.n	8011fb0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011e90:	484f      	ldr	r0, [pc, #316]	; (8011fd0 <mem_trim+0x208>)
 8011e92:	f00c fd65 	bl	801e960 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	881b      	ldrh	r3, [r3, #0]
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7ff fdb0 	bl	8011a00 <ptr_to_mem>
 8011ea0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	791b      	ldrb	r3, [r3, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d13f      	bne.n	8011f2a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011eaa:	69bb      	ldr	r3, [r7, #24]
 8011eac:	881b      	ldrh	r3, [r3, #0]
 8011eae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011eb2:	d106      	bne.n	8011ec2 <mem_trim+0xfa>
 8011eb4:	4b42      	ldr	r3, [pc, #264]	; (8011fc0 <mem_trim+0x1f8>)
 8011eb6:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011eba:	4946      	ldr	r1, [pc, #280]	; (8011fd4 <mem_trim+0x20c>)
 8011ebc:	4842      	ldr	r0, [pc, #264]	; (8011fc8 <mem_trim+0x200>)
 8011ebe:	f00d fe7b 	bl	801fbb8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	881b      	ldrh	r3, [r3, #0]
 8011ec6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011ec8:	8afa      	ldrh	r2, [r7, #22]
 8011eca:	8bfb      	ldrh	r3, [r7, #30]
 8011ecc:	4413      	add	r3, r2
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	3308      	adds	r3, #8
 8011ed2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011ed4:	4b40      	ldr	r3, [pc, #256]	; (8011fd8 <mem_trim+0x210>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	693a      	ldr	r2, [r7, #16]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d106      	bne.n	8011eec <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011ede:	89fb      	ldrh	r3, [r7, #14]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7ff fd8d 	bl	8011a00 <ptr_to_mem>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	4a3b      	ldr	r2, [pc, #236]	; (8011fd8 <mem_trim+0x210>)
 8011eea:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011eec:	89fb      	ldrh	r3, [r7, #14]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7ff fd86 	bl	8011a00 <ptr_to_mem>
 8011ef4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	89ba      	ldrh	r2, [r7, #12]
 8011f00:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	8afa      	ldrh	r2, [r7, #22]
 8011f06:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	89fa      	ldrh	r2, [r7, #14]
 8011f0c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	881b      	ldrh	r3, [r3, #0]
 8011f12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011f16:	d047      	beq.n	8011fa8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	881b      	ldrh	r3, [r3, #0]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7ff fd6f 	bl	8011a00 <ptr_to_mem>
 8011f22:	4602      	mov	r2, r0
 8011f24:	89fb      	ldrh	r3, [r7, #14]
 8011f26:	8053      	strh	r3, [r2, #2]
 8011f28:	e03e      	b.n	8011fa8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011f2a:	8bfb      	ldrh	r3, [r7, #30]
 8011f2c:	f103 0214 	add.w	r2, r3, #20
 8011f30:	8abb      	ldrh	r3, [r7, #20]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d838      	bhi.n	8011fa8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011f36:	8afa      	ldrh	r2, [r7, #22]
 8011f38:	8bfb      	ldrh	r3, [r7, #30]
 8011f3a:	4413      	add	r3, r2
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	3308      	adds	r3, #8
 8011f40:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011f42:	69bb      	ldr	r3, [r7, #24]
 8011f44:	881b      	ldrh	r3, [r3, #0]
 8011f46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011f4a:	d106      	bne.n	8011f5a <mem_trim+0x192>
 8011f4c:	4b1c      	ldr	r3, [pc, #112]	; (8011fc0 <mem_trim+0x1f8>)
 8011f4e:	f240 3216 	movw	r2, #790	; 0x316
 8011f52:	4920      	ldr	r1, [pc, #128]	; (8011fd4 <mem_trim+0x20c>)
 8011f54:	481c      	ldr	r0, [pc, #112]	; (8011fc8 <mem_trim+0x200>)
 8011f56:	f00d fe2f 	bl	801fbb8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011f5a:	89fb      	ldrh	r3, [r7, #14]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7ff fd4f 	bl	8011a00 <ptr_to_mem>
 8011f62:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011f64:	4b1c      	ldr	r3, [pc, #112]	; (8011fd8 <mem_trim+0x210>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	693a      	ldr	r2, [r7, #16]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d202      	bcs.n	8011f74 <mem_trim+0x1ac>
      lfree = mem2;
 8011f6e:	4a1a      	ldr	r2, [pc, #104]	; (8011fd8 <mem_trim+0x210>)
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	2200      	movs	r2, #0
 8011f78:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011f7a:	69bb      	ldr	r3, [r7, #24]
 8011f7c:	881a      	ldrh	r2, [r3, #0]
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	8afa      	ldrh	r2, [r7, #22]
 8011f86:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011f88:	69bb      	ldr	r3, [r7, #24]
 8011f8a:	89fa      	ldrh	r2, [r7, #14]
 8011f8c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	881b      	ldrh	r3, [r3, #0]
 8011f92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011f96:	d007      	beq.n	8011fa8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	881b      	ldrh	r3, [r3, #0]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7ff fd2f 	bl	8011a00 <ptr_to_mem>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	89fb      	ldrh	r3, [r7, #14]
 8011fa6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011fa8:	4809      	ldr	r0, [pc, #36]	; (8011fd0 <mem_trim+0x208>)
 8011faa:	f00c fce8 	bl	801e97e <sys_mutex_unlock>
  return rmem;
 8011fae:	687b      	ldr	r3, [r7, #4]
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3720      	adds	r7, #32
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	20005f64 	.word	0x20005f64
 8011fbc:	20005f68 	.word	0x20005f68
 8011fc0:	08021a78 	.word	0x08021a78
 8011fc4:	08021c04 	.word	0x08021c04
 8011fc8:	08021ac0 	.word	0x08021ac0
 8011fcc:	08021c1c 	.word	0x08021c1c
 8011fd0:	20005f6c 	.word	0x20005f6c
 8011fd4:	08021c3c 	.word	0x08021c3c
 8011fd8:	20005f70 	.word	0x20005f70

08011fdc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b088      	sub	sp, #32
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011fe6:	88fb      	ldrh	r3, [r7, #6]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d101      	bne.n	8011ff0 <mem_malloc+0x14>
    return NULL;
 8011fec:	2300      	movs	r3, #0
 8011fee:	e0e2      	b.n	80121b6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011ff0:	88fb      	ldrh	r3, [r7, #6]
 8011ff2:	3303      	adds	r3, #3
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	f023 0303 	bic.w	r3, r3, #3
 8011ffa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011ffc:	8bbb      	ldrh	r3, [r7, #28]
 8011ffe:	2b0b      	cmp	r3, #11
 8012000:	d801      	bhi.n	8012006 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012002:	230c      	movs	r3, #12
 8012004:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012006:	8bbb      	ldrh	r3, [r7, #28]
 8012008:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801200c:	d803      	bhi.n	8012016 <mem_malloc+0x3a>
 801200e:	8bba      	ldrh	r2, [r7, #28]
 8012010:	88fb      	ldrh	r3, [r7, #6]
 8012012:	429a      	cmp	r2, r3
 8012014:	d201      	bcs.n	801201a <mem_malloc+0x3e>
    return NULL;
 8012016:	2300      	movs	r3, #0
 8012018:	e0cd      	b.n	80121b6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801201a:	4869      	ldr	r0, [pc, #420]	; (80121c0 <mem_malloc+0x1e4>)
 801201c:	f00c fca0 	bl	801e960 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012020:	4b68      	ldr	r3, [pc, #416]	; (80121c4 <mem_malloc+0x1e8>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	4618      	mov	r0, r3
 8012026:	f7ff fcfd 	bl	8011a24 <mem_to_ptr>
 801202a:	4603      	mov	r3, r0
 801202c:	83fb      	strh	r3, [r7, #30]
 801202e:	e0b7      	b.n	80121a0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012030:	8bfb      	ldrh	r3, [r7, #30]
 8012032:	4618      	mov	r0, r3
 8012034:	f7ff fce4 	bl	8011a00 <ptr_to_mem>
 8012038:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	791b      	ldrb	r3, [r3, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	f040 80a7 	bne.w	8012192 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	881b      	ldrh	r3, [r3, #0]
 8012048:	461a      	mov	r2, r3
 801204a:	8bfb      	ldrh	r3, [r7, #30]
 801204c:	1ad3      	subs	r3, r2, r3
 801204e:	f1a3 0208 	sub.w	r2, r3, #8
 8012052:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012054:	429a      	cmp	r2, r3
 8012056:	f0c0 809c 	bcc.w	8012192 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	881b      	ldrh	r3, [r3, #0]
 801205e:	461a      	mov	r2, r3
 8012060:	8bfb      	ldrh	r3, [r7, #30]
 8012062:	1ad3      	subs	r3, r2, r3
 8012064:	f1a3 0208 	sub.w	r2, r3, #8
 8012068:	8bbb      	ldrh	r3, [r7, #28]
 801206a:	3314      	adds	r3, #20
 801206c:	429a      	cmp	r2, r3
 801206e:	d333      	bcc.n	80120d8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012070:	8bfa      	ldrh	r2, [r7, #30]
 8012072:	8bbb      	ldrh	r3, [r7, #28]
 8012074:	4413      	add	r3, r2
 8012076:	b29b      	uxth	r3, r3
 8012078:	3308      	adds	r3, #8
 801207a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801207c:	8a7b      	ldrh	r3, [r7, #18]
 801207e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012082:	d106      	bne.n	8012092 <mem_malloc+0xb6>
 8012084:	4b50      	ldr	r3, [pc, #320]	; (80121c8 <mem_malloc+0x1ec>)
 8012086:	f240 3287 	movw	r2, #903	; 0x387
 801208a:	4950      	ldr	r1, [pc, #320]	; (80121cc <mem_malloc+0x1f0>)
 801208c:	4850      	ldr	r0, [pc, #320]	; (80121d0 <mem_malloc+0x1f4>)
 801208e:	f00d fd93 	bl	801fbb8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012092:	8a7b      	ldrh	r3, [r7, #18]
 8012094:	4618      	mov	r0, r3
 8012096:	f7ff fcb3 	bl	8011a00 <ptr_to_mem>
 801209a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2200      	movs	r2, #0
 80120a0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	881a      	ldrh	r2, [r3, #0]
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	8bfa      	ldrh	r2, [r7, #30]
 80120ae:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	8a7a      	ldrh	r2, [r7, #18]
 80120b4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	2201      	movs	r2, #1
 80120ba:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	881b      	ldrh	r3, [r3, #0]
 80120c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80120c4:	d00b      	beq.n	80120de <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	881b      	ldrh	r3, [r3, #0]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7ff fc98 	bl	8011a00 <ptr_to_mem>
 80120d0:	4602      	mov	r2, r0
 80120d2:	8a7b      	ldrh	r3, [r7, #18]
 80120d4:	8053      	strh	r3, [r2, #2]
 80120d6:	e002      	b.n	80120de <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	2201      	movs	r2, #1
 80120dc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80120de:	4b39      	ldr	r3, [pc, #228]	; (80121c4 <mem_malloc+0x1e8>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	697a      	ldr	r2, [r7, #20]
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d127      	bne.n	8012138 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80120e8:	4b36      	ldr	r3, [pc, #216]	; (80121c4 <mem_malloc+0x1e8>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80120ee:	e005      	b.n	80120fc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80120f0:	69bb      	ldr	r3, [r7, #24]
 80120f2:	881b      	ldrh	r3, [r3, #0]
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7ff fc83 	bl	8011a00 <ptr_to_mem>
 80120fa:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80120fc:	69bb      	ldr	r3, [r7, #24]
 80120fe:	791b      	ldrb	r3, [r3, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d004      	beq.n	801210e <mem_malloc+0x132>
 8012104:	4b33      	ldr	r3, [pc, #204]	; (80121d4 <mem_malloc+0x1f8>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	69ba      	ldr	r2, [r7, #24]
 801210a:	429a      	cmp	r2, r3
 801210c:	d1f0      	bne.n	80120f0 <mem_malloc+0x114>
          }
          lfree = cur;
 801210e:	4a2d      	ldr	r2, [pc, #180]	; (80121c4 <mem_malloc+0x1e8>)
 8012110:	69bb      	ldr	r3, [r7, #24]
 8012112:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012114:	4b2b      	ldr	r3, [pc, #172]	; (80121c4 <mem_malloc+0x1e8>)
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	4b2e      	ldr	r3, [pc, #184]	; (80121d4 <mem_malloc+0x1f8>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	429a      	cmp	r2, r3
 801211e:	d00b      	beq.n	8012138 <mem_malloc+0x15c>
 8012120:	4b28      	ldr	r3, [pc, #160]	; (80121c4 <mem_malloc+0x1e8>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	791b      	ldrb	r3, [r3, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d006      	beq.n	8012138 <mem_malloc+0x15c>
 801212a:	4b27      	ldr	r3, [pc, #156]	; (80121c8 <mem_malloc+0x1ec>)
 801212c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8012130:	4929      	ldr	r1, [pc, #164]	; (80121d8 <mem_malloc+0x1fc>)
 8012132:	4827      	ldr	r0, [pc, #156]	; (80121d0 <mem_malloc+0x1f4>)
 8012134:	f00d fd40 	bl	801fbb8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012138:	4821      	ldr	r0, [pc, #132]	; (80121c0 <mem_malloc+0x1e4>)
 801213a:	f00c fc20 	bl	801e97e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801213e:	8bba      	ldrh	r2, [r7, #28]
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	4413      	add	r3, r2
 8012144:	3308      	adds	r3, #8
 8012146:	4a23      	ldr	r2, [pc, #140]	; (80121d4 <mem_malloc+0x1f8>)
 8012148:	6812      	ldr	r2, [r2, #0]
 801214a:	4293      	cmp	r3, r2
 801214c:	d906      	bls.n	801215c <mem_malloc+0x180>
 801214e:	4b1e      	ldr	r3, [pc, #120]	; (80121c8 <mem_malloc+0x1ec>)
 8012150:	f240 32b9 	movw	r2, #953	; 0x3b9
 8012154:	4921      	ldr	r1, [pc, #132]	; (80121dc <mem_malloc+0x200>)
 8012156:	481e      	ldr	r0, [pc, #120]	; (80121d0 <mem_malloc+0x1f4>)
 8012158:	f00d fd2e 	bl	801fbb8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	f003 0303 	and.w	r3, r3, #3
 8012162:	2b00      	cmp	r3, #0
 8012164:	d006      	beq.n	8012174 <mem_malloc+0x198>
 8012166:	4b18      	ldr	r3, [pc, #96]	; (80121c8 <mem_malloc+0x1ec>)
 8012168:	f240 32bb 	movw	r2, #955	; 0x3bb
 801216c:	491c      	ldr	r1, [pc, #112]	; (80121e0 <mem_malloc+0x204>)
 801216e:	4818      	ldr	r0, [pc, #96]	; (80121d0 <mem_malloc+0x1f4>)
 8012170:	f00d fd22 	bl	801fbb8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	f003 0303 	and.w	r3, r3, #3
 801217a:	2b00      	cmp	r3, #0
 801217c:	d006      	beq.n	801218c <mem_malloc+0x1b0>
 801217e:	4b12      	ldr	r3, [pc, #72]	; (80121c8 <mem_malloc+0x1ec>)
 8012180:	f240 32bd 	movw	r2, #957	; 0x3bd
 8012184:	4917      	ldr	r1, [pc, #92]	; (80121e4 <mem_malloc+0x208>)
 8012186:	4812      	ldr	r0, [pc, #72]	; (80121d0 <mem_malloc+0x1f4>)
 8012188:	f00d fd16 	bl	801fbb8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	3308      	adds	r3, #8
 8012190:	e011      	b.n	80121b6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8012192:	8bfb      	ldrh	r3, [r7, #30]
 8012194:	4618      	mov	r0, r3
 8012196:	f7ff fc33 	bl	8011a00 <ptr_to_mem>
 801219a:	4603      	mov	r3, r0
 801219c:	881b      	ldrh	r3, [r3, #0]
 801219e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80121a0:	8bfa      	ldrh	r2, [r7, #30]
 80121a2:	8bbb      	ldrh	r3, [r7, #28]
 80121a4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80121a8:	429a      	cmp	r2, r3
 80121aa:	f4ff af41 	bcc.w	8012030 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80121ae:	4804      	ldr	r0, [pc, #16]	; (80121c0 <mem_malloc+0x1e4>)
 80121b0:	f00c fbe5 	bl	801e97e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80121b4:	2300      	movs	r3, #0
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3720      	adds	r7, #32
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	20005f6c 	.word	0x20005f6c
 80121c4:	20005f70 	.word	0x20005f70
 80121c8:	08021a78 	.word	0x08021a78
 80121cc:	08021c3c 	.word	0x08021c3c
 80121d0:	08021ac0 	.word	0x08021ac0
 80121d4:	20005f68 	.word	0x20005f68
 80121d8:	08021c50 	.word	0x08021c50
 80121dc:	08021c6c 	.word	0x08021c6c
 80121e0:	08021c9c 	.word	0x08021c9c
 80121e4:	08021ccc 	.word	0x08021ccc

080121e8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80121e8:	b480      	push	{r7}
 80121ea:	b085      	sub	sp, #20
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	689b      	ldr	r3, [r3, #8]
 80121f4:	2200      	movs	r2, #0
 80121f6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	3303      	adds	r3, #3
 80121fe:	f023 0303 	bic.w	r3, r3, #3
 8012202:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012204:	2300      	movs	r3, #0
 8012206:	60fb      	str	r3, [r7, #12]
 8012208:	e011      	b.n	801222e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	689b      	ldr	r3, [r3, #8]
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	689b      	ldr	r3, [r3, #8]
 8012218:	68ba      	ldr	r2, [r7, #8]
 801221a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	881b      	ldrh	r3, [r3, #0]
 8012220:	461a      	mov	r2, r3
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	4413      	add	r3, r2
 8012226:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	3301      	adds	r3, #1
 801222c:	60fb      	str	r3, [r7, #12]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	885b      	ldrh	r3, [r3, #2]
 8012232:	461a      	mov	r2, r3
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	4293      	cmp	r3, r2
 8012238:	dbe7      	blt.n	801220a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801223a:	bf00      	nop
 801223c:	bf00      	nop
 801223e:	3714      	adds	r7, #20
 8012240:	46bd      	mov	sp, r7
 8012242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012246:	4770      	bx	lr

08012248 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801224e:	2300      	movs	r3, #0
 8012250:	80fb      	strh	r3, [r7, #6]
 8012252:	e009      	b.n	8012268 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012254:	88fb      	ldrh	r3, [r7, #6]
 8012256:	4a08      	ldr	r2, [pc, #32]	; (8012278 <memp_init+0x30>)
 8012258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801225c:	4618      	mov	r0, r3
 801225e:	f7ff ffc3 	bl	80121e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012262:	88fb      	ldrh	r3, [r7, #6]
 8012264:	3301      	adds	r3, #1
 8012266:	80fb      	strh	r3, [r7, #6]
 8012268:	88fb      	ldrh	r3, [r7, #6]
 801226a:	2b0c      	cmp	r3, #12
 801226c:	d9f2      	bls.n	8012254 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801226e:	bf00      	nop
 8012270:	bf00      	nop
 8012272:	3708      	adds	r7, #8
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	080249c4 	.word	0x080249c4

0801227c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012284:	f00c fba8 	bl	801e9d8 <sys_arch_protect>
 8012288:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	689b      	ldr	r3, [r3, #8]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d015      	beq.n	80122c4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	689b      	ldr	r3, [r3, #8]
 801229c:	68ba      	ldr	r2, [r7, #8]
 801229e:	6812      	ldr	r2, [r2, #0]
 80122a0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	f003 0303 	and.w	r3, r3, #3
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d006      	beq.n	80122ba <do_memp_malloc_pool+0x3e>
 80122ac:	4b09      	ldr	r3, [pc, #36]	; (80122d4 <do_memp_malloc_pool+0x58>)
 80122ae:	f44f 728c 	mov.w	r2, #280	; 0x118
 80122b2:	4909      	ldr	r1, [pc, #36]	; (80122d8 <do_memp_malloc_pool+0x5c>)
 80122b4:	4809      	ldr	r0, [pc, #36]	; (80122dc <do_memp_malloc_pool+0x60>)
 80122b6:	f00d fc7f 	bl	801fbb8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	f00c fb9a 	bl	801e9f4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	e003      	b.n	80122cc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f00c fb95 	bl	801e9f4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80122ca:	2300      	movs	r3, #0
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3710      	adds	r7, #16
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	08021cf0 	.word	0x08021cf0
 80122d8:	08021d20 	.word	0x08021d20
 80122dc:	08021d44 	.word	0x08021d44

080122e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	4603      	mov	r3, r0
 80122e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80122ea:	79fb      	ldrb	r3, [r7, #7]
 80122ec:	2b0c      	cmp	r3, #12
 80122ee:	d908      	bls.n	8012302 <memp_malloc+0x22>
 80122f0:	4b0a      	ldr	r3, [pc, #40]	; (801231c <memp_malloc+0x3c>)
 80122f2:	f240 1257 	movw	r2, #343	; 0x157
 80122f6:	490a      	ldr	r1, [pc, #40]	; (8012320 <memp_malloc+0x40>)
 80122f8:	480a      	ldr	r0, [pc, #40]	; (8012324 <memp_malloc+0x44>)
 80122fa:	f00d fc5d 	bl	801fbb8 <iprintf>
 80122fe:	2300      	movs	r3, #0
 8012300:	e008      	b.n	8012314 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012302:	79fb      	ldrb	r3, [r7, #7]
 8012304:	4a08      	ldr	r2, [pc, #32]	; (8012328 <memp_malloc+0x48>)
 8012306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801230a:	4618      	mov	r0, r3
 801230c:	f7ff ffb6 	bl	801227c <do_memp_malloc_pool>
 8012310:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012312:	68fb      	ldr	r3, [r7, #12]
}
 8012314:	4618      	mov	r0, r3
 8012316:	3710      	adds	r7, #16
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}
 801231c:	08021cf0 	.word	0x08021cf0
 8012320:	08021d80 	.word	0x08021d80
 8012324:	08021d44 	.word	0x08021d44
 8012328:	080249c4 	.word	0x080249c4

0801232c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	f003 0303 	and.w	r3, r3, #3
 801233c:	2b00      	cmp	r3, #0
 801233e:	d006      	beq.n	801234e <do_memp_free_pool+0x22>
 8012340:	4b0d      	ldr	r3, [pc, #52]	; (8012378 <do_memp_free_pool+0x4c>)
 8012342:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8012346:	490d      	ldr	r1, [pc, #52]	; (801237c <do_memp_free_pool+0x50>)
 8012348:	480d      	ldr	r0, [pc, #52]	; (8012380 <do_memp_free_pool+0x54>)
 801234a:	f00d fc35 	bl	801fbb8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012352:	f00c fb41 	bl	801e9d8 <sys_arch_protect>
 8012356:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	689b      	ldr	r3, [r3, #8]
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801236a:	68b8      	ldr	r0, [r7, #8]
 801236c:	f00c fb42 	bl	801e9f4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012370:	bf00      	nop
 8012372:	3710      	adds	r7, #16
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}
 8012378:	08021cf0 	.word	0x08021cf0
 801237c:	08021da0 	.word	0x08021da0
 8012380:	08021d44 	.word	0x08021d44

08012384 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	4603      	mov	r3, r0
 801238c:	6039      	str	r1, [r7, #0]
 801238e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012390:	79fb      	ldrb	r3, [r7, #7]
 8012392:	2b0c      	cmp	r3, #12
 8012394:	d907      	bls.n	80123a6 <memp_free+0x22>
 8012396:	4b0c      	ldr	r3, [pc, #48]	; (80123c8 <memp_free+0x44>)
 8012398:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801239c:	490b      	ldr	r1, [pc, #44]	; (80123cc <memp_free+0x48>)
 801239e:	480c      	ldr	r0, [pc, #48]	; (80123d0 <memp_free+0x4c>)
 80123a0:	f00d fc0a 	bl	801fbb8 <iprintf>
 80123a4:	e00c      	b.n	80123c0 <memp_free+0x3c>

  if (mem == NULL) {
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d008      	beq.n	80123be <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80123ac:	79fb      	ldrb	r3, [r7, #7]
 80123ae:	4a09      	ldr	r2, [pc, #36]	; (80123d4 <memp_free+0x50>)
 80123b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123b4:	6839      	ldr	r1, [r7, #0]
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7ff ffb8 	bl	801232c <do_memp_free_pool>
 80123bc:	e000      	b.n	80123c0 <memp_free+0x3c>
    return;
 80123be:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80123c0:	3708      	adds	r7, #8
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	08021cf0 	.word	0x08021cf0
 80123cc:	08021dc0 	.word	0x08021dc0
 80123d0:	08021d44 	.word	0x08021d44
 80123d4:	080249c4 	.word	0x080249c4

080123d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80123d8:	b480      	push	{r7}
 80123da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80123dc:	bf00      	nop
 80123de:	46bd      	mov	sp, r7
 80123e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e4:	4770      	bx	lr
	...

080123e8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b086      	sub	sp, #24
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	60f8      	str	r0, [r7, #12]
 80123f0:	60b9      	str	r1, [r7, #8]
 80123f2:	607a      	str	r2, [r7, #4]
 80123f4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d108      	bne.n	801240e <netif_add+0x26>
 80123fc:	4b5b      	ldr	r3, [pc, #364]	; (801256c <netif_add+0x184>)
 80123fe:	f240 1227 	movw	r2, #295	; 0x127
 8012402:	495b      	ldr	r1, [pc, #364]	; (8012570 <netif_add+0x188>)
 8012404:	485b      	ldr	r0, [pc, #364]	; (8012574 <netif_add+0x18c>)
 8012406:	f00d fbd7 	bl	801fbb8 <iprintf>
 801240a:	2300      	movs	r3, #0
 801240c:	e0a9      	b.n	8012562 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012410:	2b00      	cmp	r3, #0
 8012412:	d108      	bne.n	8012426 <netif_add+0x3e>
 8012414:	4b55      	ldr	r3, [pc, #340]	; (801256c <netif_add+0x184>)
 8012416:	f44f 7294 	mov.w	r2, #296	; 0x128
 801241a:	4957      	ldr	r1, [pc, #348]	; (8012578 <netif_add+0x190>)
 801241c:	4855      	ldr	r0, [pc, #340]	; (8012574 <netif_add+0x18c>)
 801241e:	f00d fbcb 	bl	801fbb8 <iprintf>
 8012422:	2300      	movs	r3, #0
 8012424:	e09d      	b.n	8012562 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d101      	bne.n	8012430 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801242c:	4b53      	ldr	r3, [pc, #332]	; (801257c <netif_add+0x194>)
 801242e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d101      	bne.n	801243a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012436:	4b51      	ldr	r3, [pc, #324]	; (801257c <netif_add+0x194>)
 8012438:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d101      	bne.n	8012444 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012440:	4b4e      	ldr	r3, [pc, #312]	; (801257c <netif_add+0x194>)
 8012442:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	2200      	movs	r2, #0
 8012448:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	2200      	movs	r2, #0
 801244e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2200      	movs	r2, #0
 8012454:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	4a49      	ldr	r2, [pc, #292]	; (8012580 <netif_add+0x198>)
 801245a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2200      	movs	r2, #0
 8012460:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2200      	movs	r2, #0
 8012466:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	3324      	adds	r3, #36	; 0x24
 801246e:	2204      	movs	r2, #4
 8012470:	2100      	movs	r1, #0
 8012472:	4618      	mov	r0, r3
 8012474:	f00d fb3d 	bl	801faf2 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	2200      	movs	r2, #0
 801247c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	6a3a      	ldr	r2, [r7, #32]
 8012482:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012484:	4b3f      	ldr	r3, [pc, #252]	; (8012584 <netif_add+0x19c>)
 8012486:	781a      	ldrb	r2, [r3, #0]
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012492:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	68b9      	ldr	r1, [r7, #8]
 801249a:	68f8      	ldr	r0, [r7, #12]
 801249c:	f000 f914 	bl	80126c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80124a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a2:	68f8      	ldr	r0, [r7, #12]
 80124a4:	4798      	blx	r3
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d001      	beq.n	80124b0 <netif_add+0xc8>
    return NULL;
 80124ac:	2300      	movs	r3, #0
 80124ae:	e058      	b.n	8012562 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80124b6:	2bff      	cmp	r3, #255	; 0xff
 80124b8:	d103      	bne.n	80124c2 <netif_add+0xda>
        netif->num = 0;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	2200      	movs	r2, #0
 80124be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80124c2:	2300      	movs	r3, #0
 80124c4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80124c6:	4b30      	ldr	r3, [pc, #192]	; (8012588 <netif_add+0x1a0>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	617b      	str	r3, [r7, #20]
 80124cc:	e02b      	b.n	8012526 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d106      	bne.n	80124e4 <netif_add+0xfc>
 80124d6:	4b25      	ldr	r3, [pc, #148]	; (801256c <netif_add+0x184>)
 80124d8:	f240 128b 	movw	r2, #395	; 0x18b
 80124dc:	492b      	ldr	r1, [pc, #172]	; (801258c <netif_add+0x1a4>)
 80124de:	4825      	ldr	r0, [pc, #148]	; (8012574 <netif_add+0x18c>)
 80124e0:	f00d fb6a 	bl	801fbb8 <iprintf>
        num_netifs++;
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	3301      	adds	r3, #1
 80124e8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	2bff      	cmp	r3, #255	; 0xff
 80124ee:	dd06      	ble.n	80124fe <netif_add+0x116>
 80124f0:	4b1e      	ldr	r3, [pc, #120]	; (801256c <netif_add+0x184>)
 80124f2:	f240 128d 	movw	r2, #397	; 0x18d
 80124f6:	4926      	ldr	r1, [pc, #152]	; (8012590 <netif_add+0x1a8>)
 80124f8:	481e      	ldr	r0, [pc, #120]	; (8012574 <netif_add+0x18c>)
 80124fa:	f00d fb5d 	bl	801fbb8 <iprintf>
        if (netif2->num == netif->num) {
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801250a:	429a      	cmp	r2, r3
 801250c:	d108      	bne.n	8012520 <netif_add+0x138>
          netif->num++;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012514:	3301      	adds	r3, #1
 8012516:	b2da      	uxtb	r2, r3
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801251e:	e005      	b.n	801252c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	617b      	str	r3, [r7, #20]
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d1d0      	bne.n	80124ce <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1be      	bne.n	80124b0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012538:	2bfe      	cmp	r3, #254	; 0xfe
 801253a:	d103      	bne.n	8012544 <netif_add+0x15c>
    netif_num = 0;
 801253c:	4b11      	ldr	r3, [pc, #68]	; (8012584 <netif_add+0x19c>)
 801253e:	2200      	movs	r2, #0
 8012540:	701a      	strb	r2, [r3, #0]
 8012542:	e006      	b.n	8012552 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801254a:	3301      	adds	r3, #1
 801254c:	b2da      	uxtb	r2, r3
 801254e:	4b0d      	ldr	r3, [pc, #52]	; (8012584 <netif_add+0x19c>)
 8012550:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012552:	4b0d      	ldr	r3, [pc, #52]	; (8012588 <netif_add+0x1a0>)
 8012554:	681a      	ldr	r2, [r3, #0]
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801255a:	4a0b      	ldr	r2, [pc, #44]	; (8012588 <netif_add+0x1a0>)
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012560:	68fb      	ldr	r3, [r7, #12]
}
 8012562:	4618      	mov	r0, r3
 8012564:	3718      	adds	r7, #24
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	08021ddc 	.word	0x08021ddc
 8012570:	08021e70 	.word	0x08021e70
 8012574:	08021e2c 	.word	0x08021e2c
 8012578:	08021e8c 	.word	0x08021e8c
 801257c:	08024a48 	.word	0x08024a48
 8012580:	080129ab 	.word	0x080129ab
 8012584:	20005fa8 	.word	0x20005fa8
 8012588:	2000e9e4 	.word	0x2000e9e4
 801258c:	08021eb0 	.word	0x08021eb0
 8012590:	08021ec4 	.word	0x08021ec4

08012594 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f002 fe63 	bl	801526c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80125a6:	6839      	ldr	r1, [r7, #0]
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f007 fed9 	bl	801a360 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80125ae:	bf00      	nop
 80125b0:	3708      	adds	r7, #8
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
	...

080125b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d106      	bne.n	80125d8 <netif_do_set_ipaddr+0x20>
 80125ca:	4b1d      	ldr	r3, [pc, #116]	; (8012640 <netif_do_set_ipaddr+0x88>)
 80125cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80125d0:	491c      	ldr	r1, [pc, #112]	; (8012644 <netif_do_set_ipaddr+0x8c>)
 80125d2:	481d      	ldr	r0, [pc, #116]	; (8012648 <netif_do_set_ipaddr+0x90>)
 80125d4:	f00d faf0 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d106      	bne.n	80125ec <netif_do_set_ipaddr+0x34>
 80125de:	4b18      	ldr	r3, [pc, #96]	; (8012640 <netif_do_set_ipaddr+0x88>)
 80125e0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80125e4:	4917      	ldr	r1, [pc, #92]	; (8012644 <netif_do_set_ipaddr+0x8c>)
 80125e6:	4818      	ldr	r0, [pc, #96]	; (8012648 <netif_do_set_ipaddr+0x90>)
 80125e8:	f00d fae6 	bl	801fbb8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	3304      	adds	r3, #4
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d01c      	beq.n	8012634 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	3304      	adds	r3, #4
 8012604:	681a      	ldr	r2, [r3, #0]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801260a:	f107 0314 	add.w	r3, r7, #20
 801260e:	4619      	mov	r1, r3
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f7ff ffbf 	bl	8012594 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d002      	beq.n	8012622 <netif_do_set_ipaddr+0x6a>
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	e000      	b.n	8012624 <netif_do_set_ipaddr+0x6c>
 8012622:	2300      	movs	r3, #0
 8012624:	68fa      	ldr	r2, [r7, #12]
 8012626:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012628:	2101      	movs	r1, #1
 801262a:	68f8      	ldr	r0, [r7, #12]
 801262c:	f000 f8d2 	bl	80127d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012630:	2301      	movs	r3, #1
 8012632:	e000      	b.n	8012636 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012634:	2300      	movs	r3, #0
}
 8012636:	4618      	mov	r0, r3
 8012638:	3718      	adds	r7, #24
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	08021ddc 	.word	0x08021ddc
 8012644:	08021ef4 	.word	0x08021ef4
 8012648:	08021e2c 	.word	0x08021e2c

0801264c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801264c:	b480      	push	{r7}
 801264e:	b085      	sub	sp, #20
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	3308      	adds	r3, #8
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	429a      	cmp	r2, r3
 8012664:	d00a      	beq.n	801267c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d002      	beq.n	8012672 <netif_do_set_netmask+0x26>
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	e000      	b.n	8012674 <netif_do_set_netmask+0x28>
 8012672:	2300      	movs	r3, #0
 8012674:	68fa      	ldr	r2, [r7, #12]
 8012676:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012678:	2301      	movs	r3, #1
 801267a:	e000      	b.n	801267e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801267c:	2300      	movs	r3, #0
}
 801267e:	4618      	mov	r0, r3
 8012680:	3714      	adds	r7, #20
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr

0801268a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801268a:	b480      	push	{r7}
 801268c:	b085      	sub	sp, #20
 801268e:	af00      	add	r7, sp, #0
 8012690:	60f8      	str	r0, [r7, #12]
 8012692:	60b9      	str	r1, [r7, #8]
 8012694:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	330c      	adds	r3, #12
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d00a      	beq.n	80126ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d002      	beq.n	80126b0 <netif_do_set_gw+0x26>
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	e000      	b.n	80126b2 <netif_do_set_gw+0x28>
 80126b0:	2300      	movs	r3, #0
 80126b2:	68fa      	ldr	r2, [r7, #12]
 80126b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80126b6:	2301      	movs	r3, #1
 80126b8:	e000      	b.n	80126bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80126ba:	2300      	movs	r3, #0
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3714      	adds	r7, #20
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b088      	sub	sp, #32
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	607a      	str	r2, [r7, #4]
 80126d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80126d6:	2300      	movs	r3, #0
 80126d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80126da:	2300      	movs	r3, #0
 80126dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d101      	bne.n	80126e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80126e4:	4b1c      	ldr	r3, [pc, #112]	; (8012758 <netif_set_addr+0x90>)
 80126e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d101      	bne.n	80126f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80126ee:	4b1a      	ldr	r3, [pc, #104]	; (8012758 <netif_set_addr+0x90>)
 80126f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d101      	bne.n	80126fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80126f8:	4b17      	ldr	r3, [pc, #92]	; (8012758 <netif_set_addr+0x90>)
 80126fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d003      	beq.n	801270a <netif_set_addr+0x42>
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d101      	bne.n	801270e <netif_set_addr+0x46>
 801270a:	2301      	movs	r3, #1
 801270c:	e000      	b.n	8012710 <netif_set_addr+0x48>
 801270e:	2300      	movs	r3, #0
 8012710:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d006      	beq.n	8012726 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012718:	f107 0310 	add.w	r3, r7, #16
 801271c:	461a      	mov	r2, r3
 801271e:	68b9      	ldr	r1, [r7, #8]
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f7ff ff49 	bl	80125b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012726:	69fa      	ldr	r2, [r7, #28]
 8012728:	6879      	ldr	r1, [r7, #4]
 801272a:	68f8      	ldr	r0, [r7, #12]
 801272c:	f7ff ff8e 	bl	801264c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012730:	69ba      	ldr	r2, [r7, #24]
 8012732:	6839      	ldr	r1, [r7, #0]
 8012734:	68f8      	ldr	r0, [r7, #12]
 8012736:	f7ff ffa8 	bl	801268a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d106      	bne.n	801274e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012740:	f107 0310 	add.w	r3, r7, #16
 8012744:	461a      	mov	r2, r3
 8012746:	68b9      	ldr	r1, [r7, #8]
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f7ff ff35 	bl	80125b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801274e:	bf00      	nop
 8012750:	3720      	adds	r7, #32
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}
 8012756:	bf00      	nop
 8012758:	08024a48 	.word	0x08024a48

0801275c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012764:	4a04      	ldr	r2, [pc, #16]	; (8012778 <netif_set_default+0x1c>)
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801276a:	bf00      	nop
 801276c:	370c      	adds	r7, #12
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr
 8012776:	bf00      	nop
 8012778:	2000e9e8 	.word	0x2000e9e8

0801277c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d107      	bne.n	801279a <netif_set_up+0x1e>
 801278a:	4b0f      	ldr	r3, [pc, #60]	; (80127c8 <netif_set_up+0x4c>)
 801278c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8012790:	490e      	ldr	r1, [pc, #56]	; (80127cc <netif_set_up+0x50>)
 8012792:	480f      	ldr	r0, [pc, #60]	; (80127d0 <netif_set_up+0x54>)
 8012794:	f00d fa10 	bl	801fbb8 <iprintf>
 8012798:	e013      	b.n	80127c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127a0:	f003 0301 	and.w	r3, r3, #1
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d10c      	bne.n	80127c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127ae:	f043 0301 	orr.w	r3, r3, #1
 80127b2:	b2da      	uxtb	r2, r3
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80127ba:	2103      	movs	r1, #3
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 f809 	bl	80127d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}
 80127c8:	08021ddc 	.word	0x08021ddc
 80127cc:	08021f64 	.word	0x08021f64
 80127d0:	08021e2c 	.word	0x08021e2c

080127d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	460b      	mov	r3, r1
 80127de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d106      	bne.n	80127f4 <netif_issue_reports+0x20>
 80127e6:	4b18      	ldr	r3, [pc, #96]	; (8012848 <netif_issue_reports+0x74>)
 80127e8:	f240 326d 	movw	r2, #877	; 0x36d
 80127ec:	4917      	ldr	r1, [pc, #92]	; (801284c <netif_issue_reports+0x78>)
 80127ee:	4818      	ldr	r0, [pc, #96]	; (8012850 <netif_issue_reports+0x7c>)
 80127f0:	f00d f9e2 	bl	801fbb8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127fa:	f003 0304 	and.w	r3, r3, #4
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d01e      	beq.n	8012840 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012808:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801280c:	2b00      	cmp	r3, #0
 801280e:	d017      	beq.n	8012840 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012810:	78fb      	ldrb	r3, [r7, #3]
 8012812:	f003 0301 	and.w	r3, r3, #1
 8012816:	2b00      	cmp	r3, #0
 8012818:	d013      	beq.n	8012842 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	3304      	adds	r3, #4
 801281e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012820:	2b00      	cmp	r3, #0
 8012822:	d00e      	beq.n	8012842 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801282a:	f003 0308 	and.w	r3, r3, #8
 801282e:	2b00      	cmp	r3, #0
 8012830:	d007      	beq.n	8012842 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	3304      	adds	r3, #4
 8012836:	4619      	mov	r1, r3
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f00a fb91 	bl	801cf60 <etharp_request>
 801283e:	e000      	b.n	8012842 <netif_issue_reports+0x6e>
    return;
 8012840:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	08021ddc 	.word	0x08021ddc
 801284c:	08021f80 	.word	0x08021f80
 8012850:	08021e2c 	.word	0x08021e2c

08012854 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d107      	bne.n	8012872 <netif_set_down+0x1e>
 8012862:	4b12      	ldr	r3, [pc, #72]	; (80128ac <netif_set_down+0x58>)
 8012864:	f240 329b 	movw	r2, #923	; 0x39b
 8012868:	4911      	ldr	r1, [pc, #68]	; (80128b0 <netif_set_down+0x5c>)
 801286a:	4812      	ldr	r0, [pc, #72]	; (80128b4 <netif_set_down+0x60>)
 801286c:	f00d f9a4 	bl	801fbb8 <iprintf>
 8012870:	e019      	b.n	80128a6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012878:	f003 0301 	and.w	r3, r3, #1
 801287c:	2b00      	cmp	r3, #0
 801287e:	d012      	beq.n	80128a6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012886:	f023 0301 	bic.w	r3, r3, #1
 801288a:	b2da      	uxtb	r2, r3
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012898:	f003 0308 	and.w	r3, r3, #8
 801289c:	2b00      	cmp	r3, #0
 801289e:	d002      	beq.n	80128a6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f009 ff17 	bl	801c6d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80128a6:	3708      	adds	r7, #8
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	08021ddc 	.word	0x08021ddc
 80128b0:	08021fa4 	.word	0x08021fa4
 80128b4:	08021e2c 	.word	0x08021e2c

080128b8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d107      	bne.n	80128d6 <netif_set_link_up+0x1e>
 80128c6:	4b15      	ldr	r3, [pc, #84]	; (801291c <netif_set_link_up+0x64>)
 80128c8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80128cc:	4914      	ldr	r1, [pc, #80]	; (8012920 <netif_set_link_up+0x68>)
 80128ce:	4815      	ldr	r0, [pc, #84]	; (8012924 <netif_set_link_up+0x6c>)
 80128d0:	f00d f972 	bl	801fbb8 <iprintf>
 80128d4:	e01e      	b.n	8012914 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128dc:	f003 0304 	and.w	r3, r3, #4
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d117      	bne.n	8012914 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128ea:	f043 0304 	orr.w	r3, r3, #4
 80128ee:	b2da      	uxtb	r2, r3
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f008 f95c 	bl	801abb4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80128fc:	2103      	movs	r1, #3
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f7ff ff68 	bl	80127d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	69db      	ldr	r3, [r3, #28]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d003      	beq.n	8012914 <netif_set_link_up+0x5c>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	69db      	ldr	r3, [r3, #28]
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012914:	3708      	adds	r7, #8
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	08021ddc 	.word	0x08021ddc
 8012920:	08021fc4 	.word	0x08021fc4
 8012924:	08021e2c 	.word	0x08021e2c

08012928 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d107      	bne.n	8012946 <netif_set_link_down+0x1e>
 8012936:	4b11      	ldr	r3, [pc, #68]	; (801297c <netif_set_link_down+0x54>)
 8012938:	f240 4206 	movw	r2, #1030	; 0x406
 801293c:	4910      	ldr	r1, [pc, #64]	; (8012980 <netif_set_link_down+0x58>)
 801293e:	4811      	ldr	r0, [pc, #68]	; (8012984 <netif_set_link_down+0x5c>)
 8012940:	f00d f93a 	bl	801fbb8 <iprintf>
 8012944:	e017      	b.n	8012976 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801294c:	f003 0304 	and.w	r3, r3, #4
 8012950:	2b00      	cmp	r3, #0
 8012952:	d010      	beq.n	8012976 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801295a:	f023 0304 	bic.w	r3, r3, #4
 801295e:	b2da      	uxtb	r2, r3
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	69db      	ldr	r3, [r3, #28]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d003      	beq.n	8012976 <netif_set_link_down+0x4e>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	69db      	ldr	r3, [r3, #28]
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	08021ddc 	.word	0x08021ddc
 8012980:	08021fe8 	.word	0x08021fe8
 8012984:	08021e2c 	.word	0x08021e2c

08012988 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012988:	b480      	push	{r7}
 801298a:	b083      	sub	sp, #12
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d002      	beq.n	801299e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	683a      	ldr	r2, [r7, #0]
 801299c:	61da      	str	r2, [r3, #28]
  }
}
 801299e:	bf00      	nop
 80129a0:	370c      	adds	r7, #12
 80129a2:	46bd      	mov	sp, r7
 80129a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a8:	4770      	bx	lr

080129aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80129aa:	b480      	push	{r7}
 80129ac:	b085      	sub	sp, #20
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	60f8      	str	r0, [r7, #12]
 80129b2:	60b9      	str	r1, [r7, #8]
 80129b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80129b6:	f06f 030b 	mvn.w	r3, #11
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3714      	adds	r7, #20
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	4770      	bx	lr
	...

080129c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	4603      	mov	r3, r0
 80129d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80129d2:	79fb      	ldrb	r3, [r7, #7]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d013      	beq.n	8012a00 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80129d8:	4b0d      	ldr	r3, [pc, #52]	; (8012a10 <netif_get_by_index+0x48>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	60fb      	str	r3, [r7, #12]
 80129de:	e00c      	b.n	80129fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80129e6:	3301      	adds	r3, #1
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	79fa      	ldrb	r2, [r7, #7]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d101      	bne.n	80129f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	e006      	b.n	8012a02 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	60fb      	str	r3, [r7, #12]
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d1ef      	bne.n	80129e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012a00:	2300      	movs	r3, #0
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3714      	adds	r7, #20
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr
 8012a0e:	bf00      	nop
 8012a10:	2000e9e4 	.word	0x2000e9e4

08012a14 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012a1a:	f00b ffdd 	bl	801e9d8 <sys_arch_protect>
 8012a1e:	6038      	str	r0, [r7, #0]
 8012a20:	4b0d      	ldr	r3, [pc, #52]	; (8012a58 <pbuf_free_ooseq+0x44>)
 8012a22:	2200      	movs	r2, #0
 8012a24:	701a      	strb	r2, [r3, #0]
 8012a26:	6838      	ldr	r0, [r7, #0]
 8012a28:	f00b ffe4 	bl	801e9f4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012a2c:	4b0b      	ldr	r3, [pc, #44]	; (8012a5c <pbuf_free_ooseq+0x48>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	607b      	str	r3, [r7, #4]
 8012a32:	e00a      	b.n	8012a4a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d003      	beq.n	8012a44 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f002 fc53 	bl	80152e8 <tcp_free_ooseq>
      return;
 8012a42:	e005      	b.n	8012a50 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	68db      	ldr	r3, [r3, #12]
 8012a48:	607b      	str	r3, [r7, #4]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d1f1      	bne.n	8012a34 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012a50:	3708      	adds	r7, #8
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	2000e9ec 	.word	0x2000e9ec
 8012a5c:	2000e9f4 	.word	0x2000e9f4

08012a60 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012a68:	f7ff ffd4 	bl	8012a14 <pbuf_free_ooseq>
}
 8012a6c:	bf00      	nop
 8012a6e:	3708      	adds	r7, #8
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012a7a:	f00b ffad 	bl	801e9d8 <sys_arch_protect>
 8012a7e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012a80:	4b0f      	ldr	r3, [pc, #60]	; (8012ac0 <pbuf_pool_is_empty+0x4c>)
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012a86:	4b0e      	ldr	r3, [pc, #56]	; (8012ac0 <pbuf_pool_is_empty+0x4c>)
 8012a88:	2201      	movs	r2, #1
 8012a8a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f00b ffb1 	bl	801e9f4 <sys_arch_unprotect>

  if (!queued) {
 8012a92:	78fb      	ldrb	r3, [r7, #3]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d10f      	bne.n	8012ab8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012a98:	2100      	movs	r1, #0
 8012a9a:	480a      	ldr	r0, [pc, #40]	; (8012ac4 <pbuf_pool_is_empty+0x50>)
 8012a9c:	f7fe feca 	bl	8011834 <tcpip_try_callback>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d008      	beq.n	8012ab8 <pbuf_pool_is_empty+0x44>
 8012aa6:	f00b ff97 	bl	801e9d8 <sys_arch_protect>
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	4b04      	ldr	r3, [pc, #16]	; (8012ac0 <pbuf_pool_is_empty+0x4c>)
 8012aae:	2200      	movs	r2, #0
 8012ab0:	701a      	strb	r2, [r3, #0]
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f00b ff9e 	bl	801e9f4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012ab8:	bf00      	nop
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	2000e9ec 	.word	0x2000e9ec
 8012ac4:	08012a61 	.word	0x08012a61

08012ac8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b085      	sub	sp, #20
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	4611      	mov	r1, r2
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	80fb      	strh	r3, [r7, #6]
 8012ada:	4613      	mov	r3, r2
 8012adc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	68ba      	ldr	r2, [r7, #8]
 8012ae8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	88fa      	ldrh	r2, [r7, #6]
 8012aee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	88ba      	ldrh	r2, [r7, #4]
 8012af4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012af6:	8b3b      	ldrh	r3, [r7, #24]
 8012af8:	b2da      	uxtb	r2, r3
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	7f3a      	ldrb	r2, [r7, #28]
 8012b02:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2201      	movs	r2, #1
 8012b08:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	73da      	strb	r2, [r3, #15]
}
 8012b10:	bf00      	nop
 8012b12:	3714      	adds	r7, #20
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr

08012b1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b08c      	sub	sp, #48	; 0x30
 8012b20:	af02      	add	r7, sp, #8
 8012b22:	4603      	mov	r3, r0
 8012b24:	71fb      	strb	r3, [r7, #7]
 8012b26:	460b      	mov	r3, r1
 8012b28:	80bb      	strh	r3, [r7, #4]
 8012b2a:	4613      	mov	r3, r2
 8012b2c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012b2e:	79fb      	ldrb	r3, [r7, #7]
 8012b30:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012b32:	887b      	ldrh	r3, [r7, #2]
 8012b34:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012b38:	d07f      	beq.n	8012c3a <pbuf_alloc+0x11e>
 8012b3a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012b3e:	f300 80c8 	bgt.w	8012cd2 <pbuf_alloc+0x1b6>
 8012b42:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012b46:	d010      	beq.n	8012b6a <pbuf_alloc+0x4e>
 8012b48:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012b4c:	f300 80c1 	bgt.w	8012cd2 <pbuf_alloc+0x1b6>
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d002      	beq.n	8012b5a <pbuf_alloc+0x3e>
 8012b54:	2b41      	cmp	r3, #65	; 0x41
 8012b56:	f040 80bc 	bne.w	8012cd2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012b5a:	887a      	ldrh	r2, [r7, #2]
 8012b5c:	88bb      	ldrh	r3, [r7, #4]
 8012b5e:	4619      	mov	r1, r3
 8012b60:	2000      	movs	r0, #0
 8012b62:	f000 f8d1 	bl	8012d08 <pbuf_alloc_reference>
 8012b66:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012b68:	e0bd      	b.n	8012ce6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012b72:	88bb      	ldrh	r3, [r7, #4]
 8012b74:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012b76:	200c      	movs	r0, #12
 8012b78:	f7ff fbb2 	bl	80122e0 <memp_malloc>
 8012b7c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d109      	bne.n	8012b98 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012b84:	f7ff ff76 	bl	8012a74 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d002      	beq.n	8012b94 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b90:	f000 faa8 	bl	80130e4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012b94:	2300      	movs	r3, #0
 8012b96:	e0a7      	b.n	8012ce8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012b98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b9a:	3303      	adds	r3, #3
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	f023 0303 	bic.w	r3, r3, #3
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	8b7a      	ldrh	r2, [r7, #26]
 8012bac:	4293      	cmp	r3, r2
 8012bae:	bf28      	it	cs
 8012bb0:	4613      	movcs	r3, r2
 8012bb2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012bb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012bb6:	3310      	adds	r3, #16
 8012bb8:	693a      	ldr	r2, [r7, #16]
 8012bba:	4413      	add	r3, r2
 8012bbc:	3303      	adds	r3, #3
 8012bbe:	f023 0303 	bic.w	r3, r3, #3
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	89f9      	ldrh	r1, [r7, #14]
 8012bc6:	8b7a      	ldrh	r2, [r7, #26]
 8012bc8:	2300      	movs	r3, #0
 8012bca:	9301      	str	r3, [sp, #4]
 8012bcc:	887b      	ldrh	r3, [r7, #2]
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	4601      	mov	r1, r0
 8012bd4:	6938      	ldr	r0, [r7, #16]
 8012bd6:	f7ff ff77 	bl	8012ac8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	f003 0303 	and.w	r3, r3, #3
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d006      	beq.n	8012bf4 <pbuf_alloc+0xd8>
 8012be6:	4b42      	ldr	r3, [pc, #264]	; (8012cf0 <pbuf_alloc+0x1d4>)
 8012be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012bec:	4941      	ldr	r1, [pc, #260]	; (8012cf4 <pbuf_alloc+0x1d8>)
 8012bee:	4842      	ldr	r0, [pc, #264]	; (8012cf8 <pbuf_alloc+0x1dc>)
 8012bf0:	f00c ffe2 	bl	801fbb8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012bf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012bf6:	3303      	adds	r3, #3
 8012bf8:	f023 0303 	bic.w	r3, r3, #3
 8012bfc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012c00:	d106      	bne.n	8012c10 <pbuf_alloc+0xf4>
 8012c02:	4b3b      	ldr	r3, [pc, #236]	; (8012cf0 <pbuf_alloc+0x1d4>)
 8012c04:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012c08:	493c      	ldr	r1, [pc, #240]	; (8012cfc <pbuf_alloc+0x1e0>)
 8012c0a:	483b      	ldr	r0, [pc, #236]	; (8012cf8 <pbuf_alloc+0x1dc>)
 8012c0c:	f00c ffd4 	bl	801fbb8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d102      	bne.n	8012c1c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	627b      	str	r3, [r7, #36]	; 0x24
 8012c1a:	e002      	b.n	8012c22 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	693a      	ldr	r2, [r7, #16]
 8012c20:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012c26:	8b7a      	ldrh	r2, [r7, #26]
 8012c28:	89fb      	ldrh	r3, [r7, #14]
 8012c2a:	1ad3      	subs	r3, r2, r3
 8012c2c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8012c32:	8b7b      	ldrh	r3, [r7, #26]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d19e      	bne.n	8012b76 <pbuf_alloc+0x5a>
      break;
 8012c38:	e055      	b.n	8012ce6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012c3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c3c:	3303      	adds	r3, #3
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	f023 0303 	bic.w	r3, r3, #3
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	88bb      	ldrh	r3, [r7, #4]
 8012c48:	3303      	adds	r3, #3
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	f023 0303 	bic.w	r3, r3, #3
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	4413      	add	r3, r2
 8012c54:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012c56:	8b3b      	ldrh	r3, [r7, #24]
 8012c58:	3310      	adds	r3, #16
 8012c5a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012c5c:	8b3a      	ldrh	r2, [r7, #24]
 8012c5e:	88bb      	ldrh	r3, [r7, #4]
 8012c60:	3303      	adds	r3, #3
 8012c62:	f023 0303 	bic.w	r3, r3, #3
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d306      	bcc.n	8012c78 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012c6a:	8afa      	ldrh	r2, [r7, #22]
 8012c6c:	88bb      	ldrh	r3, [r7, #4]
 8012c6e:	3303      	adds	r3, #3
 8012c70:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d201      	bcs.n	8012c7c <pbuf_alloc+0x160>
        return NULL;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	e035      	b.n	8012ce8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012c7c:	8afb      	ldrh	r3, [r7, #22]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7ff f9ac 	bl	8011fdc <mem_malloc>
 8012c84:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8012c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d101      	bne.n	8012c90 <pbuf_alloc+0x174>
        return NULL;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	e02b      	b.n	8012ce8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012c90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c92:	3310      	adds	r3, #16
 8012c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c96:	4413      	add	r3, r2
 8012c98:	3303      	adds	r3, #3
 8012c9a:	f023 0303 	bic.w	r3, r3, #3
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	88b9      	ldrh	r1, [r7, #4]
 8012ca2:	88ba      	ldrh	r2, [r7, #4]
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	9301      	str	r3, [sp, #4]
 8012ca8:	887b      	ldrh	r3, [r7, #2]
 8012caa:	9300      	str	r3, [sp, #0]
 8012cac:	460b      	mov	r3, r1
 8012cae:	4601      	mov	r1, r0
 8012cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cb2:	f7ff ff09 	bl	8012ac8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	f003 0303 	and.w	r3, r3, #3
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d010      	beq.n	8012ce4 <pbuf_alloc+0x1c8>
 8012cc2:	4b0b      	ldr	r3, [pc, #44]	; (8012cf0 <pbuf_alloc+0x1d4>)
 8012cc4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8012cc8:	490d      	ldr	r1, [pc, #52]	; (8012d00 <pbuf_alloc+0x1e4>)
 8012cca:	480b      	ldr	r0, [pc, #44]	; (8012cf8 <pbuf_alloc+0x1dc>)
 8012ccc:	f00c ff74 	bl	801fbb8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012cd0:	e008      	b.n	8012ce4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012cd2:	4b07      	ldr	r3, [pc, #28]	; (8012cf0 <pbuf_alloc+0x1d4>)
 8012cd4:	f240 1227 	movw	r2, #295	; 0x127
 8012cd8:	490a      	ldr	r1, [pc, #40]	; (8012d04 <pbuf_alloc+0x1e8>)
 8012cda:	4807      	ldr	r0, [pc, #28]	; (8012cf8 <pbuf_alloc+0x1dc>)
 8012cdc:	f00c ff6c 	bl	801fbb8 <iprintf>
      return NULL;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	e001      	b.n	8012ce8 <pbuf_alloc+0x1cc>
      break;
 8012ce4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	3728      	adds	r7, #40	; 0x28
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}
 8012cf0:	0802200c 	.word	0x0802200c
 8012cf4:	0802203c 	.word	0x0802203c
 8012cf8:	0802206c 	.word	0x0802206c
 8012cfc:	08022094 	.word	0x08022094
 8012d00:	080220c8 	.word	0x080220c8
 8012d04:	080220f4 	.word	0x080220f4

08012d08 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b086      	sub	sp, #24
 8012d0c:	af02      	add	r7, sp, #8
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	460b      	mov	r3, r1
 8012d12:	807b      	strh	r3, [r7, #2]
 8012d14:	4613      	mov	r3, r2
 8012d16:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012d18:	883b      	ldrh	r3, [r7, #0]
 8012d1a:	2b41      	cmp	r3, #65	; 0x41
 8012d1c:	d009      	beq.n	8012d32 <pbuf_alloc_reference+0x2a>
 8012d1e:	883b      	ldrh	r3, [r7, #0]
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d006      	beq.n	8012d32 <pbuf_alloc_reference+0x2a>
 8012d24:	4b0f      	ldr	r3, [pc, #60]	; (8012d64 <pbuf_alloc_reference+0x5c>)
 8012d26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012d2a:	490f      	ldr	r1, [pc, #60]	; (8012d68 <pbuf_alloc_reference+0x60>)
 8012d2c:	480f      	ldr	r0, [pc, #60]	; (8012d6c <pbuf_alloc_reference+0x64>)
 8012d2e:	f00c ff43 	bl	801fbb8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012d32:	200b      	movs	r0, #11
 8012d34:	f7ff fad4 	bl	80122e0 <memp_malloc>
 8012d38:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d101      	bne.n	8012d44 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012d40:	2300      	movs	r3, #0
 8012d42:	e00b      	b.n	8012d5c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012d44:	8879      	ldrh	r1, [r7, #2]
 8012d46:	887a      	ldrh	r2, [r7, #2]
 8012d48:	2300      	movs	r3, #0
 8012d4a:	9301      	str	r3, [sp, #4]
 8012d4c:	883b      	ldrh	r3, [r7, #0]
 8012d4e:	9300      	str	r3, [sp, #0]
 8012d50:	460b      	mov	r3, r1
 8012d52:	6879      	ldr	r1, [r7, #4]
 8012d54:	68f8      	ldr	r0, [r7, #12]
 8012d56:	f7ff feb7 	bl	8012ac8 <pbuf_init_alloced_pbuf>
  return p;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3710      	adds	r7, #16
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}
 8012d64:	0802200c 	.word	0x0802200c
 8012d68:	08022110 	.word	0x08022110
 8012d6c:	0802206c 	.word	0x0802206c

08012d70 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b088      	sub	sp, #32
 8012d74:	af02      	add	r7, sp, #8
 8012d76:	607b      	str	r3, [r7, #4]
 8012d78:	4603      	mov	r3, r0
 8012d7a:	73fb      	strb	r3, [r7, #15]
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	81bb      	strh	r3, [r7, #12]
 8012d80:	4613      	mov	r3, r2
 8012d82:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012d84:	7bfb      	ldrb	r3, [r7, #15]
 8012d86:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012d88:	8a7b      	ldrh	r3, [r7, #18]
 8012d8a:	3303      	adds	r3, #3
 8012d8c:	f023 0203 	bic.w	r2, r3, #3
 8012d90:	89bb      	ldrh	r3, [r7, #12]
 8012d92:	441a      	add	r2, r3
 8012d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d901      	bls.n	8012d9e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	e018      	b.n	8012dd0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012d9e:	6a3b      	ldr	r3, [r7, #32]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d007      	beq.n	8012db4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012da4:	8a7b      	ldrh	r3, [r7, #18]
 8012da6:	3303      	adds	r3, #3
 8012da8:	f023 0303 	bic.w	r3, r3, #3
 8012dac:	6a3a      	ldr	r2, [r7, #32]
 8012dae:	4413      	add	r3, r2
 8012db0:	617b      	str	r3, [r7, #20]
 8012db2:	e001      	b.n	8012db8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012db4:	2300      	movs	r3, #0
 8012db6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	89b9      	ldrh	r1, [r7, #12]
 8012dbc:	89ba      	ldrh	r2, [r7, #12]
 8012dbe:	2302      	movs	r3, #2
 8012dc0:	9301      	str	r3, [sp, #4]
 8012dc2:	897b      	ldrh	r3, [r7, #10]
 8012dc4:	9300      	str	r3, [sp, #0]
 8012dc6:	460b      	mov	r3, r1
 8012dc8:	6979      	ldr	r1, [r7, #20]
 8012dca:	f7ff fe7d 	bl	8012ac8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012dce:	687b      	ldr	r3, [r7, #4]
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3718      	adds	r7, #24
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}

08012dd8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	460b      	mov	r3, r1
 8012de2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d106      	bne.n	8012df8 <pbuf_realloc+0x20>
 8012dea:	4b3a      	ldr	r3, [pc, #232]	; (8012ed4 <pbuf_realloc+0xfc>)
 8012dec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012df0:	4939      	ldr	r1, [pc, #228]	; (8012ed8 <pbuf_realloc+0x100>)
 8012df2:	483a      	ldr	r0, [pc, #232]	; (8012edc <pbuf_realloc+0x104>)
 8012df4:	f00c fee0 	bl	801fbb8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	891b      	ldrh	r3, [r3, #8]
 8012dfc:	887a      	ldrh	r2, [r7, #2]
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d263      	bcs.n	8012eca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	891a      	ldrh	r2, [r3, #8]
 8012e06:	887b      	ldrh	r3, [r7, #2]
 8012e08:	1ad3      	subs	r3, r2, r3
 8012e0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012e0c:	887b      	ldrh	r3, [r7, #2]
 8012e0e:	817b      	strh	r3, [r7, #10]
  q = p;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012e14:	e018      	b.n	8012e48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	895b      	ldrh	r3, [r3, #10]
 8012e1a:	897a      	ldrh	r2, [r7, #10]
 8012e1c:	1ad3      	subs	r3, r2, r3
 8012e1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	891a      	ldrh	r2, [r3, #8]
 8012e24:	893b      	ldrh	r3, [r7, #8]
 8012e26:	1ad3      	subs	r3, r2, r3
 8012e28:	b29a      	uxth	r2, r3
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d106      	bne.n	8012e48 <pbuf_realloc+0x70>
 8012e3a:	4b26      	ldr	r3, [pc, #152]	; (8012ed4 <pbuf_realloc+0xfc>)
 8012e3c:	f240 12af 	movw	r2, #431	; 0x1af
 8012e40:	4927      	ldr	r1, [pc, #156]	; (8012ee0 <pbuf_realloc+0x108>)
 8012e42:	4826      	ldr	r0, [pc, #152]	; (8012edc <pbuf_realloc+0x104>)
 8012e44:	f00c feb8 	bl	801fbb8 <iprintf>
  while (rem_len > q->len) {
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	895b      	ldrh	r3, [r3, #10]
 8012e4c:	897a      	ldrh	r2, [r7, #10]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d8e1      	bhi.n	8012e16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	7b1b      	ldrb	r3, [r3, #12]
 8012e56:	f003 030f 	and.w	r3, r3, #15
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d121      	bne.n	8012ea2 <pbuf_realloc+0xca>
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	895b      	ldrh	r3, [r3, #10]
 8012e62:	897a      	ldrh	r2, [r7, #10]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d01c      	beq.n	8012ea2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	7b5b      	ldrb	r3, [r3, #13]
 8012e6c:	f003 0302 	and.w	r3, r3, #2
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d116      	bne.n	8012ea2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	685a      	ldr	r2, [r3, #4]
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	1ad3      	subs	r3, r2, r3
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	897b      	ldrh	r3, [r7, #10]
 8012e80:	4413      	add	r3, r2
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	4619      	mov	r1, r3
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	f7fe ff9e 	bl	8011dc8 <mem_trim>
 8012e8c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d106      	bne.n	8012ea2 <pbuf_realloc+0xca>
 8012e94:	4b0f      	ldr	r3, [pc, #60]	; (8012ed4 <pbuf_realloc+0xfc>)
 8012e96:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012e9a:	4912      	ldr	r1, [pc, #72]	; (8012ee4 <pbuf_realloc+0x10c>)
 8012e9c:	480f      	ldr	r0, [pc, #60]	; (8012edc <pbuf_realloc+0x104>)
 8012e9e:	f00c fe8b 	bl	801fbb8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	897a      	ldrh	r2, [r7, #10]
 8012ea6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	895a      	ldrh	r2, [r3, #10]
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d004      	beq.n	8012ec2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f000 f911 	bl	80130e4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	601a      	str	r2, [r3, #0]
 8012ec8:	e000      	b.n	8012ecc <pbuf_realloc+0xf4>
    return;
 8012eca:	bf00      	nop

}
 8012ecc:	3710      	adds	r7, #16
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}
 8012ed2:	bf00      	nop
 8012ed4:	0802200c 	.word	0x0802200c
 8012ed8:	08022124 	.word	0x08022124
 8012edc:	0802206c 	.word	0x0802206c
 8012ee0:	0802213c 	.word	0x0802213c
 8012ee4:	08022154 	.word	0x08022154

08012ee8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d106      	bne.n	8012f0a <pbuf_add_header_impl+0x22>
 8012efc:	4b2b      	ldr	r3, [pc, #172]	; (8012fac <pbuf_add_header_impl+0xc4>)
 8012efe:	f240 12df 	movw	r2, #479	; 0x1df
 8012f02:	492b      	ldr	r1, [pc, #172]	; (8012fb0 <pbuf_add_header_impl+0xc8>)
 8012f04:	482b      	ldr	r0, [pc, #172]	; (8012fb4 <pbuf_add_header_impl+0xcc>)
 8012f06:	f00c fe57 	bl	801fbb8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d003      	beq.n	8012f18 <pbuf_add_header_impl+0x30>
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f16:	d301      	bcc.n	8012f1c <pbuf_add_header_impl+0x34>
    return 1;
 8012f18:	2301      	movs	r3, #1
 8012f1a:	e043      	b.n	8012fa4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d101      	bne.n	8012f26 <pbuf_add_header_impl+0x3e>
    return 0;
 8012f22:	2300      	movs	r3, #0
 8012f24:	e03e      	b.n	8012fa4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	891a      	ldrh	r2, [r3, #8]
 8012f2e:	8a7b      	ldrh	r3, [r7, #18]
 8012f30:	4413      	add	r3, r2
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	8a7a      	ldrh	r2, [r7, #18]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d901      	bls.n	8012f3e <pbuf_add_header_impl+0x56>
    return 1;
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	e032      	b.n	8012fa4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	7b1b      	ldrb	r3, [r3, #12]
 8012f42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012f44:	8a3b      	ldrh	r3, [r7, #16]
 8012f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d00c      	beq.n	8012f68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	685a      	ldr	r2, [r3, #4]
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	425b      	negs	r3, r3
 8012f56:	4413      	add	r3, r2
 8012f58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	3310      	adds	r3, #16
 8012f5e:	697a      	ldr	r2, [r7, #20]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d20d      	bcs.n	8012f80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012f64:	2301      	movs	r3, #1
 8012f66:	e01d      	b.n	8012fa4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012f68:	79fb      	ldrb	r3, [r7, #7]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d006      	beq.n	8012f7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	685a      	ldr	r2, [r3, #4]
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	425b      	negs	r3, r3
 8012f76:	4413      	add	r3, r2
 8012f78:	617b      	str	r3, [r7, #20]
 8012f7a:	e001      	b.n	8012f80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	e011      	b.n	8012fa4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	697a      	ldr	r2, [r7, #20]
 8012f84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	895a      	ldrh	r2, [r3, #10]
 8012f8a:	8a7b      	ldrh	r3, [r7, #18]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	891a      	ldrh	r2, [r3, #8]
 8012f98:	8a7b      	ldrh	r3, [r7, #18]
 8012f9a:	4413      	add	r3, r2
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	811a      	strh	r2, [r3, #8]


  return 0;
 8012fa2:	2300      	movs	r3, #0
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3718      	adds	r7, #24
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	0802200c 	.word	0x0802200c
 8012fb0:	08022170 	.word	0x08022170
 8012fb4:	0802206c 	.word	0x0802206c

08012fb8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	6839      	ldr	r1, [r7, #0]
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f7ff ff8e 	bl	8012ee8 <pbuf_add_header_impl>
 8012fcc:	4603      	mov	r3, r0
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3708      	adds	r7, #8
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
	...

08012fd8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d106      	bne.n	8012ff6 <pbuf_remove_header+0x1e>
 8012fe8:	4b20      	ldr	r3, [pc, #128]	; (801306c <pbuf_remove_header+0x94>)
 8012fea:	f240 224b 	movw	r2, #587	; 0x24b
 8012fee:	4920      	ldr	r1, [pc, #128]	; (8013070 <pbuf_remove_header+0x98>)
 8012ff0:	4820      	ldr	r0, [pc, #128]	; (8013074 <pbuf_remove_header+0x9c>)
 8012ff2:	f00c fde1 	bl	801fbb8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d003      	beq.n	8013004 <pbuf_remove_header+0x2c>
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013002:	d301      	bcc.n	8013008 <pbuf_remove_header+0x30>
    return 1;
 8013004:	2301      	movs	r3, #1
 8013006:	e02c      	b.n	8013062 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d101      	bne.n	8013012 <pbuf_remove_header+0x3a>
    return 0;
 801300e:	2300      	movs	r3, #0
 8013010:	e027      	b.n	8013062 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	895b      	ldrh	r3, [r3, #10]
 801301a:	89fa      	ldrh	r2, [r7, #14]
 801301c:	429a      	cmp	r2, r3
 801301e:	d908      	bls.n	8013032 <pbuf_remove_header+0x5a>
 8013020:	4b12      	ldr	r3, [pc, #72]	; (801306c <pbuf_remove_header+0x94>)
 8013022:	f240 2255 	movw	r2, #597	; 0x255
 8013026:	4914      	ldr	r1, [pc, #80]	; (8013078 <pbuf_remove_header+0xa0>)
 8013028:	4812      	ldr	r0, [pc, #72]	; (8013074 <pbuf_remove_header+0x9c>)
 801302a:	f00c fdc5 	bl	801fbb8 <iprintf>
 801302e:	2301      	movs	r3, #1
 8013030:	e017      	b.n	8013062 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	685a      	ldr	r2, [r3, #4]
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	441a      	add	r2, r3
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	895a      	ldrh	r2, [r3, #10]
 8013048:	89fb      	ldrh	r3, [r7, #14]
 801304a:	1ad3      	subs	r3, r2, r3
 801304c:	b29a      	uxth	r2, r3
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	891a      	ldrh	r2, [r3, #8]
 8013056:	89fb      	ldrh	r3, [r7, #14]
 8013058:	1ad3      	subs	r3, r2, r3
 801305a:	b29a      	uxth	r2, r3
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013060:	2300      	movs	r3, #0
}
 8013062:	4618      	mov	r0, r3
 8013064:	3710      	adds	r7, #16
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	0802200c 	.word	0x0802200c
 8013070:	08022170 	.word	0x08022170
 8013074:	0802206c 	.word	0x0802206c
 8013078:	0802217c 	.word	0x0802217c

0801307c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	460b      	mov	r3, r1
 8013086:	807b      	strh	r3, [r7, #2]
 8013088:	4613      	mov	r3, r2
 801308a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801308c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013090:	2b00      	cmp	r3, #0
 8013092:	da08      	bge.n	80130a6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013094:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013098:	425b      	negs	r3, r3
 801309a:	4619      	mov	r1, r3
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f7ff ff9b 	bl	8012fd8 <pbuf_remove_header>
 80130a2:	4603      	mov	r3, r0
 80130a4:	e007      	b.n	80130b6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80130a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80130aa:	787a      	ldrb	r2, [r7, #1]
 80130ac:	4619      	mov	r1, r3
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f7ff ff1a 	bl	8012ee8 <pbuf_add_header_impl>
 80130b4:	4603      	mov	r3, r0
  }
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b082      	sub	sp, #8
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	6078      	str	r0, [r7, #4]
 80130c6:	460b      	mov	r3, r1
 80130c8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80130ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80130ce:	2201      	movs	r2, #1
 80130d0:	4619      	mov	r1, r3
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f7ff ffd2 	bl	801307c <pbuf_header_impl>
 80130d8:	4603      	mov	r3, r0
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3708      	adds	r7, #8
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
	...

080130e4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b088      	sub	sp, #32
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d10b      	bne.n	801310a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d106      	bne.n	8013106 <pbuf_free+0x22>
 80130f8:	4b3b      	ldr	r3, [pc, #236]	; (80131e8 <pbuf_free+0x104>)
 80130fa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80130fe:	493b      	ldr	r1, [pc, #236]	; (80131ec <pbuf_free+0x108>)
 8013100:	483b      	ldr	r0, [pc, #236]	; (80131f0 <pbuf_free+0x10c>)
 8013102:	f00c fd59 	bl	801fbb8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8013106:	2300      	movs	r3, #0
 8013108:	e069      	b.n	80131de <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801310e:	e062      	b.n	80131d6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013110:	f00b fc62 	bl	801e9d8 <sys_arch_protect>
 8013114:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	7b9b      	ldrb	r3, [r3, #14]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d106      	bne.n	801312c <pbuf_free+0x48>
 801311e:	4b32      	ldr	r3, [pc, #200]	; (80131e8 <pbuf_free+0x104>)
 8013120:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013124:	4933      	ldr	r1, [pc, #204]	; (80131f4 <pbuf_free+0x110>)
 8013126:	4832      	ldr	r0, [pc, #200]	; (80131f0 <pbuf_free+0x10c>)
 8013128:	f00c fd46 	bl	801fbb8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	7b9b      	ldrb	r3, [r3, #14]
 8013130:	3b01      	subs	r3, #1
 8013132:	b2da      	uxtb	r2, r3
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	739a      	strb	r2, [r3, #14]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	7b9b      	ldrb	r3, [r3, #14]
 801313c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801313e:	69b8      	ldr	r0, [r7, #24]
 8013140:	f00b fc58 	bl	801e9f4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013144:	7dfb      	ldrb	r3, [r7, #23]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d143      	bne.n	80131d2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	7b1b      	ldrb	r3, [r3, #12]
 8013154:	f003 030f 	and.w	r3, r3, #15
 8013158:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	7b5b      	ldrb	r3, [r3, #13]
 801315e:	f003 0302 	and.w	r3, r3, #2
 8013162:	2b00      	cmp	r3, #0
 8013164:	d011      	beq.n	801318a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	691b      	ldr	r3, [r3, #16]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d106      	bne.n	8013180 <pbuf_free+0x9c>
 8013172:	4b1d      	ldr	r3, [pc, #116]	; (80131e8 <pbuf_free+0x104>)
 8013174:	f240 22ff 	movw	r2, #767	; 0x2ff
 8013178:	491f      	ldr	r1, [pc, #124]	; (80131f8 <pbuf_free+0x114>)
 801317a:	481d      	ldr	r0, [pc, #116]	; (80131f0 <pbuf_free+0x10c>)
 801317c:	f00c fd1c 	bl	801fbb8 <iprintf>
        pc->custom_free_function(p);
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	691b      	ldr	r3, [r3, #16]
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	4798      	blx	r3
 8013188:	e01d      	b.n	80131c6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801318a:	7bfb      	ldrb	r3, [r7, #15]
 801318c:	2b02      	cmp	r3, #2
 801318e:	d104      	bne.n	801319a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013190:	6879      	ldr	r1, [r7, #4]
 8013192:	200c      	movs	r0, #12
 8013194:	f7ff f8f6 	bl	8012384 <memp_free>
 8013198:	e015      	b.n	80131c6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801319a:	7bfb      	ldrb	r3, [r7, #15]
 801319c:	2b01      	cmp	r3, #1
 801319e:	d104      	bne.n	80131aa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80131a0:	6879      	ldr	r1, [r7, #4]
 80131a2:	200b      	movs	r0, #11
 80131a4:	f7ff f8ee 	bl	8012384 <memp_free>
 80131a8:	e00d      	b.n	80131c6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80131aa:	7bfb      	ldrb	r3, [r7, #15]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d103      	bne.n	80131b8 <pbuf_free+0xd4>
          mem_free(p);
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f7fe fd79 	bl	8011ca8 <mem_free>
 80131b6:	e006      	b.n	80131c6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80131b8:	4b0b      	ldr	r3, [pc, #44]	; (80131e8 <pbuf_free+0x104>)
 80131ba:	f240 320f 	movw	r2, #783	; 0x30f
 80131be:	490f      	ldr	r1, [pc, #60]	; (80131fc <pbuf_free+0x118>)
 80131c0:	480b      	ldr	r0, [pc, #44]	; (80131f0 <pbuf_free+0x10c>)
 80131c2:	f00c fcf9 	bl	801fbb8 <iprintf>
        }
      }
      count++;
 80131c6:	7ffb      	ldrb	r3, [r7, #31]
 80131c8:	3301      	adds	r3, #1
 80131ca:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	607b      	str	r3, [r7, #4]
 80131d0:	e001      	b.n	80131d6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80131d2:	2300      	movs	r3, #0
 80131d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d199      	bne.n	8013110 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80131dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3720      	adds	r7, #32
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	0802200c 	.word	0x0802200c
 80131ec:	08022170 	.word	0x08022170
 80131f0:	0802206c 	.word	0x0802206c
 80131f4:	0802219c 	.word	0x0802219c
 80131f8:	080221b4 	.word	0x080221b4
 80131fc:	080221d8 	.word	0x080221d8

08013200 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013200:	b480      	push	{r7}
 8013202:	b085      	sub	sp, #20
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013208:	2300      	movs	r3, #0
 801320a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801320c:	e005      	b.n	801321a <pbuf_clen+0x1a>
    ++len;
 801320e:	89fb      	ldrh	r3, [r7, #14]
 8013210:	3301      	adds	r3, #1
 8013212:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d1f6      	bne.n	801320e <pbuf_clen+0xe>
  }
  return len;
 8013220:	89fb      	ldrh	r3, [r7, #14]
}
 8013222:	4618      	mov	r0, r3
 8013224:	3714      	adds	r7, #20
 8013226:	46bd      	mov	sp, r7
 8013228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322c:	4770      	bx	lr
	...

08013230 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d016      	beq.n	801326c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801323e:	f00b fbcb 	bl	801e9d8 <sys_arch_protect>
 8013242:	60f8      	str	r0, [r7, #12]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	7b9b      	ldrb	r3, [r3, #14]
 8013248:	3301      	adds	r3, #1
 801324a:	b2da      	uxtb	r2, r3
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	739a      	strb	r2, [r3, #14]
 8013250:	68f8      	ldr	r0, [r7, #12]
 8013252:	f00b fbcf 	bl	801e9f4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	7b9b      	ldrb	r3, [r3, #14]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d106      	bne.n	801326c <pbuf_ref+0x3c>
 801325e:	4b05      	ldr	r3, [pc, #20]	; (8013274 <pbuf_ref+0x44>)
 8013260:	f240 3242 	movw	r2, #834	; 0x342
 8013264:	4904      	ldr	r1, [pc, #16]	; (8013278 <pbuf_ref+0x48>)
 8013266:	4805      	ldr	r0, [pc, #20]	; (801327c <pbuf_ref+0x4c>)
 8013268:	f00c fca6 	bl	801fbb8 <iprintf>
  }
}
 801326c:	bf00      	nop
 801326e:	3710      	adds	r7, #16
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}
 8013274:	0802200c 	.word	0x0802200c
 8013278:	080221ec 	.word	0x080221ec
 801327c:	0802206c 	.word	0x0802206c

08013280 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b084      	sub	sp, #16
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d002      	beq.n	8013296 <pbuf_cat+0x16>
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d107      	bne.n	80132a6 <pbuf_cat+0x26>
 8013296:	4b20      	ldr	r3, [pc, #128]	; (8013318 <pbuf_cat+0x98>)
 8013298:	f240 3259 	movw	r2, #857	; 0x359
 801329c:	491f      	ldr	r1, [pc, #124]	; (801331c <pbuf_cat+0x9c>)
 801329e:	4820      	ldr	r0, [pc, #128]	; (8013320 <pbuf_cat+0xa0>)
 80132a0:	f00c fc8a 	bl	801fbb8 <iprintf>
 80132a4:	e034      	b.n	8013310 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	60fb      	str	r3, [r7, #12]
 80132aa:	e00a      	b.n	80132c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	891a      	ldrh	r2, [r3, #8]
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	891b      	ldrh	r3, [r3, #8]
 80132b4:	4413      	add	r3, r2
 80132b6:	b29a      	uxth	r2, r3
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	60fb      	str	r3, [r7, #12]
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d1f0      	bne.n	80132ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	891a      	ldrh	r2, [r3, #8]
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	895b      	ldrh	r3, [r3, #10]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d006      	beq.n	80132e4 <pbuf_cat+0x64>
 80132d6:	4b10      	ldr	r3, [pc, #64]	; (8013318 <pbuf_cat+0x98>)
 80132d8:	f240 3262 	movw	r2, #866	; 0x362
 80132dc:	4911      	ldr	r1, [pc, #68]	; (8013324 <pbuf_cat+0xa4>)
 80132de:	4810      	ldr	r0, [pc, #64]	; (8013320 <pbuf_cat+0xa0>)
 80132e0:	f00c fc6a 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d006      	beq.n	80132fa <pbuf_cat+0x7a>
 80132ec:	4b0a      	ldr	r3, [pc, #40]	; (8013318 <pbuf_cat+0x98>)
 80132ee:	f240 3263 	movw	r2, #867	; 0x363
 80132f2:	490d      	ldr	r1, [pc, #52]	; (8013328 <pbuf_cat+0xa8>)
 80132f4:	480a      	ldr	r0, [pc, #40]	; (8013320 <pbuf_cat+0xa0>)
 80132f6:	f00c fc5f 	bl	801fbb8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	891a      	ldrh	r2, [r3, #8]
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	891b      	ldrh	r3, [r3, #8]
 8013302:	4413      	add	r3, r2
 8013304:	b29a      	uxth	r2, r3
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	683a      	ldr	r2, [r7, #0]
 801330e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013310:	3710      	adds	r7, #16
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	0802200c 	.word	0x0802200c
 801331c:	08022200 	.word	0x08022200
 8013320:	0802206c 	.word	0x0802206c
 8013324:	08022238 	.word	0x08022238
 8013328:	08022268 	.word	0x08022268

0801332c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8013336:	6839      	ldr	r1, [r7, #0]
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f7ff ffa1 	bl	8013280 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801333e:	6838      	ldr	r0, [r7, #0]
 8013340:	f7ff ff76 	bl	8013230 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013344:	bf00      	nop
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b086      	sub	sp, #24
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8013356:	2300      	movs	r3, #0
 8013358:	617b      	str	r3, [r7, #20]
 801335a:	2300      	movs	r3, #0
 801335c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d008      	beq.n	8013376 <pbuf_copy+0x2a>
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d005      	beq.n	8013376 <pbuf_copy+0x2a>
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	891a      	ldrh	r2, [r3, #8]
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	891b      	ldrh	r3, [r3, #8]
 8013372:	429a      	cmp	r2, r3
 8013374:	d209      	bcs.n	801338a <pbuf_copy+0x3e>
 8013376:	4b57      	ldr	r3, [pc, #348]	; (80134d4 <pbuf_copy+0x188>)
 8013378:	f240 32c9 	movw	r2, #969	; 0x3c9
 801337c:	4956      	ldr	r1, [pc, #344]	; (80134d8 <pbuf_copy+0x18c>)
 801337e:	4857      	ldr	r0, [pc, #348]	; (80134dc <pbuf_copy+0x190>)
 8013380:	f00c fc1a 	bl	801fbb8 <iprintf>
 8013384:	f06f 030f 	mvn.w	r3, #15
 8013388:	e09f      	b.n	80134ca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	895b      	ldrh	r3, [r3, #10]
 801338e:	461a      	mov	r2, r3
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	1ad2      	subs	r2, r2, r3
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	895b      	ldrh	r3, [r3, #10]
 8013398:	4619      	mov	r1, r3
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	1acb      	subs	r3, r1, r3
 801339e:	429a      	cmp	r2, r3
 80133a0:	d306      	bcc.n	80133b0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	895b      	ldrh	r3, [r3, #10]
 80133a6:	461a      	mov	r2, r3
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	1ad3      	subs	r3, r2, r3
 80133ac:	60fb      	str	r3, [r7, #12]
 80133ae:	e005      	b.n	80133bc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	895b      	ldrh	r3, [r3, #10]
 80133b4:	461a      	mov	r2, r3
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	1ad3      	subs	r3, r2, r3
 80133ba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	685a      	ldr	r2, [r3, #4]
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	18d0      	adds	r0, r2, r3
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	685a      	ldr	r2, [r3, #4]
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	4413      	add	r3, r2
 80133cc:	68fa      	ldr	r2, [r7, #12]
 80133ce:	4619      	mov	r1, r3
 80133d0:	f00c fb81 	bl	801fad6 <memcpy>
    offset_to += len;
 80133d4:	697a      	ldr	r2, [r7, #20]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	4413      	add	r3, r2
 80133da:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80133dc:	693a      	ldr	r2, [r7, #16]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	4413      	add	r3, r2
 80133e2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	895b      	ldrh	r3, [r3, #10]
 80133e8:	461a      	mov	r2, r3
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d906      	bls.n	80133fe <pbuf_copy+0xb2>
 80133f0:	4b38      	ldr	r3, [pc, #224]	; (80134d4 <pbuf_copy+0x188>)
 80133f2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80133f6:	493a      	ldr	r1, [pc, #232]	; (80134e0 <pbuf_copy+0x194>)
 80133f8:	4838      	ldr	r0, [pc, #224]	; (80134dc <pbuf_copy+0x190>)
 80133fa:	f00c fbdd 	bl	801fbb8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	895b      	ldrh	r3, [r3, #10]
 8013402:	461a      	mov	r2, r3
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	4293      	cmp	r3, r2
 8013408:	d906      	bls.n	8013418 <pbuf_copy+0xcc>
 801340a:	4b32      	ldr	r3, [pc, #200]	; (80134d4 <pbuf_copy+0x188>)
 801340c:	f240 32da 	movw	r2, #986	; 0x3da
 8013410:	4934      	ldr	r1, [pc, #208]	; (80134e4 <pbuf_copy+0x198>)
 8013412:	4832      	ldr	r0, [pc, #200]	; (80134dc <pbuf_copy+0x190>)
 8013414:	f00c fbd0 	bl	801fbb8 <iprintf>
    if (offset_from >= p_from->len) {
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	895b      	ldrh	r3, [r3, #10]
 801341c:	461a      	mov	r2, r3
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	4293      	cmp	r3, r2
 8013422:	d304      	bcc.n	801342e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013424:	2300      	movs	r3, #0
 8013426:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	895b      	ldrh	r3, [r3, #10]
 8013432:	461a      	mov	r2, r3
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	4293      	cmp	r3, r2
 8013438:	d114      	bne.n	8013464 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801343a:	2300      	movs	r3, #0
 801343c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d10c      	bne.n	8013464 <pbuf_copy+0x118>
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d009      	beq.n	8013464 <pbuf_copy+0x118>
 8013450:	4b20      	ldr	r3, [pc, #128]	; (80134d4 <pbuf_copy+0x188>)
 8013452:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8013456:	4924      	ldr	r1, [pc, #144]	; (80134e8 <pbuf_copy+0x19c>)
 8013458:	4820      	ldr	r0, [pc, #128]	; (80134dc <pbuf_copy+0x190>)
 801345a:	f00c fbad 	bl	801fbb8 <iprintf>
 801345e:	f06f 030f 	mvn.w	r3, #15
 8013462:	e032      	b.n	80134ca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d013      	beq.n	8013492 <pbuf_copy+0x146>
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	895a      	ldrh	r2, [r3, #10]
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	891b      	ldrh	r3, [r3, #8]
 8013472:	429a      	cmp	r2, r3
 8013474:	d10d      	bne.n	8013492 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d009      	beq.n	8013492 <pbuf_copy+0x146>
 801347e:	4b15      	ldr	r3, [pc, #84]	; (80134d4 <pbuf_copy+0x188>)
 8013480:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8013484:	4919      	ldr	r1, [pc, #100]	; (80134ec <pbuf_copy+0x1a0>)
 8013486:	4815      	ldr	r0, [pc, #84]	; (80134dc <pbuf_copy+0x190>)
 8013488:	f00c fb96 	bl	801fbb8 <iprintf>
 801348c:	f06f 0305 	mvn.w	r3, #5
 8013490:	e01b      	b.n	80134ca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d013      	beq.n	80134c0 <pbuf_copy+0x174>
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	895a      	ldrh	r2, [r3, #10]
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	891b      	ldrh	r3, [r3, #8]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d10d      	bne.n	80134c0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d009      	beq.n	80134c0 <pbuf_copy+0x174>
 80134ac:	4b09      	ldr	r3, [pc, #36]	; (80134d4 <pbuf_copy+0x188>)
 80134ae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80134b2:	490e      	ldr	r1, [pc, #56]	; (80134ec <pbuf_copy+0x1a0>)
 80134b4:	4809      	ldr	r0, [pc, #36]	; (80134dc <pbuf_copy+0x190>)
 80134b6:	f00c fb7f 	bl	801fbb8 <iprintf>
 80134ba:	f06f 0305 	mvn.w	r3, #5
 80134be:	e004      	b.n	80134ca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	f47f af61 	bne.w	801338a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80134c8:	2300      	movs	r3, #0
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3718      	adds	r7, #24
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	0802200c 	.word	0x0802200c
 80134d8:	080222b4 	.word	0x080222b4
 80134dc:	0802206c 	.word	0x0802206c
 80134e0:	080222e4 	.word	0x080222e4
 80134e4:	080222fc 	.word	0x080222fc
 80134e8:	08022318 	.word	0x08022318
 80134ec:	08022328 	.word	0x08022328

080134f0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b088      	sub	sp, #32
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	4611      	mov	r1, r2
 80134fc:	461a      	mov	r2, r3
 80134fe:	460b      	mov	r3, r1
 8013500:	80fb      	strh	r3, [r7, #6]
 8013502:	4613      	mov	r3, r2
 8013504:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8013506:	2300      	movs	r3, #0
 8013508:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801350a:	2300      	movs	r3, #0
 801350c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d108      	bne.n	8013526 <pbuf_copy_partial+0x36>
 8013514:	4b2b      	ldr	r3, [pc, #172]	; (80135c4 <pbuf_copy_partial+0xd4>)
 8013516:	f240 420a 	movw	r2, #1034	; 0x40a
 801351a:	492b      	ldr	r1, [pc, #172]	; (80135c8 <pbuf_copy_partial+0xd8>)
 801351c:	482b      	ldr	r0, [pc, #172]	; (80135cc <pbuf_copy_partial+0xdc>)
 801351e:	f00c fb4b 	bl	801fbb8 <iprintf>
 8013522:	2300      	movs	r3, #0
 8013524:	e04a      	b.n	80135bc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d108      	bne.n	801353e <pbuf_copy_partial+0x4e>
 801352c:	4b25      	ldr	r3, [pc, #148]	; (80135c4 <pbuf_copy_partial+0xd4>)
 801352e:	f240 420b 	movw	r2, #1035	; 0x40b
 8013532:	4927      	ldr	r1, [pc, #156]	; (80135d0 <pbuf_copy_partial+0xe0>)
 8013534:	4825      	ldr	r0, [pc, #148]	; (80135cc <pbuf_copy_partial+0xdc>)
 8013536:	f00c fb3f 	bl	801fbb8 <iprintf>
 801353a:	2300      	movs	r3, #0
 801353c:	e03e      	b.n	80135bc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	61fb      	str	r3, [r7, #28]
 8013542:	e034      	b.n	80135ae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013544:	88bb      	ldrh	r3, [r7, #4]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d00a      	beq.n	8013560 <pbuf_copy_partial+0x70>
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	895b      	ldrh	r3, [r3, #10]
 801354e:	88ba      	ldrh	r2, [r7, #4]
 8013550:	429a      	cmp	r2, r3
 8013552:	d305      	bcc.n	8013560 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013554:	69fb      	ldr	r3, [r7, #28]
 8013556:	895b      	ldrh	r3, [r3, #10]
 8013558:	88ba      	ldrh	r2, [r7, #4]
 801355a:	1ad3      	subs	r3, r2, r3
 801355c:	80bb      	strh	r3, [r7, #4]
 801355e:	e023      	b.n	80135a8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	895a      	ldrh	r2, [r3, #10]
 8013564:	88bb      	ldrh	r3, [r7, #4]
 8013566:	1ad3      	subs	r3, r2, r3
 8013568:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801356a:	8b3a      	ldrh	r2, [r7, #24]
 801356c:	88fb      	ldrh	r3, [r7, #6]
 801356e:	429a      	cmp	r2, r3
 8013570:	d901      	bls.n	8013576 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013572:	88fb      	ldrh	r3, [r7, #6]
 8013574:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8013576:	8b7b      	ldrh	r3, [r7, #26]
 8013578:	68ba      	ldr	r2, [r7, #8]
 801357a:	18d0      	adds	r0, r2, r3
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	685a      	ldr	r2, [r3, #4]
 8013580:	88bb      	ldrh	r3, [r7, #4]
 8013582:	4413      	add	r3, r2
 8013584:	8b3a      	ldrh	r2, [r7, #24]
 8013586:	4619      	mov	r1, r3
 8013588:	f00c faa5 	bl	801fad6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801358c:	8afa      	ldrh	r2, [r7, #22]
 801358e:	8b3b      	ldrh	r3, [r7, #24]
 8013590:	4413      	add	r3, r2
 8013592:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013594:	8b7a      	ldrh	r2, [r7, #26]
 8013596:	8b3b      	ldrh	r3, [r7, #24]
 8013598:	4413      	add	r3, r2
 801359a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801359c:	88fa      	ldrh	r2, [r7, #6]
 801359e:	8b3b      	ldrh	r3, [r7, #24]
 80135a0:	1ad3      	subs	r3, r2, r3
 80135a2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80135a4:	2300      	movs	r3, #0
 80135a6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80135a8:	69fb      	ldr	r3, [r7, #28]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	61fb      	str	r3, [r7, #28]
 80135ae:	88fb      	ldrh	r3, [r7, #6]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d002      	beq.n	80135ba <pbuf_copy_partial+0xca>
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d1c4      	bne.n	8013544 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80135ba:	8afb      	ldrh	r3, [r7, #22]
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3720      	adds	r7, #32
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}
 80135c4:	0802200c 	.word	0x0802200c
 80135c8:	08022354 	.word	0x08022354
 80135cc:	0802206c 	.word	0x0802206c
 80135d0:	08022374 	.word	0x08022374

080135d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	4603      	mov	r3, r0
 80135dc:	603a      	str	r2, [r7, #0]
 80135de:	71fb      	strb	r3, [r7, #7]
 80135e0:	460b      	mov	r3, r1
 80135e2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	8919      	ldrh	r1, [r3, #8]
 80135e8:	88ba      	ldrh	r2, [r7, #4]
 80135ea:	79fb      	ldrb	r3, [r7, #7]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7ff fa95 	bl	8012b1c <pbuf_alloc>
 80135f2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d101      	bne.n	80135fe <pbuf_clone+0x2a>
    return NULL;
 80135fa:	2300      	movs	r3, #0
 80135fc:	e011      	b.n	8013622 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80135fe:	6839      	ldr	r1, [r7, #0]
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	f7ff fea3 	bl	801334c <pbuf_copy>
 8013606:	4603      	mov	r3, r0
 8013608:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801360a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d006      	beq.n	8013620 <pbuf_clone+0x4c>
 8013612:	4b06      	ldr	r3, [pc, #24]	; (801362c <pbuf_clone+0x58>)
 8013614:	f240 5224 	movw	r2, #1316	; 0x524
 8013618:	4905      	ldr	r1, [pc, #20]	; (8013630 <pbuf_clone+0x5c>)
 801361a:	4806      	ldr	r0, [pc, #24]	; (8013634 <pbuf_clone+0x60>)
 801361c:	f00c facc 	bl	801fbb8 <iprintf>
  return q;
 8013620:	68fb      	ldr	r3, [r7, #12]
}
 8013622:	4618      	mov	r0, r3
 8013624:	3710      	adds	r7, #16
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
 801362a:	bf00      	nop
 801362c:	0802200c 	.word	0x0802200c
 8013630:	08022480 	.word	0x08022480
 8013634:	0802206c 	.word	0x0802206c

08013638 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801363c:	f00c fad4 	bl	801fbe8 <rand>
 8013640:	4603      	mov	r3, r0
 8013642:	b29b      	uxth	r3, r3
 8013644:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013648:	b29b      	uxth	r3, r3
 801364a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801364e:	b29a      	uxth	r2, r3
 8013650:	4b01      	ldr	r3, [pc, #4]	; (8013658 <tcp_init+0x20>)
 8013652:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013654:	bf00      	nop
 8013656:	bd80      	pop	{r7, pc}
 8013658:	200000e4 	.word	0x200000e4

0801365c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	7d1b      	ldrb	r3, [r3, #20]
 8013668:	2b01      	cmp	r3, #1
 801366a:	d105      	bne.n	8013678 <tcp_free+0x1c>
 801366c:	4b06      	ldr	r3, [pc, #24]	; (8013688 <tcp_free+0x2c>)
 801366e:	22d4      	movs	r2, #212	; 0xd4
 8013670:	4906      	ldr	r1, [pc, #24]	; (801368c <tcp_free+0x30>)
 8013672:	4807      	ldr	r0, [pc, #28]	; (8013690 <tcp_free+0x34>)
 8013674:	f00c faa0 	bl	801fbb8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013678:	6879      	ldr	r1, [r7, #4]
 801367a:	2001      	movs	r0, #1
 801367c:	f7fe fe82 	bl	8012384 <memp_free>
}
 8013680:	bf00      	nop
 8013682:	3708      	adds	r7, #8
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	0802250c 	.word	0x0802250c
 801368c:	0802253c 	.word	0x0802253c
 8013690:	08022550 	.word	0x08022550

08013694 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	7d1b      	ldrb	r3, [r3, #20]
 80136a0:	2b01      	cmp	r3, #1
 80136a2:	d105      	bne.n	80136b0 <tcp_free_listen+0x1c>
 80136a4:	4b06      	ldr	r3, [pc, #24]	; (80136c0 <tcp_free_listen+0x2c>)
 80136a6:	22df      	movs	r2, #223	; 0xdf
 80136a8:	4906      	ldr	r1, [pc, #24]	; (80136c4 <tcp_free_listen+0x30>)
 80136aa:	4807      	ldr	r0, [pc, #28]	; (80136c8 <tcp_free_listen+0x34>)
 80136ac:	f00c fa84 	bl	801fbb8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80136b0:	6879      	ldr	r1, [r7, #4]
 80136b2:	2002      	movs	r0, #2
 80136b4:	f7fe fe66 	bl	8012384 <memp_free>
}
 80136b8:	bf00      	nop
 80136ba:	3708      	adds	r7, #8
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	0802250c 	.word	0x0802250c
 80136c4:	08022578 	.word	0x08022578
 80136c8:	08022550 	.word	0x08022550

080136cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80136d0:	f001 f8a6 	bl	8014820 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80136d4:	4b07      	ldr	r3, [pc, #28]	; (80136f4 <tcp_tmr+0x28>)
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	3301      	adds	r3, #1
 80136da:	b2da      	uxtb	r2, r3
 80136dc:	4b05      	ldr	r3, [pc, #20]	; (80136f4 <tcp_tmr+0x28>)
 80136de:	701a      	strb	r2, [r3, #0]
 80136e0:	4b04      	ldr	r3, [pc, #16]	; (80136f4 <tcp_tmr+0x28>)
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	f003 0301 	and.w	r3, r3, #1
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d001      	beq.n	80136f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80136ec:	f000 fd58 	bl	80141a0 <tcp_slowtmr>
  }
}
 80136f0:	bf00      	nop
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	20005fa9 	.word	0x20005fa9

080136f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d105      	bne.n	8013714 <tcp_remove_listener+0x1c>
 8013708:	4b0d      	ldr	r3, [pc, #52]	; (8013740 <tcp_remove_listener+0x48>)
 801370a:	22ff      	movs	r2, #255	; 0xff
 801370c:	490d      	ldr	r1, [pc, #52]	; (8013744 <tcp_remove_listener+0x4c>)
 801370e:	480e      	ldr	r0, [pc, #56]	; (8013748 <tcp_remove_listener+0x50>)
 8013710:	f00c fa52 	bl	801fbb8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	60fb      	str	r3, [r7, #12]
 8013718:	e00a      	b.n	8013730 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801371e:	683a      	ldr	r2, [r7, #0]
 8013720:	429a      	cmp	r2, r3
 8013722:	d102      	bne.n	801372a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	2200      	movs	r2, #0
 8013728:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	68db      	ldr	r3, [r3, #12]
 801372e:	60fb      	str	r3, [r7, #12]
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d1f1      	bne.n	801371a <tcp_remove_listener+0x22>
    }
  }
}
 8013736:	bf00      	nop
 8013738:	bf00      	nop
 801373a:	3710      	adds	r7, #16
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	0802250c 	.word	0x0802250c
 8013744:	08022594 	.word	0x08022594
 8013748:	08022550 	.word	0x08022550

0801374c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b084      	sub	sp, #16
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d106      	bne.n	8013768 <tcp_listen_closed+0x1c>
 801375a:	4b14      	ldr	r3, [pc, #80]	; (80137ac <tcp_listen_closed+0x60>)
 801375c:	f240 1211 	movw	r2, #273	; 0x111
 8013760:	4913      	ldr	r1, [pc, #76]	; (80137b0 <tcp_listen_closed+0x64>)
 8013762:	4814      	ldr	r0, [pc, #80]	; (80137b4 <tcp_listen_closed+0x68>)
 8013764:	f00c fa28 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	7d1b      	ldrb	r3, [r3, #20]
 801376c:	2b01      	cmp	r3, #1
 801376e:	d006      	beq.n	801377e <tcp_listen_closed+0x32>
 8013770:	4b0e      	ldr	r3, [pc, #56]	; (80137ac <tcp_listen_closed+0x60>)
 8013772:	f44f 7289 	mov.w	r2, #274	; 0x112
 8013776:	4910      	ldr	r1, [pc, #64]	; (80137b8 <tcp_listen_closed+0x6c>)
 8013778:	480e      	ldr	r0, [pc, #56]	; (80137b4 <tcp_listen_closed+0x68>)
 801377a:	f00c fa1d 	bl	801fbb8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801377e:	2301      	movs	r3, #1
 8013780:	60fb      	str	r3, [r7, #12]
 8013782:	e00b      	b.n	801379c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013784:	4a0d      	ldr	r2, [pc, #52]	; (80137bc <tcp_listen_closed+0x70>)
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	6879      	ldr	r1, [r7, #4]
 8013790:	4618      	mov	r0, r3
 8013792:	f7ff ffb1 	bl	80136f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	3301      	adds	r3, #1
 801379a:	60fb      	str	r3, [r7, #12]
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	2b03      	cmp	r3, #3
 80137a0:	d9f0      	bls.n	8013784 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80137a2:	bf00      	nop
 80137a4:	bf00      	nop
 80137a6:	3710      	adds	r7, #16
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}
 80137ac:	0802250c 	.word	0x0802250c
 80137b0:	080225bc 	.word	0x080225bc
 80137b4:	08022550 	.word	0x08022550
 80137b8:	080225c8 	.word	0x080225c8
 80137bc:	08024a10 	.word	0x08024a10

080137c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80137c0:	b5b0      	push	{r4, r5, r7, lr}
 80137c2:	b088      	sub	sp, #32
 80137c4:	af04      	add	r7, sp, #16
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	460b      	mov	r3, r1
 80137ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d106      	bne.n	80137e0 <tcp_close_shutdown+0x20>
 80137d2:	4b63      	ldr	r3, [pc, #396]	; (8013960 <tcp_close_shutdown+0x1a0>)
 80137d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80137d8:	4962      	ldr	r1, [pc, #392]	; (8013964 <tcp_close_shutdown+0x1a4>)
 80137da:	4863      	ldr	r0, [pc, #396]	; (8013968 <tcp_close_shutdown+0x1a8>)
 80137dc:	f00c f9ec 	bl	801fbb8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80137e0:	78fb      	ldrb	r3, [r7, #3]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d066      	beq.n	80138b4 <tcp_close_shutdown+0xf4>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	7d1b      	ldrb	r3, [r3, #20]
 80137ea:	2b04      	cmp	r3, #4
 80137ec:	d003      	beq.n	80137f6 <tcp_close_shutdown+0x36>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	7d1b      	ldrb	r3, [r3, #20]
 80137f2:	2b07      	cmp	r3, #7
 80137f4:	d15e      	bne.n	80138b4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d104      	bne.n	8013808 <tcp_close_shutdown+0x48>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013802:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013806:	d055      	beq.n	80138b4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	8b5b      	ldrh	r3, [r3, #26]
 801380c:	f003 0310 	and.w	r3, r3, #16
 8013810:	2b00      	cmp	r3, #0
 8013812:	d106      	bne.n	8013822 <tcp_close_shutdown+0x62>
 8013814:	4b52      	ldr	r3, [pc, #328]	; (8013960 <tcp_close_shutdown+0x1a0>)
 8013816:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801381a:	4954      	ldr	r1, [pc, #336]	; (801396c <tcp_close_shutdown+0x1ac>)
 801381c:	4852      	ldr	r0, [pc, #328]	; (8013968 <tcp_close_shutdown+0x1a8>)
 801381e:	f00c f9cb 	bl	801fbb8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801382a:	687d      	ldr	r5, [r7, #4]
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	3304      	adds	r3, #4
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	8ad2      	ldrh	r2, [r2, #22]
 8013834:	6879      	ldr	r1, [r7, #4]
 8013836:	8b09      	ldrh	r1, [r1, #24]
 8013838:	9102      	str	r1, [sp, #8]
 801383a:	9201      	str	r2, [sp, #4]
 801383c:	9300      	str	r3, [sp, #0]
 801383e:	462b      	mov	r3, r5
 8013840:	4622      	mov	r2, r4
 8013842:	4601      	mov	r1, r0
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f005 fdb7 	bl	80193b8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f001 fb98 	bl	8014f80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013850:	4b47      	ldr	r3, [pc, #284]	; (8013970 <tcp_close_shutdown+0x1b0>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	429a      	cmp	r2, r3
 8013858:	d105      	bne.n	8013866 <tcp_close_shutdown+0xa6>
 801385a:	4b45      	ldr	r3, [pc, #276]	; (8013970 <tcp_close_shutdown+0x1b0>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	4a43      	ldr	r2, [pc, #268]	; (8013970 <tcp_close_shutdown+0x1b0>)
 8013862:	6013      	str	r3, [r2, #0]
 8013864:	e013      	b.n	801388e <tcp_close_shutdown+0xce>
 8013866:	4b42      	ldr	r3, [pc, #264]	; (8013970 <tcp_close_shutdown+0x1b0>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	60fb      	str	r3, [r7, #12]
 801386c:	e00c      	b.n	8013888 <tcp_close_shutdown+0xc8>
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	68db      	ldr	r3, [r3, #12]
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	429a      	cmp	r2, r3
 8013876:	d104      	bne.n	8013882 <tcp_close_shutdown+0xc2>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	68da      	ldr	r2, [r3, #12]
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	60da      	str	r2, [r3, #12]
 8013880:	e005      	b.n	801388e <tcp_close_shutdown+0xce>
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	60fb      	str	r3, [r7, #12]
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d1ef      	bne.n	801386e <tcp_close_shutdown+0xae>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	2200      	movs	r2, #0
 8013892:	60da      	str	r2, [r3, #12]
 8013894:	4b37      	ldr	r3, [pc, #220]	; (8013974 <tcp_close_shutdown+0x1b4>)
 8013896:	2201      	movs	r2, #1
 8013898:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801389a:	4b37      	ldr	r3, [pc, #220]	; (8013978 <tcp_close_shutdown+0x1b8>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	687a      	ldr	r2, [r7, #4]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d102      	bne.n	80138aa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80138a4:	f004 f82c 	bl	8017900 <tcp_trigger_input_pcb_close>
 80138a8:	e002      	b.n	80138b0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f7ff fed6 	bl	801365c <tcp_free>
      }
      return ERR_OK;
 80138b0:	2300      	movs	r3, #0
 80138b2:	e050      	b.n	8013956 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	7d1b      	ldrb	r3, [r3, #20]
 80138b8:	2b02      	cmp	r3, #2
 80138ba:	d03b      	beq.n	8013934 <tcp_close_shutdown+0x174>
 80138bc:	2b02      	cmp	r3, #2
 80138be:	dc44      	bgt.n	801394a <tcp_close_shutdown+0x18a>
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d002      	beq.n	80138ca <tcp_close_shutdown+0x10a>
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d02a      	beq.n	801391e <tcp_close_shutdown+0x15e>
 80138c8:	e03f      	b.n	801394a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	8adb      	ldrh	r3, [r3, #22]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d021      	beq.n	8013916 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80138d2:	4b2a      	ldr	r3, [pc, #168]	; (801397c <tcp_close_shutdown+0x1bc>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	429a      	cmp	r2, r3
 80138da:	d105      	bne.n	80138e8 <tcp_close_shutdown+0x128>
 80138dc:	4b27      	ldr	r3, [pc, #156]	; (801397c <tcp_close_shutdown+0x1bc>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	4a26      	ldr	r2, [pc, #152]	; (801397c <tcp_close_shutdown+0x1bc>)
 80138e4:	6013      	str	r3, [r2, #0]
 80138e6:	e013      	b.n	8013910 <tcp_close_shutdown+0x150>
 80138e8:	4b24      	ldr	r3, [pc, #144]	; (801397c <tcp_close_shutdown+0x1bc>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	60bb      	str	r3, [r7, #8]
 80138ee:	e00c      	b.n	801390a <tcp_close_shutdown+0x14a>
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	687a      	ldr	r2, [r7, #4]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d104      	bne.n	8013904 <tcp_close_shutdown+0x144>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	68da      	ldr	r2, [r3, #12]
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	60da      	str	r2, [r3, #12]
 8013902:	e005      	b.n	8013910 <tcp_close_shutdown+0x150>
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	60bb      	str	r3, [r7, #8]
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d1ef      	bne.n	80138f0 <tcp_close_shutdown+0x130>
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2200      	movs	r2, #0
 8013914:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f7ff fea0 	bl	801365c <tcp_free>
      break;
 801391c:	e01a      	b.n	8013954 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7ff ff14 	bl	801374c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013924:	6879      	ldr	r1, [r7, #4]
 8013926:	4816      	ldr	r0, [pc, #88]	; (8013980 <tcp_close_shutdown+0x1c0>)
 8013928:	f001 fb7a 	bl	8015020 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f7ff feb1 	bl	8013694 <tcp_free_listen>
      break;
 8013932:	e00f      	b.n	8013954 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013934:	6879      	ldr	r1, [r7, #4]
 8013936:	480e      	ldr	r0, [pc, #56]	; (8013970 <tcp_close_shutdown+0x1b0>)
 8013938:	f001 fb72 	bl	8015020 <tcp_pcb_remove>
 801393c:	4b0d      	ldr	r3, [pc, #52]	; (8013974 <tcp_close_shutdown+0x1b4>)
 801393e:	2201      	movs	r2, #1
 8013940:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f7ff fe8a 	bl	801365c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013948:	e004      	b.n	8013954 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f000 f81a 	bl	8013984 <tcp_close_shutdown_fin>
 8013950:	4603      	mov	r3, r0
 8013952:	e000      	b.n	8013956 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013954:	2300      	movs	r3, #0
}
 8013956:	4618      	mov	r0, r3
 8013958:	3710      	adds	r7, #16
 801395a:	46bd      	mov	sp, r7
 801395c:	bdb0      	pop	{r4, r5, r7, pc}
 801395e:	bf00      	nop
 8013960:	0802250c 	.word	0x0802250c
 8013964:	080225e0 	.word	0x080225e0
 8013968:	08022550 	.word	0x08022550
 801396c:	08022600 	.word	0x08022600
 8013970:	2000e9f4 	.word	0x2000e9f4
 8013974:	2000e9f0 	.word	0x2000e9f0
 8013978:	2000ea08 	.word	0x2000ea08
 801397c:	2000ea00 	.word	0x2000ea00
 8013980:	2000e9fc 	.word	0x2000e9fc

08013984 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d106      	bne.n	80139a0 <tcp_close_shutdown_fin+0x1c>
 8013992:	4b2e      	ldr	r3, [pc, #184]	; (8013a4c <tcp_close_shutdown_fin+0xc8>)
 8013994:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013998:	492d      	ldr	r1, [pc, #180]	; (8013a50 <tcp_close_shutdown_fin+0xcc>)
 801399a:	482e      	ldr	r0, [pc, #184]	; (8013a54 <tcp_close_shutdown_fin+0xd0>)
 801399c:	f00c f90c 	bl	801fbb8 <iprintf>

  switch (pcb->state) {
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	7d1b      	ldrb	r3, [r3, #20]
 80139a4:	2b07      	cmp	r3, #7
 80139a6:	d020      	beq.n	80139ea <tcp_close_shutdown_fin+0x66>
 80139a8:	2b07      	cmp	r3, #7
 80139aa:	dc2b      	bgt.n	8013a04 <tcp_close_shutdown_fin+0x80>
 80139ac:	2b03      	cmp	r3, #3
 80139ae:	d002      	beq.n	80139b6 <tcp_close_shutdown_fin+0x32>
 80139b0:	2b04      	cmp	r3, #4
 80139b2:	d00d      	beq.n	80139d0 <tcp_close_shutdown_fin+0x4c>
 80139b4:	e026      	b.n	8013a04 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f004 fe0c 	bl	80185d4 <tcp_send_fin>
 80139bc:	4603      	mov	r3, r0
 80139be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80139c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d11f      	bne.n	8013a08 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2205      	movs	r2, #5
 80139cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80139ce:	e01b      	b.n	8013a08 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f004 fdff 	bl	80185d4 <tcp_send_fin>
 80139d6:	4603      	mov	r3, r0
 80139d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80139da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d114      	bne.n	8013a0c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2205      	movs	r2, #5
 80139e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80139e8:	e010      	b.n	8013a0c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f004 fdf2 	bl	80185d4 <tcp_send_fin>
 80139f0:	4603      	mov	r3, r0
 80139f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80139f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d109      	bne.n	8013a10 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2209      	movs	r2, #9
 8013a00:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a02:	e005      	b.n	8013a10 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013a04:	2300      	movs	r3, #0
 8013a06:	e01c      	b.n	8013a42 <tcp_close_shutdown_fin+0xbe>
      break;
 8013a08:	bf00      	nop
 8013a0a:	e002      	b.n	8013a12 <tcp_close_shutdown_fin+0x8e>
      break;
 8013a0c:	bf00      	nop
 8013a0e:	e000      	b.n	8013a12 <tcp_close_shutdown_fin+0x8e>
      break;
 8013a10:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d103      	bne.n	8013a22 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f004 ff18 	bl	8018850 <tcp_output>
 8013a20:	e00d      	b.n	8013a3e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a2a:	d108      	bne.n	8013a3e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	8b5b      	ldrh	r3, [r3, #26]
 8013a30:	f043 0308 	orr.w	r3, r3, #8
 8013a34:	b29a      	uxth	r2, r3
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	e001      	b.n	8013a42 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3710      	adds	r7, #16
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	0802250c 	.word	0x0802250c
 8013a50:	080225bc 	.word	0x080225bc
 8013a54:	08022550 	.word	0x08022550

08013a58 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d109      	bne.n	8013a7a <tcp_close+0x22>
 8013a66:	4b0f      	ldr	r3, [pc, #60]	; (8013aa4 <tcp_close+0x4c>)
 8013a68:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013a6c:	490e      	ldr	r1, [pc, #56]	; (8013aa8 <tcp_close+0x50>)
 8013a6e:	480f      	ldr	r0, [pc, #60]	; (8013aac <tcp_close+0x54>)
 8013a70:	f00c f8a2 	bl	801fbb8 <iprintf>
 8013a74:	f06f 030f 	mvn.w	r3, #15
 8013a78:	e00f      	b.n	8013a9a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	7d1b      	ldrb	r3, [r3, #20]
 8013a7e:	2b01      	cmp	r3, #1
 8013a80:	d006      	beq.n	8013a90 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	8b5b      	ldrh	r3, [r3, #26]
 8013a86:	f043 0310 	orr.w	r3, r3, #16
 8013a8a:	b29a      	uxth	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013a90:	2101      	movs	r1, #1
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f7ff fe94 	bl	80137c0 <tcp_close_shutdown>
 8013a98:	4603      	mov	r3, r0
}
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	3708      	adds	r7, #8
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	0802250c 	.word	0x0802250c
 8013aa8:	0802261c 	.word	0x0802261c
 8013aac:	08022550 	.word	0x08022550

08013ab0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b084      	sub	sp, #16
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	60f8      	str	r0, [r7, #12]
 8013ab8:	60b9      	str	r1, [r7, #8]
 8013aba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d109      	bne.n	8013ad6 <tcp_shutdown+0x26>
 8013ac2:	4b26      	ldr	r3, [pc, #152]	; (8013b5c <tcp_shutdown+0xac>)
 8013ac4:	f240 2207 	movw	r2, #519	; 0x207
 8013ac8:	4925      	ldr	r1, [pc, #148]	; (8013b60 <tcp_shutdown+0xb0>)
 8013aca:	4826      	ldr	r0, [pc, #152]	; (8013b64 <tcp_shutdown+0xb4>)
 8013acc:	f00c f874 	bl	801fbb8 <iprintf>
 8013ad0:	f06f 030f 	mvn.w	r3, #15
 8013ad4:	e03d      	b.n	8013b52 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	7d1b      	ldrb	r3, [r3, #20]
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d102      	bne.n	8013ae4 <tcp_shutdown+0x34>
    return ERR_CONN;
 8013ade:	f06f 030a 	mvn.w	r3, #10
 8013ae2:	e036      	b.n	8013b52 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d01b      	beq.n	8013b22 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	8b5b      	ldrh	r3, [r3, #26]
 8013aee:	f043 0310 	orr.w	r3, r3, #16
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d005      	beq.n	8013b0a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013afe:	2101      	movs	r1, #1
 8013b00:	68f8      	ldr	r0, [r7, #12]
 8013b02:	f7ff fe5d 	bl	80137c0 <tcp_close_shutdown>
 8013b06:	4603      	mov	r3, r0
 8013b08:	e023      	b.n	8013b52 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d007      	beq.n	8013b22 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7ff fae4 	bl	80130e4 <pbuf_free>
      pcb->refused_data = NULL;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d013      	beq.n	8013b50 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	7d1b      	ldrb	r3, [r3, #20]
 8013b2c:	2b04      	cmp	r3, #4
 8013b2e:	dc02      	bgt.n	8013b36 <tcp_shutdown+0x86>
 8013b30:	2b03      	cmp	r3, #3
 8013b32:	da02      	bge.n	8013b3a <tcp_shutdown+0x8a>
 8013b34:	e009      	b.n	8013b4a <tcp_shutdown+0x9a>
 8013b36:	2b07      	cmp	r3, #7
 8013b38:	d107      	bne.n	8013b4a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	b2db      	uxtb	r3, r3
 8013b3e:	4619      	mov	r1, r3
 8013b40:	68f8      	ldr	r0, [r7, #12]
 8013b42:	f7ff fe3d 	bl	80137c0 <tcp_close_shutdown>
 8013b46:	4603      	mov	r3, r0
 8013b48:	e003      	b.n	8013b52 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8013b4a:	f06f 030a 	mvn.w	r3, #10
 8013b4e:	e000      	b.n	8013b52 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013b50:	2300      	movs	r3, #0
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3710      	adds	r7, #16
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	0802250c 	.word	0x0802250c
 8013b60:	08022634 	.word	0x08022634
 8013b64:	08022550 	.word	0x08022550

08013b68 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b08e      	sub	sp, #56	; 0x38
 8013b6c:	af04      	add	r7, sp, #16
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d107      	bne.n	8013b88 <tcp_abandon+0x20>
 8013b78:	4b52      	ldr	r3, [pc, #328]	; (8013cc4 <tcp_abandon+0x15c>)
 8013b7a:	f240 223d 	movw	r2, #573	; 0x23d
 8013b7e:	4952      	ldr	r1, [pc, #328]	; (8013cc8 <tcp_abandon+0x160>)
 8013b80:	4852      	ldr	r0, [pc, #328]	; (8013ccc <tcp_abandon+0x164>)
 8013b82:	f00c f819 	bl	801fbb8 <iprintf>
 8013b86:	e099      	b.n	8013cbc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	7d1b      	ldrb	r3, [r3, #20]
 8013b8c:	2b01      	cmp	r3, #1
 8013b8e:	d106      	bne.n	8013b9e <tcp_abandon+0x36>
 8013b90:	4b4c      	ldr	r3, [pc, #304]	; (8013cc4 <tcp_abandon+0x15c>)
 8013b92:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013b96:	494e      	ldr	r1, [pc, #312]	; (8013cd0 <tcp_abandon+0x168>)
 8013b98:	484c      	ldr	r0, [pc, #304]	; (8013ccc <tcp_abandon+0x164>)
 8013b9a:	f00c f80d 	bl	801fbb8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	7d1b      	ldrb	r3, [r3, #20]
 8013ba2:	2b0a      	cmp	r3, #10
 8013ba4:	d107      	bne.n	8013bb6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013ba6:	6879      	ldr	r1, [r7, #4]
 8013ba8:	484a      	ldr	r0, [pc, #296]	; (8013cd4 <tcp_abandon+0x16c>)
 8013baa:	f001 fa39 	bl	8015020 <tcp_pcb_remove>
    tcp_free(pcb);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7ff fd54 	bl	801365c <tcp_free>
 8013bb4:	e082      	b.n	8013cbc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bc2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bc8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bd0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	691b      	ldr	r3, [r3, #16]
 8013bd6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	7d1b      	ldrb	r3, [r3, #20]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d126      	bne.n	8013c2e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	8adb      	ldrh	r3, [r3, #22]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d02e      	beq.n	8013c46 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013be8:	4b3b      	ldr	r3, [pc, #236]	; (8013cd8 <tcp_abandon+0x170>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d105      	bne.n	8013bfe <tcp_abandon+0x96>
 8013bf2:	4b39      	ldr	r3, [pc, #228]	; (8013cd8 <tcp_abandon+0x170>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	4a37      	ldr	r2, [pc, #220]	; (8013cd8 <tcp_abandon+0x170>)
 8013bfa:	6013      	str	r3, [r2, #0]
 8013bfc:	e013      	b.n	8013c26 <tcp_abandon+0xbe>
 8013bfe:	4b36      	ldr	r3, [pc, #216]	; (8013cd8 <tcp_abandon+0x170>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	61fb      	str	r3, [r7, #28]
 8013c04:	e00c      	b.n	8013c20 <tcp_abandon+0xb8>
 8013c06:	69fb      	ldr	r3, [r7, #28]
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	687a      	ldr	r2, [r7, #4]
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d104      	bne.n	8013c1a <tcp_abandon+0xb2>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	68da      	ldr	r2, [r3, #12]
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	60da      	str	r2, [r3, #12]
 8013c18:	e005      	b.n	8013c26 <tcp_abandon+0xbe>
 8013c1a:	69fb      	ldr	r3, [r7, #28]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	61fb      	str	r3, [r7, #28]
 8013c20:	69fb      	ldr	r3, [r7, #28]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d1ef      	bne.n	8013c06 <tcp_abandon+0x9e>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	60da      	str	r2, [r3, #12]
 8013c2c:	e00b      	b.n	8013c46 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	8adb      	ldrh	r3, [r3, #22]
 8013c36:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013c38:	6879      	ldr	r1, [r7, #4]
 8013c3a:	4828      	ldr	r0, [pc, #160]	; (8013cdc <tcp_abandon+0x174>)
 8013c3c:	f001 f9f0 	bl	8015020 <tcp_pcb_remove>
 8013c40:	4b27      	ldr	r3, [pc, #156]	; (8013ce0 <tcp_abandon+0x178>)
 8013c42:	2201      	movs	r2, #1
 8013c44:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d004      	beq.n	8013c58 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c52:	4618      	mov	r0, r3
 8013c54:	f000 fec4 	bl	80149e0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d004      	beq.n	8013c6a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c64:	4618      	mov	r0, r3
 8013c66:	f000 febb 	bl	80149e0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d004      	beq.n	8013c7c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c76:	4618      	mov	r0, r3
 8013c78:	f000 feb2 	bl	80149e0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d00e      	beq.n	8013ca0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013c82:	6879      	ldr	r1, [r7, #4]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	3304      	adds	r3, #4
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	8b12      	ldrh	r2, [r2, #24]
 8013c8c:	9202      	str	r2, [sp, #8]
 8013c8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013c90:	9201      	str	r2, [sp, #4]
 8013c92:	9300      	str	r3, [sp, #0]
 8013c94:	460b      	mov	r3, r1
 8013c96:	697a      	ldr	r2, [r7, #20]
 8013c98:	69b9      	ldr	r1, [r7, #24]
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f005 fb8c 	bl	80193b8 <tcp_rst>
    }
    last_state = pcb->state;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	7d1b      	ldrb	r3, [r3, #20]
 8013ca4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7ff fcd8 	bl	801365c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013cac:	693b      	ldr	r3, [r7, #16]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d004      	beq.n	8013cbc <tcp_abandon+0x154>
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	f06f 010c 	mvn.w	r1, #12
 8013cb8:	68f8      	ldr	r0, [r7, #12]
 8013cba:	4798      	blx	r3
  }
}
 8013cbc:	3728      	adds	r7, #40	; 0x28
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}
 8013cc2:	bf00      	nop
 8013cc4:	0802250c 	.word	0x0802250c
 8013cc8:	08022650 	.word	0x08022650
 8013ccc:	08022550 	.word	0x08022550
 8013cd0:	0802266c 	.word	0x0802266c
 8013cd4:	2000ea04 	.word	0x2000ea04
 8013cd8:	2000ea00 	.word	0x2000ea00
 8013cdc:	2000e9f4 	.word	0x2000e9f4
 8013ce0:	2000e9f0 	.word	0x2000e9f0

08013ce4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013cec:	2101      	movs	r1, #1
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	f7ff ff3a 	bl	8013b68 <tcp_abandon>
}
 8013cf4:	bf00      	nop
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b088      	sub	sp, #32
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	60b9      	str	r1, [r7, #8]
 8013d06:	4613      	mov	r3, r2
 8013d08:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013d0a:	2304      	movs	r3, #4
 8013d0c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d101      	bne.n	8013d18 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013d14:	4b3e      	ldr	r3, [pc, #248]	; (8013e10 <tcp_bind+0x114>)
 8013d16:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d109      	bne.n	8013d32 <tcp_bind+0x36>
 8013d1e:	4b3d      	ldr	r3, [pc, #244]	; (8013e14 <tcp_bind+0x118>)
 8013d20:	f240 22a9 	movw	r2, #681	; 0x2a9
 8013d24:	493c      	ldr	r1, [pc, #240]	; (8013e18 <tcp_bind+0x11c>)
 8013d26:	483d      	ldr	r0, [pc, #244]	; (8013e1c <tcp_bind+0x120>)
 8013d28:	f00b ff46 	bl	801fbb8 <iprintf>
 8013d2c:	f06f 030f 	mvn.w	r3, #15
 8013d30:	e06a      	b.n	8013e08 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	7d1b      	ldrb	r3, [r3, #20]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d009      	beq.n	8013d4e <tcp_bind+0x52>
 8013d3a:	4b36      	ldr	r3, [pc, #216]	; (8013e14 <tcp_bind+0x118>)
 8013d3c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013d40:	4937      	ldr	r1, [pc, #220]	; (8013e20 <tcp_bind+0x124>)
 8013d42:	4836      	ldr	r0, [pc, #216]	; (8013e1c <tcp_bind+0x120>)
 8013d44:	f00b ff38 	bl	801fbb8 <iprintf>
 8013d48:	f06f 0305 	mvn.w	r3, #5
 8013d4c:	e05c      	b.n	8013e08 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013d4e:	88fb      	ldrh	r3, [r7, #6]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d109      	bne.n	8013d68 <tcp_bind+0x6c>
    port = tcp_new_port();
 8013d54:	f000 f9de 	bl	8014114 <tcp_new_port>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013d5c:	88fb      	ldrh	r3, [r7, #6]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d135      	bne.n	8013dce <tcp_bind+0xd2>
      return ERR_BUF;
 8013d62:	f06f 0301 	mvn.w	r3, #1
 8013d66:	e04f      	b.n	8013e08 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013d68:	2300      	movs	r3, #0
 8013d6a:	61fb      	str	r3, [r7, #28]
 8013d6c:	e02b      	b.n	8013dc6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013d6e:	4a2d      	ldr	r2, [pc, #180]	; (8013e24 <tcp_bind+0x128>)
 8013d70:	69fb      	ldr	r3, [r7, #28]
 8013d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	61bb      	str	r3, [r7, #24]
 8013d7a:	e01e      	b.n	8013dba <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013d7c:	69bb      	ldr	r3, [r7, #24]
 8013d7e:	8adb      	ldrh	r3, [r3, #22]
 8013d80:	88fa      	ldrh	r2, [r7, #6]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d116      	bne.n	8013db4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013d86:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d010      	beq.n	8013dae <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013d8c:	69bb      	ldr	r3, [r7, #24]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d00c      	beq.n	8013dae <tcp_bind+0xb2>
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d009      	beq.n	8013dae <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d005      	beq.n	8013dae <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013da2:	69bb      	ldr	r3, [r7, #24]
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d102      	bne.n	8013db4 <tcp_bind+0xb8>
              return ERR_USE;
 8013dae:	f06f 0307 	mvn.w	r3, #7
 8013db2:	e029      	b.n	8013e08 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013db4:	69bb      	ldr	r3, [r7, #24]
 8013db6:	68db      	ldr	r3, [r3, #12]
 8013db8:	61bb      	str	r3, [r7, #24]
 8013dba:	69bb      	ldr	r3, [r7, #24]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d1dd      	bne.n	8013d7c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013dc0:	69fb      	ldr	r3, [r7, #28]
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	61fb      	str	r3, [r7, #28]
 8013dc6:	69fa      	ldr	r2, [r7, #28]
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	dbcf      	blt.n	8013d6e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d00c      	beq.n	8013dee <tcp_bind+0xf2>
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d008      	beq.n	8013dee <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d002      	beq.n	8013de8 <tcp_bind+0xec>
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	e000      	b.n	8013dea <tcp_bind+0xee>
 8013de8:	2300      	movs	r3, #0
 8013dea:	68fa      	ldr	r2, [r7, #12]
 8013dec:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	88fa      	ldrh	r2, [r7, #6]
 8013df2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013df4:	4b0c      	ldr	r3, [pc, #48]	; (8013e28 <tcp_bind+0x12c>)
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	60da      	str	r2, [r3, #12]
 8013dfc:	4a0a      	ldr	r2, [pc, #40]	; (8013e28 <tcp_bind+0x12c>)
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	6013      	str	r3, [r2, #0]
 8013e02:	f005 fc9b 	bl	801973c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013e06:	2300      	movs	r3, #0
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3720      	adds	r7, #32
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	08024a48 	.word	0x08024a48
 8013e14:	0802250c 	.word	0x0802250c
 8013e18:	080226a0 	.word	0x080226a0
 8013e1c:	08022550 	.word	0x08022550
 8013e20:	080226b8 	.word	0x080226b8
 8013e24:	08024a10 	.word	0x08024a10
 8013e28:	2000ea00 	.word	0x2000ea00

08013e2c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b084      	sub	sp, #16
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	4613      	mov	r3, r2
 8013e38:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d106      	bne.n	8013e4e <tcp_accept_null+0x22>
 8013e40:	4b07      	ldr	r3, [pc, #28]	; (8013e60 <tcp_accept_null+0x34>)
 8013e42:	f240 320f 	movw	r2, #783	; 0x30f
 8013e46:	4907      	ldr	r1, [pc, #28]	; (8013e64 <tcp_accept_null+0x38>)
 8013e48:	4807      	ldr	r0, [pc, #28]	; (8013e68 <tcp_accept_null+0x3c>)
 8013e4a:	f00b feb5 	bl	801fbb8 <iprintf>

  tcp_abort(pcb);
 8013e4e:	68b8      	ldr	r0, [r7, #8]
 8013e50:	f7ff ff48 	bl	8013ce4 <tcp_abort>

  return ERR_ABRT;
 8013e54:	f06f 030c 	mvn.w	r3, #12
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3710      	adds	r7, #16
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	0802250c 	.word	0x0802250c
 8013e64:	080226e0 	.word	0x080226e0
 8013e68:	08022550 	.word	0x08022550

08013e6c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b088      	sub	sp, #32
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	460b      	mov	r3, r1
 8013e76:	607a      	str	r2, [r7, #4]
 8013e78:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d109      	bne.n	8013e98 <tcp_listen_with_backlog_and_err+0x2c>
 8013e84:	4b47      	ldr	r3, [pc, #284]	; (8013fa4 <tcp_listen_with_backlog_and_err+0x138>)
 8013e86:	f240 3259 	movw	r2, #857	; 0x359
 8013e8a:	4947      	ldr	r1, [pc, #284]	; (8013fa8 <tcp_listen_with_backlog_and_err+0x13c>)
 8013e8c:	4847      	ldr	r0, [pc, #284]	; (8013fac <tcp_listen_with_backlog_and_err+0x140>)
 8013e8e:	f00b fe93 	bl	801fbb8 <iprintf>
 8013e92:	23f0      	movs	r3, #240	; 0xf0
 8013e94:	76fb      	strb	r3, [r7, #27]
 8013e96:	e079      	b.n	8013f8c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	7d1b      	ldrb	r3, [r3, #20]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d009      	beq.n	8013eb4 <tcp_listen_with_backlog_and_err+0x48>
 8013ea0:	4b40      	ldr	r3, [pc, #256]	; (8013fa4 <tcp_listen_with_backlog_and_err+0x138>)
 8013ea2:	f240 325a 	movw	r2, #858	; 0x35a
 8013ea6:	4942      	ldr	r1, [pc, #264]	; (8013fb0 <tcp_listen_with_backlog_and_err+0x144>)
 8013ea8:	4840      	ldr	r0, [pc, #256]	; (8013fac <tcp_listen_with_backlog_and_err+0x140>)
 8013eaa:	f00b fe85 	bl	801fbb8 <iprintf>
 8013eae:	23f1      	movs	r3, #241	; 0xf1
 8013eb0:	76fb      	strb	r3, [r7, #27]
 8013eb2:	e06b      	b.n	8013f8c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	7d1b      	ldrb	r3, [r3, #20]
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d104      	bne.n	8013ec6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013ec0:	23f7      	movs	r3, #247	; 0xf7
 8013ec2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013ec4:	e062      	b.n	8013f8c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013ec6:	2002      	movs	r0, #2
 8013ec8:	f7fe fa0a 	bl	80122e0 <memp_malloc>
 8013ecc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013ece:	69fb      	ldr	r3, [r7, #28]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d102      	bne.n	8013eda <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013ed4:	23ff      	movs	r3, #255	; 0xff
 8013ed6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013ed8:	e058      	b.n	8013f8c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	691a      	ldr	r2, [r3, #16]
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	8ada      	ldrh	r2, [r3, #22]
 8013ee6:	69fb      	ldr	r3, [r7, #28]
 8013ee8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013eea:	69fb      	ldr	r3, [r7, #28]
 8013eec:	2201      	movs	r2, #1
 8013eee:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	7d5a      	ldrb	r2, [r3, #21]
 8013ef4:	69fb      	ldr	r3, [r7, #28]
 8013ef6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	7a5a      	ldrb	r2, [r3, #9]
 8013efc:	69fb      	ldr	r3, [r7, #28]
 8013efe:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	2200      	movs	r2, #0
 8013f04:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	7ada      	ldrb	r2, [r3, #11]
 8013f0a:	69fb      	ldr	r3, [r7, #28]
 8013f0c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	7a9a      	ldrb	r2, [r3, #10]
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681a      	ldr	r2, [r3, #0]
 8013f1a:	69fb      	ldr	r3, [r7, #28]
 8013f1c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	8adb      	ldrh	r3, [r3, #22]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d021      	beq.n	8013f6a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013f26:	4b23      	ldr	r3, [pc, #140]	; (8013fb4 <tcp_listen_with_backlog_and_err+0x148>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	68fa      	ldr	r2, [r7, #12]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d105      	bne.n	8013f3c <tcp_listen_with_backlog_and_err+0xd0>
 8013f30:	4b20      	ldr	r3, [pc, #128]	; (8013fb4 <tcp_listen_with_backlog_and_err+0x148>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	68db      	ldr	r3, [r3, #12]
 8013f36:	4a1f      	ldr	r2, [pc, #124]	; (8013fb4 <tcp_listen_with_backlog_and_err+0x148>)
 8013f38:	6013      	str	r3, [r2, #0]
 8013f3a:	e013      	b.n	8013f64 <tcp_listen_with_backlog_and_err+0xf8>
 8013f3c:	4b1d      	ldr	r3, [pc, #116]	; (8013fb4 <tcp_listen_with_backlog_and_err+0x148>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	617b      	str	r3, [r7, #20]
 8013f42:	e00c      	b.n	8013f5e <tcp_listen_with_backlog_and_err+0xf2>
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	68db      	ldr	r3, [r3, #12]
 8013f48:	68fa      	ldr	r2, [r7, #12]
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d104      	bne.n	8013f58 <tcp_listen_with_backlog_and_err+0xec>
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	68da      	ldr	r2, [r3, #12]
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	60da      	str	r2, [r3, #12]
 8013f56:	e005      	b.n	8013f64 <tcp_listen_with_backlog_and_err+0xf8>
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	68db      	ldr	r3, [r3, #12]
 8013f5c:	617b      	str	r3, [r7, #20]
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d1ef      	bne.n	8013f44 <tcp_listen_with_backlog_and_err+0xd8>
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2200      	movs	r2, #0
 8013f68:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013f6a:	68f8      	ldr	r0, [r7, #12]
 8013f6c:	f7ff fb76 	bl	801365c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013f70:	69fb      	ldr	r3, [r7, #28]
 8013f72:	4a11      	ldr	r2, [pc, #68]	; (8013fb8 <tcp_listen_with_backlog_and_err+0x14c>)
 8013f74:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013f76:	4b11      	ldr	r3, [pc, #68]	; (8013fbc <tcp_listen_with_backlog_and_err+0x150>)
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	69fb      	ldr	r3, [r7, #28]
 8013f7c:	60da      	str	r2, [r3, #12]
 8013f7e:	4a0f      	ldr	r2, [pc, #60]	; (8013fbc <tcp_listen_with_backlog_and_err+0x150>)
 8013f80:	69fb      	ldr	r3, [r7, #28]
 8013f82:	6013      	str	r3, [r2, #0]
 8013f84:	f005 fbda 	bl	801973c <tcp_timer_needed>
  res = ERR_OK;
 8013f88:	2300      	movs	r3, #0
 8013f8a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d002      	beq.n	8013f98 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	7efa      	ldrb	r2, [r7, #27]
 8013f96:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013f98:	69fb      	ldr	r3, [r7, #28]
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3720      	adds	r7, #32
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	0802250c 	.word	0x0802250c
 8013fa8:	08022700 	.word	0x08022700
 8013fac:	08022550 	.word	0x08022550
 8013fb0:	08022730 	.word	0x08022730
 8013fb4:	2000ea00 	.word	0x2000ea00
 8013fb8:	08013e2d 	.word	0x08013e2d
 8013fbc:	2000e9fc 	.word	0x2000e9fc

08013fc0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d106      	bne.n	8013fdc <tcp_update_rcv_ann_wnd+0x1c>
 8013fce:	4b25      	ldr	r3, [pc, #148]	; (8014064 <tcp_update_rcv_ann_wnd+0xa4>)
 8013fd0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013fd4:	4924      	ldr	r1, [pc, #144]	; (8014068 <tcp_update_rcv_ann_wnd+0xa8>)
 8013fd6:	4825      	ldr	r0, [pc, #148]	; (801406c <tcp_update_rcv_ann_wnd+0xac>)
 8013fd8:	f00b fdee 	bl	801fbb8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fe0:	687a      	ldr	r2, [r7, #4]
 8013fe2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013fe4:	4413      	add	r3, r2
 8013fe6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fec:	687a      	ldr	r2, [r7, #4]
 8013fee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013ff0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013ff4:	bf28      	it	cs
 8013ff6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013ffa:	b292      	uxth	r2, r2
 8013ffc:	4413      	add	r3, r2
 8013ffe:	68fa      	ldr	r2, [r7, #12]
 8014000:	1ad3      	subs	r3, r2, r3
 8014002:	2b00      	cmp	r3, #0
 8014004:	db08      	blt.n	8014018 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014012:	68fa      	ldr	r2, [r7, #12]
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	e020      	b.n	801405a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014020:	1ad3      	subs	r3, r2, r3
 8014022:	2b00      	cmp	r3, #0
 8014024:	dd03      	ble.n	801402e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2200      	movs	r2, #0
 801402a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801402c:	e014      	b.n	8014058 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014036:	1ad3      	subs	r3, r2, r3
 8014038:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014040:	d306      	bcc.n	8014050 <tcp_update_rcv_ann_wnd+0x90>
 8014042:	4b08      	ldr	r3, [pc, #32]	; (8014064 <tcp_update_rcv_ann_wnd+0xa4>)
 8014044:	f240 32b6 	movw	r2, #950	; 0x3b6
 8014048:	4909      	ldr	r1, [pc, #36]	; (8014070 <tcp_update_rcv_ann_wnd+0xb0>)
 801404a:	4808      	ldr	r0, [pc, #32]	; (801406c <tcp_update_rcv_ann_wnd+0xac>)
 801404c:	f00b fdb4 	bl	801fbb8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	b29a      	uxth	r2, r3
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8014058:	2300      	movs	r3, #0
  }
}
 801405a:	4618      	mov	r0, r3
 801405c:	3710      	adds	r7, #16
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	0802250c 	.word	0x0802250c
 8014068:	08022768 	.word	0x08022768
 801406c:	08022550 	.word	0x08022550
 8014070:	0802278c 	.word	0x0802278c

08014074 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
 801407c:	460b      	mov	r3, r1
 801407e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d107      	bne.n	8014096 <tcp_recved+0x22>
 8014086:	4b1f      	ldr	r3, [pc, #124]	; (8014104 <tcp_recved+0x90>)
 8014088:	f240 32cf 	movw	r2, #975	; 0x3cf
 801408c:	491e      	ldr	r1, [pc, #120]	; (8014108 <tcp_recved+0x94>)
 801408e:	481f      	ldr	r0, [pc, #124]	; (801410c <tcp_recved+0x98>)
 8014090:	f00b fd92 	bl	801fbb8 <iprintf>
 8014094:	e032      	b.n	80140fc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	7d1b      	ldrb	r3, [r3, #20]
 801409a:	2b01      	cmp	r3, #1
 801409c:	d106      	bne.n	80140ac <tcp_recved+0x38>
 801409e:	4b19      	ldr	r3, [pc, #100]	; (8014104 <tcp_recved+0x90>)
 80140a0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80140a4:	491a      	ldr	r1, [pc, #104]	; (8014110 <tcp_recved+0x9c>)
 80140a6:	4819      	ldr	r0, [pc, #100]	; (801410c <tcp_recved+0x98>)
 80140a8:	f00b fd86 	bl	801fbb8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80140b0:	887b      	ldrh	r3, [r7, #2]
 80140b2:	4413      	add	r3, r2
 80140b4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80140b6:	89fb      	ldrh	r3, [r7, #14]
 80140b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80140bc:	d804      	bhi.n	80140c8 <tcp_recved+0x54>
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80140c2:	89fa      	ldrh	r2, [r7, #14]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d204      	bcs.n	80140d2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80140ce:	851a      	strh	r2, [r3, #40]	; 0x28
 80140d0:	e002      	b.n	80140d8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	89fa      	ldrh	r2, [r7, #14]
 80140d6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f7ff ff71 	bl	8013fc0 <tcp_update_rcv_ann_wnd>
 80140de:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80140e6:	d309      	bcc.n	80140fc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	8b5b      	ldrh	r3, [r3, #26]
 80140ec:	f043 0302 	orr.w	r3, r3, #2
 80140f0:	b29a      	uxth	r2, r3
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f004 fbaa 	bl	8018850 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80140fc:	3710      	adds	r7, #16
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
 8014102:	bf00      	nop
 8014104:	0802250c 	.word	0x0802250c
 8014108:	080227a8 	.word	0x080227a8
 801410c:	08022550 	.word	0x08022550
 8014110:	080227c0 	.word	0x080227c0

08014114 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014114:	b480      	push	{r7}
 8014116:	b083      	sub	sp, #12
 8014118:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801411a:	2300      	movs	r3, #0
 801411c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801411e:	4b1e      	ldr	r3, [pc, #120]	; (8014198 <tcp_new_port+0x84>)
 8014120:	881b      	ldrh	r3, [r3, #0]
 8014122:	3301      	adds	r3, #1
 8014124:	b29a      	uxth	r2, r3
 8014126:	4b1c      	ldr	r3, [pc, #112]	; (8014198 <tcp_new_port+0x84>)
 8014128:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801412a:	4b1b      	ldr	r3, [pc, #108]	; (8014198 <tcp_new_port+0x84>)
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014132:	4293      	cmp	r3, r2
 8014134:	d103      	bne.n	801413e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8014136:	4b18      	ldr	r3, [pc, #96]	; (8014198 <tcp_new_port+0x84>)
 8014138:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801413c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801413e:	2300      	movs	r3, #0
 8014140:	71fb      	strb	r3, [r7, #7]
 8014142:	e01e      	b.n	8014182 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014144:	79fb      	ldrb	r3, [r7, #7]
 8014146:	4a15      	ldr	r2, [pc, #84]	; (801419c <tcp_new_port+0x88>)
 8014148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	603b      	str	r3, [r7, #0]
 8014150:	e011      	b.n	8014176 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	8ada      	ldrh	r2, [r3, #22]
 8014156:	4b10      	ldr	r3, [pc, #64]	; (8014198 <tcp_new_port+0x84>)
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	429a      	cmp	r2, r3
 801415c:	d108      	bne.n	8014170 <tcp_new_port+0x5c>
        n++;
 801415e:	88bb      	ldrh	r3, [r7, #4]
 8014160:	3301      	adds	r3, #1
 8014162:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014164:	88bb      	ldrh	r3, [r7, #4]
 8014166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801416a:	d3d8      	bcc.n	801411e <tcp_new_port+0xa>
          return 0;
 801416c:	2300      	movs	r3, #0
 801416e:	e00d      	b.n	801418c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	68db      	ldr	r3, [r3, #12]
 8014174:	603b      	str	r3, [r7, #0]
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d1ea      	bne.n	8014152 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801417c:	79fb      	ldrb	r3, [r7, #7]
 801417e:	3301      	adds	r3, #1
 8014180:	71fb      	strb	r3, [r7, #7]
 8014182:	79fb      	ldrb	r3, [r7, #7]
 8014184:	2b03      	cmp	r3, #3
 8014186:	d9dd      	bls.n	8014144 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8014188:	4b03      	ldr	r3, [pc, #12]	; (8014198 <tcp_new_port+0x84>)
 801418a:	881b      	ldrh	r3, [r3, #0]
}
 801418c:	4618      	mov	r0, r3
 801418e:	370c      	adds	r7, #12
 8014190:	46bd      	mov	sp, r7
 8014192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014196:	4770      	bx	lr
 8014198:	200000e4 	.word	0x200000e4
 801419c:	08024a10 	.word	0x08024a10

080141a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80141a0:	b5b0      	push	{r4, r5, r7, lr}
 80141a2:	b090      	sub	sp, #64	; 0x40
 80141a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80141a6:	2300      	movs	r3, #0
 80141a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80141ac:	4b94      	ldr	r3, [pc, #592]	; (8014400 <tcp_slowtmr+0x260>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	3301      	adds	r3, #1
 80141b2:	4a93      	ldr	r2, [pc, #588]	; (8014400 <tcp_slowtmr+0x260>)
 80141b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80141b6:	4b93      	ldr	r3, [pc, #588]	; (8014404 <tcp_slowtmr+0x264>)
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	3301      	adds	r3, #1
 80141bc:	b2da      	uxtb	r2, r3
 80141be:	4b91      	ldr	r3, [pc, #580]	; (8014404 <tcp_slowtmr+0x264>)
 80141c0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80141c2:	2300      	movs	r3, #0
 80141c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80141c6:	4b90      	ldr	r3, [pc, #576]	; (8014408 <tcp_slowtmr+0x268>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80141cc:	e29f      	b.n	801470e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80141ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d0:	7d1b      	ldrb	r3, [r3, #20]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d106      	bne.n	80141e4 <tcp_slowtmr+0x44>
 80141d6:	4b8d      	ldr	r3, [pc, #564]	; (801440c <tcp_slowtmr+0x26c>)
 80141d8:	f240 42be 	movw	r2, #1214	; 0x4be
 80141dc:	498c      	ldr	r1, [pc, #560]	; (8014410 <tcp_slowtmr+0x270>)
 80141de:	488d      	ldr	r0, [pc, #564]	; (8014414 <tcp_slowtmr+0x274>)
 80141e0:	f00b fcea 	bl	801fbb8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80141e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e6:	7d1b      	ldrb	r3, [r3, #20]
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d106      	bne.n	80141fa <tcp_slowtmr+0x5a>
 80141ec:	4b87      	ldr	r3, [pc, #540]	; (801440c <tcp_slowtmr+0x26c>)
 80141ee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80141f2:	4989      	ldr	r1, [pc, #548]	; (8014418 <tcp_slowtmr+0x278>)
 80141f4:	4887      	ldr	r0, [pc, #540]	; (8014414 <tcp_slowtmr+0x274>)
 80141f6:	f00b fcdf 	bl	801fbb8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80141fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141fc:	7d1b      	ldrb	r3, [r3, #20]
 80141fe:	2b0a      	cmp	r3, #10
 8014200:	d106      	bne.n	8014210 <tcp_slowtmr+0x70>
 8014202:	4b82      	ldr	r3, [pc, #520]	; (801440c <tcp_slowtmr+0x26c>)
 8014204:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8014208:	4984      	ldr	r1, [pc, #528]	; (801441c <tcp_slowtmr+0x27c>)
 801420a:	4882      	ldr	r0, [pc, #520]	; (8014414 <tcp_slowtmr+0x274>)
 801420c:	f00b fcd4 	bl	801fbb8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014212:	7f9a      	ldrb	r2, [r3, #30]
 8014214:	4b7b      	ldr	r3, [pc, #492]	; (8014404 <tcp_slowtmr+0x264>)
 8014216:	781b      	ldrb	r3, [r3, #0]
 8014218:	429a      	cmp	r2, r3
 801421a:	d105      	bne.n	8014228 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014222:	68db      	ldr	r3, [r3, #12]
 8014224:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8014226:	e272      	b.n	801470e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8014228:	4b76      	ldr	r3, [pc, #472]	; (8014404 <tcp_slowtmr+0x264>)
 801422a:	781a      	ldrb	r2, [r3, #0]
 801422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8014230:	2300      	movs	r3, #0
 8014232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8014236:	2300      	movs	r3, #0
 8014238:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801423e:	7d1b      	ldrb	r3, [r3, #20]
 8014240:	2b02      	cmp	r3, #2
 8014242:	d10a      	bne.n	801425a <tcp_slowtmr+0xba>
 8014244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801424a:	2b05      	cmp	r3, #5
 801424c:	d905      	bls.n	801425a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801424e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014252:	3301      	adds	r3, #1
 8014254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014258:	e11e      	b.n	8014498 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801425c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014260:	2b0b      	cmp	r3, #11
 8014262:	d905      	bls.n	8014270 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8014264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014268:	3301      	adds	r3, #1
 801426a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801426e:	e113      	b.n	8014498 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8014270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014272:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014276:	2b00      	cmp	r3, #0
 8014278:	d075      	beq.n	8014366 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801427e:	2b00      	cmp	r3, #0
 8014280:	d006      	beq.n	8014290 <tcp_slowtmr+0xf0>
 8014282:	4b62      	ldr	r3, [pc, #392]	; (801440c <tcp_slowtmr+0x26c>)
 8014284:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8014288:	4965      	ldr	r1, [pc, #404]	; (8014420 <tcp_slowtmr+0x280>)
 801428a:	4862      	ldr	r0, [pc, #392]	; (8014414 <tcp_slowtmr+0x274>)
 801428c:	f00b fc94 	bl	801fbb8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014294:	2b00      	cmp	r3, #0
 8014296:	d106      	bne.n	80142a6 <tcp_slowtmr+0x106>
 8014298:	4b5c      	ldr	r3, [pc, #368]	; (801440c <tcp_slowtmr+0x26c>)
 801429a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801429e:	4961      	ldr	r1, [pc, #388]	; (8014424 <tcp_slowtmr+0x284>)
 80142a0:	485c      	ldr	r0, [pc, #368]	; (8014414 <tcp_slowtmr+0x274>)
 80142a2:	f00b fc89 	bl	801fbb8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80142a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142ac:	2b0b      	cmp	r3, #11
 80142ae:	d905      	bls.n	80142bc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80142b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142b4:	3301      	adds	r3, #1
 80142b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80142ba:	e0ed      	b.n	8014498 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80142bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80142c2:	3b01      	subs	r3, #1
 80142c4:	4a58      	ldr	r2, [pc, #352]	; (8014428 <tcp_slowtmr+0x288>)
 80142c6:	5cd3      	ldrb	r3, [r2, r3]
 80142c8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80142ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80142d0:	7c7a      	ldrb	r2, [r7, #17]
 80142d2:	429a      	cmp	r2, r3
 80142d4:	d907      	bls.n	80142e6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80142d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80142dc:	3301      	adds	r3, #1
 80142de:	b2da      	uxtb	r2, r3
 80142e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80142e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80142ec:	7c7a      	ldrb	r2, [r7, #17]
 80142ee:	429a      	cmp	r2, r3
 80142f0:	f200 80d2 	bhi.w	8014498 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80142f4:	2301      	movs	r3, #1
 80142f6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80142f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d108      	bne.n	8014314 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8014302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014304:	f005 f94c 	bl	80195a0 <tcp_zero_window_probe>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d014      	beq.n	8014338 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801430e:	2300      	movs	r3, #0
 8014310:	623b      	str	r3, [r7, #32]
 8014312:	e011      	b.n	8014338 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801431a:	4619      	mov	r1, r3
 801431c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801431e:	f004 f811 	bl	8018344 <tcp_split_unsent_seg>
 8014322:	4603      	mov	r3, r0
 8014324:	2b00      	cmp	r3, #0
 8014326:	d107      	bne.n	8014338 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8014328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801432a:	f004 fa91 	bl	8018850 <tcp_output>
 801432e:	4603      	mov	r3, r0
 8014330:	2b00      	cmp	r3, #0
 8014332:	d101      	bne.n	8014338 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014334:	2300      	movs	r3, #0
 8014336:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014338:	6a3b      	ldr	r3, [r7, #32]
 801433a:	2b00      	cmp	r3, #0
 801433c:	f000 80ac 	beq.w	8014498 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014342:	2200      	movs	r2, #0
 8014344:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801434e:	2b06      	cmp	r3, #6
 8014350:	f200 80a2 	bhi.w	8014498 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8014354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014356:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801435a:	3301      	adds	r3, #1
 801435c:	b2da      	uxtb	r2, r3
 801435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014360:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8014364:	e098      	b.n	8014498 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014368:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801436c:	2b00      	cmp	r3, #0
 801436e:	db0f      	blt.n	8014390 <tcp_slowtmr+0x1f0>
 8014370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014372:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014376:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801437a:	4293      	cmp	r3, r2
 801437c:	d008      	beq.n	8014390 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014380:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014384:	b29b      	uxth	r3, r3
 8014386:	3301      	adds	r3, #1
 8014388:	b29b      	uxth	r3, r3
 801438a:	b21a      	sxth	r2, r3
 801438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8014390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014392:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8014396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014398:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801439c:	429a      	cmp	r2, r3
 801439e:	db7b      	blt.n	8014498 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80143a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80143a2:	f004 fd47 	bl	8018e34 <tcp_rexmit_rto_prepare>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d007      	beq.n	80143bc <tcp_slowtmr+0x21c>
 80143ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d171      	bne.n	8014498 <tcp_slowtmr+0x2f8>
 80143b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d06d      	beq.n	8014498 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80143bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143be:	7d1b      	ldrb	r3, [r3, #20]
 80143c0:	2b02      	cmp	r3, #2
 80143c2:	d03a      	beq.n	801443a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80143c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143ca:	2b0c      	cmp	r3, #12
 80143cc:	bf28      	it	cs
 80143ce:	230c      	movcs	r3, #12
 80143d0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80143d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143d8:	10db      	asrs	r3, r3, #3
 80143da:	b21b      	sxth	r3, r3
 80143dc:	461a      	mov	r2, r3
 80143de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80143e4:	4413      	add	r3, r2
 80143e6:	7efa      	ldrb	r2, [r7, #27]
 80143e8:	4910      	ldr	r1, [pc, #64]	; (801442c <tcp_slowtmr+0x28c>)
 80143ea:	5c8a      	ldrb	r2, [r1, r2]
 80143ec:	4093      	lsls	r3, r2
 80143ee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80143f6:	4293      	cmp	r3, r2
 80143f8:	dc1a      	bgt.n	8014430 <tcp_slowtmr+0x290>
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	b21a      	sxth	r2, r3
 80143fe:	e019      	b.n	8014434 <tcp_slowtmr+0x294>
 8014400:	2000e9f8 	.word	0x2000e9f8
 8014404:	20005faa 	.word	0x20005faa
 8014408:	2000e9f4 	.word	0x2000e9f4
 801440c:	0802250c 	.word	0x0802250c
 8014410:	08022850 	.word	0x08022850
 8014414:	08022550 	.word	0x08022550
 8014418:	0802287c 	.word	0x0802287c
 801441c:	080228a8 	.word	0x080228a8
 8014420:	080228d8 	.word	0x080228d8
 8014424:	0802290c 	.word	0x0802290c
 8014428:	08024a08 	.word	0x08024a08
 801442c:	080249f8 	.word	0x080249f8
 8014430:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014436:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443c:	2200      	movs	r2, #0
 801443e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014442:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014448:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801444c:	4293      	cmp	r3, r2
 801444e:	bf28      	it	cs
 8014450:	4613      	movcs	r3, r2
 8014452:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014454:	8a7b      	ldrh	r3, [r7, #18]
 8014456:	085b      	lsrs	r3, r3, #1
 8014458:	b29a      	uxth	r2, r3
 801445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801445c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014462:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801446a:	005b      	lsls	r3, r3, #1
 801446c:	b29b      	uxth	r3, r3
 801446e:	429a      	cmp	r2, r3
 8014470:	d206      	bcs.n	8014480 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014476:	005b      	lsls	r3, r3, #1
 8014478:	b29a      	uxth	r2, r3
 801447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8014480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014482:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8014484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014486:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448c:	2200      	movs	r2, #0
 801448e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8014492:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014494:	f004 fd3e 	bl	8018f14 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8014498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801449a:	7d1b      	ldrb	r3, [r3, #20]
 801449c:	2b06      	cmp	r3, #6
 801449e:	d111      	bne.n	80144c4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80144a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a2:	8b5b      	ldrh	r3, [r3, #26]
 80144a4:	f003 0310 	and.w	r3, r3, #16
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d00b      	beq.n	80144c4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144ac:	4b9d      	ldr	r3, [pc, #628]	; (8014724 <tcp_slowtmr+0x584>)
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b2:	6a1b      	ldr	r3, [r3, #32]
 80144b4:	1ad3      	subs	r3, r2, r3
 80144b6:	2b28      	cmp	r3, #40	; 0x28
 80144b8:	d904      	bls.n	80144c4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80144ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144be:	3301      	adds	r3, #1
 80144c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80144c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c6:	7a5b      	ldrb	r3, [r3, #9]
 80144c8:	f003 0308 	and.w	r3, r3, #8
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d04c      	beq.n	801456a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80144d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80144d4:	2b04      	cmp	r3, #4
 80144d6:	d003      	beq.n	80144e0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80144d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144da:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80144dc:	2b07      	cmp	r3, #7
 80144de:	d144      	bne.n	801456a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144e0:	4b90      	ldr	r3, [pc, #576]	; (8014724 <tcp_slowtmr+0x584>)
 80144e2:	681a      	ldr	r2, [r3, #0]
 80144e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e6:	6a1b      	ldr	r3, [r3, #32]
 80144e8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80144ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80144f0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80144f4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80144f8:	498b      	ldr	r1, [pc, #556]	; (8014728 <tcp_slowtmr+0x588>)
 80144fa:	fba1 1303 	umull	r1, r3, r1, r3
 80144fe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014500:	429a      	cmp	r2, r3
 8014502:	d90a      	bls.n	801451a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014508:	3301      	adds	r3, #1
 801450a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801450e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014512:	3301      	adds	r3, #1
 8014514:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014518:	e027      	b.n	801456a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801451a:	4b82      	ldr	r3, [pc, #520]	; (8014724 <tcp_slowtmr+0x584>)
 801451c:	681a      	ldr	r2, [r3, #0]
 801451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014520:	6a1b      	ldr	r3, [r3, #32]
 8014522:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014526:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801452c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014530:	4618      	mov	r0, r3
 8014532:	4b7e      	ldr	r3, [pc, #504]	; (801472c <tcp_slowtmr+0x58c>)
 8014534:	fb03 f300 	mul.w	r3, r3, r0
 8014538:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801453a:	497b      	ldr	r1, [pc, #492]	; (8014728 <tcp_slowtmr+0x588>)
 801453c:	fba1 1303 	umull	r1, r3, r1, r3
 8014540:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014542:	429a      	cmp	r2, r3
 8014544:	d911      	bls.n	801456a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8014546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014548:	f004 ffea 	bl	8019520 <tcp_keepalive>
 801454c:	4603      	mov	r3, r0
 801454e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8014552:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014556:	2b00      	cmp	r3, #0
 8014558:	d107      	bne.n	801456a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801455c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014560:	3301      	adds	r3, #1
 8014562:	b2da      	uxtb	r2, r3
 8014564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014566:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801456e:	2b00      	cmp	r3, #0
 8014570:	d011      	beq.n	8014596 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014572:	4b6c      	ldr	r3, [pc, #432]	; (8014724 <tcp_slowtmr+0x584>)
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014578:	6a1b      	ldr	r3, [r3, #32]
 801457a:	1ad2      	subs	r2, r2, r3
 801457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801457e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014582:	4619      	mov	r1, r3
 8014584:	460b      	mov	r3, r1
 8014586:	005b      	lsls	r3, r3, #1
 8014588:	440b      	add	r3, r1
 801458a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801458c:	429a      	cmp	r2, r3
 801458e:	d302      	bcc.n	8014596 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8014590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014592:	f000 fea9 	bl	80152e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8014596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014598:	7d1b      	ldrb	r3, [r3, #20]
 801459a:	2b03      	cmp	r3, #3
 801459c:	d10b      	bne.n	80145b6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801459e:	4b61      	ldr	r3, [pc, #388]	; (8014724 <tcp_slowtmr+0x584>)
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a4:	6a1b      	ldr	r3, [r3, #32]
 80145a6:	1ad3      	subs	r3, r2, r3
 80145a8:	2b28      	cmp	r3, #40	; 0x28
 80145aa:	d904      	bls.n	80145b6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80145ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145b0:	3301      	adds	r3, #1
 80145b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80145b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b8:	7d1b      	ldrb	r3, [r3, #20]
 80145ba:	2b09      	cmp	r3, #9
 80145bc:	d10b      	bne.n	80145d6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80145be:	4b59      	ldr	r3, [pc, #356]	; (8014724 <tcp_slowtmr+0x584>)
 80145c0:	681a      	ldr	r2, [r3, #0]
 80145c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145c4:	6a1b      	ldr	r3, [r3, #32]
 80145c6:	1ad3      	subs	r3, r2, r3
 80145c8:	2bf0      	cmp	r3, #240	; 0xf0
 80145ca:	d904      	bls.n	80145d6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80145cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145d0:	3301      	adds	r3, #1
 80145d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80145d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d060      	beq.n	80146a0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80145de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145e4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80145e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145e8:	f000 fcca 	bl	8014f80 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80145ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d010      	beq.n	8014614 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80145f2:	4b4f      	ldr	r3, [pc, #316]	; (8014730 <tcp_slowtmr+0x590>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d106      	bne.n	801460a <tcp_slowtmr+0x46a>
 80145fc:	4b4d      	ldr	r3, [pc, #308]	; (8014734 <tcp_slowtmr+0x594>)
 80145fe:	f240 526d 	movw	r2, #1389	; 0x56d
 8014602:	494d      	ldr	r1, [pc, #308]	; (8014738 <tcp_slowtmr+0x598>)
 8014604:	484d      	ldr	r0, [pc, #308]	; (801473c <tcp_slowtmr+0x59c>)
 8014606:	f00b fad7 	bl	801fbb8 <iprintf>
        prev->next = pcb->next;
 801460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801460c:	68da      	ldr	r2, [r3, #12]
 801460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014610:	60da      	str	r2, [r3, #12]
 8014612:	e00f      	b.n	8014634 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014614:	4b46      	ldr	r3, [pc, #280]	; (8014730 <tcp_slowtmr+0x590>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801461a:	429a      	cmp	r2, r3
 801461c:	d006      	beq.n	801462c <tcp_slowtmr+0x48c>
 801461e:	4b45      	ldr	r3, [pc, #276]	; (8014734 <tcp_slowtmr+0x594>)
 8014620:	f240 5271 	movw	r2, #1393	; 0x571
 8014624:	4946      	ldr	r1, [pc, #280]	; (8014740 <tcp_slowtmr+0x5a0>)
 8014626:	4845      	ldr	r0, [pc, #276]	; (801473c <tcp_slowtmr+0x59c>)
 8014628:	f00b fac6 	bl	801fbb8 <iprintf>
        tcp_active_pcbs = pcb->next;
 801462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	4a3f      	ldr	r2, [pc, #252]	; (8014730 <tcp_slowtmr+0x590>)
 8014632:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014634:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014638:	2b00      	cmp	r3, #0
 801463a:	d013      	beq.n	8014664 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014642:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014644:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8014646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014648:	3304      	adds	r3, #4
 801464a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801464c:	8ad2      	ldrh	r2, [r2, #22]
 801464e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014650:	8b09      	ldrh	r1, [r1, #24]
 8014652:	9102      	str	r1, [sp, #8]
 8014654:	9201      	str	r2, [sp, #4]
 8014656:	9300      	str	r3, [sp, #0]
 8014658:	462b      	mov	r3, r5
 801465a:	4622      	mov	r2, r4
 801465c:	4601      	mov	r1, r0
 801465e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014660:	f004 feaa 	bl	80193b8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014666:	691b      	ldr	r3, [r3, #16]
 8014668:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801466c:	7d1b      	ldrb	r3, [r3, #20]
 801466e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014672:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801467a:	6838      	ldr	r0, [r7, #0]
 801467c:	f7fe ffee 	bl	801365c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8014680:	4b30      	ldr	r3, [pc, #192]	; (8014744 <tcp_slowtmr+0x5a4>)
 8014682:	2200      	movs	r2, #0
 8014684:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d004      	beq.n	8014696 <tcp_slowtmr+0x4f6>
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	f06f 010c 	mvn.w	r1, #12
 8014692:	68b8      	ldr	r0, [r7, #8]
 8014694:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014696:	4b2b      	ldr	r3, [pc, #172]	; (8014744 <tcp_slowtmr+0x5a4>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d037      	beq.n	801470e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801469e:	e590      	b.n	80141c2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80146a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80146a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a6:	68db      	ldr	r3, [r3, #12]
 80146a8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80146aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ac:	7f1b      	ldrb	r3, [r3, #28]
 80146ae:	3301      	adds	r3, #1
 80146b0:	b2da      	uxtb	r2, r3
 80146b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146b4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80146b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146b8:	7f1a      	ldrb	r2, [r3, #28]
 80146ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146bc:	7f5b      	ldrb	r3, [r3, #29]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d325      	bcc.n	801470e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80146c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c4:	2200      	movs	r2, #0
 80146c6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80146c8:	4b1e      	ldr	r3, [pc, #120]	; (8014744 <tcp_slowtmr+0x5a4>)
 80146ca:	2200      	movs	r2, #0
 80146cc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80146ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d00b      	beq.n	80146f0 <tcp_slowtmr+0x550>
 80146d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80146de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146e0:	6912      	ldr	r2, [r2, #16]
 80146e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80146e4:	4610      	mov	r0, r2
 80146e6:	4798      	blx	r3
 80146e8:	4603      	mov	r3, r0
 80146ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80146ee:	e002      	b.n	80146f6 <tcp_slowtmr+0x556>
 80146f0:	2300      	movs	r3, #0
 80146f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80146f6:	4b13      	ldr	r3, [pc, #76]	; (8014744 <tcp_slowtmr+0x5a4>)
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d000      	beq.n	8014700 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80146fe:	e560      	b.n	80141c2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014700:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014704:	2b00      	cmp	r3, #0
 8014706:	d102      	bne.n	801470e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8014708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801470a:	f004 f8a1 	bl	8018850 <tcp_output>
  while (pcb != NULL) {
 801470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014710:	2b00      	cmp	r3, #0
 8014712:	f47f ad5c 	bne.w	80141ce <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014716:	2300      	movs	r3, #0
 8014718:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801471a:	4b0b      	ldr	r3, [pc, #44]	; (8014748 <tcp_slowtmr+0x5a8>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014720:	e067      	b.n	80147f2 <tcp_slowtmr+0x652>
 8014722:	bf00      	nop
 8014724:	2000e9f8 	.word	0x2000e9f8
 8014728:	10624dd3 	.word	0x10624dd3
 801472c:	000124f8 	.word	0x000124f8
 8014730:	2000e9f4 	.word	0x2000e9f4
 8014734:	0802250c 	.word	0x0802250c
 8014738:	08022944 	.word	0x08022944
 801473c:	08022550 	.word	0x08022550
 8014740:	08022970 	.word	0x08022970
 8014744:	2000e9f0 	.word	0x2000e9f0
 8014748:	2000ea04 	.word	0x2000ea04
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801474e:	7d1b      	ldrb	r3, [r3, #20]
 8014750:	2b0a      	cmp	r3, #10
 8014752:	d006      	beq.n	8014762 <tcp_slowtmr+0x5c2>
 8014754:	4b2b      	ldr	r3, [pc, #172]	; (8014804 <tcp_slowtmr+0x664>)
 8014756:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801475a:	492b      	ldr	r1, [pc, #172]	; (8014808 <tcp_slowtmr+0x668>)
 801475c:	482b      	ldr	r0, [pc, #172]	; (801480c <tcp_slowtmr+0x66c>)
 801475e:	f00b fa2b 	bl	801fbb8 <iprintf>
    pcb_remove = 0;
 8014762:	2300      	movs	r3, #0
 8014764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014768:	4b29      	ldr	r3, [pc, #164]	; (8014810 <tcp_slowtmr+0x670>)
 801476a:	681a      	ldr	r2, [r3, #0]
 801476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801476e:	6a1b      	ldr	r3, [r3, #32]
 8014770:	1ad3      	subs	r3, r2, r3
 8014772:	2bf0      	cmp	r3, #240	; 0xf0
 8014774:	d904      	bls.n	8014780 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8014776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801477a:	3301      	adds	r3, #1
 801477c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014784:	2b00      	cmp	r3, #0
 8014786:	d02f      	beq.n	80147e8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801478a:	f000 fbf9 	bl	8014f80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014790:	2b00      	cmp	r3, #0
 8014792:	d010      	beq.n	80147b6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014794:	4b1f      	ldr	r3, [pc, #124]	; (8014814 <tcp_slowtmr+0x674>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801479a:	429a      	cmp	r2, r3
 801479c:	d106      	bne.n	80147ac <tcp_slowtmr+0x60c>
 801479e:	4b19      	ldr	r3, [pc, #100]	; (8014804 <tcp_slowtmr+0x664>)
 80147a0:	f240 52af 	movw	r2, #1455	; 0x5af
 80147a4:	491c      	ldr	r1, [pc, #112]	; (8014818 <tcp_slowtmr+0x678>)
 80147a6:	4819      	ldr	r0, [pc, #100]	; (801480c <tcp_slowtmr+0x66c>)
 80147a8:	f00b fa06 	bl	801fbb8 <iprintf>
        prev->next = pcb->next;
 80147ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ae:	68da      	ldr	r2, [r3, #12]
 80147b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b2:	60da      	str	r2, [r3, #12]
 80147b4:	e00f      	b.n	80147d6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80147b6:	4b17      	ldr	r3, [pc, #92]	; (8014814 <tcp_slowtmr+0x674>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147bc:	429a      	cmp	r2, r3
 80147be:	d006      	beq.n	80147ce <tcp_slowtmr+0x62e>
 80147c0:	4b10      	ldr	r3, [pc, #64]	; (8014804 <tcp_slowtmr+0x664>)
 80147c2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80147c6:	4915      	ldr	r1, [pc, #84]	; (801481c <tcp_slowtmr+0x67c>)
 80147c8:	4810      	ldr	r0, [pc, #64]	; (801480c <tcp_slowtmr+0x66c>)
 80147ca:	f00b f9f5 	bl	801fbb8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80147ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147d0:	68db      	ldr	r3, [r3, #12]
 80147d2:	4a10      	ldr	r2, [pc, #64]	; (8014814 <tcp_slowtmr+0x674>)
 80147d4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80147d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147d8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80147da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80147e0:	69f8      	ldr	r0, [r7, #28]
 80147e2:	f7fe ff3b 	bl	801365c <tcp_free>
 80147e6:	e004      	b.n	80147f2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80147e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80147ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ee:	68db      	ldr	r3, [r3, #12]
 80147f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80147f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d1a9      	bne.n	801474c <tcp_slowtmr+0x5ac>
    }
  }
}
 80147f8:	bf00      	nop
 80147fa:	bf00      	nop
 80147fc:	3730      	adds	r7, #48	; 0x30
 80147fe:	46bd      	mov	sp, r7
 8014800:	bdb0      	pop	{r4, r5, r7, pc}
 8014802:	bf00      	nop
 8014804:	0802250c 	.word	0x0802250c
 8014808:	0802299c 	.word	0x0802299c
 801480c:	08022550 	.word	0x08022550
 8014810:	2000e9f8 	.word	0x2000e9f8
 8014814:	2000ea04 	.word	0x2000ea04
 8014818:	080229cc 	.word	0x080229cc
 801481c:	080229f4 	.word	0x080229f4

08014820 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014826:	4b2d      	ldr	r3, [pc, #180]	; (80148dc <tcp_fasttmr+0xbc>)
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	3301      	adds	r3, #1
 801482c:	b2da      	uxtb	r2, r3
 801482e:	4b2b      	ldr	r3, [pc, #172]	; (80148dc <tcp_fasttmr+0xbc>)
 8014830:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014832:	4b2b      	ldr	r3, [pc, #172]	; (80148e0 <tcp_fasttmr+0xc0>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014838:	e048      	b.n	80148cc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	7f9a      	ldrb	r2, [r3, #30]
 801483e:	4b27      	ldr	r3, [pc, #156]	; (80148dc <tcp_fasttmr+0xbc>)
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	429a      	cmp	r2, r3
 8014844:	d03f      	beq.n	80148c6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014846:	4b25      	ldr	r3, [pc, #148]	; (80148dc <tcp_fasttmr+0xbc>)
 8014848:	781a      	ldrb	r2, [r3, #0]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	8b5b      	ldrh	r3, [r3, #26]
 8014852:	f003 0301 	and.w	r3, r3, #1
 8014856:	2b00      	cmp	r3, #0
 8014858:	d010      	beq.n	801487c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	8b5b      	ldrh	r3, [r3, #26]
 801485e:	f043 0302 	orr.w	r3, r3, #2
 8014862:	b29a      	uxth	r2, r3
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f003 fff1 	bl	8018850 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	8b5b      	ldrh	r3, [r3, #26]
 8014872:	f023 0303 	bic.w	r3, r3, #3
 8014876:	b29a      	uxth	r2, r3
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	8b5b      	ldrh	r3, [r3, #26]
 8014880:	f003 0308 	and.w	r3, r3, #8
 8014884:	2b00      	cmp	r3, #0
 8014886:	d009      	beq.n	801489c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	8b5b      	ldrh	r3, [r3, #26]
 801488c:	f023 0308 	bic.w	r3, r3, #8
 8014890:	b29a      	uxth	r2, r3
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f7ff f874 	bl	8013984 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	68db      	ldr	r3, [r3, #12]
 80148a0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d00a      	beq.n	80148c0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80148aa:	4b0e      	ldr	r3, [pc, #56]	; (80148e4 <tcp_fasttmr+0xc4>)
 80148ac:	2200      	movs	r2, #0
 80148ae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f000 f819 	bl	80148e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80148b6:	4b0b      	ldr	r3, [pc, #44]	; (80148e4 <tcp_fasttmr+0xc4>)
 80148b8:	781b      	ldrb	r3, [r3, #0]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d000      	beq.n	80148c0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80148be:	e7b8      	b.n	8014832 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	607b      	str	r3, [r7, #4]
 80148c4:	e002      	b.n	80148cc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d1b3      	bne.n	801483a <tcp_fasttmr+0x1a>
    }
  }
}
 80148d2:	bf00      	nop
 80148d4:	bf00      	nop
 80148d6:	3708      	adds	r7, #8
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	20005faa 	.word	0x20005faa
 80148e0:	2000e9f4 	.word	0x2000e9f4
 80148e4:	2000e9f0 	.word	0x2000e9f0

080148e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80148e8:	b590      	push	{r4, r7, lr}
 80148ea:	b085      	sub	sp, #20
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d109      	bne.n	801490a <tcp_process_refused_data+0x22>
 80148f6:	4b37      	ldr	r3, [pc, #220]	; (80149d4 <tcp_process_refused_data+0xec>)
 80148f8:	f240 6209 	movw	r2, #1545	; 0x609
 80148fc:	4936      	ldr	r1, [pc, #216]	; (80149d8 <tcp_process_refused_data+0xf0>)
 80148fe:	4837      	ldr	r0, [pc, #220]	; (80149dc <tcp_process_refused_data+0xf4>)
 8014900:	f00b f95a 	bl	801fbb8 <iprintf>
 8014904:	f06f 030f 	mvn.w	r3, #15
 8014908:	e060      	b.n	80149cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801490e:	7b5b      	ldrb	r3, [r3, #13]
 8014910:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014916:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2200      	movs	r2, #0
 801491c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014924:	2b00      	cmp	r3, #0
 8014926:	d00b      	beq.n	8014940 <tcp_process_refused_data+0x58>
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6918      	ldr	r0, [r3, #16]
 8014932:	2300      	movs	r3, #0
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	6879      	ldr	r1, [r7, #4]
 8014938:	47a0      	blx	r4
 801493a:	4603      	mov	r3, r0
 801493c:	73fb      	strb	r3, [r7, #15]
 801493e:	e007      	b.n	8014950 <tcp_process_refused_data+0x68>
 8014940:	2300      	movs	r3, #0
 8014942:	68ba      	ldr	r2, [r7, #8]
 8014944:	6879      	ldr	r1, [r7, #4]
 8014946:	2000      	movs	r0, #0
 8014948:	f000 f8a4 	bl	8014a94 <tcp_recv_null>
 801494c:	4603      	mov	r3, r0
 801494e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d12a      	bne.n	80149ae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014958:	7bbb      	ldrb	r3, [r7, #14]
 801495a:	f003 0320 	and.w	r3, r3, #32
 801495e:	2b00      	cmp	r3, #0
 8014960:	d033      	beq.n	80149ca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014966:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801496a:	d005      	beq.n	8014978 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014970:	3301      	adds	r3, #1
 8014972:	b29a      	uxth	r2, r3
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801497e:	2b00      	cmp	r3, #0
 8014980:	d00b      	beq.n	801499a <tcp_process_refused_data+0xb2>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	6918      	ldr	r0, [r3, #16]
 801498c:	2300      	movs	r3, #0
 801498e:	2200      	movs	r2, #0
 8014990:	6879      	ldr	r1, [r7, #4]
 8014992:	47a0      	blx	r4
 8014994:	4603      	mov	r3, r0
 8014996:	73fb      	strb	r3, [r7, #15]
 8014998:	e001      	b.n	801499e <tcp_process_refused_data+0xb6>
 801499a:	2300      	movs	r3, #0
 801499c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801499e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149a2:	f113 0f0d 	cmn.w	r3, #13
 80149a6:	d110      	bne.n	80149ca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80149a8:	f06f 030c 	mvn.w	r3, #12
 80149ac:	e00e      	b.n	80149cc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80149ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149b2:	f113 0f0d 	cmn.w	r3, #13
 80149b6:	d102      	bne.n	80149be <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80149b8:	f06f 030c 	mvn.w	r3, #12
 80149bc:	e006      	b.n	80149cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	68ba      	ldr	r2, [r7, #8]
 80149c2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80149c4:	f06f 0304 	mvn.w	r3, #4
 80149c8:	e000      	b.n	80149cc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80149ca:	2300      	movs	r3, #0
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	3714      	adds	r7, #20
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd90      	pop	{r4, r7, pc}
 80149d4:	0802250c 	.word	0x0802250c
 80149d8:	08022a1c 	.word	0x08022a1c
 80149dc:	08022550 	.word	0x08022550

080149e0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b084      	sub	sp, #16
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80149e8:	e007      	b.n	80149fa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f000 f80a 	bl	8014a0a <tcp_seg_free>
    seg = next;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d1f4      	bne.n	80149ea <tcp_segs_free+0xa>
  }
}
 8014a00:	bf00      	nop
 8014a02:	bf00      	nop
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}

08014a0a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014a0a:	b580      	push	{r7, lr}
 8014a0c:	b082      	sub	sp, #8
 8014a0e:	af00      	add	r7, sp, #0
 8014a10:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d00c      	beq.n	8014a32 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	685b      	ldr	r3, [r3, #4]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d004      	beq.n	8014a2a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	685b      	ldr	r3, [r3, #4]
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7fe fb5d 	bl	80130e4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014a2a:	6879      	ldr	r1, [r7, #4]
 8014a2c:	2003      	movs	r0, #3
 8014a2e:	f7fd fca9 	bl	8012384 <memp_free>
  }
}
 8014a32:	bf00      	nop
 8014a34:	3708      	adds	r7, #8
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}
	...

08014a3c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b084      	sub	sp, #16
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d106      	bne.n	8014a58 <tcp_seg_copy+0x1c>
 8014a4a:	4b0f      	ldr	r3, [pc, #60]	; (8014a88 <tcp_seg_copy+0x4c>)
 8014a4c:	f240 6282 	movw	r2, #1666	; 0x682
 8014a50:	490e      	ldr	r1, [pc, #56]	; (8014a8c <tcp_seg_copy+0x50>)
 8014a52:	480f      	ldr	r0, [pc, #60]	; (8014a90 <tcp_seg_copy+0x54>)
 8014a54:	f00b f8b0 	bl	801fbb8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014a58:	2003      	movs	r0, #3
 8014a5a:	f7fd fc41 	bl	80122e0 <memp_malloc>
 8014a5e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d101      	bne.n	8014a6a <tcp_seg_copy+0x2e>
    return NULL;
 8014a66:	2300      	movs	r3, #0
 8014a68:	e00a      	b.n	8014a80 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014a6a:	2210      	movs	r2, #16
 8014a6c:	6879      	ldr	r1, [r7, #4]
 8014a6e:	68f8      	ldr	r0, [r7, #12]
 8014a70:	f00b f831 	bl	801fad6 <memcpy>
  pbuf_ref(cseg->p);
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7fe fbd9 	bl	8013230 <pbuf_ref>
  return cseg;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3710      	adds	r7, #16
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}
 8014a88:	0802250c 	.word	0x0802250c
 8014a8c:	08022a60 	.word	0x08022a60
 8014a90:	08022550 	.word	0x08022550

08014a94 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b084      	sub	sp, #16
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	60b9      	str	r1, [r7, #8]
 8014a9e:	607a      	str	r2, [r7, #4]
 8014aa0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d109      	bne.n	8014abc <tcp_recv_null+0x28>
 8014aa8:	4b12      	ldr	r3, [pc, #72]	; (8014af4 <tcp_recv_null+0x60>)
 8014aaa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014aae:	4912      	ldr	r1, [pc, #72]	; (8014af8 <tcp_recv_null+0x64>)
 8014ab0:	4812      	ldr	r0, [pc, #72]	; (8014afc <tcp_recv_null+0x68>)
 8014ab2:	f00b f881 	bl	801fbb8 <iprintf>
 8014ab6:	f06f 030f 	mvn.w	r3, #15
 8014aba:	e016      	b.n	8014aea <tcp_recv_null+0x56>

  if (p != NULL) {
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d009      	beq.n	8014ad6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	891b      	ldrh	r3, [r3, #8]
 8014ac6:	4619      	mov	r1, r3
 8014ac8:	68b8      	ldr	r0, [r7, #8]
 8014aca:	f7ff fad3 	bl	8014074 <tcp_recved>
    pbuf_free(p);
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f7fe fb08 	bl	80130e4 <pbuf_free>
 8014ad4:	e008      	b.n	8014ae8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d104      	bne.n	8014ae8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014ade:	68b8      	ldr	r0, [r7, #8]
 8014ae0:	f7fe ffba 	bl	8013a58 <tcp_close>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	e000      	b.n	8014aea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014ae8:	2300      	movs	r3, #0
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3710      	adds	r7, #16
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	0802250c 	.word	0x0802250c
 8014af8:	08022a7c 	.word	0x08022a7c
 8014afc:	08022550 	.word	0x08022550

08014b00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b086      	sub	sp, #24
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	4603      	mov	r3, r0
 8014b08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	db01      	blt.n	8014b16 <tcp_kill_prio+0x16>
 8014b12:	79fb      	ldrb	r3, [r7, #7]
 8014b14:	e000      	b.n	8014b18 <tcp_kill_prio+0x18>
 8014b16:	237f      	movs	r3, #127	; 0x7f
 8014b18:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014b1a:	7afb      	ldrb	r3, [r7, #11]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d034      	beq.n	8014b8a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014b20:	7afb      	ldrb	r3, [r7, #11]
 8014b22:	3b01      	subs	r3, #1
 8014b24:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014b26:	2300      	movs	r3, #0
 8014b28:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b2e:	4b19      	ldr	r3, [pc, #100]	; (8014b94 <tcp_kill_prio+0x94>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	617b      	str	r3, [r7, #20]
 8014b34:	e01f      	b.n	8014b76 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	7d5b      	ldrb	r3, [r3, #21]
 8014b3a:	7afa      	ldrb	r2, [r7, #11]
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	d80c      	bhi.n	8014b5a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014b44:	7afa      	ldrb	r2, [r7, #11]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d112      	bne.n	8014b70 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b4a:	4b13      	ldr	r3, [pc, #76]	; (8014b98 <tcp_kill_prio+0x98>)
 8014b4c:	681a      	ldr	r2, [r3, #0]
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	6a1b      	ldr	r3, [r3, #32]
 8014b52:	1ad3      	subs	r3, r2, r3
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d80a      	bhi.n	8014b70 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014b5a:	4b0f      	ldr	r3, [pc, #60]	; (8014b98 <tcp_kill_prio+0x98>)
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	6a1b      	ldr	r3, [r3, #32]
 8014b62:	1ad3      	subs	r3, r2, r3
 8014b64:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	7d5b      	ldrb	r3, [r3, #21]
 8014b6e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	68db      	ldr	r3, [r3, #12]
 8014b74:	617b      	str	r3, [r7, #20]
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d1dc      	bne.n	8014b36 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014b7c:	693b      	ldr	r3, [r7, #16]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d004      	beq.n	8014b8c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014b82:	6938      	ldr	r0, [r7, #16]
 8014b84:	f7ff f8ae 	bl	8013ce4 <tcp_abort>
 8014b88:	e000      	b.n	8014b8c <tcp_kill_prio+0x8c>
    return;
 8014b8a:	bf00      	nop
  }
}
 8014b8c:	3718      	adds	r7, #24
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	2000e9f4 	.word	0x2000e9f4
 8014b98:	2000e9f8 	.word	0x2000e9f8

08014b9c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b086      	sub	sp, #24
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014ba6:	79fb      	ldrb	r3, [r7, #7]
 8014ba8:	2b08      	cmp	r3, #8
 8014baa:	d009      	beq.n	8014bc0 <tcp_kill_state+0x24>
 8014bac:	79fb      	ldrb	r3, [r7, #7]
 8014bae:	2b09      	cmp	r3, #9
 8014bb0:	d006      	beq.n	8014bc0 <tcp_kill_state+0x24>
 8014bb2:	4b1a      	ldr	r3, [pc, #104]	; (8014c1c <tcp_kill_state+0x80>)
 8014bb4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014bb8:	4919      	ldr	r1, [pc, #100]	; (8014c20 <tcp_kill_state+0x84>)
 8014bba:	481a      	ldr	r0, [pc, #104]	; (8014c24 <tcp_kill_state+0x88>)
 8014bbc:	f00a fffc 	bl	801fbb8 <iprintf>

  inactivity = 0;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bc8:	4b17      	ldr	r3, [pc, #92]	; (8014c28 <tcp_kill_state+0x8c>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	617b      	str	r3, [r7, #20]
 8014bce:	e017      	b.n	8014c00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	7d1b      	ldrb	r3, [r3, #20]
 8014bd4:	79fa      	ldrb	r2, [r7, #7]
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d10f      	bne.n	8014bfa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014bda:	4b14      	ldr	r3, [pc, #80]	; (8014c2c <tcp_kill_state+0x90>)
 8014bdc:	681a      	ldr	r2, [r3, #0]
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	6a1b      	ldr	r3, [r3, #32]
 8014be2:	1ad3      	subs	r3, r2, r3
 8014be4:	68fa      	ldr	r2, [r7, #12]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d807      	bhi.n	8014bfa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014bea:	4b10      	ldr	r3, [pc, #64]	; (8014c2c <tcp_kill_state+0x90>)
 8014bec:	681a      	ldr	r2, [r3, #0]
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	6a1b      	ldr	r3, [r3, #32]
 8014bf2:	1ad3      	subs	r3, r2, r3
 8014bf4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	68db      	ldr	r3, [r3, #12]
 8014bfe:	617b      	str	r3, [r7, #20]
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d1e4      	bne.n	8014bd0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d003      	beq.n	8014c14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014c0c:	2100      	movs	r1, #0
 8014c0e:	6938      	ldr	r0, [r7, #16]
 8014c10:	f7fe ffaa 	bl	8013b68 <tcp_abandon>
  }
}
 8014c14:	bf00      	nop
 8014c16:	3718      	adds	r7, #24
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}
 8014c1c:	0802250c 	.word	0x0802250c
 8014c20:	08022a98 	.word	0x08022a98
 8014c24:	08022550 	.word	0x08022550
 8014c28:	2000e9f4 	.word	0x2000e9f4
 8014c2c:	2000e9f8 	.word	0x2000e9f8

08014c30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014c36:	2300      	movs	r3, #0
 8014c38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c3e:	4b12      	ldr	r3, [pc, #72]	; (8014c88 <tcp_kill_timewait+0x58>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	60fb      	str	r3, [r7, #12]
 8014c44:	e012      	b.n	8014c6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014c46:	4b11      	ldr	r3, [pc, #68]	; (8014c8c <tcp_kill_timewait+0x5c>)
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	6a1b      	ldr	r3, [r3, #32]
 8014c4e:	1ad3      	subs	r3, r2, r3
 8014c50:	687a      	ldr	r2, [r7, #4]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d807      	bhi.n	8014c66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014c56:	4b0d      	ldr	r3, [pc, #52]	; (8014c8c <tcp_kill_timewait+0x5c>)
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	6a1b      	ldr	r3, [r3, #32]
 8014c5e:	1ad3      	subs	r3, r2, r3
 8014c60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	60fb      	str	r3, [r7, #12]
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d1e9      	bne.n	8014c46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d002      	beq.n	8014c7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014c78:	68b8      	ldr	r0, [r7, #8]
 8014c7a:	f7ff f833 	bl	8013ce4 <tcp_abort>
  }
}
 8014c7e:	bf00      	nop
 8014c80:	3710      	adds	r7, #16
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	2000ea04 	.word	0x2000ea04
 8014c8c:	2000e9f8 	.word	0x2000e9f8

08014c90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b082      	sub	sp, #8
 8014c94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014c96:	4b10      	ldr	r3, [pc, #64]	; (8014cd8 <tcp_handle_closepend+0x48>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014c9c:	e014      	b.n	8014cc8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	68db      	ldr	r3, [r3, #12]
 8014ca2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	8b5b      	ldrh	r3, [r3, #26]
 8014ca8:	f003 0308 	and.w	r3, r3, #8
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d009      	beq.n	8014cc4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	8b5b      	ldrh	r3, [r3, #26]
 8014cb4:	f023 0308 	bic.w	r3, r3, #8
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f7fe fe60 	bl	8013984 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d1e7      	bne.n	8014c9e <tcp_handle_closepend+0xe>
  }
}
 8014cce:	bf00      	nop
 8014cd0:	bf00      	nop
 8014cd2:	3708      	adds	r7, #8
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	2000e9f4 	.word	0x2000e9f4

08014cdc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b084      	sub	sp, #16
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014ce6:	2001      	movs	r0, #1
 8014ce8:	f7fd fafa 	bl	80122e0 <memp_malloc>
 8014cec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d126      	bne.n	8014d42 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014cf4:	f7ff ffcc 	bl	8014c90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014cf8:	f7ff ff9a 	bl	8014c30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014cfc:	2001      	movs	r0, #1
 8014cfe:	f7fd faef 	bl	80122e0 <memp_malloc>
 8014d02:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d11b      	bne.n	8014d42 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014d0a:	2009      	movs	r0, #9
 8014d0c:	f7ff ff46 	bl	8014b9c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d10:	2001      	movs	r0, #1
 8014d12:	f7fd fae5 	bl	80122e0 <memp_malloc>
 8014d16:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d111      	bne.n	8014d42 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014d1e:	2008      	movs	r0, #8
 8014d20:	f7ff ff3c 	bl	8014b9c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d24:	2001      	movs	r0, #1
 8014d26:	f7fd fadb 	bl	80122e0 <memp_malloc>
 8014d2a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d107      	bne.n	8014d42 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014d32:	79fb      	ldrb	r3, [r7, #7]
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7ff fee3 	bl	8014b00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d3a:	2001      	movs	r0, #1
 8014d3c:	f7fd fad0 	bl	80122e0 <memp_malloc>
 8014d40:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d03f      	beq.n	8014dc8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014d48:	229c      	movs	r2, #156	; 0x9c
 8014d4a:	2100      	movs	r1, #0
 8014d4c:	68f8      	ldr	r0, [r7, #12]
 8014d4e:	f00a fed0 	bl	801faf2 <memset>
    pcb->prio = prio;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	79fa      	ldrb	r2, [r7, #7]
 8014d56:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014d5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014d68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	22ff      	movs	r2, #255	; 0xff
 8014d76:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014d7e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	2206      	movs	r2, #6
 8014d84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	2206      	movs	r2, #6
 8014d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d94:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	2201      	movs	r2, #1
 8014d9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014d9e:	4b0d      	ldr	r3, [pc, #52]	; (8014dd4 <tcp_alloc+0xf8>)
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014da6:	4b0c      	ldr	r3, [pc, #48]	; (8014dd8 <tcp_alloc+0xfc>)
 8014da8:	781a      	ldrb	r2, [r3, #0]
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014db4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	4a08      	ldr	r2, [pc, #32]	; (8014ddc <tcp_alloc+0x100>)
 8014dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	4a07      	ldr	r2, [pc, #28]	; (8014de0 <tcp_alloc+0x104>)
 8014dc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3710      	adds	r7, #16
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}
 8014dd2:	bf00      	nop
 8014dd4:	2000e9f8 	.word	0x2000e9f8
 8014dd8:	20005faa 	.word	0x20005faa
 8014ddc:	08014a95 	.word	0x08014a95
 8014de0:	006ddd00 	.word	0x006ddd00

08014de4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	4603      	mov	r3, r0
 8014dec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014dee:	2040      	movs	r0, #64	; 0x40
 8014df0:	f7ff ff74 	bl	8014cdc <tcp_alloc>
 8014df4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014df6:	68fb      	ldr	r3, [r7, #12]
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3710      	adds	r7, #16
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014e00:	b480      	push	{r7}
 8014e02:	b083      	sub	sp, #12
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d002      	beq.n	8014e16 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	683a      	ldr	r2, [r7, #0]
 8014e14:	611a      	str	r2, [r3, #16]
  }
}
 8014e16:	bf00      	nop
 8014e18:	370c      	adds	r7, #12
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e20:	4770      	bx	lr
	...

08014e24 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d00e      	beq.n	8014e52 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	7d1b      	ldrb	r3, [r3, #20]
 8014e38:	2b01      	cmp	r3, #1
 8014e3a:	d106      	bne.n	8014e4a <tcp_recv+0x26>
 8014e3c:	4b07      	ldr	r3, [pc, #28]	; (8014e5c <tcp_recv+0x38>)
 8014e3e:	f240 72df 	movw	r2, #2015	; 0x7df
 8014e42:	4907      	ldr	r1, [pc, #28]	; (8014e60 <tcp_recv+0x3c>)
 8014e44:	4807      	ldr	r0, [pc, #28]	; (8014e64 <tcp_recv+0x40>)
 8014e46:	f00a feb7 	bl	801fbb8 <iprintf>
    pcb->recv = recv;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	683a      	ldr	r2, [r7, #0]
 8014e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014e52:	bf00      	nop
 8014e54:	3708      	adds	r7, #8
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	0802250c 	.word	0x0802250c
 8014e60:	08022aa8 	.word	0x08022aa8
 8014e64:	08022550 	.word	0x08022550

08014e68 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d00e      	beq.n	8014e96 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	7d1b      	ldrb	r3, [r3, #20]
 8014e7c:	2b01      	cmp	r3, #1
 8014e7e:	d106      	bne.n	8014e8e <tcp_sent+0x26>
 8014e80:	4b07      	ldr	r3, [pc, #28]	; (8014ea0 <tcp_sent+0x38>)
 8014e82:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014e86:	4907      	ldr	r1, [pc, #28]	; (8014ea4 <tcp_sent+0x3c>)
 8014e88:	4807      	ldr	r0, [pc, #28]	; (8014ea8 <tcp_sent+0x40>)
 8014e8a:	f00a fe95 	bl	801fbb8 <iprintf>
    pcb->sent = sent;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	683a      	ldr	r2, [r7, #0]
 8014e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014e96:	bf00      	nop
 8014e98:	3708      	adds	r7, #8
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	0802250c 	.word	0x0802250c
 8014ea4:	08022ad0 	.word	0x08022ad0
 8014ea8:	08022550 	.word	0x08022550

08014eac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b082      	sub	sp, #8
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d00e      	beq.n	8014eda <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	7d1b      	ldrb	r3, [r3, #20]
 8014ec0:	2b01      	cmp	r3, #1
 8014ec2:	d106      	bne.n	8014ed2 <tcp_err+0x26>
 8014ec4:	4b07      	ldr	r3, [pc, #28]	; (8014ee4 <tcp_err+0x38>)
 8014ec6:	f640 020d 	movw	r2, #2061	; 0x80d
 8014eca:	4907      	ldr	r1, [pc, #28]	; (8014ee8 <tcp_err+0x3c>)
 8014ecc:	4807      	ldr	r0, [pc, #28]	; (8014eec <tcp_err+0x40>)
 8014ece:	f00a fe73 	bl	801fbb8 <iprintf>
    pcb->errf = err;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	683a      	ldr	r2, [r7, #0]
 8014ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014eda:	bf00      	nop
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	0802250c 	.word	0x0802250c
 8014ee8:	08022af8 	.word	0x08022af8
 8014eec:	08022550 	.word	0x08022550

08014ef0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b085      	sub	sp, #20
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d008      	beq.n	8014f12 <tcp_accept+0x22>
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	7d1b      	ldrb	r3, [r3, #20]
 8014f04:	2b01      	cmp	r3, #1
 8014f06:	d104      	bne.n	8014f12 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	683a      	ldr	r2, [r7, #0]
 8014f10:	619a      	str	r2, [r3, #24]
  }
}
 8014f12:	bf00      	nop
 8014f14:	3714      	adds	r7, #20
 8014f16:	46bd      	mov	sp, r7
 8014f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1c:	4770      	bx	lr
	...

08014f20 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b084      	sub	sp, #16
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	60f8      	str	r0, [r7, #12]
 8014f28:	60b9      	str	r1, [r7, #8]
 8014f2a:	4613      	mov	r3, r2
 8014f2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d107      	bne.n	8014f44 <tcp_poll+0x24>
 8014f34:	4b0e      	ldr	r3, [pc, #56]	; (8014f70 <tcp_poll+0x50>)
 8014f36:	f640 023d 	movw	r2, #2109	; 0x83d
 8014f3a:	490e      	ldr	r1, [pc, #56]	; (8014f74 <tcp_poll+0x54>)
 8014f3c:	480e      	ldr	r0, [pc, #56]	; (8014f78 <tcp_poll+0x58>)
 8014f3e:	f00a fe3b 	bl	801fbb8 <iprintf>
 8014f42:	e011      	b.n	8014f68 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	7d1b      	ldrb	r3, [r3, #20]
 8014f48:	2b01      	cmp	r3, #1
 8014f4a:	d106      	bne.n	8014f5a <tcp_poll+0x3a>
 8014f4c:	4b08      	ldr	r3, [pc, #32]	; (8014f70 <tcp_poll+0x50>)
 8014f4e:	f640 023e 	movw	r2, #2110	; 0x83e
 8014f52:	490a      	ldr	r1, [pc, #40]	; (8014f7c <tcp_poll+0x5c>)
 8014f54:	4808      	ldr	r0, [pc, #32]	; (8014f78 <tcp_poll+0x58>)
 8014f56:	f00a fe2f 	bl	801fbb8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	68ba      	ldr	r2, [r7, #8]
 8014f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	79fa      	ldrb	r2, [r7, #7]
 8014f66:	775a      	strb	r2, [r3, #29]
}
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	0802250c 	.word	0x0802250c
 8014f74:	08022b20 	.word	0x08022b20
 8014f78:	08022550 	.word	0x08022550
 8014f7c:	08022b38 	.word	0x08022b38

08014f80 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d107      	bne.n	8014f9e <tcp_pcb_purge+0x1e>
 8014f8e:	4b21      	ldr	r3, [pc, #132]	; (8015014 <tcp_pcb_purge+0x94>)
 8014f90:	f640 0251 	movw	r2, #2129	; 0x851
 8014f94:	4920      	ldr	r1, [pc, #128]	; (8015018 <tcp_pcb_purge+0x98>)
 8014f96:	4821      	ldr	r0, [pc, #132]	; (801501c <tcp_pcb_purge+0x9c>)
 8014f98:	f00a fe0e 	bl	801fbb8 <iprintf>
 8014f9c:	e037      	b.n	801500e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	7d1b      	ldrb	r3, [r3, #20]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d033      	beq.n	801500e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014faa:	2b0a      	cmp	r3, #10
 8014fac:	d02f      	beq.n	801500e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	d02b      	beq.n	801500e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d007      	beq.n	8014fce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7fe f88e 	bl	80130e4 <pbuf_free>
      pcb->refused_data = NULL;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d002      	beq.n	8014fdc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f000 f986 	bl	80152e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fe2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7ff fcf9 	bl	80149e0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7ff fcf4 	bl	80149e0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	66da      	str	r2, [r3, #108]	; 0x6c
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	2200      	movs	r2, #0
 801500a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801500e:	3708      	adds	r7, #8
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}
 8015014:	0802250c 	.word	0x0802250c
 8015018:	08022b58 	.word	0x08022b58
 801501c:	08022550 	.word	0x08022550

08015020 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
 8015028:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d106      	bne.n	801503e <tcp_pcb_remove+0x1e>
 8015030:	4b3e      	ldr	r3, [pc, #248]	; (801512c <tcp_pcb_remove+0x10c>)
 8015032:	f640 0283 	movw	r2, #2179	; 0x883
 8015036:	493e      	ldr	r1, [pc, #248]	; (8015130 <tcp_pcb_remove+0x110>)
 8015038:	483e      	ldr	r0, [pc, #248]	; (8015134 <tcp_pcb_remove+0x114>)
 801503a:	f00a fdbd 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d106      	bne.n	8015052 <tcp_pcb_remove+0x32>
 8015044:	4b39      	ldr	r3, [pc, #228]	; (801512c <tcp_pcb_remove+0x10c>)
 8015046:	f640 0284 	movw	r2, #2180	; 0x884
 801504a:	493b      	ldr	r1, [pc, #236]	; (8015138 <tcp_pcb_remove+0x118>)
 801504c:	4839      	ldr	r0, [pc, #228]	; (8015134 <tcp_pcb_remove+0x114>)
 801504e:	f00a fdb3 	bl	801fbb8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	683a      	ldr	r2, [r7, #0]
 8015058:	429a      	cmp	r2, r3
 801505a:	d105      	bne.n	8015068 <tcp_pcb_remove+0x48>
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	68da      	ldr	r2, [r3, #12]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	601a      	str	r2, [r3, #0]
 8015066:	e013      	b.n	8015090 <tcp_pcb_remove+0x70>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	60fb      	str	r3, [r7, #12]
 801506e:	e00c      	b.n	801508a <tcp_pcb_remove+0x6a>
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	68db      	ldr	r3, [r3, #12]
 8015074:	683a      	ldr	r2, [r7, #0]
 8015076:	429a      	cmp	r2, r3
 8015078:	d104      	bne.n	8015084 <tcp_pcb_remove+0x64>
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	68da      	ldr	r2, [r3, #12]
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	60da      	str	r2, [r3, #12]
 8015082:	e005      	b.n	8015090 <tcp_pcb_remove+0x70>
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	68db      	ldr	r3, [r3, #12]
 8015088:	60fb      	str	r3, [r7, #12]
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d1ef      	bne.n	8015070 <tcp_pcb_remove+0x50>
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	2200      	movs	r2, #0
 8015094:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015096:	6838      	ldr	r0, [r7, #0]
 8015098:	f7ff ff72 	bl	8014f80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	7d1b      	ldrb	r3, [r3, #20]
 80150a0:	2b0a      	cmp	r3, #10
 80150a2:	d013      	beq.n	80150cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80150a8:	2b01      	cmp	r3, #1
 80150aa:	d00f      	beq.n	80150cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	8b5b      	ldrh	r3, [r3, #26]
 80150b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d009      	beq.n	80150cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	8b5b      	ldrh	r3, [r3, #26]
 80150bc:	f043 0302 	orr.w	r3, r3, #2
 80150c0:	b29a      	uxth	r2, r3
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80150c6:	6838      	ldr	r0, [r7, #0]
 80150c8:	f003 fbc2 	bl	8018850 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	7d1b      	ldrb	r3, [r3, #20]
 80150d0:	2b01      	cmp	r3, #1
 80150d2:	d020      	beq.n	8015116 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d006      	beq.n	80150ea <tcp_pcb_remove+0xca>
 80150dc:	4b13      	ldr	r3, [pc, #76]	; (801512c <tcp_pcb_remove+0x10c>)
 80150de:	f640 0293 	movw	r2, #2195	; 0x893
 80150e2:	4916      	ldr	r1, [pc, #88]	; (801513c <tcp_pcb_remove+0x11c>)
 80150e4:	4813      	ldr	r0, [pc, #76]	; (8015134 <tcp_pcb_remove+0x114>)
 80150e6:	f00a fd67 	bl	801fbb8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d006      	beq.n	8015100 <tcp_pcb_remove+0xe0>
 80150f2:	4b0e      	ldr	r3, [pc, #56]	; (801512c <tcp_pcb_remove+0x10c>)
 80150f4:	f640 0294 	movw	r2, #2196	; 0x894
 80150f8:	4911      	ldr	r1, [pc, #68]	; (8015140 <tcp_pcb_remove+0x120>)
 80150fa:	480e      	ldr	r0, [pc, #56]	; (8015134 <tcp_pcb_remove+0x114>)
 80150fc:	f00a fd5c 	bl	801fbb8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015104:	2b00      	cmp	r3, #0
 8015106:	d006      	beq.n	8015116 <tcp_pcb_remove+0xf6>
 8015108:	4b08      	ldr	r3, [pc, #32]	; (801512c <tcp_pcb_remove+0x10c>)
 801510a:	f640 0296 	movw	r2, #2198	; 0x896
 801510e:	490d      	ldr	r1, [pc, #52]	; (8015144 <tcp_pcb_remove+0x124>)
 8015110:	4808      	ldr	r0, [pc, #32]	; (8015134 <tcp_pcb_remove+0x114>)
 8015112:	f00a fd51 	bl	801fbb8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	2200      	movs	r2, #0
 801511a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	2200      	movs	r2, #0
 8015120:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015122:	bf00      	nop
 8015124:	3710      	adds	r7, #16
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}
 801512a:	bf00      	nop
 801512c:	0802250c 	.word	0x0802250c
 8015130:	08022b74 	.word	0x08022b74
 8015134:	08022550 	.word	0x08022550
 8015138:	08022b90 	.word	0x08022b90
 801513c:	08022bb0 	.word	0x08022bb0
 8015140:	08022bc8 	.word	0x08022bc8
 8015144:	08022be4 	.word	0x08022be4

08015148 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d106      	bne.n	8015164 <tcp_next_iss+0x1c>
 8015156:	4b0a      	ldr	r3, [pc, #40]	; (8015180 <tcp_next_iss+0x38>)
 8015158:	f640 02af 	movw	r2, #2223	; 0x8af
 801515c:	4909      	ldr	r1, [pc, #36]	; (8015184 <tcp_next_iss+0x3c>)
 801515e:	480a      	ldr	r0, [pc, #40]	; (8015188 <tcp_next_iss+0x40>)
 8015160:	f00a fd2a 	bl	801fbb8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015164:	4b09      	ldr	r3, [pc, #36]	; (801518c <tcp_next_iss+0x44>)
 8015166:	681a      	ldr	r2, [r3, #0]
 8015168:	4b09      	ldr	r3, [pc, #36]	; (8015190 <tcp_next_iss+0x48>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	4413      	add	r3, r2
 801516e:	4a07      	ldr	r2, [pc, #28]	; (801518c <tcp_next_iss+0x44>)
 8015170:	6013      	str	r3, [r2, #0]
  return iss;
 8015172:	4b06      	ldr	r3, [pc, #24]	; (801518c <tcp_next_iss+0x44>)
 8015174:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015176:	4618      	mov	r0, r3
 8015178:	3708      	adds	r7, #8
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}
 801517e:	bf00      	nop
 8015180:	0802250c 	.word	0x0802250c
 8015184:	08022bfc 	.word	0x08022bfc
 8015188:	08022550 	.word	0x08022550
 801518c:	200000e8 	.word	0x200000e8
 8015190:	2000e9f8 	.word	0x2000e9f8

08015194 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b086      	sub	sp, #24
 8015198:	af00      	add	r7, sp, #0
 801519a:	4603      	mov	r3, r0
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	607a      	str	r2, [r7, #4]
 80151a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d106      	bne.n	80151b6 <tcp_eff_send_mss_netif+0x22>
 80151a8:	4b14      	ldr	r3, [pc, #80]	; (80151fc <tcp_eff_send_mss_netif+0x68>)
 80151aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80151ae:	4914      	ldr	r1, [pc, #80]	; (8015200 <tcp_eff_send_mss_netif+0x6c>)
 80151b0:	4814      	ldr	r0, [pc, #80]	; (8015204 <tcp_eff_send_mss_netif+0x70>)
 80151b2:	f00a fd01 	bl	801fbb8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d101      	bne.n	80151c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80151bc:	89fb      	ldrh	r3, [r7, #14]
 80151be:	e019      	b.n	80151f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80151c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80151c6:	8afb      	ldrh	r3, [r7, #22]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d012      	beq.n	80151f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80151cc:	2328      	movs	r3, #40	; 0x28
 80151ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80151d0:	8afa      	ldrh	r2, [r7, #22]
 80151d2:	8abb      	ldrh	r3, [r7, #20]
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d904      	bls.n	80151e2 <tcp_eff_send_mss_netif+0x4e>
 80151d8:	8afa      	ldrh	r2, [r7, #22]
 80151da:	8abb      	ldrh	r3, [r7, #20]
 80151dc:	1ad3      	subs	r3, r2, r3
 80151de:	b29b      	uxth	r3, r3
 80151e0:	e000      	b.n	80151e4 <tcp_eff_send_mss_netif+0x50>
 80151e2:	2300      	movs	r3, #0
 80151e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80151e6:	8a7a      	ldrh	r2, [r7, #18]
 80151e8:	89fb      	ldrh	r3, [r7, #14]
 80151ea:	4293      	cmp	r3, r2
 80151ec:	bf28      	it	cs
 80151ee:	4613      	movcs	r3, r2
 80151f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80151f2:	89fb      	ldrh	r3, [r7, #14]
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3718      	adds	r7, #24
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	0802250c 	.word	0x0802250c
 8015200:	08022c18 	.word	0x08022c18
 8015204:	08022550 	.word	0x08022550

08015208 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d119      	bne.n	8015250 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801521c:	4b10      	ldr	r3, [pc, #64]	; (8015260 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801521e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8015222:	4910      	ldr	r1, [pc, #64]	; (8015264 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015224:	4810      	ldr	r0, [pc, #64]	; (8015268 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015226:	f00a fcc7 	bl	801fbb8 <iprintf>

  while (pcb != NULL) {
 801522a:	e011      	b.n	8015250 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	429a      	cmp	r2, r3
 8015236:	d108      	bne.n	801524a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	68db      	ldr	r3, [r3, #12]
 801523c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801523e:	68f8      	ldr	r0, [r7, #12]
 8015240:	f7fe fd50 	bl	8013ce4 <tcp_abort>
      pcb = next;
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	60fb      	str	r3, [r7, #12]
 8015248:	e002      	b.n	8015250 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	68db      	ldr	r3, [r3, #12]
 801524e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d1ea      	bne.n	801522c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8015256:	bf00      	nop
 8015258:	bf00      	nop
 801525a:	3710      	adds	r7, #16
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	0802250c 	.word	0x0802250c
 8015264:	08022c40 	.word	0x08022c40
 8015268:	08022550 	.word	0x08022550

0801526c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b084      	sub	sp, #16
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d02a      	beq.n	80152d2 <tcp_netif_ip_addr_changed+0x66>
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d026      	beq.n	80152d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015284:	4b15      	ldr	r3, [pc, #84]	; (80152dc <tcp_netif_ip_addr_changed+0x70>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	4619      	mov	r1, r3
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f7ff ffbc 	bl	8015208 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015290:	4b13      	ldr	r3, [pc, #76]	; (80152e0 <tcp_netif_ip_addr_changed+0x74>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	4619      	mov	r1, r3
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f7ff ffb6 	bl	8015208 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d017      	beq.n	80152d2 <tcp_netif_ip_addr_changed+0x66>
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d013      	beq.n	80152d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80152aa:	4b0e      	ldr	r3, [pc, #56]	; (80152e4 <tcp_netif_ip_addr_changed+0x78>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	60fb      	str	r3, [r7, #12]
 80152b0:	e00c      	b.n	80152cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d103      	bne.n	80152c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	68db      	ldr	r3, [r3, #12]
 80152ca:	60fb      	str	r3, [r7, #12]
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d1ef      	bne.n	80152b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80152d2:	bf00      	nop
 80152d4:	3710      	adds	r7, #16
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	2000e9f4 	.word	0x2000e9f4
 80152e0:	2000ea00 	.word	0x2000ea00
 80152e4:	2000e9fc 	.word	0x2000e9fc

080152e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d007      	beq.n	8015308 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7ff fb6f 	bl	80149e0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2200      	movs	r2, #0
 8015306:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015308:	bf00      	nop
 801530a:	3708      	adds	r7, #8
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}

08015310 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015310:	b590      	push	{r4, r7, lr}
 8015312:	b08d      	sub	sp, #52	; 0x34
 8015314:	af04      	add	r7, sp, #16
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d105      	bne.n	801532c <tcp_input+0x1c>
 8015320:	4b9b      	ldr	r3, [pc, #620]	; (8015590 <tcp_input+0x280>)
 8015322:	2283      	movs	r2, #131	; 0x83
 8015324:	499b      	ldr	r1, [pc, #620]	; (8015594 <tcp_input+0x284>)
 8015326:	489c      	ldr	r0, [pc, #624]	; (8015598 <tcp_input+0x288>)
 8015328:	f00a fc46 	bl	801fbb8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	685b      	ldr	r3, [r3, #4]
 8015330:	4a9a      	ldr	r2, [pc, #616]	; (801559c <tcp_input+0x28c>)
 8015332:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	895b      	ldrh	r3, [r3, #10]
 8015338:	2b13      	cmp	r3, #19
 801533a:	f240 83c4 	bls.w	8015ac6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801533e:	4b98      	ldr	r3, [pc, #608]	; (80155a0 <tcp_input+0x290>)
 8015340:	695b      	ldr	r3, [r3, #20]
 8015342:	4a97      	ldr	r2, [pc, #604]	; (80155a0 <tcp_input+0x290>)
 8015344:	6812      	ldr	r2, [r2, #0]
 8015346:	4611      	mov	r1, r2
 8015348:	4618      	mov	r0, r3
 801534a:	f008 fa5d 	bl	801d808 <ip4_addr_isbroadcast_u32>
 801534e:	4603      	mov	r3, r0
 8015350:	2b00      	cmp	r3, #0
 8015352:	f040 83ba 	bne.w	8015aca <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015356:	4b92      	ldr	r3, [pc, #584]	; (80155a0 <tcp_input+0x290>)
 8015358:	695b      	ldr	r3, [r3, #20]
 801535a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801535e:	2be0      	cmp	r3, #224	; 0xe0
 8015360:	f000 83b3 	beq.w	8015aca <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015364:	4b8d      	ldr	r3, [pc, #564]	; (801559c <tcp_input+0x28c>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	899b      	ldrh	r3, [r3, #12]
 801536a:	b29b      	uxth	r3, r3
 801536c:	4618      	mov	r0, r3
 801536e:	f7fc fb01 	bl	8011974 <lwip_htons>
 8015372:	4603      	mov	r3, r0
 8015374:	0b1b      	lsrs	r3, r3, #12
 8015376:	b29b      	uxth	r3, r3
 8015378:	b2db      	uxtb	r3, r3
 801537a:	009b      	lsls	r3, r3, #2
 801537c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801537e:	7cbb      	ldrb	r3, [r7, #18]
 8015380:	2b13      	cmp	r3, #19
 8015382:	f240 83a4 	bls.w	8015ace <tcp_input+0x7be>
 8015386:	7cbb      	ldrb	r3, [r7, #18]
 8015388:	b29a      	uxth	r2, r3
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	891b      	ldrh	r3, [r3, #8]
 801538e:	429a      	cmp	r2, r3
 8015390:	f200 839d 	bhi.w	8015ace <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015394:	7cbb      	ldrb	r3, [r7, #18]
 8015396:	b29b      	uxth	r3, r3
 8015398:	3b14      	subs	r3, #20
 801539a:	b29a      	uxth	r2, r3
 801539c:	4b81      	ldr	r3, [pc, #516]	; (80155a4 <tcp_input+0x294>)
 801539e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80153a0:	4b81      	ldr	r3, [pc, #516]	; (80155a8 <tcp_input+0x298>)
 80153a2:	2200      	movs	r2, #0
 80153a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	895a      	ldrh	r2, [r3, #10]
 80153aa:	7cbb      	ldrb	r3, [r7, #18]
 80153ac:	b29b      	uxth	r3, r3
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d309      	bcc.n	80153c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80153b2:	4b7c      	ldr	r3, [pc, #496]	; (80155a4 <tcp_input+0x294>)
 80153b4:	881a      	ldrh	r2, [r3, #0]
 80153b6:	4b7d      	ldr	r3, [pc, #500]	; (80155ac <tcp_input+0x29c>)
 80153b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80153ba:	7cbb      	ldrb	r3, [r7, #18]
 80153bc:	4619      	mov	r1, r3
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f7fd fe0a 	bl	8012fd8 <pbuf_remove_header>
 80153c4:	e04e      	b.n	8015464 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d105      	bne.n	80153da <tcp_input+0xca>
 80153ce:	4b70      	ldr	r3, [pc, #448]	; (8015590 <tcp_input+0x280>)
 80153d0:	22c2      	movs	r2, #194	; 0xc2
 80153d2:	4977      	ldr	r1, [pc, #476]	; (80155b0 <tcp_input+0x2a0>)
 80153d4:	4870      	ldr	r0, [pc, #448]	; (8015598 <tcp_input+0x288>)
 80153d6:	f00a fbef 	bl	801fbb8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80153da:	2114      	movs	r1, #20
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f7fd fdfb 	bl	8012fd8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	895a      	ldrh	r2, [r3, #10]
 80153e6:	4b71      	ldr	r3, [pc, #452]	; (80155ac <tcp_input+0x29c>)
 80153e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80153ea:	4b6e      	ldr	r3, [pc, #440]	; (80155a4 <tcp_input+0x294>)
 80153ec:	881a      	ldrh	r2, [r3, #0]
 80153ee:	4b6f      	ldr	r3, [pc, #444]	; (80155ac <tcp_input+0x29c>)
 80153f0:	881b      	ldrh	r3, [r3, #0]
 80153f2:	1ad3      	subs	r3, r2, r3
 80153f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80153f6:	4b6d      	ldr	r3, [pc, #436]	; (80155ac <tcp_input+0x29c>)
 80153f8:	881b      	ldrh	r3, [r3, #0]
 80153fa:	4619      	mov	r1, r3
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f7fd fdeb 	bl	8012fd8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	895b      	ldrh	r3, [r3, #10]
 8015408:	8a3a      	ldrh	r2, [r7, #16]
 801540a:	429a      	cmp	r2, r3
 801540c:	f200 8361 	bhi.w	8015ad2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	4a64      	ldr	r2, [pc, #400]	; (80155a8 <tcp_input+0x298>)
 8015418:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	8a3a      	ldrh	r2, [r7, #16]
 8015420:	4611      	mov	r1, r2
 8015422:	4618      	mov	r0, r3
 8015424:	f7fd fdd8 	bl	8012fd8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	891a      	ldrh	r2, [r3, #8]
 801542c:	8a3b      	ldrh	r3, [r7, #16]
 801542e:	1ad3      	subs	r3, r2, r3
 8015430:	b29a      	uxth	r2, r3
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	895b      	ldrh	r3, [r3, #10]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d005      	beq.n	801544a <tcp_input+0x13a>
 801543e:	4b54      	ldr	r3, [pc, #336]	; (8015590 <tcp_input+0x280>)
 8015440:	22df      	movs	r2, #223	; 0xdf
 8015442:	495c      	ldr	r1, [pc, #368]	; (80155b4 <tcp_input+0x2a4>)
 8015444:	4854      	ldr	r0, [pc, #336]	; (8015598 <tcp_input+0x288>)
 8015446:	f00a fbb7 	bl	801fbb8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	891a      	ldrh	r2, [r3, #8]
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	891b      	ldrh	r3, [r3, #8]
 8015454:	429a      	cmp	r2, r3
 8015456:	d005      	beq.n	8015464 <tcp_input+0x154>
 8015458:	4b4d      	ldr	r3, [pc, #308]	; (8015590 <tcp_input+0x280>)
 801545a:	22e0      	movs	r2, #224	; 0xe0
 801545c:	4956      	ldr	r1, [pc, #344]	; (80155b8 <tcp_input+0x2a8>)
 801545e:	484e      	ldr	r0, [pc, #312]	; (8015598 <tcp_input+0x288>)
 8015460:	f00a fbaa 	bl	801fbb8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015464:	4b4d      	ldr	r3, [pc, #308]	; (801559c <tcp_input+0x28c>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	881b      	ldrh	r3, [r3, #0]
 801546a:	b29b      	uxth	r3, r3
 801546c:	4a4b      	ldr	r2, [pc, #300]	; (801559c <tcp_input+0x28c>)
 801546e:	6814      	ldr	r4, [r2, #0]
 8015470:	4618      	mov	r0, r3
 8015472:	f7fc fa7f 	bl	8011974 <lwip_htons>
 8015476:	4603      	mov	r3, r0
 8015478:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801547a:	4b48      	ldr	r3, [pc, #288]	; (801559c <tcp_input+0x28c>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	885b      	ldrh	r3, [r3, #2]
 8015480:	b29b      	uxth	r3, r3
 8015482:	4a46      	ldr	r2, [pc, #280]	; (801559c <tcp_input+0x28c>)
 8015484:	6814      	ldr	r4, [r2, #0]
 8015486:	4618      	mov	r0, r3
 8015488:	f7fc fa74 	bl	8011974 <lwip_htons>
 801548c:	4603      	mov	r3, r0
 801548e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015490:	4b42      	ldr	r3, [pc, #264]	; (801559c <tcp_input+0x28c>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	4a41      	ldr	r2, [pc, #260]	; (801559c <tcp_input+0x28c>)
 8015498:	6814      	ldr	r4, [r2, #0]
 801549a:	4618      	mov	r0, r3
 801549c:	f7fc fa7f 	bl	801199e <lwip_htonl>
 80154a0:	4603      	mov	r3, r0
 80154a2:	6063      	str	r3, [r4, #4]
 80154a4:	6863      	ldr	r3, [r4, #4]
 80154a6:	4a45      	ldr	r2, [pc, #276]	; (80155bc <tcp_input+0x2ac>)
 80154a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80154aa:	4b3c      	ldr	r3, [pc, #240]	; (801559c <tcp_input+0x28c>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	689b      	ldr	r3, [r3, #8]
 80154b0:	4a3a      	ldr	r2, [pc, #232]	; (801559c <tcp_input+0x28c>)
 80154b2:	6814      	ldr	r4, [r2, #0]
 80154b4:	4618      	mov	r0, r3
 80154b6:	f7fc fa72 	bl	801199e <lwip_htonl>
 80154ba:	4603      	mov	r3, r0
 80154bc:	60a3      	str	r3, [r4, #8]
 80154be:	68a3      	ldr	r3, [r4, #8]
 80154c0:	4a3f      	ldr	r2, [pc, #252]	; (80155c0 <tcp_input+0x2b0>)
 80154c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80154c4:	4b35      	ldr	r3, [pc, #212]	; (801559c <tcp_input+0x28c>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	89db      	ldrh	r3, [r3, #14]
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	4a33      	ldr	r2, [pc, #204]	; (801559c <tcp_input+0x28c>)
 80154ce:	6814      	ldr	r4, [r2, #0]
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7fc fa4f 	bl	8011974 <lwip_htons>
 80154d6:	4603      	mov	r3, r0
 80154d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80154da:	4b30      	ldr	r3, [pc, #192]	; (801559c <tcp_input+0x28c>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	899b      	ldrh	r3, [r3, #12]
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fc fa46 	bl	8011974 <lwip_htons>
 80154e8:	4603      	mov	r3, r0
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80154f0:	b2da      	uxtb	r2, r3
 80154f2:	4b34      	ldr	r3, [pc, #208]	; (80155c4 <tcp_input+0x2b4>)
 80154f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	891a      	ldrh	r2, [r3, #8]
 80154fa:	4b33      	ldr	r3, [pc, #204]	; (80155c8 <tcp_input+0x2b8>)
 80154fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80154fe:	4b31      	ldr	r3, [pc, #196]	; (80155c4 <tcp_input+0x2b4>)
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	f003 0303 	and.w	r3, r3, #3
 8015506:	2b00      	cmp	r3, #0
 8015508:	d00c      	beq.n	8015524 <tcp_input+0x214>
    tcplen++;
 801550a:	4b2f      	ldr	r3, [pc, #188]	; (80155c8 <tcp_input+0x2b8>)
 801550c:	881b      	ldrh	r3, [r3, #0]
 801550e:	3301      	adds	r3, #1
 8015510:	b29a      	uxth	r2, r3
 8015512:	4b2d      	ldr	r3, [pc, #180]	; (80155c8 <tcp_input+0x2b8>)
 8015514:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	891a      	ldrh	r2, [r3, #8]
 801551a:	4b2b      	ldr	r3, [pc, #172]	; (80155c8 <tcp_input+0x2b8>)
 801551c:	881b      	ldrh	r3, [r3, #0]
 801551e:	429a      	cmp	r2, r3
 8015520:	f200 82d9 	bhi.w	8015ad6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015524:	2300      	movs	r3, #0
 8015526:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015528:	4b28      	ldr	r3, [pc, #160]	; (80155cc <tcp_input+0x2bc>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	61fb      	str	r3, [r7, #28]
 801552e:	e09d      	b.n	801566c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015530:	69fb      	ldr	r3, [r7, #28]
 8015532:	7d1b      	ldrb	r3, [r3, #20]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d105      	bne.n	8015544 <tcp_input+0x234>
 8015538:	4b15      	ldr	r3, [pc, #84]	; (8015590 <tcp_input+0x280>)
 801553a:	22fb      	movs	r2, #251	; 0xfb
 801553c:	4924      	ldr	r1, [pc, #144]	; (80155d0 <tcp_input+0x2c0>)
 801553e:	4816      	ldr	r0, [pc, #88]	; (8015598 <tcp_input+0x288>)
 8015540:	f00a fb3a 	bl	801fbb8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	7d1b      	ldrb	r3, [r3, #20]
 8015548:	2b0a      	cmp	r3, #10
 801554a:	d105      	bne.n	8015558 <tcp_input+0x248>
 801554c:	4b10      	ldr	r3, [pc, #64]	; (8015590 <tcp_input+0x280>)
 801554e:	22fc      	movs	r2, #252	; 0xfc
 8015550:	4920      	ldr	r1, [pc, #128]	; (80155d4 <tcp_input+0x2c4>)
 8015552:	4811      	ldr	r0, [pc, #68]	; (8015598 <tcp_input+0x288>)
 8015554:	f00a fb30 	bl	801fbb8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015558:	69fb      	ldr	r3, [r7, #28]
 801555a:	7d1b      	ldrb	r3, [r3, #20]
 801555c:	2b01      	cmp	r3, #1
 801555e:	d105      	bne.n	801556c <tcp_input+0x25c>
 8015560:	4b0b      	ldr	r3, [pc, #44]	; (8015590 <tcp_input+0x280>)
 8015562:	22fd      	movs	r2, #253	; 0xfd
 8015564:	491c      	ldr	r1, [pc, #112]	; (80155d8 <tcp_input+0x2c8>)
 8015566:	480c      	ldr	r0, [pc, #48]	; (8015598 <tcp_input+0x288>)
 8015568:	f00a fb26 	bl	801fbb8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	7a1b      	ldrb	r3, [r3, #8]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d033      	beq.n	80155dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015574:	69fb      	ldr	r3, [r7, #28]
 8015576:	7a1a      	ldrb	r2, [r3, #8]
 8015578:	4b09      	ldr	r3, [pc, #36]	; (80155a0 <tcp_input+0x290>)
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015580:	3301      	adds	r3, #1
 8015582:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015584:	429a      	cmp	r2, r3
 8015586:	d029      	beq.n	80155dc <tcp_input+0x2cc>
      prev = pcb;
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	61bb      	str	r3, [r7, #24]
      continue;
 801558c:	e06b      	b.n	8015666 <tcp_input+0x356>
 801558e:	bf00      	nop
 8015590:	08022c74 	.word	0x08022c74
 8015594:	08022ca8 	.word	0x08022ca8
 8015598:	08022cc0 	.word	0x08022cc0
 801559c:	20005fbc 	.word	0x20005fbc
 80155a0:	2000b2c0 	.word	0x2000b2c0
 80155a4:	20005fc0 	.word	0x20005fc0
 80155a8:	20005fc4 	.word	0x20005fc4
 80155ac:	20005fc2 	.word	0x20005fc2
 80155b0:	08022ce8 	.word	0x08022ce8
 80155b4:	08022cf8 	.word	0x08022cf8
 80155b8:	08022d04 	.word	0x08022d04
 80155bc:	20005fcc 	.word	0x20005fcc
 80155c0:	20005fd0 	.word	0x20005fd0
 80155c4:	20005fd8 	.word	0x20005fd8
 80155c8:	20005fd6 	.word	0x20005fd6
 80155cc:	2000e9f4 	.word	0x2000e9f4
 80155d0:	08022d24 	.word	0x08022d24
 80155d4:	08022d4c 	.word	0x08022d4c
 80155d8:	08022d78 	.word	0x08022d78
    }

    if (pcb->remote_port == tcphdr->src &&
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	8b1a      	ldrh	r2, [r3, #24]
 80155e0:	4b94      	ldr	r3, [pc, #592]	; (8015834 <tcp_input+0x524>)
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	881b      	ldrh	r3, [r3, #0]
 80155e6:	b29b      	uxth	r3, r3
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d13a      	bne.n	8015662 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80155ec:	69fb      	ldr	r3, [r7, #28]
 80155ee:	8ada      	ldrh	r2, [r3, #22]
 80155f0:	4b90      	ldr	r3, [pc, #576]	; (8015834 <tcp_input+0x524>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	885b      	ldrh	r3, [r3, #2]
 80155f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d132      	bne.n	8015662 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	685a      	ldr	r2, [r3, #4]
 8015600:	4b8d      	ldr	r3, [pc, #564]	; (8015838 <tcp_input+0x528>)
 8015602:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015604:	429a      	cmp	r2, r3
 8015606:	d12c      	bne.n	8015662 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015608:	69fb      	ldr	r3, [r7, #28]
 801560a:	681a      	ldr	r2, [r3, #0]
 801560c:	4b8a      	ldr	r3, [pc, #552]	; (8015838 <tcp_input+0x528>)
 801560e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015610:	429a      	cmp	r2, r3
 8015612:	d126      	bne.n	8015662 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015614:	69fb      	ldr	r3, [r7, #28]
 8015616:	68db      	ldr	r3, [r3, #12]
 8015618:	69fa      	ldr	r2, [r7, #28]
 801561a:	429a      	cmp	r2, r3
 801561c:	d106      	bne.n	801562c <tcp_input+0x31c>
 801561e:	4b87      	ldr	r3, [pc, #540]	; (801583c <tcp_input+0x52c>)
 8015620:	f240 120d 	movw	r2, #269	; 0x10d
 8015624:	4986      	ldr	r1, [pc, #536]	; (8015840 <tcp_input+0x530>)
 8015626:	4887      	ldr	r0, [pc, #540]	; (8015844 <tcp_input+0x534>)
 8015628:	f00a fac6 	bl	801fbb8 <iprintf>
      if (prev != NULL) {
 801562c:	69bb      	ldr	r3, [r7, #24]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d00a      	beq.n	8015648 <tcp_input+0x338>
        prev->next = pcb->next;
 8015632:	69fb      	ldr	r3, [r7, #28]
 8015634:	68da      	ldr	r2, [r3, #12]
 8015636:	69bb      	ldr	r3, [r7, #24]
 8015638:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801563a:	4b83      	ldr	r3, [pc, #524]	; (8015848 <tcp_input+0x538>)
 801563c:	681a      	ldr	r2, [r3, #0]
 801563e:	69fb      	ldr	r3, [r7, #28]
 8015640:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015642:	4a81      	ldr	r2, [pc, #516]	; (8015848 <tcp_input+0x538>)
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015648:	69fb      	ldr	r3, [r7, #28]
 801564a:	68db      	ldr	r3, [r3, #12]
 801564c:	69fa      	ldr	r2, [r7, #28]
 801564e:	429a      	cmp	r2, r3
 8015650:	d111      	bne.n	8015676 <tcp_input+0x366>
 8015652:	4b7a      	ldr	r3, [pc, #488]	; (801583c <tcp_input+0x52c>)
 8015654:	f240 1215 	movw	r2, #277	; 0x115
 8015658:	497c      	ldr	r1, [pc, #496]	; (801584c <tcp_input+0x53c>)
 801565a:	487a      	ldr	r0, [pc, #488]	; (8015844 <tcp_input+0x534>)
 801565c:	f00a faac 	bl	801fbb8 <iprintf>
      break;
 8015660:	e009      	b.n	8015676 <tcp_input+0x366>
    }
    prev = pcb;
 8015662:	69fb      	ldr	r3, [r7, #28]
 8015664:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015666:	69fb      	ldr	r3, [r7, #28]
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	61fb      	str	r3, [r7, #28]
 801566c:	69fb      	ldr	r3, [r7, #28]
 801566e:	2b00      	cmp	r3, #0
 8015670:	f47f af5e 	bne.w	8015530 <tcp_input+0x220>
 8015674:	e000      	b.n	8015678 <tcp_input+0x368>
      break;
 8015676:	bf00      	nop
  }

  if (pcb == NULL) {
 8015678:	69fb      	ldr	r3, [r7, #28]
 801567a:	2b00      	cmp	r3, #0
 801567c:	f040 8095 	bne.w	80157aa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015680:	4b73      	ldr	r3, [pc, #460]	; (8015850 <tcp_input+0x540>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	61fb      	str	r3, [r7, #28]
 8015686:	e03f      	b.n	8015708 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015688:	69fb      	ldr	r3, [r7, #28]
 801568a:	7d1b      	ldrb	r3, [r3, #20]
 801568c:	2b0a      	cmp	r3, #10
 801568e:	d006      	beq.n	801569e <tcp_input+0x38e>
 8015690:	4b6a      	ldr	r3, [pc, #424]	; (801583c <tcp_input+0x52c>)
 8015692:	f240 121f 	movw	r2, #287	; 0x11f
 8015696:	496f      	ldr	r1, [pc, #444]	; (8015854 <tcp_input+0x544>)
 8015698:	486a      	ldr	r0, [pc, #424]	; (8015844 <tcp_input+0x534>)
 801569a:	f00a fa8d 	bl	801fbb8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	7a1b      	ldrb	r3, [r3, #8]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d009      	beq.n	80156ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	7a1a      	ldrb	r2, [r3, #8]
 80156aa:	4b63      	ldr	r3, [pc, #396]	; (8015838 <tcp_input+0x528>)
 80156ac:	685b      	ldr	r3, [r3, #4]
 80156ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80156b2:	3301      	adds	r3, #1
 80156b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d122      	bne.n	8015700 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80156ba:	69fb      	ldr	r3, [r7, #28]
 80156bc:	8b1a      	ldrh	r2, [r3, #24]
 80156be:	4b5d      	ldr	r3, [pc, #372]	; (8015834 <tcp_input+0x524>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	881b      	ldrh	r3, [r3, #0]
 80156c4:	b29b      	uxth	r3, r3
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d11b      	bne.n	8015702 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80156ca:	69fb      	ldr	r3, [r7, #28]
 80156cc:	8ada      	ldrh	r2, [r3, #22]
 80156ce:	4b59      	ldr	r3, [pc, #356]	; (8015834 <tcp_input+0x524>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	885b      	ldrh	r3, [r3, #2]
 80156d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d113      	bne.n	8015702 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80156da:	69fb      	ldr	r3, [r7, #28]
 80156dc:	685a      	ldr	r2, [r3, #4]
 80156de:	4b56      	ldr	r3, [pc, #344]	; (8015838 <tcp_input+0x528>)
 80156e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80156e2:	429a      	cmp	r2, r3
 80156e4:	d10d      	bne.n	8015702 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	681a      	ldr	r2, [r3, #0]
 80156ea:	4b53      	ldr	r3, [pc, #332]	; (8015838 <tcp_input+0x528>)
 80156ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d107      	bne.n	8015702 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80156f2:	69f8      	ldr	r0, [r7, #28]
 80156f4:	f000 fb54 	bl	8015da0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f7fd fcf3 	bl	80130e4 <pbuf_free>
        return;
 80156fe:	e1f0      	b.n	8015ae2 <tcp_input+0x7d2>
        continue;
 8015700:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	68db      	ldr	r3, [r3, #12]
 8015706:	61fb      	str	r3, [r7, #28]
 8015708:	69fb      	ldr	r3, [r7, #28]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d1bc      	bne.n	8015688 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801570e:	2300      	movs	r3, #0
 8015710:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015712:	4b51      	ldr	r3, [pc, #324]	; (8015858 <tcp_input+0x548>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	617b      	str	r3, [r7, #20]
 8015718:	e02a      	b.n	8015770 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	7a1b      	ldrb	r3, [r3, #8]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d00c      	beq.n	801573c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	7a1a      	ldrb	r2, [r3, #8]
 8015726:	4b44      	ldr	r3, [pc, #272]	; (8015838 <tcp_input+0x528>)
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801572e:	3301      	adds	r3, #1
 8015730:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015732:	429a      	cmp	r2, r3
 8015734:	d002      	beq.n	801573c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	61bb      	str	r3, [r7, #24]
        continue;
 801573a:	e016      	b.n	801576a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	8ada      	ldrh	r2, [r3, #22]
 8015740:	4b3c      	ldr	r3, [pc, #240]	; (8015834 <tcp_input+0x524>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	885b      	ldrh	r3, [r3, #2]
 8015746:	b29b      	uxth	r3, r3
 8015748:	429a      	cmp	r2, r3
 801574a:	d10c      	bne.n	8015766 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	4b39      	ldr	r3, [pc, #228]	; (8015838 <tcp_input+0x528>)
 8015752:	695b      	ldr	r3, [r3, #20]
 8015754:	429a      	cmp	r2, r3
 8015756:	d00f      	beq.n	8015778 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d00d      	beq.n	801577a <tcp_input+0x46a>
 801575e:	697b      	ldr	r3, [r7, #20]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d009      	beq.n	801577a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801576a:	697b      	ldr	r3, [r7, #20]
 801576c:	68db      	ldr	r3, [r3, #12]
 801576e:	617b      	str	r3, [r7, #20]
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d1d1      	bne.n	801571a <tcp_input+0x40a>
 8015776:	e000      	b.n	801577a <tcp_input+0x46a>
            break;
 8015778:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801577a:	697b      	ldr	r3, [r7, #20]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d014      	beq.n	80157aa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d00a      	beq.n	801579c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	68da      	ldr	r2, [r3, #12]
 801578a:	69bb      	ldr	r3, [r7, #24]
 801578c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801578e:	4b32      	ldr	r3, [pc, #200]	; (8015858 <tcp_input+0x548>)
 8015790:	681a      	ldr	r2, [r3, #0]
 8015792:	697b      	ldr	r3, [r7, #20]
 8015794:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8015796:	4a30      	ldr	r2, [pc, #192]	; (8015858 <tcp_input+0x548>)
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801579c:	6978      	ldr	r0, [r7, #20]
 801579e:	f000 fa01 	bl	8015ba4 <tcp_listen_input>
      }
      pbuf_free(p);
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7fd fc9e 	bl	80130e4 <pbuf_free>
      return;
 80157a8:	e19b      	b.n	8015ae2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80157aa:	69fb      	ldr	r3, [r7, #28]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f000 8160 	beq.w	8015a72 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80157b2:	4b2a      	ldr	r3, [pc, #168]	; (801585c <tcp_input+0x54c>)
 80157b4:	2200      	movs	r2, #0
 80157b6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	891a      	ldrh	r2, [r3, #8]
 80157bc:	4b27      	ldr	r3, [pc, #156]	; (801585c <tcp_input+0x54c>)
 80157be:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80157c0:	4a26      	ldr	r2, [pc, #152]	; (801585c <tcp_input+0x54c>)
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80157c6:	4b1b      	ldr	r3, [pc, #108]	; (8015834 <tcp_input+0x524>)
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	4a24      	ldr	r2, [pc, #144]	; (801585c <tcp_input+0x54c>)
 80157cc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80157ce:	4b24      	ldr	r3, [pc, #144]	; (8015860 <tcp_input+0x550>)
 80157d0:	2200      	movs	r2, #0
 80157d2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80157d4:	4b23      	ldr	r3, [pc, #140]	; (8015864 <tcp_input+0x554>)
 80157d6:	2200      	movs	r2, #0
 80157d8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80157da:	4b23      	ldr	r3, [pc, #140]	; (8015868 <tcp_input+0x558>)
 80157dc:	2200      	movs	r2, #0
 80157de:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80157e0:	4b22      	ldr	r3, [pc, #136]	; (801586c <tcp_input+0x55c>)
 80157e2:	781b      	ldrb	r3, [r3, #0]
 80157e4:	f003 0308 	and.w	r3, r3, #8
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d006      	beq.n	80157fa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	7b5b      	ldrb	r3, [r3, #13]
 80157f0:	f043 0301 	orr.w	r3, r3, #1
 80157f4:	b2da      	uxtb	r2, r3
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d038      	beq.n	8015874 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015802:	69f8      	ldr	r0, [r7, #28]
 8015804:	f7ff f870 	bl	80148e8 <tcp_process_refused_data>
 8015808:	4603      	mov	r3, r0
 801580a:	f113 0f0d 	cmn.w	r3, #13
 801580e:	d007      	beq.n	8015820 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015810:	69fb      	ldr	r3, [r7, #28]
 8015812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015814:	2b00      	cmp	r3, #0
 8015816:	d02d      	beq.n	8015874 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015818:	4b15      	ldr	r3, [pc, #84]	; (8015870 <tcp_input+0x560>)
 801581a:	881b      	ldrh	r3, [r3, #0]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d029      	beq.n	8015874 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015820:	69fb      	ldr	r3, [r7, #28]
 8015822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015824:	2b00      	cmp	r3, #0
 8015826:	f040 8104 	bne.w	8015a32 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801582a:	69f8      	ldr	r0, [r7, #28]
 801582c:	f003 fe16 	bl	801945c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015830:	e0ff      	b.n	8015a32 <tcp_input+0x722>
 8015832:	bf00      	nop
 8015834:	20005fbc 	.word	0x20005fbc
 8015838:	2000b2c0 	.word	0x2000b2c0
 801583c:	08022c74 	.word	0x08022c74
 8015840:	08022da0 	.word	0x08022da0
 8015844:	08022cc0 	.word	0x08022cc0
 8015848:	2000e9f4 	.word	0x2000e9f4
 801584c:	08022dcc 	.word	0x08022dcc
 8015850:	2000ea04 	.word	0x2000ea04
 8015854:	08022df8 	.word	0x08022df8
 8015858:	2000e9fc 	.word	0x2000e9fc
 801585c:	20005fac 	.word	0x20005fac
 8015860:	20005fdc 	.word	0x20005fdc
 8015864:	20005fd9 	.word	0x20005fd9
 8015868:	20005fd4 	.word	0x20005fd4
 801586c:	20005fd8 	.word	0x20005fd8
 8015870:	20005fd6 	.word	0x20005fd6
      }
    }
    tcp_input_pcb = pcb;
 8015874:	4a9c      	ldr	r2, [pc, #624]	; (8015ae8 <tcp_input+0x7d8>)
 8015876:	69fb      	ldr	r3, [r7, #28]
 8015878:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801587a:	69f8      	ldr	r0, [r7, #28]
 801587c:	f000 fb0a 	bl	8015e94 <tcp_process>
 8015880:	4603      	mov	r3, r0
 8015882:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015884:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015888:	f113 0f0d 	cmn.w	r3, #13
 801588c:	f000 80d3 	beq.w	8015a36 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8015890:	4b96      	ldr	r3, [pc, #600]	; (8015aec <tcp_input+0x7dc>)
 8015892:	781b      	ldrb	r3, [r3, #0]
 8015894:	f003 0308 	and.w	r3, r3, #8
 8015898:	2b00      	cmp	r3, #0
 801589a:	d015      	beq.n	80158c8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801589c:	69fb      	ldr	r3, [r7, #28]
 801589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d008      	beq.n	80158b8 <tcp_input+0x5a8>
 80158a6:	69fb      	ldr	r3, [r7, #28]
 80158a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158ac:	69fa      	ldr	r2, [r7, #28]
 80158ae:	6912      	ldr	r2, [r2, #16]
 80158b0:	f06f 010d 	mvn.w	r1, #13
 80158b4:	4610      	mov	r0, r2
 80158b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80158b8:	69f9      	ldr	r1, [r7, #28]
 80158ba:	488d      	ldr	r0, [pc, #564]	; (8015af0 <tcp_input+0x7e0>)
 80158bc:	f7ff fbb0 	bl	8015020 <tcp_pcb_remove>
        tcp_free(pcb);
 80158c0:	69f8      	ldr	r0, [r7, #28]
 80158c2:	f7fd fecb 	bl	801365c <tcp_free>
 80158c6:	e0c1      	b.n	8015a4c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80158c8:	2300      	movs	r3, #0
 80158ca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80158cc:	4b89      	ldr	r3, [pc, #548]	; (8015af4 <tcp_input+0x7e4>)
 80158ce:	881b      	ldrh	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d01d      	beq.n	8015910 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80158d4:	4b87      	ldr	r3, [pc, #540]	; (8015af4 <tcp_input+0x7e4>)
 80158d6:	881b      	ldrh	r3, [r3, #0]
 80158d8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80158da:	69fb      	ldr	r3, [r7, #28]
 80158dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d00a      	beq.n	80158fa <tcp_input+0x5ea>
 80158e4:	69fb      	ldr	r3, [r7, #28]
 80158e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80158ea:	69fa      	ldr	r2, [r7, #28]
 80158ec:	6910      	ldr	r0, [r2, #16]
 80158ee:	89fa      	ldrh	r2, [r7, #14]
 80158f0:	69f9      	ldr	r1, [r7, #28]
 80158f2:	4798      	blx	r3
 80158f4:	4603      	mov	r3, r0
 80158f6:	74fb      	strb	r3, [r7, #19]
 80158f8:	e001      	b.n	80158fe <tcp_input+0x5ee>
 80158fa:	2300      	movs	r3, #0
 80158fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80158fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015902:	f113 0f0d 	cmn.w	r3, #13
 8015906:	f000 8098 	beq.w	8015a3a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801590a:	4b7a      	ldr	r3, [pc, #488]	; (8015af4 <tcp_input+0x7e4>)
 801590c:	2200      	movs	r2, #0
 801590e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015910:	69f8      	ldr	r0, [r7, #28]
 8015912:	f000 f907 	bl	8015b24 <tcp_input_delayed_close>
 8015916:	4603      	mov	r3, r0
 8015918:	2b00      	cmp	r3, #0
 801591a:	f040 8090 	bne.w	8015a3e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801591e:	4b76      	ldr	r3, [pc, #472]	; (8015af8 <tcp_input+0x7e8>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d041      	beq.n	80159aa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015926:	69fb      	ldr	r3, [r7, #28]
 8015928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801592a:	2b00      	cmp	r3, #0
 801592c:	d006      	beq.n	801593c <tcp_input+0x62c>
 801592e:	4b73      	ldr	r3, [pc, #460]	; (8015afc <tcp_input+0x7ec>)
 8015930:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015934:	4972      	ldr	r1, [pc, #456]	; (8015b00 <tcp_input+0x7f0>)
 8015936:	4873      	ldr	r0, [pc, #460]	; (8015b04 <tcp_input+0x7f4>)
 8015938:	f00a f93e 	bl	801fbb8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	8b5b      	ldrh	r3, [r3, #26]
 8015940:	f003 0310 	and.w	r3, r3, #16
 8015944:	2b00      	cmp	r3, #0
 8015946:	d008      	beq.n	801595a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015948:	4b6b      	ldr	r3, [pc, #428]	; (8015af8 <tcp_input+0x7e8>)
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	4618      	mov	r0, r3
 801594e:	f7fd fbc9 	bl	80130e4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015952:	69f8      	ldr	r0, [r7, #28]
 8015954:	f7fe f9c6 	bl	8013ce4 <tcp_abort>
            goto aborted;
 8015958:	e078      	b.n	8015a4c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801595a:	69fb      	ldr	r3, [r7, #28]
 801595c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015960:	2b00      	cmp	r3, #0
 8015962:	d00c      	beq.n	801597e <tcp_input+0x66e>
 8015964:	69fb      	ldr	r3, [r7, #28]
 8015966:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801596a:	69fb      	ldr	r3, [r7, #28]
 801596c:	6918      	ldr	r0, [r3, #16]
 801596e:	4b62      	ldr	r3, [pc, #392]	; (8015af8 <tcp_input+0x7e8>)
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	2300      	movs	r3, #0
 8015974:	69f9      	ldr	r1, [r7, #28]
 8015976:	47a0      	blx	r4
 8015978:	4603      	mov	r3, r0
 801597a:	74fb      	strb	r3, [r7, #19]
 801597c:	e008      	b.n	8015990 <tcp_input+0x680>
 801597e:	4b5e      	ldr	r3, [pc, #376]	; (8015af8 <tcp_input+0x7e8>)
 8015980:	681a      	ldr	r2, [r3, #0]
 8015982:	2300      	movs	r3, #0
 8015984:	69f9      	ldr	r1, [r7, #28]
 8015986:	2000      	movs	r0, #0
 8015988:	f7ff f884 	bl	8014a94 <tcp_recv_null>
 801598c:	4603      	mov	r3, r0
 801598e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015990:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015994:	f113 0f0d 	cmn.w	r3, #13
 8015998:	d053      	beq.n	8015a42 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801599a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d003      	beq.n	80159aa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80159a2:	4b55      	ldr	r3, [pc, #340]	; (8015af8 <tcp_input+0x7e8>)
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	69fb      	ldr	r3, [r7, #28]
 80159a8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80159aa:	4b50      	ldr	r3, [pc, #320]	; (8015aec <tcp_input+0x7dc>)
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	f003 0320 	and.w	r3, r3, #32
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d030      	beq.n	8015a18 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d009      	beq.n	80159d2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80159be:	69fb      	ldr	r3, [r7, #28]
 80159c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80159c2:	7b5a      	ldrb	r2, [r3, #13]
 80159c4:	69fb      	ldr	r3, [r7, #28]
 80159c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80159c8:	f042 0220 	orr.w	r2, r2, #32
 80159cc:	b2d2      	uxtb	r2, r2
 80159ce:	735a      	strb	r2, [r3, #13]
 80159d0:	e022      	b.n	8015a18 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80159d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80159da:	d005      	beq.n	80159e8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80159dc:	69fb      	ldr	r3, [r7, #28]
 80159de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80159e0:	3301      	adds	r3, #1
 80159e2:	b29a      	uxth	r2, r3
 80159e4:	69fb      	ldr	r3, [r7, #28]
 80159e6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80159e8:	69fb      	ldr	r3, [r7, #28]
 80159ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d00b      	beq.n	8015a0a <tcp_input+0x6fa>
 80159f2:	69fb      	ldr	r3, [r7, #28]
 80159f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	6918      	ldr	r0, [r3, #16]
 80159fc:	2300      	movs	r3, #0
 80159fe:	2200      	movs	r2, #0
 8015a00:	69f9      	ldr	r1, [r7, #28]
 8015a02:	47a0      	blx	r4
 8015a04:	4603      	mov	r3, r0
 8015a06:	74fb      	strb	r3, [r7, #19]
 8015a08:	e001      	b.n	8015a0e <tcp_input+0x6fe>
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015a0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a12:	f113 0f0d 	cmn.w	r3, #13
 8015a16:	d016      	beq.n	8015a46 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015a18:	4b33      	ldr	r3, [pc, #204]	; (8015ae8 <tcp_input+0x7d8>)
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015a1e:	69f8      	ldr	r0, [r7, #28]
 8015a20:	f000 f880 	bl	8015b24 <tcp_input_delayed_close>
 8015a24:	4603      	mov	r3, r0
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d10f      	bne.n	8015a4a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015a2a:	69f8      	ldr	r0, [r7, #28]
 8015a2c:	f002 ff10 	bl	8018850 <tcp_output>
 8015a30:	e00c      	b.n	8015a4c <tcp_input+0x73c>
        goto aborted;
 8015a32:	bf00      	nop
 8015a34:	e00a      	b.n	8015a4c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015a36:	bf00      	nop
 8015a38:	e008      	b.n	8015a4c <tcp_input+0x73c>
              goto aborted;
 8015a3a:	bf00      	nop
 8015a3c:	e006      	b.n	8015a4c <tcp_input+0x73c>
          goto aborted;
 8015a3e:	bf00      	nop
 8015a40:	e004      	b.n	8015a4c <tcp_input+0x73c>
            goto aborted;
 8015a42:	bf00      	nop
 8015a44:	e002      	b.n	8015a4c <tcp_input+0x73c>
              goto aborted;
 8015a46:	bf00      	nop
 8015a48:	e000      	b.n	8015a4c <tcp_input+0x73c>
          goto aborted;
 8015a4a:	bf00      	nop
    tcp_input_pcb = NULL;
 8015a4c:	4b26      	ldr	r3, [pc, #152]	; (8015ae8 <tcp_input+0x7d8>)
 8015a4e:	2200      	movs	r2, #0
 8015a50:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015a52:	4b29      	ldr	r3, [pc, #164]	; (8015af8 <tcp_input+0x7e8>)
 8015a54:	2200      	movs	r2, #0
 8015a56:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015a58:	4b2b      	ldr	r3, [pc, #172]	; (8015b08 <tcp_input+0x7f8>)
 8015a5a:	685b      	ldr	r3, [r3, #4]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d03f      	beq.n	8015ae0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8015a60:	4b29      	ldr	r3, [pc, #164]	; (8015b08 <tcp_input+0x7f8>)
 8015a62:	685b      	ldr	r3, [r3, #4]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7fd fb3d 	bl	80130e4 <pbuf_free>
      inseg.p = NULL;
 8015a6a:	4b27      	ldr	r3, [pc, #156]	; (8015b08 <tcp_input+0x7f8>)
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015a70:	e036      	b.n	8015ae0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015a72:	4b26      	ldr	r3, [pc, #152]	; (8015b0c <tcp_input+0x7fc>)
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	899b      	ldrh	r3, [r3, #12]
 8015a78:	b29b      	uxth	r3, r3
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7fb ff7a 	bl	8011974 <lwip_htons>
 8015a80:	4603      	mov	r3, r0
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	f003 0304 	and.w	r3, r3, #4
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d118      	bne.n	8015abe <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a8c:	4b20      	ldr	r3, [pc, #128]	; (8015b10 <tcp_input+0x800>)
 8015a8e:	6819      	ldr	r1, [r3, #0]
 8015a90:	4b20      	ldr	r3, [pc, #128]	; (8015b14 <tcp_input+0x804>)
 8015a92:	881b      	ldrh	r3, [r3, #0]
 8015a94:	461a      	mov	r2, r3
 8015a96:	4b20      	ldr	r3, [pc, #128]	; (8015b18 <tcp_input+0x808>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a9c:	4b1b      	ldr	r3, [pc, #108]	; (8015b0c <tcp_input+0x7fc>)
 8015a9e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015aa0:	885b      	ldrh	r3, [r3, #2]
 8015aa2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015aa4:	4a19      	ldr	r2, [pc, #100]	; (8015b0c <tcp_input+0x7fc>)
 8015aa6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015aa8:	8812      	ldrh	r2, [r2, #0]
 8015aaa:	b292      	uxth	r2, r2
 8015aac:	9202      	str	r2, [sp, #8]
 8015aae:	9301      	str	r3, [sp, #4]
 8015ab0:	4b1a      	ldr	r3, [pc, #104]	; (8015b1c <tcp_input+0x80c>)
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	4b1a      	ldr	r3, [pc, #104]	; (8015b20 <tcp_input+0x810>)
 8015ab6:	4602      	mov	r2, r0
 8015ab8:	2000      	movs	r0, #0
 8015aba:	f003 fc7d 	bl	80193b8 <tcp_rst>
    pbuf_free(p);
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f7fd fb10 	bl	80130e4 <pbuf_free>
  return;
 8015ac4:	e00c      	b.n	8015ae0 <tcp_input+0x7d0>
    goto dropped;
 8015ac6:	bf00      	nop
 8015ac8:	e006      	b.n	8015ad8 <tcp_input+0x7c8>
    goto dropped;
 8015aca:	bf00      	nop
 8015acc:	e004      	b.n	8015ad8 <tcp_input+0x7c8>
    goto dropped;
 8015ace:	bf00      	nop
 8015ad0:	e002      	b.n	8015ad8 <tcp_input+0x7c8>
      goto dropped;
 8015ad2:	bf00      	nop
 8015ad4:	e000      	b.n	8015ad8 <tcp_input+0x7c8>
      goto dropped;
 8015ad6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f7fd fb03 	bl	80130e4 <pbuf_free>
 8015ade:	e000      	b.n	8015ae2 <tcp_input+0x7d2>
  return;
 8015ae0:	bf00      	nop
}
 8015ae2:	3724      	adds	r7, #36	; 0x24
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd90      	pop	{r4, r7, pc}
 8015ae8:	2000ea08 	.word	0x2000ea08
 8015aec:	20005fd9 	.word	0x20005fd9
 8015af0:	2000e9f4 	.word	0x2000e9f4
 8015af4:	20005fd4 	.word	0x20005fd4
 8015af8:	20005fdc 	.word	0x20005fdc
 8015afc:	08022c74 	.word	0x08022c74
 8015b00:	08022e28 	.word	0x08022e28
 8015b04:	08022cc0 	.word	0x08022cc0
 8015b08:	20005fac 	.word	0x20005fac
 8015b0c:	20005fbc 	.word	0x20005fbc
 8015b10:	20005fd0 	.word	0x20005fd0
 8015b14:	20005fd6 	.word	0x20005fd6
 8015b18:	20005fcc 	.word	0x20005fcc
 8015b1c:	2000b2d0 	.word	0x2000b2d0
 8015b20:	2000b2d4 	.word	0x2000b2d4

08015b24 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d106      	bne.n	8015b40 <tcp_input_delayed_close+0x1c>
 8015b32:	4b17      	ldr	r3, [pc, #92]	; (8015b90 <tcp_input_delayed_close+0x6c>)
 8015b34:	f240 225a 	movw	r2, #602	; 0x25a
 8015b38:	4916      	ldr	r1, [pc, #88]	; (8015b94 <tcp_input_delayed_close+0x70>)
 8015b3a:	4817      	ldr	r0, [pc, #92]	; (8015b98 <tcp_input_delayed_close+0x74>)
 8015b3c:	f00a f83c 	bl	801fbb8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015b40:	4b16      	ldr	r3, [pc, #88]	; (8015b9c <tcp_input_delayed_close+0x78>)
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	f003 0310 	and.w	r3, r3, #16
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d01c      	beq.n	8015b86 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	8b5b      	ldrh	r3, [r3, #26]
 8015b50:	f003 0310 	and.w	r3, r3, #16
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d10d      	bne.n	8015b74 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d008      	beq.n	8015b74 <tcp_input_delayed_close+0x50>
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b68:	687a      	ldr	r2, [r7, #4]
 8015b6a:	6912      	ldr	r2, [r2, #16]
 8015b6c:	f06f 010e 	mvn.w	r1, #14
 8015b70:	4610      	mov	r0, r2
 8015b72:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015b74:	6879      	ldr	r1, [r7, #4]
 8015b76:	480a      	ldr	r0, [pc, #40]	; (8015ba0 <tcp_input_delayed_close+0x7c>)
 8015b78:	f7ff fa52 	bl	8015020 <tcp_pcb_remove>
    tcp_free(pcb);
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f7fd fd6d 	bl	801365c <tcp_free>
    return 1;
 8015b82:	2301      	movs	r3, #1
 8015b84:	e000      	b.n	8015b88 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015b86:	2300      	movs	r3, #0
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3708      	adds	r7, #8
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}
 8015b90:	08022c74 	.word	0x08022c74
 8015b94:	08022e44 	.word	0x08022e44
 8015b98:	08022cc0 	.word	0x08022cc0
 8015b9c:	20005fd9 	.word	0x20005fd9
 8015ba0:	2000e9f4 	.word	0x2000e9f4

08015ba4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015ba4:	b590      	push	{r4, r7, lr}
 8015ba6:	b08b      	sub	sp, #44	; 0x2c
 8015ba8:	af04      	add	r7, sp, #16
 8015baa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015bac:	4b6f      	ldr	r3, [pc, #444]	; (8015d6c <tcp_listen_input+0x1c8>)
 8015bae:	781b      	ldrb	r3, [r3, #0]
 8015bb0:	f003 0304 	and.w	r3, r3, #4
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	f040 80d2 	bne.w	8015d5e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d106      	bne.n	8015bce <tcp_listen_input+0x2a>
 8015bc0:	4b6b      	ldr	r3, [pc, #428]	; (8015d70 <tcp_listen_input+0x1cc>)
 8015bc2:	f240 2281 	movw	r2, #641	; 0x281
 8015bc6:	496b      	ldr	r1, [pc, #428]	; (8015d74 <tcp_listen_input+0x1d0>)
 8015bc8:	486b      	ldr	r0, [pc, #428]	; (8015d78 <tcp_listen_input+0x1d4>)
 8015bca:	f009 fff5 	bl	801fbb8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015bce:	4b67      	ldr	r3, [pc, #412]	; (8015d6c <tcp_listen_input+0x1c8>)
 8015bd0:	781b      	ldrb	r3, [r3, #0]
 8015bd2:	f003 0310 	and.w	r3, r3, #16
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d019      	beq.n	8015c0e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015bda:	4b68      	ldr	r3, [pc, #416]	; (8015d7c <tcp_listen_input+0x1d8>)
 8015bdc:	6819      	ldr	r1, [r3, #0]
 8015bde:	4b68      	ldr	r3, [pc, #416]	; (8015d80 <tcp_listen_input+0x1dc>)
 8015be0:	881b      	ldrh	r3, [r3, #0]
 8015be2:	461a      	mov	r2, r3
 8015be4:	4b67      	ldr	r3, [pc, #412]	; (8015d84 <tcp_listen_input+0x1e0>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015bea:	4b67      	ldr	r3, [pc, #412]	; (8015d88 <tcp_listen_input+0x1e4>)
 8015bec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015bee:	885b      	ldrh	r3, [r3, #2]
 8015bf0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015bf2:	4a65      	ldr	r2, [pc, #404]	; (8015d88 <tcp_listen_input+0x1e4>)
 8015bf4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015bf6:	8812      	ldrh	r2, [r2, #0]
 8015bf8:	b292      	uxth	r2, r2
 8015bfa:	9202      	str	r2, [sp, #8]
 8015bfc:	9301      	str	r3, [sp, #4]
 8015bfe:	4b63      	ldr	r3, [pc, #396]	; (8015d8c <tcp_listen_input+0x1e8>)
 8015c00:	9300      	str	r3, [sp, #0]
 8015c02:	4b63      	ldr	r3, [pc, #396]	; (8015d90 <tcp_listen_input+0x1ec>)
 8015c04:	4602      	mov	r2, r0
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f003 fbd6 	bl	80193b8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015c0c:	e0a9      	b.n	8015d62 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015c0e:	4b57      	ldr	r3, [pc, #348]	; (8015d6c <tcp_listen_input+0x1c8>)
 8015c10:	781b      	ldrb	r3, [r3, #0]
 8015c12:	f003 0302 	and.w	r3, r3, #2
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	f000 80a3 	beq.w	8015d62 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	7d5b      	ldrb	r3, [r3, #21]
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7ff f85b 	bl	8014cdc <tcp_alloc>
 8015c26:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d111      	bne.n	8015c52 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	699b      	ldr	r3, [r3, #24]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d00a      	beq.n	8015c4c <tcp_listen_input+0xa8>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	699b      	ldr	r3, [r3, #24]
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	6910      	ldr	r0, [r2, #16]
 8015c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8015c42:	2100      	movs	r1, #0
 8015c44:	4798      	blx	r3
 8015c46:	4603      	mov	r3, r0
 8015c48:	73bb      	strb	r3, [r7, #14]
      return;
 8015c4a:	e08b      	b.n	8015d64 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015c4c:	23f0      	movs	r3, #240	; 0xf0
 8015c4e:	73bb      	strb	r3, [r7, #14]
      return;
 8015c50:	e088      	b.n	8015d64 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015c52:	4b50      	ldr	r3, [pc, #320]	; (8015d94 <tcp_listen_input+0x1f0>)
 8015c54:	695a      	ldr	r2, [r3, #20]
 8015c56:	697b      	ldr	r3, [r7, #20]
 8015c58:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015c5a:	4b4e      	ldr	r3, [pc, #312]	; (8015d94 <tcp_listen_input+0x1f0>)
 8015c5c:	691a      	ldr	r2, [r3, #16]
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	8ada      	ldrh	r2, [r3, #22]
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015c6a:	4b47      	ldr	r3, [pc, #284]	; (8015d88 <tcp_listen_input+0x1e4>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	881b      	ldrh	r3, [r3, #0]
 8015c70:	b29a      	uxth	r2, r3
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015c76:	697b      	ldr	r3, [r7, #20]
 8015c78:	2203      	movs	r2, #3
 8015c7a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015c7c:	4b41      	ldr	r3, [pc, #260]	; (8015d84 <tcp_listen_input+0x1e0>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	1c5a      	adds	r2, r3, #1
 8015c82:	697b      	ldr	r3, [r7, #20]
 8015c84:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015c86:	697b      	ldr	r3, [r7, #20]
 8015c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015c8e:	6978      	ldr	r0, [r7, #20]
 8015c90:	f7ff fa5a 	bl	8015148 <tcp_next_iss>
 8015c94:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	693a      	ldr	r2, [r7, #16]
 8015c9a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015c9c:	697b      	ldr	r3, [r7, #20]
 8015c9e:	693a      	ldr	r2, [r7, #16]
 8015ca0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	693a      	ldr	r2, [r7, #16]
 8015ca6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	693a      	ldr	r2, [r7, #16]
 8015cac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015cae:	4b35      	ldr	r3, [pc, #212]	; (8015d84 <tcp_listen_input+0x1e0>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	1e5a      	subs	r2, r3, #1
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	691a      	ldr	r2, [r3, #16]
 8015cbc:	697b      	ldr	r3, [r7, #20]
 8015cbe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	687a      	ldr	r2, [r7, #4]
 8015cc4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	7a5b      	ldrb	r3, [r3, #9]
 8015cca:	f003 030c 	and.w	r3, r3, #12
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	7a1a      	ldrb	r2, [r3, #8]
 8015cd8:	697b      	ldr	r3, [r7, #20]
 8015cda:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015cdc:	4b2e      	ldr	r3, [pc, #184]	; (8015d98 <tcp_listen_input+0x1f4>)
 8015cde:	681a      	ldr	r2, [r3, #0]
 8015ce0:	697b      	ldr	r3, [r7, #20]
 8015ce2:	60da      	str	r2, [r3, #12]
 8015ce4:	4a2c      	ldr	r2, [pc, #176]	; (8015d98 <tcp_listen_input+0x1f4>)
 8015ce6:	697b      	ldr	r3, [r7, #20]
 8015ce8:	6013      	str	r3, [r2, #0]
 8015cea:	f003 fd27 	bl	801973c <tcp_timer_needed>
 8015cee:	4b2b      	ldr	r3, [pc, #172]	; (8015d9c <tcp_listen_input+0x1f8>)
 8015cf0:	2201      	movs	r2, #1
 8015cf2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015cf4:	6978      	ldr	r0, [r7, #20]
 8015cf6:	f001 fd8d 	bl	8017814 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015cfa:	4b23      	ldr	r3, [pc, #140]	; (8015d88 <tcp_listen_input+0x1e4>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	89db      	ldrh	r3, [r3, #14]
 8015d00:	b29a      	uxth	r2, r3
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015d08:	697b      	ldr	r3, [r7, #20]
 8015d0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	3304      	adds	r3, #4
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f007 fabf 	bl	801d2a0 <ip4_route>
 8015d22:	4601      	mov	r1, r0
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	3304      	adds	r3, #4
 8015d28:	461a      	mov	r2, r3
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	f7ff fa32 	bl	8015194 <tcp_eff_send_mss_netif>
 8015d30:	4603      	mov	r3, r0
 8015d32:	461a      	mov	r2, r3
 8015d34:	697b      	ldr	r3, [r7, #20]
 8015d36:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015d38:	2112      	movs	r1, #18
 8015d3a:	6978      	ldr	r0, [r7, #20]
 8015d3c:	f002 fc9a 	bl	8018674 <tcp_enqueue_flags>
 8015d40:	4603      	mov	r3, r0
 8015d42:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d004      	beq.n	8015d56 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015d4c:	2100      	movs	r1, #0
 8015d4e:	6978      	ldr	r0, [r7, #20]
 8015d50:	f7fd ff0a 	bl	8013b68 <tcp_abandon>
      return;
 8015d54:	e006      	b.n	8015d64 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015d56:	6978      	ldr	r0, [r7, #20]
 8015d58:	f002 fd7a 	bl	8018850 <tcp_output>
  return;
 8015d5c:	e001      	b.n	8015d62 <tcp_listen_input+0x1be>
    return;
 8015d5e:	bf00      	nop
 8015d60:	e000      	b.n	8015d64 <tcp_listen_input+0x1c0>
  return;
 8015d62:	bf00      	nop
}
 8015d64:	371c      	adds	r7, #28
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd90      	pop	{r4, r7, pc}
 8015d6a:	bf00      	nop
 8015d6c:	20005fd8 	.word	0x20005fd8
 8015d70:	08022c74 	.word	0x08022c74
 8015d74:	08022e6c 	.word	0x08022e6c
 8015d78:	08022cc0 	.word	0x08022cc0
 8015d7c:	20005fd0 	.word	0x20005fd0
 8015d80:	20005fd6 	.word	0x20005fd6
 8015d84:	20005fcc 	.word	0x20005fcc
 8015d88:	20005fbc 	.word	0x20005fbc
 8015d8c:	2000b2d0 	.word	0x2000b2d0
 8015d90:	2000b2d4 	.word	0x2000b2d4
 8015d94:	2000b2c0 	.word	0x2000b2c0
 8015d98:	2000e9f4 	.word	0x2000e9f4
 8015d9c:	2000e9f0 	.word	0x2000e9f0

08015da0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b086      	sub	sp, #24
 8015da4:	af04      	add	r7, sp, #16
 8015da6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015da8:	4b2f      	ldr	r3, [pc, #188]	; (8015e68 <tcp_timewait_input+0xc8>)
 8015daa:	781b      	ldrb	r3, [r3, #0]
 8015dac:	f003 0304 	and.w	r3, r3, #4
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d153      	bne.n	8015e5c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d106      	bne.n	8015dc8 <tcp_timewait_input+0x28>
 8015dba:	4b2c      	ldr	r3, [pc, #176]	; (8015e6c <tcp_timewait_input+0xcc>)
 8015dbc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015dc0:	492b      	ldr	r1, [pc, #172]	; (8015e70 <tcp_timewait_input+0xd0>)
 8015dc2:	482c      	ldr	r0, [pc, #176]	; (8015e74 <tcp_timewait_input+0xd4>)
 8015dc4:	f009 fef8 	bl	801fbb8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015dc8:	4b27      	ldr	r3, [pc, #156]	; (8015e68 <tcp_timewait_input+0xc8>)
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	f003 0302 	and.w	r3, r3, #2
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d02a      	beq.n	8015e2a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015dd4:	4b28      	ldr	r3, [pc, #160]	; (8015e78 <tcp_timewait_input+0xd8>)
 8015dd6:	681a      	ldr	r2, [r3, #0]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ddc:	1ad3      	subs	r3, r2, r3
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	db2d      	blt.n	8015e3e <tcp_timewait_input+0x9e>
 8015de2:	4b25      	ldr	r3, [pc, #148]	; (8015e78 <tcp_timewait_input+0xd8>)
 8015de4:	681a      	ldr	r2, [r3, #0]
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dea:	6879      	ldr	r1, [r7, #4]
 8015dec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015dee:	440b      	add	r3, r1
 8015df0:	1ad3      	subs	r3, r2, r3
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	dc23      	bgt.n	8015e3e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015df6:	4b21      	ldr	r3, [pc, #132]	; (8015e7c <tcp_timewait_input+0xdc>)
 8015df8:	6819      	ldr	r1, [r3, #0]
 8015dfa:	4b21      	ldr	r3, [pc, #132]	; (8015e80 <tcp_timewait_input+0xe0>)
 8015dfc:	881b      	ldrh	r3, [r3, #0]
 8015dfe:	461a      	mov	r2, r3
 8015e00:	4b1d      	ldr	r3, [pc, #116]	; (8015e78 <tcp_timewait_input+0xd8>)
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e06:	4b1f      	ldr	r3, [pc, #124]	; (8015e84 <tcp_timewait_input+0xe4>)
 8015e08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e0a:	885b      	ldrh	r3, [r3, #2]
 8015e0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e0e:	4a1d      	ldr	r2, [pc, #116]	; (8015e84 <tcp_timewait_input+0xe4>)
 8015e10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e12:	8812      	ldrh	r2, [r2, #0]
 8015e14:	b292      	uxth	r2, r2
 8015e16:	9202      	str	r2, [sp, #8]
 8015e18:	9301      	str	r3, [sp, #4]
 8015e1a:	4b1b      	ldr	r3, [pc, #108]	; (8015e88 <tcp_timewait_input+0xe8>)
 8015e1c:	9300      	str	r3, [sp, #0]
 8015e1e:	4b1b      	ldr	r3, [pc, #108]	; (8015e8c <tcp_timewait_input+0xec>)
 8015e20:	4602      	mov	r2, r0
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f003 fac8 	bl	80193b8 <tcp_rst>
      return;
 8015e28:	e01b      	b.n	8015e62 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015e2a:	4b0f      	ldr	r3, [pc, #60]	; (8015e68 <tcp_timewait_input+0xc8>)
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	f003 0301 	and.w	r3, r3, #1
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d003      	beq.n	8015e3e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015e36:	4b16      	ldr	r3, [pc, #88]	; (8015e90 <tcp_timewait_input+0xf0>)
 8015e38:	681a      	ldr	r2, [r3, #0]
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015e3e:	4b10      	ldr	r3, [pc, #64]	; (8015e80 <tcp_timewait_input+0xe0>)
 8015e40:	881b      	ldrh	r3, [r3, #0]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d00c      	beq.n	8015e60 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	8b5b      	ldrh	r3, [r3, #26]
 8015e4a:	f043 0302 	orr.w	r3, r3, #2
 8015e4e:	b29a      	uxth	r2, r3
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f002 fcfb 	bl	8018850 <tcp_output>
  }
  return;
 8015e5a:	e001      	b.n	8015e60 <tcp_timewait_input+0xc0>
    return;
 8015e5c:	bf00      	nop
 8015e5e:	e000      	b.n	8015e62 <tcp_timewait_input+0xc2>
  return;
 8015e60:	bf00      	nop
}
 8015e62:	3708      	adds	r7, #8
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	20005fd8 	.word	0x20005fd8
 8015e6c:	08022c74 	.word	0x08022c74
 8015e70:	08022e8c 	.word	0x08022e8c
 8015e74:	08022cc0 	.word	0x08022cc0
 8015e78:	20005fcc 	.word	0x20005fcc
 8015e7c:	20005fd0 	.word	0x20005fd0
 8015e80:	20005fd6 	.word	0x20005fd6
 8015e84:	20005fbc 	.word	0x20005fbc
 8015e88:	2000b2d0 	.word	0x2000b2d0
 8015e8c:	2000b2d4 	.word	0x2000b2d4
 8015e90:	2000e9f8 	.word	0x2000e9f8

08015e94 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015e94:	b590      	push	{r4, r7, lr}
 8015e96:	b08d      	sub	sp, #52	; 0x34
 8015e98:	af04      	add	r7, sp, #16
 8015e9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d106      	bne.n	8015eb8 <tcp_process+0x24>
 8015eaa:	4ba5      	ldr	r3, [pc, #660]	; (8016140 <tcp_process+0x2ac>)
 8015eac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015eb0:	49a4      	ldr	r1, [pc, #656]	; (8016144 <tcp_process+0x2b0>)
 8015eb2:	48a5      	ldr	r0, [pc, #660]	; (8016148 <tcp_process+0x2b4>)
 8015eb4:	f009 fe80 	bl	801fbb8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015eb8:	4ba4      	ldr	r3, [pc, #656]	; (801614c <tcp_process+0x2b8>)
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	f003 0304 	and.w	r3, r3, #4
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d04e      	beq.n	8015f62 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	7d1b      	ldrb	r3, [r3, #20]
 8015ec8:	2b02      	cmp	r3, #2
 8015eca:	d108      	bne.n	8015ede <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015ed0:	4b9f      	ldr	r3, [pc, #636]	; (8016150 <tcp_process+0x2bc>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d123      	bne.n	8015f20 <tcp_process+0x8c>
        acceptable = 1;
 8015ed8:	2301      	movs	r3, #1
 8015eda:	76fb      	strb	r3, [r7, #27]
 8015edc:	e020      	b.n	8015f20 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ee2:	4b9c      	ldr	r3, [pc, #624]	; (8016154 <tcp_process+0x2c0>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d102      	bne.n	8015ef0 <tcp_process+0x5c>
        acceptable = 1;
 8015eea:	2301      	movs	r3, #1
 8015eec:	76fb      	strb	r3, [r7, #27]
 8015eee:	e017      	b.n	8015f20 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015ef0:	4b98      	ldr	r3, [pc, #608]	; (8016154 <tcp_process+0x2c0>)
 8015ef2:	681a      	ldr	r2, [r3, #0]
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ef8:	1ad3      	subs	r3, r2, r3
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	db10      	blt.n	8015f20 <tcp_process+0x8c>
 8015efe:	4b95      	ldr	r3, [pc, #596]	; (8016154 <tcp_process+0x2c0>)
 8015f00:	681a      	ldr	r2, [r3, #0]
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f06:	6879      	ldr	r1, [r7, #4]
 8015f08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015f0a:	440b      	add	r3, r1
 8015f0c:	1ad3      	subs	r3, r2, r3
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	dc06      	bgt.n	8015f20 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	8b5b      	ldrh	r3, [r3, #26]
 8015f16:	f043 0302 	orr.w	r3, r3, #2
 8015f1a:	b29a      	uxth	r2, r3
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015f20:	7efb      	ldrb	r3, [r7, #27]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d01b      	beq.n	8015f5e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	7d1b      	ldrb	r3, [r3, #20]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d106      	bne.n	8015f3c <tcp_process+0xa8>
 8015f2e:	4b84      	ldr	r3, [pc, #528]	; (8016140 <tcp_process+0x2ac>)
 8015f30:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015f34:	4988      	ldr	r1, [pc, #544]	; (8016158 <tcp_process+0x2c4>)
 8015f36:	4884      	ldr	r0, [pc, #528]	; (8016148 <tcp_process+0x2b4>)
 8015f38:	f009 fe3e 	bl	801fbb8 <iprintf>
      recv_flags |= TF_RESET;
 8015f3c:	4b87      	ldr	r3, [pc, #540]	; (801615c <tcp_process+0x2c8>)
 8015f3e:	781b      	ldrb	r3, [r3, #0]
 8015f40:	f043 0308 	orr.w	r3, r3, #8
 8015f44:	b2da      	uxtb	r2, r3
 8015f46:	4b85      	ldr	r3, [pc, #532]	; (801615c <tcp_process+0x2c8>)
 8015f48:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	8b5b      	ldrh	r3, [r3, #26]
 8015f4e:	f023 0301 	bic.w	r3, r3, #1
 8015f52:	b29a      	uxth	r2, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015f58:	f06f 030d 	mvn.w	r3, #13
 8015f5c:	e37a      	b.n	8016654 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	e378      	b.n	8016654 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015f62:	4b7a      	ldr	r3, [pc, #488]	; (801614c <tcp_process+0x2b8>)
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	f003 0302 	and.w	r3, r3, #2
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d010      	beq.n	8015f90 <tcp_process+0xfc>
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	7d1b      	ldrb	r3, [r3, #20]
 8015f72:	2b02      	cmp	r3, #2
 8015f74:	d00c      	beq.n	8015f90 <tcp_process+0xfc>
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	7d1b      	ldrb	r3, [r3, #20]
 8015f7a:	2b03      	cmp	r3, #3
 8015f7c:	d008      	beq.n	8015f90 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	8b5b      	ldrh	r3, [r3, #26]
 8015f82:	f043 0302 	orr.w	r3, r3, #2
 8015f86:	b29a      	uxth	r2, r3
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	e361      	b.n	8016654 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	8b5b      	ldrh	r3, [r3, #26]
 8015f94:	f003 0310 	and.w	r3, r3, #16
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d103      	bne.n	8015fa4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015f9c:	4b70      	ldr	r3, [pc, #448]	; (8016160 <tcp_process+0x2cc>)
 8015f9e:	681a      	ldr	r2, [r3, #0]
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	2200      	movs	r2, #0
 8015fb0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f001 fc2d 	bl	8017814 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	7d1b      	ldrb	r3, [r3, #20]
 8015fbe:	3b02      	subs	r3, #2
 8015fc0:	2b07      	cmp	r3, #7
 8015fc2:	f200 8337 	bhi.w	8016634 <tcp_process+0x7a0>
 8015fc6:	a201      	add	r2, pc, #4	; (adr r2, 8015fcc <tcp_process+0x138>)
 8015fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fcc:	08015fed 	.word	0x08015fed
 8015fd0:	0801621d 	.word	0x0801621d
 8015fd4:	08016395 	.word	0x08016395
 8015fd8:	080163bf 	.word	0x080163bf
 8015fdc:	080164e3 	.word	0x080164e3
 8015fe0:	08016395 	.word	0x08016395
 8015fe4:	0801656f 	.word	0x0801656f
 8015fe8:	080165ff 	.word	0x080165ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015fec:	4b57      	ldr	r3, [pc, #348]	; (801614c <tcp_process+0x2b8>)
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	f003 0310 	and.w	r3, r3, #16
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	f000 80e4 	beq.w	80161c2 <tcp_process+0x32e>
 8015ffa:	4b54      	ldr	r3, [pc, #336]	; (801614c <tcp_process+0x2b8>)
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	f003 0302 	and.w	r3, r3, #2
 8016002:	2b00      	cmp	r3, #0
 8016004:	f000 80dd 	beq.w	80161c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801600c:	1c5a      	adds	r2, r3, #1
 801600e:	4b50      	ldr	r3, [pc, #320]	; (8016150 <tcp_process+0x2bc>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	429a      	cmp	r2, r3
 8016014:	f040 80d5 	bne.w	80161c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016018:	4b4e      	ldr	r3, [pc, #312]	; (8016154 <tcp_process+0x2c0>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	1c5a      	adds	r2, r3, #1
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801602a:	4b49      	ldr	r3, [pc, #292]	; (8016150 <tcp_process+0x2bc>)
 801602c:	681a      	ldr	r2, [r3, #0]
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016032:	4b4c      	ldr	r3, [pc, #304]	; (8016164 <tcp_process+0x2d0>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	89db      	ldrh	r3, [r3, #14]
 8016038:	b29a      	uxth	r2, r3
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801604c:	4b41      	ldr	r3, [pc, #260]	; (8016154 <tcp_process+0x2c0>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	1e5a      	subs	r2, r3, #1
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2204      	movs	r2, #4
 801605a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	3304      	adds	r3, #4
 8016064:	4618      	mov	r0, r3
 8016066:	f007 f91b 	bl	801d2a0 <ip4_route>
 801606a:	4601      	mov	r1, r0
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	3304      	adds	r3, #4
 8016070:	461a      	mov	r2, r3
 8016072:	4620      	mov	r0, r4
 8016074:	f7ff f88e 	bl	8015194 <tcp_eff_send_mss_netif>
 8016078:	4603      	mov	r3, r0
 801607a:	461a      	mov	r2, r3
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016084:	009a      	lsls	r2, r3, #2
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801608a:	005b      	lsls	r3, r3, #1
 801608c:	f241 111c 	movw	r1, #4380	; 0x111c
 8016090:	428b      	cmp	r3, r1
 8016092:	bf38      	it	cc
 8016094:	460b      	movcc	r3, r1
 8016096:	429a      	cmp	r2, r3
 8016098:	d204      	bcs.n	80160a4 <tcp_process+0x210>
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801609e:	009b      	lsls	r3, r3, #2
 80160a0:	b29b      	uxth	r3, r3
 80160a2:	e00d      	b.n	80160c0 <tcp_process+0x22c>
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160a8:	005b      	lsls	r3, r3, #1
 80160aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80160ae:	4293      	cmp	r3, r2
 80160b0:	d904      	bls.n	80160bc <tcp_process+0x228>
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160b6:	005b      	lsls	r3, r3, #1
 80160b8:	b29b      	uxth	r3, r3
 80160ba:	e001      	b.n	80160c0 <tcp_process+0x22c>
 80160bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d106      	bne.n	80160de <tcp_process+0x24a>
 80160d0:	4b1b      	ldr	r3, [pc, #108]	; (8016140 <tcp_process+0x2ac>)
 80160d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80160d6:	4924      	ldr	r1, [pc, #144]	; (8016168 <tcp_process+0x2d4>)
 80160d8:	481b      	ldr	r0, [pc, #108]	; (8016148 <tcp_process+0x2b4>)
 80160da:	f009 fd6d 	bl	801fbb8 <iprintf>
        --pcb->snd_queuelen;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80160e4:	3b01      	subs	r3, #1
 80160e6:	b29a      	uxth	r2, r3
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80160f4:	69fb      	ldr	r3, [r7, #28]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d111      	bne.n	801611e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016100:	69fb      	ldr	r3, [r7, #28]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d106      	bne.n	8016114 <tcp_process+0x280>
 8016106:	4b0e      	ldr	r3, [pc, #56]	; (8016140 <tcp_process+0x2ac>)
 8016108:	f44f 725d 	mov.w	r2, #884	; 0x374
 801610c:	4917      	ldr	r1, [pc, #92]	; (801616c <tcp_process+0x2d8>)
 801610e:	480e      	ldr	r0, [pc, #56]	; (8016148 <tcp_process+0x2b4>)
 8016110:	f009 fd52 	bl	801fbb8 <iprintf>
          pcb->unsent = rseg->next;
 8016114:	69fb      	ldr	r3, [r7, #28]
 8016116:	681a      	ldr	r2, [r3, #0]
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	66da      	str	r2, [r3, #108]	; 0x6c
 801611c:	e003      	b.n	8016126 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801611e:	69fb      	ldr	r3, [r7, #28]
 8016120:	681a      	ldr	r2, [r3, #0]
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8016126:	69f8      	ldr	r0, [r7, #28]
 8016128:	f7fe fc6f 	bl	8014a0a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016130:	2b00      	cmp	r3, #0
 8016132:	d11d      	bne.n	8016170 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801613a:	861a      	strh	r2, [r3, #48]	; 0x30
 801613c:	e01f      	b.n	801617e <tcp_process+0x2ea>
 801613e:	bf00      	nop
 8016140:	08022c74 	.word	0x08022c74
 8016144:	08022eac 	.word	0x08022eac
 8016148:	08022cc0 	.word	0x08022cc0
 801614c:	20005fd8 	.word	0x20005fd8
 8016150:	20005fd0 	.word	0x20005fd0
 8016154:	20005fcc 	.word	0x20005fcc
 8016158:	08022ec8 	.word	0x08022ec8
 801615c:	20005fd9 	.word	0x20005fd9
 8016160:	2000e9f8 	.word	0x2000e9f8
 8016164:	20005fbc 	.word	0x20005fbc
 8016168:	08022ee8 	.word	0x08022ee8
 801616c:	08022f00 	.word	0x08022f00
        } else {
          pcb->rtime = 0;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2200      	movs	r2, #0
 8016174:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	2200      	movs	r2, #0
 801617a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016184:	2b00      	cmp	r3, #0
 8016186:	d00a      	beq.n	801619e <tcp_process+0x30a>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801618e:	687a      	ldr	r2, [r7, #4]
 8016190:	6910      	ldr	r0, [r2, #16]
 8016192:	2200      	movs	r2, #0
 8016194:	6879      	ldr	r1, [r7, #4]
 8016196:	4798      	blx	r3
 8016198:	4603      	mov	r3, r0
 801619a:	76bb      	strb	r3, [r7, #26]
 801619c:	e001      	b.n	80161a2 <tcp_process+0x30e>
 801619e:	2300      	movs	r3, #0
 80161a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80161a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80161a6:	f113 0f0d 	cmn.w	r3, #13
 80161aa:	d102      	bne.n	80161b2 <tcp_process+0x31e>
          return ERR_ABRT;
 80161ac:	f06f 030c 	mvn.w	r3, #12
 80161b0:	e250      	b.n	8016654 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	8b5b      	ldrh	r3, [r3, #26]
 80161b6:	f043 0302 	orr.w	r3, r3, #2
 80161ba:	b29a      	uxth	r2, r3
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80161c0:	e23a      	b.n	8016638 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80161c2:	4b9d      	ldr	r3, [pc, #628]	; (8016438 <tcp_process+0x5a4>)
 80161c4:	781b      	ldrb	r3, [r3, #0]
 80161c6:	f003 0310 	and.w	r3, r3, #16
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	f000 8234 	beq.w	8016638 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161d0:	4b9a      	ldr	r3, [pc, #616]	; (801643c <tcp_process+0x5a8>)
 80161d2:	6819      	ldr	r1, [r3, #0]
 80161d4:	4b9a      	ldr	r3, [pc, #616]	; (8016440 <tcp_process+0x5ac>)
 80161d6:	881b      	ldrh	r3, [r3, #0]
 80161d8:	461a      	mov	r2, r3
 80161da:	4b9a      	ldr	r3, [pc, #616]	; (8016444 <tcp_process+0x5b0>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80161e0:	4b99      	ldr	r3, [pc, #612]	; (8016448 <tcp_process+0x5b4>)
 80161e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161e4:	885b      	ldrh	r3, [r3, #2]
 80161e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80161e8:	4a97      	ldr	r2, [pc, #604]	; (8016448 <tcp_process+0x5b4>)
 80161ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161ec:	8812      	ldrh	r2, [r2, #0]
 80161ee:	b292      	uxth	r2, r2
 80161f0:	9202      	str	r2, [sp, #8]
 80161f2:	9301      	str	r3, [sp, #4]
 80161f4:	4b95      	ldr	r3, [pc, #596]	; (801644c <tcp_process+0x5b8>)
 80161f6:	9300      	str	r3, [sp, #0]
 80161f8:	4b95      	ldr	r3, [pc, #596]	; (8016450 <tcp_process+0x5bc>)
 80161fa:	4602      	mov	r2, r0
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f003 f8db 	bl	80193b8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016208:	2b05      	cmp	r3, #5
 801620a:	f200 8215 	bhi.w	8016638 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2200      	movs	r2, #0
 8016212:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f002 fea5 	bl	8018f64 <tcp_rexmit_rto>
      break;
 801621a:	e20d      	b.n	8016638 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801621c:	4b86      	ldr	r3, [pc, #536]	; (8016438 <tcp_process+0x5a4>)
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	f003 0310 	and.w	r3, r3, #16
 8016224:	2b00      	cmp	r3, #0
 8016226:	f000 80a1 	beq.w	801636c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801622a:	4b84      	ldr	r3, [pc, #528]	; (801643c <tcp_process+0x5a8>)
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016232:	1ad3      	subs	r3, r2, r3
 8016234:	3b01      	subs	r3, #1
 8016236:	2b00      	cmp	r3, #0
 8016238:	db7e      	blt.n	8016338 <tcp_process+0x4a4>
 801623a:	4b80      	ldr	r3, [pc, #512]	; (801643c <tcp_process+0x5a8>)
 801623c:	681a      	ldr	r2, [r3, #0]
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016242:	1ad3      	subs	r3, r2, r3
 8016244:	2b00      	cmp	r3, #0
 8016246:	dc77      	bgt.n	8016338 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	2204      	movs	r2, #4
 801624c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016252:	2b00      	cmp	r3, #0
 8016254:	d102      	bne.n	801625c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8016256:	23fa      	movs	r3, #250	; 0xfa
 8016258:	76bb      	strb	r3, [r7, #26]
 801625a:	e01d      	b.n	8016298 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016260:	699b      	ldr	r3, [r3, #24]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d106      	bne.n	8016274 <tcp_process+0x3e0>
 8016266:	4b7b      	ldr	r3, [pc, #492]	; (8016454 <tcp_process+0x5c0>)
 8016268:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801626c:	497a      	ldr	r1, [pc, #488]	; (8016458 <tcp_process+0x5c4>)
 801626e:	487b      	ldr	r0, [pc, #492]	; (801645c <tcp_process+0x5c8>)
 8016270:	f009 fca2 	bl	801fbb8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016278:	699b      	ldr	r3, [r3, #24]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d00a      	beq.n	8016294 <tcp_process+0x400>
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016282:	699b      	ldr	r3, [r3, #24]
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	6910      	ldr	r0, [r2, #16]
 8016288:	2200      	movs	r2, #0
 801628a:	6879      	ldr	r1, [r7, #4]
 801628c:	4798      	blx	r3
 801628e:	4603      	mov	r3, r0
 8016290:	76bb      	strb	r3, [r7, #26]
 8016292:	e001      	b.n	8016298 <tcp_process+0x404>
 8016294:	23f0      	movs	r3, #240	; 0xf0
 8016296:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016298:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d00a      	beq.n	80162b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80162a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80162a4:	f113 0f0d 	cmn.w	r3, #13
 80162a8:	d002      	beq.n	80162b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f7fd fd1a 	bl	8013ce4 <tcp_abort>
            }
            return ERR_ABRT;
 80162b0:	f06f 030c 	mvn.w	r3, #12
 80162b4:	e1ce      	b.n	8016654 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f000 fae0 	bl	801687c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80162bc:	4b68      	ldr	r3, [pc, #416]	; (8016460 <tcp_process+0x5cc>)
 80162be:	881b      	ldrh	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d005      	beq.n	80162d0 <tcp_process+0x43c>
            recv_acked--;
 80162c4:	4b66      	ldr	r3, [pc, #408]	; (8016460 <tcp_process+0x5cc>)
 80162c6:	881b      	ldrh	r3, [r3, #0]
 80162c8:	3b01      	subs	r3, #1
 80162ca:	b29a      	uxth	r2, r3
 80162cc:	4b64      	ldr	r3, [pc, #400]	; (8016460 <tcp_process+0x5cc>)
 80162ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162d4:	009a      	lsls	r2, r3, #2
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162da:	005b      	lsls	r3, r3, #1
 80162dc:	f241 111c 	movw	r1, #4380	; 0x111c
 80162e0:	428b      	cmp	r3, r1
 80162e2:	bf38      	it	cc
 80162e4:	460b      	movcc	r3, r1
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d204      	bcs.n	80162f4 <tcp_process+0x460>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162ee:	009b      	lsls	r3, r3, #2
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	e00d      	b.n	8016310 <tcp_process+0x47c>
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162f8:	005b      	lsls	r3, r3, #1
 80162fa:	f241 121c 	movw	r2, #4380	; 0x111c
 80162fe:	4293      	cmp	r3, r2
 8016300:	d904      	bls.n	801630c <tcp_process+0x478>
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016306:	005b      	lsls	r3, r3, #1
 8016308:	b29b      	uxth	r3, r3
 801630a:	e001      	b.n	8016310 <tcp_process+0x47c>
 801630c:	f241 131c 	movw	r3, #4380	; 0x111c
 8016310:	687a      	ldr	r2, [r7, #4]
 8016312:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016316:	4b53      	ldr	r3, [pc, #332]	; (8016464 <tcp_process+0x5d0>)
 8016318:	781b      	ldrb	r3, [r3, #0]
 801631a:	f003 0320 	and.w	r3, r3, #32
 801631e:	2b00      	cmp	r3, #0
 8016320:	d037      	beq.n	8016392 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	8b5b      	ldrh	r3, [r3, #26]
 8016326:	f043 0302 	orr.w	r3, r3, #2
 801632a:	b29a      	uxth	r2, r3
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	2207      	movs	r2, #7
 8016334:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016336:	e02c      	b.n	8016392 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016338:	4b40      	ldr	r3, [pc, #256]	; (801643c <tcp_process+0x5a8>)
 801633a:	6819      	ldr	r1, [r3, #0]
 801633c:	4b40      	ldr	r3, [pc, #256]	; (8016440 <tcp_process+0x5ac>)
 801633e:	881b      	ldrh	r3, [r3, #0]
 8016340:	461a      	mov	r2, r3
 8016342:	4b40      	ldr	r3, [pc, #256]	; (8016444 <tcp_process+0x5b0>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016348:	4b3f      	ldr	r3, [pc, #252]	; (8016448 <tcp_process+0x5b4>)
 801634a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801634c:	885b      	ldrh	r3, [r3, #2]
 801634e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016350:	4a3d      	ldr	r2, [pc, #244]	; (8016448 <tcp_process+0x5b4>)
 8016352:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016354:	8812      	ldrh	r2, [r2, #0]
 8016356:	b292      	uxth	r2, r2
 8016358:	9202      	str	r2, [sp, #8]
 801635a:	9301      	str	r3, [sp, #4]
 801635c:	4b3b      	ldr	r3, [pc, #236]	; (801644c <tcp_process+0x5b8>)
 801635e:	9300      	str	r3, [sp, #0]
 8016360:	4b3b      	ldr	r3, [pc, #236]	; (8016450 <tcp_process+0x5bc>)
 8016362:	4602      	mov	r2, r0
 8016364:	6878      	ldr	r0, [r7, #4]
 8016366:	f003 f827 	bl	80193b8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801636a:	e167      	b.n	801663c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801636c:	4b32      	ldr	r3, [pc, #200]	; (8016438 <tcp_process+0x5a4>)
 801636e:	781b      	ldrb	r3, [r3, #0]
 8016370:	f003 0302 	and.w	r3, r3, #2
 8016374:	2b00      	cmp	r3, #0
 8016376:	f000 8161 	beq.w	801663c <tcp_process+0x7a8>
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801637e:	1e5a      	subs	r2, r3, #1
 8016380:	4b30      	ldr	r3, [pc, #192]	; (8016444 <tcp_process+0x5b0>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	429a      	cmp	r2, r3
 8016386:	f040 8159 	bne.w	801663c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f002 fe0c 	bl	8018fa8 <tcp_rexmit>
      break;
 8016390:	e154      	b.n	801663c <tcp_process+0x7a8>
 8016392:	e153      	b.n	801663c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	f000 fa71 	bl	801687c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801639a:	4b32      	ldr	r3, [pc, #200]	; (8016464 <tcp_process+0x5d0>)
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	f003 0320 	and.w	r3, r3, #32
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	f000 814c 	beq.w	8016640 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	8b5b      	ldrh	r3, [r3, #26]
 80163ac:	f043 0302 	orr.w	r3, r3, #2
 80163b0:	b29a      	uxth	r2, r3
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	2207      	movs	r2, #7
 80163ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80163bc:	e140      	b.n	8016640 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f000 fa5c 	bl	801687c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80163c4:	4b27      	ldr	r3, [pc, #156]	; (8016464 <tcp_process+0x5d0>)
 80163c6:	781b      	ldrb	r3, [r3, #0]
 80163c8:	f003 0320 	and.w	r3, r3, #32
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d071      	beq.n	80164b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80163d0:	4b19      	ldr	r3, [pc, #100]	; (8016438 <tcp_process+0x5a4>)
 80163d2:	781b      	ldrb	r3, [r3, #0]
 80163d4:	f003 0310 	and.w	r3, r3, #16
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d060      	beq.n	801649e <tcp_process+0x60a>
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80163e0:	4b16      	ldr	r3, [pc, #88]	; (801643c <tcp_process+0x5a8>)
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d15a      	bne.n	801649e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d156      	bne.n	801649e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	8b5b      	ldrh	r3, [r3, #26]
 80163f4:	f043 0302 	orr.w	r3, r3, #2
 80163f8:	b29a      	uxth	r2, r3
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f7fe fdbe 	bl	8014f80 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016404:	4b18      	ldr	r3, [pc, #96]	; (8016468 <tcp_process+0x5d4>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	429a      	cmp	r2, r3
 801640c:	d105      	bne.n	801641a <tcp_process+0x586>
 801640e:	4b16      	ldr	r3, [pc, #88]	; (8016468 <tcp_process+0x5d4>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	68db      	ldr	r3, [r3, #12]
 8016414:	4a14      	ldr	r2, [pc, #80]	; (8016468 <tcp_process+0x5d4>)
 8016416:	6013      	str	r3, [r2, #0]
 8016418:	e02e      	b.n	8016478 <tcp_process+0x5e4>
 801641a:	4b13      	ldr	r3, [pc, #76]	; (8016468 <tcp_process+0x5d4>)
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	617b      	str	r3, [r7, #20]
 8016420:	e027      	b.n	8016472 <tcp_process+0x5de>
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	68db      	ldr	r3, [r3, #12]
 8016426:	687a      	ldr	r2, [r7, #4]
 8016428:	429a      	cmp	r2, r3
 801642a:	d11f      	bne.n	801646c <tcp_process+0x5d8>
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	68da      	ldr	r2, [r3, #12]
 8016430:	697b      	ldr	r3, [r7, #20]
 8016432:	60da      	str	r2, [r3, #12]
 8016434:	e020      	b.n	8016478 <tcp_process+0x5e4>
 8016436:	bf00      	nop
 8016438:	20005fd8 	.word	0x20005fd8
 801643c:	20005fd0 	.word	0x20005fd0
 8016440:	20005fd6 	.word	0x20005fd6
 8016444:	20005fcc 	.word	0x20005fcc
 8016448:	20005fbc 	.word	0x20005fbc
 801644c:	2000b2d0 	.word	0x2000b2d0
 8016450:	2000b2d4 	.word	0x2000b2d4
 8016454:	08022c74 	.word	0x08022c74
 8016458:	08022f14 	.word	0x08022f14
 801645c:	08022cc0 	.word	0x08022cc0
 8016460:	20005fd4 	.word	0x20005fd4
 8016464:	20005fd9 	.word	0x20005fd9
 8016468:	2000e9f4 	.word	0x2000e9f4
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	68db      	ldr	r3, [r3, #12]
 8016470:	617b      	str	r3, [r7, #20]
 8016472:	697b      	ldr	r3, [r7, #20]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d1d4      	bne.n	8016422 <tcp_process+0x58e>
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2200      	movs	r2, #0
 801647c:	60da      	str	r2, [r3, #12]
 801647e:	4b77      	ldr	r3, [pc, #476]	; (801665c <tcp_process+0x7c8>)
 8016480:	2201      	movs	r2, #1
 8016482:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	220a      	movs	r2, #10
 8016488:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801648a:	4b75      	ldr	r3, [pc, #468]	; (8016660 <tcp_process+0x7cc>)
 801648c:	681a      	ldr	r2, [r3, #0]
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	60da      	str	r2, [r3, #12]
 8016492:	4a73      	ldr	r2, [pc, #460]	; (8016660 <tcp_process+0x7cc>)
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	6013      	str	r3, [r2, #0]
 8016498:	f003 f950 	bl	801973c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801649c:	e0d2      	b.n	8016644 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	8b5b      	ldrh	r3, [r3, #26]
 80164a2:	f043 0302 	orr.w	r3, r3, #2
 80164a6:	b29a      	uxth	r2, r3
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2208      	movs	r2, #8
 80164b0:	751a      	strb	r2, [r3, #20]
      break;
 80164b2:	e0c7      	b.n	8016644 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80164b4:	4b6b      	ldr	r3, [pc, #428]	; (8016664 <tcp_process+0x7d0>)
 80164b6:	781b      	ldrb	r3, [r3, #0]
 80164b8:	f003 0310 	and.w	r3, r3, #16
 80164bc:	2b00      	cmp	r3, #0
 80164be:	f000 80c1 	beq.w	8016644 <tcp_process+0x7b0>
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80164c6:	4b68      	ldr	r3, [pc, #416]	; (8016668 <tcp_process+0x7d4>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	429a      	cmp	r2, r3
 80164cc:	f040 80ba 	bne.w	8016644 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	f040 80b5 	bne.w	8016644 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	2206      	movs	r2, #6
 80164de:	751a      	strb	r2, [r3, #20]
      break;
 80164e0:	e0b0      	b.n	8016644 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80164e2:	6878      	ldr	r0, [r7, #4]
 80164e4:	f000 f9ca 	bl	801687c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80164e8:	4b60      	ldr	r3, [pc, #384]	; (801666c <tcp_process+0x7d8>)
 80164ea:	781b      	ldrb	r3, [r3, #0]
 80164ec:	f003 0320 	and.w	r3, r3, #32
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	f000 80a9 	beq.w	8016648 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	8b5b      	ldrh	r3, [r3, #26]
 80164fa:	f043 0302 	orr.w	r3, r3, #2
 80164fe:	b29a      	uxth	r2, r3
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f7fe fd3b 	bl	8014f80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801650a:	4b59      	ldr	r3, [pc, #356]	; (8016670 <tcp_process+0x7dc>)
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	429a      	cmp	r2, r3
 8016512:	d105      	bne.n	8016520 <tcp_process+0x68c>
 8016514:	4b56      	ldr	r3, [pc, #344]	; (8016670 <tcp_process+0x7dc>)
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	68db      	ldr	r3, [r3, #12]
 801651a:	4a55      	ldr	r2, [pc, #340]	; (8016670 <tcp_process+0x7dc>)
 801651c:	6013      	str	r3, [r2, #0]
 801651e:	e013      	b.n	8016548 <tcp_process+0x6b4>
 8016520:	4b53      	ldr	r3, [pc, #332]	; (8016670 <tcp_process+0x7dc>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	613b      	str	r3, [r7, #16]
 8016526:	e00c      	b.n	8016542 <tcp_process+0x6ae>
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	68db      	ldr	r3, [r3, #12]
 801652c:	687a      	ldr	r2, [r7, #4]
 801652e:	429a      	cmp	r2, r3
 8016530:	d104      	bne.n	801653c <tcp_process+0x6a8>
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	68da      	ldr	r2, [r3, #12]
 8016536:	693b      	ldr	r3, [r7, #16]
 8016538:	60da      	str	r2, [r3, #12]
 801653a:	e005      	b.n	8016548 <tcp_process+0x6b4>
 801653c:	693b      	ldr	r3, [r7, #16]
 801653e:	68db      	ldr	r3, [r3, #12]
 8016540:	613b      	str	r3, [r7, #16]
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d1ef      	bne.n	8016528 <tcp_process+0x694>
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2200      	movs	r2, #0
 801654c:	60da      	str	r2, [r3, #12]
 801654e:	4b43      	ldr	r3, [pc, #268]	; (801665c <tcp_process+0x7c8>)
 8016550:	2201      	movs	r2, #1
 8016552:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	220a      	movs	r2, #10
 8016558:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801655a:	4b41      	ldr	r3, [pc, #260]	; (8016660 <tcp_process+0x7cc>)
 801655c:	681a      	ldr	r2, [r3, #0]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	60da      	str	r2, [r3, #12]
 8016562:	4a3f      	ldr	r2, [pc, #252]	; (8016660 <tcp_process+0x7cc>)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	6013      	str	r3, [r2, #0]
 8016568:	f003 f8e8 	bl	801973c <tcp_timer_needed>
      }
      break;
 801656c:	e06c      	b.n	8016648 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f000 f984 	bl	801687c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016574:	4b3b      	ldr	r3, [pc, #236]	; (8016664 <tcp_process+0x7d0>)
 8016576:	781b      	ldrb	r3, [r3, #0]
 8016578:	f003 0310 	and.w	r3, r3, #16
 801657c:	2b00      	cmp	r3, #0
 801657e:	d065      	beq.n	801664c <tcp_process+0x7b8>
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016584:	4b38      	ldr	r3, [pc, #224]	; (8016668 <tcp_process+0x7d4>)
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	429a      	cmp	r2, r3
 801658a:	d15f      	bne.n	801664c <tcp_process+0x7b8>
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016590:	2b00      	cmp	r3, #0
 8016592:	d15b      	bne.n	801664c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f7fe fcf3 	bl	8014f80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801659a:	4b35      	ldr	r3, [pc, #212]	; (8016670 <tcp_process+0x7dc>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	429a      	cmp	r2, r3
 80165a2:	d105      	bne.n	80165b0 <tcp_process+0x71c>
 80165a4:	4b32      	ldr	r3, [pc, #200]	; (8016670 <tcp_process+0x7dc>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	68db      	ldr	r3, [r3, #12]
 80165aa:	4a31      	ldr	r2, [pc, #196]	; (8016670 <tcp_process+0x7dc>)
 80165ac:	6013      	str	r3, [r2, #0]
 80165ae:	e013      	b.n	80165d8 <tcp_process+0x744>
 80165b0:	4b2f      	ldr	r3, [pc, #188]	; (8016670 <tcp_process+0x7dc>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	60fb      	str	r3, [r7, #12]
 80165b6:	e00c      	b.n	80165d2 <tcp_process+0x73e>
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	68db      	ldr	r3, [r3, #12]
 80165bc:	687a      	ldr	r2, [r7, #4]
 80165be:	429a      	cmp	r2, r3
 80165c0:	d104      	bne.n	80165cc <tcp_process+0x738>
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	68da      	ldr	r2, [r3, #12]
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	60da      	str	r2, [r3, #12]
 80165ca:	e005      	b.n	80165d8 <tcp_process+0x744>
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	68db      	ldr	r3, [r3, #12]
 80165d0:	60fb      	str	r3, [r7, #12]
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d1ef      	bne.n	80165b8 <tcp_process+0x724>
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2200      	movs	r2, #0
 80165dc:	60da      	str	r2, [r3, #12]
 80165de:	4b1f      	ldr	r3, [pc, #124]	; (801665c <tcp_process+0x7c8>)
 80165e0:	2201      	movs	r2, #1
 80165e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	220a      	movs	r2, #10
 80165e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80165ea:	4b1d      	ldr	r3, [pc, #116]	; (8016660 <tcp_process+0x7cc>)
 80165ec:	681a      	ldr	r2, [r3, #0]
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	60da      	str	r2, [r3, #12]
 80165f2:	4a1b      	ldr	r2, [pc, #108]	; (8016660 <tcp_process+0x7cc>)
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	6013      	str	r3, [r2, #0]
 80165f8:	f003 f8a0 	bl	801973c <tcp_timer_needed>
      }
      break;
 80165fc:	e026      	b.n	801664c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f000 f93c 	bl	801687c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016604:	4b17      	ldr	r3, [pc, #92]	; (8016664 <tcp_process+0x7d0>)
 8016606:	781b      	ldrb	r3, [r3, #0]
 8016608:	f003 0310 	and.w	r3, r3, #16
 801660c:	2b00      	cmp	r3, #0
 801660e:	d01f      	beq.n	8016650 <tcp_process+0x7bc>
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016614:	4b14      	ldr	r3, [pc, #80]	; (8016668 <tcp_process+0x7d4>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	429a      	cmp	r2, r3
 801661a:	d119      	bne.n	8016650 <tcp_process+0x7bc>
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016620:	2b00      	cmp	r3, #0
 8016622:	d115      	bne.n	8016650 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016624:	4b11      	ldr	r3, [pc, #68]	; (801666c <tcp_process+0x7d8>)
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	f043 0310 	orr.w	r3, r3, #16
 801662c:	b2da      	uxtb	r2, r3
 801662e:	4b0f      	ldr	r3, [pc, #60]	; (801666c <tcp_process+0x7d8>)
 8016630:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016632:	e00d      	b.n	8016650 <tcp_process+0x7bc>
    default:
      break;
 8016634:	bf00      	nop
 8016636:	e00c      	b.n	8016652 <tcp_process+0x7be>
      break;
 8016638:	bf00      	nop
 801663a:	e00a      	b.n	8016652 <tcp_process+0x7be>
      break;
 801663c:	bf00      	nop
 801663e:	e008      	b.n	8016652 <tcp_process+0x7be>
      break;
 8016640:	bf00      	nop
 8016642:	e006      	b.n	8016652 <tcp_process+0x7be>
      break;
 8016644:	bf00      	nop
 8016646:	e004      	b.n	8016652 <tcp_process+0x7be>
      break;
 8016648:	bf00      	nop
 801664a:	e002      	b.n	8016652 <tcp_process+0x7be>
      break;
 801664c:	bf00      	nop
 801664e:	e000      	b.n	8016652 <tcp_process+0x7be>
      break;
 8016650:	bf00      	nop
  }
  return ERR_OK;
 8016652:	2300      	movs	r3, #0
}
 8016654:	4618      	mov	r0, r3
 8016656:	3724      	adds	r7, #36	; 0x24
 8016658:	46bd      	mov	sp, r7
 801665a:	bd90      	pop	{r4, r7, pc}
 801665c:	2000e9f0 	.word	0x2000e9f0
 8016660:	2000ea04 	.word	0x2000ea04
 8016664:	20005fd8 	.word	0x20005fd8
 8016668:	20005fd0 	.word	0x20005fd0
 801666c:	20005fd9 	.word	0x20005fd9
 8016670:	2000e9f4 	.word	0x2000e9f4

08016674 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016674:	b590      	push	{r4, r7, lr}
 8016676:	b085      	sub	sp, #20
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d106      	bne.n	8016692 <tcp_oos_insert_segment+0x1e>
 8016684:	4b3b      	ldr	r3, [pc, #236]	; (8016774 <tcp_oos_insert_segment+0x100>)
 8016686:	f240 421f 	movw	r2, #1055	; 0x41f
 801668a:	493b      	ldr	r1, [pc, #236]	; (8016778 <tcp_oos_insert_segment+0x104>)
 801668c:	483b      	ldr	r0, [pc, #236]	; (801677c <tcp_oos_insert_segment+0x108>)
 801668e:	f009 fa93 	bl	801fbb8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	68db      	ldr	r3, [r3, #12]
 8016696:	899b      	ldrh	r3, [r3, #12]
 8016698:	b29b      	uxth	r3, r3
 801669a:	4618      	mov	r0, r3
 801669c:	f7fb f96a 	bl	8011974 <lwip_htons>
 80166a0:	4603      	mov	r3, r0
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	f003 0301 	and.w	r3, r3, #1
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d028      	beq.n	80166fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80166ac:	6838      	ldr	r0, [r7, #0]
 80166ae:	f7fe f997 	bl	80149e0 <tcp_segs_free>
    next = NULL;
 80166b2:	2300      	movs	r3, #0
 80166b4:	603b      	str	r3, [r7, #0]
 80166b6:	e056      	b.n	8016766 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80166b8:	683b      	ldr	r3, [r7, #0]
 80166ba:	68db      	ldr	r3, [r3, #12]
 80166bc:	899b      	ldrh	r3, [r3, #12]
 80166be:	b29b      	uxth	r3, r3
 80166c0:	4618      	mov	r0, r3
 80166c2:	f7fb f957 	bl	8011974 <lwip_htons>
 80166c6:	4603      	mov	r3, r0
 80166c8:	b2db      	uxtb	r3, r3
 80166ca:	f003 0301 	and.w	r3, r3, #1
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d00d      	beq.n	80166ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	68db      	ldr	r3, [r3, #12]
 80166d6:	899b      	ldrh	r3, [r3, #12]
 80166d8:	b29c      	uxth	r4, r3
 80166da:	2001      	movs	r0, #1
 80166dc:	f7fb f94a 	bl	8011974 <lwip_htons>
 80166e0:	4603      	mov	r3, r0
 80166e2:	461a      	mov	r2, r3
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	68db      	ldr	r3, [r3, #12]
 80166e8:	4322      	orrs	r2, r4
 80166ea:	b292      	uxth	r2, r2
 80166ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80166f8:	68f8      	ldr	r0, [r7, #12]
 80166fa:	f7fe f986 	bl	8014a0a <tcp_seg_free>
    while (next &&
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d00e      	beq.n	8016722 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	891b      	ldrh	r3, [r3, #8]
 8016708:	461a      	mov	r2, r3
 801670a:	4b1d      	ldr	r3, [pc, #116]	; (8016780 <tcp_oos_insert_segment+0x10c>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	441a      	add	r2, r3
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	68db      	ldr	r3, [r3, #12]
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	6839      	ldr	r1, [r7, #0]
 8016718:	8909      	ldrh	r1, [r1, #8]
 801671a:	440b      	add	r3, r1
 801671c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801671e:	2b00      	cmp	r3, #0
 8016720:	daca      	bge.n	80166b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d01e      	beq.n	8016766 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	891b      	ldrh	r3, [r3, #8]
 801672c:	461a      	mov	r2, r3
 801672e:	4b14      	ldr	r3, [pc, #80]	; (8016780 <tcp_oos_insert_segment+0x10c>)
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	441a      	add	r2, r3
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	68db      	ldr	r3, [r3, #12]
 8016738:	685b      	ldr	r3, [r3, #4]
 801673a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801673c:	2b00      	cmp	r3, #0
 801673e:	dd12      	ble.n	8016766 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	68db      	ldr	r3, [r3, #12]
 8016744:	685b      	ldr	r3, [r3, #4]
 8016746:	b29a      	uxth	r2, r3
 8016748:	4b0d      	ldr	r3, [pc, #52]	; (8016780 <tcp_oos_insert_segment+0x10c>)
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	b29b      	uxth	r3, r3
 801674e:	1ad3      	subs	r3, r2, r3
 8016750:	b29a      	uxth	r2, r3
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	685a      	ldr	r2, [r3, #4]
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	891b      	ldrh	r3, [r3, #8]
 801675e:	4619      	mov	r1, r3
 8016760:	4610      	mov	r0, r2
 8016762:	f7fc fb39 	bl	8012dd8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	683a      	ldr	r2, [r7, #0]
 801676a:	601a      	str	r2, [r3, #0]
}
 801676c:	bf00      	nop
 801676e:	3714      	adds	r7, #20
 8016770:	46bd      	mov	sp, r7
 8016772:	bd90      	pop	{r4, r7, pc}
 8016774:	08022c74 	.word	0x08022c74
 8016778:	08022f34 	.word	0x08022f34
 801677c:	08022cc0 	.word	0x08022cc0
 8016780:	20005fcc 	.word	0x20005fcc

08016784 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016784:	b5b0      	push	{r4, r5, r7, lr}
 8016786:	b086      	sub	sp, #24
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
 8016790:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016792:	e03e      	b.n	8016812 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016794:	68bb      	ldr	r3, [r7, #8]
 8016796:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f7fc fd2c 	bl	8013200 <pbuf_clen>
 80167a8:	4603      	mov	r3, r0
 80167aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80167b2:	8a7a      	ldrh	r2, [r7, #18]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d906      	bls.n	80167c6 <tcp_free_acked_segments+0x42>
 80167b8:	4b2a      	ldr	r3, [pc, #168]	; (8016864 <tcp_free_acked_segments+0xe0>)
 80167ba:	f240 4257 	movw	r2, #1111	; 0x457
 80167be:	492a      	ldr	r1, [pc, #168]	; (8016868 <tcp_free_acked_segments+0xe4>)
 80167c0:	482a      	ldr	r0, [pc, #168]	; (801686c <tcp_free_acked_segments+0xe8>)
 80167c2:	f009 f9f9 	bl	801fbb8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80167cc:	8a7b      	ldrh	r3, [r7, #18]
 80167ce:	1ad3      	subs	r3, r2, r3
 80167d0:	b29a      	uxth	r2, r3
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80167d8:	697b      	ldr	r3, [r7, #20]
 80167da:	891a      	ldrh	r2, [r3, #8]
 80167dc:	4b24      	ldr	r3, [pc, #144]	; (8016870 <tcp_free_acked_segments+0xec>)
 80167de:	881b      	ldrh	r3, [r3, #0]
 80167e0:	4413      	add	r3, r2
 80167e2:	b29a      	uxth	r2, r3
 80167e4:	4b22      	ldr	r3, [pc, #136]	; (8016870 <tcp_free_acked_segments+0xec>)
 80167e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80167e8:	6978      	ldr	r0, [r7, #20]
 80167ea:	f7fe f90e 	bl	8014a0a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d00c      	beq.n	8016812 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80167f8:	68bb      	ldr	r3, [r7, #8]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d109      	bne.n	8016812 <tcp_free_acked_segments+0x8e>
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d106      	bne.n	8016812 <tcp_free_acked_segments+0x8e>
 8016804:	4b17      	ldr	r3, [pc, #92]	; (8016864 <tcp_free_acked_segments+0xe0>)
 8016806:	f240 4261 	movw	r2, #1121	; 0x461
 801680a:	491a      	ldr	r1, [pc, #104]	; (8016874 <tcp_free_acked_segments+0xf0>)
 801680c:	4817      	ldr	r0, [pc, #92]	; (801686c <tcp_free_acked_segments+0xe8>)
 801680e:	f009 f9d3 	bl	801fbb8 <iprintf>
  while (seg_list != NULL &&
 8016812:	68bb      	ldr	r3, [r7, #8]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d020      	beq.n	801685a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	68db      	ldr	r3, [r3, #12]
 801681c:	685b      	ldr	r3, [r3, #4]
 801681e:	4618      	mov	r0, r3
 8016820:	f7fb f8bd 	bl	801199e <lwip_htonl>
 8016824:	4604      	mov	r4, r0
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	891b      	ldrh	r3, [r3, #8]
 801682a:	461d      	mov	r5, r3
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	68db      	ldr	r3, [r3, #12]
 8016830:	899b      	ldrh	r3, [r3, #12]
 8016832:	b29b      	uxth	r3, r3
 8016834:	4618      	mov	r0, r3
 8016836:	f7fb f89d 	bl	8011974 <lwip_htons>
 801683a:	4603      	mov	r3, r0
 801683c:	b2db      	uxtb	r3, r3
 801683e:	f003 0303 	and.w	r3, r3, #3
 8016842:	2b00      	cmp	r3, #0
 8016844:	d001      	beq.n	801684a <tcp_free_acked_segments+0xc6>
 8016846:	2301      	movs	r3, #1
 8016848:	e000      	b.n	801684c <tcp_free_acked_segments+0xc8>
 801684a:	2300      	movs	r3, #0
 801684c:	442b      	add	r3, r5
 801684e:	18e2      	adds	r2, r4, r3
 8016850:	4b09      	ldr	r3, [pc, #36]	; (8016878 <tcp_free_acked_segments+0xf4>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016856:	2b00      	cmp	r3, #0
 8016858:	dd9c      	ble.n	8016794 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801685a:	68bb      	ldr	r3, [r7, #8]
}
 801685c:	4618      	mov	r0, r3
 801685e:	3718      	adds	r7, #24
 8016860:	46bd      	mov	sp, r7
 8016862:	bdb0      	pop	{r4, r5, r7, pc}
 8016864:	08022c74 	.word	0x08022c74
 8016868:	08022f5c 	.word	0x08022f5c
 801686c:	08022cc0 	.word	0x08022cc0
 8016870:	20005fd4 	.word	0x20005fd4
 8016874:	08022f84 	.word	0x08022f84
 8016878:	20005fd0 	.word	0x20005fd0

0801687c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801687c:	b5b0      	push	{r4, r5, r7, lr}
 801687e:	b094      	sub	sp, #80	; 0x50
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016884:	2300      	movs	r3, #0
 8016886:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d106      	bne.n	801689c <tcp_receive+0x20>
 801688e:	4ba6      	ldr	r3, [pc, #664]	; (8016b28 <tcp_receive+0x2ac>)
 8016890:	f240 427b 	movw	r2, #1147	; 0x47b
 8016894:	49a5      	ldr	r1, [pc, #660]	; (8016b2c <tcp_receive+0x2b0>)
 8016896:	48a6      	ldr	r0, [pc, #664]	; (8016b30 <tcp_receive+0x2b4>)
 8016898:	f009 f98e 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	7d1b      	ldrb	r3, [r3, #20]
 80168a0:	2b03      	cmp	r3, #3
 80168a2:	d806      	bhi.n	80168b2 <tcp_receive+0x36>
 80168a4:	4ba0      	ldr	r3, [pc, #640]	; (8016b28 <tcp_receive+0x2ac>)
 80168a6:	f240 427c 	movw	r2, #1148	; 0x47c
 80168aa:	49a2      	ldr	r1, [pc, #648]	; (8016b34 <tcp_receive+0x2b8>)
 80168ac:	48a0      	ldr	r0, [pc, #640]	; (8016b30 <tcp_receive+0x2b4>)
 80168ae:	f009 f983 	bl	801fbb8 <iprintf>

  if (flags & TCP_ACK) {
 80168b2:	4ba1      	ldr	r3, [pc, #644]	; (8016b38 <tcp_receive+0x2bc>)
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	f003 0310 	and.w	r3, r3, #16
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	f000 8263 	beq.w	8016d86 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80168c6:	461a      	mov	r2, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168cc:	4413      	add	r3, r2
 80168ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80168d4:	4b99      	ldr	r3, [pc, #612]	; (8016b3c <tcp_receive+0x2c0>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	1ad3      	subs	r3, r2, r3
 80168da:	2b00      	cmp	r3, #0
 80168dc:	db1b      	blt.n	8016916 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80168e2:	4b96      	ldr	r3, [pc, #600]	; (8016b3c <tcp_receive+0x2c0>)
 80168e4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80168e6:	429a      	cmp	r2, r3
 80168e8:	d106      	bne.n	80168f8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80168ee:	4b94      	ldr	r3, [pc, #592]	; (8016b40 <tcp_receive+0x2c4>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	1ad3      	subs	r3, r2, r3
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	db0e      	blt.n	8016916 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80168fc:	4b90      	ldr	r3, [pc, #576]	; (8016b40 <tcp_receive+0x2c4>)
 80168fe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016900:	429a      	cmp	r2, r3
 8016902:	d125      	bne.n	8016950 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016904:	4b8f      	ldr	r3, [pc, #572]	; (8016b44 <tcp_receive+0x2c8>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	89db      	ldrh	r3, [r3, #14]
 801690a:	b29a      	uxth	r2, r3
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016912:	429a      	cmp	r2, r3
 8016914:	d91c      	bls.n	8016950 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016916:	4b8b      	ldr	r3, [pc, #556]	; (8016b44 <tcp_receive+0x2c8>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	89db      	ldrh	r3, [r3, #14]
 801691c:	b29a      	uxth	r2, r3
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016930:	429a      	cmp	r2, r3
 8016932:	d205      	bcs.n	8016940 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016940:	4b7e      	ldr	r3, [pc, #504]	; (8016b3c <tcp_receive+0x2c0>)
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016948:	4b7d      	ldr	r3, [pc, #500]	; (8016b40 <tcp_receive+0x2c4>)
 801694a:	681a      	ldr	r2, [r3, #0]
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016950:	4b7b      	ldr	r3, [pc, #492]	; (8016b40 <tcp_receive+0x2c4>)
 8016952:	681a      	ldr	r2, [r3, #0]
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016958:	1ad3      	subs	r3, r2, r3
 801695a:	2b00      	cmp	r3, #0
 801695c:	dc58      	bgt.n	8016a10 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801695e:	4b7a      	ldr	r3, [pc, #488]	; (8016b48 <tcp_receive+0x2cc>)
 8016960:	881b      	ldrh	r3, [r3, #0]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d14b      	bne.n	80169fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801696a:	687a      	ldr	r2, [r7, #4]
 801696c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016970:	4413      	add	r3, r2
 8016972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016974:	429a      	cmp	r2, r3
 8016976:	d142      	bne.n	80169fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801697e:	2b00      	cmp	r3, #0
 8016980:	db3d      	blt.n	80169fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016986:	4b6e      	ldr	r3, [pc, #440]	; (8016b40 <tcp_receive+0x2c4>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	429a      	cmp	r2, r3
 801698c:	d137      	bne.n	80169fe <tcp_receive+0x182>
              found_dupack = 1;
 801698e:	2301      	movs	r3, #1
 8016990:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016998:	2bff      	cmp	r3, #255	; 0xff
 801699a:	d007      	beq.n	80169ac <tcp_receive+0x130>
                ++pcb->dupacks;
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80169a2:	3301      	adds	r3, #1
 80169a4:	b2da      	uxtb	r2, r3
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80169b2:	2b03      	cmp	r3, #3
 80169b4:	d91b      	bls.n	80169ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80169c0:	4413      	add	r3, r2
 80169c2:	b29a      	uxth	r2, r3
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80169ca:	429a      	cmp	r2, r3
 80169cc:	d30a      	bcc.n	80169e4 <tcp_receive+0x168>
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80169d8:	4413      	add	r3, r2
 80169da:	b29a      	uxth	r2, r3
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80169e2:	e004      	b.n	80169ee <tcp_receive+0x172>
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80169f4:	2b02      	cmp	r3, #2
 80169f6:	d902      	bls.n	80169fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80169f8:	6878      	ldr	r0, [r7, #4]
 80169fa:	f002 fb41 	bl	8019080 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80169fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	f040 8160 	bne.w	8016cc6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2200      	movs	r2, #0
 8016a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016a0e:	e15a      	b.n	8016cc6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016a10:	4b4b      	ldr	r3, [pc, #300]	; (8016b40 <tcp_receive+0x2c4>)
 8016a12:	681a      	ldr	r2, [r3, #0]
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a18:	1ad3      	subs	r3, r2, r3
 8016a1a:	3b01      	subs	r3, #1
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	f2c0 814d 	blt.w	8016cbc <tcp_receive+0x440>
 8016a22:	4b47      	ldr	r3, [pc, #284]	; (8016b40 <tcp_receive+0x2c4>)
 8016a24:	681a      	ldr	r2, [r3, #0]
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a2a:	1ad3      	subs	r3, r2, r3
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	f300 8145 	bgt.w	8016cbc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	8b5b      	ldrh	r3, [r3, #26]
 8016a36:	f003 0304 	and.w	r3, r3, #4
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d010      	beq.n	8016a60 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	8b5b      	ldrh	r3, [r3, #26]
 8016a42:	f023 0304 	bic.w	r3, r3, #4
 8016a46:	b29a      	uxth	r2, r3
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	2200      	movs	r2, #0
 8016a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016a6e:	10db      	asrs	r3, r3, #3
 8016a70:	b21b      	sxth	r3, r3
 8016a72:	b29a      	uxth	r2, r3
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	4413      	add	r3, r2
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	b21a      	sxth	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016a88:	4b2d      	ldr	r3, [pc, #180]	; (8016b40 <tcp_receive+0x2c4>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	b29a      	uxth	r2, r3
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	1ad3      	subs	r3, r2, r3
 8016a96:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016aa0:	4b27      	ldr	r3, [pc, #156]	; (8016b40 <tcp_receive+0x2c4>)
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	7d1b      	ldrb	r3, [r3, #20]
 8016aac:	2b03      	cmp	r3, #3
 8016aae:	f240 8096 	bls.w	8016bde <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d244      	bcs.n	8016b4c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	8b5b      	ldrh	r3, [r3, #26]
 8016ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d001      	beq.n	8016ad2 <tcp_receive+0x256>
 8016ace:	2301      	movs	r3, #1
 8016ad0:	e000      	b.n	8016ad4 <tcp_receive+0x258>
 8016ad2:	2302      	movs	r3, #2
 8016ad4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8016ad8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016adc:	b29a      	uxth	r2, r3
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ae2:	fb12 f303 	smulbb	r3, r2, r3
 8016ae6:	b29b      	uxth	r3, r3
 8016ae8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016aea:	4293      	cmp	r3, r2
 8016aec:	bf28      	it	cs
 8016aee:	4613      	movcs	r3, r2
 8016af0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016af8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016afa:	4413      	add	r3, r2
 8016afc:	b29a      	uxth	r2, r3
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d309      	bcc.n	8016b1c <tcp_receive+0x2a0>
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016b0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b10:	4413      	add	r3, r2
 8016b12:	b29a      	uxth	r2, r3
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016b1a:	e060      	b.n	8016bde <tcp_receive+0x362>
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016b26:	e05a      	b.n	8016bde <tcp_receive+0x362>
 8016b28:	08022c74 	.word	0x08022c74
 8016b2c:	08022fa4 	.word	0x08022fa4
 8016b30:	08022cc0 	.word	0x08022cc0
 8016b34:	08022fc0 	.word	0x08022fc0
 8016b38:	20005fd8 	.word	0x20005fd8
 8016b3c:	20005fcc 	.word	0x20005fcc
 8016b40:	20005fd0 	.word	0x20005fd0
 8016b44:	20005fbc 	.word	0x20005fbc
 8016b48:	20005fd6 	.word	0x20005fd6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016b52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016b54:	4413      	add	r3, r2
 8016b56:	b29a      	uxth	r2, r3
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d309      	bcc.n	8016b76 <tcp_receive+0x2fa>
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016b68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016b6a:	4413      	add	r3, r2
 8016b6c:	b29a      	uxth	r2, r3
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016b74:	e004      	b.n	8016b80 <tcp_receive+0x304>
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d326      	bcc.n	8016bde <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016b9c:	1ad3      	subs	r3, r2, r3
 8016b9e:	b29a      	uxth	r2, r3
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016bb0:	4413      	add	r3, r2
 8016bb2:	b29a      	uxth	r2, r3
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d30a      	bcc.n	8016bd4 <tcp_receive+0x358>
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016bc8:	4413      	add	r3, r2
 8016bca:	b29a      	uxth	r2, r3
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016bd2:	e004      	b.n	8016bde <tcp_receive+0x362>
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016bda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016be6:	4a98      	ldr	r2, [pc, #608]	; (8016e48 <tcp_receive+0x5cc>)
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f7ff fdcb 	bl	8016784 <tcp_free_acked_segments>
 8016bee:	4602      	mov	r2, r0
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bfc:	4a93      	ldr	r2, [pc, #588]	; (8016e4c <tcp_receive+0x5d0>)
 8016bfe:	6878      	ldr	r0, [r7, #4]
 8016c00:	f7ff fdc0 	bl	8016784 <tcp_free_acked_segments>
 8016c04:	4602      	mov	r2, r0
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d104      	bne.n	8016c1c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c18:	861a      	strh	r2, [r3, #48]	; 0x30
 8016c1a:	e002      	b.n	8016c22 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2200      	movs	r2, #0
 8016c26:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d103      	bne.n	8016c38 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2200      	movs	r2, #0
 8016c34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016c3e:	4b84      	ldr	r3, [pc, #528]	; (8016e50 <tcp_receive+0x5d4>)
 8016c40:	881b      	ldrh	r3, [r3, #0]
 8016c42:	4413      	add	r3, r2
 8016c44:	b29a      	uxth	r2, r3
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	8b5b      	ldrh	r3, [r3, #26]
 8016c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d035      	beq.n	8016cc4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d118      	bne.n	8016c92 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d00c      	beq.n	8016c82 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c70:	68db      	ldr	r3, [r3, #12]
 8016c72:	685b      	ldr	r3, [r3, #4]
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7fa fe92 	bl	801199e <lwip_htonl>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	dc20      	bgt.n	8016cc4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	8b5b      	ldrh	r3, [r3, #26]
 8016c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016c8a:	b29a      	uxth	r2, r3
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016c90:	e018      	b.n	8016cc4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c9a:	68db      	ldr	r3, [r3, #12]
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7fa fe7d 	bl	801199e <lwip_htonl>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	1ae3      	subs	r3, r4, r3
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	dc0b      	bgt.n	8016cc4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	8b5b      	ldrh	r3, [r3, #26]
 8016cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016cb4:	b29a      	uxth	r2, r3
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016cba:	e003      	b.n	8016cc4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016cbc:	6878      	ldr	r0, [r7, #4]
 8016cbe:	f002 fbcd 	bl	801945c <tcp_send_empty_ack>
 8016cc2:	e000      	b.n	8016cc6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016cc4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d05b      	beq.n	8016d86 <tcp_receive+0x50a>
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016cd2:	4b60      	ldr	r3, [pc, #384]	; (8016e54 <tcp_receive+0x5d8>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	1ad3      	subs	r3, r2, r3
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	da54      	bge.n	8016d86 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016cdc:	4b5e      	ldr	r3, [pc, #376]	; (8016e58 <tcp_receive+0x5dc>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	b29a      	uxth	r2, r3
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ce6:	b29b      	uxth	r3, r3
 8016ce8:	1ad3      	subs	r3, r2, r3
 8016cea:	b29b      	uxth	r3, r3
 8016cec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016cf0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016cfa:	10db      	asrs	r3, r3, #3
 8016cfc:	b21b      	sxth	r3, r3
 8016cfe:	b29b      	uxth	r3, r3
 8016d00:	1ad3      	subs	r3, r2, r3
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016d0e:	b29a      	uxth	r2, r3
 8016d10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016d14:	4413      	add	r3, r2
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	b21a      	sxth	r2, r3
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016d1e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	da05      	bge.n	8016d32 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8016d26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016d2a:	425b      	negs	r3, r3
 8016d2c:	b29b      	uxth	r3, r3
 8016d2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016d32:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016d3c:	109b      	asrs	r3, r3, #2
 8016d3e:	b21b      	sxth	r3, r3
 8016d40:	b29b      	uxth	r3, r3
 8016d42:	1ad3      	subs	r3, r2, r3
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016d50:	b29a      	uxth	r2, r3
 8016d52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016d56:	4413      	add	r3, r2
 8016d58:	b29b      	uxth	r3, r3
 8016d5a:	b21a      	sxth	r2, r3
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016d66:	10db      	asrs	r3, r3, #3
 8016d68:	b21b      	sxth	r3, r3
 8016d6a:	b29a      	uxth	r2, r3
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016d72:	b29b      	uxth	r3, r3
 8016d74:	4413      	add	r3, r2
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	b21a      	sxth	r2, r3
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	2200      	movs	r2, #0
 8016d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016d86:	4b35      	ldr	r3, [pc, #212]	; (8016e5c <tcp_receive+0x5e0>)
 8016d88:	881b      	ldrh	r3, [r3, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	f000 84e1 	beq.w	8017752 <tcp_receive+0xed6>
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	7d1b      	ldrb	r3, [r3, #20]
 8016d94:	2b06      	cmp	r3, #6
 8016d96:	f200 84dc 	bhi.w	8017752 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016d9e:	4b30      	ldr	r3, [pc, #192]	; (8016e60 <tcp_receive+0x5e4>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	1ad3      	subs	r3, r2, r3
 8016da4:	3b01      	subs	r3, #1
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	f2c0 808e 	blt.w	8016ec8 <tcp_receive+0x64c>
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016db0:	4b2a      	ldr	r3, [pc, #168]	; (8016e5c <tcp_receive+0x5e0>)
 8016db2:	881b      	ldrh	r3, [r3, #0]
 8016db4:	4619      	mov	r1, r3
 8016db6:	4b2a      	ldr	r3, [pc, #168]	; (8016e60 <tcp_receive+0x5e4>)
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	440b      	add	r3, r1
 8016dbc:	1ad3      	subs	r3, r2, r3
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	f300 8081 	bgt.w	8016ec8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016dc6:	4b27      	ldr	r3, [pc, #156]	; (8016e64 <tcp_receive+0x5e8>)
 8016dc8:	685b      	ldr	r3, [r3, #4]
 8016dca:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016dd0:	4b23      	ldr	r3, [pc, #140]	; (8016e60 <tcp_receive+0x5e4>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	1ad3      	subs	r3, r2, r3
 8016dd6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016dd8:	4b22      	ldr	r3, [pc, #136]	; (8016e64 <tcp_receive+0x5e8>)
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d106      	bne.n	8016dee <tcp_receive+0x572>
 8016de0:	4b21      	ldr	r3, [pc, #132]	; (8016e68 <tcp_receive+0x5ec>)
 8016de2:	f240 5294 	movw	r2, #1428	; 0x594
 8016de6:	4921      	ldr	r1, [pc, #132]	; (8016e6c <tcp_receive+0x5f0>)
 8016de8:	4821      	ldr	r0, [pc, #132]	; (8016e70 <tcp_receive+0x5f4>)
 8016dea:	f008 fee5 	bl	801fbb8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016df4:	4293      	cmp	r3, r2
 8016df6:	d906      	bls.n	8016e06 <tcp_receive+0x58a>
 8016df8:	4b1b      	ldr	r3, [pc, #108]	; (8016e68 <tcp_receive+0x5ec>)
 8016dfa:	f240 5295 	movw	r2, #1429	; 0x595
 8016dfe:	491d      	ldr	r1, [pc, #116]	; (8016e74 <tcp_receive+0x5f8>)
 8016e00:	481b      	ldr	r0, [pc, #108]	; (8016e70 <tcp_receive+0x5f4>)
 8016e02:	f008 fed9 	bl	801fbb8 <iprintf>
      off = (u16_t)off32;
 8016e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016e0c:	4b15      	ldr	r3, [pc, #84]	; (8016e64 <tcp_receive+0x5e8>)
 8016e0e:	685b      	ldr	r3, [r3, #4]
 8016e10:	891b      	ldrh	r3, [r3, #8]
 8016e12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e16:	429a      	cmp	r2, r3
 8016e18:	d906      	bls.n	8016e28 <tcp_receive+0x5ac>
 8016e1a:	4b13      	ldr	r3, [pc, #76]	; (8016e68 <tcp_receive+0x5ec>)
 8016e1c:	f240 5297 	movw	r2, #1431	; 0x597
 8016e20:	4915      	ldr	r1, [pc, #84]	; (8016e78 <tcp_receive+0x5fc>)
 8016e22:	4813      	ldr	r0, [pc, #76]	; (8016e70 <tcp_receive+0x5f4>)
 8016e24:	f008 fec8 	bl	801fbb8 <iprintf>
      inseg.len -= off;
 8016e28:	4b0e      	ldr	r3, [pc, #56]	; (8016e64 <tcp_receive+0x5e8>)
 8016e2a:	891a      	ldrh	r2, [r3, #8]
 8016e2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e30:	1ad3      	subs	r3, r2, r3
 8016e32:	b29a      	uxth	r2, r3
 8016e34:	4b0b      	ldr	r3, [pc, #44]	; (8016e64 <tcp_receive+0x5e8>)
 8016e36:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016e38:	4b0a      	ldr	r3, [pc, #40]	; (8016e64 <tcp_receive+0x5e8>)
 8016e3a:	685b      	ldr	r3, [r3, #4]
 8016e3c:	891a      	ldrh	r2, [r3, #8]
 8016e3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e42:	1ad3      	subs	r3, r2, r3
 8016e44:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016e46:	e029      	b.n	8016e9c <tcp_receive+0x620>
 8016e48:	08022fdc 	.word	0x08022fdc
 8016e4c:	08022fe4 	.word	0x08022fe4
 8016e50:	20005fd4 	.word	0x20005fd4
 8016e54:	20005fd0 	.word	0x20005fd0
 8016e58:	2000e9f8 	.word	0x2000e9f8
 8016e5c:	20005fd6 	.word	0x20005fd6
 8016e60:	20005fcc 	.word	0x20005fcc
 8016e64:	20005fac 	.word	0x20005fac
 8016e68:	08022c74 	.word	0x08022c74
 8016e6c:	08022fec 	.word	0x08022fec
 8016e70:	08022cc0 	.word	0x08022cc0
 8016e74:	08022ffc 	.word	0x08022ffc
 8016e78:	0802300c 	.word	0x0802300c
        off -= p->len;
 8016e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e7e:	895b      	ldrh	r3, [r3, #10]
 8016e80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e84:	1ad3      	subs	r3, r2, r3
 8016e86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016e8e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e92:	2200      	movs	r2, #0
 8016e94:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e9e:	895b      	ldrh	r3, [r3, #10]
 8016ea0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	d8e9      	bhi.n	8016e7c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016ea8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016eac:	4619      	mov	r1, r3
 8016eae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016eb0:	f7fc f892 	bl	8012fd8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eb8:	4a91      	ldr	r2, [pc, #580]	; (8017100 <tcp_receive+0x884>)
 8016eba:	6013      	str	r3, [r2, #0]
 8016ebc:	4b91      	ldr	r3, [pc, #580]	; (8017104 <tcp_receive+0x888>)
 8016ebe:	68db      	ldr	r3, [r3, #12]
 8016ec0:	4a8f      	ldr	r2, [pc, #572]	; (8017100 <tcp_receive+0x884>)
 8016ec2:	6812      	ldr	r2, [r2, #0]
 8016ec4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016ec6:	e00d      	b.n	8016ee4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016ec8:	4b8d      	ldr	r3, [pc, #564]	; (8017100 <tcp_receive+0x884>)
 8016eca:	681a      	ldr	r2, [r3, #0]
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ed0:	1ad3      	subs	r3, r2, r3
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	da06      	bge.n	8016ee4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	8b5b      	ldrh	r3, [r3, #26]
 8016eda:	f043 0302 	orr.w	r3, r3, #2
 8016ede:	b29a      	uxth	r2, r3
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016ee4:	4b86      	ldr	r3, [pc, #536]	; (8017100 <tcp_receive+0x884>)
 8016ee6:	681a      	ldr	r2, [r3, #0]
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eec:	1ad3      	subs	r3, r2, r3
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	f2c0 842a 	blt.w	8017748 <tcp_receive+0xecc>
 8016ef4:	4b82      	ldr	r3, [pc, #520]	; (8017100 <tcp_receive+0x884>)
 8016ef6:	681a      	ldr	r2, [r3, #0]
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016efc:	6879      	ldr	r1, [r7, #4]
 8016efe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016f00:	440b      	add	r3, r1
 8016f02:	1ad3      	subs	r3, r2, r3
 8016f04:	3301      	adds	r3, #1
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	f300 841e 	bgt.w	8017748 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f10:	4b7b      	ldr	r3, [pc, #492]	; (8017100 <tcp_receive+0x884>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	429a      	cmp	r2, r3
 8016f16:	f040 829a 	bne.w	801744e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016f1a:	4b7a      	ldr	r3, [pc, #488]	; (8017104 <tcp_receive+0x888>)
 8016f1c:	891c      	ldrh	r4, [r3, #8]
 8016f1e:	4b79      	ldr	r3, [pc, #484]	; (8017104 <tcp_receive+0x888>)
 8016f20:	68db      	ldr	r3, [r3, #12]
 8016f22:	899b      	ldrh	r3, [r3, #12]
 8016f24:	b29b      	uxth	r3, r3
 8016f26:	4618      	mov	r0, r3
 8016f28:	f7fa fd24 	bl	8011974 <lwip_htons>
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	b2db      	uxtb	r3, r3
 8016f30:	f003 0303 	and.w	r3, r3, #3
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d001      	beq.n	8016f3c <tcp_receive+0x6c0>
 8016f38:	2301      	movs	r3, #1
 8016f3a:	e000      	b.n	8016f3e <tcp_receive+0x6c2>
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	4423      	add	r3, r4
 8016f40:	b29a      	uxth	r2, r3
 8016f42:	4b71      	ldr	r3, [pc, #452]	; (8017108 <tcp_receive+0x88c>)
 8016f44:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016f4a:	4b6f      	ldr	r3, [pc, #444]	; (8017108 <tcp_receive+0x88c>)
 8016f4c:	881b      	ldrh	r3, [r3, #0]
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d275      	bcs.n	801703e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016f52:	4b6c      	ldr	r3, [pc, #432]	; (8017104 <tcp_receive+0x888>)
 8016f54:	68db      	ldr	r3, [r3, #12]
 8016f56:	899b      	ldrh	r3, [r3, #12]
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7fa fd0a 	bl	8011974 <lwip_htons>
 8016f60:	4603      	mov	r3, r0
 8016f62:	b2db      	uxtb	r3, r3
 8016f64:	f003 0301 	and.w	r3, r3, #1
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d01f      	beq.n	8016fac <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016f6c:	4b65      	ldr	r3, [pc, #404]	; (8017104 <tcp_receive+0x888>)
 8016f6e:	68db      	ldr	r3, [r3, #12]
 8016f70:	899b      	ldrh	r3, [r3, #12]
 8016f72:	b29b      	uxth	r3, r3
 8016f74:	b21b      	sxth	r3, r3
 8016f76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016f7a:	b21c      	sxth	r4, r3
 8016f7c:	4b61      	ldr	r3, [pc, #388]	; (8017104 <tcp_receive+0x888>)
 8016f7e:	68db      	ldr	r3, [r3, #12]
 8016f80:	899b      	ldrh	r3, [r3, #12]
 8016f82:	b29b      	uxth	r3, r3
 8016f84:	4618      	mov	r0, r3
 8016f86:	f7fa fcf5 	bl	8011974 <lwip_htons>
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	b29b      	uxth	r3, r3
 8016f90:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016f94:	b29b      	uxth	r3, r3
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7fa fcec 	bl	8011974 <lwip_htons>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	b21b      	sxth	r3, r3
 8016fa0:	4323      	orrs	r3, r4
 8016fa2:	b21a      	sxth	r2, r3
 8016fa4:	4b57      	ldr	r3, [pc, #348]	; (8017104 <tcp_receive+0x888>)
 8016fa6:	68db      	ldr	r3, [r3, #12]
 8016fa8:	b292      	uxth	r2, r2
 8016faa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016fb0:	4b54      	ldr	r3, [pc, #336]	; (8017104 <tcp_receive+0x888>)
 8016fb2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016fb4:	4b53      	ldr	r3, [pc, #332]	; (8017104 <tcp_receive+0x888>)
 8016fb6:	68db      	ldr	r3, [r3, #12]
 8016fb8:	899b      	ldrh	r3, [r3, #12]
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f7fa fcd9 	bl	8011974 <lwip_htons>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	b2db      	uxtb	r3, r3
 8016fc6:	f003 0302 	and.w	r3, r3, #2
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d005      	beq.n	8016fda <tcp_receive+0x75e>
            inseg.len -= 1;
 8016fce:	4b4d      	ldr	r3, [pc, #308]	; (8017104 <tcp_receive+0x888>)
 8016fd0:	891b      	ldrh	r3, [r3, #8]
 8016fd2:	3b01      	subs	r3, #1
 8016fd4:	b29a      	uxth	r2, r3
 8016fd6:	4b4b      	ldr	r3, [pc, #300]	; (8017104 <tcp_receive+0x888>)
 8016fd8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016fda:	4b4a      	ldr	r3, [pc, #296]	; (8017104 <tcp_receive+0x888>)
 8016fdc:	685b      	ldr	r3, [r3, #4]
 8016fde:	4a49      	ldr	r2, [pc, #292]	; (8017104 <tcp_receive+0x888>)
 8016fe0:	8912      	ldrh	r2, [r2, #8]
 8016fe2:	4611      	mov	r1, r2
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f7fb fef7 	bl	8012dd8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016fea:	4b46      	ldr	r3, [pc, #280]	; (8017104 <tcp_receive+0x888>)
 8016fec:	891c      	ldrh	r4, [r3, #8]
 8016fee:	4b45      	ldr	r3, [pc, #276]	; (8017104 <tcp_receive+0x888>)
 8016ff0:	68db      	ldr	r3, [r3, #12]
 8016ff2:	899b      	ldrh	r3, [r3, #12]
 8016ff4:	b29b      	uxth	r3, r3
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f7fa fcbc 	bl	8011974 <lwip_htons>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	b2db      	uxtb	r3, r3
 8017000:	f003 0303 	and.w	r3, r3, #3
 8017004:	2b00      	cmp	r3, #0
 8017006:	d001      	beq.n	801700c <tcp_receive+0x790>
 8017008:	2301      	movs	r3, #1
 801700a:	e000      	b.n	801700e <tcp_receive+0x792>
 801700c:	2300      	movs	r3, #0
 801700e:	4423      	add	r3, r4
 8017010:	b29a      	uxth	r2, r3
 8017012:	4b3d      	ldr	r3, [pc, #244]	; (8017108 <tcp_receive+0x88c>)
 8017014:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017016:	4b3c      	ldr	r3, [pc, #240]	; (8017108 <tcp_receive+0x88c>)
 8017018:	881b      	ldrh	r3, [r3, #0]
 801701a:	461a      	mov	r2, r3
 801701c:	4b38      	ldr	r3, [pc, #224]	; (8017100 <tcp_receive+0x884>)
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	441a      	add	r2, r3
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017026:	6879      	ldr	r1, [r7, #4]
 8017028:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801702a:	440b      	add	r3, r1
 801702c:	429a      	cmp	r2, r3
 801702e:	d006      	beq.n	801703e <tcp_receive+0x7c2>
 8017030:	4b36      	ldr	r3, [pc, #216]	; (801710c <tcp_receive+0x890>)
 8017032:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8017036:	4936      	ldr	r1, [pc, #216]	; (8017110 <tcp_receive+0x894>)
 8017038:	4836      	ldr	r0, [pc, #216]	; (8017114 <tcp_receive+0x898>)
 801703a:	f008 fdbd 	bl	801fbb8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017042:	2b00      	cmp	r3, #0
 8017044:	f000 80e7 	beq.w	8017216 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017048:	4b2e      	ldr	r3, [pc, #184]	; (8017104 <tcp_receive+0x888>)
 801704a:	68db      	ldr	r3, [r3, #12]
 801704c:	899b      	ldrh	r3, [r3, #12]
 801704e:	b29b      	uxth	r3, r3
 8017050:	4618      	mov	r0, r3
 8017052:	f7fa fc8f 	bl	8011974 <lwip_htons>
 8017056:	4603      	mov	r3, r0
 8017058:	b2db      	uxtb	r3, r3
 801705a:	f003 0301 	and.w	r3, r3, #1
 801705e:	2b00      	cmp	r3, #0
 8017060:	d010      	beq.n	8017084 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017062:	e00a      	b.n	801707a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017068:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801706e:	681a      	ldr	r2, [r3, #0]
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8017074:	68f8      	ldr	r0, [r7, #12]
 8017076:	f7fd fcc8 	bl	8014a0a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801707e:	2b00      	cmp	r3, #0
 8017080:	d1f0      	bne.n	8017064 <tcp_receive+0x7e8>
 8017082:	e0c8      	b.n	8017216 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017088:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801708a:	e052      	b.n	8017132 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801708e:	68db      	ldr	r3, [r3, #12]
 8017090:	899b      	ldrh	r3, [r3, #12]
 8017092:	b29b      	uxth	r3, r3
 8017094:	4618      	mov	r0, r3
 8017096:	f7fa fc6d 	bl	8011974 <lwip_htons>
 801709a:	4603      	mov	r3, r0
 801709c:	b2db      	uxtb	r3, r3
 801709e:	f003 0301 	and.w	r3, r3, #1
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d03d      	beq.n	8017122 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80170a6:	4b17      	ldr	r3, [pc, #92]	; (8017104 <tcp_receive+0x888>)
 80170a8:	68db      	ldr	r3, [r3, #12]
 80170aa:	899b      	ldrh	r3, [r3, #12]
 80170ac:	b29b      	uxth	r3, r3
 80170ae:	4618      	mov	r0, r3
 80170b0:	f7fa fc60 	bl	8011974 <lwip_htons>
 80170b4:	4603      	mov	r3, r0
 80170b6:	b2db      	uxtb	r3, r3
 80170b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d130      	bne.n	8017122 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80170c0:	4b10      	ldr	r3, [pc, #64]	; (8017104 <tcp_receive+0x888>)
 80170c2:	68db      	ldr	r3, [r3, #12]
 80170c4:	899b      	ldrh	r3, [r3, #12]
 80170c6:	b29c      	uxth	r4, r3
 80170c8:	2001      	movs	r0, #1
 80170ca:	f7fa fc53 	bl	8011974 <lwip_htons>
 80170ce:	4603      	mov	r3, r0
 80170d0:	461a      	mov	r2, r3
 80170d2:	4b0c      	ldr	r3, [pc, #48]	; (8017104 <tcp_receive+0x888>)
 80170d4:	68db      	ldr	r3, [r3, #12]
 80170d6:	4322      	orrs	r2, r4
 80170d8:	b292      	uxth	r2, r2
 80170da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80170dc:	4b09      	ldr	r3, [pc, #36]	; (8017104 <tcp_receive+0x888>)
 80170de:	891c      	ldrh	r4, [r3, #8]
 80170e0:	4b08      	ldr	r3, [pc, #32]	; (8017104 <tcp_receive+0x888>)
 80170e2:	68db      	ldr	r3, [r3, #12]
 80170e4:	899b      	ldrh	r3, [r3, #12]
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	4618      	mov	r0, r3
 80170ea:	f7fa fc43 	bl	8011974 <lwip_htons>
 80170ee:	4603      	mov	r3, r0
 80170f0:	b2db      	uxtb	r3, r3
 80170f2:	f003 0303 	and.w	r3, r3, #3
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d00e      	beq.n	8017118 <tcp_receive+0x89c>
 80170fa:	2301      	movs	r3, #1
 80170fc:	e00d      	b.n	801711a <tcp_receive+0x89e>
 80170fe:	bf00      	nop
 8017100:	20005fcc 	.word	0x20005fcc
 8017104:	20005fac 	.word	0x20005fac
 8017108:	20005fd6 	.word	0x20005fd6
 801710c:	08022c74 	.word	0x08022c74
 8017110:	0802301c 	.word	0x0802301c
 8017114:	08022cc0 	.word	0x08022cc0
 8017118:	2300      	movs	r3, #0
 801711a:	4423      	add	r3, r4
 801711c:	b29a      	uxth	r2, r3
 801711e:	4b98      	ldr	r3, [pc, #608]	; (8017380 <tcp_receive+0xb04>)
 8017120:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017124:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801712c:	6938      	ldr	r0, [r7, #16]
 801712e:	f7fd fc6c 	bl	8014a0a <tcp_seg_free>
            while (next &&
 8017132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017134:	2b00      	cmp	r3, #0
 8017136:	d00e      	beq.n	8017156 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017138:	4b91      	ldr	r3, [pc, #580]	; (8017380 <tcp_receive+0xb04>)
 801713a:	881b      	ldrh	r3, [r3, #0]
 801713c:	461a      	mov	r2, r3
 801713e:	4b91      	ldr	r3, [pc, #580]	; (8017384 <tcp_receive+0xb08>)
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	441a      	add	r2, r3
 8017144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017146:	68db      	ldr	r3, [r3, #12]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801714c:	8909      	ldrh	r1, [r1, #8]
 801714e:	440b      	add	r3, r1
 8017150:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017152:	2b00      	cmp	r3, #0
 8017154:	da9a      	bge.n	801708c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017158:	2b00      	cmp	r3, #0
 801715a:	d059      	beq.n	8017210 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801715c:	4b88      	ldr	r3, [pc, #544]	; (8017380 <tcp_receive+0xb04>)
 801715e:	881b      	ldrh	r3, [r3, #0]
 8017160:	461a      	mov	r2, r3
 8017162:	4b88      	ldr	r3, [pc, #544]	; (8017384 <tcp_receive+0xb08>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	441a      	add	r2, r3
 8017168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801716a:	68db      	ldr	r3, [r3, #12]
 801716c:	685b      	ldr	r3, [r3, #4]
 801716e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017170:	2b00      	cmp	r3, #0
 8017172:	dd4d      	ble.n	8017210 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017176:	68db      	ldr	r3, [r3, #12]
 8017178:	685b      	ldr	r3, [r3, #4]
 801717a:	b29a      	uxth	r2, r3
 801717c:	4b81      	ldr	r3, [pc, #516]	; (8017384 <tcp_receive+0xb08>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	b29b      	uxth	r3, r3
 8017182:	1ad3      	subs	r3, r2, r3
 8017184:	b29a      	uxth	r2, r3
 8017186:	4b80      	ldr	r3, [pc, #512]	; (8017388 <tcp_receive+0xb0c>)
 8017188:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801718a:	4b7f      	ldr	r3, [pc, #508]	; (8017388 <tcp_receive+0xb0c>)
 801718c:	68db      	ldr	r3, [r3, #12]
 801718e:	899b      	ldrh	r3, [r3, #12]
 8017190:	b29b      	uxth	r3, r3
 8017192:	4618      	mov	r0, r3
 8017194:	f7fa fbee 	bl	8011974 <lwip_htons>
 8017198:	4603      	mov	r3, r0
 801719a:	b2db      	uxtb	r3, r3
 801719c:	f003 0302 	and.w	r3, r3, #2
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d005      	beq.n	80171b0 <tcp_receive+0x934>
                inseg.len -= 1;
 80171a4:	4b78      	ldr	r3, [pc, #480]	; (8017388 <tcp_receive+0xb0c>)
 80171a6:	891b      	ldrh	r3, [r3, #8]
 80171a8:	3b01      	subs	r3, #1
 80171aa:	b29a      	uxth	r2, r3
 80171ac:	4b76      	ldr	r3, [pc, #472]	; (8017388 <tcp_receive+0xb0c>)
 80171ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80171b0:	4b75      	ldr	r3, [pc, #468]	; (8017388 <tcp_receive+0xb0c>)
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	4a74      	ldr	r2, [pc, #464]	; (8017388 <tcp_receive+0xb0c>)
 80171b6:	8912      	ldrh	r2, [r2, #8]
 80171b8:	4611      	mov	r1, r2
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7fb fe0c 	bl	8012dd8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80171c0:	4b71      	ldr	r3, [pc, #452]	; (8017388 <tcp_receive+0xb0c>)
 80171c2:	891c      	ldrh	r4, [r3, #8]
 80171c4:	4b70      	ldr	r3, [pc, #448]	; (8017388 <tcp_receive+0xb0c>)
 80171c6:	68db      	ldr	r3, [r3, #12]
 80171c8:	899b      	ldrh	r3, [r3, #12]
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	4618      	mov	r0, r3
 80171ce:	f7fa fbd1 	bl	8011974 <lwip_htons>
 80171d2:	4603      	mov	r3, r0
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	f003 0303 	and.w	r3, r3, #3
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d001      	beq.n	80171e2 <tcp_receive+0x966>
 80171de:	2301      	movs	r3, #1
 80171e0:	e000      	b.n	80171e4 <tcp_receive+0x968>
 80171e2:	2300      	movs	r3, #0
 80171e4:	4423      	add	r3, r4
 80171e6:	b29a      	uxth	r2, r3
 80171e8:	4b65      	ldr	r3, [pc, #404]	; (8017380 <tcp_receive+0xb04>)
 80171ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80171ec:	4b64      	ldr	r3, [pc, #400]	; (8017380 <tcp_receive+0xb04>)
 80171ee:	881b      	ldrh	r3, [r3, #0]
 80171f0:	461a      	mov	r2, r3
 80171f2:	4b64      	ldr	r3, [pc, #400]	; (8017384 <tcp_receive+0xb08>)
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	441a      	add	r2, r3
 80171f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171fa:	68db      	ldr	r3, [r3, #12]
 80171fc:	685b      	ldr	r3, [r3, #4]
 80171fe:	429a      	cmp	r2, r3
 8017200:	d006      	beq.n	8017210 <tcp_receive+0x994>
 8017202:	4b62      	ldr	r3, [pc, #392]	; (801738c <tcp_receive+0xb10>)
 8017204:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8017208:	4961      	ldr	r1, [pc, #388]	; (8017390 <tcp_receive+0xb14>)
 801720a:	4862      	ldr	r0, [pc, #392]	; (8017394 <tcp_receive+0xb18>)
 801720c:	f008 fcd4 	bl	801fbb8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017214:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017216:	4b5a      	ldr	r3, [pc, #360]	; (8017380 <tcp_receive+0xb04>)
 8017218:	881b      	ldrh	r3, [r3, #0]
 801721a:	461a      	mov	r2, r3
 801721c:	4b59      	ldr	r3, [pc, #356]	; (8017384 <tcp_receive+0xb08>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	441a      	add	r2, r3
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801722a:	4b55      	ldr	r3, [pc, #340]	; (8017380 <tcp_receive+0xb04>)
 801722c:	881b      	ldrh	r3, [r3, #0]
 801722e:	429a      	cmp	r2, r3
 8017230:	d206      	bcs.n	8017240 <tcp_receive+0x9c4>
 8017232:	4b56      	ldr	r3, [pc, #344]	; (801738c <tcp_receive+0xb10>)
 8017234:	f240 6207 	movw	r2, #1543	; 0x607
 8017238:	4957      	ldr	r1, [pc, #348]	; (8017398 <tcp_receive+0xb1c>)
 801723a:	4856      	ldr	r0, [pc, #344]	; (8017394 <tcp_receive+0xb18>)
 801723c:	f008 fcbc 	bl	801fbb8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017244:	4b4e      	ldr	r3, [pc, #312]	; (8017380 <tcp_receive+0xb04>)
 8017246:	881b      	ldrh	r3, [r3, #0]
 8017248:	1ad3      	subs	r3, r2, r3
 801724a:	b29a      	uxth	r2, r3
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f7fc feb5 	bl	8013fc0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017256:	4b4c      	ldr	r3, [pc, #304]	; (8017388 <tcp_receive+0xb0c>)
 8017258:	685b      	ldr	r3, [r3, #4]
 801725a:	891b      	ldrh	r3, [r3, #8]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d006      	beq.n	801726e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017260:	4b49      	ldr	r3, [pc, #292]	; (8017388 <tcp_receive+0xb0c>)
 8017262:	685b      	ldr	r3, [r3, #4]
 8017264:	4a4d      	ldr	r2, [pc, #308]	; (801739c <tcp_receive+0xb20>)
 8017266:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017268:	4b47      	ldr	r3, [pc, #284]	; (8017388 <tcp_receive+0xb0c>)
 801726a:	2200      	movs	r2, #0
 801726c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801726e:	4b46      	ldr	r3, [pc, #280]	; (8017388 <tcp_receive+0xb0c>)
 8017270:	68db      	ldr	r3, [r3, #12]
 8017272:	899b      	ldrh	r3, [r3, #12]
 8017274:	b29b      	uxth	r3, r3
 8017276:	4618      	mov	r0, r3
 8017278:	f7fa fb7c 	bl	8011974 <lwip_htons>
 801727c:	4603      	mov	r3, r0
 801727e:	b2db      	uxtb	r3, r3
 8017280:	f003 0301 	and.w	r3, r3, #1
 8017284:	2b00      	cmp	r3, #0
 8017286:	f000 80b8 	beq.w	80173fa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801728a:	4b45      	ldr	r3, [pc, #276]	; (80173a0 <tcp_receive+0xb24>)
 801728c:	781b      	ldrb	r3, [r3, #0]
 801728e:	f043 0320 	orr.w	r3, r3, #32
 8017292:	b2da      	uxtb	r2, r3
 8017294:	4b42      	ldr	r3, [pc, #264]	; (80173a0 <tcp_receive+0xb24>)
 8017296:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017298:	e0af      	b.n	80173fa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801729e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172a4:	68db      	ldr	r3, [r3, #12]
 80172a6:	685b      	ldr	r3, [r3, #4]
 80172a8:	4a36      	ldr	r2, [pc, #216]	; (8017384 <tcp_receive+0xb08>)
 80172aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80172ac:	68bb      	ldr	r3, [r7, #8]
 80172ae:	891b      	ldrh	r3, [r3, #8]
 80172b0:	461c      	mov	r4, r3
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	68db      	ldr	r3, [r3, #12]
 80172b6:	899b      	ldrh	r3, [r3, #12]
 80172b8:	b29b      	uxth	r3, r3
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7fa fb5a 	bl	8011974 <lwip_htons>
 80172c0:	4603      	mov	r3, r0
 80172c2:	b2db      	uxtb	r3, r3
 80172c4:	f003 0303 	and.w	r3, r3, #3
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d001      	beq.n	80172d0 <tcp_receive+0xa54>
 80172cc:	2301      	movs	r3, #1
 80172ce:	e000      	b.n	80172d2 <tcp_receive+0xa56>
 80172d0:	2300      	movs	r3, #0
 80172d2:	191a      	adds	r2, r3, r4
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d8:	441a      	add	r2, r3
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172e2:	461c      	mov	r4, r3
 80172e4:	68bb      	ldr	r3, [r7, #8]
 80172e6:	891b      	ldrh	r3, [r3, #8]
 80172e8:	461d      	mov	r5, r3
 80172ea:	68bb      	ldr	r3, [r7, #8]
 80172ec:	68db      	ldr	r3, [r3, #12]
 80172ee:	899b      	ldrh	r3, [r3, #12]
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	4618      	mov	r0, r3
 80172f4:	f7fa fb3e 	bl	8011974 <lwip_htons>
 80172f8:	4603      	mov	r3, r0
 80172fa:	b2db      	uxtb	r3, r3
 80172fc:	f003 0303 	and.w	r3, r3, #3
 8017300:	2b00      	cmp	r3, #0
 8017302:	d001      	beq.n	8017308 <tcp_receive+0xa8c>
 8017304:	2301      	movs	r3, #1
 8017306:	e000      	b.n	801730a <tcp_receive+0xa8e>
 8017308:	2300      	movs	r3, #0
 801730a:	442b      	add	r3, r5
 801730c:	429c      	cmp	r4, r3
 801730e:	d206      	bcs.n	801731e <tcp_receive+0xaa2>
 8017310:	4b1e      	ldr	r3, [pc, #120]	; (801738c <tcp_receive+0xb10>)
 8017312:	f240 622b 	movw	r2, #1579	; 0x62b
 8017316:	4923      	ldr	r1, [pc, #140]	; (80173a4 <tcp_receive+0xb28>)
 8017318:	481e      	ldr	r0, [pc, #120]	; (8017394 <tcp_receive+0xb18>)
 801731a:	f008 fc4d 	bl	801fbb8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	891b      	ldrh	r3, [r3, #8]
 8017322:	461c      	mov	r4, r3
 8017324:	68bb      	ldr	r3, [r7, #8]
 8017326:	68db      	ldr	r3, [r3, #12]
 8017328:	899b      	ldrh	r3, [r3, #12]
 801732a:	b29b      	uxth	r3, r3
 801732c:	4618      	mov	r0, r3
 801732e:	f7fa fb21 	bl	8011974 <lwip_htons>
 8017332:	4603      	mov	r3, r0
 8017334:	b2db      	uxtb	r3, r3
 8017336:	f003 0303 	and.w	r3, r3, #3
 801733a:	2b00      	cmp	r3, #0
 801733c:	d001      	beq.n	8017342 <tcp_receive+0xac6>
 801733e:	2301      	movs	r3, #1
 8017340:	e000      	b.n	8017344 <tcp_receive+0xac8>
 8017342:	2300      	movs	r3, #0
 8017344:	1919      	adds	r1, r3, r4
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801734a:	b28b      	uxth	r3, r1
 801734c:	1ad3      	subs	r3, r2, r3
 801734e:	b29a      	uxth	r2, r3
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017354:	6878      	ldr	r0, [r7, #4]
 8017356:	f7fc fe33 	bl	8013fc0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801735a:	68bb      	ldr	r3, [r7, #8]
 801735c:	685b      	ldr	r3, [r3, #4]
 801735e:	891b      	ldrh	r3, [r3, #8]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d028      	beq.n	80173b6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017364:	4b0d      	ldr	r3, [pc, #52]	; (801739c <tcp_receive+0xb20>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d01d      	beq.n	80173a8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801736c:	4b0b      	ldr	r3, [pc, #44]	; (801739c <tcp_receive+0xb20>)
 801736e:	681a      	ldr	r2, [r3, #0]
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	685b      	ldr	r3, [r3, #4]
 8017374:	4619      	mov	r1, r3
 8017376:	4610      	mov	r0, r2
 8017378:	f7fb ff82 	bl	8013280 <pbuf_cat>
 801737c:	e018      	b.n	80173b0 <tcp_receive+0xb34>
 801737e:	bf00      	nop
 8017380:	20005fd6 	.word	0x20005fd6
 8017384:	20005fcc 	.word	0x20005fcc
 8017388:	20005fac 	.word	0x20005fac
 801738c:	08022c74 	.word	0x08022c74
 8017390:	08023054 	.word	0x08023054
 8017394:	08022cc0 	.word	0x08022cc0
 8017398:	08023090 	.word	0x08023090
 801739c:	20005fdc 	.word	0x20005fdc
 80173a0:	20005fd9 	.word	0x20005fd9
 80173a4:	080230b0 	.word	0x080230b0
            } else {
              recv_data = cseg->p;
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	685b      	ldr	r3, [r3, #4]
 80173ac:	4a70      	ldr	r2, [pc, #448]	; (8017570 <tcp_receive+0xcf4>)
 80173ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	2200      	movs	r2, #0
 80173b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	68db      	ldr	r3, [r3, #12]
 80173ba:	899b      	ldrh	r3, [r3, #12]
 80173bc:	b29b      	uxth	r3, r3
 80173be:	4618      	mov	r0, r3
 80173c0:	f7fa fad8 	bl	8011974 <lwip_htons>
 80173c4:	4603      	mov	r3, r0
 80173c6:	b2db      	uxtb	r3, r3
 80173c8:	f003 0301 	and.w	r3, r3, #1
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d00d      	beq.n	80173ec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80173d0:	4b68      	ldr	r3, [pc, #416]	; (8017574 <tcp_receive+0xcf8>)
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	f043 0320 	orr.w	r3, r3, #32
 80173d8:	b2da      	uxtb	r2, r3
 80173da:	4b66      	ldr	r3, [pc, #408]	; (8017574 <tcp_receive+0xcf8>)
 80173dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	7d1b      	ldrb	r3, [r3, #20]
 80173e2:	2b04      	cmp	r3, #4
 80173e4:	d102      	bne.n	80173ec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	2207      	movs	r2, #7
 80173ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80173ec:	68bb      	ldr	r3, [r7, #8]
 80173ee:	681a      	ldr	r2, [r3, #0]
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80173f4:	68b8      	ldr	r0, [r7, #8]
 80173f6:	f7fd fb08 	bl	8014a0a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d008      	beq.n	8017414 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017406:	68db      	ldr	r3, [r3, #12]
 8017408:	685a      	ldr	r2, [r3, #4]
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801740e:	429a      	cmp	r2, r3
 8017410:	f43f af43 	beq.w	801729a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	8b5b      	ldrh	r3, [r3, #26]
 8017418:	f003 0301 	and.w	r3, r3, #1
 801741c:	2b00      	cmp	r3, #0
 801741e:	d00e      	beq.n	801743e <tcp_receive+0xbc2>
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	8b5b      	ldrh	r3, [r3, #26]
 8017424:	f023 0301 	bic.w	r3, r3, #1
 8017428:	b29a      	uxth	r2, r3
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	835a      	strh	r2, [r3, #26]
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	8b5b      	ldrh	r3, [r3, #26]
 8017432:	f043 0302 	orr.w	r3, r3, #2
 8017436:	b29a      	uxth	r2, r3
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801743c:	e188      	b.n	8017750 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	8b5b      	ldrh	r3, [r3, #26]
 8017442:	f043 0301 	orr.w	r3, r3, #1
 8017446:	b29a      	uxth	r2, r3
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801744c:	e180      	b.n	8017750 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017452:	2b00      	cmp	r3, #0
 8017454:	d106      	bne.n	8017464 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017456:	4848      	ldr	r0, [pc, #288]	; (8017578 <tcp_receive+0xcfc>)
 8017458:	f7fd faf0 	bl	8014a3c <tcp_seg_copy>
 801745c:	4602      	mov	r2, r0
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	675a      	str	r2, [r3, #116]	; 0x74
 8017462:	e16d      	b.n	8017740 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017464:	2300      	movs	r3, #0
 8017466:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801746c:	63bb      	str	r3, [r7, #56]	; 0x38
 801746e:	e157      	b.n	8017720 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8017470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017472:	68db      	ldr	r3, [r3, #12]
 8017474:	685a      	ldr	r2, [r3, #4]
 8017476:	4b41      	ldr	r3, [pc, #260]	; (801757c <tcp_receive+0xd00>)
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	429a      	cmp	r2, r3
 801747c:	d11d      	bne.n	80174ba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801747e:	4b3e      	ldr	r3, [pc, #248]	; (8017578 <tcp_receive+0xcfc>)
 8017480:	891a      	ldrh	r2, [r3, #8]
 8017482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017484:	891b      	ldrh	r3, [r3, #8]
 8017486:	429a      	cmp	r2, r3
 8017488:	f240 814f 	bls.w	801772a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801748c:	483a      	ldr	r0, [pc, #232]	; (8017578 <tcp_receive+0xcfc>)
 801748e:	f7fd fad5 	bl	8014a3c <tcp_seg_copy>
 8017492:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017494:	697b      	ldr	r3, [r7, #20]
 8017496:	2b00      	cmp	r3, #0
 8017498:	f000 8149 	beq.w	801772e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801749c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d003      	beq.n	80174aa <tcp_receive+0xc2e>
                    prev->next = cseg;
 80174a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174a4:	697a      	ldr	r2, [r7, #20]
 80174a6:	601a      	str	r2, [r3, #0]
 80174a8:	e002      	b.n	80174b0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	697a      	ldr	r2, [r7, #20]
 80174ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80174b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80174b2:	6978      	ldr	r0, [r7, #20]
 80174b4:	f7ff f8de 	bl	8016674 <tcp_oos_insert_segment>
                }
                break;
 80174b8:	e139      	b.n	801772e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80174ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d117      	bne.n	80174f0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80174c0:	4b2e      	ldr	r3, [pc, #184]	; (801757c <tcp_receive+0xd00>)
 80174c2:	681a      	ldr	r2, [r3, #0]
 80174c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174c6:	68db      	ldr	r3, [r3, #12]
 80174c8:	685b      	ldr	r3, [r3, #4]
 80174ca:	1ad3      	subs	r3, r2, r3
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	da57      	bge.n	8017580 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80174d0:	4829      	ldr	r0, [pc, #164]	; (8017578 <tcp_receive+0xcfc>)
 80174d2:	f7fd fab3 	bl	8014a3c <tcp_seg_copy>
 80174d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80174d8:	69bb      	ldr	r3, [r7, #24]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	f000 8129 	beq.w	8017732 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	69ba      	ldr	r2, [r7, #24]
 80174e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80174e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80174e8:	69b8      	ldr	r0, [r7, #24]
 80174ea:	f7ff f8c3 	bl	8016674 <tcp_oos_insert_segment>
                  }
                  break;
 80174ee:	e120      	b.n	8017732 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80174f0:	4b22      	ldr	r3, [pc, #136]	; (801757c <tcp_receive+0xd00>)
 80174f2:	681a      	ldr	r2, [r3, #0]
 80174f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174f6:	68db      	ldr	r3, [r3, #12]
 80174f8:	685b      	ldr	r3, [r3, #4]
 80174fa:	1ad3      	subs	r3, r2, r3
 80174fc:	3b01      	subs	r3, #1
 80174fe:	2b00      	cmp	r3, #0
 8017500:	db3e      	blt.n	8017580 <tcp_receive+0xd04>
 8017502:	4b1e      	ldr	r3, [pc, #120]	; (801757c <tcp_receive+0xd00>)
 8017504:	681a      	ldr	r2, [r3, #0]
 8017506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017508:	68db      	ldr	r3, [r3, #12]
 801750a:	685b      	ldr	r3, [r3, #4]
 801750c:	1ad3      	subs	r3, r2, r3
 801750e:	3301      	adds	r3, #1
 8017510:	2b00      	cmp	r3, #0
 8017512:	dc35      	bgt.n	8017580 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017514:	4818      	ldr	r0, [pc, #96]	; (8017578 <tcp_receive+0xcfc>)
 8017516:	f7fd fa91 	bl	8014a3c <tcp_seg_copy>
 801751a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801751c:	69fb      	ldr	r3, [r7, #28]
 801751e:	2b00      	cmp	r3, #0
 8017520:	f000 8109 	beq.w	8017736 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017526:	68db      	ldr	r3, [r3, #12]
 8017528:	685b      	ldr	r3, [r3, #4]
 801752a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801752c:	8912      	ldrh	r2, [r2, #8]
 801752e:	441a      	add	r2, r3
 8017530:	4b12      	ldr	r3, [pc, #72]	; (801757c <tcp_receive+0xd00>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	1ad3      	subs	r3, r2, r3
 8017536:	2b00      	cmp	r3, #0
 8017538:	dd12      	ble.n	8017560 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801753a:	4b10      	ldr	r3, [pc, #64]	; (801757c <tcp_receive+0xd00>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	b29a      	uxth	r2, r3
 8017540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017542:	68db      	ldr	r3, [r3, #12]
 8017544:	685b      	ldr	r3, [r3, #4]
 8017546:	b29b      	uxth	r3, r3
 8017548:	1ad3      	subs	r3, r2, r3
 801754a:	b29a      	uxth	r2, r3
 801754c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801754e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017552:	685a      	ldr	r2, [r3, #4]
 8017554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017556:	891b      	ldrh	r3, [r3, #8]
 8017558:	4619      	mov	r1, r3
 801755a:	4610      	mov	r0, r2
 801755c:	f7fb fc3c 	bl	8012dd8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017562:	69fa      	ldr	r2, [r7, #28]
 8017564:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017566:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017568:	69f8      	ldr	r0, [r7, #28]
 801756a:	f7ff f883 	bl	8016674 <tcp_oos_insert_segment>
                  }
                  break;
 801756e:	e0e2      	b.n	8017736 <tcp_receive+0xeba>
 8017570:	20005fdc 	.word	0x20005fdc
 8017574:	20005fd9 	.word	0x20005fd9
 8017578:	20005fac 	.word	0x20005fac
 801757c:	20005fcc 	.word	0x20005fcc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017582:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	2b00      	cmp	r3, #0
 801758a:	f040 80c6 	bne.w	801771a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801758e:	4b80      	ldr	r3, [pc, #512]	; (8017790 <tcp_receive+0xf14>)
 8017590:	681a      	ldr	r2, [r3, #0]
 8017592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017594:	68db      	ldr	r3, [r3, #12]
 8017596:	685b      	ldr	r3, [r3, #4]
 8017598:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801759a:	2b00      	cmp	r3, #0
 801759c:	f340 80bd 	ble.w	801771a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80175a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175a2:	68db      	ldr	r3, [r3, #12]
 80175a4:	899b      	ldrh	r3, [r3, #12]
 80175a6:	b29b      	uxth	r3, r3
 80175a8:	4618      	mov	r0, r3
 80175aa:	f7fa f9e3 	bl	8011974 <lwip_htons>
 80175ae:	4603      	mov	r3, r0
 80175b0:	b2db      	uxtb	r3, r3
 80175b2:	f003 0301 	and.w	r3, r3, #1
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	f040 80bf 	bne.w	801773a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80175bc:	4875      	ldr	r0, [pc, #468]	; (8017794 <tcp_receive+0xf18>)
 80175be:	f7fd fa3d 	bl	8014a3c <tcp_seg_copy>
 80175c2:	4602      	mov	r2, r0
 80175c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80175c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	f000 80b6 	beq.w	801773e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80175d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175d4:	68db      	ldr	r3, [r3, #12]
 80175d6:	685b      	ldr	r3, [r3, #4]
 80175d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80175da:	8912      	ldrh	r2, [r2, #8]
 80175dc:	441a      	add	r2, r3
 80175de:	4b6c      	ldr	r3, [pc, #432]	; (8017790 <tcp_receive+0xf14>)
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	1ad3      	subs	r3, r2, r3
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	dd12      	ble.n	801760e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80175e8:	4b69      	ldr	r3, [pc, #420]	; (8017790 <tcp_receive+0xf14>)
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	b29a      	uxth	r2, r3
 80175ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175f0:	68db      	ldr	r3, [r3, #12]
 80175f2:	685b      	ldr	r3, [r3, #4]
 80175f4:	b29b      	uxth	r3, r3
 80175f6:	1ad3      	subs	r3, r2, r3
 80175f8:	b29a      	uxth	r2, r3
 80175fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80175fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017600:	685a      	ldr	r2, [r3, #4]
 8017602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017604:	891b      	ldrh	r3, [r3, #8]
 8017606:	4619      	mov	r1, r3
 8017608:	4610      	mov	r0, r2
 801760a:	f7fb fbe5 	bl	8012dd8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801760e:	4b62      	ldr	r3, [pc, #392]	; (8017798 <tcp_receive+0xf1c>)
 8017610:	881b      	ldrh	r3, [r3, #0]
 8017612:	461a      	mov	r2, r3
 8017614:	4b5e      	ldr	r3, [pc, #376]	; (8017790 <tcp_receive+0xf14>)
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	441a      	add	r2, r3
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801761e:	6879      	ldr	r1, [r7, #4]
 8017620:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017622:	440b      	add	r3, r1
 8017624:	1ad3      	subs	r3, r2, r3
 8017626:	2b00      	cmp	r3, #0
 8017628:	f340 8089 	ble.w	801773e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	68db      	ldr	r3, [r3, #12]
 8017632:	899b      	ldrh	r3, [r3, #12]
 8017634:	b29b      	uxth	r3, r3
 8017636:	4618      	mov	r0, r3
 8017638:	f7fa f99c 	bl	8011974 <lwip_htons>
 801763c:	4603      	mov	r3, r0
 801763e:	b2db      	uxtb	r3, r3
 8017640:	f003 0301 	and.w	r3, r3, #1
 8017644:	2b00      	cmp	r3, #0
 8017646:	d022      	beq.n	801768e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	899b      	ldrh	r3, [r3, #12]
 8017650:	b29b      	uxth	r3, r3
 8017652:	b21b      	sxth	r3, r3
 8017654:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017658:	b21c      	sxth	r4, r3
 801765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	68db      	ldr	r3, [r3, #12]
 8017660:	899b      	ldrh	r3, [r3, #12]
 8017662:	b29b      	uxth	r3, r3
 8017664:	4618      	mov	r0, r3
 8017666:	f7fa f985 	bl	8011974 <lwip_htons>
 801766a:	4603      	mov	r3, r0
 801766c:	b2db      	uxtb	r3, r3
 801766e:	b29b      	uxth	r3, r3
 8017670:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017674:	b29b      	uxth	r3, r3
 8017676:	4618      	mov	r0, r3
 8017678:	f7fa f97c 	bl	8011974 <lwip_htons>
 801767c:	4603      	mov	r3, r0
 801767e:	b21b      	sxth	r3, r3
 8017680:	4323      	orrs	r3, r4
 8017682:	b21a      	sxth	r2, r3
 8017684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	68db      	ldr	r3, [r3, #12]
 801768a:	b292      	uxth	r2, r2
 801768c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017692:	b29a      	uxth	r2, r3
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017698:	4413      	add	r3, r2
 801769a:	b299      	uxth	r1, r3
 801769c:	4b3c      	ldr	r3, [pc, #240]	; (8017790 <tcp_receive+0xf14>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	b29a      	uxth	r2, r3
 80176a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	1a8a      	subs	r2, r1, r2
 80176a8:	b292      	uxth	r2, r2
 80176aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80176ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	685a      	ldr	r2, [r3, #4]
 80176b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	891b      	ldrh	r3, [r3, #8]
 80176b8:	4619      	mov	r1, r3
 80176ba:	4610      	mov	r0, r2
 80176bc:	f7fb fb8c 	bl	8012dd8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80176c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	891c      	ldrh	r4, [r3, #8]
 80176c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	899b      	ldrh	r3, [r3, #12]
 80176ce:	b29b      	uxth	r3, r3
 80176d0:	4618      	mov	r0, r3
 80176d2:	f7fa f94f 	bl	8011974 <lwip_htons>
 80176d6:	4603      	mov	r3, r0
 80176d8:	b2db      	uxtb	r3, r3
 80176da:	f003 0303 	and.w	r3, r3, #3
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d001      	beq.n	80176e6 <tcp_receive+0xe6a>
 80176e2:	2301      	movs	r3, #1
 80176e4:	e000      	b.n	80176e8 <tcp_receive+0xe6c>
 80176e6:	2300      	movs	r3, #0
 80176e8:	4423      	add	r3, r4
 80176ea:	b29a      	uxth	r2, r3
 80176ec:	4b2a      	ldr	r3, [pc, #168]	; (8017798 <tcp_receive+0xf1c>)
 80176ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80176f0:	4b29      	ldr	r3, [pc, #164]	; (8017798 <tcp_receive+0xf1c>)
 80176f2:	881b      	ldrh	r3, [r3, #0]
 80176f4:	461a      	mov	r2, r3
 80176f6:	4b26      	ldr	r3, [pc, #152]	; (8017790 <tcp_receive+0xf14>)
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	441a      	add	r2, r3
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017700:	6879      	ldr	r1, [r7, #4]
 8017702:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017704:	440b      	add	r3, r1
 8017706:	429a      	cmp	r2, r3
 8017708:	d019      	beq.n	801773e <tcp_receive+0xec2>
 801770a:	4b24      	ldr	r3, [pc, #144]	; (801779c <tcp_receive+0xf20>)
 801770c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8017710:	4923      	ldr	r1, [pc, #140]	; (80177a0 <tcp_receive+0xf24>)
 8017712:	4824      	ldr	r0, [pc, #144]	; (80177a4 <tcp_receive+0xf28>)
 8017714:	f008 fa50 	bl	801fbb8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017718:	e011      	b.n	801773e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017722:	2b00      	cmp	r3, #0
 8017724:	f47f aea4 	bne.w	8017470 <tcp_receive+0xbf4>
 8017728:	e00a      	b.n	8017740 <tcp_receive+0xec4>
                break;
 801772a:	bf00      	nop
 801772c:	e008      	b.n	8017740 <tcp_receive+0xec4>
                break;
 801772e:	bf00      	nop
 8017730:	e006      	b.n	8017740 <tcp_receive+0xec4>
                  break;
 8017732:	bf00      	nop
 8017734:	e004      	b.n	8017740 <tcp_receive+0xec4>
                  break;
 8017736:	bf00      	nop
 8017738:	e002      	b.n	8017740 <tcp_receive+0xec4>
                  break;
 801773a:	bf00      	nop
 801773c:	e000      	b.n	8017740 <tcp_receive+0xec4>
                break;
 801773e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017740:	6878      	ldr	r0, [r7, #4]
 8017742:	f001 fe8b 	bl	801945c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017746:	e003      	b.n	8017750 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017748:	6878      	ldr	r0, [r7, #4]
 801774a:	f001 fe87 	bl	801945c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801774e:	e01a      	b.n	8017786 <tcp_receive+0xf0a>
 8017750:	e019      	b.n	8017786 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8017752:	4b0f      	ldr	r3, [pc, #60]	; (8017790 <tcp_receive+0xf14>)
 8017754:	681a      	ldr	r2, [r3, #0]
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801775a:	1ad3      	subs	r3, r2, r3
 801775c:	2b00      	cmp	r3, #0
 801775e:	db0a      	blt.n	8017776 <tcp_receive+0xefa>
 8017760:	4b0b      	ldr	r3, [pc, #44]	; (8017790 <tcp_receive+0xf14>)
 8017762:	681a      	ldr	r2, [r3, #0]
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017768:	6879      	ldr	r1, [r7, #4]
 801776a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801776c:	440b      	add	r3, r1
 801776e:	1ad3      	subs	r3, r2, r3
 8017770:	3301      	adds	r3, #1
 8017772:	2b00      	cmp	r3, #0
 8017774:	dd07      	ble.n	8017786 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	8b5b      	ldrh	r3, [r3, #26]
 801777a:	f043 0302 	orr.w	r3, r3, #2
 801777e:	b29a      	uxth	r2, r3
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017784:	e7ff      	b.n	8017786 <tcp_receive+0xf0a>
 8017786:	bf00      	nop
 8017788:	3750      	adds	r7, #80	; 0x50
 801778a:	46bd      	mov	sp, r7
 801778c:	bdb0      	pop	{r4, r5, r7, pc}
 801778e:	bf00      	nop
 8017790:	20005fcc 	.word	0x20005fcc
 8017794:	20005fac 	.word	0x20005fac
 8017798:	20005fd6 	.word	0x20005fd6
 801779c:	08022c74 	.word	0x08022c74
 80177a0:	0802301c 	.word	0x0802301c
 80177a4:	08022cc0 	.word	0x08022cc0

080177a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80177a8:	b480      	push	{r7}
 80177aa:	b083      	sub	sp, #12
 80177ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80177ae:	4b15      	ldr	r3, [pc, #84]	; (8017804 <tcp_get_next_optbyte+0x5c>)
 80177b0:	881b      	ldrh	r3, [r3, #0]
 80177b2:	1c5a      	adds	r2, r3, #1
 80177b4:	b291      	uxth	r1, r2
 80177b6:	4a13      	ldr	r2, [pc, #76]	; (8017804 <tcp_get_next_optbyte+0x5c>)
 80177b8:	8011      	strh	r1, [r2, #0]
 80177ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80177bc:	4b12      	ldr	r3, [pc, #72]	; (8017808 <tcp_get_next_optbyte+0x60>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d004      	beq.n	80177ce <tcp_get_next_optbyte+0x26>
 80177c4:	4b11      	ldr	r3, [pc, #68]	; (801780c <tcp_get_next_optbyte+0x64>)
 80177c6:	881b      	ldrh	r3, [r3, #0]
 80177c8:	88fa      	ldrh	r2, [r7, #6]
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d208      	bcs.n	80177e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80177ce:	4b10      	ldr	r3, [pc, #64]	; (8017810 <tcp_get_next_optbyte+0x68>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	3314      	adds	r3, #20
 80177d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80177d6:	88fb      	ldrh	r3, [r7, #6]
 80177d8:	683a      	ldr	r2, [r7, #0]
 80177da:	4413      	add	r3, r2
 80177dc:	781b      	ldrb	r3, [r3, #0]
 80177de:	e00b      	b.n	80177f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80177e0:	88fb      	ldrh	r3, [r7, #6]
 80177e2:	b2da      	uxtb	r2, r3
 80177e4:	4b09      	ldr	r3, [pc, #36]	; (801780c <tcp_get_next_optbyte+0x64>)
 80177e6:	881b      	ldrh	r3, [r3, #0]
 80177e8:	b2db      	uxtb	r3, r3
 80177ea:	1ad3      	subs	r3, r2, r3
 80177ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80177ee:	4b06      	ldr	r3, [pc, #24]	; (8017808 <tcp_get_next_optbyte+0x60>)
 80177f0:	681a      	ldr	r2, [r3, #0]
 80177f2:	797b      	ldrb	r3, [r7, #5]
 80177f4:	4413      	add	r3, r2
 80177f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80177f8:	4618      	mov	r0, r3
 80177fa:	370c      	adds	r7, #12
 80177fc:	46bd      	mov	sp, r7
 80177fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017802:	4770      	bx	lr
 8017804:	20005fc8 	.word	0x20005fc8
 8017808:	20005fc4 	.word	0x20005fc4
 801780c:	20005fc2 	.word	0x20005fc2
 8017810:	20005fbc 	.word	0x20005fbc

08017814 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b084      	sub	sp, #16
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d106      	bne.n	8017830 <tcp_parseopt+0x1c>
 8017822:	4b32      	ldr	r3, [pc, #200]	; (80178ec <tcp_parseopt+0xd8>)
 8017824:	f240 727d 	movw	r2, #1917	; 0x77d
 8017828:	4931      	ldr	r1, [pc, #196]	; (80178f0 <tcp_parseopt+0xdc>)
 801782a:	4832      	ldr	r0, [pc, #200]	; (80178f4 <tcp_parseopt+0xe0>)
 801782c:	f008 f9c4 	bl	801fbb8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017830:	4b31      	ldr	r3, [pc, #196]	; (80178f8 <tcp_parseopt+0xe4>)
 8017832:	881b      	ldrh	r3, [r3, #0]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d055      	beq.n	80178e4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017838:	4b30      	ldr	r3, [pc, #192]	; (80178fc <tcp_parseopt+0xe8>)
 801783a:	2200      	movs	r2, #0
 801783c:	801a      	strh	r2, [r3, #0]
 801783e:	e045      	b.n	80178cc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8017840:	f7ff ffb2 	bl	80177a8 <tcp_get_next_optbyte>
 8017844:	4603      	mov	r3, r0
 8017846:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017848:	7bfb      	ldrb	r3, [r7, #15]
 801784a:	2b02      	cmp	r3, #2
 801784c:	d006      	beq.n	801785c <tcp_parseopt+0x48>
 801784e:	2b02      	cmp	r3, #2
 8017850:	dc2b      	bgt.n	80178aa <tcp_parseopt+0x96>
 8017852:	2b00      	cmp	r3, #0
 8017854:	d041      	beq.n	80178da <tcp_parseopt+0xc6>
 8017856:	2b01      	cmp	r3, #1
 8017858:	d127      	bne.n	80178aa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801785a:	e037      	b.n	80178cc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801785c:	f7ff ffa4 	bl	80177a8 <tcp_get_next_optbyte>
 8017860:	4603      	mov	r3, r0
 8017862:	2b04      	cmp	r3, #4
 8017864:	d13b      	bne.n	80178de <tcp_parseopt+0xca>
 8017866:	4b25      	ldr	r3, [pc, #148]	; (80178fc <tcp_parseopt+0xe8>)
 8017868:	881b      	ldrh	r3, [r3, #0]
 801786a:	3301      	adds	r3, #1
 801786c:	4a22      	ldr	r2, [pc, #136]	; (80178f8 <tcp_parseopt+0xe4>)
 801786e:	8812      	ldrh	r2, [r2, #0]
 8017870:	4293      	cmp	r3, r2
 8017872:	da34      	bge.n	80178de <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017874:	f7ff ff98 	bl	80177a8 <tcp_get_next_optbyte>
 8017878:	4603      	mov	r3, r0
 801787a:	b29b      	uxth	r3, r3
 801787c:	021b      	lsls	r3, r3, #8
 801787e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017880:	f7ff ff92 	bl	80177a8 <tcp_get_next_optbyte>
 8017884:	4603      	mov	r3, r0
 8017886:	b29a      	uxth	r2, r3
 8017888:	89bb      	ldrh	r3, [r7, #12]
 801788a:	4313      	orrs	r3, r2
 801788c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801788e:	89bb      	ldrh	r3, [r7, #12]
 8017890:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017894:	d804      	bhi.n	80178a0 <tcp_parseopt+0x8c>
 8017896:	89bb      	ldrh	r3, [r7, #12]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d001      	beq.n	80178a0 <tcp_parseopt+0x8c>
 801789c:	89ba      	ldrh	r2, [r7, #12]
 801789e:	e001      	b.n	80178a4 <tcp_parseopt+0x90>
 80178a0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80178a8:	e010      	b.n	80178cc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80178aa:	f7ff ff7d 	bl	80177a8 <tcp_get_next_optbyte>
 80178ae:	4603      	mov	r3, r0
 80178b0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80178b2:	7afb      	ldrb	r3, [r7, #11]
 80178b4:	2b01      	cmp	r3, #1
 80178b6:	d914      	bls.n	80178e2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80178b8:	7afb      	ldrb	r3, [r7, #11]
 80178ba:	b29a      	uxth	r2, r3
 80178bc:	4b0f      	ldr	r3, [pc, #60]	; (80178fc <tcp_parseopt+0xe8>)
 80178be:	881b      	ldrh	r3, [r3, #0]
 80178c0:	4413      	add	r3, r2
 80178c2:	b29b      	uxth	r3, r3
 80178c4:	3b02      	subs	r3, #2
 80178c6:	b29a      	uxth	r2, r3
 80178c8:	4b0c      	ldr	r3, [pc, #48]	; (80178fc <tcp_parseopt+0xe8>)
 80178ca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80178cc:	4b0b      	ldr	r3, [pc, #44]	; (80178fc <tcp_parseopt+0xe8>)
 80178ce:	881a      	ldrh	r2, [r3, #0]
 80178d0:	4b09      	ldr	r3, [pc, #36]	; (80178f8 <tcp_parseopt+0xe4>)
 80178d2:	881b      	ldrh	r3, [r3, #0]
 80178d4:	429a      	cmp	r2, r3
 80178d6:	d3b3      	bcc.n	8017840 <tcp_parseopt+0x2c>
 80178d8:	e004      	b.n	80178e4 <tcp_parseopt+0xd0>
          return;
 80178da:	bf00      	nop
 80178dc:	e002      	b.n	80178e4 <tcp_parseopt+0xd0>
            return;
 80178de:	bf00      	nop
 80178e0:	e000      	b.n	80178e4 <tcp_parseopt+0xd0>
            return;
 80178e2:	bf00      	nop
      }
    }
  }
}
 80178e4:	3710      	adds	r7, #16
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}
 80178ea:	bf00      	nop
 80178ec:	08022c74 	.word	0x08022c74
 80178f0:	080230d8 	.word	0x080230d8
 80178f4:	08022cc0 	.word	0x08022cc0
 80178f8:	20005fc0 	.word	0x20005fc0
 80178fc:	20005fc8 	.word	0x20005fc8

08017900 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017900:	b480      	push	{r7}
 8017902:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017904:	4b05      	ldr	r3, [pc, #20]	; (801791c <tcp_trigger_input_pcb_close+0x1c>)
 8017906:	781b      	ldrb	r3, [r3, #0]
 8017908:	f043 0310 	orr.w	r3, r3, #16
 801790c:	b2da      	uxtb	r2, r3
 801790e:	4b03      	ldr	r3, [pc, #12]	; (801791c <tcp_trigger_input_pcb_close+0x1c>)
 8017910:	701a      	strb	r2, [r3, #0]
}
 8017912:	bf00      	nop
 8017914:	46bd      	mov	sp, r7
 8017916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801791a:	4770      	bx	lr
 801791c:	20005fd9 	.word	0x20005fd9

08017920 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b084      	sub	sp, #16
 8017924:	af00      	add	r7, sp, #0
 8017926:	60f8      	str	r0, [r7, #12]
 8017928:	60b9      	str	r1, [r7, #8]
 801792a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d00a      	beq.n	8017948 <tcp_route+0x28>
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	7a1b      	ldrb	r3, [r3, #8]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d006      	beq.n	8017948 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	7a1b      	ldrb	r3, [r3, #8]
 801793e:	4618      	mov	r0, r3
 8017940:	f7fb f842 	bl	80129c8 <netif_get_by_index>
 8017944:	4603      	mov	r3, r0
 8017946:	e003      	b.n	8017950 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f005 fca9 	bl	801d2a0 <ip4_route>
 801794e:	4603      	mov	r3, r0
  }
}
 8017950:	4618      	mov	r0, r3
 8017952:	3710      	adds	r7, #16
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}

08017958 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017958:	b590      	push	{r4, r7, lr}
 801795a:	b087      	sub	sp, #28
 801795c:	af00      	add	r7, sp, #0
 801795e:	60f8      	str	r0, [r7, #12]
 8017960:	60b9      	str	r1, [r7, #8]
 8017962:	603b      	str	r3, [r7, #0]
 8017964:	4613      	mov	r3, r2
 8017966:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d105      	bne.n	801797a <tcp_create_segment+0x22>
 801796e:	4b44      	ldr	r3, [pc, #272]	; (8017a80 <tcp_create_segment+0x128>)
 8017970:	22a3      	movs	r2, #163	; 0xa3
 8017972:	4944      	ldr	r1, [pc, #272]	; (8017a84 <tcp_create_segment+0x12c>)
 8017974:	4844      	ldr	r0, [pc, #272]	; (8017a88 <tcp_create_segment+0x130>)
 8017976:	f008 f91f 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801797a:	68bb      	ldr	r3, [r7, #8]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d105      	bne.n	801798c <tcp_create_segment+0x34>
 8017980:	4b3f      	ldr	r3, [pc, #252]	; (8017a80 <tcp_create_segment+0x128>)
 8017982:	22a4      	movs	r2, #164	; 0xa4
 8017984:	4941      	ldr	r1, [pc, #260]	; (8017a8c <tcp_create_segment+0x134>)
 8017986:	4840      	ldr	r0, [pc, #256]	; (8017a88 <tcp_create_segment+0x130>)
 8017988:	f008 f916 	bl	801fbb8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801798c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017990:	009b      	lsls	r3, r3, #2
 8017992:	b2db      	uxtb	r3, r3
 8017994:	f003 0304 	and.w	r3, r3, #4
 8017998:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801799a:	2003      	movs	r0, #3
 801799c:	f7fa fca0 	bl	80122e0 <memp_malloc>
 80179a0:	6138      	str	r0, [r7, #16]
 80179a2:	693b      	ldr	r3, [r7, #16]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d104      	bne.n	80179b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80179a8:	68b8      	ldr	r0, [r7, #8]
 80179aa:	f7fb fb9b 	bl	80130e4 <pbuf_free>
    return NULL;
 80179ae:	2300      	movs	r3, #0
 80179b0:	e061      	b.n	8017a76 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80179b2:	693b      	ldr	r3, [r7, #16]
 80179b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80179b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80179ba:	693b      	ldr	r3, [r7, #16]
 80179bc:	2200      	movs	r2, #0
 80179be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80179c0:	693b      	ldr	r3, [r7, #16]
 80179c2:	68ba      	ldr	r2, [r7, #8]
 80179c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80179c6:	68bb      	ldr	r3, [r7, #8]
 80179c8:	891a      	ldrh	r2, [r3, #8]
 80179ca:	7dfb      	ldrb	r3, [r7, #23]
 80179cc:	b29b      	uxth	r3, r3
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d205      	bcs.n	80179de <tcp_create_segment+0x86>
 80179d2:	4b2b      	ldr	r3, [pc, #172]	; (8017a80 <tcp_create_segment+0x128>)
 80179d4:	22b0      	movs	r2, #176	; 0xb0
 80179d6:	492e      	ldr	r1, [pc, #184]	; (8017a90 <tcp_create_segment+0x138>)
 80179d8:	482b      	ldr	r0, [pc, #172]	; (8017a88 <tcp_create_segment+0x130>)
 80179da:	f008 f8ed 	bl	801fbb8 <iprintf>
  seg->len = p->tot_len - optlen;
 80179de:	68bb      	ldr	r3, [r7, #8]
 80179e0:	891a      	ldrh	r2, [r3, #8]
 80179e2:	7dfb      	ldrb	r3, [r7, #23]
 80179e4:	b29b      	uxth	r3, r3
 80179e6:	1ad3      	subs	r3, r2, r3
 80179e8:	b29a      	uxth	r2, r3
 80179ea:	693b      	ldr	r3, [r7, #16]
 80179ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80179ee:	2114      	movs	r1, #20
 80179f0:	68b8      	ldr	r0, [r7, #8]
 80179f2:	f7fb fae1 	bl	8012fb8 <pbuf_add_header>
 80179f6:	4603      	mov	r3, r0
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d004      	beq.n	8017a06 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80179fc:	6938      	ldr	r0, [r7, #16]
 80179fe:	f7fd f804 	bl	8014a0a <tcp_seg_free>
    return NULL;
 8017a02:	2300      	movs	r3, #0
 8017a04:	e037      	b.n	8017a76 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017a06:	693b      	ldr	r3, [r7, #16]
 8017a08:	685b      	ldr	r3, [r3, #4]
 8017a0a:	685a      	ldr	r2, [r3, #4]
 8017a0c:	693b      	ldr	r3, [r7, #16]
 8017a0e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	8ada      	ldrh	r2, [r3, #22]
 8017a14:	693b      	ldr	r3, [r7, #16]
 8017a16:	68dc      	ldr	r4, [r3, #12]
 8017a18:	4610      	mov	r0, r2
 8017a1a:	f7f9 ffab 	bl	8011974 <lwip_htons>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	8b1a      	ldrh	r2, [r3, #24]
 8017a26:	693b      	ldr	r3, [r7, #16]
 8017a28:	68dc      	ldr	r4, [r3, #12]
 8017a2a:	4610      	mov	r0, r2
 8017a2c:	f7f9 ffa2 	bl	8011974 <lwip_htons>
 8017a30:	4603      	mov	r3, r0
 8017a32:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017a34:	693b      	ldr	r3, [r7, #16]
 8017a36:	68dc      	ldr	r4, [r3, #12]
 8017a38:	6838      	ldr	r0, [r7, #0]
 8017a3a:	f7f9 ffb0 	bl	801199e <lwip_htonl>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8017a42:	7dfb      	ldrb	r3, [r7, #23]
 8017a44:	089b      	lsrs	r3, r3, #2
 8017a46:	b2db      	uxtb	r3, r3
 8017a48:	b29b      	uxth	r3, r3
 8017a4a:	3305      	adds	r3, #5
 8017a4c:	b29b      	uxth	r3, r3
 8017a4e:	031b      	lsls	r3, r3, #12
 8017a50:	b29a      	uxth	r2, r3
 8017a52:	79fb      	ldrb	r3, [r7, #7]
 8017a54:	b29b      	uxth	r3, r3
 8017a56:	4313      	orrs	r3, r2
 8017a58:	b29a      	uxth	r2, r3
 8017a5a:	693b      	ldr	r3, [r7, #16]
 8017a5c:	68dc      	ldr	r4, [r3, #12]
 8017a5e:	4610      	mov	r0, r2
 8017a60:	f7f9 ff88 	bl	8011974 <lwip_htons>
 8017a64:	4603      	mov	r3, r0
 8017a66:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017a68:	693b      	ldr	r3, [r7, #16]
 8017a6a:	68db      	ldr	r3, [r3, #12]
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	749a      	strb	r2, [r3, #18]
 8017a70:	2200      	movs	r2, #0
 8017a72:	74da      	strb	r2, [r3, #19]
  return seg;
 8017a74:	693b      	ldr	r3, [r7, #16]
}
 8017a76:	4618      	mov	r0, r3
 8017a78:	371c      	adds	r7, #28
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd90      	pop	{r4, r7, pc}
 8017a7e:	bf00      	nop
 8017a80:	080230f4 	.word	0x080230f4
 8017a84:	08023128 	.word	0x08023128
 8017a88:	08023148 	.word	0x08023148
 8017a8c:	08023170 	.word	0x08023170
 8017a90:	08023194 	.word	0x08023194

08017a94 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b086      	sub	sp, #24
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	607b      	str	r3, [r7, #4]
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	73fb      	strb	r3, [r7, #15]
 8017aa0:	460b      	mov	r3, r1
 8017aa2:	81bb      	strh	r3, [r7, #12]
 8017aa4:	4613      	mov	r3, r2
 8017aa6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017aa8:	89bb      	ldrh	r3, [r7, #12]
 8017aaa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d105      	bne.n	8017abe <tcp_pbuf_prealloc+0x2a>
 8017ab2:	4b30      	ldr	r3, [pc, #192]	; (8017b74 <tcp_pbuf_prealloc+0xe0>)
 8017ab4:	22e8      	movs	r2, #232	; 0xe8
 8017ab6:	4930      	ldr	r1, [pc, #192]	; (8017b78 <tcp_pbuf_prealloc+0xe4>)
 8017ab8:	4830      	ldr	r0, [pc, #192]	; (8017b7c <tcp_pbuf_prealloc+0xe8>)
 8017aba:	f008 f87d 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017abe:	6a3b      	ldr	r3, [r7, #32]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d105      	bne.n	8017ad0 <tcp_pbuf_prealloc+0x3c>
 8017ac4:	4b2b      	ldr	r3, [pc, #172]	; (8017b74 <tcp_pbuf_prealloc+0xe0>)
 8017ac6:	22e9      	movs	r2, #233	; 0xe9
 8017ac8:	492d      	ldr	r1, [pc, #180]	; (8017b80 <tcp_pbuf_prealloc+0xec>)
 8017aca:	482c      	ldr	r0, [pc, #176]	; (8017b7c <tcp_pbuf_prealloc+0xe8>)
 8017acc:	f008 f874 	bl	801fbb8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017ad0:	89ba      	ldrh	r2, [r7, #12]
 8017ad2:	897b      	ldrh	r3, [r7, #10]
 8017ad4:	429a      	cmp	r2, r3
 8017ad6:	d221      	bcs.n	8017b1c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017ad8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017adc:	f003 0302 	and.w	r3, r3, #2
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d111      	bne.n	8017b08 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017ae4:	6a3b      	ldr	r3, [r7, #32]
 8017ae6:	8b5b      	ldrh	r3, [r3, #26]
 8017ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d115      	bne.n	8017b1c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017af0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d007      	beq.n	8017b08 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8017af8:	6a3b      	ldr	r3, [r7, #32]
 8017afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d103      	bne.n	8017b08 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017b00:	6a3b      	ldr	r3, [r7, #32]
 8017b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d009      	beq.n	8017b1c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017b08:	89bb      	ldrh	r3, [r7, #12]
 8017b0a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8017b0e:	f023 0203 	bic.w	r2, r3, #3
 8017b12:	897b      	ldrh	r3, [r7, #10]
 8017b14:	4293      	cmp	r3, r2
 8017b16:	bf28      	it	cs
 8017b18:	4613      	movcs	r3, r2
 8017b1a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017b1c:	8af9      	ldrh	r1, [r7, #22]
 8017b1e:	7bfb      	ldrb	r3, [r7, #15]
 8017b20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b24:	4618      	mov	r0, r3
 8017b26:	f7fa fff9 	bl	8012b1c <pbuf_alloc>
 8017b2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017b2c:	693b      	ldr	r3, [r7, #16]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d101      	bne.n	8017b36 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017b32:	2300      	movs	r3, #0
 8017b34:	e019      	b.n	8017b6a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017b36:	693b      	ldr	r3, [r7, #16]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d006      	beq.n	8017b4c <tcp_pbuf_prealloc+0xb8>
 8017b3e:	4b0d      	ldr	r3, [pc, #52]	; (8017b74 <tcp_pbuf_prealloc+0xe0>)
 8017b40:	f240 120b 	movw	r2, #267	; 0x10b
 8017b44:	490f      	ldr	r1, [pc, #60]	; (8017b84 <tcp_pbuf_prealloc+0xf0>)
 8017b46:	480d      	ldr	r0, [pc, #52]	; (8017b7c <tcp_pbuf_prealloc+0xe8>)
 8017b48:	f008 f836 	bl	801fbb8 <iprintf>
  *oversize = p->len - length;
 8017b4c:	693b      	ldr	r3, [r7, #16]
 8017b4e:	895a      	ldrh	r2, [r3, #10]
 8017b50:	89bb      	ldrh	r3, [r7, #12]
 8017b52:	1ad3      	subs	r3, r2, r3
 8017b54:	b29a      	uxth	r2, r3
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017b5a:	693b      	ldr	r3, [r7, #16]
 8017b5c:	89ba      	ldrh	r2, [r7, #12]
 8017b5e:	811a      	strh	r2, [r3, #8]
 8017b60:	693b      	ldr	r3, [r7, #16]
 8017b62:	891a      	ldrh	r2, [r3, #8]
 8017b64:	693b      	ldr	r3, [r7, #16]
 8017b66:	815a      	strh	r2, [r3, #10]
  return p;
 8017b68:	693b      	ldr	r3, [r7, #16]
}
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	3718      	adds	r7, #24
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}
 8017b72:	bf00      	nop
 8017b74:	080230f4 	.word	0x080230f4
 8017b78:	080231ac 	.word	0x080231ac
 8017b7c:	08023148 	.word	0x08023148
 8017b80:	080231d0 	.word	0x080231d0
 8017b84:	080231f0 	.word	0x080231f0

08017b88 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b082      	sub	sp, #8
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
 8017b90:	460b      	mov	r3, r1
 8017b92:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d106      	bne.n	8017ba8 <tcp_write_checks+0x20>
 8017b9a:	4b33      	ldr	r3, [pc, #204]	; (8017c68 <tcp_write_checks+0xe0>)
 8017b9c:	f240 1233 	movw	r2, #307	; 0x133
 8017ba0:	4932      	ldr	r1, [pc, #200]	; (8017c6c <tcp_write_checks+0xe4>)
 8017ba2:	4833      	ldr	r0, [pc, #204]	; (8017c70 <tcp_write_checks+0xe8>)
 8017ba4:	f008 f808 	bl	801fbb8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	7d1b      	ldrb	r3, [r3, #20]
 8017bac:	2b04      	cmp	r3, #4
 8017bae:	d00e      	beq.n	8017bce <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017bb4:	2b07      	cmp	r3, #7
 8017bb6:	d00a      	beq.n	8017bce <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017bbc:	2b02      	cmp	r3, #2
 8017bbe:	d006      	beq.n	8017bce <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017bc4:	2b03      	cmp	r3, #3
 8017bc6:	d002      	beq.n	8017bce <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017bc8:	f06f 030a 	mvn.w	r3, #10
 8017bcc:	e048      	b.n	8017c60 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017bce:	887b      	ldrh	r3, [r7, #2]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d101      	bne.n	8017bd8 <tcp_write_checks+0x50>
    return ERR_OK;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	e043      	b.n	8017c60 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017bde:	887a      	ldrh	r2, [r7, #2]
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d909      	bls.n	8017bf8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	8b5b      	ldrh	r3, [r3, #26]
 8017be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bec:	b29a      	uxth	r2, r3
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8017bf6:	e033      	b.n	8017c60 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017bfe:	2b08      	cmp	r3, #8
 8017c00:	d909      	bls.n	8017c16 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	8b5b      	ldrh	r3, [r3, #26]
 8017c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c0a:	b29a      	uxth	r2, r3
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017c10:	f04f 33ff 	mov.w	r3, #4294967295
 8017c14:	e024      	b.n	8017c60 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d00f      	beq.n	8017c40 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d11a      	bne.n	8017c5e <tcp_write_checks+0xd6>
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d116      	bne.n	8017c5e <tcp_write_checks+0xd6>
 8017c30:	4b0d      	ldr	r3, [pc, #52]	; (8017c68 <tcp_write_checks+0xe0>)
 8017c32:	f240 1255 	movw	r2, #341	; 0x155
 8017c36:	490f      	ldr	r1, [pc, #60]	; (8017c74 <tcp_write_checks+0xec>)
 8017c38:	480d      	ldr	r0, [pc, #52]	; (8017c70 <tcp_write_checks+0xe8>)
 8017c3a:	f007 ffbd 	bl	801fbb8 <iprintf>
 8017c3e:	e00e      	b.n	8017c5e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d103      	bne.n	8017c50 <tcp_write_checks+0xc8>
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d006      	beq.n	8017c5e <tcp_write_checks+0xd6>
 8017c50:	4b05      	ldr	r3, [pc, #20]	; (8017c68 <tcp_write_checks+0xe0>)
 8017c52:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8017c56:	4908      	ldr	r1, [pc, #32]	; (8017c78 <tcp_write_checks+0xf0>)
 8017c58:	4805      	ldr	r0, [pc, #20]	; (8017c70 <tcp_write_checks+0xe8>)
 8017c5a:	f007 ffad 	bl	801fbb8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8017c5e:	2300      	movs	r3, #0
}
 8017c60:	4618      	mov	r0, r3
 8017c62:	3708      	adds	r7, #8
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}
 8017c68:	080230f4 	.word	0x080230f4
 8017c6c:	08023204 	.word	0x08023204
 8017c70:	08023148 	.word	0x08023148
 8017c74:	08023224 	.word	0x08023224
 8017c78:	08023260 	.word	0x08023260

08017c7c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017c7c:	b590      	push	{r4, r7, lr}
 8017c7e:	b09b      	sub	sp, #108	; 0x6c
 8017c80:	af04      	add	r7, sp, #16
 8017c82:	60f8      	str	r0, [r7, #12]
 8017c84:	60b9      	str	r1, [r7, #8]
 8017c86:	4611      	mov	r1, r2
 8017c88:	461a      	mov	r2, r3
 8017c8a:	460b      	mov	r3, r1
 8017c8c:	80fb      	strh	r3, [r7, #6]
 8017c8e:	4613      	mov	r3, r2
 8017c90:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017c92:	2300      	movs	r3, #0
 8017c94:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017c96:	2300      	movs	r3, #0
 8017c98:	653b      	str	r3, [r7, #80]	; 0x50
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017cac:	2300      	movs	r3, #0
 8017cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8017cba:	2300      	movs	r3, #0
 8017cbc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d109      	bne.n	8017cd8 <tcp_write+0x5c>
 8017cc4:	4ba4      	ldr	r3, [pc, #656]	; (8017f58 <tcp_write+0x2dc>)
 8017cc6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8017cca:	49a4      	ldr	r1, [pc, #656]	; (8017f5c <tcp_write+0x2e0>)
 8017ccc:	48a4      	ldr	r0, [pc, #656]	; (8017f60 <tcp_write+0x2e4>)
 8017cce:	f007 ff73 	bl	801fbb8 <iprintf>
 8017cd2:	f06f 030f 	mvn.w	r3, #15
 8017cd6:	e32a      	b.n	801832e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017cde:	085b      	lsrs	r3, r3, #1
 8017ce0:	b29a      	uxth	r2, r3
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	bf28      	it	cs
 8017cea:	4613      	movcs	r3, r2
 8017cec:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d102      	bne.n	8017cfa <tcp_write+0x7e>
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017cf8:	e000      	b.n	8017cfc <tcp_write+0x80>
 8017cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017cfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017cfe:	68bb      	ldr	r3, [r7, #8]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d109      	bne.n	8017d18 <tcp_write+0x9c>
 8017d04:	4b94      	ldr	r3, [pc, #592]	; (8017f58 <tcp_write+0x2dc>)
 8017d06:	f240 12ad 	movw	r2, #429	; 0x1ad
 8017d0a:	4996      	ldr	r1, [pc, #600]	; (8017f64 <tcp_write+0x2e8>)
 8017d0c:	4894      	ldr	r0, [pc, #592]	; (8017f60 <tcp_write+0x2e4>)
 8017d0e:	f007 ff53 	bl	801fbb8 <iprintf>
 8017d12:	f06f 030f 	mvn.w	r3, #15
 8017d16:	e30a      	b.n	801832e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017d18:	88fb      	ldrh	r3, [r7, #6]
 8017d1a:	4619      	mov	r1, r3
 8017d1c:	68f8      	ldr	r0, [r7, #12]
 8017d1e:	f7ff ff33 	bl	8017b88 <tcp_write_checks>
 8017d22:	4603      	mov	r3, r0
 8017d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017d28:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d002      	beq.n	8017d36 <tcp_write+0xba>
    return err;
 8017d30:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017d34:	e2fb      	b.n	801832e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017d40:	2300      	movs	r3, #0
 8017d42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	f000 80f6 	beq.w	8017f3c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d54:	653b      	str	r3, [r7, #80]	; 0x50
 8017d56:	e002      	b.n	8017d5e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d1f8      	bne.n	8017d58 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d68:	7a9b      	ldrb	r3, [r3, #10]
 8017d6a:	009b      	lsls	r3, r3, #2
 8017d6c:	b29b      	uxth	r3, r3
 8017d6e:	f003 0304 	and.w	r3, r3, #4
 8017d72:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017d74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d78:	891b      	ldrh	r3, [r3, #8]
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	8c3b      	ldrh	r3, [r7, #32]
 8017d7e:	440b      	add	r3, r1
 8017d80:	429a      	cmp	r2, r3
 8017d82:	da06      	bge.n	8017d92 <tcp_write+0x116>
 8017d84:	4b74      	ldr	r3, [pc, #464]	; (8017f58 <tcp_write+0x2dc>)
 8017d86:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017d8a:	4977      	ldr	r1, [pc, #476]	; (8017f68 <tcp_write+0x2ec>)
 8017d8c:	4874      	ldr	r0, [pc, #464]	; (8017f60 <tcp_write+0x2e4>)
 8017d8e:	f007 ff13 	bl	801fbb8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d94:	891a      	ldrh	r2, [r3, #8]
 8017d96:	8c3b      	ldrh	r3, [r7, #32]
 8017d98:	4413      	add	r3, r2
 8017d9a:	b29b      	uxth	r3, r3
 8017d9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017d9e:	1ad3      	subs	r3, r2, r3
 8017da0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017da8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017daa:	8a7b      	ldrh	r3, [r7, #18]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d026      	beq.n	8017dfe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017db0:	8a7b      	ldrh	r3, [r7, #18]
 8017db2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d206      	bcs.n	8017dc6 <tcp_write+0x14a>
 8017db8:	4b67      	ldr	r3, [pc, #412]	; (8017f58 <tcp_write+0x2dc>)
 8017dba:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017dbe:	496b      	ldr	r1, [pc, #428]	; (8017f6c <tcp_write+0x2f0>)
 8017dc0:	4867      	ldr	r0, [pc, #412]	; (8017f60 <tcp_write+0x2e4>)
 8017dc2:	f007 fef9 	bl	801fbb8 <iprintf>
      seg = last_unsent;
 8017dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017dca:	8a7b      	ldrh	r3, [r7, #18]
 8017dcc:	88fa      	ldrh	r2, [r7, #6]
 8017dce:	4293      	cmp	r3, r2
 8017dd0:	bf28      	it	cs
 8017dd2:	4613      	movcs	r3, r2
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017dd8:	4293      	cmp	r3, r2
 8017dda:	bf28      	it	cs
 8017ddc:	4613      	movcs	r3, r2
 8017dde:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017de0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017de4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017de6:	4413      	add	r3, r2
 8017de8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017dec:	8a7a      	ldrh	r2, [r7, #18]
 8017dee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017df0:	1ad3      	subs	r3, r2, r3
 8017df2:	b29b      	uxth	r3, r3
 8017df4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017df6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017df8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017dfa:	1ad3      	subs	r3, r2, r3
 8017dfc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017dfe:	8a7b      	ldrh	r3, [r7, #18]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d00b      	beq.n	8017e1c <tcp_write+0x1a0>
 8017e04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e08:	88fb      	ldrh	r3, [r7, #6]
 8017e0a:	429a      	cmp	r2, r3
 8017e0c:	d006      	beq.n	8017e1c <tcp_write+0x1a0>
 8017e0e:	4b52      	ldr	r3, [pc, #328]	; (8017f58 <tcp_write+0x2dc>)
 8017e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e14:	4956      	ldr	r1, [pc, #344]	; (8017f70 <tcp_write+0x2f4>)
 8017e16:	4852      	ldr	r0, [pc, #328]	; (8017f60 <tcp_write+0x2e4>)
 8017e18:	f007 fece 	bl	801fbb8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017e1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e20:	88fb      	ldrh	r3, [r7, #6]
 8017e22:	429a      	cmp	r2, r3
 8017e24:	f080 8167 	bcs.w	80180f6 <tcp_write+0x47a>
 8017e28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	f000 8163 	beq.w	80180f6 <tcp_write+0x47a>
 8017e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e32:	891b      	ldrh	r3, [r3, #8]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	f000 815e 	beq.w	80180f6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017e3a:	88fa      	ldrh	r2, [r7, #6]
 8017e3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017e40:	1ad2      	subs	r2, r2, r3
 8017e42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e44:	4293      	cmp	r3, r2
 8017e46:	bfa8      	it	ge
 8017e48:	4613      	movge	r3, r2
 8017e4a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e4e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017e50:	797b      	ldrb	r3, [r7, #5]
 8017e52:	f003 0301 	and.w	r3, r3, #1
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d027      	beq.n	8017eaa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017e5a:	f107 0012 	add.w	r0, r7, #18
 8017e5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017e60:	8bf9      	ldrh	r1, [r7, #30]
 8017e62:	2301      	movs	r3, #1
 8017e64:	9302      	str	r3, [sp, #8]
 8017e66:	797b      	ldrb	r3, [r7, #5]
 8017e68:	9301      	str	r3, [sp, #4]
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	9300      	str	r3, [sp, #0]
 8017e6e:	4603      	mov	r3, r0
 8017e70:	2000      	movs	r0, #0
 8017e72:	f7ff fe0f 	bl	8017a94 <tcp_pbuf_prealloc>
 8017e76:	6578      	str	r0, [r7, #84]	; 0x54
 8017e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	f000 8225 	beq.w	80182ca <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e82:	6858      	ldr	r0, [r3, #4]
 8017e84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017e88:	68ba      	ldr	r2, [r7, #8]
 8017e8a:	4413      	add	r3, r2
 8017e8c:	8bfa      	ldrh	r2, [r7, #30]
 8017e8e:	4619      	mov	r1, r3
 8017e90:	f007 fe21 	bl	801fad6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017e94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017e96:	f7fb f9b3 	bl	8013200 <pbuf_clen>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	461a      	mov	r2, r3
 8017e9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017ea2:	4413      	add	r3, r2
 8017ea4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017ea8:	e041      	b.n	8017f2e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017eac:	685b      	ldr	r3, [r3, #4]
 8017eae:	637b      	str	r3, [r7, #52]	; 0x34
 8017eb0:	e002      	b.n	8017eb8 <tcp_write+0x23c>
 8017eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8017eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d1f8      	bne.n	8017eb2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ec2:	7b1b      	ldrb	r3, [r3, #12]
 8017ec4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d115      	bne.n	8017ef8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ece:	685b      	ldr	r3, [r3, #4]
 8017ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ed2:	8952      	ldrh	r2, [r2, #10]
 8017ed4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017ed6:	68ba      	ldr	r2, [r7, #8]
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	d10d      	bne.n	8017ef8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017edc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d006      	beq.n	8017ef2 <tcp_write+0x276>
 8017ee4:	4b1c      	ldr	r3, [pc, #112]	; (8017f58 <tcp_write+0x2dc>)
 8017ee6:	f240 2231 	movw	r2, #561	; 0x231
 8017eea:	4922      	ldr	r1, [pc, #136]	; (8017f74 <tcp_write+0x2f8>)
 8017eec:	481c      	ldr	r0, [pc, #112]	; (8017f60 <tcp_write+0x2e4>)
 8017eee:	f007 fe63 	bl	801fbb8 <iprintf>
          extendlen = seglen;
 8017ef2:	8bfb      	ldrh	r3, [r7, #30]
 8017ef4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017ef6:	e01a      	b.n	8017f2e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017ef8:	8bfb      	ldrh	r3, [r7, #30]
 8017efa:	2201      	movs	r2, #1
 8017efc:	4619      	mov	r1, r3
 8017efe:	2000      	movs	r0, #0
 8017f00:	f7fa fe0c 	bl	8012b1c <pbuf_alloc>
 8017f04:	6578      	str	r0, [r7, #84]	; 0x54
 8017f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	f000 81e0 	beq.w	80182ce <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017f0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f12:	68ba      	ldr	r2, [r7, #8]
 8017f14:	441a      	add	r2, r3
 8017f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f18:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017f1a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017f1c:	f7fb f970 	bl	8013200 <pbuf_clen>
 8017f20:	4603      	mov	r3, r0
 8017f22:	461a      	mov	r2, r3
 8017f24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017f28:	4413      	add	r3, r2
 8017f2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017f2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f32:	8bfb      	ldrh	r3, [r7, #30]
 8017f34:	4413      	add	r3, r2
 8017f36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017f3a:	e0dc      	b.n	80180f6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	f000 80d7 	beq.w	80180f6 <tcp_write+0x47a>
 8017f48:	4b03      	ldr	r3, [pc, #12]	; (8017f58 <tcp_write+0x2dc>)
 8017f4a:	f240 224a 	movw	r2, #586	; 0x24a
 8017f4e:	490a      	ldr	r1, [pc, #40]	; (8017f78 <tcp_write+0x2fc>)
 8017f50:	4803      	ldr	r0, [pc, #12]	; (8017f60 <tcp_write+0x2e4>)
 8017f52:	f007 fe31 	bl	801fbb8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017f56:	e0ce      	b.n	80180f6 <tcp_write+0x47a>
 8017f58:	080230f4 	.word	0x080230f4
 8017f5c:	08023294 	.word	0x08023294
 8017f60:	08023148 	.word	0x08023148
 8017f64:	080232ac 	.word	0x080232ac
 8017f68:	080232e0 	.word	0x080232e0
 8017f6c:	080232f8 	.word	0x080232f8
 8017f70:	08023318 	.word	0x08023318
 8017f74:	08023338 	.word	0x08023338
 8017f78:	08023364 	.word	0x08023364
    struct pbuf *p;
    u16_t left = len - pos;
 8017f7c:	88fa      	ldrh	r2, [r7, #6]
 8017f7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f82:	1ad3      	subs	r3, r2, r3
 8017f84:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017f86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017f8a:	b29b      	uxth	r3, r3
 8017f8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017f8e:	1ad3      	subs	r3, r2, r3
 8017f90:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017f92:	8b7a      	ldrh	r2, [r7, #26]
 8017f94:	8bbb      	ldrh	r3, [r7, #28]
 8017f96:	4293      	cmp	r3, r2
 8017f98:	bf28      	it	cs
 8017f9a:	4613      	movcs	r3, r2
 8017f9c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017f9e:	797b      	ldrb	r3, [r7, #5]
 8017fa0:	f003 0301 	and.w	r3, r3, #1
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d036      	beq.n	8018016 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017fa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017fac:	b29a      	uxth	r2, r3
 8017fae:	8b3b      	ldrh	r3, [r7, #24]
 8017fb0:	4413      	add	r3, r2
 8017fb2:	b299      	uxth	r1, r3
 8017fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	bf0c      	ite	eq
 8017fba:	2301      	moveq	r3, #1
 8017fbc:	2300      	movne	r3, #0
 8017fbe:	b2db      	uxtb	r3, r3
 8017fc0:	f107 0012 	add.w	r0, r7, #18
 8017fc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017fc6:	9302      	str	r3, [sp, #8]
 8017fc8:	797b      	ldrb	r3, [r7, #5]
 8017fca:	9301      	str	r3, [sp, #4]
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	9300      	str	r3, [sp, #0]
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	2036      	movs	r0, #54	; 0x36
 8017fd4:	f7ff fd5e 	bl	8017a94 <tcp_pbuf_prealloc>
 8017fd8:	6338      	str	r0, [r7, #48]	; 0x30
 8017fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	f000 8178 	beq.w	80182d2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe4:	895b      	ldrh	r3, [r3, #10]
 8017fe6:	8b3a      	ldrh	r2, [r7, #24]
 8017fe8:	429a      	cmp	r2, r3
 8017fea:	d906      	bls.n	8017ffa <tcp_write+0x37e>
 8017fec:	4b8c      	ldr	r3, [pc, #560]	; (8018220 <tcp_write+0x5a4>)
 8017fee:	f240 2266 	movw	r2, #614	; 0x266
 8017ff2:	498c      	ldr	r1, [pc, #560]	; (8018224 <tcp_write+0x5a8>)
 8017ff4:	488c      	ldr	r0, [pc, #560]	; (8018228 <tcp_write+0x5ac>)
 8017ff6:	f007 fddf 	bl	801fbb8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ffc:	685a      	ldr	r2, [r3, #4]
 8017ffe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018002:	18d0      	adds	r0, r2, r3
 8018004:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018008:	68ba      	ldr	r2, [r7, #8]
 801800a:	4413      	add	r3, r2
 801800c:	8b3a      	ldrh	r2, [r7, #24]
 801800e:	4619      	mov	r1, r3
 8018010:	f007 fd61 	bl	801fad6 <memcpy>
 8018014:	e02f      	b.n	8018076 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018016:	8a7b      	ldrh	r3, [r7, #18]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d006      	beq.n	801802a <tcp_write+0x3ae>
 801801c:	4b80      	ldr	r3, [pc, #512]	; (8018220 <tcp_write+0x5a4>)
 801801e:	f240 2271 	movw	r2, #625	; 0x271
 8018022:	4982      	ldr	r1, [pc, #520]	; (801822c <tcp_write+0x5b0>)
 8018024:	4880      	ldr	r0, [pc, #512]	; (8018228 <tcp_write+0x5ac>)
 8018026:	f007 fdc7 	bl	801fbb8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801802a:	8b3b      	ldrh	r3, [r7, #24]
 801802c:	2201      	movs	r2, #1
 801802e:	4619      	mov	r1, r3
 8018030:	2036      	movs	r0, #54	; 0x36
 8018032:	f7fa fd73 	bl	8012b1c <pbuf_alloc>
 8018036:	6178      	str	r0, [r7, #20]
 8018038:	697b      	ldr	r3, [r7, #20]
 801803a:	2b00      	cmp	r3, #0
 801803c:	f000 814b 	beq.w	80182d6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018044:	68ba      	ldr	r2, [r7, #8]
 8018046:	441a      	add	r2, r3
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801804c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018050:	b29b      	uxth	r3, r3
 8018052:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018056:	4619      	mov	r1, r3
 8018058:	2036      	movs	r0, #54	; 0x36
 801805a:	f7fa fd5f 	bl	8012b1c <pbuf_alloc>
 801805e:	6338      	str	r0, [r7, #48]	; 0x30
 8018060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018062:	2b00      	cmp	r3, #0
 8018064:	d103      	bne.n	801806e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8018066:	6978      	ldr	r0, [r7, #20]
 8018068:	f7fb f83c 	bl	80130e4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801806c:	e136      	b.n	80182dc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801806e:	6979      	ldr	r1, [r7, #20]
 8018070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018072:	f7fb f905 	bl	8013280 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8018076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018078:	f7fb f8c2 	bl	8013200 <pbuf_clen>
 801807c:	4603      	mov	r3, r0
 801807e:	461a      	mov	r2, r3
 8018080:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018084:	4413      	add	r3, r2
 8018086:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801808a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801808e:	2b09      	cmp	r3, #9
 8018090:	d903      	bls.n	801809a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8018092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018094:	f7fb f826 	bl	80130e4 <pbuf_free>
      goto memerr;
 8018098:	e120      	b.n	80182dc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801809e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80180a2:	441a      	add	r2, r3
 80180a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180a8:	9300      	str	r3, [sp, #0]
 80180aa:	4613      	mov	r3, r2
 80180ac:	2200      	movs	r2, #0
 80180ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80180b0:	68f8      	ldr	r0, [r7, #12]
 80180b2:	f7ff fc51 	bl	8017958 <tcp_create_segment>
 80180b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80180b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	f000 810d 	beq.w	80182da <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80180c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d102      	bne.n	80180cc <tcp_write+0x450>
      queue = seg;
 80180c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180c8:	647b      	str	r3, [r7, #68]	; 0x44
 80180ca:	e00c      	b.n	80180e6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80180cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d106      	bne.n	80180e0 <tcp_write+0x464>
 80180d2:	4b53      	ldr	r3, [pc, #332]	; (8018220 <tcp_write+0x5a4>)
 80180d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80180d8:	4955      	ldr	r1, [pc, #340]	; (8018230 <tcp_write+0x5b4>)
 80180da:	4853      	ldr	r0, [pc, #332]	; (8018228 <tcp_write+0x5ac>)
 80180dc:	f007 fd6c 	bl	801fbb8 <iprintf>
      prev_seg->next = seg;
 80180e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80180e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80180e4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80180e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180e8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80180ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80180ee:	8b3b      	ldrh	r3, [r7, #24]
 80180f0:	4413      	add	r3, r2
 80180f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80180f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80180fa:	88fb      	ldrh	r3, [r7, #6]
 80180fc:	429a      	cmp	r2, r3
 80180fe:	f4ff af3d 	bcc.w	8017f7c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8018102:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018104:	2b00      	cmp	r3, #0
 8018106:	d02c      	beq.n	8018162 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801810a:	685b      	ldr	r3, [r3, #4]
 801810c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801810e:	e01e      	b.n	801814e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8018110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018112:	891a      	ldrh	r2, [r3, #8]
 8018114:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018116:	4413      	add	r3, r2
 8018118:	b29a      	uxth	r2, r3
 801811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d110      	bne.n	8018148 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018128:	685b      	ldr	r3, [r3, #4]
 801812a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801812c:	8952      	ldrh	r2, [r2, #10]
 801812e:	4413      	add	r3, r2
 8018130:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018132:	68b9      	ldr	r1, [r7, #8]
 8018134:	4618      	mov	r0, r3
 8018136:	f007 fcce 	bl	801fad6 <memcpy>
        p->len += oversize_used;
 801813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801813c:	895a      	ldrh	r2, [r3, #10]
 801813e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018140:	4413      	add	r3, r2
 8018142:	b29a      	uxth	r2, r3
 8018144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018146:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018150:	2b00      	cmp	r3, #0
 8018152:	d1dd      	bne.n	8018110 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8018154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018156:	891a      	ldrh	r2, [r3, #8]
 8018158:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801815a:	4413      	add	r3, r2
 801815c:	b29a      	uxth	r2, r3
 801815e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018160:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8018162:	8a7a      	ldrh	r2, [r7, #18]
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801816a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801816c:	2b00      	cmp	r3, #0
 801816e:	d018      	beq.n	80181a2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018172:	2b00      	cmp	r3, #0
 8018174:	d106      	bne.n	8018184 <tcp_write+0x508>
 8018176:	4b2a      	ldr	r3, [pc, #168]	; (8018220 <tcp_write+0x5a4>)
 8018178:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801817c:	492d      	ldr	r1, [pc, #180]	; (8018234 <tcp_write+0x5b8>)
 801817e:	482a      	ldr	r0, [pc, #168]	; (8018228 <tcp_write+0x5ac>)
 8018180:	f007 fd1a 	bl	801fbb8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018186:	685b      	ldr	r3, [r3, #4]
 8018188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801818a:	4618      	mov	r0, r3
 801818c:	f7fb f878 	bl	8013280 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018192:	891a      	ldrh	r2, [r3, #8]
 8018194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018196:	891b      	ldrh	r3, [r3, #8]
 8018198:	4413      	add	r3, r2
 801819a:	b29a      	uxth	r2, r3
 801819c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801819e:	811a      	strh	r2, [r3, #8]
 80181a0:	e037      	b.n	8018212 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80181a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d034      	beq.n	8018212 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80181a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d003      	beq.n	80181b6 <tcp_write+0x53a>
 80181ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181b0:	685b      	ldr	r3, [r3, #4]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d106      	bne.n	80181c4 <tcp_write+0x548>
 80181b6:	4b1a      	ldr	r3, [pc, #104]	; (8018220 <tcp_write+0x5a4>)
 80181b8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80181bc:	491e      	ldr	r1, [pc, #120]	; (8018238 <tcp_write+0x5bc>)
 80181be:	481a      	ldr	r0, [pc, #104]	; (8018228 <tcp_write+0x5ac>)
 80181c0:	f007 fcfa 	bl	801fbb8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80181c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181c6:	685b      	ldr	r3, [r3, #4]
 80181c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80181ca:	e009      	b.n	80181e0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80181cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ce:	891a      	ldrh	r2, [r3, #8]
 80181d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181d2:	4413      	add	r3, r2
 80181d4:	b29a      	uxth	r2, r3
 80181d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80181da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	62bb      	str	r3, [r7, #40]	; 0x28
 80181e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d1f1      	bne.n	80181cc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80181e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ea:	891a      	ldrh	r2, [r3, #8]
 80181ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181ee:	4413      	add	r3, r2
 80181f0:	b29a      	uxth	r2, r3
 80181f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80181f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f8:	895a      	ldrh	r2, [r3, #10]
 80181fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181fc:	4413      	add	r3, r2
 80181fe:	b29a      	uxth	r2, r3
 8018200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018202:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8018204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018206:	891a      	ldrh	r2, [r3, #8]
 8018208:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801820a:	4413      	add	r3, r2
 801820c:	b29a      	uxth	r2, r3
 801820e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018210:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8018212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018214:	2b00      	cmp	r3, #0
 8018216:	d111      	bne.n	801823c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801821c:	66da      	str	r2, [r3, #108]	; 0x6c
 801821e:	e010      	b.n	8018242 <tcp_write+0x5c6>
 8018220:	080230f4 	.word	0x080230f4
 8018224:	08023394 	.word	0x08023394
 8018228:	08023148 	.word	0x08023148
 801822c:	080233d4 	.word	0x080233d4
 8018230:	080233e4 	.word	0x080233e4
 8018234:	080233f8 	.word	0x080233f8
 8018238:	08023430 	.word	0x08023430
  } else {
    last_unsent->next = queue;
 801823c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801823e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018240:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018246:	88fb      	ldrh	r3, [r7, #6]
 8018248:	441a      	add	r2, r3
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018254:	88fb      	ldrh	r3, [r7, #6]
 8018256:	1ad3      	subs	r3, r2, r3
 8018258:	b29a      	uxth	r2, r3
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018266:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018270:	2b00      	cmp	r3, #0
 8018272:	d00e      	beq.n	8018292 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018278:	2b00      	cmp	r3, #0
 801827a:	d10a      	bne.n	8018292 <tcp_write+0x616>
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018280:	2b00      	cmp	r3, #0
 8018282:	d106      	bne.n	8018292 <tcp_write+0x616>
 8018284:	4b2c      	ldr	r3, [pc, #176]	; (8018338 <tcp_write+0x6bc>)
 8018286:	f240 3212 	movw	r2, #786	; 0x312
 801828a:	492c      	ldr	r1, [pc, #176]	; (801833c <tcp_write+0x6c0>)
 801828c:	482c      	ldr	r0, [pc, #176]	; (8018340 <tcp_write+0x6c4>)
 801828e:	f007 fc93 	bl	801fbb8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8018292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018294:	2b00      	cmp	r3, #0
 8018296:	d016      	beq.n	80182c6 <tcp_write+0x64a>
 8018298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801829a:	68db      	ldr	r3, [r3, #12]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d012      	beq.n	80182c6 <tcp_write+0x64a>
 80182a0:	797b      	ldrb	r3, [r7, #5]
 80182a2:	f003 0302 	and.w	r3, r3, #2
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d10d      	bne.n	80182c6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80182aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182ac:	68db      	ldr	r3, [r3, #12]
 80182ae:	899b      	ldrh	r3, [r3, #12]
 80182b0:	b29c      	uxth	r4, r3
 80182b2:	2008      	movs	r0, #8
 80182b4:	f7f9 fb5e 	bl	8011974 <lwip_htons>
 80182b8:	4603      	mov	r3, r0
 80182ba:	461a      	mov	r2, r3
 80182bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182be:	68db      	ldr	r3, [r3, #12]
 80182c0:	4322      	orrs	r2, r4
 80182c2:	b292      	uxth	r2, r2
 80182c4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80182c6:	2300      	movs	r3, #0
 80182c8:	e031      	b.n	801832e <tcp_write+0x6b2>
          goto memerr;
 80182ca:	bf00      	nop
 80182cc:	e006      	b.n	80182dc <tcp_write+0x660>
            goto memerr;
 80182ce:	bf00      	nop
 80182d0:	e004      	b.n	80182dc <tcp_write+0x660>
        goto memerr;
 80182d2:	bf00      	nop
 80182d4:	e002      	b.n	80182dc <tcp_write+0x660>
        goto memerr;
 80182d6:	bf00      	nop
 80182d8:	e000      	b.n	80182dc <tcp_write+0x660>
      goto memerr;
 80182da:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	8b5b      	ldrh	r3, [r3, #26]
 80182e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182e4:	b29a      	uxth	r2, r3
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80182ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d002      	beq.n	80182f6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80182f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80182f2:	f7fa fef7 	bl	80130e4 <pbuf_free>
  }
  if (queue != NULL) {
 80182f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d002      	beq.n	8018302 <tcp_write+0x686>
    tcp_segs_free(queue);
 80182fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80182fe:	f7fc fb6f 	bl	80149e0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018308:	2b00      	cmp	r3, #0
 801830a:	d00e      	beq.n	801832a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018310:	2b00      	cmp	r3, #0
 8018312:	d10a      	bne.n	801832a <tcp_write+0x6ae>
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018318:	2b00      	cmp	r3, #0
 801831a:	d106      	bne.n	801832a <tcp_write+0x6ae>
 801831c:	4b06      	ldr	r3, [pc, #24]	; (8018338 <tcp_write+0x6bc>)
 801831e:	f240 3227 	movw	r2, #807	; 0x327
 8018322:	4906      	ldr	r1, [pc, #24]	; (801833c <tcp_write+0x6c0>)
 8018324:	4806      	ldr	r0, [pc, #24]	; (8018340 <tcp_write+0x6c4>)
 8018326:	f007 fc47 	bl	801fbb8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801832a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801832e:	4618      	mov	r0, r3
 8018330:	375c      	adds	r7, #92	; 0x5c
 8018332:	46bd      	mov	sp, r7
 8018334:	bd90      	pop	{r4, r7, pc}
 8018336:	bf00      	nop
 8018338:	080230f4 	.word	0x080230f4
 801833c:	08023468 	.word	0x08023468
 8018340:	08023148 	.word	0x08023148

08018344 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018344:	b590      	push	{r4, r7, lr}
 8018346:	b08b      	sub	sp, #44	; 0x2c
 8018348:	af02      	add	r7, sp, #8
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	460b      	mov	r3, r1
 801834e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018350:	2300      	movs	r3, #0
 8018352:	61fb      	str	r3, [r7, #28]
 8018354:	2300      	movs	r3, #0
 8018356:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018358:	2300      	movs	r3, #0
 801835a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d106      	bne.n	8018370 <tcp_split_unsent_seg+0x2c>
 8018362:	4b95      	ldr	r3, [pc, #596]	; (80185b8 <tcp_split_unsent_seg+0x274>)
 8018364:	f240 324b 	movw	r2, #843	; 0x34b
 8018368:	4994      	ldr	r1, [pc, #592]	; (80185bc <tcp_split_unsent_seg+0x278>)
 801836a:	4895      	ldr	r0, [pc, #596]	; (80185c0 <tcp_split_unsent_seg+0x27c>)
 801836c:	f007 fc24 	bl	801fbb8 <iprintf>

  useg = pcb->unsent;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018374:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018376:	697b      	ldr	r3, [r7, #20]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d102      	bne.n	8018382 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801837c:	f04f 33ff 	mov.w	r3, #4294967295
 8018380:	e116      	b.n	80185b0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018382:	887b      	ldrh	r3, [r7, #2]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d109      	bne.n	801839c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018388:	4b8b      	ldr	r3, [pc, #556]	; (80185b8 <tcp_split_unsent_seg+0x274>)
 801838a:	f240 3253 	movw	r2, #851	; 0x353
 801838e:	498d      	ldr	r1, [pc, #564]	; (80185c4 <tcp_split_unsent_seg+0x280>)
 8018390:	488b      	ldr	r0, [pc, #556]	; (80185c0 <tcp_split_unsent_seg+0x27c>)
 8018392:	f007 fc11 	bl	801fbb8 <iprintf>
    return ERR_VAL;
 8018396:	f06f 0305 	mvn.w	r3, #5
 801839a:	e109      	b.n	80185b0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801839c:	697b      	ldr	r3, [r7, #20]
 801839e:	891b      	ldrh	r3, [r3, #8]
 80183a0:	887a      	ldrh	r2, [r7, #2]
 80183a2:	429a      	cmp	r2, r3
 80183a4:	d301      	bcc.n	80183aa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80183a6:	2300      	movs	r3, #0
 80183a8:	e102      	b.n	80185b0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80183ae:	887a      	ldrh	r2, [r7, #2]
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d906      	bls.n	80183c2 <tcp_split_unsent_seg+0x7e>
 80183b4:	4b80      	ldr	r3, [pc, #512]	; (80185b8 <tcp_split_unsent_seg+0x274>)
 80183b6:	f240 325b 	movw	r2, #859	; 0x35b
 80183ba:	4983      	ldr	r1, [pc, #524]	; (80185c8 <tcp_split_unsent_seg+0x284>)
 80183bc:	4880      	ldr	r0, [pc, #512]	; (80185c0 <tcp_split_unsent_seg+0x27c>)
 80183be:	f007 fbfb 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80183c2:	697b      	ldr	r3, [r7, #20]
 80183c4:	891b      	ldrh	r3, [r3, #8]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d106      	bne.n	80183d8 <tcp_split_unsent_seg+0x94>
 80183ca:	4b7b      	ldr	r3, [pc, #492]	; (80185b8 <tcp_split_unsent_seg+0x274>)
 80183cc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80183d0:	497e      	ldr	r1, [pc, #504]	; (80185cc <tcp_split_unsent_seg+0x288>)
 80183d2:	487b      	ldr	r0, [pc, #492]	; (80185c0 <tcp_split_unsent_seg+0x27c>)
 80183d4:	f007 fbf0 	bl	801fbb8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80183d8:	697b      	ldr	r3, [r7, #20]
 80183da:	7a9b      	ldrb	r3, [r3, #10]
 80183dc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80183de:	7bfb      	ldrb	r3, [r7, #15]
 80183e0:	009b      	lsls	r3, r3, #2
 80183e2:	b2db      	uxtb	r3, r3
 80183e4:	f003 0304 	and.w	r3, r3, #4
 80183e8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80183ea:	697b      	ldr	r3, [r7, #20]
 80183ec:	891a      	ldrh	r2, [r3, #8]
 80183ee:	887b      	ldrh	r3, [r7, #2]
 80183f0:	1ad3      	subs	r3, r2, r3
 80183f2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80183f4:	7bbb      	ldrb	r3, [r7, #14]
 80183f6:	b29a      	uxth	r2, r3
 80183f8:	89bb      	ldrh	r3, [r7, #12]
 80183fa:	4413      	add	r3, r2
 80183fc:	b29b      	uxth	r3, r3
 80183fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018402:	4619      	mov	r1, r3
 8018404:	2036      	movs	r0, #54	; 0x36
 8018406:	f7fa fb89 	bl	8012b1c <pbuf_alloc>
 801840a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	2b00      	cmp	r3, #0
 8018410:	f000 80b7 	beq.w	8018582 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018414:	697b      	ldr	r3, [r7, #20]
 8018416:	685b      	ldr	r3, [r3, #4]
 8018418:	891a      	ldrh	r2, [r3, #8]
 801841a:	697b      	ldr	r3, [r7, #20]
 801841c:	891b      	ldrh	r3, [r3, #8]
 801841e:	1ad3      	subs	r3, r2, r3
 8018420:	b29a      	uxth	r2, r3
 8018422:	887b      	ldrh	r3, [r7, #2]
 8018424:	4413      	add	r3, r2
 8018426:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018428:	697b      	ldr	r3, [r7, #20]
 801842a:	6858      	ldr	r0, [r3, #4]
 801842c:	693b      	ldr	r3, [r7, #16]
 801842e:	685a      	ldr	r2, [r3, #4]
 8018430:	7bbb      	ldrb	r3, [r7, #14]
 8018432:	18d1      	adds	r1, r2, r3
 8018434:	897b      	ldrh	r3, [r7, #10]
 8018436:	89ba      	ldrh	r2, [r7, #12]
 8018438:	f7fb f85a 	bl	80134f0 <pbuf_copy_partial>
 801843c:	4603      	mov	r3, r0
 801843e:	461a      	mov	r2, r3
 8018440:	89bb      	ldrh	r3, [r7, #12]
 8018442:	4293      	cmp	r3, r2
 8018444:	f040 809f 	bne.w	8018586 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018448:	697b      	ldr	r3, [r7, #20]
 801844a:	68db      	ldr	r3, [r3, #12]
 801844c:	899b      	ldrh	r3, [r3, #12]
 801844e:	b29b      	uxth	r3, r3
 8018450:	4618      	mov	r0, r3
 8018452:	f7f9 fa8f 	bl	8011974 <lwip_htons>
 8018456:	4603      	mov	r3, r0
 8018458:	b2db      	uxtb	r3, r3
 801845a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801845e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018460:	2300      	movs	r3, #0
 8018462:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018464:	7efb      	ldrb	r3, [r7, #27]
 8018466:	f003 0308 	and.w	r3, r3, #8
 801846a:	2b00      	cmp	r3, #0
 801846c:	d007      	beq.n	801847e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801846e:	7efb      	ldrb	r3, [r7, #27]
 8018470:	f023 0308 	bic.w	r3, r3, #8
 8018474:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018476:	7ebb      	ldrb	r3, [r7, #26]
 8018478:	f043 0308 	orr.w	r3, r3, #8
 801847c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801847e:	7efb      	ldrb	r3, [r7, #27]
 8018480:	f003 0301 	and.w	r3, r3, #1
 8018484:	2b00      	cmp	r3, #0
 8018486:	d007      	beq.n	8018498 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018488:	7efb      	ldrb	r3, [r7, #27]
 801848a:	f023 0301 	bic.w	r3, r3, #1
 801848e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018490:	7ebb      	ldrb	r3, [r7, #26]
 8018492:	f043 0301 	orr.w	r3, r3, #1
 8018496:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	68db      	ldr	r3, [r3, #12]
 801849c:	685b      	ldr	r3, [r3, #4]
 801849e:	4618      	mov	r0, r3
 80184a0:	f7f9 fa7d 	bl	801199e <lwip_htonl>
 80184a4:	4602      	mov	r2, r0
 80184a6:	887b      	ldrh	r3, [r7, #2]
 80184a8:	18d1      	adds	r1, r2, r3
 80184aa:	7eba      	ldrb	r2, [r7, #26]
 80184ac:	7bfb      	ldrb	r3, [r7, #15]
 80184ae:	9300      	str	r3, [sp, #0]
 80184b0:	460b      	mov	r3, r1
 80184b2:	6939      	ldr	r1, [r7, #16]
 80184b4:	6878      	ldr	r0, [r7, #4]
 80184b6:	f7ff fa4f 	bl	8017958 <tcp_create_segment>
 80184ba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80184bc:	69fb      	ldr	r3, [r7, #28]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d063      	beq.n	801858a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80184c2:	697b      	ldr	r3, [r7, #20]
 80184c4:	685b      	ldr	r3, [r3, #4]
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7fa fe9a 	bl	8013200 <pbuf_clen>
 80184cc:	4603      	mov	r3, r0
 80184ce:	461a      	mov	r2, r3
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80184d6:	1a9b      	subs	r3, r3, r2
 80184d8:	b29a      	uxth	r2, r3
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80184e0:	697b      	ldr	r3, [r7, #20]
 80184e2:	6858      	ldr	r0, [r3, #4]
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	891a      	ldrh	r2, [r3, #8]
 80184ea:	89bb      	ldrh	r3, [r7, #12]
 80184ec:	1ad3      	subs	r3, r2, r3
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	4619      	mov	r1, r3
 80184f2:	f7fa fc71 	bl	8012dd8 <pbuf_realloc>
  useg->len -= remainder;
 80184f6:	697b      	ldr	r3, [r7, #20]
 80184f8:	891a      	ldrh	r2, [r3, #8]
 80184fa:	89bb      	ldrh	r3, [r7, #12]
 80184fc:	1ad3      	subs	r3, r2, r3
 80184fe:	b29a      	uxth	r2, r3
 8018500:	697b      	ldr	r3, [r7, #20]
 8018502:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018504:	697b      	ldr	r3, [r7, #20]
 8018506:	68db      	ldr	r3, [r3, #12]
 8018508:	899b      	ldrh	r3, [r3, #12]
 801850a:	b29c      	uxth	r4, r3
 801850c:	7efb      	ldrb	r3, [r7, #27]
 801850e:	b29b      	uxth	r3, r3
 8018510:	4618      	mov	r0, r3
 8018512:	f7f9 fa2f 	bl	8011974 <lwip_htons>
 8018516:	4603      	mov	r3, r0
 8018518:	461a      	mov	r2, r3
 801851a:	697b      	ldr	r3, [r7, #20]
 801851c:	68db      	ldr	r3, [r3, #12]
 801851e:	4322      	orrs	r2, r4
 8018520:	b292      	uxth	r2, r2
 8018522:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018524:	697b      	ldr	r3, [r7, #20]
 8018526:	685b      	ldr	r3, [r3, #4]
 8018528:	4618      	mov	r0, r3
 801852a:	f7fa fe69 	bl	8013200 <pbuf_clen>
 801852e:	4603      	mov	r3, r0
 8018530:	461a      	mov	r2, r3
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018538:	4413      	add	r3, r2
 801853a:	b29a      	uxth	r2, r3
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018542:	69fb      	ldr	r3, [r7, #28]
 8018544:	685b      	ldr	r3, [r3, #4]
 8018546:	4618      	mov	r0, r3
 8018548:	f7fa fe5a 	bl	8013200 <pbuf_clen>
 801854c:	4603      	mov	r3, r0
 801854e:	461a      	mov	r2, r3
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018556:	4413      	add	r3, r2
 8018558:	b29a      	uxth	r2, r3
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018560:	697b      	ldr	r3, [r7, #20]
 8018562:	681a      	ldr	r2, [r3, #0]
 8018564:	69fb      	ldr	r3, [r7, #28]
 8018566:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018568:	697b      	ldr	r3, [r7, #20]
 801856a:	69fa      	ldr	r2, [r7, #28]
 801856c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801856e:	69fb      	ldr	r3, [r7, #28]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d103      	bne.n	801857e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	2200      	movs	r2, #0
 801857a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801857e:	2300      	movs	r3, #0
 8018580:	e016      	b.n	80185b0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018582:	bf00      	nop
 8018584:	e002      	b.n	801858c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018586:	bf00      	nop
 8018588:	e000      	b.n	801858c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801858a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801858c:	69fb      	ldr	r3, [r7, #28]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d006      	beq.n	80185a0 <tcp_split_unsent_seg+0x25c>
 8018592:	4b09      	ldr	r3, [pc, #36]	; (80185b8 <tcp_split_unsent_seg+0x274>)
 8018594:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018598:	490d      	ldr	r1, [pc, #52]	; (80185d0 <tcp_split_unsent_seg+0x28c>)
 801859a:	4809      	ldr	r0, [pc, #36]	; (80185c0 <tcp_split_unsent_seg+0x27c>)
 801859c:	f007 fb0c 	bl	801fbb8 <iprintf>
  if (p != NULL) {
 80185a0:	693b      	ldr	r3, [r7, #16]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d002      	beq.n	80185ac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80185a6:	6938      	ldr	r0, [r7, #16]
 80185a8:	f7fa fd9c 	bl	80130e4 <pbuf_free>
  }

  return ERR_MEM;
 80185ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3724      	adds	r7, #36	; 0x24
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd90      	pop	{r4, r7, pc}
 80185b8:	080230f4 	.word	0x080230f4
 80185bc:	08023488 	.word	0x08023488
 80185c0:	08023148 	.word	0x08023148
 80185c4:	080234ac 	.word	0x080234ac
 80185c8:	080234d0 	.word	0x080234d0
 80185cc:	080234e0 	.word	0x080234e0
 80185d0:	080234f0 	.word	0x080234f0

080185d4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80185d4:	b590      	push	{r4, r7, lr}
 80185d6:	b085      	sub	sp, #20
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d106      	bne.n	80185f0 <tcp_send_fin+0x1c>
 80185e2:	4b21      	ldr	r3, [pc, #132]	; (8018668 <tcp_send_fin+0x94>)
 80185e4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80185e8:	4920      	ldr	r1, [pc, #128]	; (801866c <tcp_send_fin+0x98>)
 80185ea:	4821      	ldr	r0, [pc, #132]	; (8018670 <tcp_send_fin+0x9c>)
 80185ec:	f007 fae4 	bl	801fbb8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d02e      	beq.n	8018656 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185fc:	60fb      	str	r3, [r7, #12]
 80185fe:	e002      	b.n	8018606 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d1f8      	bne.n	8018600 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	68db      	ldr	r3, [r3, #12]
 8018612:	899b      	ldrh	r3, [r3, #12]
 8018614:	b29b      	uxth	r3, r3
 8018616:	4618      	mov	r0, r3
 8018618:	f7f9 f9ac 	bl	8011974 <lwip_htons>
 801861c:	4603      	mov	r3, r0
 801861e:	b2db      	uxtb	r3, r3
 8018620:	f003 0307 	and.w	r3, r3, #7
 8018624:	2b00      	cmp	r3, #0
 8018626:	d116      	bne.n	8018656 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	68db      	ldr	r3, [r3, #12]
 801862c:	899b      	ldrh	r3, [r3, #12]
 801862e:	b29c      	uxth	r4, r3
 8018630:	2001      	movs	r0, #1
 8018632:	f7f9 f99f 	bl	8011974 <lwip_htons>
 8018636:	4603      	mov	r3, r0
 8018638:	461a      	mov	r2, r3
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	68db      	ldr	r3, [r3, #12]
 801863e:	4322      	orrs	r2, r4
 8018640:	b292      	uxth	r2, r2
 8018642:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	8b5b      	ldrh	r3, [r3, #26]
 8018648:	f043 0320 	orr.w	r3, r3, #32
 801864c:	b29a      	uxth	r2, r3
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018652:	2300      	movs	r3, #0
 8018654:	e004      	b.n	8018660 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018656:	2101      	movs	r1, #1
 8018658:	6878      	ldr	r0, [r7, #4]
 801865a:	f000 f80b 	bl	8018674 <tcp_enqueue_flags>
 801865e:	4603      	mov	r3, r0
}
 8018660:	4618      	mov	r0, r3
 8018662:	3714      	adds	r7, #20
 8018664:	46bd      	mov	sp, r7
 8018666:	bd90      	pop	{r4, r7, pc}
 8018668:	080230f4 	.word	0x080230f4
 801866c:	080234fc 	.word	0x080234fc
 8018670:	08023148 	.word	0x08023148

08018674 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b08a      	sub	sp, #40	; 0x28
 8018678:	af02      	add	r7, sp, #8
 801867a:	6078      	str	r0, [r7, #4]
 801867c:	460b      	mov	r3, r1
 801867e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018680:	2300      	movs	r3, #0
 8018682:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018684:	2300      	movs	r3, #0
 8018686:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018688:	78fb      	ldrb	r3, [r7, #3]
 801868a:	f003 0303 	and.w	r3, r3, #3
 801868e:	2b00      	cmp	r3, #0
 8018690:	d106      	bne.n	80186a0 <tcp_enqueue_flags+0x2c>
 8018692:	4b67      	ldr	r3, [pc, #412]	; (8018830 <tcp_enqueue_flags+0x1bc>)
 8018694:	f240 4211 	movw	r2, #1041	; 0x411
 8018698:	4966      	ldr	r1, [pc, #408]	; (8018834 <tcp_enqueue_flags+0x1c0>)
 801869a:	4867      	ldr	r0, [pc, #412]	; (8018838 <tcp_enqueue_flags+0x1c4>)
 801869c:	f007 fa8c 	bl	801fbb8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d106      	bne.n	80186b4 <tcp_enqueue_flags+0x40>
 80186a6:	4b62      	ldr	r3, [pc, #392]	; (8018830 <tcp_enqueue_flags+0x1bc>)
 80186a8:	f240 4213 	movw	r2, #1043	; 0x413
 80186ac:	4963      	ldr	r1, [pc, #396]	; (801883c <tcp_enqueue_flags+0x1c8>)
 80186ae:	4862      	ldr	r0, [pc, #392]	; (8018838 <tcp_enqueue_flags+0x1c4>)
 80186b0:	f007 fa82 	bl	801fbb8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80186b4:	78fb      	ldrb	r3, [r7, #3]
 80186b6:	f003 0302 	and.w	r3, r3, #2
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d001      	beq.n	80186c2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80186be:	2301      	movs	r3, #1
 80186c0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80186c2:	7ffb      	ldrb	r3, [r7, #31]
 80186c4:	009b      	lsls	r3, r3, #2
 80186c6:	b2db      	uxtb	r3, r3
 80186c8:	f003 0304 	and.w	r3, r3, #4
 80186cc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80186ce:	7dfb      	ldrb	r3, [r7, #23]
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80186d6:	4619      	mov	r1, r3
 80186d8:	2036      	movs	r0, #54	; 0x36
 80186da:	f7fa fa1f 	bl	8012b1c <pbuf_alloc>
 80186de:	6138      	str	r0, [r7, #16]
 80186e0:	693b      	ldr	r3, [r7, #16]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d109      	bne.n	80186fa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	8b5b      	ldrh	r3, [r3, #26]
 80186ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80186ee:	b29a      	uxth	r2, r3
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80186f4:	f04f 33ff 	mov.w	r3, #4294967295
 80186f8:	e095      	b.n	8018826 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80186fa:	693b      	ldr	r3, [r7, #16]
 80186fc:	895a      	ldrh	r2, [r3, #10]
 80186fe:	7dfb      	ldrb	r3, [r7, #23]
 8018700:	b29b      	uxth	r3, r3
 8018702:	429a      	cmp	r2, r3
 8018704:	d206      	bcs.n	8018714 <tcp_enqueue_flags+0xa0>
 8018706:	4b4a      	ldr	r3, [pc, #296]	; (8018830 <tcp_enqueue_flags+0x1bc>)
 8018708:	f240 4239 	movw	r2, #1081	; 0x439
 801870c:	494c      	ldr	r1, [pc, #304]	; (8018840 <tcp_enqueue_flags+0x1cc>)
 801870e:	484a      	ldr	r0, [pc, #296]	; (8018838 <tcp_enqueue_flags+0x1c4>)
 8018710:	f007 fa52 	bl	801fbb8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018718:	78fa      	ldrb	r2, [r7, #3]
 801871a:	7ffb      	ldrb	r3, [r7, #31]
 801871c:	9300      	str	r3, [sp, #0]
 801871e:	460b      	mov	r3, r1
 8018720:	6939      	ldr	r1, [r7, #16]
 8018722:	6878      	ldr	r0, [r7, #4]
 8018724:	f7ff f918 	bl	8017958 <tcp_create_segment>
 8018728:	60f8      	str	r0, [r7, #12]
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d109      	bne.n	8018744 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	8b5b      	ldrh	r3, [r3, #26]
 8018734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018738:	b29a      	uxth	r2, r3
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801873e:	f04f 33ff 	mov.w	r3, #4294967295
 8018742:	e070      	b.n	8018826 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	68db      	ldr	r3, [r3, #12]
 8018748:	f003 0303 	and.w	r3, r3, #3
 801874c:	2b00      	cmp	r3, #0
 801874e:	d006      	beq.n	801875e <tcp_enqueue_flags+0xea>
 8018750:	4b37      	ldr	r3, [pc, #220]	; (8018830 <tcp_enqueue_flags+0x1bc>)
 8018752:	f240 4242 	movw	r2, #1090	; 0x442
 8018756:	493b      	ldr	r1, [pc, #236]	; (8018844 <tcp_enqueue_flags+0x1d0>)
 8018758:	4837      	ldr	r0, [pc, #220]	; (8018838 <tcp_enqueue_flags+0x1c4>)
 801875a:	f007 fa2d 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	891b      	ldrh	r3, [r3, #8]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d006      	beq.n	8018774 <tcp_enqueue_flags+0x100>
 8018766:	4b32      	ldr	r3, [pc, #200]	; (8018830 <tcp_enqueue_flags+0x1bc>)
 8018768:	f240 4243 	movw	r2, #1091	; 0x443
 801876c:	4936      	ldr	r1, [pc, #216]	; (8018848 <tcp_enqueue_flags+0x1d4>)
 801876e:	4832      	ldr	r0, [pc, #200]	; (8018838 <tcp_enqueue_flags+0x1c4>)
 8018770:	f007 fa22 	bl	801fbb8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018778:	2b00      	cmp	r3, #0
 801877a:	d103      	bne.n	8018784 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	68fa      	ldr	r2, [r7, #12]
 8018780:	66da      	str	r2, [r3, #108]	; 0x6c
 8018782:	e00d      	b.n	80187a0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018788:	61bb      	str	r3, [r7, #24]
 801878a:	e002      	b.n	8018792 <tcp_enqueue_flags+0x11e>
 801878c:	69bb      	ldr	r3, [r7, #24]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	61bb      	str	r3, [r7, #24]
 8018792:	69bb      	ldr	r3, [r7, #24]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d1f8      	bne.n	801878c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801879a:	69bb      	ldr	r3, [r7, #24]
 801879c:	68fa      	ldr	r2, [r7, #12]
 801879e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	2200      	movs	r2, #0
 80187a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80187a8:	78fb      	ldrb	r3, [r7, #3]
 80187aa:	f003 0302 	and.w	r3, r3, #2
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d104      	bne.n	80187bc <tcp_enqueue_flags+0x148>
 80187b2:	78fb      	ldrb	r3, [r7, #3]
 80187b4:	f003 0301 	and.w	r3, r3, #1
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d004      	beq.n	80187c6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187c0:	1c5a      	adds	r2, r3, #1
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80187c6:	78fb      	ldrb	r3, [r7, #3]
 80187c8:	f003 0301 	and.w	r3, r3, #1
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d006      	beq.n	80187de <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	8b5b      	ldrh	r3, [r3, #26]
 80187d4:	f043 0320 	orr.w	r3, r3, #32
 80187d8:	b29a      	uxth	r2, r3
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	685b      	ldr	r3, [r3, #4]
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7fa fd0c 	bl	8013200 <pbuf_clen>
 80187e8:	4603      	mov	r3, r0
 80187ea:	461a      	mov	r2, r3
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80187f2:	4413      	add	r3, r2
 80187f4:	b29a      	uxth	r2, r3
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018802:	2b00      	cmp	r3, #0
 8018804:	d00e      	beq.n	8018824 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801880a:	2b00      	cmp	r3, #0
 801880c:	d10a      	bne.n	8018824 <tcp_enqueue_flags+0x1b0>
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018812:	2b00      	cmp	r3, #0
 8018814:	d106      	bne.n	8018824 <tcp_enqueue_flags+0x1b0>
 8018816:	4b06      	ldr	r3, [pc, #24]	; (8018830 <tcp_enqueue_flags+0x1bc>)
 8018818:	f240 4265 	movw	r2, #1125	; 0x465
 801881c:	490b      	ldr	r1, [pc, #44]	; (801884c <tcp_enqueue_flags+0x1d8>)
 801881e:	4806      	ldr	r0, [pc, #24]	; (8018838 <tcp_enqueue_flags+0x1c4>)
 8018820:	f007 f9ca 	bl	801fbb8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018824:	2300      	movs	r3, #0
}
 8018826:	4618      	mov	r0, r3
 8018828:	3720      	adds	r7, #32
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}
 801882e:	bf00      	nop
 8018830:	080230f4 	.word	0x080230f4
 8018834:	08023518 	.word	0x08023518
 8018838:	08023148 	.word	0x08023148
 801883c:	08023570 	.word	0x08023570
 8018840:	08023590 	.word	0x08023590
 8018844:	080235cc 	.word	0x080235cc
 8018848:	080235e4 	.word	0x080235e4
 801884c:	08023610 	.word	0x08023610

08018850 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018850:	b5b0      	push	{r4, r5, r7, lr}
 8018852:	b08a      	sub	sp, #40	; 0x28
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d106      	bne.n	801886c <tcp_output+0x1c>
 801885e:	4b9e      	ldr	r3, [pc, #632]	; (8018ad8 <tcp_output+0x288>)
 8018860:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018864:	499d      	ldr	r1, [pc, #628]	; (8018adc <tcp_output+0x28c>)
 8018866:	489e      	ldr	r0, [pc, #632]	; (8018ae0 <tcp_output+0x290>)
 8018868:	f007 f9a6 	bl	801fbb8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	7d1b      	ldrb	r3, [r3, #20]
 8018870:	2b01      	cmp	r3, #1
 8018872:	d106      	bne.n	8018882 <tcp_output+0x32>
 8018874:	4b98      	ldr	r3, [pc, #608]	; (8018ad8 <tcp_output+0x288>)
 8018876:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801887a:	499a      	ldr	r1, [pc, #616]	; (8018ae4 <tcp_output+0x294>)
 801887c:	4898      	ldr	r0, [pc, #608]	; (8018ae0 <tcp_output+0x290>)
 801887e:	f007 f99b 	bl	801fbb8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018882:	4b99      	ldr	r3, [pc, #612]	; (8018ae8 <tcp_output+0x298>)
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	687a      	ldr	r2, [r7, #4]
 8018888:	429a      	cmp	r2, r3
 801888a:	d101      	bne.n	8018890 <tcp_output+0x40>
    return ERR_OK;
 801888c:	2300      	movs	r3, #0
 801888e:	e1ce      	b.n	8018c2e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801889c:	4293      	cmp	r3, r2
 801889e:	bf28      	it	cs
 80188a0:	4613      	movcs	r3, r2
 80188a2:	b29b      	uxth	r3, r3
 80188a4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80188ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d10b      	bne.n	80188ca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	8b5b      	ldrh	r3, [r3, #26]
 80188b6:	f003 0302 	and.w	r3, r3, #2
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	f000 81aa 	beq.w	8018c14 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80188c0:	6878      	ldr	r0, [r7, #4]
 80188c2:	f000 fdcb 	bl	801945c <tcp_send_empty_ack>
 80188c6:	4603      	mov	r3, r0
 80188c8:	e1b1      	b.n	8018c2e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80188ca:	6879      	ldr	r1, [r7, #4]
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	3304      	adds	r3, #4
 80188d0:	461a      	mov	r2, r3
 80188d2:	6878      	ldr	r0, [r7, #4]
 80188d4:	f7ff f824 	bl	8017920 <tcp_route>
 80188d8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80188da:	697b      	ldr	r3, [r7, #20]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d102      	bne.n	80188e6 <tcp_output+0x96>
    return ERR_RTE;
 80188e0:	f06f 0303 	mvn.w	r3, #3
 80188e4:	e1a3      	b.n	8018c2e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d003      	beq.n	80188f4 <tcp_output+0xa4>
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d111      	bne.n	8018918 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80188f4:	697b      	ldr	r3, [r7, #20]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d002      	beq.n	8018900 <tcp_output+0xb0>
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	3304      	adds	r3, #4
 80188fe:	e000      	b.n	8018902 <tcp_output+0xb2>
 8018900:	2300      	movs	r3, #0
 8018902:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018904:	693b      	ldr	r3, [r7, #16]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d102      	bne.n	8018910 <tcp_output+0xc0>
      return ERR_RTE;
 801890a:	f06f 0303 	mvn.w	r3, #3
 801890e:	e18e      	b.n	8018c2e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018910:	693b      	ldr	r3, [r7, #16]
 8018912:	681a      	ldr	r2, [r3, #0]
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	685b      	ldr	r3, [r3, #4]
 801891e:	4618      	mov	r0, r3
 8018920:	f7f9 f83d 	bl	801199e <lwip_htonl>
 8018924:	4602      	mov	r2, r0
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801892a:	1ad3      	subs	r3, r2, r3
 801892c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801892e:	8912      	ldrh	r2, [r2, #8]
 8018930:	4413      	add	r3, r2
 8018932:	69ba      	ldr	r2, [r7, #24]
 8018934:	429a      	cmp	r2, r3
 8018936:	d227      	bcs.n	8018988 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801893e:	461a      	mov	r2, r3
 8018940:	69bb      	ldr	r3, [r7, #24]
 8018942:	4293      	cmp	r3, r2
 8018944:	d114      	bne.n	8018970 <tcp_output+0x120>
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801894a:	2b00      	cmp	r3, #0
 801894c:	d110      	bne.n	8018970 <tcp_output+0x120>
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018954:	2b00      	cmp	r3, #0
 8018956:	d10b      	bne.n	8018970 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	2200      	movs	r2, #0
 801895c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	2201      	movs	r2, #1
 8018964:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2200      	movs	r2, #0
 801896c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	8b5b      	ldrh	r3, [r3, #26]
 8018974:	f003 0302 	and.w	r3, r3, #2
 8018978:	2b00      	cmp	r3, #0
 801897a:	f000 814d 	beq.w	8018c18 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	f000 fd6c 	bl	801945c <tcp_send_empty_ack>
 8018984:	4603      	mov	r3, r0
 8018986:	e152      	b.n	8018c2e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2200      	movs	r2, #0
 801898c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018994:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018996:	6a3b      	ldr	r3, [r7, #32]
 8018998:	2b00      	cmp	r3, #0
 801899a:	f000 811c 	beq.w	8018bd6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801899e:	e002      	b.n	80189a6 <tcp_output+0x156>
 80189a0:	6a3b      	ldr	r3, [r7, #32]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	623b      	str	r3, [r7, #32]
 80189a6:	6a3b      	ldr	r3, [r7, #32]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d1f8      	bne.n	80189a0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80189ae:	e112      	b.n	8018bd6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80189b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189b2:	68db      	ldr	r3, [r3, #12]
 80189b4:	899b      	ldrh	r3, [r3, #12]
 80189b6:	b29b      	uxth	r3, r3
 80189b8:	4618      	mov	r0, r3
 80189ba:	f7f8 ffdb 	bl	8011974 <lwip_htons>
 80189be:	4603      	mov	r3, r0
 80189c0:	b2db      	uxtb	r3, r3
 80189c2:	f003 0304 	and.w	r3, r3, #4
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d006      	beq.n	80189d8 <tcp_output+0x188>
 80189ca:	4b43      	ldr	r3, [pc, #268]	; (8018ad8 <tcp_output+0x288>)
 80189cc:	f240 5236 	movw	r2, #1334	; 0x536
 80189d0:	4946      	ldr	r1, [pc, #280]	; (8018aec <tcp_output+0x29c>)
 80189d2:	4843      	ldr	r0, [pc, #268]	; (8018ae0 <tcp_output+0x290>)
 80189d4:	f007 f8f0 	bl	801fbb8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d01f      	beq.n	8018a20 <tcp_output+0x1d0>
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	8b5b      	ldrh	r3, [r3, #26]
 80189e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d119      	bne.n	8018a20 <tcp_output+0x1d0>
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d00b      	beq.n	8018a0c <tcp_output+0x1bc>
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d110      	bne.n	8018a20 <tcp_output+0x1d0>
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a02:	891a      	ldrh	r2, [r3, #8]
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d209      	bcs.n	8018a20 <tcp_output+0x1d0>
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d004      	beq.n	8018a20 <tcp_output+0x1d0>
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a1c:	2b08      	cmp	r3, #8
 8018a1e:	d901      	bls.n	8018a24 <tcp_output+0x1d4>
 8018a20:	2301      	movs	r3, #1
 8018a22:	e000      	b.n	8018a26 <tcp_output+0x1d6>
 8018a24:	2300      	movs	r3, #0
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d106      	bne.n	8018a38 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	8b5b      	ldrh	r3, [r3, #26]
 8018a2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	f000 80e4 	beq.w	8018c00 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	7d1b      	ldrb	r3, [r3, #20]
 8018a3c:	2b02      	cmp	r3, #2
 8018a3e:	d00d      	beq.n	8018a5c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a42:	68db      	ldr	r3, [r3, #12]
 8018a44:	899b      	ldrh	r3, [r3, #12]
 8018a46:	b29c      	uxth	r4, r3
 8018a48:	2010      	movs	r0, #16
 8018a4a:	f7f8 ff93 	bl	8011974 <lwip_htons>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	461a      	mov	r2, r3
 8018a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a54:	68db      	ldr	r3, [r3, #12]
 8018a56:	4322      	orrs	r2, r4
 8018a58:	b292      	uxth	r2, r2
 8018a5a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018a5c:	697a      	ldr	r2, [r7, #20]
 8018a5e:	6879      	ldr	r1, [r7, #4]
 8018a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a62:	f000 f909 	bl	8018c78 <tcp_output_segment>
 8018a66:	4603      	mov	r3, r0
 8018a68:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d009      	beq.n	8018a86 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	8b5b      	ldrh	r3, [r3, #26]
 8018a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a7a:	b29a      	uxth	r2, r3
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	835a      	strh	r2, [r3, #26]
      return err;
 8018a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a84:	e0d3      	b.n	8018c2e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a88:	681a      	ldr	r2, [r3, #0]
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	7d1b      	ldrb	r3, [r3, #20]
 8018a92:	2b02      	cmp	r3, #2
 8018a94:	d006      	beq.n	8018aa4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	8b5b      	ldrh	r3, [r3, #26]
 8018a9a:	f023 0303 	bic.w	r3, r3, #3
 8018a9e:	b29a      	uxth	r2, r3
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	685b      	ldr	r3, [r3, #4]
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7f8 ff77 	bl	801199e <lwip_htonl>
 8018ab0:	4604      	mov	r4, r0
 8018ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab4:	891b      	ldrh	r3, [r3, #8]
 8018ab6:	461d      	mov	r5, r3
 8018ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aba:	68db      	ldr	r3, [r3, #12]
 8018abc:	899b      	ldrh	r3, [r3, #12]
 8018abe:	b29b      	uxth	r3, r3
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f7f8 ff57 	bl	8011974 <lwip_htons>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	b2db      	uxtb	r3, r3
 8018aca:	f003 0303 	and.w	r3, r3, #3
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d00e      	beq.n	8018af0 <tcp_output+0x2a0>
 8018ad2:	2301      	movs	r3, #1
 8018ad4:	e00d      	b.n	8018af2 <tcp_output+0x2a2>
 8018ad6:	bf00      	nop
 8018ad8:	080230f4 	.word	0x080230f4
 8018adc:	08023638 	.word	0x08023638
 8018ae0:	08023148 	.word	0x08023148
 8018ae4:	08023650 	.word	0x08023650
 8018ae8:	2000ea08 	.word	0x2000ea08
 8018aec:	08023678 	.word	0x08023678
 8018af0:	2300      	movs	r3, #0
 8018af2:	442b      	add	r3, r5
 8018af4:	4423      	add	r3, r4
 8018af6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018afc:	68bb      	ldr	r3, [r7, #8]
 8018afe:	1ad3      	subs	r3, r2, r3
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	da02      	bge.n	8018b0a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	68ba      	ldr	r2, [r7, #8]
 8018b08:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8018b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0c:	891b      	ldrh	r3, [r3, #8]
 8018b0e:	461c      	mov	r4, r3
 8018b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b12:	68db      	ldr	r3, [r3, #12]
 8018b14:	899b      	ldrh	r3, [r3, #12]
 8018b16:	b29b      	uxth	r3, r3
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7f8 ff2b 	bl	8011974 <lwip_htons>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	b2db      	uxtb	r3, r3
 8018b22:	f003 0303 	and.w	r3, r3, #3
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d001      	beq.n	8018b2e <tcp_output+0x2de>
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	e000      	b.n	8018b30 <tcp_output+0x2e0>
 8018b2e:	2300      	movs	r3, #0
 8018b30:	4423      	add	r3, r4
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d049      	beq.n	8018bca <tcp_output+0x37a>
      seg->next = NULL;
 8018b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b38:	2200      	movs	r2, #0
 8018b3a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d105      	bne.n	8018b50 <tcp_output+0x300>
        pcb->unacked = seg;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b48:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8018b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b4c:	623b      	str	r3, [r7, #32]
 8018b4e:	e03f      	b.n	8018bd0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b52:	68db      	ldr	r3, [r3, #12]
 8018b54:	685b      	ldr	r3, [r3, #4]
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7f8 ff21 	bl	801199e <lwip_htonl>
 8018b5c:	4604      	mov	r4, r0
 8018b5e:	6a3b      	ldr	r3, [r7, #32]
 8018b60:	68db      	ldr	r3, [r3, #12]
 8018b62:	685b      	ldr	r3, [r3, #4]
 8018b64:	4618      	mov	r0, r3
 8018b66:	f7f8 ff1a 	bl	801199e <lwip_htonl>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	1ae3      	subs	r3, r4, r3
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	da24      	bge.n	8018bbc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	3370      	adds	r3, #112	; 0x70
 8018b76:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018b78:	e002      	b.n	8018b80 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018b7a:	69fb      	ldr	r3, [r7, #28]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018b80:	69fb      	ldr	r3, [r7, #28]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d011      	beq.n	8018bac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018b88:	69fb      	ldr	r3, [r7, #28]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	68db      	ldr	r3, [r3, #12]
 8018b8e:	685b      	ldr	r3, [r3, #4]
 8018b90:	4618      	mov	r0, r3
 8018b92:	f7f8 ff04 	bl	801199e <lwip_htonl>
 8018b96:	4604      	mov	r4, r0
 8018b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b9a:	68db      	ldr	r3, [r3, #12]
 8018b9c:	685b      	ldr	r3, [r3, #4]
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f7f8 fefd 	bl	801199e <lwip_htonl>
 8018ba4:	4603      	mov	r3, r0
 8018ba6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	dbe6      	blt.n	8018b7a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018bac:	69fb      	ldr	r3, [r7, #28]
 8018bae:	681a      	ldr	r2, [r3, #0]
 8018bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018bb4:	69fb      	ldr	r3, [r7, #28]
 8018bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bb8:	601a      	str	r2, [r3, #0]
 8018bba:	e009      	b.n	8018bd0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018bbc:	6a3b      	ldr	r3, [r7, #32]
 8018bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bc0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018bc2:	6a3b      	ldr	r3, [r7, #32]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	623b      	str	r3, [r7, #32]
 8018bc8:	e002      	b.n	8018bd0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018bca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018bcc:	f7fb ff1d 	bl	8014a0a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018bd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8018bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d012      	beq.n	8018c02 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bde:	68db      	ldr	r3, [r3, #12]
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7f8 fedb 	bl	801199e <lwip_htonl>
 8018be8:	4602      	mov	r2, r0
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bee:	1ad3      	subs	r3, r2, r3
 8018bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bf2:	8912      	ldrh	r2, [r2, #8]
 8018bf4:	4413      	add	r3, r2
  while (seg != NULL &&
 8018bf6:	69ba      	ldr	r2, [r7, #24]
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	f4bf aed9 	bcs.w	80189b0 <tcp_output+0x160>
 8018bfe:	e000      	b.n	8018c02 <tcp_output+0x3b2>
      break;
 8018c00:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d108      	bne.n	8018c1c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8018c12:	e004      	b.n	8018c1e <tcp_output+0x3ce>
    goto output_done;
 8018c14:	bf00      	nop
 8018c16:	e002      	b.n	8018c1e <tcp_output+0x3ce>
    goto output_done;
 8018c18:	bf00      	nop
 8018c1a:	e000      	b.n	8018c1e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018c1c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	8b5b      	ldrh	r3, [r3, #26]
 8018c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018c26:	b29a      	uxth	r2, r3
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018c2c:	2300      	movs	r3, #0
}
 8018c2e:	4618      	mov	r0, r3
 8018c30:	3728      	adds	r7, #40	; 0x28
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bdb0      	pop	{r4, r5, r7, pc}
 8018c36:	bf00      	nop

08018c38 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b082      	sub	sp, #8
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d106      	bne.n	8018c54 <tcp_output_segment_busy+0x1c>
 8018c46:	4b09      	ldr	r3, [pc, #36]	; (8018c6c <tcp_output_segment_busy+0x34>)
 8018c48:	f240 529a 	movw	r2, #1434	; 0x59a
 8018c4c:	4908      	ldr	r1, [pc, #32]	; (8018c70 <tcp_output_segment_busy+0x38>)
 8018c4e:	4809      	ldr	r0, [pc, #36]	; (8018c74 <tcp_output_segment_busy+0x3c>)
 8018c50:	f006 ffb2 	bl	801fbb8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	685b      	ldr	r3, [r3, #4]
 8018c58:	7b9b      	ldrb	r3, [r3, #14]
 8018c5a:	2b01      	cmp	r3, #1
 8018c5c:	d001      	beq.n	8018c62 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018c5e:	2301      	movs	r3, #1
 8018c60:	e000      	b.n	8018c64 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018c62:	2300      	movs	r3, #0
}
 8018c64:	4618      	mov	r0, r3
 8018c66:	3708      	adds	r7, #8
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd80      	pop	{r7, pc}
 8018c6c:	080230f4 	.word	0x080230f4
 8018c70:	08023690 	.word	0x08023690
 8018c74:	08023148 	.word	0x08023148

08018c78 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018c78:	b5b0      	push	{r4, r5, r7, lr}
 8018c7a:	b08c      	sub	sp, #48	; 0x30
 8018c7c:	af04      	add	r7, sp, #16
 8018c7e:	60f8      	str	r0, [r7, #12]
 8018c80:	60b9      	str	r1, [r7, #8]
 8018c82:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d106      	bne.n	8018c98 <tcp_output_segment+0x20>
 8018c8a:	4b63      	ldr	r3, [pc, #396]	; (8018e18 <tcp_output_segment+0x1a0>)
 8018c8c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018c90:	4962      	ldr	r1, [pc, #392]	; (8018e1c <tcp_output_segment+0x1a4>)
 8018c92:	4863      	ldr	r0, [pc, #396]	; (8018e20 <tcp_output_segment+0x1a8>)
 8018c94:	f006 ff90 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018c98:	68bb      	ldr	r3, [r7, #8]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d106      	bne.n	8018cac <tcp_output_segment+0x34>
 8018c9e:	4b5e      	ldr	r3, [pc, #376]	; (8018e18 <tcp_output_segment+0x1a0>)
 8018ca0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018ca4:	495f      	ldr	r1, [pc, #380]	; (8018e24 <tcp_output_segment+0x1ac>)
 8018ca6:	485e      	ldr	r0, [pc, #376]	; (8018e20 <tcp_output_segment+0x1a8>)
 8018ca8:	f006 ff86 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d106      	bne.n	8018cc0 <tcp_output_segment+0x48>
 8018cb2:	4b59      	ldr	r3, [pc, #356]	; (8018e18 <tcp_output_segment+0x1a0>)
 8018cb4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018cb8:	495b      	ldr	r1, [pc, #364]	; (8018e28 <tcp_output_segment+0x1b0>)
 8018cba:	4859      	ldr	r0, [pc, #356]	; (8018e20 <tcp_output_segment+0x1a8>)
 8018cbc:	f006 ff7c 	bl	801fbb8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018cc0:	68f8      	ldr	r0, [r7, #12]
 8018cc2:	f7ff ffb9 	bl	8018c38 <tcp_output_segment_busy>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d001      	beq.n	8018cd0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018ccc:	2300      	movs	r3, #0
 8018cce:	e09f      	b.n	8018e10 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018cd0:	68bb      	ldr	r3, [r7, #8]
 8018cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	68dc      	ldr	r4, [r3, #12]
 8018cd8:	4610      	mov	r0, r2
 8018cda:	f7f8 fe60 	bl	801199e <lwip_htonl>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018ce2:	68bb      	ldr	r3, [r7, #8]
 8018ce4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	68dc      	ldr	r4, [r3, #12]
 8018cea:	4610      	mov	r0, r2
 8018cec:	f7f8 fe42 	bl	8011974 <lwip_htons>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cf8:	68ba      	ldr	r2, [r7, #8]
 8018cfa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018cfc:	441a      	add	r2, r3
 8018cfe:	68bb      	ldr	r3, [r7, #8]
 8018d00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	68db      	ldr	r3, [r3, #12]
 8018d06:	3314      	adds	r3, #20
 8018d08:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	7a9b      	ldrb	r3, [r3, #10]
 8018d0e:	f003 0301 	and.w	r3, r3, #1
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d015      	beq.n	8018d42 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018d16:	68bb      	ldr	r3, [r7, #8]
 8018d18:	3304      	adds	r3, #4
 8018d1a:	461a      	mov	r2, r3
 8018d1c:	6879      	ldr	r1, [r7, #4]
 8018d1e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018d22:	f7fc fa37 	bl	8015194 <tcp_eff_send_mss_netif>
 8018d26:	4603      	mov	r3, r0
 8018d28:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018d2a:	8b7b      	ldrh	r3, [r7, #26]
 8018d2c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018d30:	4618      	mov	r0, r3
 8018d32:	f7f8 fe34 	bl	801199e <lwip_htonl>
 8018d36:	4602      	mov	r2, r0
 8018d38:	69fb      	ldr	r3, [r7, #28]
 8018d3a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018d3c:	69fb      	ldr	r3, [r7, #28]
 8018d3e:	3304      	adds	r3, #4
 8018d40:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	da02      	bge.n	8018d52 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018d4c:	68bb      	ldr	r3, [r7, #8]
 8018d4e:	2200      	movs	r2, #0
 8018d50:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018d52:	68bb      	ldr	r3, [r7, #8]
 8018d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d10c      	bne.n	8018d74 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018d5a:	4b34      	ldr	r3, [pc, #208]	; (8018e2c <tcp_output_segment+0x1b4>)
 8018d5c:	681a      	ldr	r2, [r3, #0]
 8018d5e:	68bb      	ldr	r3, [r7, #8]
 8018d60:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	68db      	ldr	r3, [r3, #12]
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f7f8 fe18 	bl	801199e <lwip_htonl>
 8018d6e:	4602      	mov	r2, r0
 8018d70:	68bb      	ldr	r3, [r7, #8]
 8018d72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	68da      	ldr	r2, [r3, #12]
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	685b      	ldr	r3, [r3, #4]
 8018d7c:	685b      	ldr	r3, [r3, #4]
 8018d7e:	1ad3      	subs	r3, r2, r3
 8018d80:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	685b      	ldr	r3, [r3, #4]
 8018d86:	8959      	ldrh	r1, [r3, #10]
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	685b      	ldr	r3, [r3, #4]
 8018d8c:	8b3a      	ldrh	r2, [r7, #24]
 8018d8e:	1a8a      	subs	r2, r1, r2
 8018d90:	b292      	uxth	r2, r2
 8018d92:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	685b      	ldr	r3, [r3, #4]
 8018d98:	8919      	ldrh	r1, [r3, #8]
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	685b      	ldr	r3, [r3, #4]
 8018d9e:	8b3a      	ldrh	r2, [r7, #24]
 8018da0:	1a8a      	subs	r2, r1, r2
 8018da2:	b292      	uxth	r2, r2
 8018da4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	685b      	ldr	r3, [r3, #4]
 8018daa:	68fa      	ldr	r2, [r7, #12]
 8018dac:	68d2      	ldr	r2, [r2, #12]
 8018dae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	68db      	ldr	r3, [r3, #12]
 8018db4:	2200      	movs	r2, #0
 8018db6:	741a      	strb	r2, [r3, #16]
 8018db8:	2200      	movs	r2, #0
 8018dba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	68db      	ldr	r3, [r3, #12]
 8018dc0:	f103 0214 	add.w	r2, r3, #20
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	7a9b      	ldrb	r3, [r3, #10]
 8018dc8:	009b      	lsls	r3, r3, #2
 8018dca:	f003 0304 	and.w	r3, r3, #4
 8018dce:	4413      	add	r3, r2
 8018dd0:	69fa      	ldr	r2, [r7, #28]
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	d006      	beq.n	8018de4 <tcp_output_segment+0x16c>
 8018dd6:	4b10      	ldr	r3, [pc, #64]	; (8018e18 <tcp_output_segment+0x1a0>)
 8018dd8:	f240 621c 	movw	r2, #1564	; 0x61c
 8018ddc:	4914      	ldr	r1, [pc, #80]	; (8018e30 <tcp_output_segment+0x1b8>)
 8018dde:	4810      	ldr	r0, [pc, #64]	; (8018e20 <tcp_output_segment+0x1a8>)
 8018de0:	f006 feea 	bl	801fbb8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	6858      	ldr	r0, [r3, #4]
 8018de8:	68b9      	ldr	r1, [r7, #8]
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	1d1c      	adds	r4, r3, #4
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	7add      	ldrb	r5, [r3, #11]
 8018df2:	68bb      	ldr	r3, [r7, #8]
 8018df4:	7a9b      	ldrb	r3, [r3, #10]
 8018df6:	687a      	ldr	r2, [r7, #4]
 8018df8:	9202      	str	r2, [sp, #8]
 8018dfa:	2206      	movs	r2, #6
 8018dfc:	9201      	str	r2, [sp, #4]
 8018dfe:	9300      	str	r3, [sp, #0]
 8018e00:	462b      	mov	r3, r5
 8018e02:	4622      	mov	r2, r4
 8018e04:	f004 fc28 	bl	801d658 <ip4_output_if>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018e10:	4618      	mov	r0, r3
 8018e12:	3720      	adds	r7, #32
 8018e14:	46bd      	mov	sp, r7
 8018e16:	bdb0      	pop	{r4, r5, r7, pc}
 8018e18:	080230f4 	.word	0x080230f4
 8018e1c:	080236b8 	.word	0x080236b8
 8018e20:	08023148 	.word	0x08023148
 8018e24:	080236d8 	.word	0x080236d8
 8018e28:	080236f8 	.word	0x080236f8
 8018e2c:	2000e9f8 	.word	0x2000e9f8
 8018e30:	0802371c 	.word	0x0802371c

08018e34 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018e34:	b5b0      	push	{r4, r5, r7, lr}
 8018e36:	b084      	sub	sp, #16
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d106      	bne.n	8018e50 <tcp_rexmit_rto_prepare+0x1c>
 8018e42:	4b31      	ldr	r3, [pc, #196]	; (8018f08 <tcp_rexmit_rto_prepare+0xd4>)
 8018e44:	f240 6263 	movw	r2, #1635	; 0x663
 8018e48:	4930      	ldr	r1, [pc, #192]	; (8018f0c <tcp_rexmit_rto_prepare+0xd8>)
 8018e4a:	4831      	ldr	r0, [pc, #196]	; (8018f10 <tcp_rexmit_rto_prepare+0xdc>)
 8018e4c:	f006 feb4 	bl	801fbb8 <iprintf>

  if (pcb->unacked == NULL) {
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d102      	bne.n	8018e5e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018e58:	f06f 0305 	mvn.w	r3, #5
 8018e5c:	e050      	b.n	8018f00 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e62:	60fb      	str	r3, [r7, #12]
 8018e64:	e00b      	b.n	8018e7e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018e66:	68f8      	ldr	r0, [r7, #12]
 8018e68:	f7ff fee6 	bl	8018c38 <tcp_output_segment_busy>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d002      	beq.n	8018e78 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018e72:	f06f 0305 	mvn.w	r3, #5
 8018e76:	e043      	b.n	8018f00 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	60fb      	str	r3, [r7, #12]
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d1ef      	bne.n	8018e66 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018e86:	68f8      	ldr	r0, [r7, #12]
 8018e88:	f7ff fed6 	bl	8018c38 <tcp_output_segment_busy>
 8018e8c:	4603      	mov	r3, r0
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d002      	beq.n	8018e98 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018e92:	f06f 0305 	mvn.w	r3, #5
 8018e96:	e033      	b.n	8018f00 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	8b5b      	ldrh	r3, [r3, #26]
 8018eb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018eb6:	b29a      	uxth	r2, r3
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	68db      	ldr	r3, [r3, #12]
 8018ec0:	685b      	ldr	r3, [r3, #4]
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7f8 fd6b 	bl	801199e <lwip_htonl>
 8018ec8:	4604      	mov	r4, r0
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	891b      	ldrh	r3, [r3, #8]
 8018ece:	461d      	mov	r5, r3
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	68db      	ldr	r3, [r3, #12]
 8018ed4:	899b      	ldrh	r3, [r3, #12]
 8018ed6:	b29b      	uxth	r3, r3
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7f8 fd4b 	bl	8011974 <lwip_htons>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	b2db      	uxtb	r3, r3
 8018ee2:	f003 0303 	and.w	r3, r3, #3
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d001      	beq.n	8018eee <tcp_rexmit_rto_prepare+0xba>
 8018eea:	2301      	movs	r3, #1
 8018eec:	e000      	b.n	8018ef0 <tcp_rexmit_rto_prepare+0xbc>
 8018eee:	2300      	movs	r3, #0
 8018ef0:	442b      	add	r3, r5
 8018ef2:	18e2      	adds	r2, r4, r3
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	2200      	movs	r2, #0
 8018efc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018efe:	2300      	movs	r3, #0
}
 8018f00:	4618      	mov	r0, r3
 8018f02:	3710      	adds	r7, #16
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bdb0      	pop	{r4, r5, r7, pc}
 8018f08:	080230f4 	.word	0x080230f4
 8018f0c:	08023730 	.word	0x08023730
 8018f10:	08023148 	.word	0x08023148

08018f14 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b082      	sub	sp, #8
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d106      	bne.n	8018f30 <tcp_rexmit_rto_commit+0x1c>
 8018f22:	4b0d      	ldr	r3, [pc, #52]	; (8018f58 <tcp_rexmit_rto_commit+0x44>)
 8018f24:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018f28:	490c      	ldr	r1, [pc, #48]	; (8018f5c <tcp_rexmit_rto_commit+0x48>)
 8018f2a:	480d      	ldr	r0, [pc, #52]	; (8018f60 <tcp_rexmit_rto_commit+0x4c>)
 8018f2c:	f006 fe44 	bl	801fbb8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018f36:	2bff      	cmp	r3, #255	; 0xff
 8018f38:	d007      	beq.n	8018f4a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018f40:	3301      	adds	r3, #1
 8018f42:	b2da      	uxtb	r2, r3
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f7ff fc80 	bl	8018850 <tcp_output>
}
 8018f50:	bf00      	nop
 8018f52:	3708      	adds	r7, #8
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd80      	pop	{r7, pc}
 8018f58:	080230f4 	.word	0x080230f4
 8018f5c:	08023754 	.word	0x08023754
 8018f60:	08023148 	.word	0x08023148

08018f64 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b082      	sub	sp, #8
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d106      	bne.n	8018f80 <tcp_rexmit_rto+0x1c>
 8018f72:	4b0a      	ldr	r3, [pc, #40]	; (8018f9c <tcp_rexmit_rto+0x38>)
 8018f74:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018f78:	4909      	ldr	r1, [pc, #36]	; (8018fa0 <tcp_rexmit_rto+0x3c>)
 8018f7a:	480a      	ldr	r0, [pc, #40]	; (8018fa4 <tcp_rexmit_rto+0x40>)
 8018f7c:	f006 fe1c 	bl	801fbb8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	f7ff ff57 	bl	8018e34 <tcp_rexmit_rto_prepare>
 8018f86:	4603      	mov	r3, r0
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d102      	bne.n	8018f92 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018f8c:	6878      	ldr	r0, [r7, #4]
 8018f8e:	f7ff ffc1 	bl	8018f14 <tcp_rexmit_rto_commit>
  }
}
 8018f92:	bf00      	nop
 8018f94:	3708      	adds	r7, #8
 8018f96:	46bd      	mov	sp, r7
 8018f98:	bd80      	pop	{r7, pc}
 8018f9a:	bf00      	nop
 8018f9c:	080230f4 	.word	0x080230f4
 8018fa0:	08023778 	.word	0x08023778
 8018fa4:	08023148 	.word	0x08023148

08018fa8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018fa8:	b590      	push	{r4, r7, lr}
 8018faa:	b085      	sub	sp, #20
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d106      	bne.n	8018fc4 <tcp_rexmit+0x1c>
 8018fb6:	4b2f      	ldr	r3, [pc, #188]	; (8019074 <tcp_rexmit+0xcc>)
 8018fb8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018fbc:	492e      	ldr	r1, [pc, #184]	; (8019078 <tcp_rexmit+0xd0>)
 8018fbe:	482f      	ldr	r0, [pc, #188]	; (801907c <tcp_rexmit+0xd4>)
 8018fc0:	f006 fdfa 	bl	801fbb8 <iprintf>

  if (pcb->unacked == NULL) {
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d102      	bne.n	8018fd2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018fcc:	f06f 0305 	mvn.w	r3, #5
 8018fd0:	e04c      	b.n	801906c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fd6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018fd8:	68b8      	ldr	r0, [r7, #8]
 8018fda:	f7ff fe2d 	bl	8018c38 <tcp_output_segment_busy>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d002      	beq.n	8018fea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018fe4:	f06f 0305 	mvn.w	r3, #5
 8018fe8:	e040      	b.n	801906c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018fea:	68bb      	ldr	r3, [r7, #8]
 8018fec:	681a      	ldr	r2, [r3, #0]
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	336c      	adds	r3, #108	; 0x6c
 8018ff6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018ff8:	e002      	b.n	8019000 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d011      	beq.n	801902c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	68db      	ldr	r3, [r3, #12]
 801900e:	685b      	ldr	r3, [r3, #4]
 8019010:	4618      	mov	r0, r3
 8019012:	f7f8 fcc4 	bl	801199e <lwip_htonl>
 8019016:	4604      	mov	r4, r0
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	68db      	ldr	r3, [r3, #12]
 801901c:	685b      	ldr	r3, [r3, #4]
 801901e:	4618      	mov	r0, r3
 8019020:	f7f8 fcbd 	bl	801199e <lwip_htonl>
 8019024:	4603      	mov	r3, r0
 8019026:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019028:	2b00      	cmp	r3, #0
 801902a:	dbe6      	blt.n	8018ffa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	681a      	ldr	r2, [r3, #0]
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	68ba      	ldr	r2, [r7, #8]
 8019038:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801903a:	68bb      	ldr	r3, [r7, #8]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d103      	bne.n	801904a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	2200      	movs	r2, #0
 8019046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019050:	2bff      	cmp	r3, #255	; 0xff
 8019052:	d007      	beq.n	8019064 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801905a:	3301      	adds	r3, #1
 801905c:	b2da      	uxtb	r2, r3
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	2200      	movs	r2, #0
 8019068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801906a:	2300      	movs	r3, #0
}
 801906c:	4618      	mov	r0, r3
 801906e:	3714      	adds	r7, #20
 8019070:	46bd      	mov	sp, r7
 8019072:	bd90      	pop	{r4, r7, pc}
 8019074:	080230f4 	.word	0x080230f4
 8019078:	08023794 	.word	0x08023794
 801907c:	08023148 	.word	0x08023148

08019080 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b082      	sub	sp, #8
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	2b00      	cmp	r3, #0
 801908c:	d106      	bne.n	801909c <tcp_rexmit_fast+0x1c>
 801908e:	4b2a      	ldr	r3, [pc, #168]	; (8019138 <tcp_rexmit_fast+0xb8>)
 8019090:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8019094:	4929      	ldr	r1, [pc, #164]	; (801913c <tcp_rexmit_fast+0xbc>)
 8019096:	482a      	ldr	r0, [pc, #168]	; (8019140 <tcp_rexmit_fast+0xc0>)
 8019098:	f006 fd8e 	bl	801fbb8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d044      	beq.n	801912e <tcp_rexmit_fast+0xae>
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	8b5b      	ldrh	r3, [r3, #26]
 80190a8:	f003 0304 	and.w	r3, r3, #4
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d13e      	bne.n	801912e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80190b0:	6878      	ldr	r0, [r7, #4]
 80190b2:	f7ff ff79 	bl	8018fa8 <tcp_rexmit>
 80190b6:	4603      	mov	r3, r0
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d138      	bne.n	801912e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80190c8:	4293      	cmp	r3, r2
 80190ca:	bf28      	it	cs
 80190cc:	4613      	movcs	r3, r2
 80190ce:	b29b      	uxth	r3, r3
 80190d0:	0fda      	lsrs	r2, r3, #31
 80190d2:	4413      	add	r3, r2
 80190d4:	105b      	asrs	r3, r3, #1
 80190d6:	b29a      	uxth	r2, r3
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80190e4:	461a      	mov	r2, r3
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190ea:	005b      	lsls	r3, r3, #1
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d206      	bcs.n	80190fe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190f4:	005b      	lsls	r3, r3, #1
 80190f6:	b29a      	uxth	r2, r3
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019108:	4619      	mov	r1, r3
 801910a:	0049      	lsls	r1, r1, #1
 801910c:	440b      	add	r3, r1
 801910e:	b29b      	uxth	r3, r3
 8019110:	4413      	add	r3, r2
 8019112:	b29a      	uxth	r2, r3
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	8b5b      	ldrh	r3, [r3, #26]
 801911e:	f043 0304 	orr.w	r3, r3, #4
 8019122:	b29a      	uxth	r2, r3
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	2200      	movs	r2, #0
 801912c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801912e:	bf00      	nop
 8019130:	3708      	adds	r7, #8
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}
 8019136:	bf00      	nop
 8019138:	080230f4 	.word	0x080230f4
 801913c:	080237ac 	.word	0x080237ac
 8019140:	08023148 	.word	0x08023148

08019144 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b086      	sub	sp, #24
 8019148:	af00      	add	r7, sp, #0
 801914a:	60f8      	str	r0, [r7, #12]
 801914c:	607b      	str	r3, [r7, #4]
 801914e:	460b      	mov	r3, r1
 8019150:	817b      	strh	r3, [r7, #10]
 8019152:	4613      	mov	r3, r2
 8019154:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019156:	897a      	ldrh	r2, [r7, #10]
 8019158:	893b      	ldrh	r3, [r7, #8]
 801915a:	4413      	add	r3, r2
 801915c:	b29b      	uxth	r3, r3
 801915e:	3314      	adds	r3, #20
 8019160:	b29b      	uxth	r3, r3
 8019162:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019166:	4619      	mov	r1, r3
 8019168:	2022      	movs	r0, #34	; 0x22
 801916a:	f7f9 fcd7 	bl	8012b1c <pbuf_alloc>
 801916e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d04d      	beq.n	8019212 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019176:	897b      	ldrh	r3, [r7, #10]
 8019178:	3313      	adds	r3, #19
 801917a:	697a      	ldr	r2, [r7, #20]
 801917c:	8952      	ldrh	r2, [r2, #10]
 801917e:	4293      	cmp	r3, r2
 8019180:	db06      	blt.n	8019190 <tcp_output_alloc_header_common+0x4c>
 8019182:	4b26      	ldr	r3, [pc, #152]	; (801921c <tcp_output_alloc_header_common+0xd8>)
 8019184:	f240 7223 	movw	r2, #1827	; 0x723
 8019188:	4925      	ldr	r1, [pc, #148]	; (8019220 <tcp_output_alloc_header_common+0xdc>)
 801918a:	4826      	ldr	r0, [pc, #152]	; (8019224 <tcp_output_alloc_header_common+0xe0>)
 801918c:	f006 fd14 	bl	801fbb8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019190:	697b      	ldr	r3, [r7, #20]
 8019192:	685b      	ldr	r3, [r3, #4]
 8019194:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019196:	8c3b      	ldrh	r3, [r7, #32]
 8019198:	4618      	mov	r0, r3
 801919a:	f7f8 fbeb 	bl	8011974 <lwip_htons>
 801919e:	4603      	mov	r3, r0
 80191a0:	461a      	mov	r2, r3
 80191a2:	693b      	ldr	r3, [r7, #16]
 80191a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80191a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7f8 fbe3 	bl	8011974 <lwip_htons>
 80191ae:	4603      	mov	r3, r0
 80191b0:	461a      	mov	r2, r3
 80191b2:	693b      	ldr	r3, [r7, #16]
 80191b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80191b6:	693b      	ldr	r3, [r7, #16]
 80191b8:	687a      	ldr	r2, [r7, #4]
 80191ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80191bc:	68f8      	ldr	r0, [r7, #12]
 80191be:	f7f8 fbee 	bl	801199e <lwip_htonl>
 80191c2:	4602      	mov	r2, r0
 80191c4:	693b      	ldr	r3, [r7, #16]
 80191c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80191c8:	897b      	ldrh	r3, [r7, #10]
 80191ca:	089b      	lsrs	r3, r3, #2
 80191cc:	b29b      	uxth	r3, r3
 80191ce:	3305      	adds	r3, #5
 80191d0:	b29b      	uxth	r3, r3
 80191d2:	031b      	lsls	r3, r3, #12
 80191d4:	b29a      	uxth	r2, r3
 80191d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80191da:	b29b      	uxth	r3, r3
 80191dc:	4313      	orrs	r3, r2
 80191de:	b29b      	uxth	r3, r3
 80191e0:	4618      	mov	r0, r3
 80191e2:	f7f8 fbc7 	bl	8011974 <lwip_htons>
 80191e6:	4603      	mov	r3, r0
 80191e8:	461a      	mov	r2, r3
 80191ea:	693b      	ldr	r3, [r7, #16]
 80191ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80191ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80191f0:	4618      	mov	r0, r3
 80191f2:	f7f8 fbbf 	bl	8011974 <lwip_htons>
 80191f6:	4603      	mov	r3, r0
 80191f8:	461a      	mov	r2, r3
 80191fa:	693b      	ldr	r3, [r7, #16]
 80191fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80191fe:	693b      	ldr	r3, [r7, #16]
 8019200:	2200      	movs	r2, #0
 8019202:	741a      	strb	r2, [r3, #16]
 8019204:	2200      	movs	r2, #0
 8019206:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019208:	693b      	ldr	r3, [r7, #16]
 801920a:	2200      	movs	r2, #0
 801920c:	749a      	strb	r2, [r3, #18]
 801920e:	2200      	movs	r2, #0
 8019210:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8019212:	697b      	ldr	r3, [r7, #20]
}
 8019214:	4618      	mov	r0, r3
 8019216:	3718      	adds	r7, #24
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}
 801921c:	080230f4 	.word	0x080230f4
 8019220:	080237cc 	.word	0x080237cc
 8019224:	08023148 	.word	0x08023148

08019228 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019228:	b5b0      	push	{r4, r5, r7, lr}
 801922a:	b08a      	sub	sp, #40	; 0x28
 801922c:	af04      	add	r7, sp, #16
 801922e:	60f8      	str	r0, [r7, #12]
 8019230:	607b      	str	r3, [r7, #4]
 8019232:	460b      	mov	r3, r1
 8019234:	817b      	strh	r3, [r7, #10]
 8019236:	4613      	mov	r3, r2
 8019238:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d106      	bne.n	801924e <tcp_output_alloc_header+0x26>
 8019240:	4b15      	ldr	r3, [pc, #84]	; (8019298 <tcp_output_alloc_header+0x70>)
 8019242:	f240 7242 	movw	r2, #1858	; 0x742
 8019246:	4915      	ldr	r1, [pc, #84]	; (801929c <tcp_output_alloc_header+0x74>)
 8019248:	4815      	ldr	r0, [pc, #84]	; (80192a0 <tcp_output_alloc_header+0x78>)
 801924a:	f006 fcb5 	bl	801fbb8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	8adb      	ldrh	r3, [r3, #22]
 8019256:	68fa      	ldr	r2, [r7, #12]
 8019258:	8b12      	ldrh	r2, [r2, #24]
 801925a:	68f9      	ldr	r1, [r7, #12]
 801925c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801925e:	893d      	ldrh	r5, [r7, #8]
 8019260:	897c      	ldrh	r4, [r7, #10]
 8019262:	9103      	str	r1, [sp, #12]
 8019264:	2110      	movs	r1, #16
 8019266:	9102      	str	r1, [sp, #8]
 8019268:	9201      	str	r2, [sp, #4]
 801926a:	9300      	str	r3, [sp, #0]
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	462a      	mov	r2, r5
 8019270:	4621      	mov	r1, r4
 8019272:	f7ff ff67 	bl	8019144 <tcp_output_alloc_header_common>
 8019276:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019278:	697b      	ldr	r3, [r7, #20]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d006      	beq.n	801928c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019282:	68fa      	ldr	r2, [r7, #12]
 8019284:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019286:	441a      	add	r2, r3
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801928c:	697b      	ldr	r3, [r7, #20]
}
 801928e:	4618      	mov	r0, r3
 8019290:	3718      	adds	r7, #24
 8019292:	46bd      	mov	sp, r7
 8019294:	bdb0      	pop	{r4, r5, r7, pc}
 8019296:	bf00      	nop
 8019298:	080230f4 	.word	0x080230f4
 801929c:	080237fc 	.word	0x080237fc
 80192a0:	08023148 	.word	0x08023148

080192a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b088      	sub	sp, #32
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	60f8      	str	r0, [r7, #12]
 80192ac:	60b9      	str	r1, [r7, #8]
 80192ae:	4611      	mov	r1, r2
 80192b0:	461a      	mov	r2, r3
 80192b2:	460b      	mov	r3, r1
 80192b4:	71fb      	strb	r3, [r7, #7]
 80192b6:	4613      	mov	r3, r2
 80192b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80192ba:	2300      	movs	r3, #0
 80192bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80192be:	68bb      	ldr	r3, [r7, #8]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d106      	bne.n	80192d2 <tcp_output_fill_options+0x2e>
 80192c4:	4b13      	ldr	r3, [pc, #76]	; (8019314 <tcp_output_fill_options+0x70>)
 80192c6:	f240 7256 	movw	r2, #1878	; 0x756
 80192ca:	4913      	ldr	r1, [pc, #76]	; (8019318 <tcp_output_fill_options+0x74>)
 80192cc:	4813      	ldr	r0, [pc, #76]	; (801931c <tcp_output_fill_options+0x78>)
 80192ce:	f006 fc73 	bl	801fbb8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	685b      	ldr	r3, [r3, #4]
 80192d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80192d8:	69bb      	ldr	r3, [r7, #24]
 80192da:	3314      	adds	r3, #20
 80192dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80192de:	69bb      	ldr	r3, [r7, #24]
 80192e0:	f103 0214 	add.w	r2, r3, #20
 80192e4:	8bfb      	ldrh	r3, [r7, #30]
 80192e6:	009b      	lsls	r3, r3, #2
 80192e8:	4619      	mov	r1, r3
 80192ea:	79fb      	ldrb	r3, [r7, #7]
 80192ec:	009b      	lsls	r3, r3, #2
 80192ee:	f003 0304 	and.w	r3, r3, #4
 80192f2:	440b      	add	r3, r1
 80192f4:	4413      	add	r3, r2
 80192f6:	697a      	ldr	r2, [r7, #20]
 80192f8:	429a      	cmp	r2, r3
 80192fa:	d006      	beq.n	801930a <tcp_output_fill_options+0x66>
 80192fc:	4b05      	ldr	r3, [pc, #20]	; (8019314 <tcp_output_fill_options+0x70>)
 80192fe:	f240 7275 	movw	r2, #1909	; 0x775
 8019302:	4907      	ldr	r1, [pc, #28]	; (8019320 <tcp_output_fill_options+0x7c>)
 8019304:	4805      	ldr	r0, [pc, #20]	; (801931c <tcp_output_fill_options+0x78>)
 8019306:	f006 fc57 	bl	801fbb8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801930a:	bf00      	nop
 801930c:	3720      	adds	r7, #32
 801930e:	46bd      	mov	sp, r7
 8019310:	bd80      	pop	{r7, pc}
 8019312:	bf00      	nop
 8019314:	080230f4 	.word	0x080230f4
 8019318:	08023824 	.word	0x08023824
 801931c:	08023148 	.word	0x08023148
 8019320:	0802371c 	.word	0x0802371c

08019324 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b08a      	sub	sp, #40	; 0x28
 8019328:	af04      	add	r7, sp, #16
 801932a:	60f8      	str	r0, [r7, #12]
 801932c:	60b9      	str	r1, [r7, #8]
 801932e:	607a      	str	r2, [r7, #4]
 8019330:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019332:	68bb      	ldr	r3, [r7, #8]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d106      	bne.n	8019346 <tcp_output_control_segment+0x22>
 8019338:	4b1c      	ldr	r3, [pc, #112]	; (80193ac <tcp_output_control_segment+0x88>)
 801933a:	f240 7287 	movw	r2, #1927	; 0x787
 801933e:	491c      	ldr	r1, [pc, #112]	; (80193b0 <tcp_output_control_segment+0x8c>)
 8019340:	481c      	ldr	r0, [pc, #112]	; (80193b4 <tcp_output_control_segment+0x90>)
 8019342:	f006 fc39 	bl	801fbb8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019346:	683a      	ldr	r2, [r7, #0]
 8019348:	6879      	ldr	r1, [r7, #4]
 801934a:	68f8      	ldr	r0, [r7, #12]
 801934c:	f7fe fae8 	bl	8017920 <tcp_route>
 8019350:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019352:	693b      	ldr	r3, [r7, #16]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d102      	bne.n	801935e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019358:	23fc      	movs	r3, #252	; 0xfc
 801935a:	75fb      	strb	r3, [r7, #23]
 801935c:	e01c      	b.n	8019398 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d006      	beq.n	8019372 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	7adb      	ldrb	r3, [r3, #11]
 8019368:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	7a9b      	ldrb	r3, [r3, #10]
 801936e:	757b      	strb	r3, [r7, #21]
 8019370:	e003      	b.n	801937a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019372:	23ff      	movs	r3, #255	; 0xff
 8019374:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019376:	2300      	movs	r3, #0
 8019378:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801937a:	7dba      	ldrb	r2, [r7, #22]
 801937c:	693b      	ldr	r3, [r7, #16]
 801937e:	9302      	str	r3, [sp, #8]
 8019380:	2306      	movs	r3, #6
 8019382:	9301      	str	r3, [sp, #4]
 8019384:	7d7b      	ldrb	r3, [r7, #21]
 8019386:	9300      	str	r3, [sp, #0]
 8019388:	4613      	mov	r3, r2
 801938a:	683a      	ldr	r2, [r7, #0]
 801938c:	6879      	ldr	r1, [r7, #4]
 801938e:	68b8      	ldr	r0, [r7, #8]
 8019390:	f004 f962 	bl	801d658 <ip4_output_if>
 8019394:	4603      	mov	r3, r0
 8019396:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019398:	68b8      	ldr	r0, [r7, #8]
 801939a:	f7f9 fea3 	bl	80130e4 <pbuf_free>
  return err;
 801939e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80193a2:	4618      	mov	r0, r3
 80193a4:	3718      	adds	r7, #24
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}
 80193aa:	bf00      	nop
 80193ac:	080230f4 	.word	0x080230f4
 80193b0:	0802384c 	.word	0x0802384c
 80193b4:	08023148 	.word	0x08023148

080193b8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80193b8:	b590      	push	{r4, r7, lr}
 80193ba:	b08b      	sub	sp, #44	; 0x2c
 80193bc:	af04      	add	r7, sp, #16
 80193be:	60f8      	str	r0, [r7, #12]
 80193c0:	60b9      	str	r1, [r7, #8]
 80193c2:	607a      	str	r2, [r7, #4]
 80193c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80193c6:	683b      	ldr	r3, [r7, #0]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d106      	bne.n	80193da <tcp_rst+0x22>
 80193cc:	4b1f      	ldr	r3, [pc, #124]	; (801944c <tcp_rst+0x94>)
 80193ce:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80193d2:	491f      	ldr	r1, [pc, #124]	; (8019450 <tcp_rst+0x98>)
 80193d4:	481f      	ldr	r0, [pc, #124]	; (8019454 <tcp_rst+0x9c>)
 80193d6:	f006 fbef 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80193da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d106      	bne.n	80193ee <tcp_rst+0x36>
 80193e0:	4b1a      	ldr	r3, [pc, #104]	; (801944c <tcp_rst+0x94>)
 80193e2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80193e6:	491c      	ldr	r1, [pc, #112]	; (8019458 <tcp_rst+0xa0>)
 80193e8:	481a      	ldr	r0, [pc, #104]	; (8019454 <tcp_rst+0x9c>)
 80193ea:	f006 fbe5 	bl	801fbb8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80193ee:	2300      	movs	r3, #0
 80193f0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80193f2:	f246 0308 	movw	r3, #24584	; 0x6008
 80193f6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80193f8:	7dfb      	ldrb	r3, [r7, #23]
 80193fa:	b29c      	uxth	r4, r3
 80193fc:	68b8      	ldr	r0, [r7, #8]
 80193fe:	f7f8 face 	bl	801199e <lwip_htonl>
 8019402:	4602      	mov	r2, r0
 8019404:	8abb      	ldrh	r3, [r7, #20]
 8019406:	9303      	str	r3, [sp, #12]
 8019408:	2314      	movs	r3, #20
 801940a:	9302      	str	r3, [sp, #8]
 801940c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801940e:	9301      	str	r3, [sp, #4]
 8019410:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019412:	9300      	str	r3, [sp, #0]
 8019414:	4613      	mov	r3, r2
 8019416:	2200      	movs	r2, #0
 8019418:	4621      	mov	r1, r4
 801941a:	6878      	ldr	r0, [r7, #4]
 801941c:	f7ff fe92 	bl	8019144 <tcp_output_alloc_header_common>
 8019420:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8019422:	693b      	ldr	r3, [r7, #16]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d00c      	beq.n	8019442 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019428:	7dfb      	ldrb	r3, [r7, #23]
 801942a:	2200      	movs	r2, #0
 801942c:	6939      	ldr	r1, [r7, #16]
 801942e:	68f8      	ldr	r0, [r7, #12]
 8019430:	f7ff ff38 	bl	80192a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019436:	683a      	ldr	r2, [r7, #0]
 8019438:	6939      	ldr	r1, [r7, #16]
 801943a:	68f8      	ldr	r0, [r7, #12]
 801943c:	f7ff ff72 	bl	8019324 <tcp_output_control_segment>
 8019440:	e000      	b.n	8019444 <tcp_rst+0x8c>
    return;
 8019442:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019444:	371c      	adds	r7, #28
 8019446:	46bd      	mov	sp, r7
 8019448:	bd90      	pop	{r4, r7, pc}
 801944a:	bf00      	nop
 801944c:	080230f4 	.word	0x080230f4
 8019450:	08023878 	.word	0x08023878
 8019454:	08023148 	.word	0x08023148
 8019458:	08023894 	.word	0x08023894

0801945c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801945c:	b590      	push	{r4, r7, lr}
 801945e:	b087      	sub	sp, #28
 8019460:	af00      	add	r7, sp, #0
 8019462:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019464:	2300      	movs	r3, #0
 8019466:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019468:	2300      	movs	r3, #0
 801946a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d106      	bne.n	8019480 <tcp_send_empty_ack+0x24>
 8019472:	4b28      	ldr	r3, [pc, #160]	; (8019514 <tcp_send_empty_ack+0xb8>)
 8019474:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8019478:	4927      	ldr	r1, [pc, #156]	; (8019518 <tcp_send_empty_ack+0xbc>)
 801947a:	4828      	ldr	r0, [pc, #160]	; (801951c <tcp_send_empty_ack+0xc0>)
 801947c:	f006 fb9c 	bl	801fbb8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019480:	7dfb      	ldrb	r3, [r7, #23]
 8019482:	009b      	lsls	r3, r3, #2
 8019484:	b2db      	uxtb	r3, r3
 8019486:	f003 0304 	and.w	r3, r3, #4
 801948a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801948c:	7d7b      	ldrb	r3, [r7, #21]
 801948e:	b29c      	uxth	r4, r3
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019494:	4618      	mov	r0, r3
 8019496:	f7f8 fa82 	bl	801199e <lwip_htonl>
 801949a:	4603      	mov	r3, r0
 801949c:	2200      	movs	r2, #0
 801949e:	4621      	mov	r1, r4
 80194a0:	6878      	ldr	r0, [r7, #4]
 80194a2:	f7ff fec1 	bl	8019228 <tcp_output_alloc_header>
 80194a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80194a8:	693b      	ldr	r3, [r7, #16]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d109      	bne.n	80194c2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	8b5b      	ldrh	r3, [r3, #26]
 80194b2:	f043 0303 	orr.w	r3, r3, #3
 80194b6:	b29a      	uxth	r2, r3
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80194bc:	f06f 0301 	mvn.w	r3, #1
 80194c0:	e023      	b.n	801950a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80194c2:	7dbb      	ldrb	r3, [r7, #22]
 80194c4:	7dfa      	ldrb	r2, [r7, #23]
 80194c6:	6939      	ldr	r1, [r7, #16]
 80194c8:	6878      	ldr	r0, [r7, #4]
 80194ca:	f7ff feeb 	bl	80192a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80194ce:	687a      	ldr	r2, [r7, #4]
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	3304      	adds	r3, #4
 80194d4:	6939      	ldr	r1, [r7, #16]
 80194d6:	6878      	ldr	r0, [r7, #4]
 80194d8:	f7ff ff24 	bl	8019324 <tcp_output_control_segment>
 80194dc:	4603      	mov	r3, r0
 80194de:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80194e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d007      	beq.n	80194f8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	8b5b      	ldrh	r3, [r3, #26]
 80194ec:	f043 0303 	orr.w	r3, r3, #3
 80194f0:	b29a      	uxth	r2, r3
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	835a      	strh	r2, [r3, #26]
 80194f6:	e006      	b.n	8019506 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	8b5b      	ldrh	r3, [r3, #26]
 80194fc:	f023 0303 	bic.w	r3, r3, #3
 8019500:	b29a      	uxth	r2, r3
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801950a:	4618      	mov	r0, r3
 801950c:	371c      	adds	r7, #28
 801950e:	46bd      	mov	sp, r7
 8019510:	bd90      	pop	{r4, r7, pc}
 8019512:	bf00      	nop
 8019514:	080230f4 	.word	0x080230f4
 8019518:	080238b0 	.word	0x080238b0
 801951c:	08023148 	.word	0x08023148

08019520 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019520:	b590      	push	{r4, r7, lr}
 8019522:	b087      	sub	sp, #28
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019528:	2300      	movs	r3, #0
 801952a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d106      	bne.n	8019540 <tcp_keepalive+0x20>
 8019532:	4b18      	ldr	r3, [pc, #96]	; (8019594 <tcp_keepalive+0x74>)
 8019534:	f640 0224 	movw	r2, #2084	; 0x824
 8019538:	4917      	ldr	r1, [pc, #92]	; (8019598 <tcp_keepalive+0x78>)
 801953a:	4818      	ldr	r0, [pc, #96]	; (801959c <tcp_keepalive+0x7c>)
 801953c:	f006 fb3c 	bl	801fbb8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019540:	7dfb      	ldrb	r3, [r7, #23]
 8019542:	b29c      	uxth	r4, r3
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019548:	3b01      	subs	r3, #1
 801954a:	4618      	mov	r0, r3
 801954c:	f7f8 fa27 	bl	801199e <lwip_htonl>
 8019550:	4603      	mov	r3, r0
 8019552:	2200      	movs	r2, #0
 8019554:	4621      	mov	r1, r4
 8019556:	6878      	ldr	r0, [r7, #4]
 8019558:	f7ff fe66 	bl	8019228 <tcp_output_alloc_header>
 801955c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801955e:	693b      	ldr	r3, [r7, #16]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d102      	bne.n	801956a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019564:	f04f 33ff 	mov.w	r3, #4294967295
 8019568:	e010      	b.n	801958c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801956a:	7dfb      	ldrb	r3, [r7, #23]
 801956c:	2200      	movs	r2, #0
 801956e:	6939      	ldr	r1, [r7, #16]
 8019570:	6878      	ldr	r0, [r7, #4]
 8019572:	f7ff fe97 	bl	80192a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019576:	687a      	ldr	r2, [r7, #4]
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	3304      	adds	r3, #4
 801957c:	6939      	ldr	r1, [r7, #16]
 801957e:	6878      	ldr	r0, [r7, #4]
 8019580:	f7ff fed0 	bl	8019324 <tcp_output_control_segment>
 8019584:	4603      	mov	r3, r0
 8019586:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019588:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801958c:	4618      	mov	r0, r3
 801958e:	371c      	adds	r7, #28
 8019590:	46bd      	mov	sp, r7
 8019592:	bd90      	pop	{r4, r7, pc}
 8019594:	080230f4 	.word	0x080230f4
 8019598:	080238d0 	.word	0x080238d0
 801959c:	08023148 	.word	0x08023148

080195a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80195a0:	b590      	push	{r4, r7, lr}
 80195a2:	b08b      	sub	sp, #44	; 0x2c
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80195a8:	2300      	movs	r3, #0
 80195aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d106      	bne.n	80195c2 <tcp_zero_window_probe+0x22>
 80195b4:	4b4c      	ldr	r3, [pc, #304]	; (80196e8 <tcp_zero_window_probe+0x148>)
 80195b6:	f640 024f 	movw	r2, #2127	; 0x84f
 80195ba:	494c      	ldr	r1, [pc, #304]	; (80196ec <tcp_zero_window_probe+0x14c>)
 80195bc:	484c      	ldr	r0, [pc, #304]	; (80196f0 <tcp_zero_window_probe+0x150>)
 80195be:	f006 fafb 	bl	801fbb8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195c6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80195c8:	6a3b      	ldr	r3, [r7, #32]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d101      	bne.n	80195d2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80195ce:	2300      	movs	r3, #0
 80195d0:	e086      	b.n	80196e0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80195d8:	2bff      	cmp	r3, #255	; 0xff
 80195da:	d007      	beq.n	80195ec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80195e2:	3301      	adds	r3, #1
 80195e4:	b2da      	uxtb	r2, r3
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80195ec:	6a3b      	ldr	r3, [r7, #32]
 80195ee:	68db      	ldr	r3, [r3, #12]
 80195f0:	899b      	ldrh	r3, [r3, #12]
 80195f2:	b29b      	uxth	r3, r3
 80195f4:	4618      	mov	r0, r3
 80195f6:	f7f8 f9bd 	bl	8011974 <lwip_htons>
 80195fa:	4603      	mov	r3, r0
 80195fc:	b2db      	uxtb	r3, r3
 80195fe:	f003 0301 	and.w	r3, r3, #1
 8019602:	2b00      	cmp	r3, #0
 8019604:	d005      	beq.n	8019612 <tcp_zero_window_probe+0x72>
 8019606:	6a3b      	ldr	r3, [r7, #32]
 8019608:	891b      	ldrh	r3, [r3, #8]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d101      	bne.n	8019612 <tcp_zero_window_probe+0x72>
 801960e:	2301      	movs	r3, #1
 8019610:	e000      	b.n	8019614 <tcp_zero_window_probe+0x74>
 8019612:	2300      	movs	r3, #0
 8019614:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019616:	7ffb      	ldrb	r3, [r7, #31]
 8019618:	2b00      	cmp	r3, #0
 801961a:	bf0c      	ite	eq
 801961c:	2301      	moveq	r3, #1
 801961e:	2300      	movne	r3, #0
 8019620:	b2db      	uxtb	r3, r3
 8019622:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019628:	b299      	uxth	r1, r3
 801962a:	6a3b      	ldr	r3, [r7, #32]
 801962c:	68db      	ldr	r3, [r3, #12]
 801962e:	685b      	ldr	r3, [r3, #4]
 8019630:	8bba      	ldrh	r2, [r7, #28]
 8019632:	6878      	ldr	r0, [r7, #4]
 8019634:	f7ff fdf8 	bl	8019228 <tcp_output_alloc_header>
 8019638:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801963a:	69bb      	ldr	r3, [r7, #24]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d102      	bne.n	8019646 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019640:	f04f 33ff 	mov.w	r3, #4294967295
 8019644:	e04c      	b.n	80196e0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019646:	69bb      	ldr	r3, [r7, #24]
 8019648:	685b      	ldr	r3, [r3, #4]
 801964a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801964c:	7ffb      	ldrb	r3, [r7, #31]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d011      	beq.n	8019676 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019652:	697b      	ldr	r3, [r7, #20]
 8019654:	899b      	ldrh	r3, [r3, #12]
 8019656:	b29b      	uxth	r3, r3
 8019658:	b21b      	sxth	r3, r3
 801965a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801965e:	b21c      	sxth	r4, r3
 8019660:	2011      	movs	r0, #17
 8019662:	f7f8 f987 	bl	8011974 <lwip_htons>
 8019666:	4603      	mov	r3, r0
 8019668:	b21b      	sxth	r3, r3
 801966a:	4323      	orrs	r3, r4
 801966c:	b21b      	sxth	r3, r3
 801966e:	b29a      	uxth	r2, r3
 8019670:	697b      	ldr	r3, [r7, #20]
 8019672:	819a      	strh	r2, [r3, #12]
 8019674:	e010      	b.n	8019698 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019676:	69bb      	ldr	r3, [r7, #24]
 8019678:	685b      	ldr	r3, [r3, #4]
 801967a:	3314      	adds	r3, #20
 801967c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801967e:	6a3b      	ldr	r3, [r7, #32]
 8019680:	6858      	ldr	r0, [r3, #4]
 8019682:	6a3b      	ldr	r3, [r7, #32]
 8019684:	685b      	ldr	r3, [r3, #4]
 8019686:	891a      	ldrh	r2, [r3, #8]
 8019688:	6a3b      	ldr	r3, [r7, #32]
 801968a:	891b      	ldrh	r3, [r3, #8]
 801968c:	1ad3      	subs	r3, r2, r3
 801968e:	b29b      	uxth	r3, r3
 8019690:	2201      	movs	r2, #1
 8019692:	6939      	ldr	r1, [r7, #16]
 8019694:	f7f9 ff2c 	bl	80134f0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019698:	6a3b      	ldr	r3, [r7, #32]
 801969a:	68db      	ldr	r3, [r3, #12]
 801969c:	685b      	ldr	r3, [r3, #4]
 801969e:	4618      	mov	r0, r3
 80196a0:	f7f8 f97d 	bl	801199e <lwip_htonl>
 80196a4:	4603      	mov	r3, r0
 80196a6:	3301      	adds	r3, #1
 80196a8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	1ad3      	subs	r3, r2, r3
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	da02      	bge.n	80196bc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	68fa      	ldr	r2, [r7, #12]
 80196ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80196bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196c0:	2200      	movs	r2, #0
 80196c2:	69b9      	ldr	r1, [r7, #24]
 80196c4:	6878      	ldr	r0, [r7, #4]
 80196c6:	f7ff fded 	bl	80192a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80196ca:	687a      	ldr	r2, [r7, #4]
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	3304      	adds	r3, #4
 80196d0:	69b9      	ldr	r1, [r7, #24]
 80196d2:	6878      	ldr	r0, [r7, #4]
 80196d4:	f7ff fe26 	bl	8019324 <tcp_output_control_segment>
 80196d8:	4603      	mov	r3, r0
 80196da:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80196dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	372c      	adds	r7, #44	; 0x2c
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd90      	pop	{r4, r7, pc}
 80196e8:	080230f4 	.word	0x080230f4
 80196ec:	080238ec 	.word	0x080238ec
 80196f0:	08023148 	.word	0x08023148

080196f4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b082      	sub	sp, #8
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80196fc:	f7f9 ffe6 	bl	80136cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019700:	4b0a      	ldr	r3, [pc, #40]	; (801972c <tcpip_tcp_timer+0x38>)
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d103      	bne.n	8019710 <tcpip_tcp_timer+0x1c>
 8019708:	4b09      	ldr	r3, [pc, #36]	; (8019730 <tcpip_tcp_timer+0x3c>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d005      	beq.n	801971c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019710:	2200      	movs	r2, #0
 8019712:	4908      	ldr	r1, [pc, #32]	; (8019734 <tcpip_tcp_timer+0x40>)
 8019714:	20fa      	movs	r0, #250	; 0xfa
 8019716:	f000 f8f3 	bl	8019900 <sys_timeout>
 801971a:	e003      	b.n	8019724 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801971c:	4b06      	ldr	r3, [pc, #24]	; (8019738 <tcpip_tcp_timer+0x44>)
 801971e:	2200      	movs	r2, #0
 8019720:	601a      	str	r2, [r3, #0]
  }
}
 8019722:	bf00      	nop
 8019724:	bf00      	nop
 8019726:	3708      	adds	r7, #8
 8019728:	46bd      	mov	sp, r7
 801972a:	bd80      	pop	{r7, pc}
 801972c:	2000e9f4 	.word	0x2000e9f4
 8019730:	2000ea04 	.word	0x2000ea04
 8019734:	080196f5 	.word	0x080196f5
 8019738:	20005fe8 	.word	0x20005fe8

0801973c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801973c:	b580      	push	{r7, lr}
 801973e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019740:	4b0a      	ldr	r3, [pc, #40]	; (801976c <tcp_timer_needed+0x30>)
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d10f      	bne.n	8019768 <tcp_timer_needed+0x2c>
 8019748:	4b09      	ldr	r3, [pc, #36]	; (8019770 <tcp_timer_needed+0x34>)
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	2b00      	cmp	r3, #0
 801974e:	d103      	bne.n	8019758 <tcp_timer_needed+0x1c>
 8019750:	4b08      	ldr	r3, [pc, #32]	; (8019774 <tcp_timer_needed+0x38>)
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d007      	beq.n	8019768 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019758:	4b04      	ldr	r3, [pc, #16]	; (801976c <tcp_timer_needed+0x30>)
 801975a:	2201      	movs	r2, #1
 801975c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801975e:	2200      	movs	r2, #0
 8019760:	4905      	ldr	r1, [pc, #20]	; (8019778 <tcp_timer_needed+0x3c>)
 8019762:	20fa      	movs	r0, #250	; 0xfa
 8019764:	f000 f8cc 	bl	8019900 <sys_timeout>
  }
}
 8019768:	bf00      	nop
 801976a:	bd80      	pop	{r7, pc}
 801976c:	20005fe8 	.word	0x20005fe8
 8019770:	2000e9f4 	.word	0x2000e9f4
 8019774:	2000ea04 	.word	0x2000ea04
 8019778:	080196f5 	.word	0x080196f5

0801977c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b086      	sub	sp, #24
 8019780:	af00      	add	r7, sp, #0
 8019782:	60f8      	str	r0, [r7, #12]
 8019784:	60b9      	str	r1, [r7, #8]
 8019786:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019788:	200a      	movs	r0, #10
 801978a:	f7f8 fda9 	bl	80122e0 <memp_malloc>
 801978e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019790:	693b      	ldr	r3, [r7, #16]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d109      	bne.n	80197aa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019796:	693b      	ldr	r3, [r7, #16]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d151      	bne.n	8019840 <sys_timeout_abs+0xc4>
 801979c:	4b2a      	ldr	r3, [pc, #168]	; (8019848 <sys_timeout_abs+0xcc>)
 801979e:	22be      	movs	r2, #190	; 0xbe
 80197a0:	492a      	ldr	r1, [pc, #168]	; (801984c <sys_timeout_abs+0xd0>)
 80197a2:	482b      	ldr	r0, [pc, #172]	; (8019850 <sys_timeout_abs+0xd4>)
 80197a4:	f006 fa08 	bl	801fbb8 <iprintf>
    return;
 80197a8:	e04a      	b.n	8019840 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80197aa:	693b      	ldr	r3, [r7, #16]
 80197ac:	2200      	movs	r2, #0
 80197ae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80197b0:	693b      	ldr	r3, [r7, #16]
 80197b2:	68ba      	ldr	r2, [r7, #8]
 80197b4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80197b6:	693b      	ldr	r3, [r7, #16]
 80197b8:	687a      	ldr	r2, [r7, #4]
 80197ba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80197bc:	693b      	ldr	r3, [r7, #16]
 80197be:	68fa      	ldr	r2, [r7, #12]
 80197c0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80197c2:	4b24      	ldr	r3, [pc, #144]	; (8019854 <sys_timeout_abs+0xd8>)
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d103      	bne.n	80197d2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80197ca:	4a22      	ldr	r2, [pc, #136]	; (8019854 <sys_timeout_abs+0xd8>)
 80197cc:	693b      	ldr	r3, [r7, #16]
 80197ce:	6013      	str	r3, [r2, #0]
    return;
 80197d0:	e037      	b.n	8019842 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80197d2:	693b      	ldr	r3, [r7, #16]
 80197d4:	685a      	ldr	r2, [r3, #4]
 80197d6:	4b1f      	ldr	r3, [pc, #124]	; (8019854 <sys_timeout_abs+0xd8>)
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	685b      	ldr	r3, [r3, #4]
 80197dc:	1ad3      	subs	r3, r2, r3
 80197de:	0fdb      	lsrs	r3, r3, #31
 80197e0:	f003 0301 	and.w	r3, r3, #1
 80197e4:	b2db      	uxtb	r3, r3
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d007      	beq.n	80197fa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80197ea:	4b1a      	ldr	r3, [pc, #104]	; (8019854 <sys_timeout_abs+0xd8>)
 80197ec:	681a      	ldr	r2, [r3, #0]
 80197ee:	693b      	ldr	r3, [r7, #16]
 80197f0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80197f2:	4a18      	ldr	r2, [pc, #96]	; (8019854 <sys_timeout_abs+0xd8>)
 80197f4:	693b      	ldr	r3, [r7, #16]
 80197f6:	6013      	str	r3, [r2, #0]
 80197f8:	e023      	b.n	8019842 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80197fa:	4b16      	ldr	r3, [pc, #88]	; (8019854 <sys_timeout_abs+0xd8>)
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	617b      	str	r3, [r7, #20]
 8019800:	e01a      	b.n	8019838 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019802:	697b      	ldr	r3, [r7, #20]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d00b      	beq.n	8019822 <sys_timeout_abs+0xa6>
 801980a:	693b      	ldr	r3, [r7, #16]
 801980c:	685a      	ldr	r2, [r3, #4]
 801980e:	697b      	ldr	r3, [r7, #20]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	685b      	ldr	r3, [r3, #4]
 8019814:	1ad3      	subs	r3, r2, r3
 8019816:	0fdb      	lsrs	r3, r3, #31
 8019818:	f003 0301 	and.w	r3, r3, #1
 801981c:	b2db      	uxtb	r3, r3
 801981e:	2b00      	cmp	r3, #0
 8019820:	d007      	beq.n	8019832 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019822:	697b      	ldr	r3, [r7, #20]
 8019824:	681a      	ldr	r2, [r3, #0]
 8019826:	693b      	ldr	r3, [r7, #16]
 8019828:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801982a:	697b      	ldr	r3, [r7, #20]
 801982c:	693a      	ldr	r2, [r7, #16]
 801982e:	601a      	str	r2, [r3, #0]
        break;
 8019830:	e007      	b.n	8019842 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019832:	697b      	ldr	r3, [r7, #20]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	617b      	str	r3, [r7, #20]
 8019838:	697b      	ldr	r3, [r7, #20]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d1e1      	bne.n	8019802 <sys_timeout_abs+0x86>
 801983e:	e000      	b.n	8019842 <sys_timeout_abs+0xc6>
    return;
 8019840:	bf00      	nop
      }
    }
  }
}
 8019842:	3718      	adds	r7, #24
 8019844:	46bd      	mov	sp, r7
 8019846:	bd80      	pop	{r7, pc}
 8019848:	08023910 	.word	0x08023910
 801984c:	08023944 	.word	0x08023944
 8019850:	08023984 	.word	0x08023984
 8019854:	20005fe0 	.word	0x20005fe0

08019858 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b086      	sub	sp, #24
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019864:	697b      	ldr	r3, [r7, #20]
 8019866:	685b      	ldr	r3, [r3, #4]
 8019868:	4798      	blx	r3

  now = sys_now();
 801986a:	f7f1 fc61 	bl	800b130 <sys_now>
 801986e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019870:	697b      	ldr	r3, [r7, #20]
 8019872:	681a      	ldr	r2, [r3, #0]
 8019874:	4b0f      	ldr	r3, [pc, #60]	; (80198b4 <lwip_cyclic_timer+0x5c>)
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	4413      	add	r3, r2
 801987a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801987c:	68fa      	ldr	r2, [r7, #12]
 801987e:	693b      	ldr	r3, [r7, #16]
 8019880:	1ad3      	subs	r3, r2, r3
 8019882:	0fdb      	lsrs	r3, r3, #31
 8019884:	f003 0301 	and.w	r3, r3, #1
 8019888:	b2db      	uxtb	r3, r3
 801988a:	2b00      	cmp	r3, #0
 801988c:	d009      	beq.n	80198a2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801988e:	697b      	ldr	r3, [r7, #20]
 8019890:	681a      	ldr	r2, [r3, #0]
 8019892:	693b      	ldr	r3, [r7, #16]
 8019894:	4413      	add	r3, r2
 8019896:	687a      	ldr	r2, [r7, #4]
 8019898:	4907      	ldr	r1, [pc, #28]	; (80198b8 <lwip_cyclic_timer+0x60>)
 801989a:	4618      	mov	r0, r3
 801989c:	f7ff ff6e 	bl	801977c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80198a0:	e004      	b.n	80198ac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80198a2:	687a      	ldr	r2, [r7, #4]
 80198a4:	4904      	ldr	r1, [pc, #16]	; (80198b8 <lwip_cyclic_timer+0x60>)
 80198a6:	68f8      	ldr	r0, [r7, #12]
 80198a8:	f7ff ff68 	bl	801977c <sys_timeout_abs>
}
 80198ac:	bf00      	nop
 80198ae:	3718      	adds	r7, #24
 80198b0:	46bd      	mov	sp, r7
 80198b2:	bd80      	pop	{r7, pc}
 80198b4:	20005fe4 	.word	0x20005fe4
 80198b8:	08019859 	.word	0x08019859

080198bc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b082      	sub	sp, #8
 80198c0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80198c2:	2301      	movs	r3, #1
 80198c4:	607b      	str	r3, [r7, #4]
 80198c6:	e00e      	b.n	80198e6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80198c8:	4a0b      	ldr	r2, [pc, #44]	; (80198f8 <sys_timeouts_init+0x3c>)
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	00db      	lsls	r3, r3, #3
 80198d4:	4a08      	ldr	r2, [pc, #32]	; (80198f8 <sys_timeouts_init+0x3c>)
 80198d6:	4413      	add	r3, r2
 80198d8:	461a      	mov	r2, r3
 80198da:	4908      	ldr	r1, [pc, #32]	; (80198fc <sys_timeouts_init+0x40>)
 80198dc:	f000 f810 	bl	8019900 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	3301      	adds	r3, #1
 80198e4:	607b      	str	r3, [r7, #4]
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	2b04      	cmp	r3, #4
 80198ea:	d9ed      	bls.n	80198c8 <sys_timeouts_init+0xc>
  }
}
 80198ec:	bf00      	nop
 80198ee:	bf00      	nop
 80198f0:	3708      	adds	r7, #8
 80198f2:	46bd      	mov	sp, r7
 80198f4:	bd80      	pop	{r7, pc}
 80198f6:	bf00      	nop
 80198f8:	08024a20 	.word	0x08024a20
 80198fc:	08019859 	.word	0x08019859

08019900 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b086      	sub	sp, #24
 8019904:	af00      	add	r7, sp, #0
 8019906:	60f8      	str	r0, [r7, #12]
 8019908:	60b9      	str	r1, [r7, #8]
 801990a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019912:	d306      	bcc.n	8019922 <sys_timeout+0x22>
 8019914:	4b0a      	ldr	r3, [pc, #40]	; (8019940 <sys_timeout+0x40>)
 8019916:	f240 1229 	movw	r2, #297	; 0x129
 801991a:	490a      	ldr	r1, [pc, #40]	; (8019944 <sys_timeout+0x44>)
 801991c:	480a      	ldr	r0, [pc, #40]	; (8019948 <sys_timeout+0x48>)
 801991e:	f006 f94b 	bl	801fbb8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019922:	f7f1 fc05 	bl	800b130 <sys_now>
 8019926:	4602      	mov	r2, r0
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	4413      	add	r3, r2
 801992c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801992e:	687a      	ldr	r2, [r7, #4]
 8019930:	68b9      	ldr	r1, [r7, #8]
 8019932:	6978      	ldr	r0, [r7, #20]
 8019934:	f7ff ff22 	bl	801977c <sys_timeout_abs>
#endif
}
 8019938:	bf00      	nop
 801993a:	3718      	adds	r7, #24
 801993c:	46bd      	mov	sp, r7
 801993e:	bd80      	pop	{r7, pc}
 8019940:	08023910 	.word	0x08023910
 8019944:	080239ac 	.word	0x080239ac
 8019948:	08023984 	.word	0x08023984

0801994c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801994c:	b580      	push	{r7, lr}
 801994e:	b084      	sub	sp, #16
 8019950:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019952:	f7f1 fbed 	bl	800b130 <sys_now>
 8019956:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019958:	4b17      	ldr	r3, [pc, #92]	; (80199b8 <sys_check_timeouts+0x6c>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801995e:	68bb      	ldr	r3, [r7, #8]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d022      	beq.n	80199aa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	685b      	ldr	r3, [r3, #4]
 8019968:	68fa      	ldr	r2, [r7, #12]
 801996a:	1ad3      	subs	r3, r2, r3
 801996c:	0fdb      	lsrs	r3, r3, #31
 801996e:	f003 0301 	and.w	r3, r3, #1
 8019972:	b2db      	uxtb	r3, r3
 8019974:	2b00      	cmp	r3, #0
 8019976:	d11a      	bne.n	80199ae <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019978:	68bb      	ldr	r3, [r7, #8]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	4a0e      	ldr	r2, [pc, #56]	; (80199b8 <sys_check_timeouts+0x6c>)
 801997e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019980:	68bb      	ldr	r3, [r7, #8]
 8019982:	689b      	ldr	r3, [r3, #8]
 8019984:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019986:	68bb      	ldr	r3, [r7, #8]
 8019988:	68db      	ldr	r3, [r3, #12]
 801998a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801998c:	68bb      	ldr	r3, [r7, #8]
 801998e:	685b      	ldr	r3, [r3, #4]
 8019990:	4a0a      	ldr	r2, [pc, #40]	; (80199bc <sys_check_timeouts+0x70>)
 8019992:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019994:	68b9      	ldr	r1, [r7, #8]
 8019996:	200a      	movs	r0, #10
 8019998:	f7f8 fcf4 	bl	8012384 <memp_free>
    if (handler != NULL) {
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d0da      	beq.n	8019958 <sys_check_timeouts+0xc>
      handler(arg);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	6838      	ldr	r0, [r7, #0]
 80199a6:	4798      	blx	r3
  do {
 80199a8:	e7d6      	b.n	8019958 <sys_check_timeouts+0xc>
      return;
 80199aa:	bf00      	nop
 80199ac:	e000      	b.n	80199b0 <sys_check_timeouts+0x64>
      return;
 80199ae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80199b0:	3710      	adds	r7, #16
 80199b2:	46bd      	mov	sp, r7
 80199b4:	bd80      	pop	{r7, pc}
 80199b6:	bf00      	nop
 80199b8:	20005fe0 	.word	0x20005fe0
 80199bc:	20005fe4 	.word	0x20005fe4

080199c0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b082      	sub	sp, #8
 80199c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80199c6:	4b16      	ldr	r3, [pc, #88]	; (8019a20 <sys_timeouts_sleeptime+0x60>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d102      	bne.n	80199d4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80199ce:	f04f 33ff 	mov.w	r3, #4294967295
 80199d2:	e020      	b.n	8019a16 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80199d4:	f7f1 fbac 	bl	800b130 <sys_now>
 80199d8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80199da:	4b11      	ldr	r3, [pc, #68]	; (8019a20 <sys_timeouts_sleeptime+0x60>)
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	685a      	ldr	r2, [r3, #4]
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	1ad3      	subs	r3, r2, r3
 80199e4:	0fdb      	lsrs	r3, r3, #31
 80199e6:	f003 0301 	and.w	r3, r3, #1
 80199ea:	b2db      	uxtb	r3, r3
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d001      	beq.n	80199f4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80199f0:	2300      	movs	r3, #0
 80199f2:	e010      	b.n	8019a16 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80199f4:	4b0a      	ldr	r3, [pc, #40]	; (8019a20 <sys_timeouts_sleeptime+0x60>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	685a      	ldr	r2, [r3, #4]
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	1ad3      	subs	r3, r2, r3
 80199fe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	da06      	bge.n	8019a14 <sys_timeouts_sleeptime+0x54>
 8019a06:	4b07      	ldr	r3, [pc, #28]	; (8019a24 <sys_timeouts_sleeptime+0x64>)
 8019a08:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019a0c:	4906      	ldr	r1, [pc, #24]	; (8019a28 <sys_timeouts_sleeptime+0x68>)
 8019a0e:	4807      	ldr	r0, [pc, #28]	; (8019a2c <sys_timeouts_sleeptime+0x6c>)
 8019a10:	f006 f8d2 	bl	801fbb8 <iprintf>
    return ret;
 8019a14:	683b      	ldr	r3, [r7, #0]
  }
}
 8019a16:	4618      	mov	r0, r3
 8019a18:	3708      	adds	r7, #8
 8019a1a:	46bd      	mov	sp, r7
 8019a1c:	bd80      	pop	{r7, pc}
 8019a1e:	bf00      	nop
 8019a20:	20005fe0 	.word	0x20005fe0
 8019a24:	08023910 	.word	0x08023910
 8019a28:	080239e4 	.word	0x080239e4
 8019a2c:	08023984 	.word	0x08023984

08019a30 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019a30:	b580      	push	{r7, lr}
 8019a32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019a34:	f006 f8d8 	bl	801fbe8 <rand>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	b29b      	uxth	r3, r3
 8019a3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019a40:	b29b      	uxth	r3, r3
 8019a42:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019a46:	b29a      	uxth	r2, r3
 8019a48:	4b01      	ldr	r3, [pc, #4]	; (8019a50 <udp_init+0x20>)
 8019a4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019a4c:	bf00      	nop
 8019a4e:	bd80      	pop	{r7, pc}
 8019a50:	200000ec 	.word	0x200000ec

08019a54 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019a54:	b480      	push	{r7}
 8019a56:	b083      	sub	sp, #12
 8019a58:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019a5e:	4b17      	ldr	r3, [pc, #92]	; (8019abc <udp_new_port+0x68>)
 8019a60:	881b      	ldrh	r3, [r3, #0]
 8019a62:	1c5a      	adds	r2, r3, #1
 8019a64:	b291      	uxth	r1, r2
 8019a66:	4a15      	ldr	r2, [pc, #84]	; (8019abc <udp_new_port+0x68>)
 8019a68:	8011      	strh	r1, [r2, #0]
 8019a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a6e:	4293      	cmp	r3, r2
 8019a70:	d103      	bne.n	8019a7a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019a72:	4b12      	ldr	r3, [pc, #72]	; (8019abc <udp_new_port+0x68>)
 8019a74:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019a78:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019a7a:	4b11      	ldr	r3, [pc, #68]	; (8019ac0 <udp_new_port+0x6c>)
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	603b      	str	r3, [r7, #0]
 8019a80:	e011      	b.n	8019aa6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	8a5a      	ldrh	r2, [r3, #18]
 8019a86:	4b0d      	ldr	r3, [pc, #52]	; (8019abc <udp_new_port+0x68>)
 8019a88:	881b      	ldrh	r3, [r3, #0]
 8019a8a:	429a      	cmp	r2, r3
 8019a8c:	d108      	bne.n	8019aa0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019a8e:	88fb      	ldrh	r3, [r7, #6]
 8019a90:	3301      	adds	r3, #1
 8019a92:	80fb      	strh	r3, [r7, #6]
 8019a94:	88fb      	ldrh	r3, [r7, #6]
 8019a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019a9a:	d3e0      	bcc.n	8019a5e <udp_new_port+0xa>
        return 0;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	e007      	b.n	8019ab0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019aa0:	683b      	ldr	r3, [r7, #0]
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	603b      	str	r3, [r7, #0]
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d1ea      	bne.n	8019a82 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019aac:	4b03      	ldr	r3, [pc, #12]	; (8019abc <udp_new_port+0x68>)
 8019aae:	881b      	ldrh	r3, [r3, #0]
}
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	370c      	adds	r7, #12
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aba:	4770      	bx	lr
 8019abc:	200000ec 	.word	0x200000ec
 8019ac0:	2000ea0c 	.word	0x2000ea0c

08019ac4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b084      	sub	sp, #16
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	60f8      	str	r0, [r7, #12]
 8019acc:	60b9      	str	r1, [r7, #8]
 8019ace:	4613      	mov	r3, r2
 8019ad0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d105      	bne.n	8019ae4 <udp_input_local_match+0x20>
 8019ad8:	4b27      	ldr	r3, [pc, #156]	; (8019b78 <udp_input_local_match+0xb4>)
 8019ada:	2287      	movs	r2, #135	; 0x87
 8019adc:	4927      	ldr	r1, [pc, #156]	; (8019b7c <udp_input_local_match+0xb8>)
 8019ade:	4828      	ldr	r0, [pc, #160]	; (8019b80 <udp_input_local_match+0xbc>)
 8019ae0:	f006 f86a 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d105      	bne.n	8019af6 <udp_input_local_match+0x32>
 8019aea:	4b23      	ldr	r3, [pc, #140]	; (8019b78 <udp_input_local_match+0xb4>)
 8019aec:	2288      	movs	r2, #136	; 0x88
 8019aee:	4925      	ldr	r1, [pc, #148]	; (8019b84 <udp_input_local_match+0xc0>)
 8019af0:	4823      	ldr	r0, [pc, #140]	; (8019b80 <udp_input_local_match+0xbc>)
 8019af2:	f006 f861 	bl	801fbb8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	7a1b      	ldrb	r3, [r3, #8]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d00b      	beq.n	8019b16 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	7a1a      	ldrb	r2, [r3, #8]
 8019b02:	4b21      	ldr	r3, [pc, #132]	; (8019b88 <udp_input_local_match+0xc4>)
 8019b04:	685b      	ldr	r3, [r3, #4]
 8019b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019b0a:	3301      	adds	r3, #1
 8019b0c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019b0e:	429a      	cmp	r2, r3
 8019b10:	d001      	beq.n	8019b16 <udp_input_local_match+0x52>
    return 0;
 8019b12:	2300      	movs	r3, #0
 8019b14:	e02b      	b.n	8019b6e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019b16:	79fb      	ldrb	r3, [r7, #7]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d018      	beq.n	8019b4e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d013      	beq.n	8019b4a <udp_input_local_match+0x86>
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d00f      	beq.n	8019b4a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019b2a:	4b17      	ldr	r3, [pc, #92]	; (8019b88 <udp_input_local_match+0xc4>)
 8019b2c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b32:	d00a      	beq.n	8019b4a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	681a      	ldr	r2, [r3, #0]
 8019b38:	4b13      	ldr	r3, [pc, #76]	; (8019b88 <udp_input_local_match+0xc4>)
 8019b3a:	695b      	ldr	r3, [r3, #20]
 8019b3c:	405a      	eors	r2, r3
 8019b3e:	68bb      	ldr	r3, [r7, #8]
 8019b40:	3308      	adds	r3, #8
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d110      	bne.n	8019b6c <udp_input_local_match+0xa8>
          return 1;
 8019b4a:	2301      	movs	r3, #1
 8019b4c:	e00f      	b.n	8019b6e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d009      	beq.n	8019b68 <udp_input_local_match+0xa4>
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d005      	beq.n	8019b68 <udp_input_local_match+0xa4>
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	681a      	ldr	r2, [r3, #0]
 8019b60:	4b09      	ldr	r3, [pc, #36]	; (8019b88 <udp_input_local_match+0xc4>)
 8019b62:	695b      	ldr	r3, [r3, #20]
 8019b64:	429a      	cmp	r2, r3
 8019b66:	d101      	bne.n	8019b6c <udp_input_local_match+0xa8>
        return 1;
 8019b68:	2301      	movs	r3, #1
 8019b6a:	e000      	b.n	8019b6e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019b6c:	2300      	movs	r3, #0
}
 8019b6e:	4618      	mov	r0, r3
 8019b70:	3710      	adds	r7, #16
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd80      	pop	{r7, pc}
 8019b76:	bf00      	nop
 8019b78:	080239f8 	.word	0x080239f8
 8019b7c:	08023a28 	.word	0x08023a28
 8019b80:	08023a4c 	.word	0x08023a4c
 8019b84:	08023a74 	.word	0x08023a74
 8019b88:	2000b2c0 	.word	0x2000b2c0

08019b8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019b8c:	b590      	push	{r4, r7, lr}
 8019b8e:	b08d      	sub	sp, #52	; 0x34
 8019b90:	af02      	add	r7, sp, #8
 8019b92:	6078      	str	r0, [r7, #4]
 8019b94:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019b96:	2300      	movs	r3, #0
 8019b98:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d105      	bne.n	8019bac <udp_input+0x20>
 8019ba0:	4b7c      	ldr	r3, [pc, #496]	; (8019d94 <udp_input+0x208>)
 8019ba2:	22cf      	movs	r2, #207	; 0xcf
 8019ba4:	497c      	ldr	r1, [pc, #496]	; (8019d98 <udp_input+0x20c>)
 8019ba6:	487d      	ldr	r0, [pc, #500]	; (8019d9c <udp_input+0x210>)
 8019ba8:	f006 f806 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d105      	bne.n	8019bbe <udp_input+0x32>
 8019bb2:	4b78      	ldr	r3, [pc, #480]	; (8019d94 <udp_input+0x208>)
 8019bb4:	22d0      	movs	r2, #208	; 0xd0
 8019bb6:	497a      	ldr	r1, [pc, #488]	; (8019da0 <udp_input+0x214>)
 8019bb8:	4878      	ldr	r0, [pc, #480]	; (8019d9c <udp_input+0x210>)
 8019bba:	f005 fffd 	bl	801fbb8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	895b      	ldrh	r3, [r3, #10]
 8019bc2:	2b07      	cmp	r3, #7
 8019bc4:	d803      	bhi.n	8019bce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019bc6:	6878      	ldr	r0, [r7, #4]
 8019bc8:	f7f9 fa8c 	bl	80130e4 <pbuf_free>
    goto end;
 8019bcc:	e0de      	b.n	8019d8c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	685b      	ldr	r3, [r3, #4]
 8019bd2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019bd4:	4b73      	ldr	r3, [pc, #460]	; (8019da4 <udp_input+0x218>)
 8019bd6:	695b      	ldr	r3, [r3, #20]
 8019bd8:	4a72      	ldr	r2, [pc, #456]	; (8019da4 <udp_input+0x218>)
 8019bda:	6812      	ldr	r2, [r2, #0]
 8019bdc:	4611      	mov	r1, r2
 8019bde:	4618      	mov	r0, r3
 8019be0:	f003 fe12 	bl	801d808 <ip4_addr_isbroadcast_u32>
 8019be4:	4603      	mov	r3, r0
 8019be6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019be8:	697b      	ldr	r3, [r7, #20]
 8019bea:	881b      	ldrh	r3, [r3, #0]
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f7f7 fec0 	bl	8011974 <lwip_htons>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019bf8:	697b      	ldr	r3, [r7, #20]
 8019bfa:	885b      	ldrh	r3, [r3, #2]
 8019bfc:	b29b      	uxth	r3, r3
 8019bfe:	4618      	mov	r0, r3
 8019c00:	f7f7 feb8 	bl	8011974 <lwip_htons>
 8019c04:	4603      	mov	r3, r0
 8019c06:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019c08:	2300      	movs	r3, #0
 8019c0a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019c10:	2300      	movs	r3, #0
 8019c12:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019c14:	4b64      	ldr	r3, [pc, #400]	; (8019da8 <udp_input+0x21c>)
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	627b      	str	r3, [r7, #36]	; 0x24
 8019c1a:	e054      	b.n	8019cc6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c1e:	8a5b      	ldrh	r3, [r3, #18]
 8019c20:	89fa      	ldrh	r2, [r7, #14]
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d14a      	bne.n	8019cbc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019c26:	7cfb      	ldrb	r3, [r7, #19]
 8019c28:	461a      	mov	r2, r3
 8019c2a:	6839      	ldr	r1, [r7, #0]
 8019c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c2e:	f7ff ff49 	bl	8019ac4 <udp_input_local_match>
 8019c32:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d041      	beq.n	8019cbc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3a:	7c1b      	ldrb	r3, [r3, #16]
 8019c3c:	f003 0304 	and.w	r3, r3, #4
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d11d      	bne.n	8019c80 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019c44:	69fb      	ldr	r3, [r7, #28]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d102      	bne.n	8019c50 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4c:	61fb      	str	r3, [r7, #28]
 8019c4e:	e017      	b.n	8019c80 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019c50:	7cfb      	ldrb	r3, [r7, #19]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d014      	beq.n	8019c80 <udp_input+0xf4>
 8019c56:	4b53      	ldr	r3, [pc, #332]	; (8019da4 <udp_input+0x218>)
 8019c58:	695b      	ldr	r3, [r3, #20]
 8019c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c5e:	d10f      	bne.n	8019c80 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019c60:	69fb      	ldr	r3, [r7, #28]
 8019c62:	681a      	ldr	r2, [r3, #0]
 8019c64:	683b      	ldr	r3, [r7, #0]
 8019c66:	3304      	adds	r3, #4
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	429a      	cmp	r2, r3
 8019c6c:	d008      	beq.n	8019c80 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c70:	681a      	ldr	r2, [r3, #0]
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	3304      	adds	r3, #4
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	429a      	cmp	r2, r3
 8019c7a:	d101      	bne.n	8019c80 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c7e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c82:	8a9b      	ldrh	r3, [r3, #20]
 8019c84:	8a3a      	ldrh	r2, [r7, #16]
 8019c86:	429a      	cmp	r2, r3
 8019c88:	d118      	bne.n	8019cbc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d005      	beq.n	8019c9e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c94:	685a      	ldr	r2, [r3, #4]
 8019c96:	4b43      	ldr	r3, [pc, #268]	; (8019da4 <udp_input+0x218>)
 8019c98:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019c9a:	429a      	cmp	r2, r3
 8019c9c:	d10e      	bne.n	8019cbc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019c9e:	6a3b      	ldr	r3, [r7, #32]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d014      	beq.n	8019cce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca6:	68da      	ldr	r2, [r3, #12]
 8019ca8:	6a3b      	ldr	r3, [r7, #32]
 8019caa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019cac:	4b3e      	ldr	r3, [pc, #248]	; (8019da8 <udp_input+0x21c>)
 8019cae:	681a      	ldr	r2, [r3, #0]
 8019cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cb2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019cb4:	4a3c      	ldr	r2, [pc, #240]	; (8019da8 <udp_input+0x21c>)
 8019cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cb8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019cba:	e008      	b.n	8019cce <udp_input+0x142>
      }
    }

    prev = pcb;
 8019cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cbe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc2:	68db      	ldr	r3, [r3, #12]
 8019cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8019cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d1a7      	bne.n	8019c1c <udp_input+0x90>
 8019ccc:	e000      	b.n	8019cd0 <udp_input+0x144>
        break;
 8019cce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d101      	bne.n	8019cda <udp_input+0x14e>
    pcb = uncon_pcb;
 8019cd6:	69fb      	ldr	r3, [r7, #28]
 8019cd8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d002      	beq.n	8019ce6 <udp_input+0x15a>
    for_us = 1;
 8019ce0:	2301      	movs	r3, #1
 8019ce2:	76fb      	strb	r3, [r7, #27]
 8019ce4:	e00a      	b.n	8019cfc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019ce6:	683b      	ldr	r3, [r7, #0]
 8019ce8:	3304      	adds	r3, #4
 8019cea:	681a      	ldr	r2, [r3, #0]
 8019cec:	4b2d      	ldr	r3, [pc, #180]	; (8019da4 <udp_input+0x218>)
 8019cee:	695b      	ldr	r3, [r3, #20]
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	bf0c      	ite	eq
 8019cf4:	2301      	moveq	r3, #1
 8019cf6:	2300      	movne	r3, #0
 8019cf8:	b2db      	uxtb	r3, r3
 8019cfa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019cfc:	7efb      	ldrb	r3, [r7, #27]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d041      	beq.n	8019d86 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019d02:	2108      	movs	r1, #8
 8019d04:	6878      	ldr	r0, [r7, #4]
 8019d06:	f7f9 f967 	bl	8012fd8 <pbuf_remove_header>
 8019d0a:	4603      	mov	r3, r0
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d00a      	beq.n	8019d26 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019d10:	4b20      	ldr	r3, [pc, #128]	; (8019d94 <udp_input+0x208>)
 8019d12:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8019d16:	4925      	ldr	r1, [pc, #148]	; (8019dac <udp_input+0x220>)
 8019d18:	4820      	ldr	r0, [pc, #128]	; (8019d9c <udp_input+0x210>)
 8019d1a:	f005 ff4d 	bl	801fbb8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019d1e:	6878      	ldr	r0, [r7, #4]
 8019d20:	f7f9 f9e0 	bl	80130e4 <pbuf_free>
      goto end;
 8019d24:	e032      	b.n	8019d8c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d012      	beq.n	8019d52 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2e:	699b      	ldr	r3, [r3, #24]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d00a      	beq.n	8019d4a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d36:	699c      	ldr	r4, [r3, #24]
 8019d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d3a:	69d8      	ldr	r0, [r3, #28]
 8019d3c:	8a3b      	ldrh	r3, [r7, #16]
 8019d3e:	9300      	str	r3, [sp, #0]
 8019d40:	4b1b      	ldr	r3, [pc, #108]	; (8019db0 <udp_input+0x224>)
 8019d42:	687a      	ldr	r2, [r7, #4]
 8019d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d46:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019d48:	e021      	b.n	8019d8e <udp_input+0x202>
        pbuf_free(p);
 8019d4a:	6878      	ldr	r0, [r7, #4]
 8019d4c:	f7f9 f9ca 	bl	80130e4 <pbuf_free>
        goto end;
 8019d50:	e01c      	b.n	8019d8c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019d52:	7cfb      	ldrb	r3, [r7, #19]
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d112      	bne.n	8019d7e <udp_input+0x1f2>
 8019d58:	4b12      	ldr	r3, [pc, #72]	; (8019da4 <udp_input+0x218>)
 8019d5a:	695b      	ldr	r3, [r3, #20]
 8019d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019d60:	2be0      	cmp	r3, #224	; 0xe0
 8019d62:	d00c      	beq.n	8019d7e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019d64:	4b0f      	ldr	r3, [pc, #60]	; (8019da4 <udp_input+0x218>)
 8019d66:	899b      	ldrh	r3, [r3, #12]
 8019d68:	3308      	adds	r3, #8
 8019d6a:	b29b      	uxth	r3, r3
 8019d6c:	b21b      	sxth	r3, r3
 8019d6e:	4619      	mov	r1, r3
 8019d70:	6878      	ldr	r0, [r7, #4]
 8019d72:	f7f9 f9a4 	bl	80130be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019d76:	2103      	movs	r1, #3
 8019d78:	6878      	ldr	r0, [r7, #4]
 8019d7a:	f003 fa07 	bl	801d18c <icmp_dest_unreach>
      pbuf_free(p);
 8019d7e:	6878      	ldr	r0, [r7, #4]
 8019d80:	f7f9 f9b0 	bl	80130e4 <pbuf_free>
  return;
 8019d84:	e003      	b.n	8019d8e <udp_input+0x202>
    pbuf_free(p);
 8019d86:	6878      	ldr	r0, [r7, #4]
 8019d88:	f7f9 f9ac 	bl	80130e4 <pbuf_free>
  return;
 8019d8c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019d8e:	372c      	adds	r7, #44	; 0x2c
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd90      	pop	{r4, r7, pc}
 8019d94:	080239f8 	.word	0x080239f8
 8019d98:	08023a9c 	.word	0x08023a9c
 8019d9c:	08023a4c 	.word	0x08023a4c
 8019da0:	08023ab4 	.word	0x08023ab4
 8019da4:	2000b2c0 	.word	0x2000b2c0
 8019da8:	2000ea0c 	.word	0x2000ea0c
 8019dac:	08023ad0 	.word	0x08023ad0
 8019db0:	2000b2d0 	.word	0x2000b2d0

08019db4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	b088      	sub	sp, #32
 8019db8:	af02      	add	r7, sp, #8
 8019dba:	60f8      	str	r0, [r7, #12]
 8019dbc:	60b9      	str	r1, [r7, #8]
 8019dbe:	607a      	str	r2, [r7, #4]
 8019dc0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019dc2:	68fb      	ldr	r3, [r7, #12]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d109      	bne.n	8019ddc <udp_sendto_if+0x28>
 8019dc8:	4b2e      	ldr	r3, [pc, #184]	; (8019e84 <udp_sendto_if+0xd0>)
 8019dca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019dce:	492e      	ldr	r1, [pc, #184]	; (8019e88 <udp_sendto_if+0xd4>)
 8019dd0:	482e      	ldr	r0, [pc, #184]	; (8019e8c <udp_sendto_if+0xd8>)
 8019dd2:	f005 fef1 	bl	801fbb8 <iprintf>
 8019dd6:	f06f 030f 	mvn.w	r3, #15
 8019dda:	e04f      	b.n	8019e7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019ddc:	68bb      	ldr	r3, [r7, #8]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d109      	bne.n	8019df6 <udp_sendto_if+0x42>
 8019de2:	4b28      	ldr	r3, [pc, #160]	; (8019e84 <udp_sendto_if+0xd0>)
 8019de4:	f240 2281 	movw	r2, #641	; 0x281
 8019de8:	4929      	ldr	r1, [pc, #164]	; (8019e90 <udp_sendto_if+0xdc>)
 8019dea:	4828      	ldr	r0, [pc, #160]	; (8019e8c <udp_sendto_if+0xd8>)
 8019dec:	f005 fee4 	bl	801fbb8 <iprintf>
 8019df0:	f06f 030f 	mvn.w	r3, #15
 8019df4:	e042      	b.n	8019e7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d109      	bne.n	8019e10 <udp_sendto_if+0x5c>
 8019dfc:	4b21      	ldr	r3, [pc, #132]	; (8019e84 <udp_sendto_if+0xd0>)
 8019dfe:	f240 2282 	movw	r2, #642	; 0x282
 8019e02:	4924      	ldr	r1, [pc, #144]	; (8019e94 <udp_sendto_if+0xe0>)
 8019e04:	4821      	ldr	r0, [pc, #132]	; (8019e8c <udp_sendto_if+0xd8>)
 8019e06:	f005 fed7 	bl	801fbb8 <iprintf>
 8019e0a:	f06f 030f 	mvn.w	r3, #15
 8019e0e:	e035      	b.n	8019e7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019e10:	6a3b      	ldr	r3, [r7, #32]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d109      	bne.n	8019e2a <udp_sendto_if+0x76>
 8019e16:	4b1b      	ldr	r3, [pc, #108]	; (8019e84 <udp_sendto_if+0xd0>)
 8019e18:	f240 2283 	movw	r2, #643	; 0x283
 8019e1c:	491e      	ldr	r1, [pc, #120]	; (8019e98 <udp_sendto_if+0xe4>)
 8019e1e:	481b      	ldr	r0, [pc, #108]	; (8019e8c <udp_sendto_if+0xd8>)
 8019e20:	f005 feca 	bl	801fbb8 <iprintf>
 8019e24:	f06f 030f 	mvn.w	r3, #15
 8019e28:	e028      	b.n	8019e7c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d009      	beq.n	8019e44 <udp_sendto_if+0x90>
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d005      	beq.n	8019e44 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019e40:	2be0      	cmp	r3, #224	; 0xe0
 8019e42:	d103      	bne.n	8019e4c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019e44:	6a3b      	ldr	r3, [r7, #32]
 8019e46:	3304      	adds	r3, #4
 8019e48:	617b      	str	r3, [r7, #20]
 8019e4a:	e00b      	b.n	8019e64 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	681a      	ldr	r2, [r3, #0]
 8019e50:	6a3b      	ldr	r3, [r7, #32]
 8019e52:	3304      	adds	r3, #4
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	429a      	cmp	r2, r3
 8019e58:	d002      	beq.n	8019e60 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019e5a:	f06f 0303 	mvn.w	r3, #3
 8019e5e:	e00d      	b.n	8019e7c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019e64:	887a      	ldrh	r2, [r7, #2]
 8019e66:	697b      	ldr	r3, [r7, #20]
 8019e68:	9301      	str	r3, [sp, #4]
 8019e6a:	6a3b      	ldr	r3, [r7, #32]
 8019e6c:	9300      	str	r3, [sp, #0]
 8019e6e:	4613      	mov	r3, r2
 8019e70:	687a      	ldr	r2, [r7, #4]
 8019e72:	68b9      	ldr	r1, [r7, #8]
 8019e74:	68f8      	ldr	r0, [r7, #12]
 8019e76:	f000 f811 	bl	8019e9c <udp_sendto_if_src>
 8019e7a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	3718      	adds	r7, #24
 8019e80:	46bd      	mov	sp, r7
 8019e82:	bd80      	pop	{r7, pc}
 8019e84:	080239f8 	.word	0x080239f8
 8019e88:	08023b6c 	.word	0x08023b6c
 8019e8c:	08023a4c 	.word	0x08023a4c
 8019e90:	08023b88 	.word	0x08023b88
 8019e94:	08023ba4 	.word	0x08023ba4
 8019e98:	08023bc4 	.word	0x08023bc4

08019e9c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b08c      	sub	sp, #48	; 0x30
 8019ea0:	af04      	add	r7, sp, #16
 8019ea2:	60f8      	str	r0, [r7, #12]
 8019ea4:	60b9      	str	r1, [r7, #8]
 8019ea6:	607a      	str	r2, [r7, #4]
 8019ea8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d109      	bne.n	8019ec4 <udp_sendto_if_src+0x28>
 8019eb0:	4b65      	ldr	r3, [pc, #404]	; (801a048 <udp_sendto_if_src+0x1ac>)
 8019eb2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019eb6:	4965      	ldr	r1, [pc, #404]	; (801a04c <udp_sendto_if_src+0x1b0>)
 8019eb8:	4865      	ldr	r0, [pc, #404]	; (801a050 <udp_sendto_if_src+0x1b4>)
 8019eba:	f005 fe7d 	bl	801fbb8 <iprintf>
 8019ebe:	f06f 030f 	mvn.w	r3, #15
 8019ec2:	e0bc      	b.n	801a03e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019ec4:	68bb      	ldr	r3, [r7, #8]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d109      	bne.n	8019ede <udp_sendto_if_src+0x42>
 8019eca:	4b5f      	ldr	r3, [pc, #380]	; (801a048 <udp_sendto_if_src+0x1ac>)
 8019ecc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019ed0:	4960      	ldr	r1, [pc, #384]	; (801a054 <udp_sendto_if_src+0x1b8>)
 8019ed2:	485f      	ldr	r0, [pc, #380]	; (801a050 <udp_sendto_if_src+0x1b4>)
 8019ed4:	f005 fe70 	bl	801fbb8 <iprintf>
 8019ed8:	f06f 030f 	mvn.w	r3, #15
 8019edc:	e0af      	b.n	801a03e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d109      	bne.n	8019ef8 <udp_sendto_if_src+0x5c>
 8019ee4:	4b58      	ldr	r3, [pc, #352]	; (801a048 <udp_sendto_if_src+0x1ac>)
 8019ee6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8019eea:	495b      	ldr	r1, [pc, #364]	; (801a058 <udp_sendto_if_src+0x1bc>)
 8019eec:	4858      	ldr	r0, [pc, #352]	; (801a050 <udp_sendto_if_src+0x1b4>)
 8019eee:	f005 fe63 	bl	801fbb8 <iprintf>
 8019ef2:	f06f 030f 	mvn.w	r3, #15
 8019ef6:	e0a2      	b.n	801a03e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d109      	bne.n	8019f12 <udp_sendto_if_src+0x76>
 8019efe:	4b52      	ldr	r3, [pc, #328]	; (801a048 <udp_sendto_if_src+0x1ac>)
 8019f00:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019f04:	4955      	ldr	r1, [pc, #340]	; (801a05c <udp_sendto_if_src+0x1c0>)
 8019f06:	4852      	ldr	r0, [pc, #328]	; (801a050 <udp_sendto_if_src+0x1b4>)
 8019f08:	f005 fe56 	bl	801fbb8 <iprintf>
 8019f0c:	f06f 030f 	mvn.w	r3, #15
 8019f10:	e095      	b.n	801a03e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d109      	bne.n	8019f2c <udp_sendto_if_src+0x90>
 8019f18:	4b4b      	ldr	r3, [pc, #300]	; (801a048 <udp_sendto_if_src+0x1ac>)
 8019f1a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8019f1e:	4950      	ldr	r1, [pc, #320]	; (801a060 <udp_sendto_if_src+0x1c4>)
 8019f20:	484b      	ldr	r0, [pc, #300]	; (801a050 <udp_sendto_if_src+0x1b4>)
 8019f22:	f005 fe49 	bl	801fbb8 <iprintf>
 8019f26:	f06f 030f 	mvn.w	r3, #15
 8019f2a:	e088      	b.n	801a03e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	8a5b      	ldrh	r3, [r3, #18]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d10f      	bne.n	8019f54 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019f34:	68f9      	ldr	r1, [r7, #12]
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	8a5b      	ldrh	r3, [r3, #18]
 8019f3a:	461a      	mov	r2, r3
 8019f3c:	68f8      	ldr	r0, [r7, #12]
 8019f3e:	f000 f893 	bl	801a068 <udp_bind>
 8019f42:	4603      	mov	r3, r0
 8019f44:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019f46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d002      	beq.n	8019f54 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019f4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019f52:	e074      	b.n	801a03e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019f54:	68bb      	ldr	r3, [r7, #8]
 8019f56:	891b      	ldrh	r3, [r3, #8]
 8019f58:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019f5c:	4293      	cmp	r3, r2
 8019f5e:	d902      	bls.n	8019f66 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019f60:	f04f 33ff 	mov.w	r3, #4294967295
 8019f64:	e06b      	b.n	801a03e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019f66:	2108      	movs	r1, #8
 8019f68:	68b8      	ldr	r0, [r7, #8]
 8019f6a:	f7f9 f825 	bl	8012fb8 <pbuf_add_header>
 8019f6e:	4603      	mov	r3, r0
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d015      	beq.n	8019fa0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019f74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f78:	2108      	movs	r1, #8
 8019f7a:	2022      	movs	r0, #34	; 0x22
 8019f7c:	f7f8 fdce 	bl	8012b1c <pbuf_alloc>
 8019f80:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019f82:	69fb      	ldr	r3, [r7, #28]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d102      	bne.n	8019f8e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019f88:	f04f 33ff 	mov.w	r3, #4294967295
 8019f8c:	e057      	b.n	801a03e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	891b      	ldrh	r3, [r3, #8]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d006      	beq.n	8019fa4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019f96:	68b9      	ldr	r1, [r7, #8]
 8019f98:	69f8      	ldr	r0, [r7, #28]
 8019f9a:	f7f9 f9c7 	bl	801332c <pbuf_chain>
 8019f9e:	e001      	b.n	8019fa4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019fa4:	69fb      	ldr	r3, [r7, #28]
 8019fa6:	895b      	ldrh	r3, [r3, #10]
 8019fa8:	2b07      	cmp	r3, #7
 8019faa:	d806      	bhi.n	8019fba <udp_sendto_if_src+0x11e>
 8019fac:	4b26      	ldr	r3, [pc, #152]	; (801a048 <udp_sendto_if_src+0x1ac>)
 8019fae:	f240 320d 	movw	r2, #781	; 0x30d
 8019fb2:	492c      	ldr	r1, [pc, #176]	; (801a064 <udp_sendto_if_src+0x1c8>)
 8019fb4:	4826      	ldr	r0, [pc, #152]	; (801a050 <udp_sendto_if_src+0x1b4>)
 8019fb6:	f005 fdff 	bl	801fbb8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019fba:	69fb      	ldr	r3, [r7, #28]
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	8a5b      	ldrh	r3, [r3, #18]
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f7f7 fcd5 	bl	8011974 <lwip_htons>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	461a      	mov	r2, r3
 8019fce:	697b      	ldr	r3, [r7, #20]
 8019fd0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019fd2:	887b      	ldrh	r3, [r7, #2]
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	f7f7 fccd 	bl	8011974 <lwip_htons>
 8019fda:	4603      	mov	r3, r0
 8019fdc:	461a      	mov	r2, r3
 8019fde:	697b      	ldr	r3, [r7, #20]
 8019fe0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019fe2:	697b      	ldr	r3, [r7, #20]
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	719a      	strb	r2, [r3, #6]
 8019fe8:	2200      	movs	r2, #0
 8019fea:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019fec:	69fb      	ldr	r3, [r7, #28]
 8019fee:	891b      	ldrh	r3, [r3, #8]
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f7f7 fcbf 	bl	8011974 <lwip_htons>
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	461a      	mov	r2, r3
 8019ffa:	697b      	ldr	r3, [r7, #20]
 8019ffc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019ffe:	2311      	movs	r3, #17
 801a000:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	7adb      	ldrb	r3, [r3, #11]
 801a006:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	7a9b      	ldrb	r3, [r3, #10]
 801a00c:	7cb9      	ldrb	r1, [r7, #18]
 801a00e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a010:	9202      	str	r2, [sp, #8]
 801a012:	7cfa      	ldrb	r2, [r7, #19]
 801a014:	9201      	str	r2, [sp, #4]
 801a016:	9300      	str	r3, [sp, #0]
 801a018:	460b      	mov	r3, r1
 801a01a:	687a      	ldr	r2, [r7, #4]
 801a01c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a01e:	69f8      	ldr	r0, [r7, #28]
 801a020:	f003 fb44 	bl	801d6ac <ip4_output_if_src>
 801a024:	4603      	mov	r3, r0
 801a026:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801a028:	69fa      	ldr	r2, [r7, #28]
 801a02a:	68bb      	ldr	r3, [r7, #8]
 801a02c:	429a      	cmp	r2, r3
 801a02e:	d004      	beq.n	801a03a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801a030:	69f8      	ldr	r0, [r7, #28]
 801a032:	f7f9 f857 	bl	80130e4 <pbuf_free>
    q = NULL;
 801a036:	2300      	movs	r3, #0
 801a038:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801a03a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801a03e:	4618      	mov	r0, r3
 801a040:	3720      	adds	r7, #32
 801a042:	46bd      	mov	sp, r7
 801a044:	bd80      	pop	{r7, pc}
 801a046:	bf00      	nop
 801a048:	080239f8 	.word	0x080239f8
 801a04c:	08023be4 	.word	0x08023be4
 801a050:	08023a4c 	.word	0x08023a4c
 801a054:	08023c04 	.word	0x08023c04
 801a058:	08023c24 	.word	0x08023c24
 801a05c:	08023c48 	.word	0x08023c48
 801a060:	08023c6c 	.word	0x08023c6c
 801a064:	08023c90 	.word	0x08023c90

0801a068 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b086      	sub	sp, #24
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	60f8      	str	r0, [r7, #12]
 801a070:	60b9      	str	r1, [r7, #8]
 801a072:	4613      	mov	r3, r2
 801a074:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a076:	68bb      	ldr	r3, [r7, #8]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d101      	bne.n	801a080 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a07c:	4b39      	ldr	r3, [pc, #228]	; (801a164 <udp_bind+0xfc>)
 801a07e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d109      	bne.n	801a09a <udp_bind+0x32>
 801a086:	4b38      	ldr	r3, [pc, #224]	; (801a168 <udp_bind+0x100>)
 801a088:	f240 32b7 	movw	r2, #951	; 0x3b7
 801a08c:	4937      	ldr	r1, [pc, #220]	; (801a16c <udp_bind+0x104>)
 801a08e:	4838      	ldr	r0, [pc, #224]	; (801a170 <udp_bind+0x108>)
 801a090:	f005 fd92 	bl	801fbb8 <iprintf>
 801a094:	f06f 030f 	mvn.w	r3, #15
 801a098:	e060      	b.n	801a15c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a09a:	2300      	movs	r3, #0
 801a09c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a09e:	4b35      	ldr	r3, [pc, #212]	; (801a174 <udp_bind+0x10c>)
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	617b      	str	r3, [r7, #20]
 801a0a4:	e009      	b.n	801a0ba <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a0a6:	68fa      	ldr	r2, [r7, #12]
 801a0a8:	697b      	ldr	r3, [r7, #20]
 801a0aa:	429a      	cmp	r2, r3
 801a0ac:	d102      	bne.n	801a0b4 <udp_bind+0x4c>
      rebind = 1;
 801a0ae:	2301      	movs	r3, #1
 801a0b0:	74fb      	strb	r3, [r7, #19]
      break;
 801a0b2:	e005      	b.n	801a0c0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a0b4:	697b      	ldr	r3, [r7, #20]
 801a0b6:	68db      	ldr	r3, [r3, #12]
 801a0b8:	617b      	str	r3, [r7, #20]
 801a0ba:	697b      	ldr	r3, [r7, #20]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d1f2      	bne.n	801a0a6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a0c0:	88fb      	ldrh	r3, [r7, #6]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d109      	bne.n	801a0da <udp_bind+0x72>
    port = udp_new_port();
 801a0c6:	f7ff fcc5 	bl	8019a54 <udp_new_port>
 801a0ca:	4603      	mov	r3, r0
 801a0cc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a0ce:	88fb      	ldrh	r3, [r7, #6]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d12c      	bne.n	801a12e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a0d4:	f06f 0307 	mvn.w	r3, #7
 801a0d8:	e040      	b.n	801a15c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a0da:	4b26      	ldr	r3, [pc, #152]	; (801a174 <udp_bind+0x10c>)
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	617b      	str	r3, [r7, #20]
 801a0e0:	e022      	b.n	801a128 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a0e2:	68fa      	ldr	r2, [r7, #12]
 801a0e4:	697b      	ldr	r3, [r7, #20]
 801a0e6:	429a      	cmp	r2, r3
 801a0e8:	d01b      	beq.n	801a122 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a0ea:	697b      	ldr	r3, [r7, #20]
 801a0ec:	8a5b      	ldrh	r3, [r3, #18]
 801a0ee:	88fa      	ldrh	r2, [r7, #6]
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	d116      	bne.n	801a122 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a0f4:	697b      	ldr	r3, [r7, #20]
 801a0f6:	681a      	ldr	r2, [r3, #0]
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	d00d      	beq.n	801a11c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a100:	68bb      	ldr	r3, [r7, #8]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d00a      	beq.n	801a11c <udp_bind+0xb4>
 801a106:	68bb      	ldr	r3, [r7, #8]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d006      	beq.n	801a11c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a10e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a110:	2b00      	cmp	r3, #0
 801a112:	d003      	beq.n	801a11c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a114:	697b      	ldr	r3, [r7, #20]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d102      	bne.n	801a122 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a11c:	f06f 0307 	mvn.w	r3, #7
 801a120:	e01c      	b.n	801a15c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a122:	697b      	ldr	r3, [r7, #20]
 801a124:	68db      	ldr	r3, [r3, #12]
 801a126:	617b      	str	r3, [r7, #20]
 801a128:	697b      	ldr	r3, [r7, #20]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d1d9      	bne.n	801a0e2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a12e:	68bb      	ldr	r3, [r7, #8]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d002      	beq.n	801a13a <udp_bind+0xd2>
 801a134:	68bb      	ldr	r3, [r7, #8]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	e000      	b.n	801a13c <udp_bind+0xd4>
 801a13a:	2300      	movs	r3, #0
 801a13c:	68fa      	ldr	r2, [r7, #12]
 801a13e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	88fa      	ldrh	r2, [r7, #6]
 801a144:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a146:	7cfb      	ldrb	r3, [r7, #19]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d106      	bne.n	801a15a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a14c:	4b09      	ldr	r3, [pc, #36]	; (801a174 <udp_bind+0x10c>)
 801a14e:	681a      	ldr	r2, [r3, #0]
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a154:	4a07      	ldr	r2, [pc, #28]	; (801a174 <udp_bind+0x10c>)
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a15a:	2300      	movs	r3, #0
}
 801a15c:	4618      	mov	r0, r3
 801a15e:	3718      	adds	r7, #24
 801a160:	46bd      	mov	sp, r7
 801a162:	bd80      	pop	{r7, pc}
 801a164:	08024a48 	.word	0x08024a48
 801a168:	080239f8 	.word	0x080239f8
 801a16c:	08023cc0 	.word	0x08023cc0
 801a170:	08023a4c 	.word	0x08023a4c
 801a174:	2000ea0c 	.word	0x2000ea0c

0801a178 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a178:	b580      	push	{r7, lr}
 801a17a:	b086      	sub	sp, #24
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	60f8      	str	r0, [r7, #12]
 801a180:	60b9      	str	r1, [r7, #8]
 801a182:	4613      	mov	r3, r2
 801a184:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d109      	bne.n	801a1a0 <udp_connect+0x28>
 801a18c:	4b2c      	ldr	r3, [pc, #176]	; (801a240 <udp_connect+0xc8>)
 801a18e:	f240 4235 	movw	r2, #1077	; 0x435
 801a192:	492c      	ldr	r1, [pc, #176]	; (801a244 <udp_connect+0xcc>)
 801a194:	482c      	ldr	r0, [pc, #176]	; (801a248 <udp_connect+0xd0>)
 801a196:	f005 fd0f 	bl	801fbb8 <iprintf>
 801a19a:	f06f 030f 	mvn.w	r3, #15
 801a19e:	e04b      	b.n	801a238 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801a1a0:	68bb      	ldr	r3, [r7, #8]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d109      	bne.n	801a1ba <udp_connect+0x42>
 801a1a6:	4b26      	ldr	r3, [pc, #152]	; (801a240 <udp_connect+0xc8>)
 801a1a8:	f240 4236 	movw	r2, #1078	; 0x436
 801a1ac:	4927      	ldr	r1, [pc, #156]	; (801a24c <udp_connect+0xd4>)
 801a1ae:	4826      	ldr	r0, [pc, #152]	; (801a248 <udp_connect+0xd0>)
 801a1b0:	f005 fd02 	bl	801fbb8 <iprintf>
 801a1b4:	f06f 030f 	mvn.w	r3, #15
 801a1b8:	e03e      	b.n	801a238 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	8a5b      	ldrh	r3, [r3, #18]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d10f      	bne.n	801a1e2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a1c2:	68f9      	ldr	r1, [r7, #12]
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	8a5b      	ldrh	r3, [r3, #18]
 801a1c8:	461a      	mov	r2, r3
 801a1ca:	68f8      	ldr	r0, [r7, #12]
 801a1cc:	f7ff ff4c 	bl	801a068 <udp_bind>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801a1d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d002      	beq.n	801a1e2 <udp_connect+0x6a>
      return err;
 801a1dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a1e0:	e02a      	b.n	801a238 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d002      	beq.n	801a1ee <udp_connect+0x76>
 801a1e8:	68bb      	ldr	r3, [r7, #8]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	e000      	b.n	801a1f0 <udp_connect+0x78>
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	68fa      	ldr	r2, [r7, #12]
 801a1f2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	88fa      	ldrh	r2, [r7, #6]
 801a1f8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	7c1b      	ldrb	r3, [r3, #16]
 801a1fe:	f043 0304 	orr.w	r3, r3, #4
 801a202:	b2da      	uxtb	r2, r3
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a208:	4b11      	ldr	r3, [pc, #68]	; (801a250 <udp_connect+0xd8>)
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	617b      	str	r3, [r7, #20]
 801a20e:	e008      	b.n	801a222 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801a210:	68fa      	ldr	r2, [r7, #12]
 801a212:	697b      	ldr	r3, [r7, #20]
 801a214:	429a      	cmp	r2, r3
 801a216:	d101      	bne.n	801a21c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801a218:	2300      	movs	r3, #0
 801a21a:	e00d      	b.n	801a238 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a21c:	697b      	ldr	r3, [r7, #20]
 801a21e:	68db      	ldr	r3, [r3, #12]
 801a220:	617b      	str	r3, [r7, #20]
 801a222:	697b      	ldr	r3, [r7, #20]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d1f3      	bne.n	801a210 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801a228:	4b09      	ldr	r3, [pc, #36]	; (801a250 <udp_connect+0xd8>)
 801a22a:	681a      	ldr	r2, [r3, #0]
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801a230:	4a07      	ldr	r2, [pc, #28]	; (801a250 <udp_connect+0xd8>)
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801a236:	2300      	movs	r3, #0
}
 801a238:	4618      	mov	r0, r3
 801a23a:	3718      	adds	r7, #24
 801a23c:	46bd      	mov	sp, r7
 801a23e:	bd80      	pop	{r7, pc}
 801a240:	080239f8 	.word	0x080239f8
 801a244:	08023cd8 	.word	0x08023cd8
 801a248:	08023a4c 	.word	0x08023a4c
 801a24c:	08023cf4 	.word	0x08023cf4
 801a250:	2000ea0c 	.word	0x2000ea0c

0801a254 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b084      	sub	sp, #16
 801a258:	af00      	add	r7, sp, #0
 801a25a:	60f8      	str	r0, [r7, #12]
 801a25c:	60b9      	str	r1, [r7, #8]
 801a25e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d107      	bne.n	801a276 <udp_recv+0x22>
 801a266:	4b08      	ldr	r3, [pc, #32]	; (801a288 <udp_recv+0x34>)
 801a268:	f240 428a 	movw	r2, #1162	; 0x48a
 801a26c:	4907      	ldr	r1, [pc, #28]	; (801a28c <udp_recv+0x38>)
 801a26e:	4808      	ldr	r0, [pc, #32]	; (801a290 <udp_recv+0x3c>)
 801a270:	f005 fca2 	bl	801fbb8 <iprintf>
 801a274:	e005      	b.n	801a282 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	68ba      	ldr	r2, [r7, #8]
 801a27a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	687a      	ldr	r2, [r7, #4]
 801a280:	61da      	str	r2, [r3, #28]
}
 801a282:	3710      	adds	r7, #16
 801a284:	46bd      	mov	sp, r7
 801a286:	bd80      	pop	{r7, pc}
 801a288:	080239f8 	.word	0x080239f8
 801a28c:	08023d2c 	.word	0x08023d2c
 801a290:	08023a4c 	.word	0x08023a4c

0801a294 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b084      	sub	sp, #16
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d107      	bne.n	801a2b2 <udp_remove+0x1e>
 801a2a2:	4b19      	ldr	r3, [pc, #100]	; (801a308 <udp_remove+0x74>)
 801a2a4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801a2a8:	4918      	ldr	r1, [pc, #96]	; (801a30c <udp_remove+0x78>)
 801a2aa:	4819      	ldr	r0, [pc, #100]	; (801a310 <udp_remove+0x7c>)
 801a2ac:	f005 fc84 	bl	801fbb8 <iprintf>
 801a2b0:	e026      	b.n	801a300 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a2b2:	4b18      	ldr	r3, [pc, #96]	; (801a314 <udp_remove+0x80>)
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	687a      	ldr	r2, [r7, #4]
 801a2b8:	429a      	cmp	r2, r3
 801a2ba:	d105      	bne.n	801a2c8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a2bc:	4b15      	ldr	r3, [pc, #84]	; (801a314 <udp_remove+0x80>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	68db      	ldr	r3, [r3, #12]
 801a2c2:	4a14      	ldr	r2, [pc, #80]	; (801a314 <udp_remove+0x80>)
 801a2c4:	6013      	str	r3, [r2, #0]
 801a2c6:	e017      	b.n	801a2f8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a2c8:	4b12      	ldr	r3, [pc, #72]	; (801a314 <udp_remove+0x80>)
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	60fb      	str	r3, [r7, #12]
 801a2ce:	e010      	b.n	801a2f2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a2d0:	68fb      	ldr	r3, [r7, #12]
 801a2d2:	68db      	ldr	r3, [r3, #12]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d009      	beq.n	801a2ec <udp_remove+0x58>
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	68db      	ldr	r3, [r3, #12]
 801a2dc:	687a      	ldr	r2, [r7, #4]
 801a2de:	429a      	cmp	r2, r3
 801a2e0:	d104      	bne.n	801a2ec <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	68da      	ldr	r2, [r3, #12]
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	60da      	str	r2, [r3, #12]
        break;
 801a2ea:	e005      	b.n	801a2f8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	68db      	ldr	r3, [r3, #12]
 801a2f0:	60fb      	str	r3, [r7, #12]
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d1eb      	bne.n	801a2d0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a2f8:	6879      	ldr	r1, [r7, #4]
 801a2fa:	2000      	movs	r0, #0
 801a2fc:	f7f8 f842 	bl	8012384 <memp_free>
}
 801a300:	3710      	adds	r7, #16
 801a302:	46bd      	mov	sp, r7
 801a304:	bd80      	pop	{r7, pc}
 801a306:	bf00      	nop
 801a308:	080239f8 	.word	0x080239f8
 801a30c:	08023d44 	.word	0x08023d44
 801a310:	08023a4c 	.word	0x08023a4c
 801a314:	2000ea0c 	.word	0x2000ea0c

0801a318 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a318:	b580      	push	{r7, lr}
 801a31a:	b082      	sub	sp, #8
 801a31c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a31e:	2000      	movs	r0, #0
 801a320:	f7f7 ffde 	bl	80122e0 <memp_malloc>
 801a324:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d007      	beq.n	801a33c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a32c:	2220      	movs	r2, #32
 801a32e:	2100      	movs	r1, #0
 801a330:	6878      	ldr	r0, [r7, #4]
 801a332:	f005 fbde 	bl	801faf2 <memset>
    pcb->ttl = UDP_TTL;
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	22ff      	movs	r2, #255	; 0xff
 801a33a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a33c:	687b      	ldr	r3, [r7, #4]
}
 801a33e:	4618      	mov	r0, r3
 801a340:	3708      	adds	r7, #8
 801a342:	46bd      	mov	sp, r7
 801a344:	bd80      	pop	{r7, pc}

0801a346 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a346:	b580      	push	{r7, lr}
 801a348:	b084      	sub	sp, #16
 801a34a:	af00      	add	r7, sp, #0
 801a34c:	4603      	mov	r3, r0
 801a34e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a350:	f7ff ffe2 	bl	801a318 <udp_new>
 801a354:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a356:	68fb      	ldr	r3, [r7, #12]
}
 801a358:	4618      	mov	r0, r3
 801a35a:	3710      	adds	r7, #16
 801a35c:	46bd      	mov	sp, r7
 801a35e:	bd80      	pop	{r7, pc}

0801a360 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a360:	b480      	push	{r7}
 801a362:	b085      	sub	sp, #20
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
 801a368:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d01e      	beq.n	801a3ae <udp_netif_ip_addr_changed+0x4e>
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d01a      	beq.n	801a3ae <udp_netif_ip_addr_changed+0x4e>
 801a378:	683b      	ldr	r3, [r7, #0]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d017      	beq.n	801a3ae <udp_netif_ip_addr_changed+0x4e>
 801a37e:	683b      	ldr	r3, [r7, #0]
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	2b00      	cmp	r3, #0
 801a384:	d013      	beq.n	801a3ae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a386:	4b0d      	ldr	r3, [pc, #52]	; (801a3bc <udp_netif_ip_addr_changed+0x5c>)
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	60fb      	str	r3, [r7, #12]
 801a38c:	e00c      	b.n	801a3a8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	681a      	ldr	r2, [r3, #0]
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	429a      	cmp	r2, r3
 801a398:	d103      	bne.n	801a3a2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a39a:	683b      	ldr	r3, [r7, #0]
 801a39c:	681a      	ldr	r2, [r3, #0]
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	68db      	ldr	r3, [r3, #12]
 801a3a6:	60fb      	str	r3, [r7, #12]
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d1ef      	bne.n	801a38e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a3ae:	bf00      	nop
 801a3b0:	3714      	adds	r7, #20
 801a3b2:	46bd      	mov	sp, r7
 801a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3b8:	4770      	bx	lr
 801a3ba:	bf00      	nop
 801a3bc:	2000ea0c 	.word	0x2000ea0c

0801a3c0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801a3c4:	4b20      	ldr	r3, [pc, #128]	; (801a448 <dhcp_inc_pcb_refcount+0x88>)
 801a3c6:	781b      	ldrb	r3, [r3, #0]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d133      	bne.n	801a434 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801a3cc:	4b1f      	ldr	r3, [pc, #124]	; (801a44c <dhcp_inc_pcb_refcount+0x8c>)
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d005      	beq.n	801a3e0 <dhcp_inc_pcb_refcount+0x20>
 801a3d4:	4b1e      	ldr	r3, [pc, #120]	; (801a450 <dhcp_inc_pcb_refcount+0x90>)
 801a3d6:	22e5      	movs	r2, #229	; 0xe5
 801a3d8:	491e      	ldr	r1, [pc, #120]	; (801a454 <dhcp_inc_pcb_refcount+0x94>)
 801a3da:	481f      	ldr	r0, [pc, #124]	; (801a458 <dhcp_inc_pcb_refcount+0x98>)
 801a3dc:	f005 fbec 	bl	801fbb8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801a3e0:	f7ff ff9a 	bl	801a318 <udp_new>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	4a19      	ldr	r2, [pc, #100]	; (801a44c <dhcp_inc_pcb_refcount+0x8c>)
 801a3e8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801a3ea:	4b18      	ldr	r3, [pc, #96]	; (801a44c <dhcp_inc_pcb_refcount+0x8c>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d102      	bne.n	801a3f8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801a3f2:	f04f 33ff 	mov.w	r3, #4294967295
 801a3f6:	e024      	b.n	801a442 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801a3f8:	4b14      	ldr	r3, [pc, #80]	; (801a44c <dhcp_inc_pcb_refcount+0x8c>)
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	7a5a      	ldrb	r2, [r3, #9]
 801a3fe:	4b13      	ldr	r3, [pc, #76]	; (801a44c <dhcp_inc_pcb_refcount+0x8c>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	f042 0220 	orr.w	r2, r2, #32
 801a406:	b2d2      	uxtb	r2, r2
 801a408:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801a40a:	4b10      	ldr	r3, [pc, #64]	; (801a44c <dhcp_inc_pcb_refcount+0x8c>)
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	2244      	movs	r2, #68	; 0x44
 801a410:	4912      	ldr	r1, [pc, #72]	; (801a45c <dhcp_inc_pcb_refcount+0x9c>)
 801a412:	4618      	mov	r0, r3
 801a414:	f7ff fe28 	bl	801a068 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801a418:	4b0c      	ldr	r3, [pc, #48]	; (801a44c <dhcp_inc_pcb_refcount+0x8c>)
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	2243      	movs	r2, #67	; 0x43
 801a41e:	490f      	ldr	r1, [pc, #60]	; (801a45c <dhcp_inc_pcb_refcount+0x9c>)
 801a420:	4618      	mov	r0, r3
 801a422:	f7ff fea9 	bl	801a178 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801a426:	4b09      	ldr	r3, [pc, #36]	; (801a44c <dhcp_inc_pcb_refcount+0x8c>)
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	2200      	movs	r2, #0
 801a42c:	490c      	ldr	r1, [pc, #48]	; (801a460 <dhcp_inc_pcb_refcount+0xa0>)
 801a42e:	4618      	mov	r0, r3
 801a430:	f7ff ff10 	bl	801a254 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801a434:	4b04      	ldr	r3, [pc, #16]	; (801a448 <dhcp_inc_pcb_refcount+0x88>)
 801a436:	781b      	ldrb	r3, [r3, #0]
 801a438:	3301      	adds	r3, #1
 801a43a:	b2da      	uxtb	r2, r3
 801a43c:	4b02      	ldr	r3, [pc, #8]	; (801a448 <dhcp_inc_pcb_refcount+0x88>)
 801a43e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801a440:	2300      	movs	r3, #0
}
 801a442:	4618      	mov	r0, r3
 801a444:	bd80      	pop	{r7, pc}
 801a446:	bf00      	nop
 801a448:	20005ff0 	.word	0x20005ff0
 801a44c:	20005fec 	.word	0x20005fec
 801a450:	08023d5c 	.word	0x08023d5c
 801a454:	08023d94 	.word	0x08023d94
 801a458:	08023dbc 	.word	0x08023dbc
 801a45c:	08024a48 	.word	0x08024a48
 801a460:	0801bcf5 	.word	0x0801bcf5

0801a464 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801a464:	b580      	push	{r7, lr}
 801a466:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801a468:	4b0e      	ldr	r3, [pc, #56]	; (801a4a4 <dhcp_dec_pcb_refcount+0x40>)
 801a46a:	781b      	ldrb	r3, [r3, #0]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d105      	bne.n	801a47c <dhcp_dec_pcb_refcount+0x18>
 801a470:	4b0d      	ldr	r3, [pc, #52]	; (801a4a8 <dhcp_dec_pcb_refcount+0x44>)
 801a472:	22ff      	movs	r2, #255	; 0xff
 801a474:	490d      	ldr	r1, [pc, #52]	; (801a4ac <dhcp_dec_pcb_refcount+0x48>)
 801a476:	480e      	ldr	r0, [pc, #56]	; (801a4b0 <dhcp_dec_pcb_refcount+0x4c>)
 801a478:	f005 fb9e 	bl	801fbb8 <iprintf>
  dhcp_pcb_refcount--;
 801a47c:	4b09      	ldr	r3, [pc, #36]	; (801a4a4 <dhcp_dec_pcb_refcount+0x40>)
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	3b01      	subs	r3, #1
 801a482:	b2da      	uxtb	r2, r3
 801a484:	4b07      	ldr	r3, [pc, #28]	; (801a4a4 <dhcp_dec_pcb_refcount+0x40>)
 801a486:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801a488:	4b06      	ldr	r3, [pc, #24]	; (801a4a4 <dhcp_dec_pcb_refcount+0x40>)
 801a48a:	781b      	ldrb	r3, [r3, #0]
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d107      	bne.n	801a4a0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801a490:	4b08      	ldr	r3, [pc, #32]	; (801a4b4 <dhcp_dec_pcb_refcount+0x50>)
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	4618      	mov	r0, r3
 801a496:	f7ff fefd 	bl	801a294 <udp_remove>
    dhcp_pcb = NULL;
 801a49a:	4b06      	ldr	r3, [pc, #24]	; (801a4b4 <dhcp_dec_pcb_refcount+0x50>)
 801a49c:	2200      	movs	r2, #0
 801a49e:	601a      	str	r2, [r3, #0]
  }
}
 801a4a0:	bf00      	nop
 801a4a2:	bd80      	pop	{r7, pc}
 801a4a4:	20005ff0 	.word	0x20005ff0
 801a4a8:	08023d5c 	.word	0x08023d5c
 801a4ac:	08023de4 	.word	0x08023de4
 801a4b0:	08023dbc 	.word	0x08023dbc
 801a4b4:	20005fec 	.word	0x20005fec

0801a4b8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b084      	sub	sp, #16
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4c4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801a4c6:	210c      	movs	r1, #12
 801a4c8:	68f8      	ldr	r0, [r7, #12]
 801a4ca:	f001 f855 	bl	801b578 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a4ce:	4b06      	ldr	r3, [pc, #24]	; (801a4e8 <dhcp_handle_nak+0x30>)
 801a4d0:	4a05      	ldr	r2, [pc, #20]	; (801a4e8 <dhcp_handle_nak+0x30>)
 801a4d2:	4905      	ldr	r1, [pc, #20]	; (801a4e8 <dhcp_handle_nak+0x30>)
 801a4d4:	6878      	ldr	r0, [r7, #4]
 801a4d6:	f7f8 f8f7 	bl	80126c8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801a4da:	6878      	ldr	r0, [r7, #4]
 801a4dc:	f000 fc48 	bl	801ad70 <dhcp_discover>
}
 801a4e0:	bf00      	nop
 801a4e2:	3710      	adds	r7, #16
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	bd80      	pop	{r7, pc}
 801a4e8:	08024a48 	.word	0x08024a48

0801a4ec <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801a4ec:	b580      	push	{r7, lr}
 801a4ee:	b084      	sub	sp, #16
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4f8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801a4fa:	2108      	movs	r1, #8
 801a4fc:	68f8      	ldr	r0, [r7, #12]
 801a4fe:	f001 f83b 	bl	801b578 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	331c      	adds	r3, #28
 801a506:	2200      	movs	r2, #0
 801a508:	4619      	mov	r1, r3
 801a50a:	6878      	ldr	r0, [r7, #4]
 801a50c:	f002 fb3c 	bl	801cb88 <etharp_query>
 801a510:	4603      	mov	r3, r0
 801a512:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	799b      	ldrb	r3, [r3, #6]
 801a518:	2bff      	cmp	r3, #255	; 0xff
 801a51a:	d005      	beq.n	801a528 <dhcp_check+0x3c>
    dhcp->tries++;
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	799b      	ldrb	r3, [r3, #6]
 801a520:	3301      	adds	r3, #1
 801a522:	b2da      	uxtb	r2, r3
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801a528:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801a52c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a52e:	893b      	ldrh	r3, [r7, #8]
 801a530:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a534:	4a06      	ldr	r2, [pc, #24]	; (801a550 <dhcp_check+0x64>)
 801a536:	fb82 1203 	smull	r1, r2, r2, r3
 801a53a:	1152      	asrs	r2, r2, #5
 801a53c:	17db      	asrs	r3, r3, #31
 801a53e:	1ad3      	subs	r3, r2, r3
 801a540:	b29a      	uxth	r2, r3
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801a546:	bf00      	nop
 801a548:	3710      	adds	r7, #16
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}
 801a54e:	bf00      	nop
 801a550:	10624dd3 	.word	0x10624dd3

0801a554 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a554:	b580      	push	{r7, lr}
 801a556:	b084      	sub	sp, #16
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
 801a55c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a562:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a564:	4b0c      	ldr	r3, [pc, #48]	; (801a598 <dhcp_handle_offer+0x44>)
 801a566:	789b      	ldrb	r3, [r3, #2]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d011      	beq.n	801a590 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	2200      	movs	r2, #0
 801a570:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801a572:	4b0a      	ldr	r3, [pc, #40]	; (801a59c <dhcp_handle_offer+0x48>)
 801a574:	689b      	ldr	r3, [r3, #8]
 801a576:	4618      	mov	r0, r3
 801a578:	f7f7 fa11 	bl	801199e <lwip_htonl>
 801a57c:	4602      	mov	r2, r0
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a582:	683b      	ldr	r3, [r7, #0]
 801a584:	691a      	ldr	r2, [r3, #16]
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801a58a:	6878      	ldr	r0, [r7, #4]
 801a58c:	f000 f808 	bl	801a5a0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801a590:	bf00      	nop
 801a592:	3710      	adds	r7, #16
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	2000ea10 	.word	0x2000ea10
 801a59c:	2000ea18 	.word	0x2000ea18

0801a5a0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801a5a0:	b5b0      	push	{r4, r5, r7, lr}
 801a5a2:	b08a      	sub	sp, #40	; 0x28
 801a5a4:	af02      	add	r7, sp, #8
 801a5a6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d109      	bne.n	801a5c2 <dhcp_select+0x22>
 801a5ae:	4b71      	ldr	r3, [pc, #452]	; (801a774 <dhcp_select+0x1d4>)
 801a5b0:	f240 1277 	movw	r2, #375	; 0x177
 801a5b4:	4970      	ldr	r1, [pc, #448]	; (801a778 <dhcp_select+0x1d8>)
 801a5b6:	4871      	ldr	r0, [pc, #452]	; (801a77c <dhcp_select+0x1dc>)
 801a5b8:	f005 fafe 	bl	801fbb8 <iprintf>
 801a5bc:	f06f 030f 	mvn.w	r3, #15
 801a5c0:	e0d3      	b.n	801a76a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5c6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801a5c8:	69bb      	ldr	r3, [r7, #24]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d109      	bne.n	801a5e2 <dhcp_select+0x42>
 801a5ce:	4b69      	ldr	r3, [pc, #420]	; (801a774 <dhcp_select+0x1d4>)
 801a5d0:	f240 1279 	movw	r2, #377	; 0x179
 801a5d4:	496a      	ldr	r1, [pc, #424]	; (801a780 <dhcp_select+0x1e0>)
 801a5d6:	4869      	ldr	r0, [pc, #420]	; (801a77c <dhcp_select+0x1dc>)
 801a5d8:	f005 faee 	bl	801fbb8 <iprintf>
 801a5dc:	f06f 0305 	mvn.w	r3, #5
 801a5e0:	e0c3      	b.n	801a76a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801a5e2:	2101      	movs	r1, #1
 801a5e4:	69b8      	ldr	r0, [r7, #24]
 801a5e6:	f000 ffc7 	bl	801b578 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a5ea:	f107 030c 	add.w	r3, r7, #12
 801a5ee:	2203      	movs	r2, #3
 801a5f0:	69b9      	ldr	r1, [r7, #24]
 801a5f2:	6878      	ldr	r0, [r7, #4]
 801a5f4:	f001 fc4c 	bl	801be90 <dhcp_create_msg>
 801a5f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a5fa:	697b      	ldr	r3, [r7, #20]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	f000 8085 	beq.w	801a70c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a602:	697b      	ldr	r3, [r7, #20]
 801a604:	685b      	ldr	r3, [r3, #4]
 801a606:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a608:	89b8      	ldrh	r0, [r7, #12]
 801a60a:	693b      	ldr	r3, [r7, #16]
 801a60c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a610:	2302      	movs	r3, #2
 801a612:	2239      	movs	r2, #57	; 0x39
 801a614:	f000 ffca 	bl	801b5ac <dhcp_option>
 801a618:	4603      	mov	r3, r0
 801a61a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a61c:	89b8      	ldrh	r0, [r7, #12]
 801a61e:	693b      	ldr	r3, [r7, #16]
 801a620:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a628:	461a      	mov	r2, r3
 801a62a:	f001 f819 	bl	801b660 <dhcp_option_short>
 801a62e:	4603      	mov	r3, r0
 801a630:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a632:	89b8      	ldrh	r0, [r7, #12]
 801a634:	693b      	ldr	r3, [r7, #16]
 801a636:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a63a:	2304      	movs	r3, #4
 801a63c:	2232      	movs	r2, #50	; 0x32
 801a63e:	f000 ffb5 	bl	801b5ac <dhcp_option>
 801a642:	4603      	mov	r3, r0
 801a644:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a646:	89bc      	ldrh	r4, [r7, #12]
 801a648:	693b      	ldr	r3, [r7, #16]
 801a64a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a64e:	69bb      	ldr	r3, [r7, #24]
 801a650:	69db      	ldr	r3, [r3, #28]
 801a652:	4618      	mov	r0, r3
 801a654:	f7f7 f9a3 	bl	801199e <lwip_htonl>
 801a658:	4603      	mov	r3, r0
 801a65a:	461a      	mov	r2, r3
 801a65c:	4629      	mov	r1, r5
 801a65e:	4620      	mov	r0, r4
 801a660:	f001 f830 	bl	801b6c4 <dhcp_option_long>
 801a664:	4603      	mov	r3, r0
 801a666:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801a668:	89b8      	ldrh	r0, [r7, #12]
 801a66a:	693b      	ldr	r3, [r7, #16]
 801a66c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a670:	2304      	movs	r3, #4
 801a672:	2236      	movs	r2, #54	; 0x36
 801a674:	f000 ff9a 	bl	801b5ac <dhcp_option>
 801a678:	4603      	mov	r3, r0
 801a67a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801a67c:	89bc      	ldrh	r4, [r7, #12]
 801a67e:	693b      	ldr	r3, [r7, #16]
 801a680:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a684:	69bb      	ldr	r3, [r7, #24]
 801a686:	699b      	ldr	r3, [r3, #24]
 801a688:	4618      	mov	r0, r3
 801a68a:	f7f7 f988 	bl	801199e <lwip_htonl>
 801a68e:	4603      	mov	r3, r0
 801a690:	461a      	mov	r2, r3
 801a692:	4629      	mov	r1, r5
 801a694:	4620      	mov	r0, r4
 801a696:	f001 f815 	bl	801b6c4 <dhcp_option_long>
 801a69a:	4603      	mov	r3, r0
 801a69c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a69e:	89b8      	ldrh	r0, [r7, #12]
 801a6a0:	693b      	ldr	r3, [r7, #16]
 801a6a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a6a6:	2303      	movs	r3, #3
 801a6a8:	2237      	movs	r2, #55	; 0x37
 801a6aa:	f000 ff7f 	bl	801b5ac <dhcp_option>
 801a6ae:	4603      	mov	r3, r0
 801a6b0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	77bb      	strb	r3, [r7, #30]
 801a6b6:	e00e      	b.n	801a6d6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a6b8:	89b8      	ldrh	r0, [r7, #12]
 801a6ba:	693b      	ldr	r3, [r7, #16]
 801a6bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a6c0:	7fbb      	ldrb	r3, [r7, #30]
 801a6c2:	4a30      	ldr	r2, [pc, #192]	; (801a784 <dhcp_select+0x1e4>)
 801a6c4:	5cd3      	ldrb	r3, [r2, r3]
 801a6c6:	461a      	mov	r2, r3
 801a6c8:	f000 ffa4 	bl	801b614 <dhcp_option_byte>
 801a6cc:	4603      	mov	r3, r0
 801a6ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a6d0:	7fbb      	ldrb	r3, [r7, #30]
 801a6d2:	3301      	adds	r3, #1
 801a6d4:	77bb      	strb	r3, [r7, #30]
 801a6d6:	7fbb      	ldrb	r3, [r7, #30]
 801a6d8:	2b02      	cmp	r3, #2
 801a6da:	d9ed      	bls.n	801a6b8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a6dc:	89b8      	ldrh	r0, [r7, #12]
 801a6de:	693b      	ldr	r3, [r7, #16]
 801a6e0:	33f0      	adds	r3, #240	; 0xf0
 801a6e2:	697a      	ldr	r2, [r7, #20]
 801a6e4:	4619      	mov	r1, r3
 801a6e6:	f001 fca9 	bl	801c03c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a6ea:	4b27      	ldr	r3, [pc, #156]	; (801a788 <dhcp_select+0x1e8>)
 801a6ec:	6818      	ldr	r0, [r3, #0]
 801a6ee:	4b27      	ldr	r3, [pc, #156]	; (801a78c <dhcp_select+0x1ec>)
 801a6f0:	9301      	str	r3, [sp, #4]
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	9300      	str	r3, [sp, #0]
 801a6f6:	2343      	movs	r3, #67	; 0x43
 801a6f8:	4a25      	ldr	r2, [pc, #148]	; (801a790 <dhcp_select+0x1f0>)
 801a6fa:	6979      	ldr	r1, [r7, #20]
 801a6fc:	f7ff fbce 	bl	8019e9c <udp_sendto_if_src>
 801a700:	4603      	mov	r3, r0
 801a702:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a704:	6978      	ldr	r0, [r7, #20]
 801a706:	f7f8 fced 	bl	80130e4 <pbuf_free>
 801a70a:	e001      	b.n	801a710 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a70c:	23ff      	movs	r3, #255	; 0xff
 801a70e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a710:	69bb      	ldr	r3, [r7, #24]
 801a712:	799b      	ldrb	r3, [r3, #6]
 801a714:	2bff      	cmp	r3, #255	; 0xff
 801a716:	d005      	beq.n	801a724 <dhcp_select+0x184>
    dhcp->tries++;
 801a718:	69bb      	ldr	r3, [r7, #24]
 801a71a:	799b      	ldrb	r3, [r3, #6]
 801a71c:	3301      	adds	r3, #1
 801a71e:	b2da      	uxtb	r2, r3
 801a720:	69bb      	ldr	r3, [r7, #24]
 801a722:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a724:	69bb      	ldr	r3, [r7, #24]
 801a726:	799b      	ldrb	r3, [r3, #6]
 801a728:	2b05      	cmp	r3, #5
 801a72a:	d80d      	bhi.n	801a748 <dhcp_select+0x1a8>
 801a72c:	69bb      	ldr	r3, [r7, #24]
 801a72e:	799b      	ldrb	r3, [r3, #6]
 801a730:	461a      	mov	r2, r3
 801a732:	2301      	movs	r3, #1
 801a734:	4093      	lsls	r3, r2
 801a736:	b29b      	uxth	r3, r3
 801a738:	461a      	mov	r2, r3
 801a73a:	0152      	lsls	r2, r2, #5
 801a73c:	1ad2      	subs	r2, r2, r3
 801a73e:	0092      	lsls	r2, r2, #2
 801a740:	4413      	add	r3, r2
 801a742:	00db      	lsls	r3, r3, #3
 801a744:	b29b      	uxth	r3, r3
 801a746:	e001      	b.n	801a74c <dhcp_select+0x1ac>
 801a748:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a74c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a74e:	89fb      	ldrh	r3, [r7, #14]
 801a750:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a754:	4a0f      	ldr	r2, [pc, #60]	; (801a794 <dhcp_select+0x1f4>)
 801a756:	fb82 1203 	smull	r1, r2, r2, r3
 801a75a:	1152      	asrs	r2, r2, #5
 801a75c:	17db      	asrs	r3, r3, #31
 801a75e:	1ad3      	subs	r3, r2, r3
 801a760:	b29a      	uxth	r2, r3
 801a762:	69bb      	ldr	r3, [r7, #24]
 801a764:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a766:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a76a:	4618      	mov	r0, r3
 801a76c:	3720      	adds	r7, #32
 801a76e:	46bd      	mov	sp, r7
 801a770:	bdb0      	pop	{r4, r5, r7, pc}
 801a772:	bf00      	nop
 801a774:	08023d5c 	.word	0x08023d5c
 801a778:	08023e08 	.word	0x08023e08
 801a77c:	08023dbc 	.word	0x08023dbc
 801a780:	08023e24 	.word	0x08023e24
 801a784:	200000f0 	.word	0x200000f0
 801a788:	20005fec 	.word	0x20005fec
 801a78c:	08024a48 	.word	0x08024a48
 801a790:	08024a4c 	.word	0x08024a4c
 801a794:	10624dd3 	.word	0x10624dd3

0801a798 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b082      	sub	sp, #8
 801a79c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801a79e:	4b27      	ldr	r3, [pc, #156]	; (801a83c <dhcp_coarse_tmr+0xa4>)
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	607b      	str	r3, [r7, #4]
 801a7a4:	e042      	b.n	801a82c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7aa:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801a7ac:	683b      	ldr	r3, [r7, #0]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d039      	beq.n	801a826 <dhcp_coarse_tmr+0x8e>
 801a7b2:	683b      	ldr	r3, [r7, #0]
 801a7b4:	795b      	ldrb	r3, [r3, #5]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d035      	beq.n	801a826 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801a7ba:	683b      	ldr	r3, [r7, #0]
 801a7bc:	8a9b      	ldrh	r3, [r3, #20]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d012      	beq.n	801a7e8 <dhcp_coarse_tmr+0x50>
 801a7c2:	683b      	ldr	r3, [r7, #0]
 801a7c4:	8a5b      	ldrh	r3, [r3, #18]
 801a7c6:	3301      	adds	r3, #1
 801a7c8:	b29a      	uxth	r2, r3
 801a7ca:	683b      	ldr	r3, [r7, #0]
 801a7cc:	825a      	strh	r2, [r3, #18]
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	8a5a      	ldrh	r2, [r3, #18]
 801a7d2:	683b      	ldr	r3, [r7, #0]
 801a7d4:	8a9b      	ldrh	r3, [r3, #20]
 801a7d6:	429a      	cmp	r2, r3
 801a7d8:	d106      	bne.n	801a7e8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801a7da:	6878      	ldr	r0, [r7, #4]
 801a7dc:	f000 fe32 	bl	801b444 <dhcp_release_and_stop>
        dhcp_start(netif);
 801a7e0:	6878      	ldr	r0, [r7, #4]
 801a7e2:	f000 f969 	bl	801aab8 <dhcp_start>
 801a7e6:	e01e      	b.n	801a826 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	8a1b      	ldrh	r3, [r3, #16]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d00b      	beq.n	801a808 <dhcp_coarse_tmr+0x70>
 801a7f0:	683b      	ldr	r3, [r7, #0]
 801a7f2:	8a1b      	ldrh	r3, [r3, #16]
 801a7f4:	1e5a      	subs	r2, r3, #1
 801a7f6:	b291      	uxth	r1, r2
 801a7f8:	683a      	ldr	r2, [r7, #0]
 801a7fa:	8211      	strh	r1, [r2, #16]
 801a7fc:	2b01      	cmp	r3, #1
 801a7fe:	d103      	bne.n	801a808 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801a800:	6878      	ldr	r0, [r7, #4]
 801a802:	f000 f8c6 	bl	801a992 <dhcp_t2_timeout>
 801a806:	e00e      	b.n	801a826 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801a808:	683b      	ldr	r3, [r7, #0]
 801a80a:	89db      	ldrh	r3, [r3, #14]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d00a      	beq.n	801a826 <dhcp_coarse_tmr+0x8e>
 801a810:	683b      	ldr	r3, [r7, #0]
 801a812:	89db      	ldrh	r3, [r3, #14]
 801a814:	1e5a      	subs	r2, r3, #1
 801a816:	b291      	uxth	r1, r2
 801a818:	683a      	ldr	r2, [r7, #0]
 801a81a:	81d1      	strh	r1, [r2, #14]
 801a81c:	2b01      	cmp	r3, #1
 801a81e:	d102      	bne.n	801a826 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801a820:	6878      	ldr	r0, [r7, #4]
 801a822:	f000 f888 	bl	801a936 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	607b      	str	r3, [r7, #4]
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d1b9      	bne.n	801a7a6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801a832:	bf00      	nop
 801a834:	bf00      	nop
 801a836:	3708      	adds	r7, #8
 801a838:	46bd      	mov	sp, r7
 801a83a:	bd80      	pop	{r7, pc}
 801a83c:	2000e9e4 	.word	0x2000e9e4

0801a840 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b082      	sub	sp, #8
 801a844:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801a846:	4b16      	ldr	r3, [pc, #88]	; (801a8a0 <dhcp_fine_tmr+0x60>)
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	607b      	str	r3, [r7, #4]
 801a84c:	e020      	b.n	801a890 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a852:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801a854:	683b      	ldr	r3, [r7, #0]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d017      	beq.n	801a88a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801a85a:	683b      	ldr	r3, [r7, #0]
 801a85c:	891b      	ldrh	r3, [r3, #8]
 801a85e:	2b01      	cmp	r3, #1
 801a860:	d906      	bls.n	801a870 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801a862:	683b      	ldr	r3, [r7, #0]
 801a864:	891b      	ldrh	r3, [r3, #8]
 801a866:	3b01      	subs	r3, #1
 801a868:	b29a      	uxth	r2, r3
 801a86a:	683b      	ldr	r3, [r7, #0]
 801a86c:	811a      	strh	r2, [r3, #8]
 801a86e:	e00c      	b.n	801a88a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801a870:	683b      	ldr	r3, [r7, #0]
 801a872:	891b      	ldrh	r3, [r3, #8]
 801a874:	2b01      	cmp	r3, #1
 801a876:	d108      	bne.n	801a88a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801a878:	683b      	ldr	r3, [r7, #0]
 801a87a:	891b      	ldrh	r3, [r3, #8]
 801a87c:	3b01      	subs	r3, #1
 801a87e:	b29a      	uxth	r2, r3
 801a880:	683b      	ldr	r3, [r7, #0]
 801a882:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801a884:	6878      	ldr	r0, [r7, #4]
 801a886:	f000 f80d 	bl	801a8a4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	607b      	str	r3, [r7, #4]
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d1db      	bne.n	801a84e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801a896:	bf00      	nop
 801a898:	bf00      	nop
 801a89a:	3708      	adds	r7, #8
 801a89c:	46bd      	mov	sp, r7
 801a89e:	bd80      	pop	{r7, pc}
 801a8a0:	2000e9e4 	.word	0x2000e9e4

0801a8a4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b084      	sub	sp, #16
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8b0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	795b      	ldrb	r3, [r3, #5]
 801a8b6:	2b0c      	cmp	r3, #12
 801a8b8:	d003      	beq.n	801a8c2 <dhcp_timeout+0x1e>
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	795b      	ldrb	r3, [r3, #5]
 801a8be:	2b06      	cmp	r3, #6
 801a8c0:	d103      	bne.n	801a8ca <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801a8c2:	6878      	ldr	r0, [r7, #4]
 801a8c4:	f000 fa54 	bl	801ad70 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801a8c8:	e031      	b.n	801a92e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	795b      	ldrb	r3, [r3, #5]
 801a8ce:	2b01      	cmp	r3, #1
 801a8d0:	d10e      	bne.n	801a8f0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	799b      	ldrb	r3, [r3, #6]
 801a8d6:	2b05      	cmp	r3, #5
 801a8d8:	d803      	bhi.n	801a8e2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801a8da:	6878      	ldr	r0, [r7, #4]
 801a8dc:	f7ff fe60 	bl	801a5a0 <dhcp_select>
}
 801a8e0:	e025      	b.n	801a92e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801a8e2:	6878      	ldr	r0, [r7, #4]
 801a8e4:	f000 fdae 	bl	801b444 <dhcp_release_and_stop>
      dhcp_start(netif);
 801a8e8:	6878      	ldr	r0, [r7, #4]
 801a8ea:	f000 f8e5 	bl	801aab8 <dhcp_start>
}
 801a8ee:	e01e      	b.n	801a92e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	795b      	ldrb	r3, [r3, #5]
 801a8f4:	2b08      	cmp	r3, #8
 801a8f6:	d10b      	bne.n	801a910 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	799b      	ldrb	r3, [r3, #6]
 801a8fc:	2b01      	cmp	r3, #1
 801a8fe:	d803      	bhi.n	801a908 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801a900:	6878      	ldr	r0, [r7, #4]
 801a902:	f7ff fdf3 	bl	801a4ec <dhcp_check>
}
 801a906:	e012      	b.n	801a92e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801a908:	6878      	ldr	r0, [r7, #4]
 801a90a:	f000 fad3 	bl	801aeb4 <dhcp_bind>
}
 801a90e:	e00e      	b.n	801a92e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	795b      	ldrb	r3, [r3, #5]
 801a914:	2b03      	cmp	r3, #3
 801a916:	d10a      	bne.n	801a92e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	799b      	ldrb	r3, [r3, #6]
 801a91c:	2b01      	cmp	r3, #1
 801a91e:	d803      	bhi.n	801a928 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801a920:	6878      	ldr	r0, [r7, #4]
 801a922:	f000 fcd9 	bl	801b2d8 <dhcp_reboot>
}
 801a926:	e002      	b.n	801a92e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801a928:	6878      	ldr	r0, [r7, #4]
 801a92a:	f000 fa21 	bl	801ad70 <dhcp_discover>
}
 801a92e:	bf00      	nop
 801a930:	3710      	adds	r7, #16
 801a932:	46bd      	mov	sp, r7
 801a934:	bd80      	pop	{r7, pc}

0801a936 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801a936:	b580      	push	{r7, lr}
 801a938:	b084      	sub	sp, #16
 801a93a:	af00      	add	r7, sp, #0
 801a93c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a942:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	795b      	ldrb	r3, [r3, #5]
 801a948:	2b01      	cmp	r3, #1
 801a94a:	d007      	beq.n	801a95c <dhcp_t1_timeout+0x26>
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	795b      	ldrb	r3, [r3, #5]
 801a950:	2b0a      	cmp	r3, #10
 801a952:	d003      	beq.n	801a95c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a958:	2b05      	cmp	r3, #5
 801a95a:	d116      	bne.n	801a98a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801a95c:	6878      	ldr	r0, [r7, #4]
 801a95e:	f000 fb83 	bl	801b068 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	899b      	ldrh	r3, [r3, #12]
 801a966:	461a      	mov	r2, r3
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	8a5b      	ldrh	r3, [r3, #18]
 801a96c:	1ad3      	subs	r3, r2, r3
 801a96e:	2b01      	cmp	r3, #1
 801a970:	dd0b      	ble.n	801a98a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	899b      	ldrh	r3, [r3, #12]
 801a976:	461a      	mov	r2, r3
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	8a5b      	ldrh	r3, [r3, #18]
 801a97c:	1ad3      	subs	r3, r2, r3
 801a97e:	0fda      	lsrs	r2, r3, #31
 801a980:	4413      	add	r3, r2
 801a982:	105b      	asrs	r3, r3, #1
 801a984:	b29a      	uxth	r2, r3
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801a98a:	bf00      	nop
 801a98c:	3710      	adds	r7, #16
 801a98e:	46bd      	mov	sp, r7
 801a990:	bd80      	pop	{r7, pc}

0801a992 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801a992:	b580      	push	{r7, lr}
 801a994:	b084      	sub	sp, #16
 801a996:	af00      	add	r7, sp, #0
 801a998:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a99e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	795b      	ldrb	r3, [r3, #5]
 801a9a4:	2b01      	cmp	r3, #1
 801a9a6:	d00b      	beq.n	801a9c0 <dhcp_t2_timeout+0x2e>
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	795b      	ldrb	r3, [r3, #5]
 801a9ac:	2b0a      	cmp	r3, #10
 801a9ae:	d007      	beq.n	801a9c0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a9b4:	2b05      	cmp	r3, #5
 801a9b6:	d003      	beq.n	801a9c0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	795b      	ldrb	r3, [r3, #5]
 801a9bc:	2b04      	cmp	r3, #4
 801a9be:	d116      	bne.n	801a9ee <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801a9c0:	6878      	ldr	r0, [r7, #4]
 801a9c2:	f000 fbed 	bl	801b1a0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	8a9b      	ldrh	r3, [r3, #20]
 801a9ca:	461a      	mov	r2, r3
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	8a5b      	ldrh	r3, [r3, #18]
 801a9d0:	1ad3      	subs	r3, r2, r3
 801a9d2:	2b01      	cmp	r3, #1
 801a9d4:	dd0b      	ble.n	801a9ee <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	8a9b      	ldrh	r3, [r3, #20]
 801a9da:	461a      	mov	r2, r3
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	8a5b      	ldrh	r3, [r3, #18]
 801a9e0:	1ad3      	subs	r3, r2, r3
 801a9e2:	0fda      	lsrs	r2, r3, #31
 801a9e4:	4413      	add	r3, r2
 801a9e6:	105b      	asrs	r3, r3, #1
 801a9e8:	b29a      	uxth	r2, r3
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801a9ee:	bf00      	nop
 801a9f0:	3710      	adds	r7, #16
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	bd80      	pop	{r7, pc}
	...

0801a9f8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b084      	sub	sp, #16
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
 801aa00:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa06:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	2200      	movs	r2, #0
 801aa12:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801aa14:	4b26      	ldr	r3, [pc, #152]	; (801aab0 <dhcp_handle_ack+0xb8>)
 801aa16:	78db      	ldrb	r3, [r3, #3]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d003      	beq.n	801aa24 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801aa1c:	4b25      	ldr	r3, [pc, #148]	; (801aab4 <dhcp_handle_ack+0xbc>)
 801aa1e:	68da      	ldr	r2, [r3, #12]
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801aa24:	4b22      	ldr	r3, [pc, #136]	; (801aab0 <dhcp_handle_ack+0xb8>)
 801aa26:	791b      	ldrb	r3, [r3, #4]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d004      	beq.n	801aa36 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801aa2c:	4b21      	ldr	r3, [pc, #132]	; (801aab4 <dhcp_handle_ack+0xbc>)
 801aa2e:	691a      	ldr	r2, [r3, #16]
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	62da      	str	r2, [r3, #44]	; 0x2c
 801aa34:	e004      	b.n	801aa40 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa3a:	085a      	lsrs	r2, r3, #1
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801aa40:	4b1b      	ldr	r3, [pc, #108]	; (801aab0 <dhcp_handle_ack+0xb8>)
 801aa42:	795b      	ldrb	r3, [r3, #5]
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d004      	beq.n	801aa52 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801aa48:	4b1a      	ldr	r3, [pc, #104]	; (801aab4 <dhcp_handle_ack+0xbc>)
 801aa4a:	695a      	ldr	r2, [r3, #20]
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	631a      	str	r2, [r3, #48]	; 0x30
 801aa50:	e007      	b.n	801aa62 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801aa52:	68fb      	ldr	r3, [r7, #12]
 801aa54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801aa56:	4613      	mov	r3, r2
 801aa58:	00db      	lsls	r3, r3, #3
 801aa5a:	1a9b      	subs	r3, r3, r2
 801aa5c:	08da      	lsrs	r2, r3, #3
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801aa62:	683b      	ldr	r3, [r7, #0]
 801aa64:	691a      	ldr	r2, [r3, #16]
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801aa6a:	4b11      	ldr	r3, [pc, #68]	; (801aab0 <dhcp_handle_ack+0xb8>)
 801aa6c:	799b      	ldrb	r3, [r3, #6]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d00b      	beq.n	801aa8a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801aa72:	4b10      	ldr	r3, [pc, #64]	; (801aab4 <dhcp_handle_ack+0xbc>)
 801aa74:	699b      	ldr	r3, [r3, #24]
 801aa76:	4618      	mov	r0, r3
 801aa78:	f7f6 ff91 	bl	801199e <lwip_htonl>
 801aa7c:	4602      	mov	r2, r0
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	2201      	movs	r2, #1
 801aa86:	71da      	strb	r2, [r3, #7]
 801aa88:	e002      	b.n	801aa90 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	2200      	movs	r2, #0
 801aa8e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801aa90:	4b07      	ldr	r3, [pc, #28]	; (801aab0 <dhcp_handle_ack+0xb8>)
 801aa92:	79db      	ldrb	r3, [r3, #7]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d007      	beq.n	801aaa8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801aa98:	4b06      	ldr	r3, [pc, #24]	; (801aab4 <dhcp_handle_ack+0xbc>)
 801aa9a:	69db      	ldr	r3, [r3, #28]
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	f7f6 ff7e 	bl	801199e <lwip_htonl>
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801aaa8:	bf00      	nop
 801aaaa:	3710      	adds	r7, #16
 801aaac:	46bd      	mov	sp, r7
 801aaae:	bd80      	pop	{r7, pc}
 801aab0:	2000ea10 	.word	0x2000ea10
 801aab4:	2000ea18 	.word	0x2000ea18

0801aab8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b084      	sub	sp, #16
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d109      	bne.n	801aada <dhcp_start+0x22>
 801aac6:	4b37      	ldr	r3, [pc, #220]	; (801aba4 <dhcp_start+0xec>)
 801aac8:	f240 22e7 	movw	r2, #743	; 0x2e7
 801aacc:	4936      	ldr	r1, [pc, #216]	; (801aba8 <dhcp_start+0xf0>)
 801aace:	4837      	ldr	r0, [pc, #220]	; (801abac <dhcp_start+0xf4>)
 801aad0:	f005 f872 	bl	801fbb8 <iprintf>
 801aad4:	f06f 030f 	mvn.w	r3, #15
 801aad8:	e060      	b.n	801ab9c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801aae0:	f003 0301 	and.w	r3, r3, #1
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d109      	bne.n	801aafc <dhcp_start+0x44>
 801aae8:	4b2e      	ldr	r3, [pc, #184]	; (801aba4 <dhcp_start+0xec>)
 801aaea:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801aaee:	4930      	ldr	r1, [pc, #192]	; (801abb0 <dhcp_start+0xf8>)
 801aaf0:	482e      	ldr	r0, [pc, #184]	; (801abac <dhcp_start+0xf4>)
 801aaf2:	f005 f861 	bl	801fbb8 <iprintf>
 801aaf6:	f06f 030f 	mvn.w	r3, #15
 801aafa:	e04f      	b.n	801ab9c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab00:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ab06:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801ab0a:	d202      	bcs.n	801ab12 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801ab0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ab10:	e044      	b.n	801ab9c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d10d      	bne.n	801ab34 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801ab18:	2034      	movs	r0, #52	; 0x34
 801ab1a:	f7f7 fa5f 	bl	8011fdc <mem_malloc>
 801ab1e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d102      	bne.n	801ab2c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801ab26:	f04f 33ff 	mov.w	r3, #4294967295
 801ab2a:	e037      	b.n	801ab9c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	68fa      	ldr	r2, [r7, #12]
 801ab30:	625a      	str	r2, [r3, #36]	; 0x24
 801ab32:	e005      	b.n	801ab40 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	791b      	ldrb	r3, [r3, #4]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d001      	beq.n	801ab40 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801ab3c:	f7ff fc92 	bl	801a464 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801ab40:	2234      	movs	r2, #52	; 0x34
 801ab42:	2100      	movs	r1, #0
 801ab44:	68f8      	ldr	r0, [r7, #12]
 801ab46:	f004 ffd4 	bl	801faf2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801ab4a:	f7ff fc39 	bl	801a3c0 <dhcp_inc_pcb_refcount>
 801ab4e:	4603      	mov	r3, r0
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d002      	beq.n	801ab5a <dhcp_start+0xa2>
    return ERR_MEM;
 801ab54:	f04f 33ff 	mov.w	r3, #4294967295
 801ab58:	e020      	b.n	801ab9c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	2201      	movs	r2, #1
 801ab5e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ab66:	f003 0304 	and.w	r3, r3, #4
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d105      	bne.n	801ab7a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801ab6e:	2102      	movs	r1, #2
 801ab70:	68f8      	ldr	r0, [r7, #12]
 801ab72:	f000 fd01 	bl	801b578 <dhcp_set_state>
    return ERR_OK;
 801ab76:	2300      	movs	r3, #0
 801ab78:	e010      	b.n	801ab9c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801ab7a:	6878      	ldr	r0, [r7, #4]
 801ab7c:	f000 f8f8 	bl	801ad70 <dhcp_discover>
 801ab80:	4603      	mov	r3, r0
 801ab82:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801ab84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d005      	beq.n	801ab98 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801ab8c:	6878      	ldr	r0, [r7, #4]
 801ab8e:	f000 fc59 	bl	801b444 <dhcp_release_and_stop>
    return ERR_MEM;
 801ab92:	f04f 33ff 	mov.w	r3, #4294967295
 801ab96:	e001      	b.n	801ab9c <dhcp_start+0xe4>
  }
  return result;
 801ab98:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	3710      	adds	r7, #16
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bd80      	pop	{r7, pc}
 801aba4:	08023d5c 	.word	0x08023d5c
 801aba8:	08023e40 	.word	0x08023e40
 801abac:	08023dbc 	.word	0x08023dbc
 801abb0:	08023e84 	.word	0x08023e84

0801abb4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b084      	sub	sp, #16
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abc0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d025      	beq.n	801ac14 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	795b      	ldrb	r3, [r3, #5]
 801abcc:	2b0a      	cmp	r3, #10
 801abce:	d008      	beq.n	801abe2 <dhcp_network_changed+0x2e>
 801abd0:	2b0a      	cmp	r3, #10
 801abd2:	dc0d      	bgt.n	801abf0 <dhcp_network_changed+0x3c>
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d01f      	beq.n	801ac18 <dhcp_network_changed+0x64>
 801abd8:	2b00      	cmp	r3, #0
 801abda:	db09      	blt.n	801abf0 <dhcp_network_changed+0x3c>
 801abdc:	3b03      	subs	r3, #3
 801abde:	2b02      	cmp	r3, #2
 801abe0:	d806      	bhi.n	801abf0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	2200      	movs	r2, #0
 801abe6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801abe8:	6878      	ldr	r0, [r7, #4]
 801abea:	f000 fb75 	bl	801b2d8 <dhcp_reboot>
      break;
 801abee:	e014      	b.n	801ac1a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	795b      	ldrb	r3, [r3, #5]
 801abf4:	2b0c      	cmp	r3, #12
 801abf6:	d906      	bls.n	801ac06 <dhcp_network_changed+0x52>
 801abf8:	4b09      	ldr	r3, [pc, #36]	; (801ac20 <dhcp_network_changed+0x6c>)
 801abfa:	f240 326d 	movw	r2, #877	; 0x36d
 801abfe:	4909      	ldr	r1, [pc, #36]	; (801ac24 <dhcp_network_changed+0x70>)
 801ac00:	4809      	ldr	r0, [pc, #36]	; (801ac28 <dhcp_network_changed+0x74>)
 801ac02:	f004 ffd9 	bl	801fbb8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	2200      	movs	r2, #0
 801ac0a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801ac0c:	6878      	ldr	r0, [r7, #4]
 801ac0e:	f000 f8af 	bl	801ad70 <dhcp_discover>
      break;
 801ac12:	e002      	b.n	801ac1a <dhcp_network_changed+0x66>
    return;
 801ac14:	bf00      	nop
 801ac16:	e000      	b.n	801ac1a <dhcp_network_changed+0x66>
      break;
 801ac18:	bf00      	nop
  }
}
 801ac1a:	3710      	adds	r7, #16
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}
 801ac20:	08023d5c 	.word	0x08023d5c
 801ac24:	08023ea8 	.word	0x08023ea8
 801ac28:	08023dbc 	.word	0x08023dbc

0801ac2c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b084      	sub	sp, #16
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
 801ac34:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d107      	bne.n	801ac4c <dhcp_arp_reply+0x20>
 801ac3c:	4b0e      	ldr	r3, [pc, #56]	; (801ac78 <dhcp_arp_reply+0x4c>)
 801ac3e:	f240 328b 	movw	r2, #907	; 0x38b
 801ac42:	490e      	ldr	r1, [pc, #56]	; (801ac7c <dhcp_arp_reply+0x50>)
 801ac44:	480e      	ldr	r0, [pc, #56]	; (801ac80 <dhcp_arp_reply+0x54>)
 801ac46:	f004 ffb7 	bl	801fbb8 <iprintf>
 801ac4a:	e012      	b.n	801ac72 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac50:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d00c      	beq.n	801ac72 <dhcp_arp_reply+0x46>
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	795b      	ldrb	r3, [r3, #5]
 801ac5c:	2b08      	cmp	r3, #8
 801ac5e:	d108      	bne.n	801ac72 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801ac60:	683b      	ldr	r3, [r7, #0]
 801ac62:	681a      	ldr	r2, [r3, #0]
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	69db      	ldr	r3, [r3, #28]
 801ac68:	429a      	cmp	r2, r3
 801ac6a:	d102      	bne.n	801ac72 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801ac6c:	6878      	ldr	r0, [r7, #4]
 801ac6e:	f000 f809 	bl	801ac84 <dhcp_decline>
    }
  }
}
 801ac72:	3710      	adds	r7, #16
 801ac74:	46bd      	mov	sp, r7
 801ac76:	bd80      	pop	{r7, pc}
 801ac78:	08023d5c 	.word	0x08023d5c
 801ac7c:	08023e40 	.word	0x08023e40
 801ac80:	08023dbc 	.word	0x08023dbc

0801ac84 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801ac84:	b5b0      	push	{r4, r5, r7, lr}
 801ac86:	b08a      	sub	sp, #40	; 0x28
 801ac88:	af02      	add	r7, sp, #8
 801ac8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac90:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801ac92:	210c      	movs	r1, #12
 801ac94:	69b8      	ldr	r0, [r7, #24]
 801ac96:	f000 fc6f 	bl	801b578 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801ac9a:	f107 030c 	add.w	r3, r7, #12
 801ac9e:	2204      	movs	r2, #4
 801aca0:	69b9      	ldr	r1, [r7, #24]
 801aca2:	6878      	ldr	r0, [r7, #4]
 801aca4:	f001 f8f4 	bl	801be90 <dhcp_create_msg>
 801aca8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801acaa:	697b      	ldr	r3, [r7, #20]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d035      	beq.n	801ad1c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801acb0:	697b      	ldr	r3, [r7, #20]
 801acb2:	685b      	ldr	r3, [r3, #4]
 801acb4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801acb6:	89b8      	ldrh	r0, [r7, #12]
 801acb8:	693b      	ldr	r3, [r7, #16]
 801acba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801acbe:	2304      	movs	r3, #4
 801acc0:	2232      	movs	r2, #50	; 0x32
 801acc2:	f000 fc73 	bl	801b5ac <dhcp_option>
 801acc6:	4603      	mov	r3, r0
 801acc8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801acca:	89bc      	ldrh	r4, [r7, #12]
 801accc:	693b      	ldr	r3, [r7, #16]
 801acce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801acd2:	69bb      	ldr	r3, [r7, #24]
 801acd4:	69db      	ldr	r3, [r3, #28]
 801acd6:	4618      	mov	r0, r3
 801acd8:	f7f6 fe61 	bl	801199e <lwip_htonl>
 801acdc:	4603      	mov	r3, r0
 801acde:	461a      	mov	r2, r3
 801ace0:	4629      	mov	r1, r5
 801ace2:	4620      	mov	r0, r4
 801ace4:	f000 fcee 	bl	801b6c4 <dhcp_option_long>
 801ace8:	4603      	mov	r3, r0
 801acea:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801acec:	89b8      	ldrh	r0, [r7, #12]
 801acee:	693b      	ldr	r3, [r7, #16]
 801acf0:	33f0      	adds	r3, #240	; 0xf0
 801acf2:	697a      	ldr	r2, [r7, #20]
 801acf4:	4619      	mov	r1, r3
 801acf6:	f001 f9a1 	bl	801c03c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801acfa:	4b19      	ldr	r3, [pc, #100]	; (801ad60 <dhcp_decline+0xdc>)
 801acfc:	6818      	ldr	r0, [r3, #0]
 801acfe:	4b19      	ldr	r3, [pc, #100]	; (801ad64 <dhcp_decline+0xe0>)
 801ad00:	9301      	str	r3, [sp, #4]
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	9300      	str	r3, [sp, #0]
 801ad06:	2343      	movs	r3, #67	; 0x43
 801ad08:	4a17      	ldr	r2, [pc, #92]	; (801ad68 <dhcp_decline+0xe4>)
 801ad0a:	6979      	ldr	r1, [r7, #20]
 801ad0c:	f7ff f8c6 	bl	8019e9c <udp_sendto_if_src>
 801ad10:	4603      	mov	r3, r0
 801ad12:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ad14:	6978      	ldr	r0, [r7, #20]
 801ad16:	f7f8 f9e5 	bl	80130e4 <pbuf_free>
 801ad1a:	e001      	b.n	801ad20 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ad1c:	23ff      	movs	r3, #255	; 0xff
 801ad1e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ad20:	69bb      	ldr	r3, [r7, #24]
 801ad22:	799b      	ldrb	r3, [r3, #6]
 801ad24:	2bff      	cmp	r3, #255	; 0xff
 801ad26:	d005      	beq.n	801ad34 <dhcp_decline+0xb0>
    dhcp->tries++;
 801ad28:	69bb      	ldr	r3, [r7, #24]
 801ad2a:	799b      	ldrb	r3, [r3, #6]
 801ad2c:	3301      	adds	r3, #1
 801ad2e:	b2da      	uxtb	r2, r3
 801ad30:	69bb      	ldr	r3, [r7, #24]
 801ad32:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801ad34:	f242 7310 	movw	r3, #10000	; 0x2710
 801ad38:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ad3a:	89fb      	ldrh	r3, [r7, #14]
 801ad3c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ad40:	4a0a      	ldr	r2, [pc, #40]	; (801ad6c <dhcp_decline+0xe8>)
 801ad42:	fb82 1203 	smull	r1, r2, r2, r3
 801ad46:	1152      	asrs	r2, r2, #5
 801ad48:	17db      	asrs	r3, r3, #31
 801ad4a:	1ad3      	subs	r3, r2, r3
 801ad4c:	b29a      	uxth	r2, r3
 801ad4e:	69bb      	ldr	r3, [r7, #24]
 801ad50:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ad52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	3720      	adds	r7, #32
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	bdb0      	pop	{r4, r5, r7, pc}
 801ad5e:	bf00      	nop
 801ad60:	20005fec 	.word	0x20005fec
 801ad64:	08024a48 	.word	0x08024a48
 801ad68:	08024a4c 	.word	0x08024a4c
 801ad6c:	10624dd3 	.word	0x10624dd3

0801ad70 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b08a      	sub	sp, #40	; 0x28
 801ad74:	af02      	add	r7, sp, #8
 801ad76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad7c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801ad82:	69bb      	ldr	r3, [r7, #24]
 801ad84:	2200      	movs	r2, #0
 801ad86:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801ad88:	2106      	movs	r1, #6
 801ad8a:	69b8      	ldr	r0, [r7, #24]
 801ad8c:	f000 fbf4 	bl	801b578 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801ad90:	f107 0308 	add.w	r3, r7, #8
 801ad94:	2201      	movs	r2, #1
 801ad96:	69b9      	ldr	r1, [r7, #24]
 801ad98:	6878      	ldr	r0, [r7, #4]
 801ad9a:	f001 f879 	bl	801be90 <dhcp_create_msg>
 801ad9e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801ada0:	693b      	ldr	r3, [r7, #16]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d04b      	beq.n	801ae3e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ada6:	693b      	ldr	r3, [r7, #16]
 801ada8:	685b      	ldr	r3, [r3, #4]
 801adaa:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801adac:	8938      	ldrh	r0, [r7, #8]
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801adb4:	2302      	movs	r3, #2
 801adb6:	2239      	movs	r2, #57	; 0x39
 801adb8:	f000 fbf8 	bl	801b5ac <dhcp_option>
 801adbc:	4603      	mov	r3, r0
 801adbe:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801adc0:	8938      	ldrh	r0, [r7, #8]
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801adcc:	461a      	mov	r2, r3
 801adce:	f000 fc47 	bl	801b660 <dhcp_option_short>
 801add2:	4603      	mov	r3, r0
 801add4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801add6:	8938      	ldrh	r0, [r7, #8]
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801adde:	2303      	movs	r3, #3
 801ade0:	2237      	movs	r2, #55	; 0x37
 801ade2:	f000 fbe3 	bl	801b5ac <dhcp_option>
 801ade6:	4603      	mov	r3, r0
 801ade8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801adea:	2300      	movs	r3, #0
 801adec:	77fb      	strb	r3, [r7, #31]
 801adee:	e00e      	b.n	801ae0e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801adf0:	8938      	ldrh	r0, [r7, #8]
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801adf8:	7ffb      	ldrb	r3, [r7, #31]
 801adfa:	4a29      	ldr	r2, [pc, #164]	; (801aea0 <dhcp_discover+0x130>)
 801adfc:	5cd3      	ldrb	r3, [r2, r3]
 801adfe:	461a      	mov	r2, r3
 801ae00:	f000 fc08 	bl	801b614 <dhcp_option_byte>
 801ae04:	4603      	mov	r3, r0
 801ae06:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ae08:	7ffb      	ldrb	r3, [r7, #31]
 801ae0a:	3301      	adds	r3, #1
 801ae0c:	77fb      	strb	r3, [r7, #31]
 801ae0e:	7ffb      	ldrb	r3, [r7, #31]
 801ae10:	2b02      	cmp	r3, #2
 801ae12:	d9ed      	bls.n	801adf0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ae14:	8938      	ldrh	r0, [r7, #8]
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	33f0      	adds	r3, #240	; 0xf0
 801ae1a:	693a      	ldr	r2, [r7, #16]
 801ae1c:	4619      	mov	r1, r3
 801ae1e:	f001 f90d 	bl	801c03c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801ae22:	4b20      	ldr	r3, [pc, #128]	; (801aea4 <dhcp_discover+0x134>)
 801ae24:	6818      	ldr	r0, [r3, #0]
 801ae26:	4b20      	ldr	r3, [pc, #128]	; (801aea8 <dhcp_discover+0x138>)
 801ae28:	9301      	str	r3, [sp, #4]
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	9300      	str	r3, [sp, #0]
 801ae2e:	2343      	movs	r3, #67	; 0x43
 801ae30:	4a1e      	ldr	r2, [pc, #120]	; (801aeac <dhcp_discover+0x13c>)
 801ae32:	6939      	ldr	r1, [r7, #16]
 801ae34:	f7ff f832 	bl	8019e9c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801ae38:	6938      	ldr	r0, [r7, #16]
 801ae3a:	f7f8 f953 	bl	80130e4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801ae3e:	69bb      	ldr	r3, [r7, #24]
 801ae40:	799b      	ldrb	r3, [r3, #6]
 801ae42:	2bff      	cmp	r3, #255	; 0xff
 801ae44:	d005      	beq.n	801ae52 <dhcp_discover+0xe2>
    dhcp->tries++;
 801ae46:	69bb      	ldr	r3, [r7, #24]
 801ae48:	799b      	ldrb	r3, [r3, #6]
 801ae4a:	3301      	adds	r3, #1
 801ae4c:	b2da      	uxtb	r2, r3
 801ae4e:	69bb      	ldr	r3, [r7, #24]
 801ae50:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801ae52:	69bb      	ldr	r3, [r7, #24]
 801ae54:	799b      	ldrb	r3, [r3, #6]
 801ae56:	2b05      	cmp	r3, #5
 801ae58:	d80d      	bhi.n	801ae76 <dhcp_discover+0x106>
 801ae5a:	69bb      	ldr	r3, [r7, #24]
 801ae5c:	799b      	ldrb	r3, [r3, #6]
 801ae5e:	461a      	mov	r2, r3
 801ae60:	2301      	movs	r3, #1
 801ae62:	4093      	lsls	r3, r2
 801ae64:	b29b      	uxth	r3, r3
 801ae66:	461a      	mov	r2, r3
 801ae68:	0152      	lsls	r2, r2, #5
 801ae6a:	1ad2      	subs	r2, r2, r3
 801ae6c:	0092      	lsls	r2, r2, #2
 801ae6e:	4413      	add	r3, r2
 801ae70:	00db      	lsls	r3, r3, #3
 801ae72:	b29b      	uxth	r3, r3
 801ae74:	e001      	b.n	801ae7a <dhcp_discover+0x10a>
 801ae76:	f64e 2360 	movw	r3, #60000	; 0xea60
 801ae7a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ae7c:	897b      	ldrh	r3, [r7, #10]
 801ae7e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ae82:	4a0b      	ldr	r2, [pc, #44]	; (801aeb0 <dhcp_discover+0x140>)
 801ae84:	fb82 1203 	smull	r1, r2, r2, r3
 801ae88:	1152      	asrs	r2, r2, #5
 801ae8a:	17db      	asrs	r3, r3, #31
 801ae8c:	1ad3      	subs	r3, r2, r3
 801ae8e:	b29a      	uxth	r2, r3
 801ae90:	69bb      	ldr	r3, [r7, #24]
 801ae92:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ae94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ae98:	4618      	mov	r0, r3
 801ae9a:	3720      	adds	r7, #32
 801ae9c:	46bd      	mov	sp, r7
 801ae9e:	bd80      	pop	{r7, pc}
 801aea0:	200000f0 	.word	0x200000f0
 801aea4:	20005fec 	.word	0x20005fec
 801aea8:	08024a48 	.word	0x08024a48
 801aeac:	08024a4c 	.word	0x08024a4c
 801aeb0:	10624dd3 	.word	0x10624dd3

0801aeb4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b088      	sub	sp, #32
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d107      	bne.n	801aed2 <dhcp_bind+0x1e>
 801aec2:	4b64      	ldr	r3, [pc, #400]	; (801b054 <dhcp_bind+0x1a0>)
 801aec4:	f240 4215 	movw	r2, #1045	; 0x415
 801aec8:	4963      	ldr	r1, [pc, #396]	; (801b058 <dhcp_bind+0x1a4>)
 801aeca:	4864      	ldr	r0, [pc, #400]	; (801b05c <dhcp_bind+0x1a8>)
 801aecc:	f004 fe74 	bl	801fbb8 <iprintf>
 801aed0:	e0bc      	b.n	801b04c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aed6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801aed8:	69bb      	ldr	r3, [r7, #24]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d107      	bne.n	801aeee <dhcp_bind+0x3a>
 801aede:	4b5d      	ldr	r3, [pc, #372]	; (801b054 <dhcp_bind+0x1a0>)
 801aee0:	f240 4217 	movw	r2, #1047	; 0x417
 801aee4:	495e      	ldr	r1, [pc, #376]	; (801b060 <dhcp_bind+0x1ac>)
 801aee6:	485d      	ldr	r0, [pc, #372]	; (801b05c <dhcp_bind+0x1a8>)
 801aee8:	f004 fe66 	bl	801fbb8 <iprintf>
 801aeec:	e0ae      	b.n	801b04c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801aeee:	69bb      	ldr	r3, [r7, #24]
 801aef0:	2200      	movs	r2, #0
 801aef2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801aef4:	69bb      	ldr	r3, [r7, #24]
 801aef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aefc:	d019      	beq.n	801af32 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801aefe:	69bb      	ldr	r3, [r7, #24]
 801af00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af02:	331e      	adds	r3, #30
 801af04:	4a57      	ldr	r2, [pc, #348]	; (801b064 <dhcp_bind+0x1b0>)
 801af06:	fba2 2303 	umull	r2, r3, r2, r3
 801af0a:	095b      	lsrs	r3, r3, #5
 801af0c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801af0e:	69fb      	ldr	r3, [r7, #28]
 801af10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af14:	d302      	bcc.n	801af1c <dhcp_bind+0x68>
      timeout = 0xffff;
 801af16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af1a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801af1c:	69fb      	ldr	r3, [r7, #28]
 801af1e:	b29a      	uxth	r2, r3
 801af20:	69bb      	ldr	r3, [r7, #24]
 801af22:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801af24:	69bb      	ldr	r3, [r7, #24]
 801af26:	8a9b      	ldrh	r3, [r3, #20]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d102      	bne.n	801af32 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801af2c:	69bb      	ldr	r3, [r7, #24]
 801af2e:	2201      	movs	r2, #1
 801af30:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801af32:	69bb      	ldr	r3, [r7, #24]
 801af34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af36:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af3a:	d01d      	beq.n	801af78 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801af3c:	69bb      	ldr	r3, [r7, #24]
 801af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af40:	331e      	adds	r3, #30
 801af42:	4a48      	ldr	r2, [pc, #288]	; (801b064 <dhcp_bind+0x1b0>)
 801af44:	fba2 2303 	umull	r2, r3, r2, r3
 801af48:	095b      	lsrs	r3, r3, #5
 801af4a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801af4c:	69fb      	ldr	r3, [r7, #28]
 801af4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af52:	d302      	bcc.n	801af5a <dhcp_bind+0xa6>
      timeout = 0xffff;
 801af54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af58:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801af5a:	69fb      	ldr	r3, [r7, #28]
 801af5c:	b29a      	uxth	r2, r3
 801af5e:	69bb      	ldr	r3, [r7, #24]
 801af60:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801af62:	69bb      	ldr	r3, [r7, #24]
 801af64:	895b      	ldrh	r3, [r3, #10]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d102      	bne.n	801af70 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801af6a:	69bb      	ldr	r3, [r7, #24]
 801af6c:	2201      	movs	r2, #1
 801af6e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801af70:	69bb      	ldr	r3, [r7, #24]
 801af72:	895a      	ldrh	r2, [r3, #10]
 801af74:	69bb      	ldr	r3, [r7, #24]
 801af76:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801af78:	69bb      	ldr	r3, [r7, #24]
 801af7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af80:	d01d      	beq.n	801afbe <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801af82:	69bb      	ldr	r3, [r7, #24]
 801af84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af86:	331e      	adds	r3, #30
 801af88:	4a36      	ldr	r2, [pc, #216]	; (801b064 <dhcp_bind+0x1b0>)
 801af8a:	fba2 2303 	umull	r2, r3, r2, r3
 801af8e:	095b      	lsrs	r3, r3, #5
 801af90:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801af92:	69fb      	ldr	r3, [r7, #28]
 801af94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af98:	d302      	bcc.n	801afa0 <dhcp_bind+0xec>
      timeout = 0xffff;
 801af9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af9e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801afa0:	69fb      	ldr	r3, [r7, #28]
 801afa2:	b29a      	uxth	r2, r3
 801afa4:	69bb      	ldr	r3, [r7, #24]
 801afa6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801afa8:	69bb      	ldr	r3, [r7, #24]
 801afaa:	899b      	ldrh	r3, [r3, #12]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d102      	bne.n	801afb6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801afb0:	69bb      	ldr	r3, [r7, #24]
 801afb2:	2201      	movs	r2, #1
 801afb4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801afb6:	69bb      	ldr	r3, [r7, #24]
 801afb8:	899a      	ldrh	r2, [r3, #12]
 801afba:	69bb      	ldr	r3, [r7, #24]
 801afbc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801afbe:	69bb      	ldr	r3, [r7, #24]
 801afc0:	895a      	ldrh	r2, [r3, #10]
 801afc2:	69bb      	ldr	r3, [r7, #24]
 801afc4:	899b      	ldrh	r3, [r3, #12]
 801afc6:	429a      	cmp	r2, r3
 801afc8:	d306      	bcc.n	801afd8 <dhcp_bind+0x124>
 801afca:	69bb      	ldr	r3, [r7, #24]
 801afcc:	899b      	ldrh	r3, [r3, #12]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d002      	beq.n	801afd8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801afd2:	69bb      	ldr	r3, [r7, #24]
 801afd4:	2200      	movs	r2, #0
 801afd6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801afd8:	69bb      	ldr	r3, [r7, #24]
 801afda:	79db      	ldrb	r3, [r3, #7]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d003      	beq.n	801afe8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801afe0:	69bb      	ldr	r3, [r7, #24]
 801afe2:	6a1b      	ldr	r3, [r3, #32]
 801afe4:	613b      	str	r3, [r7, #16]
 801afe6:	e014      	b.n	801b012 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801afe8:	69bb      	ldr	r3, [r7, #24]
 801afea:	331c      	adds	r3, #28
 801afec:	781b      	ldrb	r3, [r3, #0]
 801afee:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801aff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	db02      	blt.n	801affe <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801aff8:	23ff      	movs	r3, #255	; 0xff
 801affa:	613b      	str	r3, [r7, #16]
 801affc:	e009      	b.n	801b012 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801affe:	7dfb      	ldrb	r3, [r7, #23]
 801b000:	2bbf      	cmp	r3, #191	; 0xbf
 801b002:	d903      	bls.n	801b00c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801b004:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801b008:	613b      	str	r3, [r7, #16]
 801b00a:	e002      	b.n	801b012 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801b00c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b010:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801b012:	69bb      	ldr	r3, [r7, #24]
 801b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b016:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d108      	bne.n	801b030 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801b01e:	69bb      	ldr	r3, [r7, #24]
 801b020:	69da      	ldr	r2, [r3, #28]
 801b022:	693b      	ldr	r3, [r7, #16]
 801b024:	4013      	ands	r3, r2
 801b026:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b02e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801b030:	210a      	movs	r1, #10
 801b032:	69b8      	ldr	r0, [r7, #24]
 801b034:	f000 faa0 	bl	801b578 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801b038:	69bb      	ldr	r3, [r7, #24]
 801b03a:	f103 011c 	add.w	r1, r3, #28
 801b03e:	f107 030c 	add.w	r3, r7, #12
 801b042:	f107 0210 	add.w	r2, r7, #16
 801b046:	6878      	ldr	r0, [r7, #4]
 801b048:	f7f7 fb3e 	bl	80126c8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801b04c:	3720      	adds	r7, #32
 801b04e:	46bd      	mov	sp, r7
 801b050:	bd80      	pop	{r7, pc}
 801b052:	bf00      	nop
 801b054:	08023d5c 	.word	0x08023d5c
 801b058:	08023ebc 	.word	0x08023ebc
 801b05c:	08023dbc 	.word	0x08023dbc
 801b060:	08023ed8 	.word	0x08023ed8
 801b064:	88888889 	.word	0x88888889

0801b068 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	b08a      	sub	sp, #40	; 0x28
 801b06c:	af02      	add	r7, sp, #8
 801b06e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b074:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801b076:	2105      	movs	r1, #5
 801b078:	69b8      	ldr	r0, [r7, #24]
 801b07a:	f000 fa7d 	bl	801b578 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b07e:	f107 030c 	add.w	r3, r7, #12
 801b082:	2203      	movs	r2, #3
 801b084:	69b9      	ldr	r1, [r7, #24]
 801b086:	6878      	ldr	r0, [r7, #4]
 801b088:	f000 ff02 	bl	801be90 <dhcp_create_msg>
 801b08c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b08e:	697b      	ldr	r3, [r7, #20]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d04e      	beq.n	801b132 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b094:	697b      	ldr	r3, [r7, #20]
 801b096:	685b      	ldr	r3, [r3, #4]
 801b098:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b09a:	89b8      	ldrh	r0, [r7, #12]
 801b09c:	693b      	ldr	r3, [r7, #16]
 801b09e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b0a2:	2302      	movs	r3, #2
 801b0a4:	2239      	movs	r2, #57	; 0x39
 801b0a6:	f000 fa81 	bl	801b5ac <dhcp_option>
 801b0aa:	4603      	mov	r3, r0
 801b0ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801b0ae:	89b8      	ldrh	r0, [r7, #12]
 801b0b0:	693b      	ldr	r3, [r7, #16]
 801b0b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b0ba:	461a      	mov	r2, r3
 801b0bc:	f000 fad0 	bl	801b660 <dhcp_option_short>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b0c4:	89b8      	ldrh	r0, [r7, #12]
 801b0c6:	693b      	ldr	r3, [r7, #16]
 801b0c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b0cc:	2303      	movs	r3, #3
 801b0ce:	2237      	movs	r2, #55	; 0x37
 801b0d0:	f000 fa6c 	bl	801b5ac <dhcp_option>
 801b0d4:	4603      	mov	r3, r0
 801b0d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b0d8:	2300      	movs	r3, #0
 801b0da:	77bb      	strb	r3, [r7, #30]
 801b0dc:	e00e      	b.n	801b0fc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b0de:	89b8      	ldrh	r0, [r7, #12]
 801b0e0:	693b      	ldr	r3, [r7, #16]
 801b0e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b0e6:	7fbb      	ldrb	r3, [r7, #30]
 801b0e8:	4a2a      	ldr	r2, [pc, #168]	; (801b194 <dhcp_renew+0x12c>)
 801b0ea:	5cd3      	ldrb	r3, [r2, r3]
 801b0ec:	461a      	mov	r2, r3
 801b0ee:	f000 fa91 	bl	801b614 <dhcp_option_byte>
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b0f6:	7fbb      	ldrb	r3, [r7, #30]
 801b0f8:	3301      	adds	r3, #1
 801b0fa:	77bb      	strb	r3, [r7, #30]
 801b0fc:	7fbb      	ldrb	r3, [r7, #30]
 801b0fe:	2b02      	cmp	r3, #2
 801b100:	d9ed      	bls.n	801b0de <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b102:	89b8      	ldrh	r0, [r7, #12]
 801b104:	693b      	ldr	r3, [r7, #16]
 801b106:	33f0      	adds	r3, #240	; 0xf0
 801b108:	697a      	ldr	r2, [r7, #20]
 801b10a:	4619      	mov	r1, r3
 801b10c:	f000 ff96 	bl	801c03c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b110:	4b21      	ldr	r3, [pc, #132]	; (801b198 <dhcp_renew+0x130>)
 801b112:	6818      	ldr	r0, [r3, #0]
 801b114:	69bb      	ldr	r3, [r7, #24]
 801b116:	f103 0218 	add.w	r2, r3, #24
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	9300      	str	r3, [sp, #0]
 801b11e:	2343      	movs	r3, #67	; 0x43
 801b120:	6979      	ldr	r1, [r7, #20]
 801b122:	f7fe fe47 	bl	8019db4 <udp_sendto_if>
 801b126:	4603      	mov	r3, r0
 801b128:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b12a:	6978      	ldr	r0, [r7, #20]
 801b12c:	f7f7 ffda 	bl	80130e4 <pbuf_free>
 801b130:	e001      	b.n	801b136 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b132:	23ff      	movs	r3, #255	; 0xff
 801b134:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b136:	69bb      	ldr	r3, [r7, #24]
 801b138:	799b      	ldrb	r3, [r3, #6]
 801b13a:	2bff      	cmp	r3, #255	; 0xff
 801b13c:	d005      	beq.n	801b14a <dhcp_renew+0xe2>
    dhcp->tries++;
 801b13e:	69bb      	ldr	r3, [r7, #24]
 801b140:	799b      	ldrb	r3, [r3, #6]
 801b142:	3301      	adds	r3, #1
 801b144:	b2da      	uxtb	r2, r3
 801b146:	69bb      	ldr	r3, [r7, #24]
 801b148:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801b14a:	69bb      	ldr	r3, [r7, #24]
 801b14c:	799b      	ldrb	r3, [r3, #6]
 801b14e:	2b09      	cmp	r3, #9
 801b150:	d80a      	bhi.n	801b168 <dhcp_renew+0x100>
 801b152:	69bb      	ldr	r3, [r7, #24]
 801b154:	799b      	ldrb	r3, [r3, #6]
 801b156:	b29b      	uxth	r3, r3
 801b158:	461a      	mov	r2, r3
 801b15a:	0152      	lsls	r2, r2, #5
 801b15c:	1ad2      	subs	r2, r2, r3
 801b15e:	0092      	lsls	r2, r2, #2
 801b160:	4413      	add	r3, r2
 801b162:	011b      	lsls	r3, r3, #4
 801b164:	b29b      	uxth	r3, r3
 801b166:	e001      	b.n	801b16c <dhcp_renew+0x104>
 801b168:	f644 6320 	movw	r3, #20000	; 0x4e20
 801b16c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b16e:	89fb      	ldrh	r3, [r7, #14]
 801b170:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b174:	4a09      	ldr	r2, [pc, #36]	; (801b19c <dhcp_renew+0x134>)
 801b176:	fb82 1203 	smull	r1, r2, r2, r3
 801b17a:	1152      	asrs	r2, r2, #5
 801b17c:	17db      	asrs	r3, r3, #31
 801b17e:	1ad3      	subs	r3, r2, r3
 801b180:	b29a      	uxth	r2, r3
 801b182:	69bb      	ldr	r3, [r7, #24]
 801b184:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b186:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b18a:	4618      	mov	r0, r3
 801b18c:	3720      	adds	r7, #32
 801b18e:	46bd      	mov	sp, r7
 801b190:	bd80      	pop	{r7, pc}
 801b192:	bf00      	nop
 801b194:	200000f0 	.word	0x200000f0
 801b198:	20005fec 	.word	0x20005fec
 801b19c:	10624dd3 	.word	0x10624dd3

0801b1a0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b08a      	sub	sp, #40	; 0x28
 801b1a4:	af02      	add	r7, sp, #8
 801b1a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1ac:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801b1ae:	2104      	movs	r1, #4
 801b1b0:	69b8      	ldr	r0, [r7, #24]
 801b1b2:	f000 f9e1 	bl	801b578 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b1b6:	f107 030c 	add.w	r3, r7, #12
 801b1ba:	2203      	movs	r2, #3
 801b1bc:	69b9      	ldr	r1, [r7, #24]
 801b1be:	6878      	ldr	r0, [r7, #4]
 801b1c0:	f000 fe66 	bl	801be90 <dhcp_create_msg>
 801b1c4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b1c6:	697b      	ldr	r3, [r7, #20]
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d04c      	beq.n	801b266 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b1cc:	697b      	ldr	r3, [r7, #20]
 801b1ce:	685b      	ldr	r3, [r3, #4]
 801b1d0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b1d2:	89b8      	ldrh	r0, [r7, #12]
 801b1d4:	693b      	ldr	r3, [r7, #16]
 801b1d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b1da:	2302      	movs	r3, #2
 801b1dc:	2239      	movs	r2, #57	; 0x39
 801b1de:	f000 f9e5 	bl	801b5ac <dhcp_option>
 801b1e2:	4603      	mov	r3, r0
 801b1e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801b1e6:	89b8      	ldrh	r0, [r7, #12]
 801b1e8:	693b      	ldr	r3, [r7, #16]
 801b1ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b1f2:	461a      	mov	r2, r3
 801b1f4:	f000 fa34 	bl	801b660 <dhcp_option_short>
 801b1f8:	4603      	mov	r3, r0
 801b1fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b1fc:	89b8      	ldrh	r0, [r7, #12]
 801b1fe:	693b      	ldr	r3, [r7, #16]
 801b200:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b204:	2303      	movs	r3, #3
 801b206:	2237      	movs	r2, #55	; 0x37
 801b208:	f000 f9d0 	bl	801b5ac <dhcp_option>
 801b20c:	4603      	mov	r3, r0
 801b20e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b210:	2300      	movs	r3, #0
 801b212:	77bb      	strb	r3, [r7, #30]
 801b214:	e00e      	b.n	801b234 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b216:	89b8      	ldrh	r0, [r7, #12]
 801b218:	693b      	ldr	r3, [r7, #16]
 801b21a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b21e:	7fbb      	ldrb	r3, [r7, #30]
 801b220:	4a29      	ldr	r2, [pc, #164]	; (801b2c8 <dhcp_rebind+0x128>)
 801b222:	5cd3      	ldrb	r3, [r2, r3]
 801b224:	461a      	mov	r2, r3
 801b226:	f000 f9f5 	bl	801b614 <dhcp_option_byte>
 801b22a:	4603      	mov	r3, r0
 801b22c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b22e:	7fbb      	ldrb	r3, [r7, #30]
 801b230:	3301      	adds	r3, #1
 801b232:	77bb      	strb	r3, [r7, #30]
 801b234:	7fbb      	ldrb	r3, [r7, #30]
 801b236:	2b02      	cmp	r3, #2
 801b238:	d9ed      	bls.n	801b216 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b23a:	89b8      	ldrh	r0, [r7, #12]
 801b23c:	693b      	ldr	r3, [r7, #16]
 801b23e:	33f0      	adds	r3, #240	; 0xf0
 801b240:	697a      	ldr	r2, [r7, #20]
 801b242:	4619      	mov	r1, r3
 801b244:	f000 fefa 	bl	801c03c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b248:	4b20      	ldr	r3, [pc, #128]	; (801b2cc <dhcp_rebind+0x12c>)
 801b24a:	6818      	ldr	r0, [r3, #0]
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	9300      	str	r3, [sp, #0]
 801b250:	2343      	movs	r3, #67	; 0x43
 801b252:	4a1f      	ldr	r2, [pc, #124]	; (801b2d0 <dhcp_rebind+0x130>)
 801b254:	6979      	ldr	r1, [r7, #20]
 801b256:	f7fe fdad 	bl	8019db4 <udp_sendto_if>
 801b25a:	4603      	mov	r3, r0
 801b25c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b25e:	6978      	ldr	r0, [r7, #20]
 801b260:	f7f7 ff40 	bl	80130e4 <pbuf_free>
 801b264:	e001      	b.n	801b26a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b266:	23ff      	movs	r3, #255	; 0xff
 801b268:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b26a:	69bb      	ldr	r3, [r7, #24]
 801b26c:	799b      	ldrb	r3, [r3, #6]
 801b26e:	2bff      	cmp	r3, #255	; 0xff
 801b270:	d005      	beq.n	801b27e <dhcp_rebind+0xde>
    dhcp->tries++;
 801b272:	69bb      	ldr	r3, [r7, #24]
 801b274:	799b      	ldrb	r3, [r3, #6]
 801b276:	3301      	adds	r3, #1
 801b278:	b2da      	uxtb	r2, r3
 801b27a:	69bb      	ldr	r3, [r7, #24]
 801b27c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801b27e:	69bb      	ldr	r3, [r7, #24]
 801b280:	799b      	ldrb	r3, [r3, #6]
 801b282:	2b09      	cmp	r3, #9
 801b284:	d80a      	bhi.n	801b29c <dhcp_rebind+0xfc>
 801b286:	69bb      	ldr	r3, [r7, #24]
 801b288:	799b      	ldrb	r3, [r3, #6]
 801b28a:	b29b      	uxth	r3, r3
 801b28c:	461a      	mov	r2, r3
 801b28e:	0152      	lsls	r2, r2, #5
 801b290:	1ad2      	subs	r2, r2, r3
 801b292:	0092      	lsls	r2, r2, #2
 801b294:	4413      	add	r3, r2
 801b296:	00db      	lsls	r3, r3, #3
 801b298:	b29b      	uxth	r3, r3
 801b29a:	e001      	b.n	801b2a0 <dhcp_rebind+0x100>
 801b29c:	f242 7310 	movw	r3, #10000	; 0x2710
 801b2a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b2a2:	89fb      	ldrh	r3, [r7, #14]
 801b2a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b2a8:	4a0a      	ldr	r2, [pc, #40]	; (801b2d4 <dhcp_rebind+0x134>)
 801b2aa:	fb82 1203 	smull	r1, r2, r2, r3
 801b2ae:	1152      	asrs	r2, r2, #5
 801b2b0:	17db      	asrs	r3, r3, #31
 801b2b2:	1ad3      	subs	r3, r2, r3
 801b2b4:	b29a      	uxth	r2, r3
 801b2b6:	69bb      	ldr	r3, [r7, #24]
 801b2b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b2ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b2be:	4618      	mov	r0, r3
 801b2c0:	3720      	adds	r7, #32
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	bd80      	pop	{r7, pc}
 801b2c6:	bf00      	nop
 801b2c8:	200000f0 	.word	0x200000f0
 801b2cc:	20005fec 	.word	0x20005fec
 801b2d0:	08024a4c 	.word	0x08024a4c
 801b2d4:	10624dd3 	.word	0x10624dd3

0801b2d8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801b2d8:	b5b0      	push	{r4, r5, r7, lr}
 801b2da:	b08a      	sub	sp, #40	; 0x28
 801b2dc:	af02      	add	r7, sp, #8
 801b2de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2e4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801b2e6:	2103      	movs	r1, #3
 801b2e8:	69b8      	ldr	r0, [r7, #24]
 801b2ea:	f000 f945 	bl	801b578 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b2ee:	f107 030c 	add.w	r3, r7, #12
 801b2f2:	2203      	movs	r2, #3
 801b2f4:	69b9      	ldr	r1, [r7, #24]
 801b2f6:	6878      	ldr	r0, [r7, #4]
 801b2f8:	f000 fdca 	bl	801be90 <dhcp_create_msg>
 801b2fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b2fe:	697b      	ldr	r3, [r7, #20]
 801b300:	2b00      	cmp	r3, #0
 801b302:	d066      	beq.n	801b3d2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b304:	697b      	ldr	r3, [r7, #20]
 801b306:	685b      	ldr	r3, [r3, #4]
 801b308:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b30a:	89b8      	ldrh	r0, [r7, #12]
 801b30c:	693b      	ldr	r3, [r7, #16]
 801b30e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b312:	2302      	movs	r3, #2
 801b314:	2239      	movs	r2, #57	; 0x39
 801b316:	f000 f949 	bl	801b5ac <dhcp_option>
 801b31a:	4603      	mov	r3, r0
 801b31c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801b31e:	89b8      	ldrh	r0, [r7, #12]
 801b320:	693b      	ldr	r3, [r7, #16]
 801b322:	33f0      	adds	r3, #240	; 0xf0
 801b324:	f44f 7210 	mov.w	r2, #576	; 0x240
 801b328:	4619      	mov	r1, r3
 801b32a:	f000 f999 	bl	801b660 <dhcp_option_short>
 801b32e:	4603      	mov	r3, r0
 801b330:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801b332:	89b8      	ldrh	r0, [r7, #12]
 801b334:	693b      	ldr	r3, [r7, #16]
 801b336:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b33a:	2304      	movs	r3, #4
 801b33c:	2232      	movs	r2, #50	; 0x32
 801b33e:	f000 f935 	bl	801b5ac <dhcp_option>
 801b342:	4603      	mov	r3, r0
 801b344:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801b346:	89bc      	ldrh	r4, [r7, #12]
 801b348:	693b      	ldr	r3, [r7, #16]
 801b34a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b34e:	69bb      	ldr	r3, [r7, #24]
 801b350:	69db      	ldr	r3, [r3, #28]
 801b352:	4618      	mov	r0, r3
 801b354:	f7f6 fb23 	bl	801199e <lwip_htonl>
 801b358:	4603      	mov	r3, r0
 801b35a:	461a      	mov	r2, r3
 801b35c:	4629      	mov	r1, r5
 801b35e:	4620      	mov	r0, r4
 801b360:	f000 f9b0 	bl	801b6c4 <dhcp_option_long>
 801b364:	4603      	mov	r3, r0
 801b366:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b368:	89b8      	ldrh	r0, [r7, #12]
 801b36a:	693b      	ldr	r3, [r7, #16]
 801b36c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b370:	2303      	movs	r3, #3
 801b372:	2237      	movs	r2, #55	; 0x37
 801b374:	f000 f91a 	bl	801b5ac <dhcp_option>
 801b378:	4603      	mov	r3, r0
 801b37a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b37c:	2300      	movs	r3, #0
 801b37e:	77bb      	strb	r3, [r7, #30]
 801b380:	e00e      	b.n	801b3a0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b382:	89b8      	ldrh	r0, [r7, #12]
 801b384:	693b      	ldr	r3, [r7, #16]
 801b386:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b38a:	7fbb      	ldrb	r3, [r7, #30]
 801b38c:	4a29      	ldr	r2, [pc, #164]	; (801b434 <dhcp_reboot+0x15c>)
 801b38e:	5cd3      	ldrb	r3, [r2, r3]
 801b390:	461a      	mov	r2, r3
 801b392:	f000 f93f 	bl	801b614 <dhcp_option_byte>
 801b396:	4603      	mov	r3, r0
 801b398:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b39a:	7fbb      	ldrb	r3, [r7, #30]
 801b39c:	3301      	adds	r3, #1
 801b39e:	77bb      	strb	r3, [r7, #30]
 801b3a0:	7fbb      	ldrb	r3, [r7, #30]
 801b3a2:	2b02      	cmp	r3, #2
 801b3a4:	d9ed      	bls.n	801b382 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b3a6:	89b8      	ldrh	r0, [r7, #12]
 801b3a8:	693b      	ldr	r3, [r7, #16]
 801b3aa:	33f0      	adds	r3, #240	; 0xf0
 801b3ac:	697a      	ldr	r2, [r7, #20]
 801b3ae:	4619      	mov	r1, r3
 801b3b0:	f000 fe44 	bl	801c03c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b3b4:	4b20      	ldr	r3, [pc, #128]	; (801b438 <dhcp_reboot+0x160>)
 801b3b6:	6818      	ldr	r0, [r3, #0]
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	9300      	str	r3, [sp, #0]
 801b3bc:	2343      	movs	r3, #67	; 0x43
 801b3be:	4a1f      	ldr	r2, [pc, #124]	; (801b43c <dhcp_reboot+0x164>)
 801b3c0:	6979      	ldr	r1, [r7, #20]
 801b3c2:	f7fe fcf7 	bl	8019db4 <udp_sendto_if>
 801b3c6:	4603      	mov	r3, r0
 801b3c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b3ca:	6978      	ldr	r0, [r7, #20]
 801b3cc:	f7f7 fe8a 	bl	80130e4 <pbuf_free>
 801b3d0:	e001      	b.n	801b3d6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b3d2:	23ff      	movs	r3, #255	; 0xff
 801b3d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b3d6:	69bb      	ldr	r3, [r7, #24]
 801b3d8:	799b      	ldrb	r3, [r3, #6]
 801b3da:	2bff      	cmp	r3, #255	; 0xff
 801b3dc:	d005      	beq.n	801b3ea <dhcp_reboot+0x112>
    dhcp->tries++;
 801b3de:	69bb      	ldr	r3, [r7, #24]
 801b3e0:	799b      	ldrb	r3, [r3, #6]
 801b3e2:	3301      	adds	r3, #1
 801b3e4:	b2da      	uxtb	r2, r3
 801b3e6:	69bb      	ldr	r3, [r7, #24]
 801b3e8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801b3ea:	69bb      	ldr	r3, [r7, #24]
 801b3ec:	799b      	ldrb	r3, [r3, #6]
 801b3ee:	2b09      	cmp	r3, #9
 801b3f0:	d80a      	bhi.n	801b408 <dhcp_reboot+0x130>
 801b3f2:	69bb      	ldr	r3, [r7, #24]
 801b3f4:	799b      	ldrb	r3, [r3, #6]
 801b3f6:	b29b      	uxth	r3, r3
 801b3f8:	461a      	mov	r2, r3
 801b3fa:	0152      	lsls	r2, r2, #5
 801b3fc:	1ad2      	subs	r2, r2, r3
 801b3fe:	0092      	lsls	r2, r2, #2
 801b400:	4413      	add	r3, r2
 801b402:	00db      	lsls	r3, r3, #3
 801b404:	b29b      	uxth	r3, r3
 801b406:	e001      	b.n	801b40c <dhcp_reboot+0x134>
 801b408:	f242 7310 	movw	r3, #10000	; 0x2710
 801b40c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b40e:	89fb      	ldrh	r3, [r7, #14]
 801b410:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b414:	4a0a      	ldr	r2, [pc, #40]	; (801b440 <dhcp_reboot+0x168>)
 801b416:	fb82 1203 	smull	r1, r2, r2, r3
 801b41a:	1152      	asrs	r2, r2, #5
 801b41c:	17db      	asrs	r3, r3, #31
 801b41e:	1ad3      	subs	r3, r2, r3
 801b420:	b29a      	uxth	r2, r3
 801b422:	69bb      	ldr	r3, [r7, #24]
 801b424:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b426:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b42a:	4618      	mov	r0, r3
 801b42c:	3720      	adds	r7, #32
 801b42e:	46bd      	mov	sp, r7
 801b430:	bdb0      	pop	{r4, r5, r7, pc}
 801b432:	bf00      	nop
 801b434:	200000f0 	.word	0x200000f0
 801b438:	20005fec 	.word	0x20005fec
 801b43c:	08024a4c 	.word	0x08024a4c
 801b440:	10624dd3 	.word	0x10624dd3

0801b444 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801b444:	b5b0      	push	{r4, r5, r7, lr}
 801b446:	b08a      	sub	sp, #40	; 0x28
 801b448:	af02      	add	r7, sp, #8
 801b44a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b450:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801b452:	69fb      	ldr	r3, [r7, #28]
 801b454:	2b00      	cmp	r3, #0
 801b456:	f000 8084 	beq.w	801b562 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801b45a:	69fb      	ldr	r3, [r7, #28]
 801b45c:	795b      	ldrb	r3, [r3, #5]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	f000 8081 	beq.w	801b566 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801b464:	69fb      	ldr	r3, [r7, #28]
 801b466:	699b      	ldr	r3, [r3, #24]
 801b468:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801b46a:	69fb      	ldr	r3, [r7, #28]
 801b46c:	2200      	movs	r2, #0
 801b46e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801b470:	69fb      	ldr	r3, [r7, #28]
 801b472:	2200      	movs	r2, #0
 801b474:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801b476:	69fb      	ldr	r3, [r7, #28]
 801b478:	2200      	movs	r2, #0
 801b47a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801b47c:	69fb      	ldr	r3, [r7, #28]
 801b47e:	2200      	movs	r2, #0
 801b480:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801b482:	69fb      	ldr	r3, [r7, #28]
 801b484:	2200      	movs	r2, #0
 801b486:	631a      	str	r2, [r3, #48]	; 0x30
 801b488:	69fb      	ldr	r3, [r7, #28]
 801b48a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b48c:	69fb      	ldr	r3, [r7, #28]
 801b48e:	62da      	str	r2, [r3, #44]	; 0x2c
 801b490:	69fb      	ldr	r3, [r7, #28]
 801b492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b494:	69fb      	ldr	r3, [r7, #28]
 801b496:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801b498:	69fb      	ldr	r3, [r7, #28]
 801b49a:	2200      	movs	r2, #0
 801b49c:	829a      	strh	r2, [r3, #20]
 801b49e:	69fb      	ldr	r3, [r7, #28]
 801b4a0:	8a9a      	ldrh	r2, [r3, #20]
 801b4a2:	69fb      	ldr	r3, [r7, #28]
 801b4a4:	825a      	strh	r2, [r3, #18]
 801b4a6:	69fb      	ldr	r3, [r7, #28]
 801b4a8:	8a5a      	ldrh	r2, [r3, #18]
 801b4aa:	69fb      	ldr	r3, [r7, #28]
 801b4ac:	821a      	strh	r2, [r3, #16]
 801b4ae:	69fb      	ldr	r3, [r7, #28]
 801b4b0:	8a1a      	ldrh	r2, [r3, #16]
 801b4b2:	69fb      	ldr	r3, [r7, #28]
 801b4b4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801b4b6:	6878      	ldr	r0, [r7, #4]
 801b4b8:	f000 fdee 	bl	801c098 <dhcp_supplied_address>
 801b4bc:	4603      	mov	r3, r0
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d03b      	beq.n	801b53a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801b4c2:	f107 030e 	add.w	r3, r7, #14
 801b4c6:	2207      	movs	r2, #7
 801b4c8:	69f9      	ldr	r1, [r7, #28]
 801b4ca:	6878      	ldr	r0, [r7, #4]
 801b4cc:	f000 fce0 	bl	801be90 <dhcp_create_msg>
 801b4d0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801b4d2:	69bb      	ldr	r3, [r7, #24]
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d030      	beq.n	801b53a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b4d8:	69bb      	ldr	r3, [r7, #24]
 801b4da:	685b      	ldr	r3, [r3, #4]
 801b4dc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801b4de:	89f8      	ldrh	r0, [r7, #14]
 801b4e0:	697b      	ldr	r3, [r7, #20]
 801b4e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b4e6:	2304      	movs	r3, #4
 801b4e8:	2236      	movs	r2, #54	; 0x36
 801b4ea:	f000 f85f 	bl	801b5ac <dhcp_option>
 801b4ee:	4603      	mov	r3, r0
 801b4f0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801b4f2:	89fc      	ldrh	r4, [r7, #14]
 801b4f4:	697b      	ldr	r3, [r7, #20]
 801b4f6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b4fa:	693b      	ldr	r3, [r7, #16]
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	f7f6 fa4e 	bl	801199e <lwip_htonl>
 801b502:	4603      	mov	r3, r0
 801b504:	461a      	mov	r2, r3
 801b506:	4629      	mov	r1, r5
 801b508:	4620      	mov	r0, r4
 801b50a:	f000 f8db 	bl	801b6c4 <dhcp_option_long>
 801b50e:	4603      	mov	r3, r0
 801b510:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b512:	89f8      	ldrh	r0, [r7, #14]
 801b514:	697b      	ldr	r3, [r7, #20]
 801b516:	33f0      	adds	r3, #240	; 0xf0
 801b518:	69ba      	ldr	r2, [r7, #24]
 801b51a:	4619      	mov	r1, r3
 801b51c:	f000 fd8e 	bl	801c03c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b520:	4b13      	ldr	r3, [pc, #76]	; (801b570 <dhcp_release_and_stop+0x12c>)
 801b522:	6818      	ldr	r0, [r3, #0]
 801b524:	f107 0210 	add.w	r2, r7, #16
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	9300      	str	r3, [sp, #0]
 801b52c:	2343      	movs	r3, #67	; 0x43
 801b52e:	69b9      	ldr	r1, [r7, #24]
 801b530:	f7fe fc40 	bl	8019db4 <udp_sendto_if>
      pbuf_free(p_out);
 801b534:	69b8      	ldr	r0, [r7, #24]
 801b536:	f7f7 fdd5 	bl	80130e4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801b53a:	4b0e      	ldr	r3, [pc, #56]	; (801b574 <dhcp_release_and_stop+0x130>)
 801b53c:	4a0d      	ldr	r2, [pc, #52]	; (801b574 <dhcp_release_and_stop+0x130>)
 801b53e:	490d      	ldr	r1, [pc, #52]	; (801b574 <dhcp_release_and_stop+0x130>)
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f7f7 f8c1 	bl	80126c8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801b546:	2100      	movs	r1, #0
 801b548:	69f8      	ldr	r0, [r7, #28]
 801b54a:	f000 f815 	bl	801b578 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801b54e:	69fb      	ldr	r3, [r7, #28]
 801b550:	791b      	ldrb	r3, [r3, #4]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d008      	beq.n	801b568 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801b556:	f7fe ff85 	bl	801a464 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801b55a:	69fb      	ldr	r3, [r7, #28]
 801b55c:	2200      	movs	r2, #0
 801b55e:	711a      	strb	r2, [r3, #4]
 801b560:	e002      	b.n	801b568 <dhcp_release_and_stop+0x124>
    return;
 801b562:	bf00      	nop
 801b564:	e000      	b.n	801b568 <dhcp_release_and_stop+0x124>
    return;
 801b566:	bf00      	nop
  }
}
 801b568:	3720      	adds	r7, #32
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bdb0      	pop	{r4, r5, r7, pc}
 801b56e:	bf00      	nop
 801b570:	20005fec 	.word	0x20005fec
 801b574:	08024a48 	.word	0x08024a48

0801b578 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801b578:	b480      	push	{r7}
 801b57a:	b083      	sub	sp, #12
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	6078      	str	r0, [r7, #4]
 801b580:	460b      	mov	r3, r1
 801b582:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	795b      	ldrb	r3, [r3, #5]
 801b588:	78fa      	ldrb	r2, [r7, #3]
 801b58a:	429a      	cmp	r2, r3
 801b58c:	d008      	beq.n	801b5a0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	78fa      	ldrb	r2, [r7, #3]
 801b592:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	2200      	movs	r2, #0
 801b598:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	2200      	movs	r2, #0
 801b59e:	811a      	strh	r2, [r3, #8]
  }
}
 801b5a0:	bf00      	nop
 801b5a2:	370c      	adds	r7, #12
 801b5a4:	46bd      	mov	sp, r7
 801b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5aa:	4770      	bx	lr

0801b5ac <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801b5ac:	b580      	push	{r7, lr}
 801b5ae:	b082      	sub	sp, #8
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	6039      	str	r1, [r7, #0]
 801b5b4:	4611      	mov	r1, r2
 801b5b6:	461a      	mov	r2, r3
 801b5b8:	4603      	mov	r3, r0
 801b5ba:	80fb      	strh	r3, [r7, #6]
 801b5bc:	460b      	mov	r3, r1
 801b5be:	717b      	strb	r3, [r7, #5]
 801b5c0:	4613      	mov	r3, r2
 801b5c2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801b5c4:	88fa      	ldrh	r2, [r7, #6]
 801b5c6:	793b      	ldrb	r3, [r7, #4]
 801b5c8:	4413      	add	r3, r2
 801b5ca:	3302      	adds	r3, #2
 801b5cc:	2b44      	cmp	r3, #68	; 0x44
 801b5ce:	d906      	bls.n	801b5de <dhcp_option+0x32>
 801b5d0:	4b0d      	ldr	r3, [pc, #52]	; (801b608 <dhcp_option+0x5c>)
 801b5d2:	f240 529a 	movw	r2, #1434	; 0x59a
 801b5d6:	490d      	ldr	r1, [pc, #52]	; (801b60c <dhcp_option+0x60>)
 801b5d8:	480d      	ldr	r0, [pc, #52]	; (801b610 <dhcp_option+0x64>)
 801b5da:	f004 faed 	bl	801fbb8 <iprintf>
  options[options_out_len++] = option_type;
 801b5de:	88fb      	ldrh	r3, [r7, #6]
 801b5e0:	1c5a      	adds	r2, r3, #1
 801b5e2:	80fa      	strh	r2, [r7, #6]
 801b5e4:	461a      	mov	r2, r3
 801b5e6:	683b      	ldr	r3, [r7, #0]
 801b5e8:	4413      	add	r3, r2
 801b5ea:	797a      	ldrb	r2, [r7, #5]
 801b5ec:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801b5ee:	88fb      	ldrh	r3, [r7, #6]
 801b5f0:	1c5a      	adds	r2, r3, #1
 801b5f2:	80fa      	strh	r2, [r7, #6]
 801b5f4:	461a      	mov	r2, r3
 801b5f6:	683b      	ldr	r3, [r7, #0]
 801b5f8:	4413      	add	r3, r2
 801b5fa:	793a      	ldrb	r2, [r7, #4]
 801b5fc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b5fe:	88fb      	ldrh	r3, [r7, #6]
}
 801b600:	4618      	mov	r0, r3
 801b602:	3708      	adds	r7, #8
 801b604:	46bd      	mov	sp, r7
 801b606:	bd80      	pop	{r7, pc}
 801b608:	08023d5c 	.word	0x08023d5c
 801b60c:	08023ef0 	.word	0x08023ef0
 801b610:	08023dbc 	.word	0x08023dbc

0801b614 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801b614:	b580      	push	{r7, lr}
 801b616:	b082      	sub	sp, #8
 801b618:	af00      	add	r7, sp, #0
 801b61a:	4603      	mov	r3, r0
 801b61c:	6039      	str	r1, [r7, #0]
 801b61e:	80fb      	strh	r3, [r7, #6]
 801b620:	4613      	mov	r3, r2
 801b622:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801b624:	88fb      	ldrh	r3, [r7, #6]
 801b626:	2b43      	cmp	r3, #67	; 0x43
 801b628:	d906      	bls.n	801b638 <dhcp_option_byte+0x24>
 801b62a:	4b0a      	ldr	r3, [pc, #40]	; (801b654 <dhcp_option_byte+0x40>)
 801b62c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801b630:	4909      	ldr	r1, [pc, #36]	; (801b658 <dhcp_option_byte+0x44>)
 801b632:	480a      	ldr	r0, [pc, #40]	; (801b65c <dhcp_option_byte+0x48>)
 801b634:	f004 fac0 	bl	801fbb8 <iprintf>
  options[options_out_len++] = value;
 801b638:	88fb      	ldrh	r3, [r7, #6]
 801b63a:	1c5a      	adds	r2, r3, #1
 801b63c:	80fa      	strh	r2, [r7, #6]
 801b63e:	461a      	mov	r2, r3
 801b640:	683b      	ldr	r3, [r7, #0]
 801b642:	4413      	add	r3, r2
 801b644:	797a      	ldrb	r2, [r7, #5]
 801b646:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b648:	88fb      	ldrh	r3, [r7, #6]
}
 801b64a:	4618      	mov	r0, r3
 801b64c:	3708      	adds	r7, #8
 801b64e:	46bd      	mov	sp, r7
 801b650:	bd80      	pop	{r7, pc}
 801b652:	bf00      	nop
 801b654:	08023d5c 	.word	0x08023d5c
 801b658:	08023f34 	.word	0x08023f34
 801b65c:	08023dbc 	.word	0x08023dbc

0801b660 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801b660:	b580      	push	{r7, lr}
 801b662:	b082      	sub	sp, #8
 801b664:	af00      	add	r7, sp, #0
 801b666:	4603      	mov	r3, r0
 801b668:	6039      	str	r1, [r7, #0]
 801b66a:	80fb      	strh	r3, [r7, #6]
 801b66c:	4613      	mov	r3, r2
 801b66e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801b670:	88fb      	ldrh	r3, [r7, #6]
 801b672:	3302      	adds	r3, #2
 801b674:	2b44      	cmp	r3, #68	; 0x44
 801b676:	d906      	bls.n	801b686 <dhcp_option_short+0x26>
 801b678:	4b0f      	ldr	r3, [pc, #60]	; (801b6b8 <dhcp_option_short+0x58>)
 801b67a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801b67e:	490f      	ldr	r1, [pc, #60]	; (801b6bc <dhcp_option_short+0x5c>)
 801b680:	480f      	ldr	r0, [pc, #60]	; (801b6c0 <dhcp_option_short+0x60>)
 801b682:	f004 fa99 	bl	801fbb8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801b686:	88bb      	ldrh	r3, [r7, #4]
 801b688:	0a1b      	lsrs	r3, r3, #8
 801b68a:	b29a      	uxth	r2, r3
 801b68c:	88fb      	ldrh	r3, [r7, #6]
 801b68e:	1c59      	adds	r1, r3, #1
 801b690:	80f9      	strh	r1, [r7, #6]
 801b692:	4619      	mov	r1, r3
 801b694:	683b      	ldr	r3, [r7, #0]
 801b696:	440b      	add	r3, r1
 801b698:	b2d2      	uxtb	r2, r2
 801b69a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801b69c:	88fb      	ldrh	r3, [r7, #6]
 801b69e:	1c5a      	adds	r2, r3, #1
 801b6a0:	80fa      	strh	r2, [r7, #6]
 801b6a2:	461a      	mov	r2, r3
 801b6a4:	683b      	ldr	r3, [r7, #0]
 801b6a6:	4413      	add	r3, r2
 801b6a8:	88ba      	ldrh	r2, [r7, #4]
 801b6aa:	b2d2      	uxtb	r2, r2
 801b6ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b6ae:	88fb      	ldrh	r3, [r7, #6]
}
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	3708      	adds	r7, #8
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}
 801b6b8:	08023d5c 	.word	0x08023d5c
 801b6bc:	08023f6c 	.word	0x08023f6c
 801b6c0:	08023dbc 	.word	0x08023dbc

0801b6c4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b084      	sub	sp, #16
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	60b9      	str	r1, [r7, #8]
 801b6ce:	607a      	str	r2, [r7, #4]
 801b6d0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801b6d2:	89fb      	ldrh	r3, [r7, #14]
 801b6d4:	3304      	adds	r3, #4
 801b6d6:	2b44      	cmp	r3, #68	; 0x44
 801b6d8:	d906      	bls.n	801b6e8 <dhcp_option_long+0x24>
 801b6da:	4b19      	ldr	r3, [pc, #100]	; (801b740 <dhcp_option_long+0x7c>)
 801b6dc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801b6e0:	4918      	ldr	r1, [pc, #96]	; (801b744 <dhcp_option_long+0x80>)
 801b6e2:	4819      	ldr	r0, [pc, #100]	; (801b748 <dhcp_option_long+0x84>)
 801b6e4:	f004 fa68 	bl	801fbb8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	0e1a      	lsrs	r2, r3, #24
 801b6ec:	89fb      	ldrh	r3, [r7, #14]
 801b6ee:	1c59      	adds	r1, r3, #1
 801b6f0:	81f9      	strh	r1, [r7, #14]
 801b6f2:	4619      	mov	r1, r3
 801b6f4:	68bb      	ldr	r3, [r7, #8]
 801b6f6:	440b      	add	r3, r1
 801b6f8:	b2d2      	uxtb	r2, r2
 801b6fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	0c1a      	lsrs	r2, r3, #16
 801b700:	89fb      	ldrh	r3, [r7, #14]
 801b702:	1c59      	adds	r1, r3, #1
 801b704:	81f9      	strh	r1, [r7, #14]
 801b706:	4619      	mov	r1, r3
 801b708:	68bb      	ldr	r3, [r7, #8]
 801b70a:	440b      	add	r3, r1
 801b70c:	b2d2      	uxtb	r2, r2
 801b70e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	0a1a      	lsrs	r2, r3, #8
 801b714:	89fb      	ldrh	r3, [r7, #14]
 801b716:	1c59      	adds	r1, r3, #1
 801b718:	81f9      	strh	r1, [r7, #14]
 801b71a:	4619      	mov	r1, r3
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	440b      	add	r3, r1
 801b720:	b2d2      	uxtb	r2, r2
 801b722:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801b724:	89fb      	ldrh	r3, [r7, #14]
 801b726:	1c5a      	adds	r2, r3, #1
 801b728:	81fa      	strh	r2, [r7, #14]
 801b72a:	461a      	mov	r2, r3
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	4413      	add	r3, r2
 801b730:	687a      	ldr	r2, [r7, #4]
 801b732:	b2d2      	uxtb	r2, r2
 801b734:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b736:	89fb      	ldrh	r3, [r7, #14]
}
 801b738:	4618      	mov	r0, r3
 801b73a:	3710      	adds	r7, #16
 801b73c:	46bd      	mov	sp, r7
 801b73e:	bd80      	pop	{r7, pc}
 801b740:	08023d5c 	.word	0x08023d5c
 801b744:	08023fa8 	.word	0x08023fa8
 801b748:	08023dbc 	.word	0x08023dbc

0801b74c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801b74c:	b580      	push	{r7, lr}
 801b74e:	b090      	sub	sp, #64	; 0x40
 801b750:	af00      	add	r7, sp, #0
 801b752:	6078      	str	r0, [r7, #4]
 801b754:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801b756:	2300      	movs	r3, #0
 801b758:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801b75a:	2300      	movs	r3, #0
 801b75c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801b75e:	2208      	movs	r2, #8
 801b760:	2100      	movs	r1, #0
 801b762:	48be      	ldr	r0, [pc, #760]	; (801ba5c <dhcp_parse_reply+0x310>)
 801b764:	f004 f9c5 	bl	801faf2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	895b      	ldrh	r3, [r3, #10]
 801b76c:	2b2b      	cmp	r3, #43	; 0x2b
 801b76e:	d802      	bhi.n	801b776 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801b770:	f06f 0301 	mvn.w	r3, #1
 801b774:	e2a8      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	685b      	ldr	r3, [r3, #4]
 801b77a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801b77c:	23f0      	movs	r3, #240	; 0xf0
 801b77e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	891b      	ldrh	r3, [r3, #8]
 801b784:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b78a:	e00c      	b.n	801b7a6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b78e:	895b      	ldrh	r3, [r3, #10]
 801b790:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b792:	1ad3      	subs	r3, r2, r3
 801b794:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b798:	895b      	ldrh	r3, [r3, #10]
 801b79a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801b79c:	1ad3      	subs	r3, r2, r3
 801b79e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d004      	beq.n	801b7b6 <dhcp_parse_reply+0x6a>
 801b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7ae:	895b      	ldrh	r3, [r3, #10]
 801b7b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b7b2:	429a      	cmp	r2, r3
 801b7b4:	d2ea      	bcs.n	801b78c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d102      	bne.n	801b7c2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801b7bc:	f06f 0301 	mvn.w	r3, #1
 801b7c0:	e282      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801b7c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b7c4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801b7c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b7c8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7cc:	685b      	ldr	r3, [r3, #4]
 801b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b7d0:	e23a      	b.n	801bc48 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801b7d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b7d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b7d6:	4413      	add	r3, r2
 801b7d8:	781b      	ldrb	r3, [r3, #0]
 801b7da:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801b7dc:	2300      	movs	r3, #0
 801b7de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801b7e2:	f04f 33ff 	mov.w	r3, #4294967295
 801b7e6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801b7e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b7ea:	3302      	adds	r3, #2
 801b7ec:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801b7ee:	8bfa      	ldrh	r2, [r7, #30]
 801b7f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b7f2:	429a      	cmp	r2, r3
 801b7f4:	d202      	bcs.n	801b7fc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801b7f6:	f06f 0301 	mvn.w	r3, #1
 801b7fa:	e265      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801b7fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b7fe:	3301      	adds	r3, #1
 801b800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b802:	8952      	ldrh	r2, [r2, #10]
 801b804:	4293      	cmp	r3, r2
 801b806:	da07      	bge.n	801b818 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801b808:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b80a:	3301      	adds	r3, #1
 801b80c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b80e:	4413      	add	r3, r2
 801b810:	781b      	ldrb	r3, [r3, #0]
 801b812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b816:	e00b      	b.n	801b830 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d004      	beq.n	801b82a <dhcp_parse_reply+0xde>
 801b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	685b      	ldr	r3, [r3, #4]
 801b826:	781b      	ldrb	r3, [r3, #0]
 801b828:	e000      	b.n	801b82c <dhcp_parse_reply+0xe0>
 801b82a:	2300      	movs	r3, #0
 801b82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801b830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b834:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801b838:	7dfb      	ldrb	r3, [r7, #23]
 801b83a:	2b3b      	cmp	r3, #59	; 0x3b
 801b83c:	f200 812d 	bhi.w	801ba9a <dhcp_parse_reply+0x34e>
 801b840:	a201      	add	r2, pc, #4	; (adr r2, 801b848 <dhcp_parse_reply+0xfc>)
 801b842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b846:	bf00      	nop
 801b848:	0801b939 	.word	0x0801b939
 801b84c:	0801b949 	.word	0x0801b949
 801b850:	0801ba9b 	.word	0x0801ba9b
 801b854:	0801b96b 	.word	0x0801b96b
 801b858:	0801ba9b 	.word	0x0801ba9b
 801b85c:	0801ba9b 	.word	0x0801ba9b
 801b860:	0801ba9b 	.word	0x0801ba9b
 801b864:	0801ba9b 	.word	0x0801ba9b
 801b868:	0801ba9b 	.word	0x0801ba9b
 801b86c:	0801ba9b 	.word	0x0801ba9b
 801b870:	0801ba9b 	.word	0x0801ba9b
 801b874:	0801ba9b 	.word	0x0801ba9b
 801b878:	0801ba9b 	.word	0x0801ba9b
 801b87c:	0801ba9b 	.word	0x0801ba9b
 801b880:	0801ba9b 	.word	0x0801ba9b
 801b884:	0801ba9b 	.word	0x0801ba9b
 801b888:	0801ba9b 	.word	0x0801ba9b
 801b88c:	0801ba9b 	.word	0x0801ba9b
 801b890:	0801ba9b 	.word	0x0801ba9b
 801b894:	0801ba9b 	.word	0x0801ba9b
 801b898:	0801ba9b 	.word	0x0801ba9b
 801b89c:	0801ba9b 	.word	0x0801ba9b
 801b8a0:	0801ba9b 	.word	0x0801ba9b
 801b8a4:	0801ba9b 	.word	0x0801ba9b
 801b8a8:	0801ba9b 	.word	0x0801ba9b
 801b8ac:	0801ba9b 	.word	0x0801ba9b
 801b8b0:	0801ba9b 	.word	0x0801ba9b
 801b8b4:	0801ba9b 	.word	0x0801ba9b
 801b8b8:	0801ba9b 	.word	0x0801ba9b
 801b8bc:	0801ba9b 	.word	0x0801ba9b
 801b8c0:	0801ba9b 	.word	0x0801ba9b
 801b8c4:	0801ba9b 	.word	0x0801ba9b
 801b8c8:	0801ba9b 	.word	0x0801ba9b
 801b8cc:	0801ba9b 	.word	0x0801ba9b
 801b8d0:	0801ba9b 	.word	0x0801ba9b
 801b8d4:	0801ba9b 	.word	0x0801ba9b
 801b8d8:	0801ba9b 	.word	0x0801ba9b
 801b8dc:	0801ba9b 	.word	0x0801ba9b
 801b8e0:	0801ba9b 	.word	0x0801ba9b
 801b8e4:	0801ba9b 	.word	0x0801ba9b
 801b8e8:	0801ba9b 	.word	0x0801ba9b
 801b8ec:	0801ba9b 	.word	0x0801ba9b
 801b8f0:	0801ba9b 	.word	0x0801ba9b
 801b8f4:	0801ba9b 	.word	0x0801ba9b
 801b8f8:	0801ba9b 	.word	0x0801ba9b
 801b8fc:	0801ba9b 	.word	0x0801ba9b
 801b900:	0801ba9b 	.word	0x0801ba9b
 801b904:	0801ba9b 	.word	0x0801ba9b
 801b908:	0801ba9b 	.word	0x0801ba9b
 801b90c:	0801ba9b 	.word	0x0801ba9b
 801b910:	0801ba9b 	.word	0x0801ba9b
 801b914:	0801b997 	.word	0x0801b997
 801b918:	0801b9b9 	.word	0x0801b9b9
 801b91c:	0801b9f5 	.word	0x0801b9f5
 801b920:	0801ba17 	.word	0x0801ba17
 801b924:	0801ba9b 	.word	0x0801ba9b
 801b928:	0801ba9b 	.word	0x0801ba9b
 801b92c:	0801ba9b 	.word	0x0801ba9b
 801b930:	0801ba39 	.word	0x0801ba39
 801b934:	0801ba79 	.word	0x0801ba79
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801b938:	2300      	movs	r3, #0
 801b93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b93e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801b946:	e0ac      	b.n	801baa2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b94c:	2b04      	cmp	r3, #4
 801b94e:	d009      	beq.n	801b964 <dhcp_parse_reply+0x218>
 801b950:	4b43      	ldr	r3, [pc, #268]	; (801ba60 <dhcp_parse_reply+0x314>)
 801b952:	f240 622e 	movw	r2, #1582	; 0x62e
 801b956:	4943      	ldr	r1, [pc, #268]	; (801ba64 <dhcp_parse_reply+0x318>)
 801b958:	4843      	ldr	r0, [pc, #268]	; (801ba68 <dhcp_parse_reply+0x31c>)
 801b95a:	f004 f92d 	bl	801fbb8 <iprintf>
 801b95e:	f06f 0305 	mvn.w	r3, #5
 801b962:	e1b1      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801b964:	2306      	movs	r3, #6
 801b966:	623b      	str	r3, [r7, #32]
        break;
 801b968:	e09b      	b.n	801baa2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801b96a:	2304      	movs	r3, #4
 801b96c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801b970:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b974:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b978:	429a      	cmp	r2, r3
 801b97a:	d209      	bcs.n	801b990 <dhcp_parse_reply+0x244>
 801b97c:	4b38      	ldr	r3, [pc, #224]	; (801ba60 <dhcp_parse_reply+0x314>)
 801b97e:	f240 6233 	movw	r2, #1587	; 0x633
 801b982:	493a      	ldr	r1, [pc, #232]	; (801ba6c <dhcp_parse_reply+0x320>)
 801b984:	4838      	ldr	r0, [pc, #224]	; (801ba68 <dhcp_parse_reply+0x31c>)
 801b986:	f004 f917 	bl	801fbb8 <iprintf>
 801b98a:	f06f 0305 	mvn.w	r3, #5
 801b98e:	e19b      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801b990:	2307      	movs	r3, #7
 801b992:	623b      	str	r3, [r7, #32]
        break;
 801b994:	e085      	b.n	801baa2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b99a:	2b04      	cmp	r3, #4
 801b99c:	d009      	beq.n	801b9b2 <dhcp_parse_reply+0x266>
 801b99e:	4b30      	ldr	r3, [pc, #192]	; (801ba60 <dhcp_parse_reply+0x314>)
 801b9a0:	f240 6241 	movw	r2, #1601	; 0x641
 801b9a4:	492f      	ldr	r1, [pc, #188]	; (801ba64 <dhcp_parse_reply+0x318>)
 801b9a6:	4830      	ldr	r0, [pc, #192]	; (801ba68 <dhcp_parse_reply+0x31c>)
 801b9a8:	f004 f906 	bl	801fbb8 <iprintf>
 801b9ac:	f06f 0305 	mvn.w	r3, #5
 801b9b0:	e18a      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801b9b2:	2303      	movs	r3, #3
 801b9b4:	623b      	str	r3, [r7, #32]
        break;
 801b9b6:	e074      	b.n	801baa2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b9bc:	2b01      	cmp	r3, #1
 801b9be:	d009      	beq.n	801b9d4 <dhcp_parse_reply+0x288>
 801b9c0:	4b27      	ldr	r3, [pc, #156]	; (801ba60 <dhcp_parse_reply+0x314>)
 801b9c2:	f240 624f 	movw	r2, #1615	; 0x64f
 801b9c6:	492a      	ldr	r1, [pc, #168]	; (801ba70 <dhcp_parse_reply+0x324>)
 801b9c8:	4827      	ldr	r0, [pc, #156]	; (801ba68 <dhcp_parse_reply+0x31c>)
 801b9ca:	f004 f8f5 	bl	801fbb8 <iprintf>
 801b9ce:	f06f 0305 	mvn.w	r3, #5
 801b9d2:	e179      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801b9d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b9d6:	2bf0      	cmp	r3, #240	; 0xf0
 801b9d8:	d009      	beq.n	801b9ee <dhcp_parse_reply+0x2a2>
 801b9da:	4b21      	ldr	r3, [pc, #132]	; (801ba60 <dhcp_parse_reply+0x314>)
 801b9dc:	f240 6251 	movw	r2, #1617	; 0x651
 801b9e0:	4924      	ldr	r1, [pc, #144]	; (801ba74 <dhcp_parse_reply+0x328>)
 801b9e2:	4821      	ldr	r0, [pc, #132]	; (801ba68 <dhcp_parse_reply+0x31c>)
 801b9e4:	f004 f8e8 	bl	801fbb8 <iprintf>
 801b9e8:	f06f 0305 	mvn.w	r3, #5
 801b9ec:	e16c      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	623b      	str	r3, [r7, #32]
        break;
 801b9f2:	e056      	b.n	801baa2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b9f8:	2b01      	cmp	r3, #1
 801b9fa:	d009      	beq.n	801ba10 <dhcp_parse_reply+0x2c4>
 801b9fc:	4b18      	ldr	r3, [pc, #96]	; (801ba60 <dhcp_parse_reply+0x314>)
 801b9fe:	f240 6255 	movw	r2, #1621	; 0x655
 801ba02:	491b      	ldr	r1, [pc, #108]	; (801ba70 <dhcp_parse_reply+0x324>)
 801ba04:	4818      	ldr	r0, [pc, #96]	; (801ba68 <dhcp_parse_reply+0x31c>)
 801ba06:	f004 f8d7 	bl	801fbb8 <iprintf>
 801ba0a:	f06f 0305 	mvn.w	r3, #5
 801ba0e:	e15b      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801ba10:	2301      	movs	r3, #1
 801ba12:	623b      	str	r3, [r7, #32]
        break;
 801ba14:	e045      	b.n	801baa2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ba16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba1a:	2b04      	cmp	r3, #4
 801ba1c:	d009      	beq.n	801ba32 <dhcp_parse_reply+0x2e6>
 801ba1e:	4b10      	ldr	r3, [pc, #64]	; (801ba60 <dhcp_parse_reply+0x314>)
 801ba20:	f240 6259 	movw	r2, #1625	; 0x659
 801ba24:	490f      	ldr	r1, [pc, #60]	; (801ba64 <dhcp_parse_reply+0x318>)
 801ba26:	4810      	ldr	r0, [pc, #64]	; (801ba68 <dhcp_parse_reply+0x31c>)
 801ba28:	f004 f8c6 	bl	801fbb8 <iprintf>
 801ba2c:	f06f 0305 	mvn.w	r3, #5
 801ba30:	e14a      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801ba32:	2302      	movs	r3, #2
 801ba34:	623b      	str	r3, [r7, #32]
        break;
 801ba36:	e034      	b.n	801baa2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ba38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba3c:	2b04      	cmp	r3, #4
 801ba3e:	d009      	beq.n	801ba54 <dhcp_parse_reply+0x308>
 801ba40:	4b07      	ldr	r3, [pc, #28]	; (801ba60 <dhcp_parse_reply+0x314>)
 801ba42:	f240 625d 	movw	r2, #1629	; 0x65d
 801ba46:	4907      	ldr	r1, [pc, #28]	; (801ba64 <dhcp_parse_reply+0x318>)
 801ba48:	4807      	ldr	r0, [pc, #28]	; (801ba68 <dhcp_parse_reply+0x31c>)
 801ba4a:	f004 f8b5 	bl	801fbb8 <iprintf>
 801ba4e:	f06f 0305 	mvn.w	r3, #5
 801ba52:	e139      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 801ba54:	2304      	movs	r3, #4
 801ba56:	623b      	str	r3, [r7, #32]
        break;
 801ba58:	e023      	b.n	801baa2 <dhcp_parse_reply+0x356>
 801ba5a:	bf00      	nop
 801ba5c:	2000ea10 	.word	0x2000ea10
 801ba60:	08023d5c 	.word	0x08023d5c
 801ba64:	08023fe4 	.word	0x08023fe4
 801ba68:	08023dbc 	.word	0x08023dbc
 801ba6c:	08023ff0 	.word	0x08023ff0
 801ba70:	08024004 	.word	0x08024004
 801ba74:	08024010 	.word	0x08024010
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ba78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba7c:	2b04      	cmp	r3, #4
 801ba7e:	d009      	beq.n	801ba94 <dhcp_parse_reply+0x348>
 801ba80:	4b93      	ldr	r3, [pc, #588]	; (801bcd0 <dhcp_parse_reply+0x584>)
 801ba82:	f240 6261 	movw	r2, #1633	; 0x661
 801ba86:	4993      	ldr	r1, [pc, #588]	; (801bcd4 <dhcp_parse_reply+0x588>)
 801ba88:	4893      	ldr	r0, [pc, #588]	; (801bcd8 <dhcp_parse_reply+0x58c>)
 801ba8a:	f004 f895 	bl	801fbb8 <iprintf>
 801ba8e:	f06f 0305 	mvn.w	r3, #5
 801ba92:	e119      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801ba94:	2305      	movs	r3, #5
 801ba96:	623b      	str	r3, [r7, #32]
        break;
 801ba98:	e003      	b.n	801baa2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801baa0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801baa2:	7dfb      	ldrb	r3, [r7, #23]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d103      	bne.n	801bab0 <dhcp_parse_reply+0x364>
      offset++;
 801baa8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801baaa:	3301      	adds	r3, #1
 801baac:	877b      	strh	r3, [r7, #58]	; 0x3a
 801baae:	e0a1      	b.n	801bbf4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801bab0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bab6:	4413      	add	r3, r2
 801bab8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801babc:	4293      	cmp	r3, r2
 801babe:	dd02      	ble.n	801bac6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801bac0:	f06f 0301 	mvn.w	r3, #1
 801bac4:	e100      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801bac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801baca:	b29a      	uxth	r2, r3
 801bacc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bace:	4413      	add	r3, r2
 801bad0:	b29b      	uxth	r3, r3
 801bad2:	3302      	adds	r3, #2
 801bad4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801bad6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bada:	2b00      	cmp	r3, #0
 801badc:	f000 808a 	beq.w	801bbf4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801bae0:	2300      	movs	r3, #0
 801bae2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801bae4:	6a3b      	ldr	r3, [r7, #32]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	db02      	blt.n	801baf0 <dhcp_parse_reply+0x3a4>
 801baea:	6a3b      	ldr	r3, [r7, #32]
 801baec:	2b07      	cmp	r3, #7
 801baee:	dd06      	ble.n	801bafe <dhcp_parse_reply+0x3b2>
 801baf0:	4b77      	ldr	r3, [pc, #476]	; (801bcd0 <dhcp_parse_reply+0x584>)
 801baf2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801baf6:	4979      	ldr	r1, [pc, #484]	; (801bcdc <dhcp_parse_reply+0x590>)
 801baf8:	4877      	ldr	r0, [pc, #476]	; (801bcd8 <dhcp_parse_reply+0x58c>)
 801bafa:	f004 f85d 	bl	801fbb8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801bafe:	4a78      	ldr	r2, [pc, #480]	; (801bce0 <dhcp_parse_reply+0x594>)
 801bb00:	6a3b      	ldr	r3, [r7, #32]
 801bb02:	4413      	add	r3, r2
 801bb04:	781b      	ldrb	r3, [r3, #0]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d174      	bne.n	801bbf4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801bb0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bb0e:	2b04      	cmp	r3, #4
 801bb10:	bf28      	it	cs
 801bb12:	2304      	movcs	r3, #4
 801bb14:	b2db      	uxtb	r3, r3
 801bb16:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801bb18:	8bfb      	ldrh	r3, [r7, #30]
 801bb1a:	8aba      	ldrh	r2, [r7, #20]
 801bb1c:	f107 0108 	add.w	r1, r7, #8
 801bb20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bb22:	f7f7 fce5 	bl	80134f0 <pbuf_copy_partial>
 801bb26:	4603      	mov	r3, r0
 801bb28:	461a      	mov	r2, r3
 801bb2a:	8abb      	ldrh	r3, [r7, #20]
 801bb2c:	4293      	cmp	r3, r2
 801bb2e:	d002      	beq.n	801bb36 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 801bb30:	f06f 0301 	mvn.w	r3, #1
 801bb34:	e0c8      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801bb36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bb3a:	2b04      	cmp	r3, #4
 801bb3c:	d933      	bls.n	801bba6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801bb3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bb42:	f003 0303 	and.w	r3, r3, #3
 801bb46:	b2db      	uxtb	r3, r3
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d009      	beq.n	801bb60 <dhcp_parse_reply+0x414>
 801bb4c:	4b60      	ldr	r3, [pc, #384]	; (801bcd0 <dhcp_parse_reply+0x584>)
 801bb4e:	f240 6281 	movw	r2, #1665	; 0x681
 801bb52:	4964      	ldr	r1, [pc, #400]	; (801bce4 <dhcp_parse_reply+0x598>)
 801bb54:	4860      	ldr	r0, [pc, #384]	; (801bcd8 <dhcp_parse_reply+0x58c>)
 801bb56:	f004 f82f 	bl	801fbb8 <iprintf>
 801bb5a:	f06f 0305 	mvn.w	r3, #5
 801bb5e:	e0b3      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 801bb60:	4a5f      	ldr	r2, [pc, #380]	; (801bce0 <dhcp_parse_reply+0x594>)
 801bb62:	6a3b      	ldr	r3, [r7, #32]
 801bb64:	4413      	add	r3, r2
 801bb66:	2201      	movs	r2, #1
 801bb68:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801bb6a:	68bb      	ldr	r3, [r7, #8]
 801bb6c:	4618      	mov	r0, r3
 801bb6e:	f7f5 ff16 	bl	801199e <lwip_htonl>
 801bb72:	4602      	mov	r2, r0
 801bb74:	495c      	ldr	r1, [pc, #368]	; (801bce8 <dhcp_parse_reply+0x59c>)
 801bb76:	6a3b      	ldr	r3, [r7, #32]
 801bb78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801bb7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bb80:	3b04      	subs	r3, #4
 801bb82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801bb86:	8bfb      	ldrh	r3, [r7, #30]
 801bb88:	3304      	adds	r3, #4
 801bb8a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801bb8c:	8a7a      	ldrh	r2, [r7, #18]
 801bb8e:	8bfb      	ldrh	r3, [r7, #30]
 801bb90:	429a      	cmp	r2, r3
 801bb92:	d202      	bcs.n	801bb9a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 801bb94:	f06f 0301 	mvn.w	r3, #1
 801bb98:	e096      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801bb9a:	8a7b      	ldrh	r3, [r7, #18]
 801bb9c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801bb9e:	6a3b      	ldr	r3, [r7, #32]
 801bba0:	3301      	adds	r3, #1
 801bba2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801bba4:	e79e      	b.n	801bae4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801bba6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bbaa:	2b04      	cmp	r3, #4
 801bbac:	d106      	bne.n	801bbbc <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801bbae:	68bb      	ldr	r3, [r7, #8]
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	f7f5 fef4 	bl	801199e <lwip_htonl>
 801bbb6:	4603      	mov	r3, r0
 801bbb8:	60bb      	str	r3, [r7, #8]
 801bbba:	e011      	b.n	801bbe0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801bbbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bbc0:	2b01      	cmp	r3, #1
 801bbc2:	d009      	beq.n	801bbd8 <dhcp_parse_reply+0x48c>
 801bbc4:	4b42      	ldr	r3, [pc, #264]	; (801bcd0 <dhcp_parse_reply+0x584>)
 801bbc6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801bbca:	4948      	ldr	r1, [pc, #288]	; (801bcec <dhcp_parse_reply+0x5a0>)
 801bbcc:	4842      	ldr	r0, [pc, #264]	; (801bcd8 <dhcp_parse_reply+0x58c>)
 801bbce:	f003 fff3 	bl	801fbb8 <iprintf>
 801bbd2:	f06f 0305 	mvn.w	r3, #5
 801bbd6:	e077      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801bbd8:	f107 0308 	add.w	r3, r7, #8
 801bbdc:	781b      	ldrb	r3, [r3, #0]
 801bbde:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801bbe0:	4a3f      	ldr	r2, [pc, #252]	; (801bce0 <dhcp_parse_reply+0x594>)
 801bbe2:	6a3b      	ldr	r3, [r7, #32]
 801bbe4:	4413      	add	r3, r2
 801bbe6:	2201      	movs	r2, #1
 801bbe8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801bbea:	68ba      	ldr	r2, [r7, #8]
 801bbec:	493e      	ldr	r1, [pc, #248]	; (801bce8 <dhcp_parse_reply+0x59c>)
 801bbee:	6a3b      	ldr	r3, [r7, #32]
 801bbf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbf6:	895b      	ldrh	r3, [r3, #10]
 801bbf8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bbfa:	429a      	cmp	r2, r3
 801bbfc:	d324      	bcc.n	801bc48 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc00:	895b      	ldrh	r3, [r3, #10]
 801bc02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bc04:	1ad3      	subs	r3, r2, r3
 801bc06:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801bc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc0a:	895b      	ldrh	r3, [r3, #10]
 801bc0c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801bc0e:	1ad3      	subs	r3, r2, r3
 801bc10:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801bc12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bc14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bc16:	429a      	cmp	r2, r3
 801bc18:	d213      	bcs.n	801bc42 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	d109      	bne.n	801bc3a <dhcp_parse_reply+0x4ee>
 801bc26:	4b2a      	ldr	r3, [pc, #168]	; (801bcd0 <dhcp_parse_reply+0x584>)
 801bc28:	f240 629d 	movw	r2, #1693	; 0x69d
 801bc2c:	4930      	ldr	r1, [pc, #192]	; (801bcf0 <dhcp_parse_reply+0x5a4>)
 801bc2e:	482a      	ldr	r0, [pc, #168]	; (801bcd8 <dhcp_parse_reply+0x58c>)
 801bc30:	f003 ffc2 	bl	801fbb8 <iprintf>
 801bc34:	f06f 0305 	mvn.w	r3, #5
 801bc38:	e046      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc3c:	685b      	ldr	r3, [r3, #4]
 801bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bc40:	e002      	b.n	801bc48 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801bc42:	f06f 0301 	mvn.w	r3, #1
 801bc46:	e03f      	b.n	801bcc8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801bc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d00a      	beq.n	801bc64 <dhcp_parse_reply+0x518>
 801bc4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bc50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bc52:	429a      	cmp	r2, r3
 801bc54:	d206      	bcs.n	801bc64 <dhcp_parse_reply+0x518>
 801bc56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bc58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bc5a:	4413      	add	r3, r2
 801bc5c:	781b      	ldrb	r3, [r3, #0]
 801bc5e:	2bff      	cmp	r3, #255	; 0xff
 801bc60:	f47f adb7 	bne.w	801b7d2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801bc64:	4b1e      	ldr	r3, [pc, #120]	; (801bce0 <dhcp_parse_reply+0x594>)
 801bc66:	781b      	ldrb	r3, [r3, #0]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d018      	beq.n	801bc9e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801bc6c:	4b1e      	ldr	r3, [pc, #120]	; (801bce8 <dhcp_parse_reply+0x59c>)
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801bc72:	4b1b      	ldr	r3, [pc, #108]	; (801bce0 <dhcp_parse_reply+0x594>)
 801bc74:	2200      	movs	r2, #0
 801bc76:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	2b01      	cmp	r3, #1
 801bc7c:	d102      	bne.n	801bc84 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801bc7e:	2301      	movs	r3, #1
 801bc80:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bc82:	e00c      	b.n	801bc9e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	2b02      	cmp	r3, #2
 801bc88:	d102      	bne.n	801bc90 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801bc8a:	2301      	movs	r3, #1
 801bc8c:	62bb      	str	r3, [r7, #40]	; 0x28
 801bc8e:	e006      	b.n	801bc9e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	2b03      	cmp	r3, #3
 801bc94:	d103      	bne.n	801bc9e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801bc96:	2301      	movs	r3, #1
 801bc98:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801bc9a:	2301      	movs	r3, #1
 801bc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801bc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d006      	beq.n	801bcb2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801bca4:	2300      	movs	r3, #0
 801bca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801bca8:	236c      	movs	r3, #108	; 0x6c
 801bcaa:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801bcac:	23ec      	movs	r3, #236	; 0xec
 801bcae:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801bcb0:	e569      	b.n	801b786 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801bcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d006      	beq.n	801bcc6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801bcb8:	2300      	movs	r3, #0
 801bcba:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801bcbc:	232c      	movs	r3, #44	; 0x2c
 801bcbe:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801bcc0:	236c      	movs	r3, #108	; 0x6c
 801bcc2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801bcc4:	e55f      	b.n	801b786 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801bcc6:	2300      	movs	r3, #0
}
 801bcc8:	4618      	mov	r0, r3
 801bcca:	3740      	adds	r7, #64	; 0x40
 801bccc:	46bd      	mov	sp, r7
 801bcce:	bd80      	pop	{r7, pc}
 801bcd0:	08023d5c 	.word	0x08023d5c
 801bcd4:	08023fe4 	.word	0x08023fe4
 801bcd8:	08023dbc 	.word	0x08023dbc
 801bcdc:	08024028 	.word	0x08024028
 801bce0:	2000ea10 	.word	0x2000ea10
 801bce4:	0802403c 	.word	0x0802403c
 801bce8:	2000ea18 	.word	0x2000ea18
 801bcec:	08024054 	.word	0x08024054
 801bcf0:	08024068 	.word	0x08024068

0801bcf4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801bcf4:	b580      	push	{r7, lr}
 801bcf6:	b08a      	sub	sp, #40	; 0x28
 801bcf8:	af00      	add	r7, sp, #0
 801bcfa:	60f8      	str	r0, [r7, #12]
 801bcfc:	60b9      	str	r1, [r7, #8]
 801bcfe:	607a      	str	r2, [r7, #4]
 801bd00:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801bd02:	4b60      	ldr	r3, [pc, #384]	; (801be84 <dhcp_recv+0x190>)
 801bd04:	685b      	ldr	r3, [r3, #4]
 801bd06:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bd08:	6a3b      	ldr	r3, [r7, #32]
 801bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd0c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	685b      	ldr	r3, [r3, #4]
 801bd12:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801bd14:	69fb      	ldr	r3, [r7, #28]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	f000 809d 	beq.w	801be56 <dhcp_recv+0x162>
 801bd1c:	69fb      	ldr	r3, [r7, #28]
 801bd1e:	791b      	ldrb	r3, [r3, #4]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	f000 8098 	beq.w	801be56 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	895b      	ldrh	r3, [r3, #10]
 801bd2a:	2b2b      	cmp	r3, #43	; 0x2b
 801bd2c:	f240 8095 	bls.w	801be5a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801bd30:	69bb      	ldr	r3, [r7, #24]
 801bd32:	781b      	ldrb	r3, [r3, #0]
 801bd34:	2b02      	cmp	r3, #2
 801bd36:	f040 8092 	bne.w	801be5e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bd40:	e012      	b.n	801bd68 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801bd42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd46:	6a3a      	ldr	r2, [r7, #32]
 801bd48:	4413      	add	r3, r2
 801bd4a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801bd4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd52:	69b9      	ldr	r1, [r7, #24]
 801bd54:	440b      	add	r3, r1
 801bd56:	7f1b      	ldrb	r3, [r3, #28]
 801bd58:	429a      	cmp	r2, r3
 801bd5a:	f040 8082 	bne.w	801be62 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bd5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd62:	3301      	adds	r3, #1
 801bd64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bd68:	6a3b      	ldr	r3, [r7, #32]
 801bd6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bd6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801bd72:	429a      	cmp	r2, r3
 801bd74:	d203      	bcs.n	801bd7e <dhcp_recv+0x8a>
 801bd76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd7a:	2b05      	cmp	r3, #5
 801bd7c:	d9e1      	bls.n	801bd42 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801bd7e:	69bb      	ldr	r3, [r7, #24]
 801bd80:	685b      	ldr	r3, [r3, #4]
 801bd82:	4618      	mov	r0, r3
 801bd84:	f7f5 fe0b 	bl	801199e <lwip_htonl>
 801bd88:	4602      	mov	r2, r0
 801bd8a:	69fb      	ldr	r3, [r7, #28]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	429a      	cmp	r2, r3
 801bd90:	d169      	bne.n	801be66 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801bd92:	69f9      	ldr	r1, [r7, #28]
 801bd94:	6878      	ldr	r0, [r7, #4]
 801bd96:	f7ff fcd9 	bl	801b74c <dhcp_parse_reply>
 801bd9a:	4603      	mov	r3, r0
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d164      	bne.n	801be6a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801bda0:	4b39      	ldr	r3, [pc, #228]	; (801be88 <dhcp_recv+0x194>)
 801bda2:	785b      	ldrb	r3, [r3, #1]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d062      	beq.n	801be6e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	685b      	ldr	r3, [r3, #4]
 801bdac:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801bdae:	4b37      	ldr	r3, [pc, #220]	; (801be8c <dhcp_recv+0x198>)
 801bdb0:	685b      	ldr	r3, [r3, #4]
 801bdb2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801bdb4:	7cfb      	ldrb	r3, [r7, #19]
 801bdb6:	2b05      	cmp	r3, #5
 801bdb8:	d12a      	bne.n	801be10 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801bdba:	69fb      	ldr	r3, [r7, #28]
 801bdbc:	795b      	ldrb	r3, [r3, #5]
 801bdbe:	2b01      	cmp	r3, #1
 801bdc0:	d112      	bne.n	801bde8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801bdc2:	6979      	ldr	r1, [r7, #20]
 801bdc4:	6a38      	ldr	r0, [r7, #32]
 801bdc6:	f7fe fe17 	bl	801a9f8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801bdca:	6a3b      	ldr	r3, [r7, #32]
 801bdcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bdd0:	f003 0308 	and.w	r3, r3, #8
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d003      	beq.n	801bde0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801bdd8:	6a38      	ldr	r0, [r7, #32]
 801bdda:	f7fe fb87 	bl	801a4ec <dhcp_check>
 801bdde:	e049      	b.n	801be74 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801bde0:	6a38      	ldr	r0, [r7, #32]
 801bde2:	f7ff f867 	bl	801aeb4 <dhcp_bind>
 801bde6:	e045      	b.n	801be74 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801bde8:	69fb      	ldr	r3, [r7, #28]
 801bdea:	795b      	ldrb	r3, [r3, #5]
 801bdec:	2b03      	cmp	r3, #3
 801bdee:	d007      	beq.n	801be00 <dhcp_recv+0x10c>
 801bdf0:	69fb      	ldr	r3, [r7, #28]
 801bdf2:	795b      	ldrb	r3, [r3, #5]
 801bdf4:	2b04      	cmp	r3, #4
 801bdf6:	d003      	beq.n	801be00 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801bdf8:	69fb      	ldr	r3, [r7, #28]
 801bdfa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801bdfc:	2b05      	cmp	r3, #5
 801bdfe:	d139      	bne.n	801be74 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801be00:	6979      	ldr	r1, [r7, #20]
 801be02:	6a38      	ldr	r0, [r7, #32]
 801be04:	f7fe fdf8 	bl	801a9f8 <dhcp_handle_ack>
      dhcp_bind(netif);
 801be08:	6a38      	ldr	r0, [r7, #32]
 801be0a:	f7ff f853 	bl	801aeb4 <dhcp_bind>
 801be0e:	e031      	b.n	801be74 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801be10:	7cfb      	ldrb	r3, [r7, #19]
 801be12:	2b06      	cmp	r3, #6
 801be14:	d113      	bne.n	801be3e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801be16:	69fb      	ldr	r3, [r7, #28]
 801be18:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801be1a:	2b03      	cmp	r3, #3
 801be1c:	d00b      	beq.n	801be36 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801be1e:	69fb      	ldr	r3, [r7, #28]
 801be20:	795b      	ldrb	r3, [r3, #5]
 801be22:	2b01      	cmp	r3, #1
 801be24:	d007      	beq.n	801be36 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801be26:	69fb      	ldr	r3, [r7, #28]
 801be28:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801be2a:	2b04      	cmp	r3, #4
 801be2c:	d003      	beq.n	801be36 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801be2e:	69fb      	ldr	r3, [r7, #28]
 801be30:	795b      	ldrb	r3, [r3, #5]
 801be32:	2b05      	cmp	r3, #5
 801be34:	d103      	bne.n	801be3e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801be36:	6a38      	ldr	r0, [r7, #32]
 801be38:	f7fe fb3e 	bl	801a4b8 <dhcp_handle_nak>
 801be3c:	e01a      	b.n	801be74 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801be3e:	7cfb      	ldrb	r3, [r7, #19]
 801be40:	2b02      	cmp	r3, #2
 801be42:	d116      	bne.n	801be72 <dhcp_recv+0x17e>
 801be44:	69fb      	ldr	r3, [r7, #28]
 801be46:	795b      	ldrb	r3, [r3, #5]
 801be48:	2b06      	cmp	r3, #6
 801be4a:	d112      	bne.n	801be72 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801be4c:	6979      	ldr	r1, [r7, #20]
 801be4e:	6a38      	ldr	r0, [r7, #32]
 801be50:	f7fe fb80 	bl	801a554 <dhcp_handle_offer>
 801be54:	e00e      	b.n	801be74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801be56:	bf00      	nop
 801be58:	e00c      	b.n	801be74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801be5a:	bf00      	nop
 801be5c:	e00a      	b.n	801be74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801be5e:	bf00      	nop
 801be60:	e008      	b.n	801be74 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801be62:	bf00      	nop
 801be64:	e006      	b.n	801be74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801be66:	bf00      	nop
 801be68:	e004      	b.n	801be74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801be6a:	bf00      	nop
 801be6c:	e002      	b.n	801be74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801be6e:	bf00      	nop
 801be70:	e000      	b.n	801be74 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801be72:	bf00      	nop
  pbuf_free(p);
 801be74:	6878      	ldr	r0, [r7, #4]
 801be76:	f7f7 f935 	bl	80130e4 <pbuf_free>
}
 801be7a:	bf00      	nop
 801be7c:	3728      	adds	r7, #40	; 0x28
 801be7e:	46bd      	mov	sp, r7
 801be80:	bd80      	pop	{r7, pc}
 801be82:	bf00      	nop
 801be84:	2000b2c0 	.word	0x2000b2c0
 801be88:	2000ea10 	.word	0x2000ea10
 801be8c:	2000ea18 	.word	0x2000ea18

0801be90 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801be90:	b580      	push	{r7, lr}
 801be92:	b088      	sub	sp, #32
 801be94:	af00      	add	r7, sp, #0
 801be96:	60f8      	str	r0, [r7, #12]
 801be98:	60b9      	str	r1, [r7, #8]
 801be9a:	603b      	str	r3, [r7, #0]
 801be9c:	4613      	mov	r3, r2
 801be9e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d108      	bne.n	801beb8 <dhcp_create_msg+0x28>
 801bea6:	4b5f      	ldr	r3, [pc, #380]	; (801c024 <dhcp_create_msg+0x194>)
 801bea8:	f240 7269 	movw	r2, #1897	; 0x769
 801beac:	495e      	ldr	r1, [pc, #376]	; (801c028 <dhcp_create_msg+0x198>)
 801beae:	485f      	ldr	r0, [pc, #380]	; (801c02c <dhcp_create_msg+0x19c>)
 801beb0:	f003 fe82 	bl	801fbb8 <iprintf>
 801beb4:	2300      	movs	r3, #0
 801beb6:	e0b1      	b.n	801c01c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801beb8:	68bb      	ldr	r3, [r7, #8]
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d108      	bne.n	801bed0 <dhcp_create_msg+0x40>
 801bebe:	4b59      	ldr	r3, [pc, #356]	; (801c024 <dhcp_create_msg+0x194>)
 801bec0:	f240 726a 	movw	r2, #1898	; 0x76a
 801bec4:	495a      	ldr	r1, [pc, #360]	; (801c030 <dhcp_create_msg+0x1a0>)
 801bec6:	4859      	ldr	r0, [pc, #356]	; (801c02c <dhcp_create_msg+0x19c>)
 801bec8:	f003 fe76 	bl	801fbb8 <iprintf>
 801becc:	2300      	movs	r3, #0
 801bece:	e0a5      	b.n	801c01c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801bed0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bed4:	f44f 719a 	mov.w	r1, #308	; 0x134
 801bed8:	2036      	movs	r0, #54	; 0x36
 801beda:	f7f6 fe1f 	bl	8012b1c <pbuf_alloc>
 801bede:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801bee0:	69bb      	ldr	r3, [r7, #24]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d101      	bne.n	801beea <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801bee6:	2300      	movs	r3, #0
 801bee8:	e098      	b.n	801c01c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801beea:	69bb      	ldr	r3, [r7, #24]
 801beec:	895b      	ldrh	r3, [r3, #10]
 801beee:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801bef2:	d206      	bcs.n	801bf02 <dhcp_create_msg+0x72>
 801bef4:	4b4b      	ldr	r3, [pc, #300]	; (801c024 <dhcp_create_msg+0x194>)
 801bef6:	f240 7271 	movw	r2, #1905	; 0x771
 801befa:	494e      	ldr	r1, [pc, #312]	; (801c034 <dhcp_create_msg+0x1a4>)
 801befc:	484b      	ldr	r0, [pc, #300]	; (801c02c <dhcp_create_msg+0x19c>)
 801befe:	f003 fe5b 	bl	801fbb8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801bf02:	79fb      	ldrb	r3, [r7, #7]
 801bf04:	2b03      	cmp	r3, #3
 801bf06:	d103      	bne.n	801bf10 <dhcp_create_msg+0x80>
 801bf08:	68bb      	ldr	r3, [r7, #8]
 801bf0a:	795b      	ldrb	r3, [r3, #5]
 801bf0c:	2b03      	cmp	r3, #3
 801bf0e:	d10d      	bne.n	801bf2c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801bf10:	68bb      	ldr	r3, [r7, #8]
 801bf12:	799b      	ldrb	r3, [r3, #6]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d105      	bne.n	801bf24 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801bf18:	f003 fe66 	bl	801fbe8 <rand>
 801bf1c:	4603      	mov	r3, r0
 801bf1e:	461a      	mov	r2, r3
 801bf20:	4b45      	ldr	r3, [pc, #276]	; (801c038 <dhcp_create_msg+0x1a8>)
 801bf22:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801bf24:	4b44      	ldr	r3, [pc, #272]	; (801c038 <dhcp_create_msg+0x1a8>)
 801bf26:	681a      	ldr	r2, [r3, #0]
 801bf28:	68bb      	ldr	r3, [r7, #8]
 801bf2a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801bf2c:	69bb      	ldr	r3, [r7, #24]
 801bf2e:	685b      	ldr	r3, [r3, #4]
 801bf30:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801bf32:	f44f 729a 	mov.w	r2, #308	; 0x134
 801bf36:	2100      	movs	r1, #0
 801bf38:	6978      	ldr	r0, [r7, #20]
 801bf3a:	f003 fdda 	bl	801faf2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801bf3e:	697b      	ldr	r3, [r7, #20]
 801bf40:	2201      	movs	r2, #1
 801bf42:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801bf44:	697b      	ldr	r3, [r7, #20]
 801bf46:	2201      	movs	r2, #1
 801bf48:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801bf50:	697b      	ldr	r3, [r7, #20]
 801bf52:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801bf54:	68bb      	ldr	r3, [r7, #8]
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	4618      	mov	r0, r3
 801bf5a:	f7f5 fd20 	bl	801199e <lwip_htonl>
 801bf5e:	4602      	mov	r2, r0
 801bf60:	697b      	ldr	r3, [r7, #20]
 801bf62:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801bf64:	79fb      	ldrb	r3, [r7, #7]
 801bf66:	2b08      	cmp	r3, #8
 801bf68:	d010      	beq.n	801bf8c <dhcp_create_msg+0xfc>
 801bf6a:	79fb      	ldrb	r3, [r7, #7]
 801bf6c:	2b04      	cmp	r3, #4
 801bf6e:	d00d      	beq.n	801bf8c <dhcp_create_msg+0xfc>
 801bf70:	79fb      	ldrb	r3, [r7, #7]
 801bf72:	2b07      	cmp	r3, #7
 801bf74:	d00a      	beq.n	801bf8c <dhcp_create_msg+0xfc>
 801bf76:	79fb      	ldrb	r3, [r7, #7]
 801bf78:	2b03      	cmp	r3, #3
 801bf7a:	d10c      	bne.n	801bf96 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801bf7c:	68bb      	ldr	r3, [r7, #8]
 801bf7e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801bf80:	2b05      	cmp	r3, #5
 801bf82:	d003      	beq.n	801bf8c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801bf84:	68bb      	ldr	r3, [r7, #8]
 801bf86:	795b      	ldrb	r3, [r3, #5]
 801bf88:	2b04      	cmp	r3, #4
 801bf8a:	d104      	bne.n	801bf96 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801bf8c:	68fb      	ldr	r3, [r7, #12]
 801bf8e:	3304      	adds	r3, #4
 801bf90:	681a      	ldr	r2, [r3, #0]
 801bf92:	697b      	ldr	r3, [r7, #20]
 801bf94:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bf96:	2300      	movs	r3, #0
 801bf98:	83fb      	strh	r3, [r7, #30]
 801bf9a:	e00c      	b.n	801bfb6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801bf9c:	8bfa      	ldrh	r2, [r7, #30]
 801bf9e:	8bfb      	ldrh	r3, [r7, #30]
 801bfa0:	68f9      	ldr	r1, [r7, #12]
 801bfa2:	440a      	add	r2, r1
 801bfa4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801bfa8:	697a      	ldr	r2, [r7, #20]
 801bfaa:	4413      	add	r3, r2
 801bfac:	460a      	mov	r2, r1
 801bfae:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bfb0:	8bfb      	ldrh	r3, [r7, #30]
 801bfb2:	3301      	adds	r3, #1
 801bfb4:	83fb      	strh	r3, [r7, #30]
 801bfb6:	8bfb      	ldrh	r3, [r7, #30]
 801bfb8:	2b05      	cmp	r3, #5
 801bfba:	d9ef      	bls.n	801bf9c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bfbc:	697b      	ldr	r3, [r7, #20]
 801bfbe:	2200      	movs	r2, #0
 801bfc0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801bfc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801bfc8:	2200      	movs	r2, #0
 801bfca:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801bfce:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801bfd2:	2200      	movs	r2, #0
 801bfd4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801bfd8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801bfdc:	2200      	movs	r2, #0
 801bfde:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801bfe2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801bfe6:	697b      	ldr	r3, [r7, #20]
 801bfe8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bfec:	2301      	movs	r3, #1
 801bfee:	2235      	movs	r2, #53	; 0x35
 801bff0:	2000      	movs	r0, #0
 801bff2:	f7ff fadb 	bl	801b5ac <dhcp_option>
 801bff6:	4603      	mov	r3, r0
 801bff8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801bffa:	697b      	ldr	r3, [r7, #20]
 801bffc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c000:	79fa      	ldrb	r2, [r7, #7]
 801c002:	8a7b      	ldrh	r3, [r7, #18]
 801c004:	4618      	mov	r0, r3
 801c006:	f7ff fb05 	bl	801b614 <dhcp_option_byte>
 801c00a:	4603      	mov	r3, r0
 801c00c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801c00e:	683b      	ldr	r3, [r7, #0]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d002      	beq.n	801c01a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801c014:	683b      	ldr	r3, [r7, #0]
 801c016:	8a7a      	ldrh	r2, [r7, #18]
 801c018:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801c01a:	69bb      	ldr	r3, [r7, #24]
}
 801c01c:	4618      	mov	r0, r3
 801c01e:	3720      	adds	r7, #32
 801c020:	46bd      	mov	sp, r7
 801c022:	bd80      	pop	{r7, pc}
 801c024:	08023d5c 	.word	0x08023d5c
 801c028:	0802407c 	.word	0x0802407c
 801c02c:	08023dbc 	.word	0x08023dbc
 801c030:	0802409c 	.word	0x0802409c
 801c034:	080240bc 	.word	0x080240bc
 801c038:	20005ff4 	.word	0x20005ff4

0801c03c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b084      	sub	sp, #16
 801c040:	af00      	add	r7, sp, #0
 801c042:	4603      	mov	r3, r0
 801c044:	60b9      	str	r1, [r7, #8]
 801c046:	607a      	str	r2, [r7, #4]
 801c048:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801c04a:	89fb      	ldrh	r3, [r7, #14]
 801c04c:	1c5a      	adds	r2, r3, #1
 801c04e:	81fa      	strh	r2, [r7, #14]
 801c050:	461a      	mov	r2, r3
 801c052:	68bb      	ldr	r3, [r7, #8]
 801c054:	4413      	add	r3, r2
 801c056:	22ff      	movs	r2, #255	; 0xff
 801c058:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801c05a:	e007      	b.n	801c06c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801c05c:	89fb      	ldrh	r3, [r7, #14]
 801c05e:	1c5a      	adds	r2, r3, #1
 801c060:	81fa      	strh	r2, [r7, #14]
 801c062:	461a      	mov	r2, r3
 801c064:	68bb      	ldr	r3, [r7, #8]
 801c066:	4413      	add	r3, r2
 801c068:	2200      	movs	r2, #0
 801c06a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801c06c:	89fb      	ldrh	r3, [r7, #14]
 801c06e:	2b43      	cmp	r3, #67	; 0x43
 801c070:	d904      	bls.n	801c07c <dhcp_option_trailer+0x40>
 801c072:	89fb      	ldrh	r3, [r7, #14]
 801c074:	f003 0303 	and.w	r3, r3, #3
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d002      	beq.n	801c082 <dhcp_option_trailer+0x46>
 801c07c:	89fb      	ldrh	r3, [r7, #14]
 801c07e:	2b43      	cmp	r3, #67	; 0x43
 801c080:	d9ec      	bls.n	801c05c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801c082:	89fb      	ldrh	r3, [r7, #14]
 801c084:	33f0      	adds	r3, #240	; 0xf0
 801c086:	b29b      	uxth	r3, r3
 801c088:	4619      	mov	r1, r3
 801c08a:	6878      	ldr	r0, [r7, #4]
 801c08c:	f7f6 fea4 	bl	8012dd8 <pbuf_realloc>
}
 801c090:	bf00      	nop
 801c092:	3710      	adds	r7, #16
 801c094:	46bd      	mov	sp, r7
 801c096:	bd80      	pop	{r7, pc}

0801c098 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801c098:	b480      	push	{r7}
 801c09a:	b085      	sub	sp, #20
 801c09c:	af00      	add	r7, sp, #0
 801c09e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d017      	beq.n	801c0d6 <dhcp_supplied_address+0x3e>
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d013      	beq.n	801c0d6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0b2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801c0b4:	68fb      	ldr	r3, [r7, #12]
 801c0b6:	795b      	ldrb	r3, [r3, #5]
 801c0b8:	2b0a      	cmp	r3, #10
 801c0ba:	d007      	beq.n	801c0cc <dhcp_supplied_address+0x34>
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	795b      	ldrb	r3, [r3, #5]
 801c0c0:	2b05      	cmp	r3, #5
 801c0c2:	d003      	beq.n	801c0cc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801c0c8:	2b04      	cmp	r3, #4
 801c0ca:	d101      	bne.n	801c0d0 <dhcp_supplied_address+0x38>
 801c0cc:	2301      	movs	r3, #1
 801c0ce:	e000      	b.n	801c0d2 <dhcp_supplied_address+0x3a>
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	b2db      	uxtb	r3, r3
 801c0d4:	e000      	b.n	801c0d8 <dhcp_supplied_address+0x40>
  }
  return 0;
 801c0d6:	2300      	movs	r3, #0
}
 801c0d8:	4618      	mov	r0, r3
 801c0da:	3714      	adds	r7, #20
 801c0dc:	46bd      	mov	sp, r7
 801c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0e2:	4770      	bx	lr

0801c0e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	b082      	sub	sp, #8
 801c0e8:	af00      	add	r7, sp, #0
 801c0ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c0ec:	4915      	ldr	r1, [pc, #84]	; (801c144 <etharp_free_entry+0x60>)
 801c0ee:	687a      	ldr	r2, [r7, #4]
 801c0f0:	4613      	mov	r3, r2
 801c0f2:	005b      	lsls	r3, r3, #1
 801c0f4:	4413      	add	r3, r2
 801c0f6:	00db      	lsls	r3, r3, #3
 801c0f8:	440b      	add	r3, r1
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d013      	beq.n	801c128 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c100:	4910      	ldr	r1, [pc, #64]	; (801c144 <etharp_free_entry+0x60>)
 801c102:	687a      	ldr	r2, [r7, #4]
 801c104:	4613      	mov	r3, r2
 801c106:	005b      	lsls	r3, r3, #1
 801c108:	4413      	add	r3, r2
 801c10a:	00db      	lsls	r3, r3, #3
 801c10c:	440b      	add	r3, r1
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	4618      	mov	r0, r3
 801c112:	f7f6 ffe7 	bl	80130e4 <pbuf_free>
    arp_table[i].q = NULL;
 801c116:	490b      	ldr	r1, [pc, #44]	; (801c144 <etharp_free_entry+0x60>)
 801c118:	687a      	ldr	r2, [r7, #4]
 801c11a:	4613      	mov	r3, r2
 801c11c:	005b      	lsls	r3, r3, #1
 801c11e:	4413      	add	r3, r2
 801c120:	00db      	lsls	r3, r3, #3
 801c122:	440b      	add	r3, r1
 801c124:	2200      	movs	r2, #0
 801c126:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c128:	4906      	ldr	r1, [pc, #24]	; (801c144 <etharp_free_entry+0x60>)
 801c12a:	687a      	ldr	r2, [r7, #4]
 801c12c:	4613      	mov	r3, r2
 801c12e:	005b      	lsls	r3, r3, #1
 801c130:	4413      	add	r3, r2
 801c132:	00db      	lsls	r3, r3, #3
 801c134:	440b      	add	r3, r1
 801c136:	3314      	adds	r3, #20
 801c138:	2200      	movs	r2, #0
 801c13a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801c13c:	bf00      	nop
 801c13e:	3708      	adds	r7, #8
 801c140:	46bd      	mov	sp, r7
 801c142:	bd80      	pop	{r7, pc}
 801c144:	20005ff8 	.word	0x20005ff8

0801c148 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c148:	b580      	push	{r7, lr}
 801c14a:	b082      	sub	sp, #8
 801c14c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c14e:	2300      	movs	r3, #0
 801c150:	607b      	str	r3, [r7, #4]
 801c152:	e096      	b.n	801c282 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c154:	494f      	ldr	r1, [pc, #316]	; (801c294 <etharp_tmr+0x14c>)
 801c156:	687a      	ldr	r2, [r7, #4]
 801c158:	4613      	mov	r3, r2
 801c15a:	005b      	lsls	r3, r3, #1
 801c15c:	4413      	add	r3, r2
 801c15e:	00db      	lsls	r3, r3, #3
 801c160:	440b      	add	r3, r1
 801c162:	3314      	adds	r3, #20
 801c164:	781b      	ldrb	r3, [r3, #0]
 801c166:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c168:	78fb      	ldrb	r3, [r7, #3]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	f000 8086 	beq.w	801c27c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c170:	4948      	ldr	r1, [pc, #288]	; (801c294 <etharp_tmr+0x14c>)
 801c172:	687a      	ldr	r2, [r7, #4]
 801c174:	4613      	mov	r3, r2
 801c176:	005b      	lsls	r3, r3, #1
 801c178:	4413      	add	r3, r2
 801c17a:	00db      	lsls	r3, r3, #3
 801c17c:	440b      	add	r3, r1
 801c17e:	3312      	adds	r3, #18
 801c180:	881b      	ldrh	r3, [r3, #0]
 801c182:	3301      	adds	r3, #1
 801c184:	b298      	uxth	r0, r3
 801c186:	4943      	ldr	r1, [pc, #268]	; (801c294 <etharp_tmr+0x14c>)
 801c188:	687a      	ldr	r2, [r7, #4]
 801c18a:	4613      	mov	r3, r2
 801c18c:	005b      	lsls	r3, r3, #1
 801c18e:	4413      	add	r3, r2
 801c190:	00db      	lsls	r3, r3, #3
 801c192:	440b      	add	r3, r1
 801c194:	3312      	adds	r3, #18
 801c196:	4602      	mov	r2, r0
 801c198:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c19a:	493e      	ldr	r1, [pc, #248]	; (801c294 <etharp_tmr+0x14c>)
 801c19c:	687a      	ldr	r2, [r7, #4]
 801c19e:	4613      	mov	r3, r2
 801c1a0:	005b      	lsls	r3, r3, #1
 801c1a2:	4413      	add	r3, r2
 801c1a4:	00db      	lsls	r3, r3, #3
 801c1a6:	440b      	add	r3, r1
 801c1a8:	3312      	adds	r3, #18
 801c1aa:	881b      	ldrh	r3, [r3, #0]
 801c1ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801c1b0:	d215      	bcs.n	801c1de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c1b2:	4938      	ldr	r1, [pc, #224]	; (801c294 <etharp_tmr+0x14c>)
 801c1b4:	687a      	ldr	r2, [r7, #4]
 801c1b6:	4613      	mov	r3, r2
 801c1b8:	005b      	lsls	r3, r3, #1
 801c1ba:	4413      	add	r3, r2
 801c1bc:	00db      	lsls	r3, r3, #3
 801c1be:	440b      	add	r3, r1
 801c1c0:	3314      	adds	r3, #20
 801c1c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c1c4:	2b01      	cmp	r3, #1
 801c1c6:	d10e      	bne.n	801c1e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c1c8:	4932      	ldr	r1, [pc, #200]	; (801c294 <etharp_tmr+0x14c>)
 801c1ca:	687a      	ldr	r2, [r7, #4]
 801c1cc:	4613      	mov	r3, r2
 801c1ce:	005b      	lsls	r3, r3, #1
 801c1d0:	4413      	add	r3, r2
 801c1d2:	00db      	lsls	r3, r3, #3
 801c1d4:	440b      	add	r3, r1
 801c1d6:	3312      	adds	r3, #18
 801c1d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c1da:	2b04      	cmp	r3, #4
 801c1dc:	d903      	bls.n	801c1e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c1de:	6878      	ldr	r0, [r7, #4]
 801c1e0:	f7ff ff80 	bl	801c0e4 <etharp_free_entry>
 801c1e4:	e04a      	b.n	801c27c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c1e6:	492b      	ldr	r1, [pc, #172]	; (801c294 <etharp_tmr+0x14c>)
 801c1e8:	687a      	ldr	r2, [r7, #4]
 801c1ea:	4613      	mov	r3, r2
 801c1ec:	005b      	lsls	r3, r3, #1
 801c1ee:	4413      	add	r3, r2
 801c1f0:	00db      	lsls	r3, r3, #3
 801c1f2:	440b      	add	r3, r1
 801c1f4:	3314      	adds	r3, #20
 801c1f6:	781b      	ldrb	r3, [r3, #0]
 801c1f8:	2b03      	cmp	r3, #3
 801c1fa:	d10a      	bne.n	801c212 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c1fc:	4925      	ldr	r1, [pc, #148]	; (801c294 <etharp_tmr+0x14c>)
 801c1fe:	687a      	ldr	r2, [r7, #4]
 801c200:	4613      	mov	r3, r2
 801c202:	005b      	lsls	r3, r3, #1
 801c204:	4413      	add	r3, r2
 801c206:	00db      	lsls	r3, r3, #3
 801c208:	440b      	add	r3, r1
 801c20a:	3314      	adds	r3, #20
 801c20c:	2204      	movs	r2, #4
 801c20e:	701a      	strb	r2, [r3, #0]
 801c210:	e034      	b.n	801c27c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c212:	4920      	ldr	r1, [pc, #128]	; (801c294 <etharp_tmr+0x14c>)
 801c214:	687a      	ldr	r2, [r7, #4]
 801c216:	4613      	mov	r3, r2
 801c218:	005b      	lsls	r3, r3, #1
 801c21a:	4413      	add	r3, r2
 801c21c:	00db      	lsls	r3, r3, #3
 801c21e:	440b      	add	r3, r1
 801c220:	3314      	adds	r3, #20
 801c222:	781b      	ldrb	r3, [r3, #0]
 801c224:	2b04      	cmp	r3, #4
 801c226:	d10a      	bne.n	801c23e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c228:	491a      	ldr	r1, [pc, #104]	; (801c294 <etharp_tmr+0x14c>)
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	4613      	mov	r3, r2
 801c22e:	005b      	lsls	r3, r3, #1
 801c230:	4413      	add	r3, r2
 801c232:	00db      	lsls	r3, r3, #3
 801c234:	440b      	add	r3, r1
 801c236:	3314      	adds	r3, #20
 801c238:	2202      	movs	r2, #2
 801c23a:	701a      	strb	r2, [r3, #0]
 801c23c:	e01e      	b.n	801c27c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c23e:	4915      	ldr	r1, [pc, #84]	; (801c294 <etharp_tmr+0x14c>)
 801c240:	687a      	ldr	r2, [r7, #4]
 801c242:	4613      	mov	r3, r2
 801c244:	005b      	lsls	r3, r3, #1
 801c246:	4413      	add	r3, r2
 801c248:	00db      	lsls	r3, r3, #3
 801c24a:	440b      	add	r3, r1
 801c24c:	3314      	adds	r3, #20
 801c24e:	781b      	ldrb	r3, [r3, #0]
 801c250:	2b01      	cmp	r3, #1
 801c252:	d113      	bne.n	801c27c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c254:	490f      	ldr	r1, [pc, #60]	; (801c294 <etharp_tmr+0x14c>)
 801c256:	687a      	ldr	r2, [r7, #4]
 801c258:	4613      	mov	r3, r2
 801c25a:	005b      	lsls	r3, r3, #1
 801c25c:	4413      	add	r3, r2
 801c25e:	00db      	lsls	r3, r3, #3
 801c260:	440b      	add	r3, r1
 801c262:	3308      	adds	r3, #8
 801c264:	6818      	ldr	r0, [r3, #0]
 801c266:	687a      	ldr	r2, [r7, #4]
 801c268:	4613      	mov	r3, r2
 801c26a:	005b      	lsls	r3, r3, #1
 801c26c:	4413      	add	r3, r2
 801c26e:	00db      	lsls	r3, r3, #3
 801c270:	4a08      	ldr	r2, [pc, #32]	; (801c294 <etharp_tmr+0x14c>)
 801c272:	4413      	add	r3, r2
 801c274:	3304      	adds	r3, #4
 801c276:	4619      	mov	r1, r3
 801c278:	f000 fe72 	bl	801cf60 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	3301      	adds	r3, #1
 801c280:	607b      	str	r3, [r7, #4]
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	2b09      	cmp	r3, #9
 801c286:	f77f af65 	ble.w	801c154 <etharp_tmr+0xc>
      }
    }
  }
}
 801c28a:	bf00      	nop
 801c28c:	bf00      	nop
 801c28e:	3708      	adds	r7, #8
 801c290:	46bd      	mov	sp, r7
 801c292:	bd80      	pop	{r7, pc}
 801c294:	20005ff8 	.word	0x20005ff8

0801c298 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	b08a      	sub	sp, #40	; 0x28
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	60f8      	str	r0, [r7, #12]
 801c2a0:	460b      	mov	r3, r1
 801c2a2:	607a      	str	r2, [r7, #4]
 801c2a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c2a6:	230a      	movs	r3, #10
 801c2a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 801c2aa:	230a      	movs	r3, #10
 801c2ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c2ae:	230a      	movs	r3, #10
 801c2b0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c2b6:	230a      	movs	r3, #10
 801c2b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c2ba:	2300      	movs	r3, #0
 801c2bc:	83bb      	strh	r3, [r7, #28]
 801c2be:	2300      	movs	r3, #0
 801c2c0:	837b      	strh	r3, [r7, #26]
 801c2c2:	2300      	movs	r3, #0
 801c2c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c2c6:	2300      	movs	r3, #0
 801c2c8:	843b      	strh	r3, [r7, #32]
 801c2ca:	e0ae      	b.n	801c42a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c2cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c2d0:	49a6      	ldr	r1, [pc, #664]	; (801c56c <etharp_find_entry+0x2d4>)
 801c2d2:	4613      	mov	r3, r2
 801c2d4:	005b      	lsls	r3, r3, #1
 801c2d6:	4413      	add	r3, r2
 801c2d8:	00db      	lsls	r3, r3, #3
 801c2da:	440b      	add	r3, r1
 801c2dc:	3314      	adds	r3, #20
 801c2de:	781b      	ldrb	r3, [r3, #0]
 801c2e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c2e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c2e6:	2b0a      	cmp	r3, #10
 801c2e8:	d105      	bne.n	801c2f6 <etharp_find_entry+0x5e>
 801c2ea:	7dfb      	ldrb	r3, [r7, #23]
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d102      	bne.n	801c2f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c2f0:	8c3b      	ldrh	r3, [r7, #32]
 801c2f2:	847b      	strh	r3, [r7, #34]	; 0x22
 801c2f4:	e095      	b.n	801c422 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c2f6:	7dfb      	ldrb	r3, [r7, #23]
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	f000 8092 	beq.w	801c422 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c2fe:	7dfb      	ldrb	r3, [r7, #23]
 801c300:	2b01      	cmp	r3, #1
 801c302:	d009      	beq.n	801c318 <etharp_find_entry+0x80>
 801c304:	7dfb      	ldrb	r3, [r7, #23]
 801c306:	2b01      	cmp	r3, #1
 801c308:	d806      	bhi.n	801c318 <etharp_find_entry+0x80>
 801c30a:	4b99      	ldr	r3, [pc, #612]	; (801c570 <etharp_find_entry+0x2d8>)
 801c30c:	f240 1223 	movw	r2, #291	; 0x123
 801c310:	4998      	ldr	r1, [pc, #608]	; (801c574 <etharp_find_entry+0x2dc>)
 801c312:	4899      	ldr	r0, [pc, #612]	; (801c578 <etharp_find_entry+0x2e0>)
 801c314:	f003 fc50 	bl	801fbb8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d020      	beq.n	801c360 <etharp_find_entry+0xc8>
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	6819      	ldr	r1, [r3, #0]
 801c322:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c326:	4891      	ldr	r0, [pc, #580]	; (801c56c <etharp_find_entry+0x2d4>)
 801c328:	4613      	mov	r3, r2
 801c32a:	005b      	lsls	r3, r3, #1
 801c32c:	4413      	add	r3, r2
 801c32e:	00db      	lsls	r3, r3, #3
 801c330:	4403      	add	r3, r0
 801c332:	3304      	adds	r3, #4
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	4299      	cmp	r1, r3
 801c338:	d112      	bne.n	801c360 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d00c      	beq.n	801c35a <etharp_find_entry+0xc2>
 801c340:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c344:	4989      	ldr	r1, [pc, #548]	; (801c56c <etharp_find_entry+0x2d4>)
 801c346:	4613      	mov	r3, r2
 801c348:	005b      	lsls	r3, r3, #1
 801c34a:	4413      	add	r3, r2
 801c34c:	00db      	lsls	r3, r3, #3
 801c34e:	440b      	add	r3, r1
 801c350:	3308      	adds	r3, #8
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	687a      	ldr	r2, [r7, #4]
 801c356:	429a      	cmp	r2, r3
 801c358:	d102      	bne.n	801c360 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c35a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c35e:	e100      	b.n	801c562 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c360:	7dfb      	ldrb	r3, [r7, #23]
 801c362:	2b01      	cmp	r3, #1
 801c364:	d140      	bne.n	801c3e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c366:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c36a:	4980      	ldr	r1, [pc, #512]	; (801c56c <etharp_find_entry+0x2d4>)
 801c36c:	4613      	mov	r3, r2
 801c36e:	005b      	lsls	r3, r3, #1
 801c370:	4413      	add	r3, r2
 801c372:	00db      	lsls	r3, r3, #3
 801c374:	440b      	add	r3, r1
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d01a      	beq.n	801c3b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c37c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c380:	497a      	ldr	r1, [pc, #488]	; (801c56c <etharp_find_entry+0x2d4>)
 801c382:	4613      	mov	r3, r2
 801c384:	005b      	lsls	r3, r3, #1
 801c386:	4413      	add	r3, r2
 801c388:	00db      	lsls	r3, r3, #3
 801c38a:	440b      	add	r3, r1
 801c38c:	3312      	adds	r3, #18
 801c38e:	881b      	ldrh	r3, [r3, #0]
 801c390:	8bba      	ldrh	r2, [r7, #28]
 801c392:	429a      	cmp	r2, r3
 801c394:	d845      	bhi.n	801c422 <etharp_find_entry+0x18a>
            old_queue = i;
 801c396:	8c3b      	ldrh	r3, [r7, #32]
 801c398:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c39a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c39e:	4973      	ldr	r1, [pc, #460]	; (801c56c <etharp_find_entry+0x2d4>)
 801c3a0:	4613      	mov	r3, r2
 801c3a2:	005b      	lsls	r3, r3, #1
 801c3a4:	4413      	add	r3, r2
 801c3a6:	00db      	lsls	r3, r3, #3
 801c3a8:	440b      	add	r3, r1
 801c3aa:	3312      	adds	r3, #18
 801c3ac:	881b      	ldrh	r3, [r3, #0]
 801c3ae:	83bb      	strh	r3, [r7, #28]
 801c3b0:	e037      	b.n	801c422 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c3b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3b6:	496d      	ldr	r1, [pc, #436]	; (801c56c <etharp_find_entry+0x2d4>)
 801c3b8:	4613      	mov	r3, r2
 801c3ba:	005b      	lsls	r3, r3, #1
 801c3bc:	4413      	add	r3, r2
 801c3be:	00db      	lsls	r3, r3, #3
 801c3c0:	440b      	add	r3, r1
 801c3c2:	3312      	adds	r3, #18
 801c3c4:	881b      	ldrh	r3, [r3, #0]
 801c3c6:	8b7a      	ldrh	r2, [r7, #26]
 801c3c8:	429a      	cmp	r2, r3
 801c3ca:	d82a      	bhi.n	801c422 <etharp_find_entry+0x18a>
            old_pending = i;
 801c3cc:	8c3b      	ldrh	r3, [r7, #32]
 801c3ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801c3d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3d4:	4965      	ldr	r1, [pc, #404]	; (801c56c <etharp_find_entry+0x2d4>)
 801c3d6:	4613      	mov	r3, r2
 801c3d8:	005b      	lsls	r3, r3, #1
 801c3da:	4413      	add	r3, r2
 801c3dc:	00db      	lsls	r3, r3, #3
 801c3de:	440b      	add	r3, r1
 801c3e0:	3312      	adds	r3, #18
 801c3e2:	881b      	ldrh	r3, [r3, #0]
 801c3e4:	837b      	strh	r3, [r7, #26]
 801c3e6:	e01c      	b.n	801c422 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c3e8:	7dfb      	ldrb	r3, [r7, #23]
 801c3ea:	2b01      	cmp	r3, #1
 801c3ec:	d919      	bls.n	801c422 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c3ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3f2:	495e      	ldr	r1, [pc, #376]	; (801c56c <etharp_find_entry+0x2d4>)
 801c3f4:	4613      	mov	r3, r2
 801c3f6:	005b      	lsls	r3, r3, #1
 801c3f8:	4413      	add	r3, r2
 801c3fa:	00db      	lsls	r3, r3, #3
 801c3fc:	440b      	add	r3, r1
 801c3fe:	3312      	adds	r3, #18
 801c400:	881b      	ldrh	r3, [r3, #0]
 801c402:	8b3a      	ldrh	r2, [r7, #24]
 801c404:	429a      	cmp	r2, r3
 801c406:	d80c      	bhi.n	801c422 <etharp_find_entry+0x18a>
            old_stable = i;
 801c408:	8c3b      	ldrh	r3, [r7, #32]
 801c40a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801c40c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c410:	4956      	ldr	r1, [pc, #344]	; (801c56c <etharp_find_entry+0x2d4>)
 801c412:	4613      	mov	r3, r2
 801c414:	005b      	lsls	r3, r3, #1
 801c416:	4413      	add	r3, r2
 801c418:	00db      	lsls	r3, r3, #3
 801c41a:	440b      	add	r3, r1
 801c41c:	3312      	adds	r3, #18
 801c41e:	881b      	ldrh	r3, [r3, #0]
 801c420:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c422:	8c3b      	ldrh	r3, [r7, #32]
 801c424:	3301      	adds	r3, #1
 801c426:	b29b      	uxth	r3, r3
 801c428:	843b      	strh	r3, [r7, #32]
 801c42a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c42e:	2b09      	cmp	r3, #9
 801c430:	f77f af4c 	ble.w	801c2cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c434:	7afb      	ldrb	r3, [r7, #11]
 801c436:	f003 0302 	and.w	r3, r3, #2
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d108      	bne.n	801c450 <etharp_find_entry+0x1b8>
 801c43e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c442:	2b0a      	cmp	r3, #10
 801c444:	d107      	bne.n	801c456 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c446:	7afb      	ldrb	r3, [r7, #11]
 801c448:	f003 0301 	and.w	r3, r3, #1
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d102      	bne.n	801c456 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c450:	f04f 33ff 	mov.w	r3, #4294967295
 801c454:	e085      	b.n	801c562 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c456:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c45a:	2b09      	cmp	r3, #9
 801c45c:	dc02      	bgt.n	801c464 <etharp_find_entry+0x1cc>
    i = empty;
 801c45e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c460:	843b      	strh	r3, [r7, #32]
 801c462:	e039      	b.n	801c4d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c464:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801c468:	2b09      	cmp	r3, #9
 801c46a:	dc14      	bgt.n	801c496 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c46e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c470:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c474:	493d      	ldr	r1, [pc, #244]	; (801c56c <etharp_find_entry+0x2d4>)
 801c476:	4613      	mov	r3, r2
 801c478:	005b      	lsls	r3, r3, #1
 801c47a:	4413      	add	r3, r2
 801c47c:	00db      	lsls	r3, r3, #3
 801c47e:	440b      	add	r3, r1
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	2b00      	cmp	r3, #0
 801c484:	d018      	beq.n	801c4b8 <etharp_find_entry+0x220>
 801c486:	4b3a      	ldr	r3, [pc, #232]	; (801c570 <etharp_find_entry+0x2d8>)
 801c488:	f240 126d 	movw	r2, #365	; 0x16d
 801c48c:	493b      	ldr	r1, [pc, #236]	; (801c57c <etharp_find_entry+0x2e4>)
 801c48e:	483a      	ldr	r0, [pc, #232]	; (801c578 <etharp_find_entry+0x2e0>)
 801c490:	f003 fb92 	bl	801fbb8 <iprintf>
 801c494:	e010      	b.n	801c4b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c496:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801c49a:	2b09      	cmp	r3, #9
 801c49c:	dc02      	bgt.n	801c4a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c49e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c4a0:	843b      	strh	r3, [r7, #32]
 801c4a2:	e009      	b.n	801c4b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c4a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c4a8:	2b09      	cmp	r3, #9
 801c4aa:	dc02      	bgt.n	801c4b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c4ac:	8bfb      	ldrh	r3, [r7, #30]
 801c4ae:	843b      	strh	r3, [r7, #32]
 801c4b0:	e002      	b.n	801c4b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c4b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c4b6:	e054      	b.n	801c562 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c4b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c4bc:	2b09      	cmp	r3, #9
 801c4be:	dd06      	ble.n	801c4ce <etharp_find_entry+0x236>
 801c4c0:	4b2b      	ldr	r3, [pc, #172]	; (801c570 <etharp_find_entry+0x2d8>)
 801c4c2:	f240 127f 	movw	r2, #383	; 0x17f
 801c4c6:	492e      	ldr	r1, [pc, #184]	; (801c580 <etharp_find_entry+0x2e8>)
 801c4c8:	482b      	ldr	r0, [pc, #172]	; (801c578 <etharp_find_entry+0x2e0>)
 801c4ca:	f003 fb75 	bl	801fbb8 <iprintf>
    etharp_free_entry(i);
 801c4ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	f7ff fe06 	bl	801c0e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c4d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c4dc:	2b09      	cmp	r3, #9
 801c4de:	dd06      	ble.n	801c4ee <etharp_find_entry+0x256>
 801c4e0:	4b23      	ldr	r3, [pc, #140]	; (801c570 <etharp_find_entry+0x2d8>)
 801c4e2:	f240 1283 	movw	r2, #387	; 0x183
 801c4e6:	4926      	ldr	r1, [pc, #152]	; (801c580 <etharp_find_entry+0x2e8>)
 801c4e8:	4823      	ldr	r0, [pc, #140]	; (801c578 <etharp_find_entry+0x2e0>)
 801c4ea:	f003 fb65 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c4ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c4f2:	491e      	ldr	r1, [pc, #120]	; (801c56c <etharp_find_entry+0x2d4>)
 801c4f4:	4613      	mov	r3, r2
 801c4f6:	005b      	lsls	r3, r3, #1
 801c4f8:	4413      	add	r3, r2
 801c4fa:	00db      	lsls	r3, r3, #3
 801c4fc:	440b      	add	r3, r1
 801c4fe:	3314      	adds	r3, #20
 801c500:	781b      	ldrb	r3, [r3, #0]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d006      	beq.n	801c514 <etharp_find_entry+0x27c>
 801c506:	4b1a      	ldr	r3, [pc, #104]	; (801c570 <etharp_find_entry+0x2d8>)
 801c508:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801c50c:	491d      	ldr	r1, [pc, #116]	; (801c584 <etharp_find_entry+0x2ec>)
 801c50e:	481a      	ldr	r0, [pc, #104]	; (801c578 <etharp_find_entry+0x2e0>)
 801c510:	f003 fb52 	bl	801fbb8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d00b      	beq.n	801c532 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c51a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	6819      	ldr	r1, [r3, #0]
 801c522:	4812      	ldr	r0, [pc, #72]	; (801c56c <etharp_find_entry+0x2d4>)
 801c524:	4613      	mov	r3, r2
 801c526:	005b      	lsls	r3, r3, #1
 801c528:	4413      	add	r3, r2
 801c52a:	00db      	lsls	r3, r3, #3
 801c52c:	4403      	add	r3, r0
 801c52e:	3304      	adds	r3, #4
 801c530:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c532:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c536:	490d      	ldr	r1, [pc, #52]	; (801c56c <etharp_find_entry+0x2d4>)
 801c538:	4613      	mov	r3, r2
 801c53a:	005b      	lsls	r3, r3, #1
 801c53c:	4413      	add	r3, r2
 801c53e:	00db      	lsls	r3, r3, #3
 801c540:	440b      	add	r3, r1
 801c542:	3312      	adds	r3, #18
 801c544:	2200      	movs	r2, #0
 801c546:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c548:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c54c:	4907      	ldr	r1, [pc, #28]	; (801c56c <etharp_find_entry+0x2d4>)
 801c54e:	4613      	mov	r3, r2
 801c550:	005b      	lsls	r3, r3, #1
 801c552:	4413      	add	r3, r2
 801c554:	00db      	lsls	r3, r3, #3
 801c556:	440b      	add	r3, r1
 801c558:	3308      	adds	r3, #8
 801c55a:	687a      	ldr	r2, [r7, #4]
 801c55c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c55e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c562:	4618      	mov	r0, r3
 801c564:	3728      	adds	r7, #40	; 0x28
 801c566:	46bd      	mov	sp, r7
 801c568:	bd80      	pop	{r7, pc}
 801c56a:	bf00      	nop
 801c56c:	20005ff8 	.word	0x20005ff8
 801c570:	080240fc 	.word	0x080240fc
 801c574:	08024134 	.word	0x08024134
 801c578:	08024174 	.word	0x08024174
 801c57c:	0802419c 	.word	0x0802419c
 801c580:	080241b4 	.word	0x080241b4
 801c584:	080241c8 	.word	0x080241c8

0801c588 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c588:	b580      	push	{r7, lr}
 801c58a:	b088      	sub	sp, #32
 801c58c:	af02      	add	r7, sp, #8
 801c58e:	60f8      	str	r0, [r7, #12]
 801c590:	60b9      	str	r1, [r7, #8]
 801c592:	607a      	str	r2, [r7, #4]
 801c594:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c59c:	2b06      	cmp	r3, #6
 801c59e:	d006      	beq.n	801c5ae <etharp_update_arp_entry+0x26>
 801c5a0:	4b48      	ldr	r3, [pc, #288]	; (801c6c4 <etharp_update_arp_entry+0x13c>)
 801c5a2:	f240 12a9 	movw	r2, #425	; 0x1a9
 801c5a6:	4948      	ldr	r1, [pc, #288]	; (801c6c8 <etharp_update_arp_entry+0x140>)
 801c5a8:	4848      	ldr	r0, [pc, #288]	; (801c6cc <etharp_update_arp_entry+0x144>)
 801c5aa:	f003 fb05 	bl	801fbb8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c5ae:	68bb      	ldr	r3, [r7, #8]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d012      	beq.n	801c5da <etharp_update_arp_entry+0x52>
 801c5b4:	68bb      	ldr	r3, [r7, #8]
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d00e      	beq.n	801c5da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c5bc:	68bb      	ldr	r3, [r7, #8]
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	68f9      	ldr	r1, [r7, #12]
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f001 f920 	bl	801d808 <ip4_addr_isbroadcast_u32>
 801c5c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d105      	bne.n	801c5da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c5ce:	68bb      	ldr	r3, [r7, #8]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c5d6:	2be0      	cmp	r3, #224	; 0xe0
 801c5d8:	d102      	bne.n	801c5e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c5da:	f06f 030f 	mvn.w	r3, #15
 801c5de:	e06c      	b.n	801c6ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c5e0:	78fb      	ldrb	r3, [r7, #3]
 801c5e2:	68fa      	ldr	r2, [r7, #12]
 801c5e4:	4619      	mov	r1, r3
 801c5e6:	68b8      	ldr	r0, [r7, #8]
 801c5e8:	f7ff fe56 	bl	801c298 <etharp_find_entry>
 801c5ec:	4603      	mov	r3, r0
 801c5ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c5f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	da02      	bge.n	801c5fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c5f8:	8afb      	ldrh	r3, [r7, #22]
 801c5fa:	b25b      	sxtb	r3, r3
 801c5fc:	e05d      	b.n	801c6ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c5fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c602:	4933      	ldr	r1, [pc, #204]	; (801c6d0 <etharp_update_arp_entry+0x148>)
 801c604:	4613      	mov	r3, r2
 801c606:	005b      	lsls	r3, r3, #1
 801c608:	4413      	add	r3, r2
 801c60a:	00db      	lsls	r3, r3, #3
 801c60c:	440b      	add	r3, r1
 801c60e:	3314      	adds	r3, #20
 801c610:	2202      	movs	r2, #2
 801c612:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c614:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c618:	492d      	ldr	r1, [pc, #180]	; (801c6d0 <etharp_update_arp_entry+0x148>)
 801c61a:	4613      	mov	r3, r2
 801c61c:	005b      	lsls	r3, r3, #1
 801c61e:	4413      	add	r3, r2
 801c620:	00db      	lsls	r3, r3, #3
 801c622:	440b      	add	r3, r1
 801c624:	3308      	adds	r3, #8
 801c626:	68fa      	ldr	r2, [r7, #12]
 801c628:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c62a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c62e:	4613      	mov	r3, r2
 801c630:	005b      	lsls	r3, r3, #1
 801c632:	4413      	add	r3, r2
 801c634:	00db      	lsls	r3, r3, #3
 801c636:	3308      	adds	r3, #8
 801c638:	4a25      	ldr	r2, [pc, #148]	; (801c6d0 <etharp_update_arp_entry+0x148>)
 801c63a:	4413      	add	r3, r2
 801c63c:	3304      	adds	r3, #4
 801c63e:	2206      	movs	r2, #6
 801c640:	6879      	ldr	r1, [r7, #4]
 801c642:	4618      	mov	r0, r3
 801c644:	f003 fa47 	bl	801fad6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c648:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c64c:	4920      	ldr	r1, [pc, #128]	; (801c6d0 <etharp_update_arp_entry+0x148>)
 801c64e:	4613      	mov	r3, r2
 801c650:	005b      	lsls	r3, r3, #1
 801c652:	4413      	add	r3, r2
 801c654:	00db      	lsls	r3, r3, #3
 801c656:	440b      	add	r3, r1
 801c658:	3312      	adds	r3, #18
 801c65a:	2200      	movs	r2, #0
 801c65c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c65e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c662:	491b      	ldr	r1, [pc, #108]	; (801c6d0 <etharp_update_arp_entry+0x148>)
 801c664:	4613      	mov	r3, r2
 801c666:	005b      	lsls	r3, r3, #1
 801c668:	4413      	add	r3, r2
 801c66a:	00db      	lsls	r3, r3, #3
 801c66c:	440b      	add	r3, r1
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	2b00      	cmp	r3, #0
 801c672:	d021      	beq.n	801c6b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c674:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c678:	4915      	ldr	r1, [pc, #84]	; (801c6d0 <etharp_update_arp_entry+0x148>)
 801c67a:	4613      	mov	r3, r2
 801c67c:	005b      	lsls	r3, r3, #1
 801c67e:	4413      	add	r3, r2
 801c680:	00db      	lsls	r3, r3, #3
 801c682:	440b      	add	r3, r1
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c68c:	4910      	ldr	r1, [pc, #64]	; (801c6d0 <etharp_update_arp_entry+0x148>)
 801c68e:	4613      	mov	r3, r2
 801c690:	005b      	lsls	r3, r3, #1
 801c692:	4413      	add	r3, r2
 801c694:	00db      	lsls	r3, r3, #3
 801c696:	440b      	add	r3, r1
 801c698:	2200      	movs	r2, #0
 801c69a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c6a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c6a6:	9300      	str	r3, [sp, #0]
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	6939      	ldr	r1, [r7, #16]
 801c6ac:	68f8      	ldr	r0, [r7, #12]
 801c6ae:	f001 ffb3 	bl	801e618 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c6b2:	6938      	ldr	r0, [r7, #16]
 801c6b4:	f7f6 fd16 	bl	80130e4 <pbuf_free>
  }
  return ERR_OK;
 801c6b8:	2300      	movs	r3, #0
}
 801c6ba:	4618      	mov	r0, r3
 801c6bc:	3718      	adds	r7, #24
 801c6be:	46bd      	mov	sp, r7
 801c6c0:	bd80      	pop	{r7, pc}
 801c6c2:	bf00      	nop
 801c6c4:	080240fc 	.word	0x080240fc
 801c6c8:	080241f4 	.word	0x080241f4
 801c6cc:	08024174 	.word	0x08024174
 801c6d0:	20005ff8 	.word	0x20005ff8

0801c6d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b084      	sub	sp, #16
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c6dc:	2300      	movs	r3, #0
 801c6de:	60fb      	str	r3, [r7, #12]
 801c6e0:	e01e      	b.n	801c720 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c6e2:	4913      	ldr	r1, [pc, #76]	; (801c730 <etharp_cleanup_netif+0x5c>)
 801c6e4:	68fa      	ldr	r2, [r7, #12]
 801c6e6:	4613      	mov	r3, r2
 801c6e8:	005b      	lsls	r3, r3, #1
 801c6ea:	4413      	add	r3, r2
 801c6ec:	00db      	lsls	r3, r3, #3
 801c6ee:	440b      	add	r3, r1
 801c6f0:	3314      	adds	r3, #20
 801c6f2:	781b      	ldrb	r3, [r3, #0]
 801c6f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c6f6:	7afb      	ldrb	r3, [r7, #11]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d00e      	beq.n	801c71a <etharp_cleanup_netif+0x46>
 801c6fc:	490c      	ldr	r1, [pc, #48]	; (801c730 <etharp_cleanup_netif+0x5c>)
 801c6fe:	68fa      	ldr	r2, [r7, #12]
 801c700:	4613      	mov	r3, r2
 801c702:	005b      	lsls	r3, r3, #1
 801c704:	4413      	add	r3, r2
 801c706:	00db      	lsls	r3, r3, #3
 801c708:	440b      	add	r3, r1
 801c70a:	3308      	adds	r3, #8
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	687a      	ldr	r2, [r7, #4]
 801c710:	429a      	cmp	r2, r3
 801c712:	d102      	bne.n	801c71a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c714:	68f8      	ldr	r0, [r7, #12]
 801c716:	f7ff fce5 	bl	801c0e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	3301      	adds	r3, #1
 801c71e:	60fb      	str	r3, [r7, #12]
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	2b09      	cmp	r3, #9
 801c724:	dddd      	ble.n	801c6e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801c726:	bf00      	nop
 801c728:	bf00      	nop
 801c72a:	3710      	adds	r7, #16
 801c72c:	46bd      	mov	sp, r7
 801c72e:	bd80      	pop	{r7, pc}
 801c730:	20005ff8 	.word	0x20005ff8

0801c734 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c734:	b5b0      	push	{r4, r5, r7, lr}
 801c736:	b08a      	sub	sp, #40	; 0x28
 801c738:	af04      	add	r7, sp, #16
 801c73a:	6078      	str	r0, [r7, #4]
 801c73c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c73e:	683b      	ldr	r3, [r7, #0]
 801c740:	2b00      	cmp	r3, #0
 801c742:	d107      	bne.n	801c754 <etharp_input+0x20>
 801c744:	4b3f      	ldr	r3, [pc, #252]	; (801c844 <etharp_input+0x110>)
 801c746:	f240 228a 	movw	r2, #650	; 0x28a
 801c74a:	493f      	ldr	r1, [pc, #252]	; (801c848 <etharp_input+0x114>)
 801c74c:	483f      	ldr	r0, [pc, #252]	; (801c84c <etharp_input+0x118>)
 801c74e:	f003 fa33 	bl	801fbb8 <iprintf>
 801c752:	e074      	b.n	801c83e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	685b      	ldr	r3, [r3, #4]
 801c758:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c75a:	693b      	ldr	r3, [r7, #16]
 801c75c:	881b      	ldrh	r3, [r3, #0]
 801c75e:	b29b      	uxth	r3, r3
 801c760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c764:	d10c      	bne.n	801c780 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c766:	693b      	ldr	r3, [r7, #16]
 801c768:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c76a:	2b06      	cmp	r3, #6
 801c76c:	d108      	bne.n	801c780 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c76e:	693b      	ldr	r3, [r7, #16]
 801c770:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c772:	2b04      	cmp	r3, #4
 801c774:	d104      	bne.n	801c780 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c776:	693b      	ldr	r3, [r7, #16]
 801c778:	885b      	ldrh	r3, [r3, #2]
 801c77a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c77c:	2b08      	cmp	r3, #8
 801c77e:	d003      	beq.n	801c788 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801c780:	6878      	ldr	r0, [r7, #4]
 801c782:	f7f6 fcaf 	bl	80130e4 <pbuf_free>
    return;
 801c786:	e05a      	b.n	801c83e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c788:	693b      	ldr	r3, [r7, #16]
 801c78a:	330e      	adds	r3, #14
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c790:	693b      	ldr	r3, [r7, #16]
 801c792:	3318      	adds	r3, #24
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c798:	683b      	ldr	r3, [r7, #0]
 801c79a:	3304      	adds	r3, #4
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d102      	bne.n	801c7a8 <etharp_input+0x74>
    for_us = 0;
 801c7a2:	2300      	movs	r3, #0
 801c7a4:	75fb      	strb	r3, [r7, #23]
 801c7a6:	e009      	b.n	801c7bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c7a8:	68ba      	ldr	r2, [r7, #8]
 801c7aa:	683b      	ldr	r3, [r7, #0]
 801c7ac:	3304      	adds	r3, #4
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	429a      	cmp	r2, r3
 801c7b2:	bf0c      	ite	eq
 801c7b4:	2301      	moveq	r3, #1
 801c7b6:	2300      	movne	r3, #0
 801c7b8:	b2db      	uxtb	r3, r3
 801c7ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c7bc:	693b      	ldr	r3, [r7, #16]
 801c7be:	f103 0208 	add.w	r2, r3, #8
 801c7c2:	7dfb      	ldrb	r3, [r7, #23]
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d001      	beq.n	801c7cc <etharp_input+0x98>
 801c7c8:	2301      	movs	r3, #1
 801c7ca:	e000      	b.n	801c7ce <etharp_input+0x9a>
 801c7cc:	2302      	movs	r3, #2
 801c7ce:	f107 010c 	add.w	r1, r7, #12
 801c7d2:	6838      	ldr	r0, [r7, #0]
 801c7d4:	f7ff fed8 	bl	801c588 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c7d8:	693b      	ldr	r3, [r7, #16]
 801c7da:	88db      	ldrh	r3, [r3, #6]
 801c7dc:	b29b      	uxth	r3, r3
 801c7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c7e2:	d003      	beq.n	801c7ec <etharp_input+0xb8>
 801c7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c7e8:	d01e      	beq.n	801c828 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801c7ea:	e025      	b.n	801c838 <etharp_input+0x104>
      if (for_us) {
 801c7ec:	7dfb      	ldrb	r3, [r7, #23]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d021      	beq.n	801c836 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c7f2:	683b      	ldr	r3, [r7, #0]
 801c7f4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c7f8:	693b      	ldr	r3, [r7, #16]
 801c7fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c7fe:	683b      	ldr	r3, [r7, #0]
 801c800:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801c804:	683b      	ldr	r3, [r7, #0]
 801c806:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c808:	693a      	ldr	r2, [r7, #16]
 801c80a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c80c:	2102      	movs	r1, #2
 801c80e:	9103      	str	r1, [sp, #12]
 801c810:	f107 010c 	add.w	r1, r7, #12
 801c814:	9102      	str	r1, [sp, #8]
 801c816:	9201      	str	r2, [sp, #4]
 801c818:	9300      	str	r3, [sp, #0]
 801c81a:	462b      	mov	r3, r5
 801c81c:	4622      	mov	r2, r4
 801c81e:	4601      	mov	r1, r0
 801c820:	6838      	ldr	r0, [r7, #0]
 801c822:	f000 faef 	bl	801ce04 <etharp_raw>
      break;
 801c826:	e006      	b.n	801c836 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801c828:	f107 030c 	add.w	r3, r7, #12
 801c82c:	4619      	mov	r1, r3
 801c82e:	6838      	ldr	r0, [r7, #0]
 801c830:	f7fe f9fc 	bl	801ac2c <dhcp_arp_reply>
      break;
 801c834:	e000      	b.n	801c838 <etharp_input+0x104>
      break;
 801c836:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c838:	6878      	ldr	r0, [r7, #4]
 801c83a:	f7f6 fc53 	bl	80130e4 <pbuf_free>
}
 801c83e:	3718      	adds	r7, #24
 801c840:	46bd      	mov	sp, r7
 801c842:	bdb0      	pop	{r4, r5, r7, pc}
 801c844:	080240fc 	.word	0x080240fc
 801c848:	0802424c 	.word	0x0802424c
 801c84c:	08024174 	.word	0x08024174

0801c850 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b086      	sub	sp, #24
 801c854:	af02      	add	r7, sp, #8
 801c856:	60f8      	str	r0, [r7, #12]
 801c858:	60b9      	str	r1, [r7, #8]
 801c85a:	4613      	mov	r3, r2
 801c85c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c85e:	79fa      	ldrb	r2, [r7, #7]
 801c860:	4944      	ldr	r1, [pc, #272]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c862:	4613      	mov	r3, r2
 801c864:	005b      	lsls	r3, r3, #1
 801c866:	4413      	add	r3, r2
 801c868:	00db      	lsls	r3, r3, #3
 801c86a:	440b      	add	r3, r1
 801c86c:	3314      	adds	r3, #20
 801c86e:	781b      	ldrb	r3, [r3, #0]
 801c870:	2b01      	cmp	r3, #1
 801c872:	d806      	bhi.n	801c882 <etharp_output_to_arp_index+0x32>
 801c874:	4b40      	ldr	r3, [pc, #256]	; (801c978 <etharp_output_to_arp_index+0x128>)
 801c876:	f240 22ee 	movw	r2, #750	; 0x2ee
 801c87a:	4940      	ldr	r1, [pc, #256]	; (801c97c <etharp_output_to_arp_index+0x12c>)
 801c87c:	4840      	ldr	r0, [pc, #256]	; (801c980 <etharp_output_to_arp_index+0x130>)
 801c87e:	f003 f99b 	bl	801fbb8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c882:	79fa      	ldrb	r2, [r7, #7]
 801c884:	493b      	ldr	r1, [pc, #236]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c886:	4613      	mov	r3, r2
 801c888:	005b      	lsls	r3, r3, #1
 801c88a:	4413      	add	r3, r2
 801c88c:	00db      	lsls	r3, r3, #3
 801c88e:	440b      	add	r3, r1
 801c890:	3314      	adds	r3, #20
 801c892:	781b      	ldrb	r3, [r3, #0]
 801c894:	2b02      	cmp	r3, #2
 801c896:	d153      	bne.n	801c940 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c898:	79fa      	ldrb	r2, [r7, #7]
 801c89a:	4936      	ldr	r1, [pc, #216]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c89c:	4613      	mov	r3, r2
 801c89e:	005b      	lsls	r3, r3, #1
 801c8a0:	4413      	add	r3, r2
 801c8a2:	00db      	lsls	r3, r3, #3
 801c8a4:	440b      	add	r3, r1
 801c8a6:	3312      	adds	r3, #18
 801c8a8:	881b      	ldrh	r3, [r3, #0]
 801c8aa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801c8ae:	d919      	bls.n	801c8e4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c8b0:	79fa      	ldrb	r2, [r7, #7]
 801c8b2:	4613      	mov	r3, r2
 801c8b4:	005b      	lsls	r3, r3, #1
 801c8b6:	4413      	add	r3, r2
 801c8b8:	00db      	lsls	r3, r3, #3
 801c8ba:	4a2e      	ldr	r2, [pc, #184]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c8bc:	4413      	add	r3, r2
 801c8be:	3304      	adds	r3, #4
 801c8c0:	4619      	mov	r1, r3
 801c8c2:	68f8      	ldr	r0, [r7, #12]
 801c8c4:	f000 fb4c 	bl	801cf60 <etharp_request>
 801c8c8:	4603      	mov	r3, r0
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d138      	bne.n	801c940 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c8ce:	79fa      	ldrb	r2, [r7, #7]
 801c8d0:	4928      	ldr	r1, [pc, #160]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c8d2:	4613      	mov	r3, r2
 801c8d4:	005b      	lsls	r3, r3, #1
 801c8d6:	4413      	add	r3, r2
 801c8d8:	00db      	lsls	r3, r3, #3
 801c8da:	440b      	add	r3, r1
 801c8dc:	3314      	adds	r3, #20
 801c8de:	2203      	movs	r2, #3
 801c8e0:	701a      	strb	r2, [r3, #0]
 801c8e2:	e02d      	b.n	801c940 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c8e4:	79fa      	ldrb	r2, [r7, #7]
 801c8e6:	4923      	ldr	r1, [pc, #140]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c8e8:	4613      	mov	r3, r2
 801c8ea:	005b      	lsls	r3, r3, #1
 801c8ec:	4413      	add	r3, r2
 801c8ee:	00db      	lsls	r3, r3, #3
 801c8f0:	440b      	add	r3, r1
 801c8f2:	3312      	adds	r3, #18
 801c8f4:	881b      	ldrh	r3, [r3, #0]
 801c8f6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c8fa:	d321      	bcc.n	801c940 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c8fc:	79fa      	ldrb	r2, [r7, #7]
 801c8fe:	4613      	mov	r3, r2
 801c900:	005b      	lsls	r3, r3, #1
 801c902:	4413      	add	r3, r2
 801c904:	00db      	lsls	r3, r3, #3
 801c906:	4a1b      	ldr	r2, [pc, #108]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c908:	4413      	add	r3, r2
 801c90a:	1d19      	adds	r1, r3, #4
 801c90c:	79fa      	ldrb	r2, [r7, #7]
 801c90e:	4613      	mov	r3, r2
 801c910:	005b      	lsls	r3, r3, #1
 801c912:	4413      	add	r3, r2
 801c914:	00db      	lsls	r3, r3, #3
 801c916:	3308      	adds	r3, #8
 801c918:	4a16      	ldr	r2, [pc, #88]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c91a:	4413      	add	r3, r2
 801c91c:	3304      	adds	r3, #4
 801c91e:	461a      	mov	r2, r3
 801c920:	68f8      	ldr	r0, [r7, #12]
 801c922:	f000 fafb 	bl	801cf1c <etharp_request_dst>
 801c926:	4603      	mov	r3, r0
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d109      	bne.n	801c940 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c92c:	79fa      	ldrb	r2, [r7, #7]
 801c92e:	4911      	ldr	r1, [pc, #68]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c930:	4613      	mov	r3, r2
 801c932:	005b      	lsls	r3, r3, #1
 801c934:	4413      	add	r3, r2
 801c936:	00db      	lsls	r3, r3, #3
 801c938:	440b      	add	r3, r1
 801c93a:	3314      	adds	r3, #20
 801c93c:	2203      	movs	r2, #3
 801c93e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801c946:	79fa      	ldrb	r2, [r7, #7]
 801c948:	4613      	mov	r3, r2
 801c94a:	005b      	lsls	r3, r3, #1
 801c94c:	4413      	add	r3, r2
 801c94e:	00db      	lsls	r3, r3, #3
 801c950:	3308      	adds	r3, #8
 801c952:	4a08      	ldr	r2, [pc, #32]	; (801c974 <etharp_output_to_arp_index+0x124>)
 801c954:	4413      	add	r3, r2
 801c956:	3304      	adds	r3, #4
 801c958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c95c:	9200      	str	r2, [sp, #0]
 801c95e:	460a      	mov	r2, r1
 801c960:	68b9      	ldr	r1, [r7, #8]
 801c962:	68f8      	ldr	r0, [r7, #12]
 801c964:	f001 fe58 	bl	801e618 <ethernet_output>
 801c968:	4603      	mov	r3, r0
}
 801c96a:	4618      	mov	r0, r3
 801c96c:	3710      	adds	r7, #16
 801c96e:	46bd      	mov	sp, r7
 801c970:	bd80      	pop	{r7, pc}
 801c972:	bf00      	nop
 801c974:	20005ff8 	.word	0x20005ff8
 801c978:	080240fc 	.word	0x080240fc
 801c97c:	0802426c 	.word	0x0802426c
 801c980:	08024174 	.word	0x08024174

0801c984 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c984:	b580      	push	{r7, lr}
 801c986:	b08a      	sub	sp, #40	; 0x28
 801c988:	af02      	add	r7, sp, #8
 801c98a:	60f8      	str	r0, [r7, #12]
 801c98c:	60b9      	str	r1, [r7, #8]
 801c98e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d106      	bne.n	801c9a8 <etharp_output+0x24>
 801c99a:	4b73      	ldr	r3, [pc, #460]	; (801cb68 <etharp_output+0x1e4>)
 801c99c:	f240 321e 	movw	r2, #798	; 0x31e
 801c9a0:	4972      	ldr	r1, [pc, #456]	; (801cb6c <etharp_output+0x1e8>)
 801c9a2:	4873      	ldr	r0, [pc, #460]	; (801cb70 <etharp_output+0x1ec>)
 801c9a4:	f003 f908 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c9a8:	68bb      	ldr	r3, [r7, #8]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d106      	bne.n	801c9bc <etharp_output+0x38>
 801c9ae:	4b6e      	ldr	r3, [pc, #440]	; (801cb68 <etharp_output+0x1e4>)
 801c9b0:	f240 321f 	movw	r2, #799	; 0x31f
 801c9b4:	496f      	ldr	r1, [pc, #444]	; (801cb74 <etharp_output+0x1f0>)
 801c9b6:	486e      	ldr	r0, [pc, #440]	; (801cb70 <etharp_output+0x1ec>)
 801c9b8:	f003 f8fe 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d106      	bne.n	801c9d0 <etharp_output+0x4c>
 801c9c2:	4b69      	ldr	r3, [pc, #420]	; (801cb68 <etharp_output+0x1e4>)
 801c9c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c9c8:	496b      	ldr	r1, [pc, #428]	; (801cb78 <etharp_output+0x1f4>)
 801c9ca:	4869      	ldr	r0, [pc, #420]	; (801cb70 <etharp_output+0x1ec>)
 801c9cc:	f003 f8f4 	bl	801fbb8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	68f9      	ldr	r1, [r7, #12]
 801c9d6:	4618      	mov	r0, r3
 801c9d8:	f000 ff16 	bl	801d808 <ip4_addr_isbroadcast_u32>
 801c9dc:	4603      	mov	r3, r0
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d002      	beq.n	801c9e8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c9e2:	4b66      	ldr	r3, [pc, #408]	; (801cb7c <etharp_output+0x1f8>)
 801c9e4:	61fb      	str	r3, [r7, #28]
 801c9e6:	e0af      	b.n	801cb48 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c9f0:	2be0      	cmp	r3, #224	; 0xe0
 801c9f2:	d118      	bne.n	801ca26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c9f4:	2301      	movs	r3, #1
 801c9f6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c9fc:	235e      	movs	r3, #94	; 0x5e
 801c9fe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	3301      	adds	r3, #1
 801ca04:	781b      	ldrb	r3, [r3, #0]
 801ca06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ca0a:	b2db      	uxtb	r3, r3
 801ca0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	3302      	adds	r3, #2
 801ca12:	781b      	ldrb	r3, [r3, #0]
 801ca14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	3303      	adds	r3, #3
 801ca1a:	781b      	ldrb	r3, [r3, #0]
 801ca1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ca1e:	f107 0310 	add.w	r3, r7, #16
 801ca22:	61fb      	str	r3, [r7, #28]
 801ca24:	e090      	b.n	801cb48 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	681a      	ldr	r2, [r3, #0]
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	3304      	adds	r3, #4
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	405a      	eors	r2, r3
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	3308      	adds	r3, #8
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	4013      	ands	r3, r2
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d012      	beq.n	801ca64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ca44:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ca48:	4293      	cmp	r3, r2
 801ca4a:	d00b      	beq.n	801ca64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	330c      	adds	r3, #12
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d003      	beq.n	801ca5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	330c      	adds	r3, #12
 801ca5a:	61bb      	str	r3, [r7, #24]
 801ca5c:	e002      	b.n	801ca64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ca5e:	f06f 0303 	mvn.w	r3, #3
 801ca62:	e07d      	b.n	801cb60 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ca64:	4b46      	ldr	r3, [pc, #280]	; (801cb80 <etharp_output+0x1fc>)
 801ca66:	781b      	ldrb	r3, [r3, #0]
 801ca68:	4619      	mov	r1, r3
 801ca6a:	4a46      	ldr	r2, [pc, #280]	; (801cb84 <etharp_output+0x200>)
 801ca6c:	460b      	mov	r3, r1
 801ca6e:	005b      	lsls	r3, r3, #1
 801ca70:	440b      	add	r3, r1
 801ca72:	00db      	lsls	r3, r3, #3
 801ca74:	4413      	add	r3, r2
 801ca76:	3314      	adds	r3, #20
 801ca78:	781b      	ldrb	r3, [r3, #0]
 801ca7a:	2b01      	cmp	r3, #1
 801ca7c:	d925      	bls.n	801caca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ca7e:	4b40      	ldr	r3, [pc, #256]	; (801cb80 <etharp_output+0x1fc>)
 801ca80:	781b      	ldrb	r3, [r3, #0]
 801ca82:	4619      	mov	r1, r3
 801ca84:	4a3f      	ldr	r2, [pc, #252]	; (801cb84 <etharp_output+0x200>)
 801ca86:	460b      	mov	r3, r1
 801ca88:	005b      	lsls	r3, r3, #1
 801ca8a:	440b      	add	r3, r1
 801ca8c:	00db      	lsls	r3, r3, #3
 801ca8e:	4413      	add	r3, r2
 801ca90:	3308      	adds	r3, #8
 801ca92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ca94:	68fa      	ldr	r2, [r7, #12]
 801ca96:	429a      	cmp	r2, r3
 801ca98:	d117      	bne.n	801caca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ca9a:	69bb      	ldr	r3, [r7, #24]
 801ca9c:	681a      	ldr	r2, [r3, #0]
 801ca9e:	4b38      	ldr	r3, [pc, #224]	; (801cb80 <etharp_output+0x1fc>)
 801caa0:	781b      	ldrb	r3, [r3, #0]
 801caa2:	4618      	mov	r0, r3
 801caa4:	4937      	ldr	r1, [pc, #220]	; (801cb84 <etharp_output+0x200>)
 801caa6:	4603      	mov	r3, r0
 801caa8:	005b      	lsls	r3, r3, #1
 801caaa:	4403      	add	r3, r0
 801caac:	00db      	lsls	r3, r3, #3
 801caae:	440b      	add	r3, r1
 801cab0:	3304      	adds	r3, #4
 801cab2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cab4:	429a      	cmp	r2, r3
 801cab6:	d108      	bne.n	801caca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801cab8:	4b31      	ldr	r3, [pc, #196]	; (801cb80 <etharp_output+0x1fc>)
 801caba:	781b      	ldrb	r3, [r3, #0]
 801cabc:	461a      	mov	r2, r3
 801cabe:	68b9      	ldr	r1, [r7, #8]
 801cac0:	68f8      	ldr	r0, [r7, #12]
 801cac2:	f7ff fec5 	bl	801c850 <etharp_output_to_arp_index>
 801cac6:	4603      	mov	r3, r0
 801cac8:	e04a      	b.n	801cb60 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801caca:	2300      	movs	r3, #0
 801cacc:	75fb      	strb	r3, [r7, #23]
 801cace:	e031      	b.n	801cb34 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cad0:	7dfa      	ldrb	r2, [r7, #23]
 801cad2:	492c      	ldr	r1, [pc, #176]	; (801cb84 <etharp_output+0x200>)
 801cad4:	4613      	mov	r3, r2
 801cad6:	005b      	lsls	r3, r3, #1
 801cad8:	4413      	add	r3, r2
 801cada:	00db      	lsls	r3, r3, #3
 801cadc:	440b      	add	r3, r1
 801cade:	3314      	adds	r3, #20
 801cae0:	781b      	ldrb	r3, [r3, #0]
 801cae2:	2b01      	cmp	r3, #1
 801cae4:	d923      	bls.n	801cb2e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801cae6:	7dfa      	ldrb	r2, [r7, #23]
 801cae8:	4926      	ldr	r1, [pc, #152]	; (801cb84 <etharp_output+0x200>)
 801caea:	4613      	mov	r3, r2
 801caec:	005b      	lsls	r3, r3, #1
 801caee:	4413      	add	r3, r2
 801caf0:	00db      	lsls	r3, r3, #3
 801caf2:	440b      	add	r3, r1
 801caf4:	3308      	adds	r3, #8
 801caf6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801caf8:	68fa      	ldr	r2, [r7, #12]
 801cafa:	429a      	cmp	r2, r3
 801cafc:	d117      	bne.n	801cb2e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801cafe:	69bb      	ldr	r3, [r7, #24]
 801cb00:	6819      	ldr	r1, [r3, #0]
 801cb02:	7dfa      	ldrb	r2, [r7, #23]
 801cb04:	481f      	ldr	r0, [pc, #124]	; (801cb84 <etharp_output+0x200>)
 801cb06:	4613      	mov	r3, r2
 801cb08:	005b      	lsls	r3, r3, #1
 801cb0a:	4413      	add	r3, r2
 801cb0c:	00db      	lsls	r3, r3, #3
 801cb0e:	4403      	add	r3, r0
 801cb10:	3304      	adds	r3, #4
 801cb12:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801cb14:	4299      	cmp	r1, r3
 801cb16:	d10a      	bne.n	801cb2e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801cb18:	4a19      	ldr	r2, [pc, #100]	; (801cb80 <etharp_output+0x1fc>)
 801cb1a:	7dfb      	ldrb	r3, [r7, #23]
 801cb1c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801cb1e:	7dfb      	ldrb	r3, [r7, #23]
 801cb20:	461a      	mov	r2, r3
 801cb22:	68b9      	ldr	r1, [r7, #8]
 801cb24:	68f8      	ldr	r0, [r7, #12]
 801cb26:	f7ff fe93 	bl	801c850 <etharp_output_to_arp_index>
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	e018      	b.n	801cb60 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cb2e:	7dfb      	ldrb	r3, [r7, #23]
 801cb30:	3301      	adds	r3, #1
 801cb32:	75fb      	strb	r3, [r7, #23]
 801cb34:	7dfb      	ldrb	r3, [r7, #23]
 801cb36:	2b09      	cmp	r3, #9
 801cb38:	d9ca      	bls.n	801cad0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801cb3a:	68ba      	ldr	r2, [r7, #8]
 801cb3c:	69b9      	ldr	r1, [r7, #24]
 801cb3e:	68f8      	ldr	r0, [r7, #12]
 801cb40:	f000 f822 	bl	801cb88 <etharp_query>
 801cb44:	4603      	mov	r3, r0
 801cb46:	e00b      	b.n	801cb60 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801cb4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cb52:	9300      	str	r3, [sp, #0]
 801cb54:	69fb      	ldr	r3, [r7, #28]
 801cb56:	68b9      	ldr	r1, [r7, #8]
 801cb58:	68f8      	ldr	r0, [r7, #12]
 801cb5a:	f001 fd5d 	bl	801e618 <ethernet_output>
 801cb5e:	4603      	mov	r3, r0
}
 801cb60:	4618      	mov	r0, r3
 801cb62:	3720      	adds	r7, #32
 801cb64:	46bd      	mov	sp, r7
 801cb66:	bd80      	pop	{r7, pc}
 801cb68:	080240fc 	.word	0x080240fc
 801cb6c:	0802424c 	.word	0x0802424c
 801cb70:	08024174 	.word	0x08024174
 801cb74:	0802429c 	.word	0x0802429c
 801cb78:	0802423c 	.word	0x0802423c
 801cb7c:	08024a50 	.word	0x08024a50
 801cb80:	200060e8 	.word	0x200060e8
 801cb84:	20005ff8 	.word	0x20005ff8

0801cb88 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	b08c      	sub	sp, #48	; 0x30
 801cb8c:	af02      	add	r7, sp, #8
 801cb8e:	60f8      	str	r0, [r7, #12]
 801cb90:	60b9      	str	r1, [r7, #8]
 801cb92:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	332a      	adds	r3, #42	; 0x2a
 801cb98:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801cb9a:	23ff      	movs	r3, #255	; 0xff
 801cb9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801cba0:	2300      	movs	r3, #0
 801cba2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801cba4:	68bb      	ldr	r3, [r7, #8]
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	68f9      	ldr	r1, [r7, #12]
 801cbaa:	4618      	mov	r0, r3
 801cbac:	f000 fe2c 	bl	801d808 <ip4_addr_isbroadcast_u32>
 801cbb0:	4603      	mov	r3, r0
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d10c      	bne.n	801cbd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801cbb6:	68bb      	ldr	r3, [r7, #8]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801cbbe:	2be0      	cmp	r3, #224	; 0xe0
 801cbc0:	d006      	beq.n	801cbd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801cbc2:	68bb      	ldr	r3, [r7, #8]
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d003      	beq.n	801cbd0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801cbc8:	68bb      	ldr	r3, [r7, #8]
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d102      	bne.n	801cbd6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801cbd0:	f06f 030f 	mvn.w	r3, #15
 801cbd4:	e101      	b.n	801cdda <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801cbd6:	68fa      	ldr	r2, [r7, #12]
 801cbd8:	2101      	movs	r1, #1
 801cbda:	68b8      	ldr	r0, [r7, #8]
 801cbdc:	f7ff fb5c 	bl	801c298 <etharp_find_entry>
 801cbe0:	4603      	mov	r3, r0
 801cbe2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801cbe4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	da02      	bge.n	801cbf2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801cbec:	8a7b      	ldrh	r3, [r7, #18]
 801cbee:	b25b      	sxtb	r3, r3
 801cbf0:	e0f3      	b.n	801cdda <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801cbf2:	8a7b      	ldrh	r3, [r7, #18]
 801cbf4:	2b7e      	cmp	r3, #126	; 0x7e
 801cbf6:	d906      	bls.n	801cc06 <etharp_query+0x7e>
 801cbf8:	4b7a      	ldr	r3, [pc, #488]	; (801cde4 <etharp_query+0x25c>)
 801cbfa:	f240 32c1 	movw	r2, #961	; 0x3c1
 801cbfe:	497a      	ldr	r1, [pc, #488]	; (801cde8 <etharp_query+0x260>)
 801cc00:	487a      	ldr	r0, [pc, #488]	; (801cdec <etharp_query+0x264>)
 801cc02:	f002 ffd9 	bl	801fbb8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801cc06:	8a7b      	ldrh	r3, [r7, #18]
 801cc08:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801cc0a:	7c7a      	ldrb	r2, [r7, #17]
 801cc0c:	4978      	ldr	r1, [pc, #480]	; (801cdf0 <etharp_query+0x268>)
 801cc0e:	4613      	mov	r3, r2
 801cc10:	005b      	lsls	r3, r3, #1
 801cc12:	4413      	add	r3, r2
 801cc14:	00db      	lsls	r3, r3, #3
 801cc16:	440b      	add	r3, r1
 801cc18:	3314      	adds	r3, #20
 801cc1a:	781b      	ldrb	r3, [r3, #0]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d115      	bne.n	801cc4c <etharp_query+0xc4>
    is_new_entry = 1;
 801cc20:	2301      	movs	r3, #1
 801cc22:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801cc24:	7c7a      	ldrb	r2, [r7, #17]
 801cc26:	4972      	ldr	r1, [pc, #456]	; (801cdf0 <etharp_query+0x268>)
 801cc28:	4613      	mov	r3, r2
 801cc2a:	005b      	lsls	r3, r3, #1
 801cc2c:	4413      	add	r3, r2
 801cc2e:	00db      	lsls	r3, r3, #3
 801cc30:	440b      	add	r3, r1
 801cc32:	3314      	adds	r3, #20
 801cc34:	2201      	movs	r2, #1
 801cc36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801cc38:	7c7a      	ldrb	r2, [r7, #17]
 801cc3a:	496d      	ldr	r1, [pc, #436]	; (801cdf0 <etharp_query+0x268>)
 801cc3c:	4613      	mov	r3, r2
 801cc3e:	005b      	lsls	r3, r3, #1
 801cc40:	4413      	add	r3, r2
 801cc42:	00db      	lsls	r3, r3, #3
 801cc44:	440b      	add	r3, r1
 801cc46:	3308      	adds	r3, #8
 801cc48:	68fa      	ldr	r2, [r7, #12]
 801cc4a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801cc4c:	7c7a      	ldrb	r2, [r7, #17]
 801cc4e:	4968      	ldr	r1, [pc, #416]	; (801cdf0 <etharp_query+0x268>)
 801cc50:	4613      	mov	r3, r2
 801cc52:	005b      	lsls	r3, r3, #1
 801cc54:	4413      	add	r3, r2
 801cc56:	00db      	lsls	r3, r3, #3
 801cc58:	440b      	add	r3, r1
 801cc5a:	3314      	adds	r3, #20
 801cc5c:	781b      	ldrb	r3, [r3, #0]
 801cc5e:	2b01      	cmp	r3, #1
 801cc60:	d011      	beq.n	801cc86 <etharp_query+0xfe>
 801cc62:	7c7a      	ldrb	r2, [r7, #17]
 801cc64:	4962      	ldr	r1, [pc, #392]	; (801cdf0 <etharp_query+0x268>)
 801cc66:	4613      	mov	r3, r2
 801cc68:	005b      	lsls	r3, r3, #1
 801cc6a:	4413      	add	r3, r2
 801cc6c:	00db      	lsls	r3, r3, #3
 801cc6e:	440b      	add	r3, r1
 801cc70:	3314      	adds	r3, #20
 801cc72:	781b      	ldrb	r3, [r3, #0]
 801cc74:	2b01      	cmp	r3, #1
 801cc76:	d806      	bhi.n	801cc86 <etharp_query+0xfe>
 801cc78:	4b5a      	ldr	r3, [pc, #360]	; (801cde4 <etharp_query+0x25c>)
 801cc7a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801cc7e:	495d      	ldr	r1, [pc, #372]	; (801cdf4 <etharp_query+0x26c>)
 801cc80:	485a      	ldr	r0, [pc, #360]	; (801cdec <etharp_query+0x264>)
 801cc82:	f002 ff99 	bl	801fbb8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801cc86:	6a3b      	ldr	r3, [r7, #32]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d102      	bne.n	801cc92 <etharp_query+0x10a>
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d10c      	bne.n	801ccac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801cc92:	68b9      	ldr	r1, [r7, #8]
 801cc94:	68f8      	ldr	r0, [r7, #12]
 801cc96:	f000 f963 	bl	801cf60 <etharp_request>
 801cc9a:	4603      	mov	r3, r0
 801cc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d102      	bne.n	801ccac <etharp_query+0x124>
      return result;
 801cca6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ccaa:	e096      	b.n	801cdda <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d106      	bne.n	801ccc0 <etharp_query+0x138>
 801ccb2:	4b4c      	ldr	r3, [pc, #304]	; (801cde4 <etharp_query+0x25c>)
 801ccb4:	f240 32e1 	movw	r2, #993	; 0x3e1
 801ccb8:	494f      	ldr	r1, [pc, #316]	; (801cdf8 <etharp_query+0x270>)
 801ccba:	484c      	ldr	r0, [pc, #304]	; (801cdec <etharp_query+0x264>)
 801ccbc:	f002 ff7c 	bl	801fbb8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ccc0:	7c7a      	ldrb	r2, [r7, #17]
 801ccc2:	494b      	ldr	r1, [pc, #300]	; (801cdf0 <etharp_query+0x268>)
 801ccc4:	4613      	mov	r3, r2
 801ccc6:	005b      	lsls	r3, r3, #1
 801ccc8:	4413      	add	r3, r2
 801ccca:	00db      	lsls	r3, r3, #3
 801cccc:	440b      	add	r3, r1
 801ccce:	3314      	adds	r3, #20
 801ccd0:	781b      	ldrb	r3, [r3, #0]
 801ccd2:	2b01      	cmp	r3, #1
 801ccd4:	d917      	bls.n	801cd06 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ccd6:	4a49      	ldr	r2, [pc, #292]	; (801cdfc <etharp_query+0x274>)
 801ccd8:	7c7b      	ldrb	r3, [r7, #17]
 801ccda:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ccdc:	7c7a      	ldrb	r2, [r7, #17]
 801ccde:	4613      	mov	r3, r2
 801cce0:	005b      	lsls	r3, r3, #1
 801cce2:	4413      	add	r3, r2
 801cce4:	00db      	lsls	r3, r3, #3
 801cce6:	3308      	adds	r3, #8
 801cce8:	4a41      	ldr	r2, [pc, #260]	; (801cdf0 <etharp_query+0x268>)
 801ccea:	4413      	add	r3, r2
 801ccec:	3304      	adds	r3, #4
 801ccee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ccf2:	9200      	str	r2, [sp, #0]
 801ccf4:	697a      	ldr	r2, [r7, #20]
 801ccf6:	6879      	ldr	r1, [r7, #4]
 801ccf8:	68f8      	ldr	r0, [r7, #12]
 801ccfa:	f001 fc8d 	bl	801e618 <ethernet_output>
 801ccfe:	4603      	mov	r3, r0
 801cd00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801cd04:	e067      	b.n	801cdd6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cd06:	7c7a      	ldrb	r2, [r7, #17]
 801cd08:	4939      	ldr	r1, [pc, #228]	; (801cdf0 <etharp_query+0x268>)
 801cd0a:	4613      	mov	r3, r2
 801cd0c:	005b      	lsls	r3, r3, #1
 801cd0e:	4413      	add	r3, r2
 801cd10:	00db      	lsls	r3, r3, #3
 801cd12:	440b      	add	r3, r1
 801cd14:	3314      	adds	r3, #20
 801cd16:	781b      	ldrb	r3, [r3, #0]
 801cd18:	2b01      	cmp	r3, #1
 801cd1a:	d15c      	bne.n	801cdd6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cd24:	e01c      	b.n	801cd60 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801cd26:	69fb      	ldr	r3, [r7, #28]
 801cd28:	895a      	ldrh	r2, [r3, #10]
 801cd2a:	69fb      	ldr	r3, [r7, #28]
 801cd2c:	891b      	ldrh	r3, [r3, #8]
 801cd2e:	429a      	cmp	r2, r3
 801cd30:	d10a      	bne.n	801cd48 <etharp_query+0x1c0>
 801cd32:	69fb      	ldr	r3, [r7, #28]
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d006      	beq.n	801cd48 <etharp_query+0x1c0>
 801cd3a:	4b2a      	ldr	r3, [pc, #168]	; (801cde4 <etharp_query+0x25c>)
 801cd3c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801cd40:	492f      	ldr	r1, [pc, #188]	; (801ce00 <etharp_query+0x278>)
 801cd42:	482a      	ldr	r0, [pc, #168]	; (801cdec <etharp_query+0x264>)
 801cd44:	f002 ff38 	bl	801fbb8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801cd48:	69fb      	ldr	r3, [r7, #28]
 801cd4a:	7b1b      	ldrb	r3, [r3, #12]
 801cd4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d002      	beq.n	801cd5a <etharp_query+0x1d2>
        copy_needed = 1;
 801cd54:	2301      	movs	r3, #1
 801cd56:	61bb      	str	r3, [r7, #24]
        break;
 801cd58:	e005      	b.n	801cd66 <etharp_query+0x1de>
      }
      p = p->next;
 801cd5a:	69fb      	ldr	r3, [r7, #28]
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cd60:	69fb      	ldr	r3, [r7, #28]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d1df      	bne.n	801cd26 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801cd66:	69bb      	ldr	r3, [r7, #24]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d007      	beq.n	801cd7c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801cd6c:	687a      	ldr	r2, [r7, #4]
 801cd6e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801cd72:	200e      	movs	r0, #14
 801cd74:	f7f6 fc2e 	bl	80135d4 <pbuf_clone>
 801cd78:	61f8      	str	r0, [r7, #28]
 801cd7a:	e004      	b.n	801cd86 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801cd80:	69f8      	ldr	r0, [r7, #28]
 801cd82:	f7f6 fa55 	bl	8013230 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801cd86:	69fb      	ldr	r3, [r7, #28]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d021      	beq.n	801cdd0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801cd8c:	7c7a      	ldrb	r2, [r7, #17]
 801cd8e:	4918      	ldr	r1, [pc, #96]	; (801cdf0 <etharp_query+0x268>)
 801cd90:	4613      	mov	r3, r2
 801cd92:	005b      	lsls	r3, r3, #1
 801cd94:	4413      	add	r3, r2
 801cd96:	00db      	lsls	r3, r3, #3
 801cd98:	440b      	add	r3, r1
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d00a      	beq.n	801cdb6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801cda0:	7c7a      	ldrb	r2, [r7, #17]
 801cda2:	4913      	ldr	r1, [pc, #76]	; (801cdf0 <etharp_query+0x268>)
 801cda4:	4613      	mov	r3, r2
 801cda6:	005b      	lsls	r3, r3, #1
 801cda8:	4413      	add	r3, r2
 801cdaa:	00db      	lsls	r3, r3, #3
 801cdac:	440b      	add	r3, r1
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f7f6 f997 	bl	80130e4 <pbuf_free>
      }
      arp_table[i].q = p;
 801cdb6:	7c7a      	ldrb	r2, [r7, #17]
 801cdb8:	490d      	ldr	r1, [pc, #52]	; (801cdf0 <etharp_query+0x268>)
 801cdba:	4613      	mov	r3, r2
 801cdbc:	005b      	lsls	r3, r3, #1
 801cdbe:	4413      	add	r3, r2
 801cdc0:	00db      	lsls	r3, r3, #3
 801cdc2:	440b      	add	r3, r1
 801cdc4:	69fa      	ldr	r2, [r7, #28]
 801cdc6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801cdc8:	2300      	movs	r3, #0
 801cdca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801cdce:	e002      	b.n	801cdd6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801cdd0:	23ff      	movs	r3, #255	; 0xff
 801cdd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801cdd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801cdda:	4618      	mov	r0, r3
 801cddc:	3728      	adds	r7, #40	; 0x28
 801cdde:	46bd      	mov	sp, r7
 801cde0:	bd80      	pop	{r7, pc}
 801cde2:	bf00      	nop
 801cde4:	080240fc 	.word	0x080240fc
 801cde8:	080242a8 	.word	0x080242a8
 801cdec:	08024174 	.word	0x08024174
 801cdf0:	20005ff8 	.word	0x20005ff8
 801cdf4:	080242b8 	.word	0x080242b8
 801cdf8:	0802429c 	.word	0x0802429c
 801cdfc:	200060e8 	.word	0x200060e8
 801ce00:	080242e0 	.word	0x080242e0

0801ce04 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ce04:	b580      	push	{r7, lr}
 801ce06:	b08a      	sub	sp, #40	; 0x28
 801ce08:	af02      	add	r7, sp, #8
 801ce0a:	60f8      	str	r0, [r7, #12]
 801ce0c:	60b9      	str	r1, [r7, #8]
 801ce0e:	607a      	str	r2, [r7, #4]
 801ce10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ce12:	2300      	movs	r3, #0
 801ce14:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d106      	bne.n	801ce2a <etharp_raw+0x26>
 801ce1c:	4b3a      	ldr	r3, [pc, #232]	; (801cf08 <etharp_raw+0x104>)
 801ce1e:	f240 4257 	movw	r2, #1111	; 0x457
 801ce22:	493a      	ldr	r1, [pc, #232]	; (801cf0c <etharp_raw+0x108>)
 801ce24:	483a      	ldr	r0, [pc, #232]	; (801cf10 <etharp_raw+0x10c>)
 801ce26:	f002 fec7 	bl	801fbb8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ce2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ce2e:	211c      	movs	r1, #28
 801ce30:	200e      	movs	r0, #14
 801ce32:	f7f5 fe73 	bl	8012b1c <pbuf_alloc>
 801ce36:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ce38:	69bb      	ldr	r3, [r7, #24]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d102      	bne.n	801ce44 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ce3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ce42:	e05d      	b.n	801cf00 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ce44:	69bb      	ldr	r3, [r7, #24]
 801ce46:	895b      	ldrh	r3, [r3, #10]
 801ce48:	2b1b      	cmp	r3, #27
 801ce4a:	d806      	bhi.n	801ce5a <etharp_raw+0x56>
 801ce4c:	4b2e      	ldr	r3, [pc, #184]	; (801cf08 <etharp_raw+0x104>)
 801ce4e:	f240 4262 	movw	r2, #1122	; 0x462
 801ce52:	4930      	ldr	r1, [pc, #192]	; (801cf14 <etharp_raw+0x110>)
 801ce54:	482e      	ldr	r0, [pc, #184]	; (801cf10 <etharp_raw+0x10c>)
 801ce56:	f002 feaf 	bl	801fbb8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ce5a:	69bb      	ldr	r3, [r7, #24]
 801ce5c:	685b      	ldr	r3, [r3, #4]
 801ce5e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ce60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ce62:	4618      	mov	r0, r3
 801ce64:	f7f4 fd86 	bl	8011974 <lwip_htons>
 801ce68:	4603      	mov	r3, r0
 801ce6a:	461a      	mov	r2, r3
 801ce6c:	697b      	ldr	r3, [r7, #20]
 801ce6e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ce76:	2b06      	cmp	r3, #6
 801ce78:	d006      	beq.n	801ce88 <etharp_raw+0x84>
 801ce7a:	4b23      	ldr	r3, [pc, #140]	; (801cf08 <etharp_raw+0x104>)
 801ce7c:	f240 4269 	movw	r2, #1129	; 0x469
 801ce80:	4925      	ldr	r1, [pc, #148]	; (801cf18 <etharp_raw+0x114>)
 801ce82:	4823      	ldr	r0, [pc, #140]	; (801cf10 <etharp_raw+0x10c>)
 801ce84:	f002 fe98 	bl	801fbb8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801ce88:	697b      	ldr	r3, [r7, #20]
 801ce8a:	3308      	adds	r3, #8
 801ce8c:	2206      	movs	r2, #6
 801ce8e:	6839      	ldr	r1, [r7, #0]
 801ce90:	4618      	mov	r0, r3
 801ce92:	f002 fe20 	bl	801fad6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ce96:	697b      	ldr	r3, [r7, #20]
 801ce98:	3312      	adds	r3, #18
 801ce9a:	2206      	movs	r2, #6
 801ce9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f002 fe19 	bl	801fad6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801cea4:	697b      	ldr	r3, [r7, #20]
 801cea6:	330e      	adds	r3, #14
 801cea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ceaa:	6812      	ldr	r2, [r2, #0]
 801ceac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801ceae:	697b      	ldr	r3, [r7, #20]
 801ceb0:	3318      	adds	r3, #24
 801ceb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ceb4:	6812      	ldr	r2, [r2, #0]
 801ceb6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ceb8:	697b      	ldr	r3, [r7, #20]
 801ceba:	2200      	movs	r2, #0
 801cebc:	701a      	strb	r2, [r3, #0]
 801cebe:	2200      	movs	r2, #0
 801cec0:	f042 0201 	orr.w	r2, r2, #1
 801cec4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801cec6:	697b      	ldr	r3, [r7, #20]
 801cec8:	2200      	movs	r2, #0
 801ceca:	f042 0208 	orr.w	r2, r2, #8
 801cece:	709a      	strb	r2, [r3, #2]
 801ced0:	2200      	movs	r2, #0
 801ced2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ced4:	697b      	ldr	r3, [r7, #20]
 801ced6:	2206      	movs	r2, #6
 801ced8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ceda:	697b      	ldr	r3, [r7, #20]
 801cedc:	2204      	movs	r2, #4
 801cede:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801cee0:	f640 0306 	movw	r3, #2054	; 0x806
 801cee4:	9300      	str	r3, [sp, #0]
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	68ba      	ldr	r2, [r7, #8]
 801ceea:	69b9      	ldr	r1, [r7, #24]
 801ceec:	68f8      	ldr	r0, [r7, #12]
 801ceee:	f001 fb93 	bl	801e618 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801cef2:	69b8      	ldr	r0, [r7, #24]
 801cef4:	f7f6 f8f6 	bl	80130e4 <pbuf_free>
  p = NULL;
 801cef8:	2300      	movs	r3, #0
 801cefa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801cefc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cf00:	4618      	mov	r0, r3
 801cf02:	3720      	adds	r7, #32
 801cf04:	46bd      	mov	sp, r7
 801cf06:	bd80      	pop	{r7, pc}
 801cf08:	080240fc 	.word	0x080240fc
 801cf0c:	0802424c 	.word	0x0802424c
 801cf10:	08024174 	.word	0x08024174
 801cf14:	080242fc 	.word	0x080242fc
 801cf18:	08024330 	.word	0x08024330

0801cf1c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801cf1c:	b580      	push	{r7, lr}
 801cf1e:	b088      	sub	sp, #32
 801cf20:	af04      	add	r7, sp, #16
 801cf22:	60f8      	str	r0, [r7, #12]
 801cf24:	60b9      	str	r1, [r7, #8]
 801cf26:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801cf34:	68fb      	ldr	r3, [r7, #12]
 801cf36:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801cf38:	2201      	movs	r2, #1
 801cf3a:	9203      	str	r2, [sp, #12]
 801cf3c:	68ba      	ldr	r2, [r7, #8]
 801cf3e:	9202      	str	r2, [sp, #8]
 801cf40:	4a06      	ldr	r2, [pc, #24]	; (801cf5c <etharp_request_dst+0x40>)
 801cf42:	9201      	str	r2, [sp, #4]
 801cf44:	9300      	str	r3, [sp, #0]
 801cf46:	4603      	mov	r3, r0
 801cf48:	687a      	ldr	r2, [r7, #4]
 801cf4a:	68f8      	ldr	r0, [r7, #12]
 801cf4c:	f7ff ff5a 	bl	801ce04 <etharp_raw>
 801cf50:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	3710      	adds	r7, #16
 801cf56:	46bd      	mov	sp, r7
 801cf58:	bd80      	pop	{r7, pc}
 801cf5a:	bf00      	nop
 801cf5c:	08024a58 	.word	0x08024a58

0801cf60 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b082      	sub	sp, #8
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
 801cf68:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801cf6a:	4a05      	ldr	r2, [pc, #20]	; (801cf80 <etharp_request+0x20>)
 801cf6c:	6839      	ldr	r1, [r7, #0]
 801cf6e:	6878      	ldr	r0, [r7, #4]
 801cf70:	f7ff ffd4 	bl	801cf1c <etharp_request_dst>
 801cf74:	4603      	mov	r3, r0
}
 801cf76:	4618      	mov	r0, r3
 801cf78:	3708      	adds	r7, #8
 801cf7a:	46bd      	mov	sp, r7
 801cf7c:	bd80      	pop	{r7, pc}
 801cf7e:	bf00      	nop
 801cf80:	08024a50 	.word	0x08024a50

0801cf84 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b08e      	sub	sp, #56	; 0x38
 801cf88:	af04      	add	r7, sp, #16
 801cf8a:	6078      	str	r0, [r7, #4]
 801cf8c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801cf8e:	4b79      	ldr	r3, [pc, #484]	; (801d174 <icmp_input+0x1f0>)
 801cf90:	689b      	ldr	r3, [r3, #8]
 801cf92:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf96:	781b      	ldrb	r3, [r3, #0]
 801cf98:	f003 030f 	and.w	r3, r3, #15
 801cf9c:	b2db      	uxtb	r3, r3
 801cf9e:	009b      	lsls	r3, r3, #2
 801cfa0:	b2db      	uxtb	r3, r3
 801cfa2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801cfa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cfa6:	2b13      	cmp	r3, #19
 801cfa8:	f240 80cd 	bls.w	801d146 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	895b      	ldrh	r3, [r3, #10]
 801cfb0:	2b03      	cmp	r3, #3
 801cfb2:	f240 80ca 	bls.w	801d14a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	685b      	ldr	r3, [r3, #4]
 801cfba:	781b      	ldrb	r3, [r3, #0]
 801cfbc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801cfc0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	f000 80b7 	beq.w	801d138 <icmp_input+0x1b4>
 801cfca:	2b08      	cmp	r3, #8
 801cfcc:	f040 80b7 	bne.w	801d13e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801cfd0:	4b69      	ldr	r3, [pc, #420]	; (801d178 <icmp_input+0x1f4>)
 801cfd2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cfd4:	4b67      	ldr	r3, [pc, #412]	; (801d174 <icmp_input+0x1f0>)
 801cfd6:	695b      	ldr	r3, [r3, #20]
 801cfd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cfdc:	2be0      	cmp	r3, #224	; 0xe0
 801cfde:	f000 80bb 	beq.w	801d158 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801cfe2:	4b64      	ldr	r3, [pc, #400]	; (801d174 <icmp_input+0x1f0>)
 801cfe4:	695b      	ldr	r3, [r3, #20]
 801cfe6:	4a63      	ldr	r2, [pc, #396]	; (801d174 <icmp_input+0x1f0>)
 801cfe8:	6812      	ldr	r2, [r2, #0]
 801cfea:	4611      	mov	r1, r2
 801cfec:	4618      	mov	r0, r3
 801cfee:	f000 fc0b 	bl	801d808 <ip4_addr_isbroadcast_u32>
 801cff2:	4603      	mov	r3, r0
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	f040 80b1 	bne.w	801d15c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	891b      	ldrh	r3, [r3, #8]
 801cffe:	2b07      	cmp	r3, #7
 801d000:	f240 80a5 	bls.w	801d14e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d006:	330e      	adds	r3, #14
 801d008:	4619      	mov	r1, r3
 801d00a:	6878      	ldr	r0, [r7, #4]
 801d00c:	f7f5 ffd4 	bl	8012fb8 <pbuf_add_header>
 801d010:	4603      	mov	r3, r0
 801d012:	2b00      	cmp	r3, #0
 801d014:	d04b      	beq.n	801d0ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	891a      	ldrh	r2, [r3, #8]
 801d01a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d01c:	4413      	add	r3, r2
 801d01e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	891b      	ldrh	r3, [r3, #8]
 801d024:	8b7a      	ldrh	r2, [r7, #26]
 801d026:	429a      	cmp	r2, r3
 801d028:	f0c0 809a 	bcc.w	801d160 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d02c:	8b7b      	ldrh	r3, [r7, #26]
 801d02e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d032:	4619      	mov	r1, r3
 801d034:	200e      	movs	r0, #14
 801d036:	f7f5 fd71 	bl	8012b1c <pbuf_alloc>
 801d03a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d03c:	697b      	ldr	r3, [r7, #20]
 801d03e:	2b00      	cmp	r3, #0
 801d040:	f000 8090 	beq.w	801d164 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d044:	697b      	ldr	r3, [r7, #20]
 801d046:	895b      	ldrh	r3, [r3, #10]
 801d048:	461a      	mov	r2, r3
 801d04a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d04c:	3308      	adds	r3, #8
 801d04e:	429a      	cmp	r2, r3
 801d050:	d203      	bcs.n	801d05a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801d052:	6978      	ldr	r0, [r7, #20]
 801d054:	f7f6 f846 	bl	80130e4 <pbuf_free>
          goto icmperr;
 801d058:	e085      	b.n	801d166 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d05a:	697b      	ldr	r3, [r7, #20]
 801d05c:	685b      	ldr	r3, [r3, #4]
 801d05e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d062:	4618      	mov	r0, r3
 801d064:	f002 fd37 	bl	801fad6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d06a:	4619      	mov	r1, r3
 801d06c:	6978      	ldr	r0, [r7, #20]
 801d06e:	f7f5 ffb3 	bl	8012fd8 <pbuf_remove_header>
 801d072:	4603      	mov	r3, r0
 801d074:	2b00      	cmp	r3, #0
 801d076:	d009      	beq.n	801d08c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d078:	4b40      	ldr	r3, [pc, #256]	; (801d17c <icmp_input+0x1f8>)
 801d07a:	22b6      	movs	r2, #182	; 0xb6
 801d07c:	4940      	ldr	r1, [pc, #256]	; (801d180 <icmp_input+0x1fc>)
 801d07e:	4841      	ldr	r0, [pc, #260]	; (801d184 <icmp_input+0x200>)
 801d080:	f002 fd9a 	bl	801fbb8 <iprintf>
          pbuf_free(r);
 801d084:	6978      	ldr	r0, [r7, #20]
 801d086:	f7f6 f82d 	bl	80130e4 <pbuf_free>
          goto icmperr;
 801d08a:	e06c      	b.n	801d166 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d08c:	6879      	ldr	r1, [r7, #4]
 801d08e:	6978      	ldr	r0, [r7, #20]
 801d090:	f7f6 f95c 	bl	801334c <pbuf_copy>
 801d094:	4603      	mov	r3, r0
 801d096:	2b00      	cmp	r3, #0
 801d098:	d003      	beq.n	801d0a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801d09a:	6978      	ldr	r0, [r7, #20]
 801d09c:	f7f6 f822 	bl	80130e4 <pbuf_free>
          goto icmperr;
 801d0a0:	e061      	b.n	801d166 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801d0a2:	6878      	ldr	r0, [r7, #4]
 801d0a4:	f7f6 f81e 	bl	80130e4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d0a8:	697b      	ldr	r3, [r7, #20]
 801d0aa:	607b      	str	r3, [r7, #4]
 801d0ac:	e00f      	b.n	801d0ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d0ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d0b0:	330e      	adds	r3, #14
 801d0b2:	4619      	mov	r1, r3
 801d0b4:	6878      	ldr	r0, [r7, #4]
 801d0b6:	f7f5 ff8f 	bl	8012fd8 <pbuf_remove_header>
 801d0ba:	4603      	mov	r3, r0
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d006      	beq.n	801d0ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d0c0:	4b2e      	ldr	r3, [pc, #184]	; (801d17c <icmp_input+0x1f8>)
 801d0c2:	22c7      	movs	r2, #199	; 0xc7
 801d0c4:	4930      	ldr	r1, [pc, #192]	; (801d188 <icmp_input+0x204>)
 801d0c6:	482f      	ldr	r0, [pc, #188]	; (801d184 <icmp_input+0x200>)
 801d0c8:	f002 fd76 	bl	801fbb8 <iprintf>
          goto icmperr;
 801d0cc:	e04b      	b.n	801d166 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	685b      	ldr	r3, [r3, #4]
 801d0d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d0d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d0d6:	4619      	mov	r1, r3
 801d0d8:	6878      	ldr	r0, [r7, #4]
 801d0da:	f7f5 ff6d 	bl	8012fb8 <pbuf_add_header>
 801d0de:	4603      	mov	r3, r0
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d12b      	bne.n	801d13c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	685b      	ldr	r3, [r3, #4]
 801d0e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d0ea:	69fb      	ldr	r3, [r7, #28]
 801d0ec:	681a      	ldr	r2, [r3, #0]
 801d0ee:	68fb      	ldr	r3, [r7, #12]
 801d0f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d0f2:	4b20      	ldr	r3, [pc, #128]	; (801d174 <icmp_input+0x1f0>)
 801d0f4:	691a      	ldr	r2, [r3, #16]
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d0fa:	693b      	ldr	r3, [r7, #16]
 801d0fc:	2200      	movs	r2, #0
 801d0fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d100:	693b      	ldr	r3, [r7, #16]
 801d102:	2200      	movs	r2, #0
 801d104:	709a      	strb	r2, [r3, #2]
 801d106:	2200      	movs	r2, #0
 801d108:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	22ff      	movs	r2, #255	; 0xff
 801d10e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	2200      	movs	r2, #0
 801d114:	729a      	strb	r2, [r3, #10]
 801d116:	2200      	movs	r2, #0
 801d118:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d11a:	683b      	ldr	r3, [r7, #0]
 801d11c:	9302      	str	r3, [sp, #8]
 801d11e:	2301      	movs	r3, #1
 801d120:	9301      	str	r3, [sp, #4]
 801d122:	2300      	movs	r3, #0
 801d124:	9300      	str	r3, [sp, #0]
 801d126:	23ff      	movs	r3, #255	; 0xff
 801d128:	2200      	movs	r2, #0
 801d12a:	69f9      	ldr	r1, [r7, #28]
 801d12c:	6878      	ldr	r0, [r7, #4]
 801d12e:	f000 fa93 	bl	801d658 <ip4_output_if>
 801d132:	4603      	mov	r3, r0
 801d134:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d136:	e001      	b.n	801d13c <icmp_input+0x1b8>
      break;
 801d138:	bf00      	nop
 801d13a:	e000      	b.n	801d13e <icmp_input+0x1ba>
      break;
 801d13c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801d13e:	6878      	ldr	r0, [r7, #4]
 801d140:	f7f5 ffd0 	bl	80130e4 <pbuf_free>
  return;
 801d144:	e013      	b.n	801d16e <icmp_input+0x1ea>
    goto lenerr;
 801d146:	bf00      	nop
 801d148:	e002      	b.n	801d150 <icmp_input+0x1cc>
    goto lenerr;
 801d14a:	bf00      	nop
 801d14c:	e000      	b.n	801d150 <icmp_input+0x1cc>
        goto lenerr;
 801d14e:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d150:	6878      	ldr	r0, [r7, #4]
 801d152:	f7f5 ffc7 	bl	80130e4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d156:	e00a      	b.n	801d16e <icmp_input+0x1ea>
        goto icmperr;
 801d158:	bf00      	nop
 801d15a:	e004      	b.n	801d166 <icmp_input+0x1e2>
        goto icmperr;
 801d15c:	bf00      	nop
 801d15e:	e002      	b.n	801d166 <icmp_input+0x1e2>
          goto icmperr;
 801d160:	bf00      	nop
 801d162:	e000      	b.n	801d166 <icmp_input+0x1e2>
          goto icmperr;
 801d164:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d166:	6878      	ldr	r0, [r7, #4]
 801d168:	f7f5 ffbc 	bl	80130e4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d16c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d16e:	3728      	adds	r7, #40	; 0x28
 801d170:	46bd      	mov	sp, r7
 801d172:	bd80      	pop	{r7, pc}
 801d174:	2000b2c0 	.word	0x2000b2c0
 801d178:	2000b2d4 	.word	0x2000b2d4
 801d17c:	08024374 	.word	0x08024374
 801d180:	080243ac 	.word	0x080243ac
 801d184:	080243e4 	.word	0x080243e4
 801d188:	0802440c 	.word	0x0802440c

0801d18c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d18c:	b580      	push	{r7, lr}
 801d18e:	b082      	sub	sp, #8
 801d190:	af00      	add	r7, sp, #0
 801d192:	6078      	str	r0, [r7, #4]
 801d194:	460b      	mov	r3, r1
 801d196:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d198:	78fb      	ldrb	r3, [r7, #3]
 801d19a:	461a      	mov	r2, r3
 801d19c:	2103      	movs	r1, #3
 801d19e:	6878      	ldr	r0, [r7, #4]
 801d1a0:	f000 f814 	bl	801d1cc <icmp_send_response>
}
 801d1a4:	bf00      	nop
 801d1a6:	3708      	adds	r7, #8
 801d1a8:	46bd      	mov	sp, r7
 801d1aa:	bd80      	pop	{r7, pc}

0801d1ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d1ac:	b580      	push	{r7, lr}
 801d1ae:	b082      	sub	sp, #8
 801d1b0:	af00      	add	r7, sp, #0
 801d1b2:	6078      	str	r0, [r7, #4]
 801d1b4:	460b      	mov	r3, r1
 801d1b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d1b8:	78fb      	ldrb	r3, [r7, #3]
 801d1ba:	461a      	mov	r2, r3
 801d1bc:	210b      	movs	r1, #11
 801d1be:	6878      	ldr	r0, [r7, #4]
 801d1c0:	f000 f804 	bl	801d1cc <icmp_send_response>
}
 801d1c4:	bf00      	nop
 801d1c6:	3708      	adds	r7, #8
 801d1c8:	46bd      	mov	sp, r7
 801d1ca:	bd80      	pop	{r7, pc}

0801d1cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d1cc:	b580      	push	{r7, lr}
 801d1ce:	b08c      	sub	sp, #48	; 0x30
 801d1d0:	af04      	add	r7, sp, #16
 801d1d2:	6078      	str	r0, [r7, #4]
 801d1d4:	460b      	mov	r3, r1
 801d1d6:	70fb      	strb	r3, [r7, #3]
 801d1d8:	4613      	mov	r3, r2
 801d1da:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d1dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d1e0:	2124      	movs	r1, #36	; 0x24
 801d1e2:	2022      	movs	r0, #34	; 0x22
 801d1e4:	f7f5 fc9a 	bl	8012b1c <pbuf_alloc>
 801d1e8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d1ea:	69fb      	ldr	r3, [r7, #28]
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d04c      	beq.n	801d28a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d1f0:	69fb      	ldr	r3, [r7, #28]
 801d1f2:	895b      	ldrh	r3, [r3, #10]
 801d1f4:	2b23      	cmp	r3, #35	; 0x23
 801d1f6:	d806      	bhi.n	801d206 <icmp_send_response+0x3a>
 801d1f8:	4b26      	ldr	r3, [pc, #152]	; (801d294 <icmp_send_response+0xc8>)
 801d1fa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801d1fe:	4926      	ldr	r1, [pc, #152]	; (801d298 <icmp_send_response+0xcc>)
 801d200:	4826      	ldr	r0, [pc, #152]	; (801d29c <icmp_send_response+0xd0>)
 801d202:	f002 fcd9 	bl	801fbb8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	685b      	ldr	r3, [r3, #4]
 801d20a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d20c:	69fb      	ldr	r3, [r7, #28]
 801d20e:	685b      	ldr	r3, [r3, #4]
 801d210:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d212:	697b      	ldr	r3, [r7, #20]
 801d214:	78fa      	ldrb	r2, [r7, #3]
 801d216:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d218:	697b      	ldr	r3, [r7, #20]
 801d21a:	78ba      	ldrb	r2, [r7, #2]
 801d21c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d21e:	697b      	ldr	r3, [r7, #20]
 801d220:	2200      	movs	r2, #0
 801d222:	711a      	strb	r2, [r3, #4]
 801d224:	2200      	movs	r2, #0
 801d226:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d228:	697b      	ldr	r3, [r7, #20]
 801d22a:	2200      	movs	r2, #0
 801d22c:	719a      	strb	r2, [r3, #6]
 801d22e:	2200      	movs	r2, #0
 801d230:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d232:	69fb      	ldr	r3, [r7, #28]
 801d234:	685b      	ldr	r3, [r3, #4]
 801d236:	f103 0008 	add.w	r0, r3, #8
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	685b      	ldr	r3, [r3, #4]
 801d23e:	221c      	movs	r2, #28
 801d240:	4619      	mov	r1, r3
 801d242:	f002 fc48 	bl	801fad6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d246:	69bb      	ldr	r3, [r7, #24]
 801d248:	68db      	ldr	r3, [r3, #12]
 801d24a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d24c:	f107 030c 	add.w	r3, r7, #12
 801d250:	4618      	mov	r0, r3
 801d252:	f000 f825 	bl	801d2a0 <ip4_route>
 801d256:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d258:	693b      	ldr	r3, [r7, #16]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d011      	beq.n	801d282 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d25e:	697b      	ldr	r3, [r7, #20]
 801d260:	2200      	movs	r2, #0
 801d262:	709a      	strb	r2, [r3, #2]
 801d264:	2200      	movs	r2, #0
 801d266:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d268:	f107 020c 	add.w	r2, r7, #12
 801d26c:	693b      	ldr	r3, [r7, #16]
 801d26e:	9302      	str	r3, [sp, #8]
 801d270:	2301      	movs	r3, #1
 801d272:	9301      	str	r3, [sp, #4]
 801d274:	2300      	movs	r3, #0
 801d276:	9300      	str	r3, [sp, #0]
 801d278:	23ff      	movs	r3, #255	; 0xff
 801d27a:	2100      	movs	r1, #0
 801d27c:	69f8      	ldr	r0, [r7, #28]
 801d27e:	f000 f9eb 	bl	801d658 <ip4_output_if>
  }
  pbuf_free(q);
 801d282:	69f8      	ldr	r0, [r7, #28]
 801d284:	f7f5 ff2e 	bl	80130e4 <pbuf_free>
 801d288:	e000      	b.n	801d28c <icmp_send_response+0xc0>
    return;
 801d28a:	bf00      	nop
}
 801d28c:	3720      	adds	r7, #32
 801d28e:	46bd      	mov	sp, r7
 801d290:	bd80      	pop	{r7, pc}
 801d292:	bf00      	nop
 801d294:	08024374 	.word	0x08024374
 801d298:	08024440 	.word	0x08024440
 801d29c:	080243e4 	.word	0x080243e4

0801d2a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d2a0:	b480      	push	{r7}
 801d2a2:	b085      	sub	sp, #20
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d2a8:	4b33      	ldr	r3, [pc, #204]	; (801d378 <ip4_route+0xd8>)
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	60fb      	str	r3, [r7, #12]
 801d2ae:	e036      	b.n	801d31e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d2b6:	f003 0301 	and.w	r3, r3, #1
 801d2ba:	b2db      	uxtb	r3, r3
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d02b      	beq.n	801d318 <ip4_route+0x78>
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d2c6:	089b      	lsrs	r3, r3, #2
 801d2c8:	f003 0301 	and.w	r3, r3, #1
 801d2cc:	b2db      	uxtb	r3, r3
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d022      	beq.n	801d318 <ip4_route+0x78>
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	3304      	adds	r3, #4
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	d01d      	beq.n	801d318 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	681a      	ldr	r2, [r3, #0]
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	3304      	adds	r3, #4
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	405a      	eors	r2, r3
 801d2e8:	68fb      	ldr	r3, [r7, #12]
 801d2ea:	3308      	adds	r3, #8
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	4013      	ands	r3, r2
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d101      	bne.n	801d2f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	e038      	b.n	801d36a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d2fe:	f003 0302 	and.w	r3, r3, #2
 801d302:	2b00      	cmp	r3, #0
 801d304:	d108      	bne.n	801d318 <ip4_route+0x78>
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	681a      	ldr	r2, [r3, #0]
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	330c      	adds	r3, #12
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	429a      	cmp	r2, r3
 801d312:	d101      	bne.n	801d318 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	e028      	b.n	801d36a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	60fb      	str	r3, [r7, #12]
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	2b00      	cmp	r3, #0
 801d322:	d1c5      	bne.n	801d2b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d324:	4b15      	ldr	r3, [pc, #84]	; (801d37c <ip4_route+0xdc>)
 801d326:	681b      	ldr	r3, [r3, #0]
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d01a      	beq.n	801d362 <ip4_route+0xc2>
 801d32c:	4b13      	ldr	r3, [pc, #76]	; (801d37c <ip4_route+0xdc>)
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d334:	f003 0301 	and.w	r3, r3, #1
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d012      	beq.n	801d362 <ip4_route+0xc2>
 801d33c:	4b0f      	ldr	r3, [pc, #60]	; (801d37c <ip4_route+0xdc>)
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d344:	f003 0304 	and.w	r3, r3, #4
 801d348:	2b00      	cmp	r3, #0
 801d34a:	d00a      	beq.n	801d362 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d34c:	4b0b      	ldr	r3, [pc, #44]	; (801d37c <ip4_route+0xdc>)
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	3304      	adds	r3, #4
 801d352:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d354:	2b00      	cmp	r3, #0
 801d356:	d004      	beq.n	801d362 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	b2db      	uxtb	r3, r3
 801d35e:	2b7f      	cmp	r3, #127	; 0x7f
 801d360:	d101      	bne.n	801d366 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d362:	2300      	movs	r3, #0
 801d364:	e001      	b.n	801d36a <ip4_route+0xca>
  }

  return netif_default;
 801d366:	4b05      	ldr	r3, [pc, #20]	; (801d37c <ip4_route+0xdc>)
 801d368:	681b      	ldr	r3, [r3, #0]
}
 801d36a:	4618      	mov	r0, r3
 801d36c:	3714      	adds	r7, #20
 801d36e:	46bd      	mov	sp, r7
 801d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d374:	4770      	bx	lr
 801d376:	bf00      	nop
 801d378:	2000e9e4 	.word	0x2000e9e4
 801d37c:	2000e9e8 	.word	0x2000e9e8

0801d380 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d380:	b580      	push	{r7, lr}
 801d382:	b082      	sub	sp, #8
 801d384:	af00      	add	r7, sp, #0
 801d386:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d38e:	f003 0301 	and.w	r3, r3, #1
 801d392:	b2db      	uxtb	r3, r3
 801d394:	2b00      	cmp	r3, #0
 801d396:	d016      	beq.n	801d3c6 <ip4_input_accept+0x46>
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	3304      	adds	r3, #4
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d011      	beq.n	801d3c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d3a2:	4b0b      	ldr	r3, [pc, #44]	; (801d3d0 <ip4_input_accept+0x50>)
 801d3a4:	695a      	ldr	r2, [r3, #20]
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	3304      	adds	r3, #4
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	429a      	cmp	r2, r3
 801d3ae:	d008      	beq.n	801d3c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d3b0:	4b07      	ldr	r3, [pc, #28]	; (801d3d0 <ip4_input_accept+0x50>)
 801d3b2:	695b      	ldr	r3, [r3, #20]
 801d3b4:	6879      	ldr	r1, [r7, #4]
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f000 fa26 	bl	801d808 <ip4_addr_isbroadcast_u32>
 801d3bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d001      	beq.n	801d3c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d3c2:	2301      	movs	r3, #1
 801d3c4:	e000      	b.n	801d3c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d3c6:	2300      	movs	r3, #0
}
 801d3c8:	4618      	mov	r0, r3
 801d3ca:	3708      	adds	r7, #8
 801d3cc:	46bd      	mov	sp, r7
 801d3ce:	bd80      	pop	{r7, pc}
 801d3d0:	2000b2c0 	.word	0x2000b2c0

0801d3d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d3d4:	b580      	push	{r7, lr}
 801d3d6:	b088      	sub	sp, #32
 801d3d8:	af00      	add	r7, sp, #0
 801d3da:	6078      	str	r0, [r7, #4]
 801d3dc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801d3de:	2301      	movs	r3, #1
 801d3e0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	685b      	ldr	r3, [r3, #4]
 801d3e6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801d3e8:	69fb      	ldr	r3, [r7, #28]
 801d3ea:	781b      	ldrb	r3, [r3, #0]
 801d3ec:	091b      	lsrs	r3, r3, #4
 801d3ee:	b2db      	uxtb	r3, r3
 801d3f0:	2b04      	cmp	r3, #4
 801d3f2:	d004      	beq.n	801d3fe <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d3f4:	6878      	ldr	r0, [r7, #4]
 801d3f6:	f7f5 fe75 	bl	80130e4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	e123      	b.n	801d646 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d3fe:	69fb      	ldr	r3, [r7, #28]
 801d400:	781b      	ldrb	r3, [r3, #0]
 801d402:	f003 030f 	and.w	r3, r3, #15
 801d406:	b2db      	uxtb	r3, r3
 801d408:	009b      	lsls	r3, r3, #2
 801d40a:	b2db      	uxtb	r3, r3
 801d40c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d40e:	69fb      	ldr	r3, [r7, #28]
 801d410:	885b      	ldrh	r3, [r3, #2]
 801d412:	b29b      	uxth	r3, r3
 801d414:	4618      	mov	r0, r3
 801d416:	f7f4 faad 	bl	8011974 <lwip_htons>
 801d41a:	4603      	mov	r3, r0
 801d41c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	891b      	ldrh	r3, [r3, #8]
 801d422:	8a3a      	ldrh	r2, [r7, #16]
 801d424:	429a      	cmp	r2, r3
 801d426:	d204      	bcs.n	801d432 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801d428:	8a3b      	ldrh	r3, [r7, #16]
 801d42a:	4619      	mov	r1, r3
 801d42c:	6878      	ldr	r0, [r7, #4]
 801d42e:	f7f5 fcd3 	bl	8012dd8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	895b      	ldrh	r3, [r3, #10]
 801d436:	8a7a      	ldrh	r2, [r7, #18]
 801d438:	429a      	cmp	r2, r3
 801d43a:	d807      	bhi.n	801d44c <ip4_input+0x78>
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	891b      	ldrh	r3, [r3, #8]
 801d440:	8a3a      	ldrh	r2, [r7, #16]
 801d442:	429a      	cmp	r2, r3
 801d444:	d802      	bhi.n	801d44c <ip4_input+0x78>
 801d446:	8a7b      	ldrh	r3, [r7, #18]
 801d448:	2b13      	cmp	r3, #19
 801d44a:	d804      	bhi.n	801d456 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d44c:	6878      	ldr	r0, [r7, #4]
 801d44e:	f7f5 fe49 	bl	80130e4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d452:	2300      	movs	r3, #0
 801d454:	e0f7      	b.n	801d646 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d456:	69fb      	ldr	r3, [r7, #28]
 801d458:	691b      	ldr	r3, [r3, #16]
 801d45a:	4a7d      	ldr	r2, [pc, #500]	; (801d650 <ip4_input+0x27c>)
 801d45c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d45e:	69fb      	ldr	r3, [r7, #28]
 801d460:	68db      	ldr	r3, [r3, #12]
 801d462:	4a7b      	ldr	r2, [pc, #492]	; (801d650 <ip4_input+0x27c>)
 801d464:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d466:	4b7a      	ldr	r3, [pc, #488]	; (801d650 <ip4_input+0x27c>)
 801d468:	695b      	ldr	r3, [r3, #20]
 801d46a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d46e:	2be0      	cmp	r3, #224	; 0xe0
 801d470:	d112      	bne.n	801d498 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d472:	683b      	ldr	r3, [r7, #0]
 801d474:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d478:	f003 0301 	and.w	r3, r3, #1
 801d47c:	b2db      	uxtb	r3, r3
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d007      	beq.n	801d492 <ip4_input+0xbe>
 801d482:	683b      	ldr	r3, [r7, #0]
 801d484:	3304      	adds	r3, #4
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d002      	beq.n	801d492 <ip4_input+0xbe>
      netif = inp;
 801d48c:	683b      	ldr	r3, [r7, #0]
 801d48e:	61bb      	str	r3, [r7, #24]
 801d490:	e02a      	b.n	801d4e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801d492:	2300      	movs	r3, #0
 801d494:	61bb      	str	r3, [r7, #24]
 801d496:	e027      	b.n	801d4e8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d498:	6838      	ldr	r0, [r7, #0]
 801d49a:	f7ff ff71 	bl	801d380 <ip4_input_accept>
 801d49e:	4603      	mov	r3, r0
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d002      	beq.n	801d4aa <ip4_input+0xd6>
      netif = inp;
 801d4a4:	683b      	ldr	r3, [r7, #0]
 801d4a6:	61bb      	str	r3, [r7, #24]
 801d4a8:	e01e      	b.n	801d4e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801d4aa:	2300      	movs	r3, #0
 801d4ac:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d4ae:	4b68      	ldr	r3, [pc, #416]	; (801d650 <ip4_input+0x27c>)
 801d4b0:	695b      	ldr	r3, [r3, #20]
 801d4b2:	b2db      	uxtb	r3, r3
 801d4b4:	2b7f      	cmp	r3, #127	; 0x7f
 801d4b6:	d017      	beq.n	801d4e8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d4b8:	4b66      	ldr	r3, [pc, #408]	; (801d654 <ip4_input+0x280>)
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	61bb      	str	r3, [r7, #24]
 801d4be:	e00e      	b.n	801d4de <ip4_input+0x10a>
          if (netif == inp) {
 801d4c0:	69ba      	ldr	r2, [r7, #24]
 801d4c2:	683b      	ldr	r3, [r7, #0]
 801d4c4:	429a      	cmp	r2, r3
 801d4c6:	d006      	beq.n	801d4d6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d4c8:	69b8      	ldr	r0, [r7, #24]
 801d4ca:	f7ff ff59 	bl	801d380 <ip4_input_accept>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d108      	bne.n	801d4e6 <ip4_input+0x112>
 801d4d4:	e000      	b.n	801d4d8 <ip4_input+0x104>
            continue;
 801d4d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d4d8:	69bb      	ldr	r3, [r7, #24]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	61bb      	str	r3, [r7, #24]
 801d4de:	69bb      	ldr	r3, [r7, #24]
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d1ed      	bne.n	801d4c0 <ip4_input+0xec>
 801d4e4:	e000      	b.n	801d4e8 <ip4_input+0x114>
            break;
 801d4e6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801d4e8:	69bb      	ldr	r3, [r7, #24]
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d111      	bne.n	801d512 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801d4ee:	69fb      	ldr	r3, [r7, #28]
 801d4f0:	7a5b      	ldrb	r3, [r3, #9]
 801d4f2:	2b11      	cmp	r3, #17
 801d4f4:	d10d      	bne.n	801d512 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801d4f6:	8a7b      	ldrh	r3, [r7, #18]
 801d4f8:	69fa      	ldr	r2, [r7, #28]
 801d4fa:	4413      	add	r3, r2
 801d4fc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	885b      	ldrh	r3, [r3, #2]
 801d502:	b29b      	uxth	r3, r3
 801d504:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801d508:	d103      	bne.n	801d512 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801d50a:	683b      	ldr	r3, [r7, #0]
 801d50c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801d50e:	2300      	movs	r3, #0
 801d510:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801d512:	697b      	ldr	r3, [r7, #20]
 801d514:	2b00      	cmp	r3, #0
 801d516:	d017      	beq.n	801d548 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801d518:	4b4d      	ldr	r3, [pc, #308]	; (801d650 <ip4_input+0x27c>)
 801d51a:	691b      	ldr	r3, [r3, #16]
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d013      	beq.n	801d548 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d520:	4b4b      	ldr	r3, [pc, #300]	; (801d650 <ip4_input+0x27c>)
 801d522:	691b      	ldr	r3, [r3, #16]
 801d524:	6839      	ldr	r1, [r7, #0]
 801d526:	4618      	mov	r0, r3
 801d528:	f000 f96e 	bl	801d808 <ip4_addr_isbroadcast_u32>
 801d52c:	4603      	mov	r3, r0
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d105      	bne.n	801d53e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d532:	4b47      	ldr	r3, [pc, #284]	; (801d650 <ip4_input+0x27c>)
 801d534:	691b      	ldr	r3, [r3, #16]
 801d536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d53a:	2be0      	cmp	r3, #224	; 0xe0
 801d53c:	d104      	bne.n	801d548 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d53e:	6878      	ldr	r0, [r7, #4]
 801d540:	f7f5 fdd0 	bl	80130e4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d544:	2300      	movs	r3, #0
 801d546:	e07e      	b.n	801d646 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d548:	69bb      	ldr	r3, [r7, #24]
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d104      	bne.n	801d558 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d54e:	6878      	ldr	r0, [r7, #4]
 801d550:	f7f5 fdc8 	bl	80130e4 <pbuf_free>
    return ERR_OK;
 801d554:	2300      	movs	r3, #0
 801d556:	e076      	b.n	801d646 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d558:	69fb      	ldr	r3, [r7, #28]
 801d55a:	88db      	ldrh	r3, [r3, #6]
 801d55c:	b29b      	uxth	r3, r3
 801d55e:	461a      	mov	r2, r3
 801d560:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801d564:	4013      	ands	r3, r2
 801d566:	2b00      	cmp	r3, #0
 801d568:	d00b      	beq.n	801d582 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d56a:	6878      	ldr	r0, [r7, #4]
 801d56c:	f000 fc92 	bl	801de94 <ip4_reass>
 801d570:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	2b00      	cmp	r3, #0
 801d576:	d101      	bne.n	801d57c <ip4_input+0x1a8>
      return ERR_OK;
 801d578:	2300      	movs	r3, #0
 801d57a:	e064      	b.n	801d646 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	685b      	ldr	r3, [r3, #4]
 801d580:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d582:	4a33      	ldr	r2, [pc, #204]	; (801d650 <ip4_input+0x27c>)
 801d584:	69bb      	ldr	r3, [r7, #24]
 801d586:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d588:	4a31      	ldr	r2, [pc, #196]	; (801d650 <ip4_input+0x27c>)
 801d58a:	683b      	ldr	r3, [r7, #0]
 801d58c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d58e:	4a30      	ldr	r2, [pc, #192]	; (801d650 <ip4_input+0x27c>)
 801d590:	69fb      	ldr	r3, [r7, #28]
 801d592:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d594:	69fb      	ldr	r3, [r7, #28]
 801d596:	781b      	ldrb	r3, [r3, #0]
 801d598:	f003 030f 	and.w	r3, r3, #15
 801d59c:	b2db      	uxtb	r3, r3
 801d59e:	009b      	lsls	r3, r3, #2
 801d5a0:	b2db      	uxtb	r3, r3
 801d5a2:	b29a      	uxth	r2, r3
 801d5a4:	4b2a      	ldr	r3, [pc, #168]	; (801d650 <ip4_input+0x27c>)
 801d5a6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d5a8:	8a7b      	ldrh	r3, [r7, #18]
 801d5aa:	4619      	mov	r1, r3
 801d5ac:	6878      	ldr	r0, [r7, #4]
 801d5ae:	f7f5 fd13 	bl	8012fd8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d5b2:	69fb      	ldr	r3, [r7, #28]
 801d5b4:	7a5b      	ldrb	r3, [r3, #9]
 801d5b6:	2b11      	cmp	r3, #17
 801d5b8:	d006      	beq.n	801d5c8 <ip4_input+0x1f4>
 801d5ba:	2b11      	cmp	r3, #17
 801d5bc:	dc13      	bgt.n	801d5e6 <ip4_input+0x212>
 801d5be:	2b01      	cmp	r3, #1
 801d5c0:	d00c      	beq.n	801d5dc <ip4_input+0x208>
 801d5c2:	2b06      	cmp	r3, #6
 801d5c4:	d005      	beq.n	801d5d2 <ip4_input+0x1fe>
 801d5c6:	e00e      	b.n	801d5e6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d5c8:	6839      	ldr	r1, [r7, #0]
 801d5ca:	6878      	ldr	r0, [r7, #4]
 801d5cc:	f7fc fade 	bl	8019b8c <udp_input>
        break;
 801d5d0:	e026      	b.n	801d620 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d5d2:	6839      	ldr	r1, [r7, #0]
 801d5d4:	6878      	ldr	r0, [r7, #4]
 801d5d6:	f7f7 fe9b 	bl	8015310 <tcp_input>
        break;
 801d5da:	e021      	b.n	801d620 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d5dc:	6839      	ldr	r1, [r7, #0]
 801d5de:	6878      	ldr	r0, [r7, #4]
 801d5e0:	f7ff fcd0 	bl	801cf84 <icmp_input>
        break;
 801d5e4:	e01c      	b.n	801d620 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d5e6:	4b1a      	ldr	r3, [pc, #104]	; (801d650 <ip4_input+0x27c>)
 801d5e8:	695b      	ldr	r3, [r3, #20]
 801d5ea:	69b9      	ldr	r1, [r7, #24]
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f000 f90b 	bl	801d808 <ip4_addr_isbroadcast_u32>
 801d5f2:	4603      	mov	r3, r0
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d10f      	bne.n	801d618 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d5f8:	4b15      	ldr	r3, [pc, #84]	; (801d650 <ip4_input+0x27c>)
 801d5fa:	695b      	ldr	r3, [r3, #20]
 801d5fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d600:	2be0      	cmp	r3, #224	; 0xe0
 801d602:	d009      	beq.n	801d618 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d608:	4619      	mov	r1, r3
 801d60a:	6878      	ldr	r0, [r7, #4]
 801d60c:	f7f5 fd57 	bl	80130be <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d610:	2102      	movs	r1, #2
 801d612:	6878      	ldr	r0, [r7, #4]
 801d614:	f7ff fdba 	bl	801d18c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d618:	6878      	ldr	r0, [r7, #4]
 801d61a:	f7f5 fd63 	bl	80130e4 <pbuf_free>
        break;
 801d61e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d620:	4b0b      	ldr	r3, [pc, #44]	; (801d650 <ip4_input+0x27c>)
 801d622:	2200      	movs	r2, #0
 801d624:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d626:	4b0a      	ldr	r3, [pc, #40]	; (801d650 <ip4_input+0x27c>)
 801d628:	2200      	movs	r2, #0
 801d62a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d62c:	4b08      	ldr	r3, [pc, #32]	; (801d650 <ip4_input+0x27c>)
 801d62e:	2200      	movs	r2, #0
 801d630:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d632:	4b07      	ldr	r3, [pc, #28]	; (801d650 <ip4_input+0x27c>)
 801d634:	2200      	movs	r2, #0
 801d636:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d638:	4b05      	ldr	r3, [pc, #20]	; (801d650 <ip4_input+0x27c>)
 801d63a:	2200      	movs	r2, #0
 801d63c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d63e:	4b04      	ldr	r3, [pc, #16]	; (801d650 <ip4_input+0x27c>)
 801d640:	2200      	movs	r2, #0
 801d642:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d644:	2300      	movs	r3, #0
}
 801d646:	4618      	mov	r0, r3
 801d648:	3720      	adds	r7, #32
 801d64a:	46bd      	mov	sp, r7
 801d64c:	bd80      	pop	{r7, pc}
 801d64e:	bf00      	nop
 801d650:	2000b2c0 	.word	0x2000b2c0
 801d654:	2000e9e4 	.word	0x2000e9e4

0801d658 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d658:	b580      	push	{r7, lr}
 801d65a:	b08a      	sub	sp, #40	; 0x28
 801d65c:	af04      	add	r7, sp, #16
 801d65e:	60f8      	str	r0, [r7, #12]
 801d660:	60b9      	str	r1, [r7, #8]
 801d662:	607a      	str	r2, [r7, #4]
 801d664:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d666:	68bb      	ldr	r3, [r7, #8]
 801d668:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d009      	beq.n	801d684 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d670:	68bb      	ldr	r3, [r7, #8]
 801d672:	2b00      	cmp	r3, #0
 801d674:	d003      	beq.n	801d67e <ip4_output_if+0x26>
 801d676:	68bb      	ldr	r3, [r7, #8]
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d102      	bne.n	801d684 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d680:	3304      	adds	r3, #4
 801d682:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d684:	78fa      	ldrb	r2, [r7, #3]
 801d686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d688:	9302      	str	r3, [sp, #8]
 801d68a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d68e:	9301      	str	r3, [sp, #4]
 801d690:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d694:	9300      	str	r3, [sp, #0]
 801d696:	4613      	mov	r3, r2
 801d698:	687a      	ldr	r2, [r7, #4]
 801d69a:	6979      	ldr	r1, [r7, #20]
 801d69c:	68f8      	ldr	r0, [r7, #12]
 801d69e:	f000 f805 	bl	801d6ac <ip4_output_if_src>
 801d6a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	3718      	adds	r7, #24
 801d6a8:	46bd      	mov	sp, r7
 801d6aa:	bd80      	pop	{r7, pc}

0801d6ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b088      	sub	sp, #32
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	60f8      	str	r0, [r7, #12]
 801d6b4:	60b9      	str	r1, [r7, #8]
 801d6b6:	607a      	str	r2, [r7, #4]
 801d6b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	7b9b      	ldrb	r3, [r3, #14]
 801d6be:	2b01      	cmp	r3, #1
 801d6c0:	d006      	beq.n	801d6d0 <ip4_output_if_src+0x24>
 801d6c2:	4b4b      	ldr	r3, [pc, #300]	; (801d7f0 <ip4_output_if_src+0x144>)
 801d6c4:	f44f 7255 	mov.w	r2, #852	; 0x354
 801d6c8:	494a      	ldr	r1, [pc, #296]	; (801d7f4 <ip4_output_if_src+0x148>)
 801d6ca:	484b      	ldr	r0, [pc, #300]	; (801d7f8 <ip4_output_if_src+0x14c>)
 801d6cc:	f002 fa74 	bl	801fbb8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d060      	beq.n	801d798 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801d6d6:	2314      	movs	r3, #20
 801d6d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d6da:	2114      	movs	r1, #20
 801d6dc:	68f8      	ldr	r0, [r7, #12]
 801d6de:	f7f5 fc6b 	bl	8012fb8 <pbuf_add_header>
 801d6e2:	4603      	mov	r3, r0
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d002      	beq.n	801d6ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d6e8:	f06f 0301 	mvn.w	r3, #1
 801d6ec:	e07c      	b.n	801d7e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	685b      	ldr	r3, [r3, #4]
 801d6f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	895b      	ldrh	r3, [r3, #10]
 801d6f8:	2b13      	cmp	r3, #19
 801d6fa:	d806      	bhi.n	801d70a <ip4_output_if_src+0x5e>
 801d6fc:	4b3c      	ldr	r3, [pc, #240]	; (801d7f0 <ip4_output_if_src+0x144>)
 801d6fe:	f44f 7262 	mov.w	r2, #904	; 0x388
 801d702:	493e      	ldr	r1, [pc, #248]	; (801d7fc <ip4_output_if_src+0x150>)
 801d704:	483c      	ldr	r0, [pc, #240]	; (801d7f8 <ip4_output_if_src+0x14c>)
 801d706:	f002 fa57 	bl	801fbb8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d70a:	69fb      	ldr	r3, [r7, #28]
 801d70c:	78fa      	ldrb	r2, [r7, #3]
 801d70e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d710:	69fb      	ldr	r3, [r7, #28]
 801d712:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801d716:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	681a      	ldr	r2, [r3, #0]
 801d71c:	69fb      	ldr	r3, [r7, #28]
 801d71e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d720:	8b7b      	ldrh	r3, [r7, #26]
 801d722:	089b      	lsrs	r3, r3, #2
 801d724:	b29b      	uxth	r3, r3
 801d726:	b2db      	uxtb	r3, r3
 801d728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d72c:	b2da      	uxtb	r2, r3
 801d72e:	69fb      	ldr	r3, [r7, #28]
 801d730:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d732:	69fb      	ldr	r3, [r7, #28]
 801d734:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d738:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	891b      	ldrh	r3, [r3, #8]
 801d73e:	4618      	mov	r0, r3
 801d740:	f7f4 f918 	bl	8011974 <lwip_htons>
 801d744:	4603      	mov	r3, r0
 801d746:	461a      	mov	r2, r3
 801d748:	69fb      	ldr	r3, [r7, #28]
 801d74a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d74c:	69fb      	ldr	r3, [r7, #28]
 801d74e:	2200      	movs	r2, #0
 801d750:	719a      	strb	r2, [r3, #6]
 801d752:	2200      	movs	r2, #0
 801d754:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d756:	4b2a      	ldr	r3, [pc, #168]	; (801d800 <ip4_output_if_src+0x154>)
 801d758:	881b      	ldrh	r3, [r3, #0]
 801d75a:	4618      	mov	r0, r3
 801d75c:	f7f4 f90a 	bl	8011974 <lwip_htons>
 801d760:	4603      	mov	r3, r0
 801d762:	461a      	mov	r2, r3
 801d764:	69fb      	ldr	r3, [r7, #28]
 801d766:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d768:	4b25      	ldr	r3, [pc, #148]	; (801d800 <ip4_output_if_src+0x154>)
 801d76a:	881b      	ldrh	r3, [r3, #0]
 801d76c:	3301      	adds	r3, #1
 801d76e:	b29a      	uxth	r2, r3
 801d770:	4b23      	ldr	r3, [pc, #140]	; (801d800 <ip4_output_if_src+0x154>)
 801d772:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d774:	68bb      	ldr	r3, [r7, #8]
 801d776:	2b00      	cmp	r3, #0
 801d778:	d104      	bne.n	801d784 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d77a:	4b22      	ldr	r3, [pc, #136]	; (801d804 <ip4_output_if_src+0x158>)
 801d77c:	681a      	ldr	r2, [r3, #0]
 801d77e:	69fb      	ldr	r3, [r7, #28]
 801d780:	60da      	str	r2, [r3, #12]
 801d782:	e003      	b.n	801d78c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d784:	68bb      	ldr	r3, [r7, #8]
 801d786:	681a      	ldr	r2, [r3, #0]
 801d788:	69fb      	ldr	r3, [r7, #28]
 801d78a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d78c:	69fb      	ldr	r3, [r7, #28]
 801d78e:	2200      	movs	r2, #0
 801d790:	729a      	strb	r2, [r3, #10]
 801d792:	2200      	movs	r2, #0
 801d794:	72da      	strb	r2, [r3, #11]
 801d796:	e00f      	b.n	801d7b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	895b      	ldrh	r3, [r3, #10]
 801d79c:	2b13      	cmp	r3, #19
 801d79e:	d802      	bhi.n	801d7a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d7a0:	f06f 0301 	mvn.w	r3, #1
 801d7a4:	e020      	b.n	801d7e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	685b      	ldr	r3, [r3, #4]
 801d7aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d7ac:	69fb      	ldr	r3, [r7, #28]
 801d7ae:	691b      	ldr	r3, [r3, #16]
 801d7b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d7b2:	f107 0314 	add.w	r3, r7, #20
 801d7b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d00c      	beq.n	801d7da <ip4_output_if_src+0x12e>
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	891a      	ldrh	r2, [r3, #8]
 801d7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d7c8:	429a      	cmp	r2, r3
 801d7ca:	d906      	bls.n	801d7da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801d7cc:	687a      	ldr	r2, [r7, #4]
 801d7ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d7d0:	68f8      	ldr	r0, [r7, #12]
 801d7d2:	f000 fd4d 	bl	801e270 <ip4_frag>
 801d7d6:	4603      	mov	r3, r0
 801d7d8:	e006      	b.n	801d7e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7dc:	695b      	ldr	r3, [r3, #20]
 801d7de:	687a      	ldr	r2, [r7, #4]
 801d7e0:	68f9      	ldr	r1, [r7, #12]
 801d7e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d7e4:	4798      	blx	r3
 801d7e6:	4603      	mov	r3, r0
}
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	3720      	adds	r7, #32
 801d7ec:	46bd      	mov	sp, r7
 801d7ee:	bd80      	pop	{r7, pc}
 801d7f0:	0802446c 	.word	0x0802446c
 801d7f4:	080244a0 	.word	0x080244a0
 801d7f8:	080244ac 	.word	0x080244ac
 801d7fc:	080244d4 	.word	0x080244d4
 801d800:	200060ea 	.word	0x200060ea
 801d804:	08024a48 	.word	0x08024a48

0801d808 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d808:	b480      	push	{r7}
 801d80a:	b085      	sub	sp, #20
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	6078      	str	r0, [r7, #4]
 801d810:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d81c:	d002      	beq.n	801d824 <ip4_addr_isbroadcast_u32+0x1c>
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	2b00      	cmp	r3, #0
 801d822:	d101      	bne.n	801d828 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d824:	2301      	movs	r3, #1
 801d826:	e02a      	b.n	801d87e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d828:	683b      	ldr	r3, [r7, #0]
 801d82a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d82e:	f003 0302 	and.w	r3, r3, #2
 801d832:	2b00      	cmp	r3, #0
 801d834:	d101      	bne.n	801d83a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d836:	2300      	movs	r3, #0
 801d838:	e021      	b.n	801d87e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d83a:	683b      	ldr	r3, [r7, #0]
 801d83c:	3304      	adds	r3, #4
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	687a      	ldr	r2, [r7, #4]
 801d842:	429a      	cmp	r2, r3
 801d844:	d101      	bne.n	801d84a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d846:	2300      	movs	r3, #0
 801d848:	e019      	b.n	801d87e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d84a:	68fa      	ldr	r2, [r7, #12]
 801d84c:	683b      	ldr	r3, [r7, #0]
 801d84e:	3304      	adds	r3, #4
 801d850:	681b      	ldr	r3, [r3, #0]
 801d852:	405a      	eors	r2, r3
 801d854:	683b      	ldr	r3, [r7, #0]
 801d856:	3308      	adds	r3, #8
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	4013      	ands	r3, r2
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d10d      	bne.n	801d87c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d860:	683b      	ldr	r3, [r7, #0]
 801d862:	3308      	adds	r3, #8
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	43da      	mvns	r2, r3
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d86c:	683b      	ldr	r3, [r7, #0]
 801d86e:	3308      	adds	r3, #8
 801d870:	681b      	ldr	r3, [r3, #0]
 801d872:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d874:	429a      	cmp	r2, r3
 801d876:	d101      	bne.n	801d87c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d878:	2301      	movs	r3, #1
 801d87a:	e000      	b.n	801d87e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d87c:	2300      	movs	r3, #0
  }
}
 801d87e:	4618      	mov	r0, r3
 801d880:	3714      	adds	r7, #20
 801d882:	46bd      	mov	sp, r7
 801d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d888:	4770      	bx	lr
	...

0801d88c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d88c:	b580      	push	{r7, lr}
 801d88e:	b084      	sub	sp, #16
 801d890:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d892:	2300      	movs	r3, #0
 801d894:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d896:	4b12      	ldr	r3, [pc, #72]	; (801d8e0 <ip_reass_tmr+0x54>)
 801d898:	681b      	ldr	r3, [r3, #0]
 801d89a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d89c:	e018      	b.n	801d8d0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d89e:	68fb      	ldr	r3, [r7, #12]
 801d8a0:	7fdb      	ldrb	r3, [r3, #31]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d00b      	beq.n	801d8be <ip_reass_tmr+0x32>
      r->timer--;
 801d8a6:	68fb      	ldr	r3, [r7, #12]
 801d8a8:	7fdb      	ldrb	r3, [r3, #31]
 801d8aa:	3b01      	subs	r3, #1
 801d8ac:	b2da      	uxtb	r2, r3
 801d8ae:	68fb      	ldr	r3, [r7, #12]
 801d8b0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d8b6:	68fb      	ldr	r3, [r7, #12]
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	60fb      	str	r3, [r7, #12]
 801d8bc:	e008      	b.n	801d8d0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d8be:	68fb      	ldr	r3, [r7, #12]
 801d8c0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	681b      	ldr	r3, [r3, #0]
 801d8c6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d8c8:	68b9      	ldr	r1, [r7, #8]
 801d8ca:	6878      	ldr	r0, [r7, #4]
 801d8cc:	f000 f80a 	bl	801d8e4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d1e3      	bne.n	801d89e <ip_reass_tmr+0x12>
    }
  }
}
 801d8d6:	bf00      	nop
 801d8d8:	bf00      	nop
 801d8da:	3710      	adds	r7, #16
 801d8dc:	46bd      	mov	sp, r7
 801d8de:	bd80      	pop	{r7, pc}
 801d8e0:	200060ec 	.word	0x200060ec

0801d8e4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d8e4:	b580      	push	{r7, lr}
 801d8e6:	b088      	sub	sp, #32
 801d8e8:	af00      	add	r7, sp, #0
 801d8ea:	6078      	str	r0, [r7, #4]
 801d8ec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d8f2:	683a      	ldr	r2, [r7, #0]
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	429a      	cmp	r2, r3
 801d8f8:	d105      	bne.n	801d906 <ip_reass_free_complete_datagram+0x22>
 801d8fa:	4b45      	ldr	r3, [pc, #276]	; (801da10 <ip_reass_free_complete_datagram+0x12c>)
 801d8fc:	22ab      	movs	r2, #171	; 0xab
 801d8fe:	4945      	ldr	r1, [pc, #276]	; (801da14 <ip_reass_free_complete_datagram+0x130>)
 801d900:	4845      	ldr	r0, [pc, #276]	; (801da18 <ip_reass_free_complete_datagram+0x134>)
 801d902:	f002 f959 	bl	801fbb8 <iprintf>
  if (prev != NULL) {
 801d906:	683b      	ldr	r3, [r7, #0]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d00a      	beq.n	801d922 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d90c:	683b      	ldr	r3, [r7, #0]
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	687a      	ldr	r2, [r7, #4]
 801d912:	429a      	cmp	r2, r3
 801d914:	d005      	beq.n	801d922 <ip_reass_free_complete_datagram+0x3e>
 801d916:	4b3e      	ldr	r3, [pc, #248]	; (801da10 <ip_reass_free_complete_datagram+0x12c>)
 801d918:	22ad      	movs	r2, #173	; 0xad
 801d91a:	4940      	ldr	r1, [pc, #256]	; (801da1c <ip_reass_free_complete_datagram+0x138>)
 801d91c:	483e      	ldr	r0, [pc, #248]	; (801da18 <ip_reass_free_complete_datagram+0x134>)
 801d91e:	f002 f94b 	bl	801fbb8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d922:	687b      	ldr	r3, [r7, #4]
 801d924:	685b      	ldr	r3, [r3, #4]
 801d926:	685b      	ldr	r3, [r3, #4]
 801d928:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d92a:	697b      	ldr	r3, [r7, #20]
 801d92c:	889b      	ldrh	r3, [r3, #4]
 801d92e:	b29b      	uxth	r3, r3
 801d930:	2b00      	cmp	r3, #0
 801d932:	d12a      	bne.n	801d98a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	685b      	ldr	r3, [r3, #4]
 801d938:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d93a:	697b      	ldr	r3, [r7, #20]
 801d93c:	681a      	ldr	r2, [r3, #0]
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d942:	69bb      	ldr	r3, [r7, #24]
 801d944:	6858      	ldr	r0, [r3, #4]
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	3308      	adds	r3, #8
 801d94a:	2214      	movs	r2, #20
 801d94c:	4619      	mov	r1, r3
 801d94e:	f002 f8c2 	bl	801fad6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d952:	2101      	movs	r1, #1
 801d954:	69b8      	ldr	r0, [r7, #24]
 801d956:	f7ff fc29 	bl	801d1ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d95a:	69b8      	ldr	r0, [r7, #24]
 801d95c:	f7f5 fc50 	bl	8013200 <pbuf_clen>
 801d960:	4603      	mov	r3, r0
 801d962:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d964:	8bfa      	ldrh	r2, [r7, #30]
 801d966:	8a7b      	ldrh	r3, [r7, #18]
 801d968:	4413      	add	r3, r2
 801d96a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d96e:	db05      	blt.n	801d97c <ip_reass_free_complete_datagram+0x98>
 801d970:	4b27      	ldr	r3, [pc, #156]	; (801da10 <ip_reass_free_complete_datagram+0x12c>)
 801d972:	22bc      	movs	r2, #188	; 0xbc
 801d974:	492a      	ldr	r1, [pc, #168]	; (801da20 <ip_reass_free_complete_datagram+0x13c>)
 801d976:	4828      	ldr	r0, [pc, #160]	; (801da18 <ip_reass_free_complete_datagram+0x134>)
 801d978:	f002 f91e 	bl	801fbb8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d97c:	8bfa      	ldrh	r2, [r7, #30]
 801d97e:	8a7b      	ldrh	r3, [r7, #18]
 801d980:	4413      	add	r3, r2
 801d982:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d984:	69b8      	ldr	r0, [r7, #24]
 801d986:	f7f5 fbad 	bl	80130e4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	685b      	ldr	r3, [r3, #4]
 801d98e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d990:	e01f      	b.n	801d9d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d992:	69bb      	ldr	r3, [r7, #24]
 801d994:	685b      	ldr	r3, [r3, #4]
 801d996:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d998:	69bb      	ldr	r3, [r7, #24]
 801d99a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d99c:	697b      	ldr	r3, [r7, #20]
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d9a2:	68f8      	ldr	r0, [r7, #12]
 801d9a4:	f7f5 fc2c 	bl	8013200 <pbuf_clen>
 801d9a8:	4603      	mov	r3, r0
 801d9aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d9ac:	8bfa      	ldrh	r2, [r7, #30]
 801d9ae:	8a7b      	ldrh	r3, [r7, #18]
 801d9b0:	4413      	add	r3, r2
 801d9b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d9b6:	db05      	blt.n	801d9c4 <ip_reass_free_complete_datagram+0xe0>
 801d9b8:	4b15      	ldr	r3, [pc, #84]	; (801da10 <ip_reass_free_complete_datagram+0x12c>)
 801d9ba:	22cc      	movs	r2, #204	; 0xcc
 801d9bc:	4918      	ldr	r1, [pc, #96]	; (801da20 <ip_reass_free_complete_datagram+0x13c>)
 801d9be:	4816      	ldr	r0, [pc, #88]	; (801da18 <ip_reass_free_complete_datagram+0x134>)
 801d9c0:	f002 f8fa 	bl	801fbb8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d9c4:	8bfa      	ldrh	r2, [r7, #30]
 801d9c6:	8a7b      	ldrh	r3, [r7, #18]
 801d9c8:	4413      	add	r3, r2
 801d9ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d9cc:	68f8      	ldr	r0, [r7, #12]
 801d9ce:	f7f5 fb89 	bl	80130e4 <pbuf_free>
  while (p != NULL) {
 801d9d2:	69bb      	ldr	r3, [r7, #24]
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d1dc      	bne.n	801d992 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d9d8:	6839      	ldr	r1, [r7, #0]
 801d9da:	6878      	ldr	r0, [r7, #4]
 801d9dc:	f000 f8c2 	bl	801db64 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d9e0:	4b10      	ldr	r3, [pc, #64]	; (801da24 <ip_reass_free_complete_datagram+0x140>)
 801d9e2:	881b      	ldrh	r3, [r3, #0]
 801d9e4:	8bfa      	ldrh	r2, [r7, #30]
 801d9e6:	429a      	cmp	r2, r3
 801d9e8:	d905      	bls.n	801d9f6 <ip_reass_free_complete_datagram+0x112>
 801d9ea:	4b09      	ldr	r3, [pc, #36]	; (801da10 <ip_reass_free_complete_datagram+0x12c>)
 801d9ec:	22d2      	movs	r2, #210	; 0xd2
 801d9ee:	490e      	ldr	r1, [pc, #56]	; (801da28 <ip_reass_free_complete_datagram+0x144>)
 801d9f0:	4809      	ldr	r0, [pc, #36]	; (801da18 <ip_reass_free_complete_datagram+0x134>)
 801d9f2:	f002 f8e1 	bl	801fbb8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d9f6:	4b0b      	ldr	r3, [pc, #44]	; (801da24 <ip_reass_free_complete_datagram+0x140>)
 801d9f8:	881a      	ldrh	r2, [r3, #0]
 801d9fa:	8bfb      	ldrh	r3, [r7, #30]
 801d9fc:	1ad3      	subs	r3, r2, r3
 801d9fe:	b29a      	uxth	r2, r3
 801da00:	4b08      	ldr	r3, [pc, #32]	; (801da24 <ip_reass_free_complete_datagram+0x140>)
 801da02:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801da04:	8bfb      	ldrh	r3, [r7, #30]
}
 801da06:	4618      	mov	r0, r3
 801da08:	3720      	adds	r7, #32
 801da0a:	46bd      	mov	sp, r7
 801da0c:	bd80      	pop	{r7, pc}
 801da0e:	bf00      	nop
 801da10:	08024504 	.word	0x08024504
 801da14:	08024540 	.word	0x08024540
 801da18:	0802454c 	.word	0x0802454c
 801da1c:	08024574 	.word	0x08024574
 801da20:	08024588 	.word	0x08024588
 801da24:	200060f0 	.word	0x200060f0
 801da28:	080245a8 	.word	0x080245a8

0801da2c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b08a      	sub	sp, #40	; 0x28
 801da30:	af00      	add	r7, sp, #0
 801da32:	6078      	str	r0, [r7, #4]
 801da34:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801da36:	2300      	movs	r3, #0
 801da38:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801da3a:	2300      	movs	r3, #0
 801da3c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801da3e:	2300      	movs	r3, #0
 801da40:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801da42:	2300      	movs	r3, #0
 801da44:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801da46:	2300      	movs	r3, #0
 801da48:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801da4a:	4b28      	ldr	r3, [pc, #160]	; (801daec <ip_reass_remove_oldest_datagram+0xc0>)
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801da50:	e030      	b.n	801dab4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da54:	695a      	ldr	r2, [r3, #20]
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	68db      	ldr	r3, [r3, #12]
 801da5a:	429a      	cmp	r2, r3
 801da5c:	d10c      	bne.n	801da78 <ip_reass_remove_oldest_datagram+0x4c>
 801da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da60:	699a      	ldr	r2, [r3, #24]
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	691b      	ldr	r3, [r3, #16]
 801da66:	429a      	cmp	r2, r3
 801da68:	d106      	bne.n	801da78 <ip_reass_remove_oldest_datagram+0x4c>
 801da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da6c:	899a      	ldrh	r2, [r3, #12]
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	889b      	ldrh	r3, [r3, #4]
 801da72:	b29b      	uxth	r3, r3
 801da74:	429a      	cmp	r2, r3
 801da76:	d014      	beq.n	801daa2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801da78:	693b      	ldr	r3, [r7, #16]
 801da7a:	3301      	adds	r3, #1
 801da7c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801da7e:	6a3b      	ldr	r3, [r7, #32]
 801da80:	2b00      	cmp	r3, #0
 801da82:	d104      	bne.n	801da8e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da86:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801da88:	69fb      	ldr	r3, [r7, #28]
 801da8a:	61bb      	str	r3, [r7, #24]
 801da8c:	e009      	b.n	801daa2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801da8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da90:	7fda      	ldrb	r2, [r3, #31]
 801da92:	6a3b      	ldr	r3, [r7, #32]
 801da94:	7fdb      	ldrb	r3, [r3, #31]
 801da96:	429a      	cmp	r2, r3
 801da98:	d803      	bhi.n	801daa2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801da9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da9c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801da9e:	69fb      	ldr	r3, [r7, #28]
 801daa0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801daa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d001      	beq.n	801daae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801daae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d1cb      	bne.n	801da52 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801daba:	6a3b      	ldr	r3, [r7, #32]
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	d008      	beq.n	801dad2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801dac0:	69b9      	ldr	r1, [r7, #24]
 801dac2:	6a38      	ldr	r0, [r7, #32]
 801dac4:	f7ff ff0e 	bl	801d8e4 <ip_reass_free_complete_datagram>
 801dac8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801daca:	697a      	ldr	r2, [r7, #20]
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	4413      	add	r3, r2
 801dad0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801dad2:	697a      	ldr	r2, [r7, #20]
 801dad4:	683b      	ldr	r3, [r7, #0]
 801dad6:	429a      	cmp	r2, r3
 801dad8:	da02      	bge.n	801dae0 <ip_reass_remove_oldest_datagram+0xb4>
 801dada:	693b      	ldr	r3, [r7, #16]
 801dadc:	2b01      	cmp	r3, #1
 801dade:	dcac      	bgt.n	801da3a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801dae0:	697b      	ldr	r3, [r7, #20]
}
 801dae2:	4618      	mov	r0, r3
 801dae4:	3728      	adds	r7, #40	; 0x28
 801dae6:	46bd      	mov	sp, r7
 801dae8:	bd80      	pop	{r7, pc}
 801daea:	bf00      	nop
 801daec:	200060ec 	.word	0x200060ec

0801daf0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801daf0:	b580      	push	{r7, lr}
 801daf2:	b084      	sub	sp, #16
 801daf4:	af00      	add	r7, sp, #0
 801daf6:	6078      	str	r0, [r7, #4]
 801daf8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801dafa:	2004      	movs	r0, #4
 801dafc:	f7f4 fbf0 	bl	80122e0 <memp_malloc>
 801db00:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	2b00      	cmp	r3, #0
 801db06:	d110      	bne.n	801db2a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801db08:	6839      	ldr	r1, [r7, #0]
 801db0a:	6878      	ldr	r0, [r7, #4]
 801db0c:	f7ff ff8e 	bl	801da2c <ip_reass_remove_oldest_datagram>
 801db10:	4602      	mov	r2, r0
 801db12:	683b      	ldr	r3, [r7, #0]
 801db14:	4293      	cmp	r3, r2
 801db16:	dc03      	bgt.n	801db20 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801db18:	2004      	movs	r0, #4
 801db1a:	f7f4 fbe1 	bl	80122e0 <memp_malloc>
 801db1e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	2b00      	cmp	r3, #0
 801db24:	d101      	bne.n	801db2a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801db26:	2300      	movs	r3, #0
 801db28:	e016      	b.n	801db58 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801db2a:	2220      	movs	r2, #32
 801db2c:	2100      	movs	r1, #0
 801db2e:	68f8      	ldr	r0, [r7, #12]
 801db30:	f001 ffdf 	bl	801faf2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801db34:	68fb      	ldr	r3, [r7, #12]
 801db36:	220f      	movs	r2, #15
 801db38:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801db3a:	4b09      	ldr	r3, [pc, #36]	; (801db60 <ip_reass_enqueue_new_datagram+0x70>)
 801db3c:	681a      	ldr	r2, [r3, #0]
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801db42:	4a07      	ldr	r2, [pc, #28]	; (801db60 <ip_reass_enqueue_new_datagram+0x70>)
 801db44:	68fb      	ldr	r3, [r7, #12]
 801db46:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801db48:	68fb      	ldr	r3, [r7, #12]
 801db4a:	3308      	adds	r3, #8
 801db4c:	2214      	movs	r2, #20
 801db4e:	6879      	ldr	r1, [r7, #4]
 801db50:	4618      	mov	r0, r3
 801db52:	f001 ffc0 	bl	801fad6 <memcpy>
  return ipr;
 801db56:	68fb      	ldr	r3, [r7, #12]
}
 801db58:	4618      	mov	r0, r3
 801db5a:	3710      	adds	r7, #16
 801db5c:	46bd      	mov	sp, r7
 801db5e:	bd80      	pop	{r7, pc}
 801db60:	200060ec 	.word	0x200060ec

0801db64 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801db64:	b580      	push	{r7, lr}
 801db66:	b082      	sub	sp, #8
 801db68:	af00      	add	r7, sp, #0
 801db6a:	6078      	str	r0, [r7, #4]
 801db6c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801db6e:	4b10      	ldr	r3, [pc, #64]	; (801dbb0 <ip_reass_dequeue_datagram+0x4c>)
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	687a      	ldr	r2, [r7, #4]
 801db74:	429a      	cmp	r2, r3
 801db76:	d104      	bne.n	801db82 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	4a0c      	ldr	r2, [pc, #48]	; (801dbb0 <ip_reass_dequeue_datagram+0x4c>)
 801db7e:	6013      	str	r3, [r2, #0]
 801db80:	e00d      	b.n	801db9e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801db82:	683b      	ldr	r3, [r7, #0]
 801db84:	2b00      	cmp	r3, #0
 801db86:	d106      	bne.n	801db96 <ip_reass_dequeue_datagram+0x32>
 801db88:	4b0a      	ldr	r3, [pc, #40]	; (801dbb4 <ip_reass_dequeue_datagram+0x50>)
 801db8a:	f240 1245 	movw	r2, #325	; 0x145
 801db8e:	490a      	ldr	r1, [pc, #40]	; (801dbb8 <ip_reass_dequeue_datagram+0x54>)
 801db90:	480a      	ldr	r0, [pc, #40]	; (801dbbc <ip_reass_dequeue_datagram+0x58>)
 801db92:	f002 f811 	bl	801fbb8 <iprintf>
    prev->next = ipr->next;
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	681a      	ldr	r2, [r3, #0]
 801db9a:	683b      	ldr	r3, [r7, #0]
 801db9c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801db9e:	6879      	ldr	r1, [r7, #4]
 801dba0:	2004      	movs	r0, #4
 801dba2:	f7f4 fbef 	bl	8012384 <memp_free>
}
 801dba6:	bf00      	nop
 801dba8:	3708      	adds	r7, #8
 801dbaa:	46bd      	mov	sp, r7
 801dbac:	bd80      	pop	{r7, pc}
 801dbae:	bf00      	nop
 801dbb0:	200060ec 	.word	0x200060ec
 801dbb4:	08024504 	.word	0x08024504
 801dbb8:	080245cc 	.word	0x080245cc
 801dbbc:	0802454c 	.word	0x0802454c

0801dbc0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801dbc0:	b580      	push	{r7, lr}
 801dbc2:	b08c      	sub	sp, #48	; 0x30
 801dbc4:	af00      	add	r7, sp, #0
 801dbc6:	60f8      	str	r0, [r7, #12]
 801dbc8:	60b9      	str	r1, [r7, #8]
 801dbca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801dbcc:	2300      	movs	r3, #0
 801dbce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801dbd0:	2301      	movs	r3, #1
 801dbd2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801dbd4:	68bb      	ldr	r3, [r7, #8]
 801dbd6:	685b      	ldr	r3, [r3, #4]
 801dbd8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801dbda:	69fb      	ldr	r3, [r7, #28]
 801dbdc:	885b      	ldrh	r3, [r3, #2]
 801dbde:	b29b      	uxth	r3, r3
 801dbe0:	4618      	mov	r0, r3
 801dbe2:	f7f3 fec7 	bl	8011974 <lwip_htons>
 801dbe6:	4603      	mov	r3, r0
 801dbe8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801dbea:	69fb      	ldr	r3, [r7, #28]
 801dbec:	781b      	ldrb	r3, [r3, #0]
 801dbee:	f003 030f 	and.w	r3, r3, #15
 801dbf2:	b2db      	uxtb	r3, r3
 801dbf4:	009b      	lsls	r3, r3, #2
 801dbf6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801dbf8:	7e7b      	ldrb	r3, [r7, #25]
 801dbfa:	b29b      	uxth	r3, r3
 801dbfc:	8b7a      	ldrh	r2, [r7, #26]
 801dbfe:	429a      	cmp	r2, r3
 801dc00:	d202      	bcs.n	801dc08 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dc02:	f04f 33ff 	mov.w	r3, #4294967295
 801dc06:	e135      	b.n	801de74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801dc08:	7e7b      	ldrb	r3, [r7, #25]
 801dc0a:	b29b      	uxth	r3, r3
 801dc0c:	8b7a      	ldrh	r2, [r7, #26]
 801dc0e:	1ad3      	subs	r3, r2, r3
 801dc10:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801dc12:	69fb      	ldr	r3, [r7, #28]
 801dc14:	88db      	ldrh	r3, [r3, #6]
 801dc16:	b29b      	uxth	r3, r3
 801dc18:	4618      	mov	r0, r3
 801dc1a:	f7f3 feab 	bl	8011974 <lwip_htons>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dc24:	b29b      	uxth	r3, r3
 801dc26:	00db      	lsls	r3, r3, #3
 801dc28:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801dc2a:	68bb      	ldr	r3, [r7, #8]
 801dc2c:	685b      	ldr	r3, [r3, #4]
 801dc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc32:	2200      	movs	r2, #0
 801dc34:	701a      	strb	r2, [r3, #0]
 801dc36:	2200      	movs	r2, #0
 801dc38:	705a      	strb	r2, [r3, #1]
 801dc3a:	2200      	movs	r2, #0
 801dc3c:	709a      	strb	r2, [r3, #2]
 801dc3e:	2200      	movs	r2, #0
 801dc40:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801dc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc44:	8afa      	ldrh	r2, [r7, #22]
 801dc46:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801dc48:	8afa      	ldrh	r2, [r7, #22]
 801dc4a:	8b7b      	ldrh	r3, [r7, #26]
 801dc4c:	4413      	add	r3, r2
 801dc4e:	b29a      	uxth	r2, r3
 801dc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc52:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801dc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc56:	88db      	ldrh	r3, [r3, #6]
 801dc58:	b29b      	uxth	r3, r3
 801dc5a:	8afa      	ldrh	r2, [r7, #22]
 801dc5c:	429a      	cmp	r2, r3
 801dc5e:	d902      	bls.n	801dc66 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dc60:	f04f 33ff 	mov.w	r3, #4294967295
 801dc64:	e106      	b.n	801de74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	685b      	ldr	r3, [r3, #4]
 801dc6a:	627b      	str	r3, [r7, #36]	; 0x24
 801dc6c:	e068      	b.n	801dd40 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc70:	685b      	ldr	r3, [r3, #4]
 801dc72:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc76:	889b      	ldrh	r3, [r3, #4]
 801dc78:	b29a      	uxth	r2, r3
 801dc7a:	693b      	ldr	r3, [r7, #16]
 801dc7c:	889b      	ldrh	r3, [r3, #4]
 801dc7e:	b29b      	uxth	r3, r3
 801dc80:	429a      	cmp	r2, r3
 801dc82:	d235      	bcs.n	801dcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc88:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d020      	beq.n	801dcd2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc92:	889b      	ldrh	r3, [r3, #4]
 801dc94:	b29a      	uxth	r2, r3
 801dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc98:	88db      	ldrh	r3, [r3, #6]
 801dc9a:	b29b      	uxth	r3, r3
 801dc9c:	429a      	cmp	r2, r3
 801dc9e:	d307      	bcc.n	801dcb0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801dca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dca2:	88db      	ldrh	r3, [r3, #6]
 801dca4:	b29a      	uxth	r2, r3
 801dca6:	693b      	ldr	r3, [r7, #16]
 801dca8:	889b      	ldrh	r3, [r3, #4]
 801dcaa:	b29b      	uxth	r3, r3
 801dcac:	429a      	cmp	r2, r3
 801dcae:	d902      	bls.n	801dcb6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dcb0:	f04f 33ff 	mov.w	r3, #4294967295
 801dcb4:	e0de      	b.n	801de74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801dcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcb8:	68ba      	ldr	r2, [r7, #8]
 801dcba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcbe:	88db      	ldrh	r3, [r3, #6]
 801dcc0:	b29a      	uxth	r2, r3
 801dcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcc4:	889b      	ldrh	r3, [r3, #4]
 801dcc6:	b29b      	uxth	r3, r3
 801dcc8:	429a      	cmp	r2, r3
 801dcca:	d03d      	beq.n	801dd48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801dccc:	2300      	movs	r3, #0
 801dcce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801dcd0:	e03a      	b.n	801dd48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801dcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcd4:	88db      	ldrh	r3, [r3, #6]
 801dcd6:	b29a      	uxth	r2, r3
 801dcd8:	693b      	ldr	r3, [r7, #16]
 801dcda:	889b      	ldrh	r3, [r3, #4]
 801dcdc:	b29b      	uxth	r3, r3
 801dcde:	429a      	cmp	r2, r3
 801dce0:	d902      	bls.n	801dce8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dce2:	f04f 33ff 	mov.w	r3, #4294967295
 801dce6:	e0c5      	b.n	801de74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	68ba      	ldr	r2, [r7, #8]
 801dcec:	605a      	str	r2, [r3, #4]
      break;
 801dcee:	e02b      	b.n	801dd48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcf2:	889b      	ldrh	r3, [r3, #4]
 801dcf4:	b29a      	uxth	r2, r3
 801dcf6:	693b      	ldr	r3, [r7, #16]
 801dcf8:	889b      	ldrh	r3, [r3, #4]
 801dcfa:	b29b      	uxth	r3, r3
 801dcfc:	429a      	cmp	r2, r3
 801dcfe:	d102      	bne.n	801dd06 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dd00:	f04f 33ff 	mov.w	r3, #4294967295
 801dd04:	e0b6      	b.n	801de74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801dd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd08:	889b      	ldrh	r3, [r3, #4]
 801dd0a:	b29a      	uxth	r2, r3
 801dd0c:	693b      	ldr	r3, [r7, #16]
 801dd0e:	88db      	ldrh	r3, [r3, #6]
 801dd10:	b29b      	uxth	r3, r3
 801dd12:	429a      	cmp	r2, r3
 801dd14:	d202      	bcs.n	801dd1c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dd16:	f04f 33ff 	mov.w	r3, #4294967295
 801dd1a:	e0ab      	b.n	801de74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d009      	beq.n	801dd36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801dd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd24:	88db      	ldrh	r3, [r3, #6]
 801dd26:	b29a      	uxth	r2, r3
 801dd28:	693b      	ldr	r3, [r7, #16]
 801dd2a:	889b      	ldrh	r3, [r3, #4]
 801dd2c:	b29b      	uxth	r3, r3
 801dd2e:	429a      	cmp	r2, r3
 801dd30:	d001      	beq.n	801dd36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801dd32:	2300      	movs	r3, #0
 801dd34:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801dd36:	693b      	ldr	r3, [r7, #16]
 801dd38:	681b      	ldr	r3, [r3, #0]
 801dd3a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801dd3c:	693b      	ldr	r3, [r7, #16]
 801dd3e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d193      	bne.n	801dc6e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801dd46:	e000      	b.n	801dd4a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801dd48:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	d12d      	bne.n	801ddac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801dd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d01c      	beq.n	801dd90 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801dd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd58:	88db      	ldrh	r3, [r3, #6]
 801dd5a:	b29a      	uxth	r2, r3
 801dd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd5e:	889b      	ldrh	r3, [r3, #4]
 801dd60:	b29b      	uxth	r3, r3
 801dd62:	429a      	cmp	r2, r3
 801dd64:	d906      	bls.n	801dd74 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801dd66:	4b45      	ldr	r3, [pc, #276]	; (801de7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dd68:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801dd6c:	4944      	ldr	r1, [pc, #272]	; (801de80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801dd6e:	4845      	ldr	r0, [pc, #276]	; (801de84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dd70:	f001 ff22 	bl	801fbb8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd76:	68ba      	ldr	r2, [r7, #8]
 801dd78:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801dd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd7c:	88db      	ldrh	r3, [r3, #6]
 801dd7e:	b29a      	uxth	r2, r3
 801dd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd82:	889b      	ldrh	r3, [r3, #4]
 801dd84:	b29b      	uxth	r3, r3
 801dd86:	429a      	cmp	r2, r3
 801dd88:	d010      	beq.n	801ddac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801dd8a:	2300      	movs	r3, #0
 801dd8c:	623b      	str	r3, [r7, #32]
 801dd8e:	e00d      	b.n	801ddac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801dd90:	68fb      	ldr	r3, [r7, #12]
 801dd92:	685b      	ldr	r3, [r3, #4]
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d006      	beq.n	801dda6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801dd98:	4b38      	ldr	r3, [pc, #224]	; (801de7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dd9a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801dd9e:	493a      	ldr	r1, [pc, #232]	; (801de88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801dda0:	4838      	ldr	r0, [pc, #224]	; (801de84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dda2:	f001 ff09 	bl	801fbb8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	68ba      	ldr	r2, [r7, #8]
 801ddaa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d105      	bne.n	801ddbe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	7f9b      	ldrb	r3, [r3, #30]
 801ddb6:	f003 0301 	and.w	r3, r3, #1
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d059      	beq.n	801de72 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ddbe:	6a3b      	ldr	r3, [r7, #32]
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d04f      	beq.n	801de64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ddc4:	68fb      	ldr	r3, [r7, #12]
 801ddc6:	685b      	ldr	r3, [r3, #4]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d006      	beq.n	801ddda <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	685b      	ldr	r3, [r3, #4]
 801ddd0:	685b      	ldr	r3, [r3, #4]
 801ddd2:	889b      	ldrh	r3, [r3, #4]
 801ddd4:	b29b      	uxth	r3, r3
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d002      	beq.n	801dde0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ddda:	2300      	movs	r3, #0
 801dddc:	623b      	str	r3, [r7, #32]
 801ddde:	e041      	b.n	801de64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801dde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dde2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801dde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ddea:	e012      	b.n	801de12 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddee:	685b      	ldr	r3, [r3, #4]
 801ddf0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ddf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddf4:	88db      	ldrh	r3, [r3, #6]
 801ddf6:	b29a      	uxth	r2, r3
 801ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddfa:	889b      	ldrh	r3, [r3, #4]
 801ddfc:	b29b      	uxth	r3, r3
 801ddfe:	429a      	cmp	r2, r3
 801de00:	d002      	beq.n	801de08 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801de02:	2300      	movs	r3, #0
 801de04:	623b      	str	r3, [r7, #32]
            break;
 801de06:	e007      	b.n	801de18 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801de08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de0a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801de12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de14:	2b00      	cmp	r3, #0
 801de16:	d1e9      	bne.n	801ddec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801de18:	6a3b      	ldr	r3, [r7, #32]
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	d022      	beq.n	801de64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801de1e:	68fb      	ldr	r3, [r7, #12]
 801de20:	685b      	ldr	r3, [r3, #4]
 801de22:	2b00      	cmp	r3, #0
 801de24:	d106      	bne.n	801de34 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801de26:	4b15      	ldr	r3, [pc, #84]	; (801de7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801de28:	f240 12df 	movw	r2, #479	; 0x1df
 801de2c:	4917      	ldr	r1, [pc, #92]	; (801de8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801de2e:	4815      	ldr	r0, [pc, #84]	; (801de84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801de30:	f001 fec2 	bl	801fbb8 <iprintf>
          LWIP_ASSERT("sanity check",
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	685b      	ldr	r3, [r3, #4]
 801de38:	685b      	ldr	r3, [r3, #4]
 801de3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801de3c:	429a      	cmp	r2, r3
 801de3e:	d106      	bne.n	801de4e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801de40:	4b0e      	ldr	r3, [pc, #56]	; (801de7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801de42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801de46:	4911      	ldr	r1, [pc, #68]	; (801de8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801de48:	480e      	ldr	r0, [pc, #56]	; (801de84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801de4a:	f001 feb5 	bl	801fbb8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801de4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	2b00      	cmp	r3, #0
 801de54:	d006      	beq.n	801de64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801de56:	4b09      	ldr	r3, [pc, #36]	; (801de7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801de58:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801de5c:	490c      	ldr	r1, [pc, #48]	; (801de90 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801de5e:	4809      	ldr	r0, [pc, #36]	; (801de84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801de60:	f001 feaa 	bl	801fbb8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801de64:	6a3b      	ldr	r3, [r7, #32]
 801de66:	2b00      	cmp	r3, #0
 801de68:	bf14      	ite	ne
 801de6a:	2301      	movne	r3, #1
 801de6c:	2300      	moveq	r3, #0
 801de6e:	b2db      	uxtb	r3, r3
 801de70:	e000      	b.n	801de74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801de72:	2300      	movs	r3, #0
}
 801de74:	4618      	mov	r0, r3
 801de76:	3730      	adds	r7, #48	; 0x30
 801de78:	46bd      	mov	sp, r7
 801de7a:	bd80      	pop	{r7, pc}
 801de7c:	08024504 	.word	0x08024504
 801de80:	080245e8 	.word	0x080245e8
 801de84:	0802454c 	.word	0x0802454c
 801de88:	08024608 	.word	0x08024608
 801de8c:	08024640 	.word	0x08024640
 801de90:	08024650 	.word	0x08024650

0801de94 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801de94:	b580      	push	{r7, lr}
 801de96:	b08e      	sub	sp, #56	; 0x38
 801de98:	af00      	add	r7, sp, #0
 801de9a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	685b      	ldr	r3, [r3, #4]
 801dea0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801dea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dea4:	781b      	ldrb	r3, [r3, #0]
 801dea6:	f003 030f 	and.w	r3, r3, #15
 801deaa:	b2db      	uxtb	r3, r3
 801deac:	009b      	lsls	r3, r3, #2
 801deae:	b2db      	uxtb	r3, r3
 801deb0:	2b14      	cmp	r3, #20
 801deb2:	f040 8167 	bne.w	801e184 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801deb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801deb8:	88db      	ldrh	r3, [r3, #6]
 801deba:	b29b      	uxth	r3, r3
 801debc:	4618      	mov	r0, r3
 801debe:	f7f3 fd59 	bl	8011974 <lwip_htons>
 801dec2:	4603      	mov	r3, r0
 801dec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dec8:	b29b      	uxth	r3, r3
 801deca:	00db      	lsls	r3, r3, #3
 801decc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ded0:	885b      	ldrh	r3, [r3, #2]
 801ded2:	b29b      	uxth	r3, r3
 801ded4:	4618      	mov	r0, r3
 801ded6:	f7f3 fd4d 	bl	8011974 <lwip_htons>
 801deda:	4603      	mov	r3, r0
 801dedc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dee0:	781b      	ldrb	r3, [r3, #0]
 801dee2:	f003 030f 	and.w	r3, r3, #15
 801dee6:	b2db      	uxtb	r3, r3
 801dee8:	009b      	lsls	r3, r3, #2
 801deea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801deee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801def2:	b29b      	uxth	r3, r3
 801def4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801def6:	429a      	cmp	r2, r3
 801def8:	f0c0 8146 	bcc.w	801e188 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801defc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801df00:	b29b      	uxth	r3, r3
 801df02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801df04:	1ad3      	subs	r3, r2, r3
 801df06:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801df08:	6878      	ldr	r0, [r7, #4]
 801df0a:	f7f5 f979 	bl	8013200 <pbuf_clen>
 801df0e:	4603      	mov	r3, r0
 801df10:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801df12:	4b9f      	ldr	r3, [pc, #636]	; (801e190 <ip4_reass+0x2fc>)
 801df14:	881b      	ldrh	r3, [r3, #0]
 801df16:	461a      	mov	r2, r3
 801df18:	8c3b      	ldrh	r3, [r7, #32]
 801df1a:	4413      	add	r3, r2
 801df1c:	2b0a      	cmp	r3, #10
 801df1e:	dd10      	ble.n	801df42 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801df20:	8c3b      	ldrh	r3, [r7, #32]
 801df22:	4619      	mov	r1, r3
 801df24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801df26:	f7ff fd81 	bl	801da2c <ip_reass_remove_oldest_datagram>
 801df2a:	4603      	mov	r3, r0
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	f000 812d 	beq.w	801e18c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801df32:	4b97      	ldr	r3, [pc, #604]	; (801e190 <ip4_reass+0x2fc>)
 801df34:	881b      	ldrh	r3, [r3, #0]
 801df36:	461a      	mov	r2, r3
 801df38:	8c3b      	ldrh	r3, [r7, #32]
 801df3a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801df3c:	2b0a      	cmp	r3, #10
 801df3e:	f300 8125 	bgt.w	801e18c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801df42:	4b94      	ldr	r3, [pc, #592]	; (801e194 <ip4_reass+0x300>)
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	633b      	str	r3, [r7, #48]	; 0x30
 801df48:	e015      	b.n	801df76 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801df4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df4c:	695a      	ldr	r2, [r3, #20]
 801df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df50:	68db      	ldr	r3, [r3, #12]
 801df52:	429a      	cmp	r2, r3
 801df54:	d10c      	bne.n	801df70 <ip4_reass+0xdc>
 801df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df58:	699a      	ldr	r2, [r3, #24]
 801df5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df5c:	691b      	ldr	r3, [r3, #16]
 801df5e:	429a      	cmp	r2, r3
 801df60:	d106      	bne.n	801df70 <ip4_reass+0xdc>
 801df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df64:	899a      	ldrh	r2, [r3, #12]
 801df66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df68:	889b      	ldrh	r3, [r3, #4]
 801df6a:	b29b      	uxth	r3, r3
 801df6c:	429a      	cmp	r2, r3
 801df6e:	d006      	beq.n	801df7e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801df70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	633b      	str	r3, [r7, #48]	; 0x30
 801df76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d1e6      	bne.n	801df4a <ip4_reass+0xb6>
 801df7c:	e000      	b.n	801df80 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801df7e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df82:	2b00      	cmp	r3, #0
 801df84:	d109      	bne.n	801df9a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801df86:	8c3b      	ldrh	r3, [r7, #32]
 801df88:	4619      	mov	r1, r3
 801df8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801df8c:	f7ff fdb0 	bl	801daf0 <ip_reass_enqueue_new_datagram>
 801df90:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df94:	2b00      	cmp	r3, #0
 801df96:	d11c      	bne.n	801dfd2 <ip4_reass+0x13e>
      goto nullreturn;
 801df98:	e109      	b.n	801e1ae <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df9c:	88db      	ldrh	r3, [r3, #6]
 801df9e:	b29b      	uxth	r3, r3
 801dfa0:	4618      	mov	r0, r3
 801dfa2:	f7f3 fce7 	bl	8011974 <lwip_htons>
 801dfa6:	4603      	mov	r3, r0
 801dfa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d110      	bne.n	801dfd2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801dfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfb2:	89db      	ldrh	r3, [r3, #14]
 801dfb4:	4618      	mov	r0, r3
 801dfb6:	f7f3 fcdd 	bl	8011974 <lwip_htons>
 801dfba:	4603      	mov	r3, r0
 801dfbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d006      	beq.n	801dfd2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801dfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfc6:	3308      	adds	r3, #8
 801dfc8:	2214      	movs	r2, #20
 801dfca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dfcc:	4618      	mov	r0, r3
 801dfce:	f001 fd82 	bl	801fad6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfd4:	88db      	ldrh	r3, [r3, #6]
 801dfd6:	b29b      	uxth	r3, r3
 801dfd8:	f003 0320 	and.w	r3, r3, #32
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	bf0c      	ite	eq
 801dfe0:	2301      	moveq	r3, #1
 801dfe2:	2300      	movne	r3, #0
 801dfe4:	b2db      	uxtb	r3, r3
 801dfe6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801dfe8:	69fb      	ldr	r3, [r7, #28]
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d00e      	beq.n	801e00c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801dfee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dff2:	4413      	add	r3, r2
 801dff4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801dff6:	8b7a      	ldrh	r2, [r7, #26]
 801dff8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801dffa:	429a      	cmp	r2, r3
 801dffc:	f0c0 80a0 	bcc.w	801e140 <ip4_reass+0x2ac>
 801e000:	8b7b      	ldrh	r3, [r7, #26]
 801e002:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801e006:	4293      	cmp	r3, r2
 801e008:	f200 809a 	bhi.w	801e140 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e00c:	69fa      	ldr	r2, [r7, #28]
 801e00e:	6879      	ldr	r1, [r7, #4]
 801e010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e012:	f7ff fdd5 	bl	801dbc0 <ip_reass_chain_frag_into_datagram_and_validate>
 801e016:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e018:	697b      	ldr	r3, [r7, #20]
 801e01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e01e:	f000 8091 	beq.w	801e144 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e022:	4b5b      	ldr	r3, [pc, #364]	; (801e190 <ip4_reass+0x2fc>)
 801e024:	881a      	ldrh	r2, [r3, #0]
 801e026:	8c3b      	ldrh	r3, [r7, #32]
 801e028:	4413      	add	r3, r2
 801e02a:	b29a      	uxth	r2, r3
 801e02c:	4b58      	ldr	r3, [pc, #352]	; (801e190 <ip4_reass+0x2fc>)
 801e02e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e030:	69fb      	ldr	r3, [r7, #28]
 801e032:	2b00      	cmp	r3, #0
 801e034:	d00d      	beq.n	801e052 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801e036:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e03a:	4413      	add	r3, r2
 801e03c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e040:	8a7a      	ldrh	r2, [r7, #18]
 801e042:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e046:	7f9b      	ldrb	r3, [r3, #30]
 801e048:	f043 0301 	orr.w	r3, r3, #1
 801e04c:	b2da      	uxtb	r2, r3
 801e04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e050:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e052:	697b      	ldr	r3, [r7, #20]
 801e054:	2b01      	cmp	r3, #1
 801e056:	d171      	bne.n	801e13c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e05a:	8b9b      	ldrh	r3, [r3, #28]
 801e05c:	3314      	adds	r3, #20
 801e05e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e062:	685b      	ldr	r3, [r3, #4]
 801e064:	685b      	ldr	r3, [r3, #4]
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e06c:	685b      	ldr	r3, [r3, #4]
 801e06e:	685b      	ldr	r3, [r3, #4]
 801e070:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e074:	3308      	adds	r3, #8
 801e076:	2214      	movs	r2, #20
 801e078:	4619      	mov	r1, r3
 801e07a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e07c:	f001 fd2b 	bl	801fad6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e080:	8a3b      	ldrh	r3, [r7, #16]
 801e082:	4618      	mov	r0, r3
 801e084:	f7f3 fc76 	bl	8011974 <lwip_htons>
 801e088:	4603      	mov	r3, r0
 801e08a:	461a      	mov	r2, r3
 801e08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e08e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e092:	2200      	movs	r2, #0
 801e094:	719a      	strb	r2, [r3, #6]
 801e096:	2200      	movs	r2, #0
 801e098:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e09c:	2200      	movs	r2, #0
 801e09e:	729a      	strb	r2, [r3, #10]
 801e0a0:	2200      	movs	r2, #0
 801e0a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e0a6:	685b      	ldr	r3, [r3, #4]
 801e0a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e0aa:	e00d      	b.n	801e0c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801e0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e0ae:	685b      	ldr	r3, [r3, #4]
 801e0b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e0b2:	2114      	movs	r1, #20
 801e0b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e0b6:	f7f4 ff8f 	bl	8012fd8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801e0ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e0bc:	6878      	ldr	r0, [r7, #4]
 801e0be:	f7f5 f8df 	bl	8013280 <pbuf_cat>
      r = iprh->next_pbuf;
 801e0c2:	68fb      	ldr	r3, [r7, #12]
 801e0c4:	681b      	ldr	r3, [r3, #0]
 801e0c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801e0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	d1ee      	bne.n	801e0ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e0ce:	4b31      	ldr	r3, [pc, #196]	; (801e194 <ip4_reass+0x300>)
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e0d4:	429a      	cmp	r2, r3
 801e0d6:	d102      	bne.n	801e0de <ip4_reass+0x24a>
      ipr_prev = NULL;
 801e0d8:	2300      	movs	r3, #0
 801e0da:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e0dc:	e010      	b.n	801e100 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e0de:	4b2d      	ldr	r3, [pc, #180]	; (801e194 <ip4_reass+0x300>)
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e0e4:	e007      	b.n	801e0f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e0ec:	429a      	cmp	r2, r3
 801e0ee:	d006      	beq.n	801e0fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d1f4      	bne.n	801e0e6 <ip4_reass+0x252>
 801e0fc:	e000      	b.n	801e100 <ip4_reass+0x26c>
          break;
 801e0fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e104:	f7ff fd2e 	bl	801db64 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e108:	6878      	ldr	r0, [r7, #4]
 801e10a:	f7f5 f879 	bl	8013200 <pbuf_clen>
 801e10e:	4603      	mov	r3, r0
 801e110:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e112:	4b1f      	ldr	r3, [pc, #124]	; (801e190 <ip4_reass+0x2fc>)
 801e114:	881b      	ldrh	r3, [r3, #0]
 801e116:	8c3a      	ldrh	r2, [r7, #32]
 801e118:	429a      	cmp	r2, r3
 801e11a:	d906      	bls.n	801e12a <ip4_reass+0x296>
 801e11c:	4b1e      	ldr	r3, [pc, #120]	; (801e198 <ip4_reass+0x304>)
 801e11e:	f240 229b 	movw	r2, #667	; 0x29b
 801e122:	491e      	ldr	r1, [pc, #120]	; (801e19c <ip4_reass+0x308>)
 801e124:	481e      	ldr	r0, [pc, #120]	; (801e1a0 <ip4_reass+0x30c>)
 801e126:	f001 fd47 	bl	801fbb8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e12a:	4b19      	ldr	r3, [pc, #100]	; (801e190 <ip4_reass+0x2fc>)
 801e12c:	881a      	ldrh	r2, [r3, #0]
 801e12e:	8c3b      	ldrh	r3, [r7, #32]
 801e130:	1ad3      	subs	r3, r2, r3
 801e132:	b29a      	uxth	r2, r3
 801e134:	4b16      	ldr	r3, [pc, #88]	; (801e190 <ip4_reass+0x2fc>)
 801e136:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	e03c      	b.n	801e1b6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e13c:	2300      	movs	r3, #0
 801e13e:	e03a      	b.n	801e1b6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801e140:	bf00      	nop
 801e142:	e000      	b.n	801e146 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801e144:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d106      	bne.n	801e15a <ip4_reass+0x2c6>
 801e14c:	4b12      	ldr	r3, [pc, #72]	; (801e198 <ip4_reass+0x304>)
 801e14e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801e152:	4914      	ldr	r1, [pc, #80]	; (801e1a4 <ip4_reass+0x310>)
 801e154:	4812      	ldr	r0, [pc, #72]	; (801e1a0 <ip4_reass+0x30c>)
 801e156:	f001 fd2f 	bl	801fbb8 <iprintf>
  if (ipr->p == NULL) {
 801e15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e15c:	685b      	ldr	r3, [r3, #4]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d124      	bne.n	801e1ac <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e162:	4b0c      	ldr	r3, [pc, #48]	; (801e194 <ip4_reass+0x300>)
 801e164:	681b      	ldr	r3, [r3, #0]
 801e166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e168:	429a      	cmp	r2, r3
 801e16a:	d006      	beq.n	801e17a <ip4_reass+0x2e6>
 801e16c:	4b0a      	ldr	r3, [pc, #40]	; (801e198 <ip4_reass+0x304>)
 801e16e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e172:	490d      	ldr	r1, [pc, #52]	; (801e1a8 <ip4_reass+0x314>)
 801e174:	480a      	ldr	r0, [pc, #40]	; (801e1a0 <ip4_reass+0x30c>)
 801e176:	f001 fd1f 	bl	801fbb8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e17a:	2100      	movs	r1, #0
 801e17c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e17e:	f7ff fcf1 	bl	801db64 <ip_reass_dequeue_datagram>
 801e182:	e014      	b.n	801e1ae <ip4_reass+0x31a>
    goto nullreturn;
 801e184:	bf00      	nop
 801e186:	e012      	b.n	801e1ae <ip4_reass+0x31a>
    goto nullreturn;
 801e188:	bf00      	nop
 801e18a:	e010      	b.n	801e1ae <ip4_reass+0x31a>
      goto nullreturn;
 801e18c:	bf00      	nop
 801e18e:	e00e      	b.n	801e1ae <ip4_reass+0x31a>
 801e190:	200060f0 	.word	0x200060f0
 801e194:	200060ec 	.word	0x200060ec
 801e198:	08024504 	.word	0x08024504
 801e19c:	08024674 	.word	0x08024674
 801e1a0:	0802454c 	.word	0x0802454c
 801e1a4:	08024690 	.word	0x08024690
 801e1a8:	0802469c 	.word	0x0802469c
  }

nullreturn:
 801e1ac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801e1ae:	6878      	ldr	r0, [r7, #4]
 801e1b0:	f7f4 ff98 	bl	80130e4 <pbuf_free>
  return NULL;
 801e1b4:	2300      	movs	r3, #0
}
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	3738      	adds	r7, #56	; 0x38
 801e1ba:	46bd      	mov	sp, r7
 801e1bc:	bd80      	pop	{r7, pc}
 801e1be:	bf00      	nop

0801e1c0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e1c0:	b580      	push	{r7, lr}
 801e1c2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e1c4:	2005      	movs	r0, #5
 801e1c6:	f7f4 f88b 	bl	80122e0 <memp_malloc>
 801e1ca:	4603      	mov	r3, r0
}
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	bd80      	pop	{r7, pc}

0801e1d0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e1d0:	b580      	push	{r7, lr}
 801e1d2:	b082      	sub	sp, #8
 801e1d4:	af00      	add	r7, sp, #0
 801e1d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d106      	bne.n	801e1ec <ip_frag_free_pbuf_custom_ref+0x1c>
 801e1de:	4b07      	ldr	r3, [pc, #28]	; (801e1fc <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e1e0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e1e4:	4906      	ldr	r1, [pc, #24]	; (801e200 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e1e6:	4807      	ldr	r0, [pc, #28]	; (801e204 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e1e8:	f001 fce6 	bl	801fbb8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e1ec:	6879      	ldr	r1, [r7, #4]
 801e1ee:	2005      	movs	r0, #5
 801e1f0:	f7f4 f8c8 	bl	8012384 <memp_free>
}
 801e1f4:	bf00      	nop
 801e1f6:	3708      	adds	r7, #8
 801e1f8:	46bd      	mov	sp, r7
 801e1fa:	bd80      	pop	{r7, pc}
 801e1fc:	08024504 	.word	0x08024504
 801e200:	080246bc 	.word	0x080246bc
 801e204:	0802454c 	.word	0x0802454c

0801e208 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e208:	b580      	push	{r7, lr}
 801e20a:	b084      	sub	sp, #16
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e214:	68fb      	ldr	r3, [r7, #12]
 801e216:	2b00      	cmp	r3, #0
 801e218:	d106      	bne.n	801e228 <ipfrag_free_pbuf_custom+0x20>
 801e21a:	4b11      	ldr	r3, [pc, #68]	; (801e260 <ipfrag_free_pbuf_custom+0x58>)
 801e21c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801e220:	4910      	ldr	r1, [pc, #64]	; (801e264 <ipfrag_free_pbuf_custom+0x5c>)
 801e222:	4811      	ldr	r0, [pc, #68]	; (801e268 <ipfrag_free_pbuf_custom+0x60>)
 801e224:	f001 fcc8 	bl	801fbb8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e228:	68fa      	ldr	r2, [r7, #12]
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	429a      	cmp	r2, r3
 801e22e:	d006      	beq.n	801e23e <ipfrag_free_pbuf_custom+0x36>
 801e230:	4b0b      	ldr	r3, [pc, #44]	; (801e260 <ipfrag_free_pbuf_custom+0x58>)
 801e232:	f240 22cf 	movw	r2, #719	; 0x2cf
 801e236:	490d      	ldr	r1, [pc, #52]	; (801e26c <ipfrag_free_pbuf_custom+0x64>)
 801e238:	480b      	ldr	r0, [pc, #44]	; (801e268 <ipfrag_free_pbuf_custom+0x60>)
 801e23a:	f001 fcbd 	bl	801fbb8 <iprintf>
  if (pcr->original != NULL) {
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	695b      	ldr	r3, [r3, #20]
 801e242:	2b00      	cmp	r3, #0
 801e244:	d004      	beq.n	801e250 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e246:	68fb      	ldr	r3, [r7, #12]
 801e248:	695b      	ldr	r3, [r3, #20]
 801e24a:	4618      	mov	r0, r3
 801e24c:	f7f4 ff4a 	bl	80130e4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e250:	68f8      	ldr	r0, [r7, #12]
 801e252:	f7ff ffbd 	bl	801e1d0 <ip_frag_free_pbuf_custom_ref>
}
 801e256:	bf00      	nop
 801e258:	3710      	adds	r7, #16
 801e25a:	46bd      	mov	sp, r7
 801e25c:	bd80      	pop	{r7, pc}
 801e25e:	bf00      	nop
 801e260:	08024504 	.word	0x08024504
 801e264:	080246c8 	.word	0x080246c8
 801e268:	0802454c 	.word	0x0802454c
 801e26c:	080246d4 	.word	0x080246d4

0801e270 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e270:	b580      	push	{r7, lr}
 801e272:	b094      	sub	sp, #80	; 0x50
 801e274:	af02      	add	r7, sp, #8
 801e276:	60f8      	str	r0, [r7, #12]
 801e278:	60b9      	str	r1, [r7, #8]
 801e27a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e27c:	2300      	movs	r3, #0
 801e27e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e282:	68bb      	ldr	r3, [r7, #8]
 801e284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e286:	3b14      	subs	r3, #20
 801e288:	2b00      	cmp	r3, #0
 801e28a:	da00      	bge.n	801e28e <ip4_frag+0x1e>
 801e28c:	3307      	adds	r3, #7
 801e28e:	10db      	asrs	r3, r3, #3
 801e290:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e292:	2314      	movs	r3, #20
 801e294:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	685b      	ldr	r3, [r3, #4]
 801e29a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801e29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e29e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2a2:	781b      	ldrb	r3, [r3, #0]
 801e2a4:	f003 030f 	and.w	r3, r3, #15
 801e2a8:	b2db      	uxtb	r3, r3
 801e2aa:	009b      	lsls	r3, r3, #2
 801e2ac:	b2db      	uxtb	r3, r3
 801e2ae:	2b14      	cmp	r3, #20
 801e2b0:	d002      	beq.n	801e2b8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e2b2:	f06f 0305 	mvn.w	r3, #5
 801e2b6:	e110      	b.n	801e4da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	895b      	ldrh	r3, [r3, #10]
 801e2bc:	2b13      	cmp	r3, #19
 801e2be:	d809      	bhi.n	801e2d4 <ip4_frag+0x64>
 801e2c0:	4b88      	ldr	r3, [pc, #544]	; (801e4e4 <ip4_frag+0x274>)
 801e2c2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801e2c6:	4988      	ldr	r1, [pc, #544]	; (801e4e8 <ip4_frag+0x278>)
 801e2c8:	4888      	ldr	r0, [pc, #544]	; (801e4ec <ip4_frag+0x27c>)
 801e2ca:	f001 fc75 	bl	801fbb8 <iprintf>
 801e2ce:	f06f 0305 	mvn.w	r3, #5
 801e2d2:	e102      	b.n	801e4da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2d6:	88db      	ldrh	r3, [r3, #6]
 801e2d8:	b29b      	uxth	r3, r3
 801e2da:	4618      	mov	r0, r3
 801e2dc:	f7f3 fb4a 	bl	8011974 <lwip_htons>
 801e2e0:	4603      	mov	r3, r0
 801e2e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801e2e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e2e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e2ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e2ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e2f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e2f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	891b      	ldrh	r3, [r3, #8]
 801e2fa:	3b14      	subs	r3, #20
 801e2fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801e300:	e0e1      	b.n	801e4c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e302:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e304:	00db      	lsls	r3, r3, #3
 801e306:	b29b      	uxth	r3, r3
 801e308:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e30c:	4293      	cmp	r3, r2
 801e30e:	bf28      	it	cs
 801e310:	4613      	movcs	r3, r2
 801e312:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e314:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e318:	2114      	movs	r1, #20
 801e31a:	200e      	movs	r0, #14
 801e31c:	f7f4 fbfe 	bl	8012b1c <pbuf_alloc>
 801e320:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801e322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e324:	2b00      	cmp	r3, #0
 801e326:	f000 80d5 	beq.w	801e4d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e32c:	895b      	ldrh	r3, [r3, #10]
 801e32e:	2b13      	cmp	r3, #19
 801e330:	d806      	bhi.n	801e340 <ip4_frag+0xd0>
 801e332:	4b6c      	ldr	r3, [pc, #432]	; (801e4e4 <ip4_frag+0x274>)
 801e334:	f44f 7249 	mov.w	r2, #804	; 0x324
 801e338:	496d      	ldr	r1, [pc, #436]	; (801e4f0 <ip4_frag+0x280>)
 801e33a:	486c      	ldr	r0, [pc, #432]	; (801e4ec <ip4_frag+0x27c>)
 801e33c:	f001 fc3c 	bl	801fbb8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e342:	685b      	ldr	r3, [r3, #4]
 801e344:	2214      	movs	r2, #20
 801e346:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e348:	4618      	mov	r0, r3
 801e34a:	f001 fbc4 	bl	801fad6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e350:	685b      	ldr	r3, [r3, #4]
 801e352:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801e354:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e356:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801e35a:	e064      	b.n	801e426 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e35c:	68fb      	ldr	r3, [r7, #12]
 801e35e:	895a      	ldrh	r2, [r3, #10]
 801e360:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e362:	1ad3      	subs	r3, r2, r3
 801e364:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e366:	68fb      	ldr	r3, [r7, #12]
 801e368:	895b      	ldrh	r3, [r3, #10]
 801e36a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e36c:	429a      	cmp	r2, r3
 801e36e:	d906      	bls.n	801e37e <ip4_frag+0x10e>
 801e370:	4b5c      	ldr	r3, [pc, #368]	; (801e4e4 <ip4_frag+0x274>)
 801e372:	f240 322d 	movw	r2, #813	; 0x32d
 801e376:	495f      	ldr	r1, [pc, #380]	; (801e4f4 <ip4_frag+0x284>)
 801e378:	485c      	ldr	r0, [pc, #368]	; (801e4ec <ip4_frag+0x27c>)
 801e37a:	f001 fc1d 	bl	801fbb8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e37e:	8bfa      	ldrh	r2, [r7, #30]
 801e380:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e384:	4293      	cmp	r3, r2
 801e386:	bf28      	it	cs
 801e388:	4613      	movcs	r3, r2
 801e38a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e38e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e392:	2b00      	cmp	r3, #0
 801e394:	d105      	bne.n	801e3a2 <ip4_frag+0x132>
        poff = 0;
 801e396:	2300      	movs	r3, #0
 801e398:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e39a:	68fb      	ldr	r3, [r7, #12]
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	60fb      	str	r3, [r7, #12]
        continue;
 801e3a0:	e041      	b.n	801e426 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e3a2:	f7ff ff0d 	bl	801e1c0 <ip_frag_alloc_pbuf_custom_ref>
 801e3a6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e3a8:	69bb      	ldr	r3, [r7, #24]
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d103      	bne.n	801e3b6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e3ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e3b0:	f7f4 fe98 	bl	80130e4 <pbuf_free>
        goto memerr;
 801e3b4:	e08f      	b.n	801e4d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e3b6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e3bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e3be:	4413      	add	r3, r2
 801e3c0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801e3c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e3c8:	9201      	str	r2, [sp, #4]
 801e3ca:	9300      	str	r3, [sp, #0]
 801e3cc:	4603      	mov	r3, r0
 801e3ce:	2241      	movs	r2, #65	; 0x41
 801e3d0:	2000      	movs	r0, #0
 801e3d2:	f7f4 fccd 	bl	8012d70 <pbuf_alloced_custom>
 801e3d6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e3d8:	697b      	ldr	r3, [r7, #20]
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d106      	bne.n	801e3ec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e3de:	69b8      	ldr	r0, [r7, #24]
 801e3e0:	f7ff fef6 	bl	801e1d0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e3e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e3e6:	f7f4 fe7d 	bl	80130e4 <pbuf_free>
        goto memerr;
 801e3ea:	e074      	b.n	801e4d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801e3ec:	68f8      	ldr	r0, [r7, #12]
 801e3ee:	f7f4 ff1f 	bl	8013230 <pbuf_ref>
      pcr->original = p;
 801e3f2:	69bb      	ldr	r3, [r7, #24]
 801e3f4:	68fa      	ldr	r2, [r7, #12]
 801e3f6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e3f8:	69bb      	ldr	r3, [r7, #24]
 801e3fa:	4a3f      	ldr	r2, [pc, #252]	; (801e4f8 <ip4_frag+0x288>)
 801e3fc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e3fe:	6979      	ldr	r1, [r7, #20]
 801e400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e402:	f7f4 ff3d 	bl	8013280 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e406:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801e40a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e40e:	1ad3      	subs	r3, r2, r3
 801e410:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801e414:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d004      	beq.n	801e426 <ip4_frag+0x1b6>
        poff = 0;
 801e41c:	2300      	movs	r3, #0
 801e41e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e420:	68fb      	ldr	r3, [r7, #12]
 801e422:	681b      	ldr	r3, [r3, #0]
 801e424:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e426:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d196      	bne.n	801e35c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e42e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e430:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e434:	4413      	add	r3, r2
 801e436:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e438:	68bb      	ldr	r3, [r7, #8]
 801e43a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e43c:	f1a3 0213 	sub.w	r2, r3, #19
 801e440:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e444:	429a      	cmp	r2, r3
 801e446:	bfcc      	ite	gt
 801e448:	2301      	movgt	r3, #1
 801e44a:	2300      	movle	r3, #0
 801e44c:	b2db      	uxtb	r3, r3
 801e44e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e450:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e458:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801e45a:	6a3b      	ldr	r3, [r7, #32]
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d002      	beq.n	801e466 <ip4_frag+0x1f6>
 801e460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e462:	2b00      	cmp	r3, #0
 801e464:	d003      	beq.n	801e46e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801e466:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e46c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801e46e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e470:	4618      	mov	r0, r3
 801e472:	f7f3 fa7f 	bl	8011974 <lwip_htons>
 801e476:	4603      	mov	r3, r0
 801e478:	461a      	mov	r2, r3
 801e47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e47c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801e47e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e480:	3314      	adds	r3, #20
 801e482:	b29b      	uxth	r3, r3
 801e484:	4618      	mov	r0, r3
 801e486:	f7f3 fa75 	bl	8011974 <lwip_htons>
 801e48a:	4603      	mov	r3, r0
 801e48c:	461a      	mov	r2, r3
 801e48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e490:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801e492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e494:	2200      	movs	r2, #0
 801e496:	729a      	strb	r2, [r3, #10]
 801e498:	2200      	movs	r2, #0
 801e49a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e49c:	68bb      	ldr	r3, [r7, #8]
 801e49e:	695b      	ldr	r3, [r3, #20]
 801e4a0:	687a      	ldr	r2, [r7, #4]
 801e4a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e4a4:	68b8      	ldr	r0, [r7, #8]
 801e4a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e4a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e4aa:	f7f4 fe1b 	bl	80130e4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e4ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e4b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e4b4:	1ad3      	subs	r3, r2, r3
 801e4b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801e4ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801e4be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e4c0:	4413      	add	r3, r2
 801e4c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801e4c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	f47f af19 	bne.w	801e302 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	e002      	b.n	801e4da <ip4_frag+0x26a>
      goto memerr;
 801e4d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e4d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e4da:	4618      	mov	r0, r3
 801e4dc:	3748      	adds	r7, #72	; 0x48
 801e4de:	46bd      	mov	sp, r7
 801e4e0:	bd80      	pop	{r7, pc}
 801e4e2:	bf00      	nop
 801e4e4:	08024504 	.word	0x08024504
 801e4e8:	080246e0 	.word	0x080246e0
 801e4ec:	0802454c 	.word	0x0802454c
 801e4f0:	080246fc 	.word	0x080246fc
 801e4f4:	0802471c 	.word	0x0802471c
 801e4f8:	0801e209 	.word	0x0801e209

0801e4fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e4fc:	b580      	push	{r7, lr}
 801e4fe:	b086      	sub	sp, #24
 801e500:	af00      	add	r7, sp, #0
 801e502:	6078      	str	r0, [r7, #4]
 801e504:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e506:	230e      	movs	r3, #14
 801e508:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	895b      	ldrh	r3, [r3, #10]
 801e50e:	2b0e      	cmp	r3, #14
 801e510:	d96e      	bls.n	801e5f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	7bdb      	ldrb	r3, [r3, #15]
 801e516:	2b00      	cmp	r3, #0
 801e518:	d106      	bne.n	801e528 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801e51a:	683b      	ldr	r3, [r7, #0]
 801e51c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e520:	3301      	adds	r3, #1
 801e522:	b2da      	uxtb	r2, r3
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	685b      	ldr	r3, [r3, #4]
 801e52c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e52e:	693b      	ldr	r3, [r7, #16]
 801e530:	7b1a      	ldrb	r2, [r3, #12]
 801e532:	7b5b      	ldrb	r3, [r3, #13]
 801e534:	021b      	lsls	r3, r3, #8
 801e536:	4313      	orrs	r3, r2
 801e538:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e53a:	693b      	ldr	r3, [r7, #16]
 801e53c:	781b      	ldrb	r3, [r3, #0]
 801e53e:	f003 0301 	and.w	r3, r3, #1
 801e542:	2b00      	cmp	r3, #0
 801e544:	d023      	beq.n	801e58e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e546:	693b      	ldr	r3, [r7, #16]
 801e548:	781b      	ldrb	r3, [r3, #0]
 801e54a:	2b01      	cmp	r3, #1
 801e54c:	d10f      	bne.n	801e56e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e54e:	693b      	ldr	r3, [r7, #16]
 801e550:	785b      	ldrb	r3, [r3, #1]
 801e552:	2b00      	cmp	r3, #0
 801e554:	d11b      	bne.n	801e58e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e556:	693b      	ldr	r3, [r7, #16]
 801e558:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e55a:	2b5e      	cmp	r3, #94	; 0x5e
 801e55c:	d117      	bne.n	801e58e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	7b5b      	ldrb	r3, [r3, #13]
 801e562:	f043 0310 	orr.w	r3, r3, #16
 801e566:	b2da      	uxtb	r2, r3
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	735a      	strb	r2, [r3, #13]
 801e56c:	e00f      	b.n	801e58e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e56e:	693b      	ldr	r3, [r7, #16]
 801e570:	2206      	movs	r2, #6
 801e572:	4928      	ldr	r1, [pc, #160]	; (801e614 <ethernet_input+0x118>)
 801e574:	4618      	mov	r0, r3
 801e576:	f001 faa0 	bl	801faba <memcmp>
 801e57a:	4603      	mov	r3, r0
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	d106      	bne.n	801e58e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	7b5b      	ldrb	r3, [r3, #13]
 801e584:	f043 0308 	orr.w	r3, r3, #8
 801e588:	b2da      	uxtb	r2, r3
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e58e:	89fb      	ldrh	r3, [r7, #14]
 801e590:	2b08      	cmp	r3, #8
 801e592:	d003      	beq.n	801e59c <ethernet_input+0xa0>
 801e594:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801e598:	d014      	beq.n	801e5c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e59a:	e032      	b.n	801e602 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e59c:	683b      	ldr	r3, [r7, #0]
 801e59e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e5a2:	f003 0308 	and.w	r3, r3, #8
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d024      	beq.n	801e5f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e5aa:	8afb      	ldrh	r3, [r7, #22]
 801e5ac:	4619      	mov	r1, r3
 801e5ae:	6878      	ldr	r0, [r7, #4]
 801e5b0:	f7f4 fd12 	bl	8012fd8 <pbuf_remove_header>
 801e5b4:	4603      	mov	r3, r0
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	d11e      	bne.n	801e5f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801e5ba:	6839      	ldr	r1, [r7, #0]
 801e5bc:	6878      	ldr	r0, [r7, #4]
 801e5be:	f7fe ff09 	bl	801d3d4 <ip4_input>
      break;
 801e5c2:	e013      	b.n	801e5ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e5c4:	683b      	ldr	r3, [r7, #0]
 801e5c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e5ca:	f003 0308 	and.w	r3, r3, #8
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d014      	beq.n	801e5fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e5d2:	8afb      	ldrh	r3, [r7, #22]
 801e5d4:	4619      	mov	r1, r3
 801e5d6:	6878      	ldr	r0, [r7, #4]
 801e5d8:	f7f4 fcfe 	bl	8012fd8 <pbuf_remove_header>
 801e5dc:	4603      	mov	r3, r0
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	d10e      	bne.n	801e600 <ethernet_input+0x104>
        etharp_input(p, netif);
 801e5e2:	6839      	ldr	r1, [r7, #0]
 801e5e4:	6878      	ldr	r0, [r7, #4]
 801e5e6:	f7fe f8a5 	bl	801c734 <etharp_input>
      break;
 801e5ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e5ec:	2300      	movs	r3, #0
 801e5ee:	e00c      	b.n	801e60a <ethernet_input+0x10e>
    goto free_and_return;
 801e5f0:	bf00      	nop
 801e5f2:	e006      	b.n	801e602 <ethernet_input+0x106>
        goto free_and_return;
 801e5f4:	bf00      	nop
 801e5f6:	e004      	b.n	801e602 <ethernet_input+0x106>
        goto free_and_return;
 801e5f8:	bf00      	nop
 801e5fa:	e002      	b.n	801e602 <ethernet_input+0x106>
        goto free_and_return;
 801e5fc:	bf00      	nop
 801e5fe:	e000      	b.n	801e602 <ethernet_input+0x106>
        goto free_and_return;
 801e600:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e602:	6878      	ldr	r0, [r7, #4]
 801e604:	f7f4 fd6e 	bl	80130e4 <pbuf_free>
  return ERR_OK;
 801e608:	2300      	movs	r3, #0
}
 801e60a:	4618      	mov	r0, r3
 801e60c:	3718      	adds	r7, #24
 801e60e:	46bd      	mov	sp, r7
 801e610:	bd80      	pop	{r7, pc}
 801e612:	bf00      	nop
 801e614:	08024a50 	.word	0x08024a50

0801e618 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e618:	b580      	push	{r7, lr}
 801e61a:	b086      	sub	sp, #24
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	60f8      	str	r0, [r7, #12]
 801e620:	60b9      	str	r1, [r7, #8]
 801e622:	607a      	str	r2, [r7, #4]
 801e624:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e626:	8c3b      	ldrh	r3, [r7, #32]
 801e628:	4618      	mov	r0, r3
 801e62a:	f7f3 f9a3 	bl	8011974 <lwip_htons>
 801e62e:	4603      	mov	r3, r0
 801e630:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e632:	210e      	movs	r1, #14
 801e634:	68b8      	ldr	r0, [r7, #8]
 801e636:	f7f4 fcbf 	bl	8012fb8 <pbuf_add_header>
 801e63a:	4603      	mov	r3, r0
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d125      	bne.n	801e68c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e640:	68bb      	ldr	r3, [r7, #8]
 801e642:	685b      	ldr	r3, [r3, #4]
 801e644:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e646:	693b      	ldr	r3, [r7, #16]
 801e648:	8afa      	ldrh	r2, [r7, #22]
 801e64a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e64c:	693b      	ldr	r3, [r7, #16]
 801e64e:	2206      	movs	r2, #6
 801e650:	6839      	ldr	r1, [r7, #0]
 801e652:	4618      	mov	r0, r3
 801e654:	f001 fa3f 	bl	801fad6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e658:	693b      	ldr	r3, [r7, #16]
 801e65a:	3306      	adds	r3, #6
 801e65c:	2206      	movs	r2, #6
 801e65e:	6879      	ldr	r1, [r7, #4]
 801e660:	4618      	mov	r0, r3
 801e662:	f001 fa38 	bl	801fad6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e666:	68fb      	ldr	r3, [r7, #12]
 801e668:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e66c:	2b06      	cmp	r3, #6
 801e66e:	d006      	beq.n	801e67e <ethernet_output+0x66>
 801e670:	4b0a      	ldr	r3, [pc, #40]	; (801e69c <ethernet_output+0x84>)
 801e672:	f44f 7299 	mov.w	r2, #306	; 0x132
 801e676:	490a      	ldr	r1, [pc, #40]	; (801e6a0 <ethernet_output+0x88>)
 801e678:	480a      	ldr	r0, [pc, #40]	; (801e6a4 <ethernet_output+0x8c>)
 801e67a:	f001 fa9d 	bl	801fbb8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	699b      	ldr	r3, [r3, #24]
 801e682:	68b9      	ldr	r1, [r7, #8]
 801e684:	68f8      	ldr	r0, [r7, #12]
 801e686:	4798      	blx	r3
 801e688:	4603      	mov	r3, r0
 801e68a:	e002      	b.n	801e692 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801e68c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801e68e:	f06f 0301 	mvn.w	r3, #1
}
 801e692:	4618      	mov	r0, r3
 801e694:	3718      	adds	r7, #24
 801e696:	46bd      	mov	sp, r7
 801e698:	bd80      	pop	{r7, pc}
 801e69a:	bf00      	nop
 801e69c:	0802472c 	.word	0x0802472c
 801e6a0:	08024764 	.word	0x08024764
 801e6a4:	08024798 	.word	0x08024798

0801e6a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e6a8:	b580      	push	{r7, lr}
 801e6aa:	b082      	sub	sp, #8
 801e6ac:	af00      	add	r7, sp, #0
 801e6ae:	6078      	str	r0, [r7, #4]
 801e6b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801e6b2:	683b      	ldr	r3, [r7, #0]
 801e6b4:	2200      	movs	r2, #0
 801e6b6:	2104      	movs	r1, #4
 801e6b8:	4618      	mov	r0, r3
 801e6ba:	f7ed fa65 	bl	800bb88 <osMessageQueueNew>
 801e6be:	4602      	mov	r2, r0
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	681b      	ldr	r3, [r3, #0]
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d102      	bne.n	801e6d2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801e6cc:	f04f 33ff 	mov.w	r3, #4294967295
 801e6d0:	e000      	b.n	801e6d4 <sys_mbox_new+0x2c>

  return ERR_OK;
 801e6d2:	2300      	movs	r3, #0
}
 801e6d4:	4618      	mov	r0, r3
 801e6d6:	3708      	adds	r7, #8
 801e6d8:	46bd      	mov	sp, r7
 801e6da:	bd80      	pop	{r7, pc}

0801e6dc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e6dc:	b580      	push	{r7, lr}
 801e6de:	b082      	sub	sp, #8
 801e6e0:	af00      	add	r7, sp, #0
 801e6e2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	681b      	ldr	r3, [r3, #0]
 801e6e8:	4618      	mov	r0, r3
 801e6ea:	f7ed fb7f 	bl	800bdec <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	4618      	mov	r0, r3
 801e6f4:	f7ed fb9a 	bl	800be2c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801e6f8:	bf00      	nop
 801e6fa:	3708      	adds	r7, #8
 801e6fc:	46bd      	mov	sp, r7
 801e6fe:	bd80      	pop	{r7, pc}

0801e700 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e700:	b580      	push	{r7, lr}
 801e702:	b084      	sub	sp, #16
 801e704:	af00      	add	r7, sp, #0
 801e706:	6078      	str	r0, [r7, #4]
 801e708:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	6818      	ldr	r0, [r3, #0]
 801e70e:	4639      	mov	r1, r7
 801e710:	2300      	movs	r3, #0
 801e712:	2200      	movs	r2, #0
 801e714:	f7ed faac 	bl	800bc70 <osMessageQueuePut>
 801e718:	4603      	mov	r3, r0
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	d102      	bne.n	801e724 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801e71e:	2300      	movs	r3, #0
 801e720:	73fb      	strb	r3, [r7, #15]
 801e722:	e001      	b.n	801e728 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e724:	23ff      	movs	r3, #255	; 0xff
 801e726:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801e728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e72c:	4618      	mov	r0, r3
 801e72e:	3710      	adds	r7, #16
 801e730:	46bd      	mov	sp, r7
 801e732:	bd80      	pop	{r7, pc}

0801e734 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e734:	b580      	push	{r7, lr}
 801e736:	b086      	sub	sp, #24
 801e738:	af00      	add	r7, sp, #0
 801e73a:	60f8      	str	r0, [r7, #12]
 801e73c:	60b9      	str	r1, [r7, #8]
 801e73e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801e740:	f7ec fe4e 	bl	800b3e0 <osKernelGetTickCount>
 801e744:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d013      	beq.n	801e774 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801e74c:	68fb      	ldr	r3, [r7, #12]
 801e74e:	6818      	ldr	r0, [r3, #0]
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	2200      	movs	r2, #0
 801e754:	68b9      	ldr	r1, [r7, #8]
 801e756:	f7ed faeb 	bl	800bd30 <osMessageQueueGet>
 801e75a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801e75c:	693b      	ldr	r3, [r7, #16]
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d105      	bne.n	801e76e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801e762:	f7ec fe3d 	bl	800b3e0 <osKernelGetTickCount>
 801e766:	4602      	mov	r2, r0
 801e768:	697b      	ldr	r3, [r7, #20]
 801e76a:	1ad3      	subs	r3, r2, r3
 801e76c:	e00f      	b.n	801e78e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e76e:	f04f 33ff 	mov.w	r3, #4294967295
 801e772:	e00c      	b.n	801e78e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801e774:	68fb      	ldr	r3, [r7, #12]
 801e776:	6818      	ldr	r0, [r3, #0]
 801e778:	f04f 33ff 	mov.w	r3, #4294967295
 801e77c:	2200      	movs	r2, #0
 801e77e:	68b9      	ldr	r1, [r7, #8]
 801e780:	f7ed fad6 	bl	800bd30 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801e784:	f7ec fe2c 	bl	800b3e0 <osKernelGetTickCount>
 801e788:	4602      	mov	r2, r0
 801e78a:	697b      	ldr	r3, [r7, #20]
 801e78c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801e78e:	4618      	mov	r0, r3
 801e790:	3718      	adds	r7, #24
 801e792:	46bd      	mov	sp, r7
 801e794:	bd80      	pop	{r7, pc}

0801e796 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801e796:	b580      	push	{r7, lr}
 801e798:	b082      	sub	sp, #8
 801e79a:	af00      	add	r7, sp, #0
 801e79c:	6078      	str	r0, [r7, #4]
 801e79e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	6818      	ldr	r0, [r3, #0]
 801e7a4:	2300      	movs	r3, #0
 801e7a6:	2200      	movs	r2, #0
 801e7a8:	6839      	ldr	r1, [r7, #0]
 801e7aa:	f7ed fac1 	bl	800bd30 <osMessageQueueGet>
 801e7ae:	4603      	mov	r3, r0
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d101      	bne.n	801e7b8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801e7b4:	2300      	movs	r3, #0
 801e7b6:	e001      	b.n	801e7bc <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801e7b8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801e7bc:	4618      	mov	r0, r3
 801e7be:	3708      	adds	r7, #8
 801e7c0:	46bd      	mov	sp, r7
 801e7c2:	bd80      	pop	{r7, pc}

0801e7c4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e7c4:	b480      	push	{r7}
 801e7c6:	b083      	sub	sp, #12
 801e7c8:	af00      	add	r7, sp, #0
 801e7ca:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	d101      	bne.n	801e7d8 <sys_mbox_valid+0x14>
    return 0;
 801e7d4:	2300      	movs	r3, #0
 801e7d6:	e000      	b.n	801e7da <sys_mbox_valid+0x16>
  else
    return 1;
 801e7d8:	2301      	movs	r3, #1
}
 801e7da:	4618      	mov	r0, r3
 801e7dc:	370c      	adds	r7, #12
 801e7de:	46bd      	mov	sp, r7
 801e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7e4:	4770      	bx	lr

0801e7e6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801e7e6:	b480      	push	{r7}
 801e7e8:	b083      	sub	sp, #12
 801e7ea:	af00      	add	r7, sp, #0
 801e7ec:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	2200      	movs	r2, #0
 801e7f2:	601a      	str	r2, [r3, #0]
}
 801e7f4:	bf00      	nop
 801e7f6:	370c      	adds	r7, #12
 801e7f8:	46bd      	mov	sp, r7
 801e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7fe:	4770      	bx	lr

0801e800 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801e800:	b580      	push	{r7, lr}
 801e802:	b082      	sub	sp, #8
 801e804:	af00      	add	r7, sp, #0
 801e806:	6078      	str	r0, [r7, #4]
 801e808:	460b      	mov	r3, r1
 801e80a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801e80c:	78fb      	ldrb	r3, [r7, #3]
 801e80e:	2200      	movs	r2, #0
 801e810:	4619      	mov	r1, r3
 801e812:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e816:	f7ed f873 	bl	800b900 <osSemaphoreNew>
 801e81a:	4602      	mov	r2, r0
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	2b00      	cmp	r3, #0
 801e826:	d102      	bne.n	801e82e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e828:	f04f 33ff 	mov.w	r3, #4294967295
 801e82c:	e009      	b.n	801e842 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801e82e:	78fb      	ldrb	r3, [r7, #3]
 801e830:	2b00      	cmp	r3, #0
 801e832:	d105      	bne.n	801e840 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	681b      	ldr	r3, [r3, #0]
 801e838:	2100      	movs	r1, #0
 801e83a:	4618      	mov	r0, r3
 801e83c:	f7ed f8ea 	bl	800ba14 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e840:	2300      	movs	r3, #0
}
 801e842:	4618      	mov	r0, r3
 801e844:	3708      	adds	r7, #8
 801e846:	46bd      	mov	sp, r7
 801e848:	bd80      	pop	{r7, pc}

0801e84a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e84a:	b580      	push	{r7, lr}
 801e84c:	b084      	sub	sp, #16
 801e84e:	af00      	add	r7, sp, #0
 801e850:	6078      	str	r0, [r7, #4]
 801e852:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801e854:	f7ec fdc4 	bl	800b3e0 <osKernelGetTickCount>
 801e858:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801e85a:	683b      	ldr	r3, [r7, #0]
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	d011      	beq.n	801e884 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801e860:	687b      	ldr	r3, [r7, #4]
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	6839      	ldr	r1, [r7, #0]
 801e866:	4618      	mov	r0, r3
 801e868:	f7ed f8d4 	bl	800ba14 <osSemaphoreAcquire>
 801e86c:	4603      	mov	r3, r0
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d105      	bne.n	801e87e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801e872:	f7ec fdb5 	bl	800b3e0 <osKernelGetTickCount>
 801e876:	4602      	mov	r2, r0
 801e878:	68fb      	ldr	r3, [r7, #12]
 801e87a:	1ad3      	subs	r3, r2, r3
 801e87c:	e012      	b.n	801e8a4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e87e:	f04f 33ff 	mov.w	r3, #4294967295
 801e882:	e00f      	b.n	801e8a4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801e884:	bf00      	nop
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	681b      	ldr	r3, [r3, #0]
 801e88a:	f04f 31ff 	mov.w	r1, #4294967295
 801e88e:	4618      	mov	r0, r3
 801e890:	f7ed f8c0 	bl	800ba14 <osSemaphoreAcquire>
 801e894:	4603      	mov	r3, r0
 801e896:	2b00      	cmp	r3, #0
 801e898:	d1f5      	bne.n	801e886 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801e89a:	f7ec fda1 	bl	800b3e0 <osKernelGetTickCount>
 801e89e:	4602      	mov	r2, r0
 801e8a0:	68fb      	ldr	r3, [r7, #12]
 801e8a2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801e8a4:	4618      	mov	r0, r3
 801e8a6:	3710      	adds	r7, #16
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	bd80      	pop	{r7, pc}

0801e8ac <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801e8ac:	b580      	push	{r7, lr}
 801e8ae:	b082      	sub	sp, #8
 801e8b0:	af00      	add	r7, sp, #0
 801e8b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	681b      	ldr	r3, [r3, #0]
 801e8b8:	4618      	mov	r0, r3
 801e8ba:	f7ed f8fd 	bl	800bab8 <osSemaphoreRelease>
}
 801e8be:	bf00      	nop
 801e8c0:	3708      	adds	r7, #8
 801e8c2:	46bd      	mov	sp, r7
 801e8c4:	bd80      	pop	{r7, pc}

0801e8c6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801e8c6:	b580      	push	{r7, lr}
 801e8c8:	b082      	sub	sp, #8
 801e8ca:	af00      	add	r7, sp, #0
 801e8cc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	4618      	mov	r0, r3
 801e8d4:	f7ed f934 	bl	800bb40 <osSemaphoreDelete>
}
 801e8d8:	bf00      	nop
 801e8da:	3708      	adds	r7, #8
 801e8dc:	46bd      	mov	sp, r7
 801e8de:	bd80      	pop	{r7, pc}

0801e8e0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801e8e0:	b480      	push	{r7}
 801e8e2:	b083      	sub	sp, #12
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d101      	bne.n	801e8f4 <sys_sem_valid+0x14>
    return 0;
 801e8f0:	2300      	movs	r3, #0
 801e8f2:	e000      	b.n	801e8f6 <sys_sem_valid+0x16>
  else
    return 1;
 801e8f4:	2301      	movs	r3, #1
}
 801e8f6:	4618      	mov	r0, r3
 801e8f8:	370c      	adds	r7, #12
 801e8fa:	46bd      	mov	sp, r7
 801e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e900:	4770      	bx	lr

0801e902 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801e902:	b480      	push	{r7}
 801e904:	b083      	sub	sp, #12
 801e906:	af00      	add	r7, sp, #0
 801e908:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	2200      	movs	r2, #0
 801e90e:	601a      	str	r2, [r3, #0]
}
 801e910:	bf00      	nop
 801e912:	370c      	adds	r7, #12
 801e914:	46bd      	mov	sp, r7
 801e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e91a:	4770      	bx	lr

0801e91c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e91c:	b580      	push	{r7, lr}
 801e91e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801e920:	2000      	movs	r0, #0
 801e922:	f7ec fedf 	bl	800b6e4 <osMutexNew>
 801e926:	4603      	mov	r3, r0
 801e928:	4a01      	ldr	r2, [pc, #4]	; (801e930 <sys_init+0x14>)
 801e92a:	6013      	str	r3, [r2, #0]
#endif
}
 801e92c:	bf00      	nop
 801e92e:	bd80      	pop	{r7, pc}
 801e930:	2000ea3c 	.word	0x2000ea3c

0801e934 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e934:	b580      	push	{r7, lr}
 801e936:	b082      	sub	sp, #8
 801e938:	af00      	add	r7, sp, #0
 801e93a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801e93c:	2000      	movs	r0, #0
 801e93e:	f7ec fed1 	bl	800b6e4 <osMutexNew>
 801e942:	4602      	mov	r2, r0
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	d102      	bne.n	801e956 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e950:	f04f 33ff 	mov.w	r3, #4294967295
 801e954:	e000      	b.n	801e958 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e956:	2300      	movs	r3, #0
}
 801e958:	4618      	mov	r0, r3
 801e95a:	3708      	adds	r7, #8
 801e95c:	46bd      	mov	sp, r7
 801e95e:	bd80      	pop	{r7, pc}

0801e960 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e960:	b580      	push	{r7, lr}
 801e962:	b082      	sub	sp, #8
 801e964:	af00      	add	r7, sp, #0
 801e966:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	f04f 31ff 	mov.w	r1, #4294967295
 801e970:	4618      	mov	r0, r3
 801e972:	f7ec ff3d 	bl	800b7f0 <osMutexAcquire>
#endif
}
 801e976:	bf00      	nop
 801e978:	3708      	adds	r7, #8
 801e97a:	46bd      	mov	sp, r7
 801e97c:	bd80      	pop	{r7, pc}

0801e97e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e97e:	b580      	push	{r7, lr}
 801e980:	b082      	sub	sp, #8
 801e982:	af00      	add	r7, sp, #0
 801e984:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	4618      	mov	r0, r3
 801e98c:	f7ec ff7b 	bl	800b886 <osMutexRelease>
}
 801e990:	bf00      	nop
 801e992:	3708      	adds	r7, #8
 801e994:	46bd      	mov	sp, r7
 801e996:	bd80      	pop	{r7, pc}

0801e998 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e998:	b580      	push	{r7, lr}
 801e99a:	b08e      	sub	sp, #56	; 0x38
 801e99c:	af00      	add	r7, sp, #0
 801e99e:	60f8      	str	r0, [r7, #12]
 801e9a0:	60b9      	str	r1, [r7, #8]
 801e9a2:	607a      	str	r2, [r7, #4]
 801e9a4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801e9a6:	f107 0314 	add.w	r3, r7, #20
 801e9aa:	2224      	movs	r2, #36	; 0x24
 801e9ac:	2100      	movs	r1, #0
 801e9ae:	4618      	mov	r0, r3
 801e9b0:	f001 f89f 	bl	801faf2 <memset>
 801e9b4:	68fb      	ldr	r3, [r7, #12]
 801e9b6:	617b      	str	r3, [r7, #20]
 801e9b8:	683b      	ldr	r3, [r7, #0]
 801e9ba:	62bb      	str	r3, [r7, #40]	; 0x28
 801e9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e9be:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801e9c0:	f107 0314 	add.w	r3, r7, #20
 801e9c4:	461a      	mov	r2, r3
 801e9c6:	6879      	ldr	r1, [r7, #4]
 801e9c8:	68b8      	ldr	r0, [r7, #8]
 801e9ca:	f7ec fd1e 	bl	800b40a <osThreadNew>
 801e9ce:	4603      	mov	r3, r0
#endif
}
 801e9d0:	4618      	mov	r0, r3
 801e9d2:	3738      	adds	r7, #56	; 0x38
 801e9d4:	46bd      	mov	sp, r7
 801e9d6:	bd80      	pop	{r7, pc}

0801e9d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e9d8:	b580      	push	{r7, lr}
 801e9da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801e9dc:	4b04      	ldr	r3, [pc, #16]	; (801e9f0 <sys_arch_protect+0x18>)
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	f04f 31ff 	mov.w	r1, #4294967295
 801e9e4:	4618      	mov	r0, r3
 801e9e6:	f7ec ff03 	bl	800b7f0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801e9ea:	2301      	movs	r3, #1
}
 801e9ec:	4618      	mov	r0, r3
 801e9ee:	bd80      	pop	{r7, pc}
 801e9f0:	2000ea3c 	.word	0x2000ea3c

0801e9f4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e9f4:	b580      	push	{r7, lr}
 801e9f6:	b082      	sub	sp, #8
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e9fc:	4b04      	ldr	r3, [pc, #16]	; (801ea10 <sys_arch_unprotect+0x1c>)
 801e9fe:	681b      	ldr	r3, [r3, #0]
 801ea00:	4618      	mov	r0, r3
 801ea02:	f7ec ff40 	bl	800b886 <osMutexRelease>
}
 801ea06:	bf00      	nop
 801ea08:	3708      	adds	r7, #8
 801ea0a:	46bd      	mov	sp, r7
 801ea0c:	bd80      	pop	{r7, pc}
 801ea0e:	bf00      	nop
 801ea10:	2000ea3c 	.word	0x2000ea3c

0801ea14 <slave_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void slave_crc16(modbus_slave *slave, uint8_t *buffer)
{
 801ea14:	b480      	push	{r7}
 801ea16:	b083      	sub	sp, #12
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
 801ea1c:	6039      	str	r1, [r7, #0]
    slave->crc_hi = 0xFF;
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	22ff      	movs	r2, #255	; 0xff
 801ea22:	719a      	strb	r2, [r3, #6]
    slave->crc_lo = 0xFF;
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	22ff      	movs	r2, #255	; 0xff
 801ea28:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 801ea2a:	e01c      	b.n	801ea66 <slave_crc16+0x52>
    {
        slave->buff_index = slave->crc_hi ^ *buffer++;
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	799a      	ldrb	r2, [r3, #6]
 801ea30:	683b      	ldr	r3, [r7, #0]
 801ea32:	1c59      	adds	r1, r3, #1
 801ea34:	6039      	str	r1, [r7, #0]
 801ea36:	781b      	ldrb	r3, [r3, #0]
 801ea38:	4053      	eors	r3, r2
 801ea3a:	b2db      	uxtb	r3, r3
 801ea3c:	b29a      	uxth	r2, r3
 801ea3e:	687b      	ldr	r3, [r7, #4]
 801ea40:	815a      	strh	r2, [r3, #10]
        slave->crc_hi = slave->crc_lo ^ crc_hi[slave->buff_index];
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	79da      	ldrb	r2, [r3, #7]
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	895b      	ldrh	r3, [r3, #10]
 801ea4a:	4619      	mov	r1, r3
 801ea4c:	4b0d      	ldr	r3, [pc, #52]	; (801ea84 <slave_crc16+0x70>)
 801ea4e:	5c5b      	ldrb	r3, [r3, r1]
 801ea50:	4053      	eors	r3, r2
 801ea52:	b2da      	uxtb	r2, r3
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	719a      	strb	r2, [r3, #6]
        slave->crc_lo = crc_lo[slave->buff_index];
 801ea58:	687b      	ldr	r3, [r7, #4]
 801ea5a:	895b      	ldrh	r3, [r3, #10]
 801ea5c:	461a      	mov	r2, r3
 801ea5e:	4b0a      	ldr	r3, [pc, #40]	; (801ea88 <slave_crc16+0x74>)
 801ea60:	5c9a      	ldrb	r2, [r3, r2]
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	891b      	ldrh	r3, [r3, #8]
 801ea6a:	1e5a      	subs	r2, r3, #1
 801ea6c:	b291      	uxth	r1, r2
 801ea6e:	687a      	ldr	r2, [r7, #4]
 801ea70:	8111      	strh	r1, [r2, #8]
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d1da      	bne.n	801ea2c <slave_crc16+0x18>
    }
}
 801ea76:	bf00      	nop
 801ea78:	bf00      	nop
 801ea7a:	370c      	adds	r7, #12
 801ea7c:	46bd      	mov	sp, r7
 801ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea82:	4770      	bx	lr
 801ea84:	08024a60 	.word	0x08024a60
 801ea88:	08024b60 	.word	0x08024b60

0801ea8c <slave_validate_cmd>:

static osStatus_t slave_validate_cmd(modbus_slave *slave)
{
 801ea8c:	b580      	push	{r7, lr}
 801ea8e:	b082      	sub	sp, #8
 801ea90:	af00      	add	r7, sp, #0
 801ea92:	6078      	str	r0, [r7, #4]
    if (slave->rx_len < 8 || slave->rx_buf[0] != slave->slave_id)
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801ea9a:	2b07      	cmp	r3, #7
 801ea9c:	d905      	bls.n	801eaaa <slave_validate_cmd+0x1e>
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	7b1a      	ldrb	r2, [r3, #12]
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	791b      	ldrb	r3, [r3, #4]
 801eaa6:	429a      	cmp	r2, r3
 801eaa8:	d002      	beq.n	801eab0 <slave_validate_cmd+0x24>
    {
        return osError;
 801eaaa:	f04f 33ff 	mov.w	r3, #4294967295
 801eaae:	e026      	b.n	801eafe <slave_validate_cmd+0x72>
    }
    slave->buff_len = slave->rx_len - 2;
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801eab6:	3b02      	subs	r3, #2
 801eab8:	b29a      	uxth	r2, r3
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->rx_buf);
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	330c      	adds	r3, #12
 801eac2:	4619      	mov	r1, r3
 801eac4:	6878      	ldr	r0, [r7, #4]
 801eac6:	f7ff ffa5 	bl	801ea14 <slave_crc16>
    if ((slave->crc_hi != slave->rx_buf[slave->rx_len - 2]) || (slave->crc_lo != slave->rx_buf[slave->rx_len - 1]))
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	799a      	ldrb	r2, [r3, #6]
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801ead4:	3b02      	subs	r3, #2
 801ead6:	6879      	ldr	r1, [r7, #4]
 801ead8:	440b      	add	r3, r1
 801eada:	7b1b      	ldrb	r3, [r3, #12]
 801eadc:	429a      	cmp	r2, r3
 801eade:	d10a      	bne.n	801eaf6 <slave_validate_cmd+0x6a>
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	79da      	ldrb	r2, [r3, #7]
 801eae4:	687b      	ldr	r3, [r7, #4]
 801eae6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801eaea:	3b01      	subs	r3, #1
 801eaec:	6879      	ldr	r1, [r7, #4]
 801eaee:	440b      	add	r3, r1
 801eaf0:	7b1b      	ldrb	r3, [r3, #12]
 801eaf2:	429a      	cmp	r2, r3
 801eaf4:	d002      	beq.n	801eafc <slave_validate_cmd+0x70>
    {
        return osError;
 801eaf6:	f04f 33ff 	mov.w	r3, #4294967295
 801eafa:	e000      	b.n	801eafe <slave_validate_cmd+0x72>
    }
    return osOK;
 801eafc:	2300      	movs	r3, #0
}
 801eafe:	4618      	mov	r0, r3
 801eb00:	3708      	adds	r7, #8
 801eb02:	46bd      	mov	sp, r7
 801eb04:	bd80      	pop	{r7, pc}

0801eb06 <slave_handle_read_discs>:

static void slave_handle_read_discs(modbus_slave *slave)
{
 801eb06:	b480      	push	{r7}
 801eb08:	b087      	sub	sp, #28
 801eb0a:	af00      	add	r7, sp, #0
 801eb0c:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	7b9b      	ldrb	r3, [r3, #14]
 801eb12:	b29b      	uxth	r3, r3
 801eb14:	021b      	lsls	r3, r3, #8
 801eb16:	b29a      	uxth	r2, r3
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	7bdb      	ldrb	r3, [r3, #15]
 801eb1c:	b29b      	uxth	r3, r3
 801eb1e:	4413      	add	r3, r2
 801eb20:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801eb22:	687b      	ldr	r3, [r7, #4]
 801eb24:	7c1b      	ldrb	r3, [r3, #16]
 801eb26:	b29b      	uxth	r3, r3
 801eb28:	021b      	lsls	r3, r3, #8
 801eb2a:	b29a      	uxth	r2, r3
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	7c5b      	ldrb	r3, [r3, #17]
 801eb30:	b29b      	uxth	r3, r3
 801eb32:	4413      	add	r3, r2
 801eb34:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	2200      	movs	r2, #0
 801eb3a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801eb3e:	687b      	ldr	r3, [r7, #4]
 801eb40:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801eb44:	1c5a      	adds	r2, r3, #1
 801eb46:	b291      	uxth	r1, r2
 801eb48:	687a      	ldr	r2, [r7, #4]
 801eb4a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801eb4e:	4619      	mov	r1, r3
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	791a      	ldrb	r2, [r3, #4]
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	440b      	add	r3, r1
 801eb58:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801eb5c:	8a7a      	ldrh	r2, [r7, #18]
 801eb5e:	8a3b      	ldrh	r3, [r7, #16]
 801eb60:	4413      	add	r3, r2
 801eb62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801eb66:	dd20      	ble.n	801ebaa <slave_handle_read_discs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	7b5a      	ldrb	r2, [r3, #13]
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801eb72:	1c59      	adds	r1, r3, #1
 801eb74:	b288      	uxth	r0, r1
 801eb76:	6879      	ldr	r1, [r7, #4]
 801eb78:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801eb7c:	4619      	mov	r1, r3
 801eb7e:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801eb82:	b2da      	uxtb	r2, r3
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	440b      	add	r3, r1
 801eb88:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801eb92:	1c5a      	adds	r2, r3, #1
 801eb94:	b291      	uxth	r1, r2
 801eb96:	687a      	ldr	r2, [r7, #4]
 801eb98:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801eb9c:	461a      	mov	r2, r3
 801eb9e:	687b      	ldr	r3, [r7, #4]
 801eba0:	4413      	add	r3, r2
 801eba2:	2202      	movs	r2, #2
 801eba4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 801eba8:	e072      	b.n	801ec90 <slave_handle_read_discs+0x18a>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 801ebaa:	8a3b      	ldrh	r3, [r7, #16]
 801ebac:	f003 0307 	and.w	r3, r3, #7
 801ebb0:	b29b      	uxth	r3, r3
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d103      	bne.n	801ebbe <slave_handle_read_discs+0xb8>
 801ebb6:	8a3b      	ldrh	r3, [r7, #16]
 801ebb8:	08db      	lsrs	r3, r3, #3
 801ebba:	b29b      	uxth	r3, r3
 801ebbc:	e004      	b.n	801ebc8 <slave_handle_read_discs+0xc2>
 801ebbe:	8a3b      	ldrh	r3, [r7, #16]
 801ebc0:	08db      	lsrs	r3, r3, #3
 801ebc2:	b29b      	uxth	r3, r3
 801ebc4:	3301      	adds	r3, #1
 801ebc6:	b29b      	uxth	r3, r3
 801ebc8:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 801ebca:	2300      	movs	r3, #0
 801ebcc:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ebd4:	1c5a      	adds	r2, r3, #1
 801ebd6:	b291      	uxth	r1, r2
 801ebd8:	687a      	ldr	r2, [r7, #4]
 801ebda:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ebde:	4619      	mov	r1, r3
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	7b5a      	ldrb	r2, [r3, #13]
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	440b      	add	r3, r1
 801ebe8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = byte_count;
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ebf2:	1c5a      	adds	r2, r3, #1
 801ebf4:	b291      	uxth	r1, r2
 801ebf6:	687a      	ldr	r2, [r7, #4]
 801ebf8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ebfc:	4619      	mov	r1, r3
 801ebfe:	89fb      	ldrh	r3, [r7, #14]
 801ec00:	b2da      	uxtb	r2, r3
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	440b      	add	r3, r1
 801ec06:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 801ec0a:	2300      	movs	r3, #0
 801ec0c:	82bb      	strh	r3, [r7, #20]
 801ec0e:	e03a      	b.n	801ec86 <slave_handle_read_discs+0x180>
            if (i % 8 == 0)
 801ec10:	8abb      	ldrh	r3, [r7, #20]
 801ec12:	f003 0307 	and.w	r3, r3, #7
 801ec16:	b29b      	uxth	r3, r3
 801ec18:	2b00      	cmp	r3, #0
 801ec1a:	d101      	bne.n	801ec20 <slave_handle_read_discs+0x11a>
                byte_data = 0x00;
 801ec1c:	2300      	movs	r3, #0
 801ec1e:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 801ec20:	8aba      	ldrh	r2, [r7, #20]
 801ec22:	8a3b      	ldrh	r3, [r7, #16]
 801ec24:	429a      	cmp	r2, r3
 801ec26:	d214      	bcs.n	801ec52 <slave_handle_read_discs+0x14c>
                byte_data = (slave->regs->discs[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 801ec2e:	8a79      	ldrh	r1, [r7, #18]
 801ec30:	8abb      	ldrh	r3, [r7, #20]
 801ec32:	440b      	add	r3, r1
 801ec34:	5cd3      	ldrb	r3, [r2, r3]
 801ec36:	2b01      	cmp	r3, #1
 801ec38:	d106      	bne.n	801ec48 <slave_handle_read_discs+0x142>
 801ec3a:	7dfb      	ldrb	r3, [r7, #23]
 801ec3c:	085b      	lsrs	r3, r3, #1
 801ec3e:	b2db      	uxtb	r3, r3
 801ec40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ec44:	b2db      	uxtb	r3, r3
 801ec46:	e002      	b.n	801ec4e <slave_handle_read_discs+0x148>
 801ec48:	7dfb      	ldrb	r3, [r7, #23]
 801ec4a:	085b      	lsrs	r3, r3, #1
 801ec4c:	b2db      	uxtb	r3, r3
 801ec4e:	75fb      	strb	r3, [r7, #23]
 801ec50:	e002      	b.n	801ec58 <slave_handle_read_discs+0x152>
                byte_data = byte_data >> 1 & 0x7F;
 801ec52:	7dfb      	ldrb	r3, [r7, #23]
 801ec54:	085b      	lsrs	r3, r3, #1
 801ec56:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 801ec58:	8abb      	ldrh	r3, [r7, #20]
 801ec5a:	3301      	adds	r3, #1
 801ec5c:	f003 0307 	and.w	r3, r3, #7
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	d10d      	bne.n	801ec80 <slave_handle_read_discs+0x17a>
                slave->tx_buf[slave->tx_len++] = byte_data;
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ec6a:	1c5a      	adds	r2, r3, #1
 801ec6c:	b291      	uxth	r1, r2
 801ec6e:	687a      	ldr	r2, [r7, #4]
 801ec70:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ec74:	461a      	mov	r2, r3
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	4413      	add	r3, r2
 801ec7a:	7dfa      	ldrb	r2, [r7, #23]
 801ec7c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 801ec80:	8abb      	ldrh	r3, [r7, #20]
 801ec82:	3301      	adds	r3, #1
 801ec84:	82bb      	strh	r3, [r7, #20]
 801ec86:	8aba      	ldrh	r2, [r7, #20]
 801ec88:	89fb      	ldrh	r3, [r7, #14]
 801ec8a:	00db      	lsls	r3, r3, #3
 801ec8c:	429a      	cmp	r2, r3
 801ec8e:	dbbf      	blt.n	801ec10 <slave_handle_read_discs+0x10a>
}
 801ec90:	bf00      	nop
 801ec92:	371c      	adds	r7, #28
 801ec94:	46bd      	mov	sp, r7
 801ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec9a:	4770      	bx	lr

0801ec9c <slave_handle_read_coils>:

static void slave_handle_read_coils(modbus_slave *slave)
{
 801ec9c:	b480      	push	{r7}
 801ec9e:	b087      	sub	sp, #28
 801eca0:	af00      	add	r7, sp, #0
 801eca2:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	7b9b      	ldrb	r3, [r3, #14]
 801eca8:	b29b      	uxth	r3, r3
 801ecaa:	021b      	lsls	r3, r3, #8
 801ecac:	b29a      	uxth	r2, r3
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	7bdb      	ldrb	r3, [r3, #15]
 801ecb2:	b29b      	uxth	r3, r3
 801ecb4:	4413      	add	r3, r2
 801ecb6:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	7c1b      	ldrb	r3, [r3, #16]
 801ecbc:	b29b      	uxth	r3, r3
 801ecbe:	021b      	lsls	r3, r3, #8
 801ecc0:	b29a      	uxth	r2, r3
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	7c5b      	ldrb	r3, [r3, #17]
 801ecc6:	b29b      	uxth	r3, r3
 801ecc8:	4413      	add	r3, r2
 801ecca:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	2200      	movs	r2, #0
 801ecd0:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ecda:	1c5a      	adds	r2, r3, #1
 801ecdc:	b291      	uxth	r1, r2
 801ecde:	687a      	ldr	r2, [r7, #4]
 801ece0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ece4:	4619      	mov	r1, r3
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	791a      	ldrb	r2, [r3, #4]
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	440b      	add	r3, r1
 801ecee:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801ecf2:	8a7a      	ldrh	r2, [r7, #18]
 801ecf4:	8a3b      	ldrh	r3, [r7, #16]
 801ecf6:	4413      	add	r3, r2
 801ecf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ecfc:	dd20      	ble.n	801ed40 <slave_handle_read_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	7b5a      	ldrb	r2, [r3, #13]
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ed08:	1c59      	adds	r1, r3, #1
 801ed0a:	b288      	uxth	r0, r1
 801ed0c:	6879      	ldr	r1, [r7, #4]
 801ed0e:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801ed12:	4619      	mov	r1, r3
 801ed14:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801ed18:	b2da      	uxtb	r2, r3
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	440b      	add	r3, r1
 801ed1e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ed28:	1c5a      	adds	r2, r3, #1
 801ed2a:	b291      	uxth	r1, r2
 801ed2c:	687a      	ldr	r2, [r7, #4]
 801ed2e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ed32:	461a      	mov	r2, r3
 801ed34:	687b      	ldr	r3, [r7, #4]
 801ed36:	4413      	add	r3, r2
 801ed38:	2202      	movs	r2, #2
 801ed3a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 801ed3e:	e074      	b.n	801ee2a <slave_handle_read_coils+0x18e>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 801ed40:	8a3b      	ldrh	r3, [r7, #16]
 801ed42:	f003 0307 	and.w	r3, r3, #7
 801ed46:	b29b      	uxth	r3, r3
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d103      	bne.n	801ed54 <slave_handle_read_coils+0xb8>
 801ed4c:	8a3b      	ldrh	r3, [r7, #16]
 801ed4e:	08db      	lsrs	r3, r3, #3
 801ed50:	b29b      	uxth	r3, r3
 801ed52:	e004      	b.n	801ed5e <slave_handle_read_coils+0xc2>
 801ed54:	8a3b      	ldrh	r3, [r7, #16]
 801ed56:	08db      	lsrs	r3, r3, #3
 801ed58:	b29b      	uxth	r3, r3
 801ed5a:	3301      	adds	r3, #1
 801ed5c:	b29b      	uxth	r3, r3
 801ed5e:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 801ed60:	2300      	movs	r3, #0
 801ed62:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ed6a:	1c5a      	adds	r2, r3, #1
 801ed6c:	b291      	uxth	r1, r2
 801ed6e:	687a      	ldr	r2, [r7, #4]
 801ed70:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ed74:	4619      	mov	r1, r3
 801ed76:	687b      	ldr	r3, [r7, #4]
 801ed78:	7b5a      	ldrb	r2, [r3, #13]
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	440b      	add	r3, r1
 801ed7e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = byte_count;
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ed88:	1c5a      	adds	r2, r3, #1
 801ed8a:	b291      	uxth	r1, r2
 801ed8c:	687a      	ldr	r2, [r7, #4]
 801ed8e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ed92:	4619      	mov	r1, r3
 801ed94:	89fb      	ldrh	r3, [r7, #14]
 801ed96:	b2da      	uxtb	r2, r3
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	440b      	add	r3, r1
 801ed9c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 801eda0:	2300      	movs	r3, #0
 801eda2:	82bb      	strh	r3, [r7, #20]
 801eda4:	e03c      	b.n	801ee20 <slave_handle_read_coils+0x184>
            if (i % 8 == 0)
 801eda6:	8abb      	ldrh	r3, [r7, #20]
 801eda8:	f003 0307 	and.w	r3, r3, #7
 801edac:	b29b      	uxth	r3, r3
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d101      	bne.n	801edb6 <slave_handle_read_coils+0x11a>
                byte_data = 0x00;
 801edb2:	2300      	movs	r3, #0
 801edb4:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 801edb6:	8aba      	ldrh	r2, [r7, #20]
 801edb8:	8a3b      	ldrh	r3, [r7, #16]
 801edba:	429a      	cmp	r2, r3
 801edbc:	d216      	bcs.n	801edec <slave_handle_read_coils+0x150>
                byte_data = (slave->regs->coils[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 801edbe:	687b      	ldr	r3, [r7, #4]
 801edc0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 801edc4:	8a79      	ldrh	r1, [r7, #18]
 801edc6:	8abb      	ldrh	r3, [r7, #20]
 801edc8:	440b      	add	r3, r1
 801edca:	4413      	add	r3, r2
 801edcc:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 801edd0:	2b01      	cmp	r3, #1
 801edd2:	d106      	bne.n	801ede2 <slave_handle_read_coils+0x146>
 801edd4:	7dfb      	ldrb	r3, [r7, #23]
 801edd6:	085b      	lsrs	r3, r3, #1
 801edd8:	b2db      	uxtb	r3, r3
 801edda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801edde:	b2db      	uxtb	r3, r3
 801ede0:	e002      	b.n	801ede8 <slave_handle_read_coils+0x14c>
 801ede2:	7dfb      	ldrb	r3, [r7, #23]
 801ede4:	085b      	lsrs	r3, r3, #1
 801ede6:	b2db      	uxtb	r3, r3
 801ede8:	75fb      	strb	r3, [r7, #23]
 801edea:	e002      	b.n	801edf2 <slave_handle_read_coils+0x156>
                byte_data = byte_data >> 1 & 0x7F;
 801edec:	7dfb      	ldrb	r3, [r7, #23]
 801edee:	085b      	lsrs	r3, r3, #1
 801edf0:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 801edf2:	8abb      	ldrh	r3, [r7, #20]
 801edf4:	3301      	adds	r3, #1
 801edf6:	f003 0307 	and.w	r3, r3, #7
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d10d      	bne.n	801ee1a <slave_handle_read_coils+0x17e>
                slave->tx_buf[slave->tx_len++] = byte_data;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ee04:	1c5a      	adds	r2, r3, #1
 801ee06:	b291      	uxth	r1, r2
 801ee08:	687a      	ldr	r2, [r7, #4]
 801ee0a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ee0e:	461a      	mov	r2, r3
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	4413      	add	r3, r2
 801ee14:	7dfa      	ldrb	r2, [r7, #23]
 801ee16:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 801ee1a:	8abb      	ldrh	r3, [r7, #20]
 801ee1c:	3301      	adds	r3, #1
 801ee1e:	82bb      	strh	r3, [r7, #20]
 801ee20:	8aba      	ldrh	r2, [r7, #20]
 801ee22:	89fb      	ldrh	r3, [r7, #14]
 801ee24:	00db      	lsls	r3, r3, #3
 801ee26:	429a      	cmp	r2, r3
 801ee28:	dbbd      	blt.n	801eda6 <slave_handle_read_coils+0x10a>
}
 801ee2a:	bf00      	nop
 801ee2c:	371c      	adds	r7, #28
 801ee2e:	46bd      	mov	sp, r7
 801ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee34:	4770      	bx	lr

0801ee36 <slave_handle_read_input_regs>:

static void slave_handle_read_input_regs(modbus_slave *slave)
{
 801ee36:	b480      	push	{r7}
 801ee38:	b085      	sub	sp, #20
 801ee3a:	af00      	add	r7, sp, #0
 801ee3c:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	7b9b      	ldrb	r3, [r3, #14]
 801ee42:	b29b      	uxth	r3, r3
 801ee44:	021b      	lsls	r3, r3, #8
 801ee46:	b29a      	uxth	r2, r3
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	7bdb      	ldrb	r3, [r3, #15]
 801ee4c:	b29b      	uxth	r3, r3
 801ee4e:	4413      	add	r3, r2
 801ee50:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	7c1b      	ldrb	r3, [r3, #16]
 801ee56:	b29b      	uxth	r3, r3
 801ee58:	021b      	lsls	r3, r3, #8
 801ee5a:	b29a      	uxth	r2, r3
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	7c5b      	ldrb	r3, [r3, #17]
 801ee60:	b29b      	uxth	r3, r3
 801ee62:	4413      	add	r3, r2
 801ee64:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	2200      	movs	r2, #0
 801ee6a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ee74:	1c5a      	adds	r2, r3, #1
 801ee76:	b291      	uxth	r1, r2
 801ee78:	687a      	ldr	r2, [r7, #4]
 801ee7a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ee7e:	4619      	mov	r1, r3
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	791a      	ldrb	r2, [r3, #4]
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	440b      	add	r3, r1
 801ee88:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801ee8c:	89ba      	ldrh	r2, [r7, #12]
 801ee8e:	897b      	ldrh	r3, [r7, #10]
 801ee90:	4413      	add	r3, r2
 801ee92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ee96:	dd20      	ble.n	801eeda <slave_handle_read_input_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	7b5a      	ldrb	r2, [r3, #13]
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801eea2:	1c59      	adds	r1, r3, #1
 801eea4:	b288      	uxth	r0, r1
 801eea6:	6879      	ldr	r1, [r7, #4]
 801eea8:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801eeac:	4619      	mov	r1, r3
 801eeae:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801eeb2:	b2da      	uxtb	r2, r3
 801eeb4:	687b      	ldr	r3, [r7, #4]
 801eeb6:	440b      	add	r3, r1
 801eeb8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801eec2:	1c5a      	adds	r2, r3, #1
 801eec4:	b291      	uxth	r1, r2
 801eec6:	687a      	ldr	r2, [r7, #4]
 801eec8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801eecc:	461a      	mov	r2, r3
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	4413      	add	r3, r2
 801eed2:	2202      	movs	r2, #2
 801eed4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
        }
    }
}
 801eed8:	e05b      	b.n	801ef92 <slave_handle_read_input_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801eee0:	1c5a      	adds	r2, r3, #1
 801eee2:	b291      	uxth	r1, r2
 801eee4:	687a      	ldr	r2, [r7, #4]
 801eee6:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801eeea:	4619      	mov	r1, r3
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	7b5a      	ldrb	r2, [r3, #13]
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	440b      	add	r3, r1
 801eef4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 801eef8:	897b      	ldrh	r3, [r7, #10]
 801eefa:	b2da      	uxtb	r2, r3
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ef02:	1c59      	adds	r1, r3, #1
 801ef04:	b288      	uxth	r0, r1
 801ef06:	6879      	ldr	r1, [r7, #4]
 801ef08:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801ef0c:	4619      	mov	r1, r3
 801ef0e:	0053      	lsls	r3, r2, #1
 801ef10:	b2da      	uxtb	r2, r3
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	440b      	add	r3, r1
 801ef16:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 801ef1a:	2300      	movs	r3, #0
 801ef1c:	81fb      	strh	r3, [r7, #14]
 801ef1e:	e034      	b.n	801ef8a <slave_handle_read_input_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
 801ef20:	687b      	ldr	r3, [r7, #4]
 801ef22:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801ef26:	89f9      	ldrh	r1, [r7, #14]
 801ef28:	89ba      	ldrh	r2, [r7, #12]
 801ef2a:	440a      	add	r2, r1
 801ef2c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 801ef30:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801ef34:	121b      	asrs	r3, r3, #8
 801ef36:	b218      	sxth	r0, r3
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ef3e:	1c5a      	adds	r2, r3, #1
 801ef40:	b291      	uxth	r1, r2
 801ef42:	687a      	ldr	r2, [r7, #4]
 801ef44:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ef48:	4619      	mov	r1, r3
 801ef4a:	b2c2      	uxtb	r2, r0
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	440b      	add	r3, r1
 801ef50:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801ef5a:	89f9      	ldrh	r1, [r7, #14]
 801ef5c:	89ba      	ldrh	r2, [r7, #12]
 801ef5e:	440a      	add	r2, r1
 801ef60:	f502 7280 	add.w	r2, r2, #256	; 0x100
 801ef64:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ef6e:	1c5a      	adds	r2, r3, #1
 801ef70:	b291      	uxth	r1, r2
 801ef72:	687a      	ldr	r2, [r7, #4]
 801ef74:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ef78:	4619      	mov	r1, r3
 801ef7a:	b2c2      	uxtb	r2, r0
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	440b      	add	r3, r1
 801ef80:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 801ef84:	89fb      	ldrh	r3, [r7, #14]
 801ef86:	3301      	adds	r3, #1
 801ef88:	81fb      	strh	r3, [r7, #14]
 801ef8a:	89fa      	ldrh	r2, [r7, #14]
 801ef8c:	897b      	ldrh	r3, [r7, #10]
 801ef8e:	429a      	cmp	r2, r3
 801ef90:	d3c6      	bcc.n	801ef20 <slave_handle_read_input_regs+0xea>
}
 801ef92:	bf00      	nop
 801ef94:	3714      	adds	r7, #20
 801ef96:	46bd      	mov	sp, r7
 801ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef9c:	4770      	bx	lr

0801ef9e <slave_handle_read_holding_regs>:

static void slave_handle_read_holding_regs(modbus_slave *slave)
{
 801ef9e:	b480      	push	{r7}
 801efa0:	b085      	sub	sp, #20
 801efa2:	af00      	add	r7, sp, #0
 801efa4:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	7b9b      	ldrb	r3, [r3, #14]
 801efaa:	b29b      	uxth	r3, r3
 801efac:	021b      	lsls	r3, r3, #8
 801efae:	b29a      	uxth	r2, r3
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	7bdb      	ldrb	r3, [r3, #15]
 801efb4:	b29b      	uxth	r3, r3
 801efb6:	4413      	add	r3, r2
 801efb8:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	7c1b      	ldrb	r3, [r3, #16]
 801efbe:	b29b      	uxth	r3, r3
 801efc0:	021b      	lsls	r3, r3, #8
 801efc2:	b29a      	uxth	r2, r3
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	7c5b      	ldrb	r3, [r3, #17]
 801efc8:	b29b      	uxth	r3, r3
 801efca:	4413      	add	r3, r2
 801efcc:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	2200      	movs	r2, #0
 801efd2:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801efdc:	1c5a      	adds	r2, r3, #1
 801efde:	b291      	uxth	r1, r2
 801efe0:	687a      	ldr	r2, [r7, #4]
 801efe2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801efe6:	4619      	mov	r1, r3
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	791a      	ldrb	r2, [r3, #4]
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	440b      	add	r3, r1
 801eff0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801eff4:	89ba      	ldrh	r2, [r7, #12]
 801eff6:	897b      	ldrh	r3, [r7, #10]
 801eff8:	4413      	add	r3, r2
 801effa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801effe:	dd20      	ble.n	801f042 <slave_handle_read_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	7b5a      	ldrb	r2, [r3, #13]
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f00a:	1c59      	adds	r1, r3, #1
 801f00c:	b288      	uxth	r0, r1
 801f00e:	6879      	ldr	r1, [r7, #4]
 801f010:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801f014:	4619      	mov	r1, r3
 801f016:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801f01a:	b2da      	uxtb	r2, r3
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	440b      	add	r3, r1
 801f020:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f02a:	1c5a      	adds	r2, r3, #1
 801f02c:	b291      	uxth	r1, r2
 801f02e:	687a      	ldr	r2, [r7, #4]
 801f030:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f034:	461a      	mov	r2, r3
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	4413      	add	r3, r2
 801f03a:	2202      	movs	r2, #2
 801f03c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
        }
    }
}
 801f040:	e05b      	b.n	801f0fa <slave_handle_read_holding_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f048:	1c5a      	adds	r2, r3, #1
 801f04a:	b291      	uxth	r1, r2
 801f04c:	687a      	ldr	r2, [r7, #4]
 801f04e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f052:	4619      	mov	r1, r3
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	7b5a      	ldrb	r2, [r3, #13]
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	440b      	add	r3, r1
 801f05c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 801f060:	897b      	ldrh	r3, [r7, #10]
 801f062:	b2da      	uxtb	r2, r3
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f06a:	1c59      	adds	r1, r3, #1
 801f06c:	b288      	uxth	r0, r1
 801f06e:	6879      	ldr	r1, [r7, #4]
 801f070:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801f074:	4619      	mov	r1, r3
 801f076:	0053      	lsls	r3, r2, #1
 801f078:	b2da      	uxtb	r2, r3
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	440b      	add	r3, r1
 801f07e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 801f082:	2300      	movs	r3, #0
 801f084:	81fb      	strh	r3, [r7, #14]
 801f086:	e034      	b.n	801f0f2 <slave_handle_read_holding_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801f08e:	89f9      	ldrh	r1, [r7, #14]
 801f090:	89ba      	ldrh	r2, [r7, #12]
 801f092:	440a      	add	r2, r1
 801f094:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801f098:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801f09c:	121b      	asrs	r3, r3, #8
 801f09e:	b218      	sxth	r0, r3
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f0a6:	1c5a      	adds	r2, r3, #1
 801f0a8:	b291      	uxth	r1, r2
 801f0aa:	687a      	ldr	r2, [r7, #4]
 801f0ac:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f0b0:	4619      	mov	r1, r3
 801f0b2:	b2c2      	uxtb	r2, r0
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	440b      	add	r3, r1
 801f0b8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801f0c2:	89f9      	ldrh	r1, [r7, #14]
 801f0c4:	89ba      	ldrh	r2, [r7, #12]
 801f0c6:	440a      	add	r2, r1
 801f0c8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801f0cc:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f0d6:	1c5a      	adds	r2, r3, #1
 801f0d8:	b291      	uxth	r1, r2
 801f0da:	687a      	ldr	r2, [r7, #4]
 801f0dc:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f0e0:	4619      	mov	r1, r3
 801f0e2:	b2c2      	uxtb	r2, r0
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	440b      	add	r3, r1
 801f0e8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 801f0ec:	89fb      	ldrh	r3, [r7, #14]
 801f0ee:	3301      	adds	r3, #1
 801f0f0:	81fb      	strh	r3, [r7, #14]
 801f0f2:	89fa      	ldrh	r2, [r7, #14]
 801f0f4:	897b      	ldrh	r3, [r7, #10]
 801f0f6:	429a      	cmp	r2, r3
 801f0f8:	d3c6      	bcc.n	801f088 <slave_handle_read_holding_regs+0xea>
}
 801f0fa:	bf00      	nop
 801f0fc:	3714      	adds	r7, #20
 801f0fe:	46bd      	mov	sp, r7
 801f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f104:	4770      	bx	lr

0801f106 <slave_compose_write_reply_tx_buffer>:

static void slave_compose_write_reply_tx_buffer(modbus_slave *slave)
{
 801f106:	b480      	push	{r7}
 801f108:	b083      	sub	sp, #12
 801f10a:	af00      	add	r7, sp, #0
 801f10c:	6078      	str	r0, [r7, #4]
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801f10e:	687b      	ldr	r3, [r7, #4]
 801f110:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f114:	1c5a      	adds	r2, r3, #1
 801f116:	b291      	uxth	r1, r2
 801f118:	687a      	ldr	r2, [r7, #4]
 801f11a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f11e:	4619      	mov	r1, r3
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	7b5a      	ldrb	r2, [r3, #13]
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	440b      	add	r3, r1
 801f128:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[2];
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f132:	1c5a      	adds	r2, r3, #1
 801f134:	b291      	uxth	r1, r2
 801f136:	687a      	ldr	r2, [r7, #4]
 801f138:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f13c:	4619      	mov	r1, r3
 801f13e:	687b      	ldr	r3, [r7, #4]
 801f140:	7b9a      	ldrb	r2, [r3, #14]
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	440b      	add	r3, r1
 801f146:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[3];
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f150:	1c5a      	adds	r2, r3, #1
 801f152:	b291      	uxth	r1, r2
 801f154:	687a      	ldr	r2, [r7, #4]
 801f156:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f15a:	4619      	mov	r1, r3
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	7bda      	ldrb	r2, [r3, #15]
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	440b      	add	r3, r1
 801f164:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[4];
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f16e:	1c5a      	adds	r2, r3, #1
 801f170:	b291      	uxth	r1, r2
 801f172:	687a      	ldr	r2, [r7, #4]
 801f174:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f178:	4619      	mov	r1, r3
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	7c1a      	ldrb	r2, [r3, #16]
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	440b      	add	r3, r1
 801f182:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[5];
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f18c:	1c5a      	adds	r2, r3, #1
 801f18e:	b291      	uxth	r1, r2
 801f190:	687a      	ldr	r2, [r7, #4]
 801f192:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f196:	4619      	mov	r1, r3
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	7c5a      	ldrb	r2, [r3, #17]
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	440b      	add	r3, r1
 801f1a0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
}
 801f1a4:	bf00      	nop
 801f1a6:	370c      	adds	r7, #12
 801f1a8:	46bd      	mov	sp, r7
 801f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1ae:	4770      	bx	lr

0801f1b0 <slave_handle_write_single_coil>:

static void slave_handle_write_single_coil(modbus_slave *slave)
{
 801f1b0:	b580      	push	{r7, lr}
 801f1b2:	b084      	sub	sp, #16
 801f1b4:	af00      	add	r7, sp, #0
 801f1b6:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	7b9b      	ldrb	r3, [r3, #14]
 801f1bc:	b29b      	uxth	r3, r3
 801f1be:	021b      	lsls	r3, r3, #8
 801f1c0:	b29a      	uxth	r2, r3
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	7bdb      	ldrb	r3, [r3, #15]
 801f1c6:	b29b      	uxth	r3, r3
 801f1c8:	4413      	add	r3, r2
 801f1ca:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	2200      	movs	r2, #0
 801f1d0:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f1da:	1c5a      	adds	r2, r3, #1
 801f1dc:	b291      	uxth	r1, r2
 801f1de:	687a      	ldr	r2, [r7, #4]
 801f1e0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f1e4:	4619      	mov	r1, r3
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	791a      	ldrb	r2, [r3, #4]
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	440b      	add	r3, r1
 801f1ee:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + 1 > MODBUS_REG_LENGTH)
 801f1f2:	89fb      	ldrh	r3, [r7, #14]
 801f1f4:	2bff      	cmp	r3, #255	; 0xff
 801f1f6:	d920      	bls.n	801f23a <slave_handle_write_single_coil+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	7b5a      	ldrb	r2, [r3, #13]
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f202:	1c59      	adds	r1, r3, #1
 801f204:	b288      	uxth	r0, r1
 801f206:	6879      	ldr	r1, [r7, #4]
 801f208:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801f20c:	4619      	mov	r1, r3
 801f20e:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801f212:	b2da      	uxtb	r2, r3
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	440b      	add	r3, r1
 801f218:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f222:	1c5a      	adds	r2, r3, #1
 801f224:	b291      	uxth	r1, r2
 801f226:	687a      	ldr	r2, [r7, #4]
 801f228:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f22c:	461a      	mov	r2, r3
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	4413      	add	r3, r2
 801f232:	2202      	movs	r2, #2
 801f234:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
    }
}
 801f238:	e011      	b.n	801f25e <slave_handle_write_single_coil+0xae>
        slave_compose_write_reply_tx_buffer(slave);
 801f23a:	6878      	ldr	r0, [r7, #4]
 801f23c:	f7ff ff63 	bl	801f106 <slave_compose_write_reply_tx_buffer>
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
 801f240:	687b      	ldr	r3, [r7, #4]
 801f242:	7c1b      	ldrb	r3, [r3, #16]
 801f244:	2bff      	cmp	r3, #255	; 0xff
 801f246:	bf0c      	ite	eq
 801f248:	2301      	moveq	r3, #1
 801f24a:	2300      	movne	r3, #0
 801f24c:	b2d9      	uxtb	r1, r3
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 801f254:	89fb      	ldrh	r3, [r7, #14]
 801f256:	4413      	add	r3, r2
 801f258:	460a      	mov	r2, r1
 801f25a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 801f25e:	bf00      	nop
 801f260:	3710      	adds	r7, #16
 801f262:	46bd      	mov	sp, r7
 801f264:	bd80      	pop	{r7, pc}

0801f266 <slave_handle_write_multi_coils>:

static void slave_handle_write_multi_coils(modbus_slave *slave)
{
 801f266:	b580      	push	{r7, lr}
 801f268:	b084      	sub	sp, #16
 801f26a:	af00      	add	r7, sp, #0
 801f26c:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801f26e:	687b      	ldr	r3, [r7, #4]
 801f270:	7b9b      	ldrb	r3, [r3, #14]
 801f272:	b29b      	uxth	r3, r3
 801f274:	021b      	lsls	r3, r3, #8
 801f276:	b29a      	uxth	r2, r3
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	7bdb      	ldrb	r3, [r3, #15]
 801f27c:	b29b      	uxth	r3, r3
 801f27e:	4413      	add	r3, r2
 801f280:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	7c1b      	ldrb	r3, [r3, #16]
 801f286:	b29b      	uxth	r3, r3
 801f288:	021b      	lsls	r3, r3, #8
 801f28a:	b29a      	uxth	r2, r3
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	7c5b      	ldrb	r3, [r3, #17]
 801f290:	b29b      	uxth	r3, r3
 801f292:	4413      	add	r3, r2
 801f294:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	2200      	movs	r2, #0
 801f29a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801f29e:	687b      	ldr	r3, [r7, #4]
 801f2a0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f2a4:	1c5a      	adds	r2, r3, #1
 801f2a6:	b291      	uxth	r1, r2
 801f2a8:	687a      	ldr	r2, [r7, #4]
 801f2aa:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f2ae:	4619      	mov	r1, r3
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	791a      	ldrb	r2, [r3, #4]
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	440b      	add	r3, r1
 801f2b8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801f2bc:	89ba      	ldrh	r2, [r7, #12]
 801f2be:	897b      	ldrh	r3, [r7, #10]
 801f2c0:	4413      	add	r3, r2
 801f2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f2c6:	dd20      	ble.n	801f30a <slave_handle_write_multi_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	7b5a      	ldrb	r2, [r3, #13]
 801f2cc:	687b      	ldr	r3, [r7, #4]
 801f2ce:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f2d2:	1c59      	adds	r1, r3, #1
 801f2d4:	b288      	uxth	r0, r1
 801f2d6:	6879      	ldr	r1, [r7, #4]
 801f2d8:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801f2dc:	4619      	mov	r1, r3
 801f2de:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801f2e2:	b2da      	uxtb	r2, r3
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	440b      	add	r3, r1
 801f2e8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f2f2:	1c5a      	adds	r2, r3, #1
 801f2f4:	b291      	uxth	r1, r2
 801f2f6:	687a      	ldr	r2, [r7, #4]
 801f2f8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f2fc:	461a      	mov	r2, r3
 801f2fe:	687b      	ldr	r3, [r7, #4]
 801f300:	4413      	add	r3, r2
 801f302:	2202      	movs	r2, #2
 801f304:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
        }
    }
}
 801f308:	e027      	b.n	801f35a <slave_handle_write_multi_coils+0xf4>
        slave_compose_write_reply_tx_buffer(slave);
 801f30a:	6878      	ldr	r0, [r7, #4]
 801f30c:	f7ff fefb 	bl	801f106 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 801f310:	2300      	movs	r3, #0
 801f312:	81fb      	strh	r3, [r7, #14]
 801f314:	e01d      	b.n	801f352 <slave_handle_write_multi_coils+0xec>
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
 801f316:	89fb      	ldrh	r3, [r7, #14]
 801f318:	08db      	lsrs	r3, r3, #3
 801f31a:	b29b      	uxth	r3, r3
 801f31c:	3307      	adds	r3, #7
 801f31e:	687a      	ldr	r2, [r7, #4]
 801f320:	4413      	add	r3, r2
 801f322:	7b1b      	ldrb	r3, [r3, #12]
 801f324:	461a      	mov	r2, r3
 801f326:	89fb      	ldrh	r3, [r7, #14]
 801f328:	f003 0307 	and.w	r3, r3, #7
 801f32c:	fa42 f303 	asr.w	r3, r2, r3
 801f330:	b2d9      	uxtb	r1, r3
 801f332:	687b      	ldr	r3, [r7, #4]
 801f334:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 801f338:	89b8      	ldrh	r0, [r7, #12]
 801f33a:	89fb      	ldrh	r3, [r7, #14]
 801f33c:	4403      	add	r3, r0
 801f33e:	f001 0101 	and.w	r1, r1, #1
 801f342:	b2c9      	uxtb	r1, r1
 801f344:	4413      	add	r3, r2
 801f346:	460a      	mov	r2, r1
 801f348:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        for (uint16_t i = 0; i < qty; i++)
 801f34c:	89fb      	ldrh	r3, [r7, #14]
 801f34e:	3301      	adds	r3, #1
 801f350:	81fb      	strh	r3, [r7, #14]
 801f352:	89fa      	ldrh	r2, [r7, #14]
 801f354:	897b      	ldrh	r3, [r7, #10]
 801f356:	429a      	cmp	r2, r3
 801f358:	d3dd      	bcc.n	801f316 <slave_handle_write_multi_coils+0xb0>
}
 801f35a:	bf00      	nop
 801f35c:	3710      	adds	r7, #16
 801f35e:	46bd      	mov	sp, r7
 801f360:	bd80      	pop	{r7, pc}

0801f362 <slave_handle_write_single_holding_reg>:

static void slave_handle_write_single_holding_reg(modbus_slave *slave)
{
 801f362:	b580      	push	{r7, lr}
 801f364:	b084      	sub	sp, #16
 801f366:	af00      	add	r7, sp, #0
 801f368:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	7b9b      	ldrb	r3, [r3, #14]
 801f36e:	b29b      	uxth	r3, r3
 801f370:	021b      	lsls	r3, r3, #8
 801f372:	b29a      	uxth	r2, r3
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	7bdb      	ldrb	r3, [r3, #15]
 801f378:	b29b      	uxth	r3, r3
 801f37a:	4413      	add	r3, r2
 801f37c:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	2200      	movs	r2, #0
 801f382:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f38c:	1c5a      	adds	r2, r3, #1
 801f38e:	b291      	uxth	r1, r2
 801f390:	687a      	ldr	r2, [r7, #4]
 801f392:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f396:	4619      	mov	r1, r3
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	791a      	ldrb	r2, [r3, #4]
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	440b      	add	r3, r1
 801f3a0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + 1 > MODBUS_REG_LENGTH)
 801f3a4:	89fb      	ldrh	r3, [r7, #14]
 801f3a6:	2bff      	cmp	r3, #255	; 0xff
 801f3a8:	d920      	bls.n	801f3ec <slave_handle_write_single_holding_reg+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801f3aa:	687b      	ldr	r3, [r7, #4]
 801f3ac:	7b5a      	ldrb	r2, [r3, #13]
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f3b4:	1c59      	adds	r1, r3, #1
 801f3b6:	b288      	uxth	r0, r1
 801f3b8:	6879      	ldr	r1, [r7, #4]
 801f3ba:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801f3be:	4619      	mov	r1, r3
 801f3c0:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801f3c4:	b2da      	uxtb	r2, r3
 801f3c6:	687b      	ldr	r3, [r7, #4]
 801f3c8:	440b      	add	r3, r1
 801f3ca:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f3d4:	1c5a      	adds	r2, r3, #1
 801f3d6:	b291      	uxth	r1, r2
 801f3d8:	687a      	ldr	r2, [r7, #4]
 801f3da:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f3de:	461a      	mov	r2, r3
 801f3e0:	687b      	ldr	r3, [r7, #4]
 801f3e2:	4413      	add	r3, r2
 801f3e4:	2202      	movs	r2, #2
 801f3e6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
    }
}
 801f3ea:	e015      	b.n	801f418 <slave_handle_write_single_holding_reg+0xb6>
        slave_compose_write_reply_tx_buffer(slave);
 801f3ec:	6878      	ldr	r0, [r7, #4]
 801f3ee:	f7ff fe8a 	bl	801f106 <slave_compose_write_reply_tx_buffer>
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	7c1b      	ldrb	r3, [r3, #16]
 801f3f6:	b29b      	uxth	r3, r3
 801f3f8:	021b      	lsls	r3, r3, #8
 801f3fa:	b29a      	uxth	r2, r3
 801f3fc:	687b      	ldr	r3, [r7, #4]
 801f3fe:	7c5b      	ldrb	r3, [r3, #17]
 801f400:	b29b      	uxth	r3, r3
 801f402:	4413      	add	r3, r2
 801f404:	b299      	uxth	r1, r3
 801f406:	687b      	ldr	r3, [r7, #4]
 801f408:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801f40c:	89fa      	ldrh	r2, [r7, #14]
 801f40e:	b209      	sxth	r1, r1
 801f410:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801f414:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 801f418:	bf00      	nop
 801f41a:	3710      	adds	r7, #16
 801f41c:	46bd      	mov	sp, r7
 801f41e:	bd80      	pop	{r7, pc}

0801f420 <slave_handle_write_multi_holding_regs>:

static void slave_handle_write_multi_holding_regs(modbus_slave *slave)
{
 801f420:	b580      	push	{r7, lr}
 801f422:	b084      	sub	sp, #16
 801f424:	af00      	add	r7, sp, #0
 801f426:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	7b9b      	ldrb	r3, [r3, #14]
 801f42c:	b29b      	uxth	r3, r3
 801f42e:	021b      	lsls	r3, r3, #8
 801f430:	b29a      	uxth	r2, r3
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	7bdb      	ldrb	r3, [r3, #15]
 801f436:	b29b      	uxth	r3, r3
 801f438:	4413      	add	r3, r2
 801f43a:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	7c1b      	ldrb	r3, [r3, #16]
 801f440:	b29b      	uxth	r3, r3
 801f442:	021b      	lsls	r3, r3, #8
 801f444:	b29a      	uxth	r2, r3
 801f446:	687b      	ldr	r3, [r7, #4]
 801f448:	7c5b      	ldrb	r3, [r3, #17]
 801f44a:	b29b      	uxth	r3, r3
 801f44c:	4413      	add	r3, r2
 801f44e:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	2200      	movs	r2, #0
 801f454:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f45e:	1c5a      	adds	r2, r3, #1
 801f460:	b291      	uxth	r1, r2
 801f462:	687a      	ldr	r2, [r7, #4]
 801f464:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f468:	4619      	mov	r1, r3
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	791a      	ldrb	r2, [r3, #4]
 801f46e:	687b      	ldr	r3, [r7, #4]
 801f470:	440b      	add	r3, r1
 801f472:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801f476:	89ba      	ldrh	r2, [r7, #12]
 801f478:	897b      	ldrh	r3, [r7, #10]
 801f47a:	4413      	add	r3, r2
 801f47c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f480:	dd20      	ble.n	801f4c4 <slave_handle_write_multi_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	7b5a      	ldrb	r2, [r3, #13]
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f48c:	1c59      	adds	r1, r3, #1
 801f48e:	b288      	uxth	r0, r1
 801f490:	6879      	ldr	r1, [r7, #4]
 801f492:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801f496:	4619      	mov	r1, r3
 801f498:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801f49c:	b2da      	uxtb	r2, r3
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	440b      	add	r3, r1
 801f4a2:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f4ac:	1c5a      	adds	r2, r3, #1
 801f4ae:	b291      	uxth	r1, r2
 801f4b0:	687a      	ldr	r2, [r7, #4]
 801f4b2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f4b6:	461a      	mov	r2, r3
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	4413      	add	r3, r2
 801f4bc:	2202      	movs	r2, #2
 801f4be:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
        }
    }
}
 801f4c2:	e029      	b.n	801f518 <slave_handle_write_multi_holding_regs+0xf8>
        slave_compose_write_reply_tx_buffer(slave);
 801f4c4:	6878      	ldr	r0, [r7, #4]
 801f4c6:	f7ff fe1e 	bl	801f106 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 801f4ca:	2300      	movs	r3, #0
 801f4cc:	81fb      	strh	r3, [r7, #14]
 801f4ce:	e01f      	b.n	801f510 <slave_handle_write_multi_holding_regs+0xf0>
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
 801f4d0:	89fb      	ldrh	r3, [r7, #14]
 801f4d2:	005b      	lsls	r3, r3, #1
 801f4d4:	3307      	adds	r3, #7
 801f4d6:	687a      	ldr	r2, [r7, #4]
 801f4d8:	4413      	add	r3, r2
 801f4da:	7b1b      	ldrb	r3, [r3, #12]
 801f4dc:	b29b      	uxth	r3, r3
 801f4de:	021b      	lsls	r3, r3, #8
 801f4e0:	b29a      	uxth	r2, r3
 801f4e2:	89fb      	ldrh	r3, [r7, #14]
 801f4e4:	3304      	adds	r3, #4
 801f4e6:	005b      	lsls	r3, r3, #1
 801f4e8:	6879      	ldr	r1, [r7, #4]
 801f4ea:	440b      	add	r3, r1
 801f4ec:	7b1b      	ldrb	r3, [r3, #12]
 801f4ee:	b29b      	uxth	r3, r3
 801f4f0:	4413      	add	r3, r2
 801f4f2:	b298      	uxth	r0, r3
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801f4fa:	89b9      	ldrh	r1, [r7, #12]
 801f4fc:	89fa      	ldrh	r2, [r7, #14]
 801f4fe:	440a      	add	r2, r1
 801f500:	b201      	sxth	r1, r0
 801f502:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801f506:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint16_t i = 0; i < qty; i++)
 801f50a:	89fb      	ldrh	r3, [r7, #14]
 801f50c:	3301      	adds	r3, #1
 801f50e:	81fb      	strh	r3, [r7, #14]
 801f510:	89fa      	ldrh	r2, [r7, #14]
 801f512:	897b      	ldrh	r3, [r7, #10]
 801f514:	429a      	cmp	r2, r3
 801f516:	d3db      	bcc.n	801f4d0 <slave_handle_write_multi_holding_regs+0xb0>
}
 801f518:	bf00      	nop
 801f51a:	3710      	adds	r7, #16
 801f51c:	46bd      	mov	sp, r7
 801f51e:	bd80      	pop	{r7, pc}

0801f520 <slave_response>:

static void slave_response(modbus_slave *slave)
{
 801f520:	b580      	push	{r7, lr}
 801f522:	b082      	sub	sp, #8
 801f524:	af00      	add	r7, sp, #0
 801f526:	6078      	str	r0, [r7, #4]
    if (slave_validate_cmd(slave) != osOK)
 801f528:	6878      	ldr	r0, [r7, #4]
 801f52a:	f7ff faaf 	bl	801ea8c <slave_validate_cmd>
 801f52e:	4603      	mov	r3, r0
 801f530:	2b00      	cmp	r3, #0
 801f532:	f040 80b2 	bne.w	801f69a <slave_response+0x17a>
    {
        return;
    }
    slave->func_code = slave->rx_buf[1];
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	7b5a      	ldrb	r2, [r3, #13]
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	715a      	strb	r2, [r3, #5]
    if (slave->func_code == MODBUS_FC_READ_DISCRETE_INPUTS)
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	795b      	ldrb	r3, [r3, #5]
 801f542:	2b02      	cmp	r3, #2
 801f544:	d103      	bne.n	801f54e <slave_response+0x2e>
    {
        slave_handle_read_discs(slave);
 801f546:	6878      	ldr	r0, [r7, #4]
 801f548:	f7ff fadd 	bl	801eb06 <slave_handle_read_discs>
 801f54c:	e06a      	b.n	801f624 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_COILS)
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	795b      	ldrb	r3, [r3, #5]
 801f552:	2b01      	cmp	r3, #1
 801f554:	d103      	bne.n	801f55e <slave_response+0x3e>
    {
        slave_handle_read_coils(slave);
 801f556:	6878      	ldr	r0, [r7, #4]
 801f558:	f7ff fba0 	bl	801ec9c <slave_handle_read_coils>
 801f55c:	e062      	b.n	801f624 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_INPUT_REGISTERS)
 801f55e:	687b      	ldr	r3, [r7, #4]
 801f560:	795b      	ldrb	r3, [r3, #5]
 801f562:	2b04      	cmp	r3, #4
 801f564:	d103      	bne.n	801f56e <slave_response+0x4e>
    {
        slave_handle_read_input_regs(slave);
 801f566:	6878      	ldr	r0, [r7, #4]
 801f568:	f7ff fc65 	bl	801ee36 <slave_handle_read_input_regs>
 801f56c:	e05a      	b.n	801f624 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_HOLDING_REGISTERS)
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	795b      	ldrb	r3, [r3, #5]
 801f572:	2b03      	cmp	r3, #3
 801f574:	d103      	bne.n	801f57e <slave_response+0x5e>
    {
        slave_handle_read_holding_regs(slave);
 801f576:	6878      	ldr	r0, [r7, #4]
 801f578:	f7ff fd11 	bl	801ef9e <slave_handle_read_holding_regs>
 801f57c:	e052      	b.n	801f624 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_COIL)
 801f57e:	687b      	ldr	r3, [r7, #4]
 801f580:	795b      	ldrb	r3, [r3, #5]
 801f582:	2b05      	cmp	r3, #5
 801f584:	d103      	bne.n	801f58e <slave_response+0x6e>
    {
        slave_handle_write_single_coil(slave);
 801f586:	6878      	ldr	r0, [r7, #4]
 801f588:	f7ff fe12 	bl	801f1b0 <slave_handle_write_single_coil>
 801f58c:	e04a      	b.n	801f624 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_COILS)
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	795b      	ldrb	r3, [r3, #5]
 801f592:	2b0f      	cmp	r3, #15
 801f594:	d103      	bne.n	801f59e <slave_response+0x7e>
    {
        slave_handle_write_multi_coils(slave);
 801f596:	6878      	ldr	r0, [r7, #4]
 801f598:	f7ff fe65 	bl	801f266 <slave_handle_write_multi_coils>
 801f59c:	e042      	b.n	801f624 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_REGISTER)
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	795b      	ldrb	r3, [r3, #5]
 801f5a2:	2b06      	cmp	r3, #6
 801f5a4:	d103      	bne.n	801f5ae <slave_response+0x8e>
    {
        slave_handle_write_single_holding_reg(slave);
 801f5a6:	6878      	ldr	r0, [r7, #4]
 801f5a8:	f7ff fedb 	bl	801f362 <slave_handle_write_single_holding_reg>
 801f5ac:	e03a      	b.n	801f624 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_REGISTERS)
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	795b      	ldrb	r3, [r3, #5]
 801f5b2:	2b10      	cmp	r3, #16
 801f5b4:	d103      	bne.n	801f5be <slave_response+0x9e>
    {
        slave_handle_write_multi_holding_regs(slave);
 801f5b6:	6878      	ldr	r0, [r7, #4]
 801f5b8:	f7ff ff32 	bl	801f420 <slave_handle_write_multi_holding_regs>
 801f5bc:	e032      	b.n	801f624 <slave_response+0x104>
    }
    else
    {
        slave->tx_len = 0;
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	2200      	movs	r2, #0
 801f5c2:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
        slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f5cc:	1c5a      	adds	r2, r3, #1
 801f5ce:	b291      	uxth	r1, r2
 801f5d0:	687a      	ldr	r2, [r7, #4]
 801f5d2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f5d6:	4619      	mov	r1, r3
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	791a      	ldrb	r2, [r3, #4]
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	440b      	add	r3, r1
 801f5e0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	7b5a      	ldrb	r2, [r3, #13]
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f5ee:	1c59      	adds	r1, r3, #1
 801f5f0:	b288      	uxth	r0, r1
 801f5f2:	6879      	ldr	r1, [r7, #4]
 801f5f4:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801f5f8:	4619      	mov	r1, r3
 801f5fa:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801f5fe:	b2da      	uxtb	r2, r3
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	440b      	add	r3, r1
 801f604:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x01;
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f60e:	1c5a      	adds	r2, r3, #1
 801f610:	b291      	uxth	r1, r2
 801f612:	687a      	ldr	r2, [r7, #4]
 801f614:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f618:	461a      	mov	r2, r3
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	4413      	add	r3, r2
 801f61e:	2201      	movs	r2, #1
 801f620:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    }
    slave->buff_len = slave->tx_len;
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->tx_buf);
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	f203 230e 	addw	r3, r3, #526	; 0x20e
 801f634:	4619      	mov	r1, r3
 801f636:	6878      	ldr	r0, [r7, #4]
 801f638:	f7ff f9ec 	bl	801ea14 <slave_crc16>
    slave->tx_buf[slave->tx_len++] = slave->crc_hi;
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f642:	1c5a      	adds	r2, r3, #1
 801f644:	b291      	uxth	r1, r2
 801f646:	687a      	ldr	r2, [r7, #4]
 801f648:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f64c:	4619      	mov	r1, r3
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	799a      	ldrb	r2, [r3, #6]
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	440b      	add	r3, r1
 801f656:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->crc_lo;
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f660:	1c5a      	adds	r2, r3, #1
 801f662:	b291      	uxth	r1, r2
 801f664:	687a      	ldr	r2, [r7, #4]
 801f666:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801f66a:	4619      	mov	r1, r3
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	79da      	ldrb	r2, [r3, #7]
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	440b      	add	r3, r1
 801f674:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave_set_tx_rx(slave, tx);
 801f678:	2101      	movs	r1, #1
 801f67a:	6878      	ldr	r0, [r7, #4]
 801f67c:	f000 f8ac 	bl	801f7d8 <slave_set_tx_rx>
    HAL_UART_Transmit_DMA(slave->uart_port->uart, slave->tx_buf, slave->tx_len);
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	681b      	ldr	r3, [r3, #0]
 801f684:	6818      	ldr	r0, [r3, #0]
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	f203 210e 	addw	r1, r3, #526	; 0x20e
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801f692:	461a      	mov	r2, r3
 801f694:	f7e9 ff9e 	bl	80095d4 <HAL_UART_Transmit_DMA>
 801f698:	e000      	b.n	801f69c <slave_response+0x17c>
        return;
 801f69a:	bf00      	nop
}
 801f69c:	3708      	adds	r7, #8
 801f69e:	46bd      	mov	sp, r7
 801f6a0:	bd80      	pop	{r7, pc}

0801f6a2 <ostimer_callback>:

static void ostimer_callback(void *args)
{
 801f6a2:	b580      	push	{r7, lr}
 801f6a4:	b084      	sub	sp, #16
 801f6a6:	af00      	add	r7, sp, #0
 801f6a8:	6078      	str	r0, [r7, #4]
    modbus_slave *slave = args;
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	60fb      	str	r3, [r7, #12]
    if (slave->rx_len == (MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->NDTR))
 801f6ae:	68fb      	ldr	r3, [r7, #12]
 801f6b0:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801f6b4:	461a      	mov	r2, r3
 801f6b6:	68fb      	ldr	r3, [r7, #12]
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	681b      	ldr	r3, [r3, #0]
 801f6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	685b      	ldr	r3, [r3, #4]
 801f6c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801f6c6:	429a      	cmp	r2, r3
 801f6c8:	d109      	bne.n	801f6de <ostimer_callback+0x3c>
    {
        slave->idle_timer_flag = 1;
 801f6ca:	68fb      	ldr	r3, [r7, #12]
 801f6cc:	2201      	movs	r2, #1
 801f6ce:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(slave->idle_sem);
 801f6d2:	68fb      	ldr	r3, [r7, #12]
 801f6d4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801f6d8:	4618      	mov	r0, r3
 801f6da:	f7ec f9ed 	bl	800bab8 <osSemaphoreRelease>
    }
}
 801f6de:	bf00      	nop
 801f6e0:	3710      	adds	r7, #16
 801f6e2:	46bd      	mov	sp, r7
 801f6e4:	bd80      	pop	{r7, pc}
	...

0801f6e8 <slave_init>:

void slave_init(modbus_slave *slave, modbus_port *port, uint16_t slave_id, modbus_regs *regs_ptr)
{
 801f6e8:	b580      	push	{r7, lr}
 801f6ea:	b084      	sub	sp, #16
 801f6ec:	af00      	add	r7, sp, #0
 801f6ee:	60f8      	str	r0, [r7, #12]
 801f6f0:	60b9      	str	r1, [r7, #8]
 801f6f2:	603b      	str	r3, [r7, #0]
 801f6f4:	4613      	mov	r3, r2
 801f6f6:	80fb      	strh	r3, [r7, #6]
    slave->idle_sem = osSemaphoreNew(1, 0, NULL);
 801f6f8:	2200      	movs	r2, #0
 801f6fa:	2100      	movs	r1, #0
 801f6fc:	2001      	movs	r0, #1
 801f6fe:	f7ec f8ff 	bl	800b900 <osSemaphoreNew>
 801f702:	4602      	mov	r2, r0
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    slave->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)slave, NULL);
 801f70a:	2300      	movs	r3, #0
 801f70c:	68fa      	ldr	r2, [r7, #12]
 801f70e:	2100      	movs	r1, #0
 801f710:	4810      	ldr	r0, [pc, #64]	; (801f754 <slave_init+0x6c>)
 801f712:	f7eb ff3d 	bl	800b590 <osTimerNew>
 801f716:	4602      	mov	r2, r0
 801f718:	68fb      	ldr	r3, [r7, #12]
 801f71a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    slave->uart_port = port;
 801f71e:	68fb      	ldr	r3, [r7, #12]
 801f720:	68ba      	ldr	r2, [r7, #8]
 801f722:	601a      	str	r2, [r3, #0]
    slave->slave_id = slave_id;
 801f724:	88fb      	ldrh	r3, [r7, #6]
 801f726:	b2da      	uxtb	r2, r3
 801f728:	68fb      	ldr	r3, [r7, #12]
 801f72a:	711a      	strb	r2, [r3, #4]
    slave->regs = regs_ptr;
 801f72c:	68fb      	ldr	r3, [r7, #12]
 801f72e:	683a      	ldr	r2, [r7, #0]
 801f730:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    __HAL_UART_ENABLE_IT(slave->uart_port->uart, UART_IT_IDLE);
 801f734:	68fb      	ldr	r3, [r7, #12]
 801f736:	681b      	ldr	r3, [r3, #0]
 801f738:	681b      	ldr	r3, [r3, #0]
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	68da      	ldr	r2, [r3, #12]
 801f73e:	68fb      	ldr	r3, [r7, #12]
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	681b      	ldr	r3, [r3, #0]
 801f746:	f042 0210 	orr.w	r2, r2, #16
 801f74a:	60da      	str	r2, [r3, #12]
}
 801f74c:	bf00      	nop
 801f74e:	3710      	adds	r7, #16
 801f750:	46bd      	mov	sp, r7
 801f752:	bd80      	pop	{r7, pc}
 801f754:	0801f6a3 	.word	0x0801f6a3

0801f758 <slave_uart_idle>:

void slave_uart_idle(modbus_slave *slave)
{
 801f758:	b580      	push	{r7, lr}
 801f75a:	b084      	sub	sp, #16
 801f75c:	af00      	add	r7, sp, #0
 801f75e:	6078      	str	r0, [r7, #4]
    if (((READ_REG(slave->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(slave->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	681b      	ldr	r3, [r3, #0]
 801f764:	681b      	ldr	r3, [r3, #0]
 801f766:	681b      	ldr	r3, [r3, #0]
 801f768:	681b      	ldr	r3, [r3, #0]
 801f76a:	f003 0310 	and.w	r3, r3, #16
 801f76e:	2b00      	cmp	r3, #0
 801f770:	d02e      	beq.n	801f7d0 <slave_uart_idle+0x78>
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	681b      	ldr	r3, [r3, #0]
 801f776:	681b      	ldr	r3, [r3, #0]
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	68db      	ldr	r3, [r3, #12]
 801f77c:	f003 0310 	and.w	r3, r3, #16
 801f780:	2b00      	cmp	r3, #0
 801f782:	d025      	beq.n	801f7d0 <slave_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(slave->uart_port->uart);
 801f784:	2300      	movs	r3, #0
 801f786:	60fb      	str	r3, [r7, #12]
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	681b      	ldr	r3, [r3, #0]
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	681b      	ldr	r3, [r3, #0]
 801f792:	60fb      	str	r3, [r7, #12]
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	681b      	ldr	r3, [r3, #0]
 801f79c:	685b      	ldr	r3, [r3, #4]
 801f79e:	60fb      	str	r3, [r7, #12]
 801f7a0:	68fb      	ldr	r3, [r7, #12]
        slave->rx_len = MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->NDTR;
 801f7a2:	687b      	ldr	r3, [r7, #4]
 801f7a4:	681b      	ldr	r3, [r3, #0]
 801f7a6:	681b      	ldr	r3, [r3, #0]
 801f7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	685b      	ldr	r3, [r3, #4]
 801f7ae:	b29b      	uxth	r3, r3
 801f7b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801f7b4:	b29a      	uxth	r2, r3
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
        slave->idle_timer_flag = 0;
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	2200      	movs	r2, #0
 801f7c0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(slave->idle_sem);
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801f7ca:	4618      	mov	r0, r3
 801f7cc:	f7ec f974 	bl	800bab8 <osSemaphoreRelease>
    }
}
 801f7d0:	bf00      	nop
 801f7d2:	3710      	adds	r7, #16
 801f7d4:	46bd      	mov	sp, r7
 801f7d6:	bd80      	pop	{r7, pc}

0801f7d8 <slave_set_tx_rx>:

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 801f7d8:	b580      	push	{r7, lr}
 801f7da:	b082      	sub	sp, #8
 801f7dc:	af00      	add	r7, sp, #0
 801f7de:	6078      	str	r0, [r7, #4]
 801f7e0:	460b      	mov	r3, r1
 801f7e2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 801f7e4:	687b      	ldr	r3, [r7, #4]
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	6858      	ldr	r0, [r3, #4]
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	681b      	ldr	r3, [r3, #0]
 801f7ee:	8919      	ldrh	r1, [r3, #8]
 801f7f0:	78fb      	ldrb	r3, [r7, #3]
 801f7f2:	2b01      	cmp	r3, #1
 801f7f4:	bf0c      	ite	eq
 801f7f6:	2301      	moveq	r3, #1
 801f7f8:	2300      	movne	r3, #0
 801f7fa:	b2db      	uxtb	r3, r3
 801f7fc:	461a      	mov	r2, r3
 801f7fe:	f7e6 fd5d 	bl	80062bc <HAL_GPIO_WritePin>
}
 801f802:	bf00      	nop
 801f804:	3708      	adds	r7, #8
 801f806:	46bd      	mov	sp, r7
 801f808:	bd80      	pop	{r7, pc}

0801f80a <slave_wait_request>:

void slave_wait_request(modbus_slave *slave)
{
 801f80a:	b580      	push	{r7, lr}
 801f80c:	b082      	sub	sp, #8
 801f80e:	af00      	add	r7, sp, #0
 801f810:	6078      	str	r0, [r7, #4]
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 801f812:	e024      	b.n	801f85e <slave_wait_request+0x54>
    {
        if (slave->idle_timer_flag == 0)
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801f81a:	2b00      	cmp	r3, #0
 801f81c:	d107      	bne.n	801f82e <slave_wait_request+0x24>
        {
            osTimerStart(slave->idle_timer, 2);
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 801f824:	2102      	movs	r1, #2
 801f826:	4618      	mov	r0, r3
 801f828:	f7eb ff2e 	bl	800b688 <osTimerStart>
 801f82c:	e017      	b.n	801f85e <slave_wait_request+0x54>
        }
        else if (slave->idle_timer_flag == 1)
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801f834:	2b01      	cmp	r3, #1
 801f836:	d112      	bne.n	801f85e <slave_wait_request+0x54>
        {
            HAL_UART_DMAStop(slave->uart_port->uart);
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	681b      	ldr	r3, [r3, #0]
 801f83c:	681b      	ldr	r3, [r3, #0]
 801f83e:	4618      	mov	r0, r3
 801f840:	f7e9 ff76 	bl	8009730 <HAL_UART_DMAStop>
            slave_response(slave);
 801f844:	6878      	ldr	r0, [r7, #4]
 801f846:	f7ff fe6b 	bl	801f520 <slave_response>
            HAL_UART_Receive_DMA(slave->uart_port->uart, slave->rx_buf, MB_SLAVE_BUFFER_LENGTH);
 801f84a:	687b      	ldr	r3, [r7, #4]
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	6818      	ldr	r0, [r3, #0]
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	330c      	adds	r3, #12
 801f854:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f858:	4619      	mov	r1, r3
 801f85a:	f7e9 ff39 	bl	80096d0 <HAL_UART_Receive_DMA>
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 801f85e:	687b      	ldr	r3, [r7, #4]
 801f860:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801f864:	f04f 31ff 	mov.w	r1, #4294967295
 801f868:	4618      	mov	r0, r3
 801f86a:	f7ec f8d3 	bl	800ba14 <osSemaphoreAcquire>
 801f86e:	4603      	mov	r3, r0
 801f870:	2b00      	cmp	r3, #0
 801f872:	d0cf      	beq.n	801f814 <slave_wait_request+0xa>
        }
    }
}
 801f874:	bf00      	nop
 801f876:	bf00      	nop
 801f878:	3708      	adds	r7, #8
 801f87a:	46bd      	mov	sp, r7
 801f87c:	bd80      	pop	{r7, pc}
	...

0801f880 <std>:
 801f880:	2300      	movs	r3, #0
 801f882:	b510      	push	{r4, lr}
 801f884:	4604      	mov	r4, r0
 801f886:	e9c0 3300 	strd	r3, r3, [r0]
 801f88a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f88e:	6083      	str	r3, [r0, #8]
 801f890:	8181      	strh	r1, [r0, #12]
 801f892:	6643      	str	r3, [r0, #100]	; 0x64
 801f894:	81c2      	strh	r2, [r0, #14]
 801f896:	6183      	str	r3, [r0, #24]
 801f898:	4619      	mov	r1, r3
 801f89a:	2208      	movs	r2, #8
 801f89c:	305c      	adds	r0, #92	; 0x5c
 801f89e:	f000 f928 	bl	801faf2 <memset>
 801f8a2:	4b05      	ldr	r3, [pc, #20]	; (801f8b8 <std+0x38>)
 801f8a4:	6263      	str	r3, [r4, #36]	; 0x24
 801f8a6:	4b05      	ldr	r3, [pc, #20]	; (801f8bc <std+0x3c>)
 801f8a8:	62a3      	str	r3, [r4, #40]	; 0x28
 801f8aa:	4b05      	ldr	r3, [pc, #20]	; (801f8c0 <std+0x40>)
 801f8ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f8ae:	4b05      	ldr	r3, [pc, #20]	; (801f8c4 <std+0x44>)
 801f8b0:	6224      	str	r4, [r4, #32]
 801f8b2:	6323      	str	r3, [r4, #48]	; 0x30
 801f8b4:	bd10      	pop	{r4, pc}
 801f8b6:	bf00      	nop
 801f8b8:	0801fd5d 	.word	0x0801fd5d
 801f8bc:	0801fd7f 	.word	0x0801fd7f
 801f8c0:	0801fdb7 	.word	0x0801fdb7
 801f8c4:	0801fddb 	.word	0x0801fddb

0801f8c8 <_cleanup_r>:
 801f8c8:	4901      	ldr	r1, [pc, #4]	; (801f8d0 <_cleanup_r+0x8>)
 801f8ca:	f000 b8af 	b.w	801fa2c <_fwalk_reent>
 801f8ce:	bf00      	nop
 801f8d0:	0801ff7d 	.word	0x0801ff7d

0801f8d4 <__sfmoreglue>:
 801f8d4:	b570      	push	{r4, r5, r6, lr}
 801f8d6:	1e4a      	subs	r2, r1, #1
 801f8d8:	2568      	movs	r5, #104	; 0x68
 801f8da:	4355      	muls	r5, r2
 801f8dc:	460e      	mov	r6, r1
 801f8de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f8e2:	f000 f90f 	bl	801fb04 <_malloc_r>
 801f8e6:	4604      	mov	r4, r0
 801f8e8:	b140      	cbz	r0, 801f8fc <__sfmoreglue+0x28>
 801f8ea:	2100      	movs	r1, #0
 801f8ec:	e9c0 1600 	strd	r1, r6, [r0]
 801f8f0:	300c      	adds	r0, #12
 801f8f2:	60a0      	str	r0, [r4, #8]
 801f8f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f8f8:	f000 f8fb 	bl	801faf2 <memset>
 801f8fc:	4620      	mov	r0, r4
 801f8fe:	bd70      	pop	{r4, r5, r6, pc}

0801f900 <__sfp_lock_acquire>:
 801f900:	4801      	ldr	r0, [pc, #4]	; (801f908 <__sfp_lock_acquire+0x8>)
 801f902:	f000 b8d8 	b.w	801fab6 <__retarget_lock_acquire_recursive>
 801f906:	bf00      	nop
 801f908:	2000ea48 	.word	0x2000ea48

0801f90c <__sfp_lock_release>:
 801f90c:	4801      	ldr	r0, [pc, #4]	; (801f914 <__sfp_lock_release+0x8>)
 801f90e:	f000 b8d3 	b.w	801fab8 <__retarget_lock_release_recursive>
 801f912:	bf00      	nop
 801f914:	2000ea48 	.word	0x2000ea48

0801f918 <__sinit_lock_acquire>:
 801f918:	4801      	ldr	r0, [pc, #4]	; (801f920 <__sinit_lock_acquire+0x8>)
 801f91a:	f000 b8cc 	b.w	801fab6 <__retarget_lock_acquire_recursive>
 801f91e:	bf00      	nop
 801f920:	2000ea43 	.word	0x2000ea43

0801f924 <__sinit_lock_release>:
 801f924:	4801      	ldr	r0, [pc, #4]	; (801f92c <__sinit_lock_release+0x8>)
 801f926:	f000 b8c7 	b.w	801fab8 <__retarget_lock_release_recursive>
 801f92a:	bf00      	nop
 801f92c:	2000ea43 	.word	0x2000ea43

0801f930 <__sinit>:
 801f930:	b510      	push	{r4, lr}
 801f932:	4604      	mov	r4, r0
 801f934:	f7ff fff0 	bl	801f918 <__sinit_lock_acquire>
 801f938:	69a3      	ldr	r3, [r4, #24]
 801f93a:	b11b      	cbz	r3, 801f944 <__sinit+0x14>
 801f93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f940:	f7ff bff0 	b.w	801f924 <__sinit_lock_release>
 801f944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f948:	6523      	str	r3, [r4, #80]	; 0x50
 801f94a:	4b13      	ldr	r3, [pc, #76]	; (801f998 <__sinit+0x68>)
 801f94c:	4a13      	ldr	r2, [pc, #76]	; (801f99c <__sinit+0x6c>)
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	62a2      	str	r2, [r4, #40]	; 0x28
 801f952:	42a3      	cmp	r3, r4
 801f954:	bf04      	itt	eq
 801f956:	2301      	moveq	r3, #1
 801f958:	61a3      	streq	r3, [r4, #24]
 801f95a:	4620      	mov	r0, r4
 801f95c:	f000 f820 	bl	801f9a0 <__sfp>
 801f960:	6060      	str	r0, [r4, #4]
 801f962:	4620      	mov	r0, r4
 801f964:	f000 f81c 	bl	801f9a0 <__sfp>
 801f968:	60a0      	str	r0, [r4, #8]
 801f96a:	4620      	mov	r0, r4
 801f96c:	f000 f818 	bl	801f9a0 <__sfp>
 801f970:	2200      	movs	r2, #0
 801f972:	60e0      	str	r0, [r4, #12]
 801f974:	2104      	movs	r1, #4
 801f976:	6860      	ldr	r0, [r4, #4]
 801f978:	f7ff ff82 	bl	801f880 <std>
 801f97c:	68a0      	ldr	r0, [r4, #8]
 801f97e:	2201      	movs	r2, #1
 801f980:	2109      	movs	r1, #9
 801f982:	f7ff ff7d 	bl	801f880 <std>
 801f986:	68e0      	ldr	r0, [r4, #12]
 801f988:	2202      	movs	r2, #2
 801f98a:	2112      	movs	r1, #18
 801f98c:	f7ff ff78 	bl	801f880 <std>
 801f990:	2301      	movs	r3, #1
 801f992:	61a3      	str	r3, [r4, #24]
 801f994:	e7d2      	b.n	801f93c <__sinit+0xc>
 801f996:	bf00      	nop
 801f998:	08024cc0 	.word	0x08024cc0
 801f99c:	0801f8c9 	.word	0x0801f8c9

0801f9a0 <__sfp>:
 801f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9a2:	4607      	mov	r7, r0
 801f9a4:	f7ff ffac 	bl	801f900 <__sfp_lock_acquire>
 801f9a8:	4b1e      	ldr	r3, [pc, #120]	; (801fa24 <__sfp+0x84>)
 801f9aa:	681e      	ldr	r6, [r3, #0]
 801f9ac:	69b3      	ldr	r3, [r6, #24]
 801f9ae:	b913      	cbnz	r3, 801f9b6 <__sfp+0x16>
 801f9b0:	4630      	mov	r0, r6
 801f9b2:	f7ff ffbd 	bl	801f930 <__sinit>
 801f9b6:	3648      	adds	r6, #72	; 0x48
 801f9b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f9bc:	3b01      	subs	r3, #1
 801f9be:	d503      	bpl.n	801f9c8 <__sfp+0x28>
 801f9c0:	6833      	ldr	r3, [r6, #0]
 801f9c2:	b30b      	cbz	r3, 801fa08 <__sfp+0x68>
 801f9c4:	6836      	ldr	r6, [r6, #0]
 801f9c6:	e7f7      	b.n	801f9b8 <__sfp+0x18>
 801f9c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f9cc:	b9d5      	cbnz	r5, 801fa04 <__sfp+0x64>
 801f9ce:	4b16      	ldr	r3, [pc, #88]	; (801fa28 <__sfp+0x88>)
 801f9d0:	60e3      	str	r3, [r4, #12]
 801f9d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f9d6:	6665      	str	r5, [r4, #100]	; 0x64
 801f9d8:	f000 f86c 	bl	801fab4 <__retarget_lock_init_recursive>
 801f9dc:	f7ff ff96 	bl	801f90c <__sfp_lock_release>
 801f9e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f9e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f9e8:	6025      	str	r5, [r4, #0]
 801f9ea:	61a5      	str	r5, [r4, #24]
 801f9ec:	2208      	movs	r2, #8
 801f9ee:	4629      	mov	r1, r5
 801f9f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f9f4:	f000 f87d 	bl	801faf2 <memset>
 801f9f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f9fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fa00:	4620      	mov	r0, r4
 801fa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa04:	3468      	adds	r4, #104	; 0x68
 801fa06:	e7d9      	b.n	801f9bc <__sfp+0x1c>
 801fa08:	2104      	movs	r1, #4
 801fa0a:	4638      	mov	r0, r7
 801fa0c:	f7ff ff62 	bl	801f8d4 <__sfmoreglue>
 801fa10:	4604      	mov	r4, r0
 801fa12:	6030      	str	r0, [r6, #0]
 801fa14:	2800      	cmp	r0, #0
 801fa16:	d1d5      	bne.n	801f9c4 <__sfp+0x24>
 801fa18:	f7ff ff78 	bl	801f90c <__sfp_lock_release>
 801fa1c:	230c      	movs	r3, #12
 801fa1e:	603b      	str	r3, [r7, #0]
 801fa20:	e7ee      	b.n	801fa00 <__sfp+0x60>
 801fa22:	bf00      	nop
 801fa24:	08024cc0 	.word	0x08024cc0
 801fa28:	ffff0001 	.word	0xffff0001

0801fa2c <_fwalk_reent>:
 801fa2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fa30:	4606      	mov	r6, r0
 801fa32:	4688      	mov	r8, r1
 801fa34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fa38:	2700      	movs	r7, #0
 801fa3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fa3e:	f1b9 0901 	subs.w	r9, r9, #1
 801fa42:	d505      	bpl.n	801fa50 <_fwalk_reent+0x24>
 801fa44:	6824      	ldr	r4, [r4, #0]
 801fa46:	2c00      	cmp	r4, #0
 801fa48:	d1f7      	bne.n	801fa3a <_fwalk_reent+0xe>
 801fa4a:	4638      	mov	r0, r7
 801fa4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fa50:	89ab      	ldrh	r3, [r5, #12]
 801fa52:	2b01      	cmp	r3, #1
 801fa54:	d907      	bls.n	801fa66 <_fwalk_reent+0x3a>
 801fa56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fa5a:	3301      	adds	r3, #1
 801fa5c:	d003      	beq.n	801fa66 <_fwalk_reent+0x3a>
 801fa5e:	4629      	mov	r1, r5
 801fa60:	4630      	mov	r0, r6
 801fa62:	47c0      	blx	r8
 801fa64:	4307      	orrs	r7, r0
 801fa66:	3568      	adds	r5, #104	; 0x68
 801fa68:	e7e9      	b.n	801fa3e <_fwalk_reent+0x12>
	...

0801fa6c <__libc_init_array>:
 801fa6c:	b570      	push	{r4, r5, r6, lr}
 801fa6e:	4d0d      	ldr	r5, [pc, #52]	; (801faa4 <__libc_init_array+0x38>)
 801fa70:	4c0d      	ldr	r4, [pc, #52]	; (801faa8 <__libc_init_array+0x3c>)
 801fa72:	1b64      	subs	r4, r4, r5
 801fa74:	10a4      	asrs	r4, r4, #2
 801fa76:	2600      	movs	r6, #0
 801fa78:	42a6      	cmp	r6, r4
 801fa7a:	d109      	bne.n	801fa90 <__libc_init_array+0x24>
 801fa7c:	4d0b      	ldr	r5, [pc, #44]	; (801faac <__libc_init_array+0x40>)
 801fa7e:	4c0c      	ldr	r4, [pc, #48]	; (801fab0 <__libc_init_array+0x44>)
 801fa80:	f001 f9de 	bl	8020e40 <_init>
 801fa84:	1b64      	subs	r4, r4, r5
 801fa86:	10a4      	asrs	r4, r4, #2
 801fa88:	2600      	movs	r6, #0
 801fa8a:	42a6      	cmp	r6, r4
 801fa8c:	d105      	bne.n	801fa9a <__libc_init_array+0x2e>
 801fa8e:	bd70      	pop	{r4, r5, r6, pc}
 801fa90:	f855 3b04 	ldr.w	r3, [r5], #4
 801fa94:	4798      	blx	r3
 801fa96:	3601      	adds	r6, #1
 801fa98:	e7ee      	b.n	801fa78 <__libc_init_array+0xc>
 801fa9a:	f855 3b04 	ldr.w	r3, [r5], #4
 801fa9e:	4798      	blx	r3
 801faa0:	3601      	adds	r6, #1
 801faa2:	e7f2      	b.n	801fa8a <__libc_init_array+0x1e>
 801faa4:	08024db4 	.word	0x08024db4
 801faa8:	08024db4 	.word	0x08024db4
 801faac:	08024db4 	.word	0x08024db4
 801fab0:	08024db8 	.word	0x08024db8

0801fab4 <__retarget_lock_init_recursive>:
 801fab4:	4770      	bx	lr

0801fab6 <__retarget_lock_acquire_recursive>:
 801fab6:	4770      	bx	lr

0801fab8 <__retarget_lock_release_recursive>:
 801fab8:	4770      	bx	lr

0801faba <memcmp>:
 801faba:	b530      	push	{r4, r5, lr}
 801fabc:	3901      	subs	r1, #1
 801fabe:	2400      	movs	r4, #0
 801fac0:	42a2      	cmp	r2, r4
 801fac2:	d101      	bne.n	801fac8 <memcmp+0xe>
 801fac4:	2000      	movs	r0, #0
 801fac6:	e005      	b.n	801fad4 <memcmp+0x1a>
 801fac8:	5d03      	ldrb	r3, [r0, r4]
 801faca:	3401      	adds	r4, #1
 801facc:	5d0d      	ldrb	r5, [r1, r4]
 801face:	42ab      	cmp	r3, r5
 801fad0:	d0f6      	beq.n	801fac0 <memcmp+0x6>
 801fad2:	1b58      	subs	r0, r3, r5
 801fad4:	bd30      	pop	{r4, r5, pc}

0801fad6 <memcpy>:
 801fad6:	440a      	add	r2, r1
 801fad8:	4291      	cmp	r1, r2
 801fada:	f100 33ff 	add.w	r3, r0, #4294967295
 801fade:	d100      	bne.n	801fae2 <memcpy+0xc>
 801fae0:	4770      	bx	lr
 801fae2:	b510      	push	{r4, lr}
 801fae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801faec:	4291      	cmp	r1, r2
 801faee:	d1f9      	bne.n	801fae4 <memcpy+0xe>
 801faf0:	bd10      	pop	{r4, pc}

0801faf2 <memset>:
 801faf2:	4402      	add	r2, r0
 801faf4:	4603      	mov	r3, r0
 801faf6:	4293      	cmp	r3, r2
 801faf8:	d100      	bne.n	801fafc <memset+0xa>
 801fafa:	4770      	bx	lr
 801fafc:	f803 1b01 	strb.w	r1, [r3], #1
 801fb00:	e7f9      	b.n	801faf6 <memset+0x4>
	...

0801fb04 <_malloc_r>:
 801fb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb06:	1ccd      	adds	r5, r1, #3
 801fb08:	f025 0503 	bic.w	r5, r5, #3
 801fb0c:	3508      	adds	r5, #8
 801fb0e:	2d0c      	cmp	r5, #12
 801fb10:	bf38      	it	cc
 801fb12:	250c      	movcc	r5, #12
 801fb14:	2d00      	cmp	r5, #0
 801fb16:	4606      	mov	r6, r0
 801fb18:	db01      	blt.n	801fb1e <_malloc_r+0x1a>
 801fb1a:	42a9      	cmp	r1, r5
 801fb1c:	d903      	bls.n	801fb26 <_malloc_r+0x22>
 801fb1e:	230c      	movs	r3, #12
 801fb20:	6033      	str	r3, [r6, #0]
 801fb22:	2000      	movs	r0, #0
 801fb24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb26:	f000 fa91 	bl	802004c <__malloc_lock>
 801fb2a:	4921      	ldr	r1, [pc, #132]	; (801fbb0 <_malloc_r+0xac>)
 801fb2c:	680a      	ldr	r2, [r1, #0]
 801fb2e:	4614      	mov	r4, r2
 801fb30:	b99c      	cbnz	r4, 801fb5a <_malloc_r+0x56>
 801fb32:	4f20      	ldr	r7, [pc, #128]	; (801fbb4 <_malloc_r+0xb0>)
 801fb34:	683b      	ldr	r3, [r7, #0]
 801fb36:	b923      	cbnz	r3, 801fb42 <_malloc_r+0x3e>
 801fb38:	4621      	mov	r1, r4
 801fb3a:	4630      	mov	r0, r6
 801fb3c:	f000 f8fe 	bl	801fd3c <_sbrk_r>
 801fb40:	6038      	str	r0, [r7, #0]
 801fb42:	4629      	mov	r1, r5
 801fb44:	4630      	mov	r0, r6
 801fb46:	f000 f8f9 	bl	801fd3c <_sbrk_r>
 801fb4a:	1c43      	adds	r3, r0, #1
 801fb4c:	d123      	bne.n	801fb96 <_malloc_r+0x92>
 801fb4e:	230c      	movs	r3, #12
 801fb50:	6033      	str	r3, [r6, #0]
 801fb52:	4630      	mov	r0, r6
 801fb54:	f000 fa80 	bl	8020058 <__malloc_unlock>
 801fb58:	e7e3      	b.n	801fb22 <_malloc_r+0x1e>
 801fb5a:	6823      	ldr	r3, [r4, #0]
 801fb5c:	1b5b      	subs	r3, r3, r5
 801fb5e:	d417      	bmi.n	801fb90 <_malloc_r+0x8c>
 801fb60:	2b0b      	cmp	r3, #11
 801fb62:	d903      	bls.n	801fb6c <_malloc_r+0x68>
 801fb64:	6023      	str	r3, [r4, #0]
 801fb66:	441c      	add	r4, r3
 801fb68:	6025      	str	r5, [r4, #0]
 801fb6a:	e004      	b.n	801fb76 <_malloc_r+0x72>
 801fb6c:	6863      	ldr	r3, [r4, #4]
 801fb6e:	42a2      	cmp	r2, r4
 801fb70:	bf0c      	ite	eq
 801fb72:	600b      	streq	r3, [r1, #0]
 801fb74:	6053      	strne	r3, [r2, #4]
 801fb76:	4630      	mov	r0, r6
 801fb78:	f000 fa6e 	bl	8020058 <__malloc_unlock>
 801fb7c:	f104 000b 	add.w	r0, r4, #11
 801fb80:	1d23      	adds	r3, r4, #4
 801fb82:	f020 0007 	bic.w	r0, r0, #7
 801fb86:	1ac2      	subs	r2, r0, r3
 801fb88:	d0cc      	beq.n	801fb24 <_malloc_r+0x20>
 801fb8a:	1a1b      	subs	r3, r3, r0
 801fb8c:	50a3      	str	r3, [r4, r2]
 801fb8e:	e7c9      	b.n	801fb24 <_malloc_r+0x20>
 801fb90:	4622      	mov	r2, r4
 801fb92:	6864      	ldr	r4, [r4, #4]
 801fb94:	e7cc      	b.n	801fb30 <_malloc_r+0x2c>
 801fb96:	1cc4      	adds	r4, r0, #3
 801fb98:	f024 0403 	bic.w	r4, r4, #3
 801fb9c:	42a0      	cmp	r0, r4
 801fb9e:	d0e3      	beq.n	801fb68 <_malloc_r+0x64>
 801fba0:	1a21      	subs	r1, r4, r0
 801fba2:	4630      	mov	r0, r6
 801fba4:	f000 f8ca 	bl	801fd3c <_sbrk_r>
 801fba8:	3001      	adds	r0, #1
 801fbaa:	d1dd      	bne.n	801fb68 <_malloc_r+0x64>
 801fbac:	e7cf      	b.n	801fb4e <_malloc_r+0x4a>
 801fbae:	bf00      	nop
 801fbb0:	200060f4 	.word	0x200060f4
 801fbb4:	200060f8 	.word	0x200060f8

0801fbb8 <iprintf>:
 801fbb8:	b40f      	push	{r0, r1, r2, r3}
 801fbba:	4b0a      	ldr	r3, [pc, #40]	; (801fbe4 <iprintf+0x2c>)
 801fbbc:	b513      	push	{r0, r1, r4, lr}
 801fbbe:	681c      	ldr	r4, [r3, #0]
 801fbc0:	b124      	cbz	r4, 801fbcc <iprintf+0x14>
 801fbc2:	69a3      	ldr	r3, [r4, #24]
 801fbc4:	b913      	cbnz	r3, 801fbcc <iprintf+0x14>
 801fbc6:	4620      	mov	r0, r4
 801fbc8:	f7ff feb2 	bl	801f930 <__sinit>
 801fbcc:	ab05      	add	r3, sp, #20
 801fbce:	9a04      	ldr	r2, [sp, #16]
 801fbd0:	68a1      	ldr	r1, [r4, #8]
 801fbd2:	9301      	str	r3, [sp, #4]
 801fbd4:	4620      	mov	r0, r4
 801fbd6:	f000 fabf 	bl	8020158 <_vfiprintf_r>
 801fbda:	b002      	add	sp, #8
 801fbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbe0:	b004      	add	sp, #16
 801fbe2:	4770      	bx	lr
 801fbe4:	200000f4 	.word	0x200000f4

0801fbe8 <rand>:
 801fbe8:	4b17      	ldr	r3, [pc, #92]	; (801fc48 <rand+0x60>)
 801fbea:	b510      	push	{r4, lr}
 801fbec:	681c      	ldr	r4, [r3, #0]
 801fbee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fbf0:	b9b3      	cbnz	r3, 801fc20 <rand+0x38>
 801fbf2:	2018      	movs	r0, #24
 801fbf4:	f000 fa22 	bl	802003c <malloc>
 801fbf8:	63a0      	str	r0, [r4, #56]	; 0x38
 801fbfa:	b928      	cbnz	r0, 801fc08 <rand+0x20>
 801fbfc:	4602      	mov	r2, r0
 801fbfe:	4b13      	ldr	r3, [pc, #76]	; (801fc4c <rand+0x64>)
 801fc00:	4813      	ldr	r0, [pc, #76]	; (801fc50 <rand+0x68>)
 801fc02:	214e      	movs	r1, #78	; 0x4e
 801fc04:	f000 f900 	bl	801fe08 <__assert_func>
 801fc08:	4a12      	ldr	r2, [pc, #72]	; (801fc54 <rand+0x6c>)
 801fc0a:	4b13      	ldr	r3, [pc, #76]	; (801fc58 <rand+0x70>)
 801fc0c:	e9c0 2300 	strd	r2, r3, [r0]
 801fc10:	4b12      	ldr	r3, [pc, #72]	; (801fc5c <rand+0x74>)
 801fc12:	6083      	str	r3, [r0, #8]
 801fc14:	230b      	movs	r3, #11
 801fc16:	8183      	strh	r3, [r0, #12]
 801fc18:	2201      	movs	r2, #1
 801fc1a:	2300      	movs	r3, #0
 801fc1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801fc20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fc22:	480f      	ldr	r0, [pc, #60]	; (801fc60 <rand+0x78>)
 801fc24:	690a      	ldr	r2, [r1, #16]
 801fc26:	694b      	ldr	r3, [r1, #20]
 801fc28:	4c0e      	ldr	r4, [pc, #56]	; (801fc64 <rand+0x7c>)
 801fc2a:	4350      	muls	r0, r2
 801fc2c:	fb04 0003 	mla	r0, r4, r3, r0
 801fc30:	fba2 3404 	umull	r3, r4, r2, r4
 801fc34:	1c5a      	adds	r2, r3, #1
 801fc36:	4404      	add	r4, r0
 801fc38:	f144 0000 	adc.w	r0, r4, #0
 801fc3c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801fc40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fc44:	bd10      	pop	{r4, pc}
 801fc46:	bf00      	nop
 801fc48:	200000f4 	.word	0x200000f4
 801fc4c:	08024cc4 	.word	0x08024cc4
 801fc50:	08024cdb 	.word	0x08024cdb
 801fc54:	abcd330e 	.word	0xabcd330e
 801fc58:	e66d1234 	.word	0xe66d1234
 801fc5c:	0005deec 	.word	0x0005deec
 801fc60:	5851f42d 	.word	0x5851f42d
 801fc64:	4c957f2d 	.word	0x4c957f2d

0801fc68 <cleanup_glue>:
 801fc68:	b538      	push	{r3, r4, r5, lr}
 801fc6a:	460c      	mov	r4, r1
 801fc6c:	6809      	ldr	r1, [r1, #0]
 801fc6e:	4605      	mov	r5, r0
 801fc70:	b109      	cbz	r1, 801fc76 <cleanup_glue+0xe>
 801fc72:	f7ff fff9 	bl	801fc68 <cleanup_glue>
 801fc76:	4621      	mov	r1, r4
 801fc78:	4628      	mov	r0, r5
 801fc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc7e:	f000 b9f1 	b.w	8020064 <_free_r>
	...

0801fc84 <_reclaim_reent>:
 801fc84:	4b2c      	ldr	r3, [pc, #176]	; (801fd38 <_reclaim_reent+0xb4>)
 801fc86:	681b      	ldr	r3, [r3, #0]
 801fc88:	4283      	cmp	r3, r0
 801fc8a:	b570      	push	{r4, r5, r6, lr}
 801fc8c:	4604      	mov	r4, r0
 801fc8e:	d051      	beq.n	801fd34 <_reclaim_reent+0xb0>
 801fc90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801fc92:	b143      	cbz	r3, 801fca6 <_reclaim_reent+0x22>
 801fc94:	68db      	ldr	r3, [r3, #12]
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d14a      	bne.n	801fd30 <_reclaim_reent+0xac>
 801fc9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fc9c:	6819      	ldr	r1, [r3, #0]
 801fc9e:	b111      	cbz	r1, 801fca6 <_reclaim_reent+0x22>
 801fca0:	4620      	mov	r0, r4
 801fca2:	f000 f9df 	bl	8020064 <_free_r>
 801fca6:	6961      	ldr	r1, [r4, #20]
 801fca8:	b111      	cbz	r1, 801fcb0 <_reclaim_reent+0x2c>
 801fcaa:	4620      	mov	r0, r4
 801fcac:	f000 f9da 	bl	8020064 <_free_r>
 801fcb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801fcb2:	b111      	cbz	r1, 801fcba <_reclaim_reent+0x36>
 801fcb4:	4620      	mov	r0, r4
 801fcb6:	f000 f9d5 	bl	8020064 <_free_r>
 801fcba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fcbc:	b111      	cbz	r1, 801fcc4 <_reclaim_reent+0x40>
 801fcbe:	4620      	mov	r0, r4
 801fcc0:	f000 f9d0 	bl	8020064 <_free_r>
 801fcc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801fcc6:	b111      	cbz	r1, 801fcce <_reclaim_reent+0x4a>
 801fcc8:	4620      	mov	r0, r4
 801fcca:	f000 f9cb 	bl	8020064 <_free_r>
 801fcce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fcd0:	b111      	cbz	r1, 801fcd8 <_reclaim_reent+0x54>
 801fcd2:	4620      	mov	r0, r4
 801fcd4:	f000 f9c6 	bl	8020064 <_free_r>
 801fcd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801fcda:	b111      	cbz	r1, 801fce2 <_reclaim_reent+0x5e>
 801fcdc:	4620      	mov	r0, r4
 801fcde:	f000 f9c1 	bl	8020064 <_free_r>
 801fce2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801fce4:	b111      	cbz	r1, 801fcec <_reclaim_reent+0x68>
 801fce6:	4620      	mov	r0, r4
 801fce8:	f000 f9bc 	bl	8020064 <_free_r>
 801fcec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fcee:	b111      	cbz	r1, 801fcf6 <_reclaim_reent+0x72>
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	f000 f9b7 	bl	8020064 <_free_r>
 801fcf6:	69a3      	ldr	r3, [r4, #24]
 801fcf8:	b1e3      	cbz	r3, 801fd34 <_reclaim_reent+0xb0>
 801fcfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fcfc:	4620      	mov	r0, r4
 801fcfe:	4798      	blx	r3
 801fd00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fd02:	b1b9      	cbz	r1, 801fd34 <_reclaim_reent+0xb0>
 801fd04:	4620      	mov	r0, r4
 801fd06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fd0a:	f7ff bfad 	b.w	801fc68 <cleanup_glue>
 801fd0e:	5949      	ldr	r1, [r1, r5]
 801fd10:	b941      	cbnz	r1, 801fd24 <_reclaim_reent+0xa0>
 801fd12:	3504      	adds	r5, #4
 801fd14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fd16:	2d80      	cmp	r5, #128	; 0x80
 801fd18:	68d9      	ldr	r1, [r3, #12]
 801fd1a:	d1f8      	bne.n	801fd0e <_reclaim_reent+0x8a>
 801fd1c:	4620      	mov	r0, r4
 801fd1e:	f000 f9a1 	bl	8020064 <_free_r>
 801fd22:	e7ba      	b.n	801fc9a <_reclaim_reent+0x16>
 801fd24:	680e      	ldr	r6, [r1, #0]
 801fd26:	4620      	mov	r0, r4
 801fd28:	f000 f99c 	bl	8020064 <_free_r>
 801fd2c:	4631      	mov	r1, r6
 801fd2e:	e7ef      	b.n	801fd10 <_reclaim_reent+0x8c>
 801fd30:	2500      	movs	r5, #0
 801fd32:	e7ef      	b.n	801fd14 <_reclaim_reent+0x90>
 801fd34:	bd70      	pop	{r4, r5, r6, pc}
 801fd36:	bf00      	nop
 801fd38:	200000f4 	.word	0x200000f4

0801fd3c <_sbrk_r>:
 801fd3c:	b538      	push	{r3, r4, r5, lr}
 801fd3e:	4d06      	ldr	r5, [pc, #24]	; (801fd58 <_sbrk_r+0x1c>)
 801fd40:	2300      	movs	r3, #0
 801fd42:	4604      	mov	r4, r0
 801fd44:	4608      	mov	r0, r1
 801fd46:	602b      	str	r3, [r5, #0]
 801fd48:	f7e2 f85a 	bl	8001e00 <_sbrk>
 801fd4c:	1c43      	adds	r3, r0, #1
 801fd4e:	d102      	bne.n	801fd56 <_sbrk_r+0x1a>
 801fd50:	682b      	ldr	r3, [r5, #0]
 801fd52:	b103      	cbz	r3, 801fd56 <_sbrk_r+0x1a>
 801fd54:	6023      	str	r3, [r4, #0]
 801fd56:	bd38      	pop	{r3, r4, r5, pc}
 801fd58:	2000ea38 	.word	0x2000ea38

0801fd5c <__sread>:
 801fd5c:	b510      	push	{r4, lr}
 801fd5e:	460c      	mov	r4, r1
 801fd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd64:	f000 fcbc 	bl	80206e0 <_read_r>
 801fd68:	2800      	cmp	r0, #0
 801fd6a:	bfab      	itete	ge
 801fd6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fd6e:	89a3      	ldrhlt	r3, [r4, #12]
 801fd70:	181b      	addge	r3, r3, r0
 801fd72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fd76:	bfac      	ite	ge
 801fd78:	6563      	strge	r3, [r4, #84]	; 0x54
 801fd7a:	81a3      	strhlt	r3, [r4, #12]
 801fd7c:	bd10      	pop	{r4, pc}

0801fd7e <__swrite>:
 801fd7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd82:	461f      	mov	r7, r3
 801fd84:	898b      	ldrh	r3, [r1, #12]
 801fd86:	05db      	lsls	r3, r3, #23
 801fd88:	4605      	mov	r5, r0
 801fd8a:	460c      	mov	r4, r1
 801fd8c:	4616      	mov	r6, r2
 801fd8e:	d505      	bpl.n	801fd9c <__swrite+0x1e>
 801fd90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd94:	2302      	movs	r3, #2
 801fd96:	2200      	movs	r2, #0
 801fd98:	f000 f93e 	bl	8020018 <_lseek_r>
 801fd9c:	89a3      	ldrh	r3, [r4, #12]
 801fd9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fda2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fda6:	81a3      	strh	r3, [r4, #12]
 801fda8:	4632      	mov	r2, r6
 801fdaa:	463b      	mov	r3, r7
 801fdac:	4628      	mov	r0, r5
 801fdae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fdb2:	f000 b817 	b.w	801fde4 <_write_r>

0801fdb6 <__sseek>:
 801fdb6:	b510      	push	{r4, lr}
 801fdb8:	460c      	mov	r4, r1
 801fdba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdbe:	f000 f92b 	bl	8020018 <_lseek_r>
 801fdc2:	1c43      	adds	r3, r0, #1
 801fdc4:	89a3      	ldrh	r3, [r4, #12]
 801fdc6:	bf15      	itete	ne
 801fdc8:	6560      	strne	r0, [r4, #84]	; 0x54
 801fdca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fdce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fdd2:	81a3      	strheq	r3, [r4, #12]
 801fdd4:	bf18      	it	ne
 801fdd6:	81a3      	strhne	r3, [r4, #12]
 801fdd8:	bd10      	pop	{r4, pc}

0801fdda <__sclose>:
 801fdda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdde:	f000 b831 	b.w	801fe44 <_close_r>
	...

0801fde4 <_write_r>:
 801fde4:	b538      	push	{r3, r4, r5, lr}
 801fde6:	4d07      	ldr	r5, [pc, #28]	; (801fe04 <_write_r+0x20>)
 801fde8:	4604      	mov	r4, r0
 801fdea:	4608      	mov	r0, r1
 801fdec:	4611      	mov	r1, r2
 801fdee:	2200      	movs	r2, #0
 801fdf0:	602a      	str	r2, [r5, #0]
 801fdf2:	461a      	mov	r2, r3
 801fdf4:	f7e1 ffb3 	bl	8001d5e <_write>
 801fdf8:	1c43      	adds	r3, r0, #1
 801fdfa:	d102      	bne.n	801fe02 <_write_r+0x1e>
 801fdfc:	682b      	ldr	r3, [r5, #0]
 801fdfe:	b103      	cbz	r3, 801fe02 <_write_r+0x1e>
 801fe00:	6023      	str	r3, [r4, #0]
 801fe02:	bd38      	pop	{r3, r4, r5, pc}
 801fe04:	2000ea38 	.word	0x2000ea38

0801fe08 <__assert_func>:
 801fe08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fe0a:	4614      	mov	r4, r2
 801fe0c:	461a      	mov	r2, r3
 801fe0e:	4b09      	ldr	r3, [pc, #36]	; (801fe34 <__assert_func+0x2c>)
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	4605      	mov	r5, r0
 801fe14:	68d8      	ldr	r0, [r3, #12]
 801fe16:	b14c      	cbz	r4, 801fe2c <__assert_func+0x24>
 801fe18:	4b07      	ldr	r3, [pc, #28]	; (801fe38 <__assert_func+0x30>)
 801fe1a:	9100      	str	r1, [sp, #0]
 801fe1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fe20:	4906      	ldr	r1, [pc, #24]	; (801fe3c <__assert_func+0x34>)
 801fe22:	462b      	mov	r3, r5
 801fe24:	f000 f8e6 	bl	801fff4 <fiprintf>
 801fe28:	f000 fd2c 	bl	8020884 <abort>
 801fe2c:	4b04      	ldr	r3, [pc, #16]	; (801fe40 <__assert_func+0x38>)
 801fe2e:	461c      	mov	r4, r3
 801fe30:	e7f3      	b.n	801fe1a <__assert_func+0x12>
 801fe32:	bf00      	nop
 801fe34:	200000f4 	.word	0x200000f4
 801fe38:	08024d3a 	.word	0x08024d3a
 801fe3c:	08024d47 	.word	0x08024d47
 801fe40:	08024d75 	.word	0x08024d75

0801fe44 <_close_r>:
 801fe44:	b538      	push	{r3, r4, r5, lr}
 801fe46:	4d06      	ldr	r5, [pc, #24]	; (801fe60 <_close_r+0x1c>)
 801fe48:	2300      	movs	r3, #0
 801fe4a:	4604      	mov	r4, r0
 801fe4c:	4608      	mov	r0, r1
 801fe4e:	602b      	str	r3, [r5, #0]
 801fe50:	f7e1 ffa1 	bl	8001d96 <_close>
 801fe54:	1c43      	adds	r3, r0, #1
 801fe56:	d102      	bne.n	801fe5e <_close_r+0x1a>
 801fe58:	682b      	ldr	r3, [r5, #0]
 801fe5a:	b103      	cbz	r3, 801fe5e <_close_r+0x1a>
 801fe5c:	6023      	str	r3, [r4, #0]
 801fe5e:	bd38      	pop	{r3, r4, r5, pc}
 801fe60:	2000ea38 	.word	0x2000ea38

0801fe64 <__errno>:
 801fe64:	4b01      	ldr	r3, [pc, #4]	; (801fe6c <__errno+0x8>)
 801fe66:	6818      	ldr	r0, [r3, #0]
 801fe68:	4770      	bx	lr
 801fe6a:	bf00      	nop
 801fe6c:	200000f4 	.word	0x200000f4

0801fe70 <__sflush_r>:
 801fe70:	898a      	ldrh	r2, [r1, #12]
 801fe72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe76:	4605      	mov	r5, r0
 801fe78:	0710      	lsls	r0, r2, #28
 801fe7a:	460c      	mov	r4, r1
 801fe7c:	d458      	bmi.n	801ff30 <__sflush_r+0xc0>
 801fe7e:	684b      	ldr	r3, [r1, #4]
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	dc05      	bgt.n	801fe90 <__sflush_r+0x20>
 801fe84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	dc02      	bgt.n	801fe90 <__sflush_r+0x20>
 801fe8a:	2000      	movs	r0, #0
 801fe8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fe92:	2e00      	cmp	r6, #0
 801fe94:	d0f9      	beq.n	801fe8a <__sflush_r+0x1a>
 801fe96:	2300      	movs	r3, #0
 801fe98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fe9c:	682f      	ldr	r7, [r5, #0]
 801fe9e:	602b      	str	r3, [r5, #0]
 801fea0:	d032      	beq.n	801ff08 <__sflush_r+0x98>
 801fea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fea4:	89a3      	ldrh	r3, [r4, #12]
 801fea6:	075a      	lsls	r2, r3, #29
 801fea8:	d505      	bpl.n	801feb6 <__sflush_r+0x46>
 801feaa:	6863      	ldr	r3, [r4, #4]
 801feac:	1ac0      	subs	r0, r0, r3
 801feae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801feb0:	b10b      	cbz	r3, 801feb6 <__sflush_r+0x46>
 801feb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801feb4:	1ac0      	subs	r0, r0, r3
 801feb6:	2300      	movs	r3, #0
 801feb8:	4602      	mov	r2, r0
 801feba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801febc:	6a21      	ldr	r1, [r4, #32]
 801febe:	4628      	mov	r0, r5
 801fec0:	47b0      	blx	r6
 801fec2:	1c43      	adds	r3, r0, #1
 801fec4:	89a3      	ldrh	r3, [r4, #12]
 801fec6:	d106      	bne.n	801fed6 <__sflush_r+0x66>
 801fec8:	6829      	ldr	r1, [r5, #0]
 801feca:	291d      	cmp	r1, #29
 801fecc:	d82c      	bhi.n	801ff28 <__sflush_r+0xb8>
 801fece:	4a2a      	ldr	r2, [pc, #168]	; (801ff78 <__sflush_r+0x108>)
 801fed0:	40ca      	lsrs	r2, r1
 801fed2:	07d6      	lsls	r6, r2, #31
 801fed4:	d528      	bpl.n	801ff28 <__sflush_r+0xb8>
 801fed6:	2200      	movs	r2, #0
 801fed8:	6062      	str	r2, [r4, #4]
 801feda:	04d9      	lsls	r1, r3, #19
 801fedc:	6922      	ldr	r2, [r4, #16]
 801fede:	6022      	str	r2, [r4, #0]
 801fee0:	d504      	bpl.n	801feec <__sflush_r+0x7c>
 801fee2:	1c42      	adds	r2, r0, #1
 801fee4:	d101      	bne.n	801feea <__sflush_r+0x7a>
 801fee6:	682b      	ldr	r3, [r5, #0]
 801fee8:	b903      	cbnz	r3, 801feec <__sflush_r+0x7c>
 801feea:	6560      	str	r0, [r4, #84]	; 0x54
 801feec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801feee:	602f      	str	r7, [r5, #0]
 801fef0:	2900      	cmp	r1, #0
 801fef2:	d0ca      	beq.n	801fe8a <__sflush_r+0x1a>
 801fef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fef8:	4299      	cmp	r1, r3
 801fefa:	d002      	beq.n	801ff02 <__sflush_r+0x92>
 801fefc:	4628      	mov	r0, r5
 801fefe:	f000 f8b1 	bl	8020064 <_free_r>
 801ff02:	2000      	movs	r0, #0
 801ff04:	6360      	str	r0, [r4, #52]	; 0x34
 801ff06:	e7c1      	b.n	801fe8c <__sflush_r+0x1c>
 801ff08:	6a21      	ldr	r1, [r4, #32]
 801ff0a:	2301      	movs	r3, #1
 801ff0c:	4628      	mov	r0, r5
 801ff0e:	47b0      	blx	r6
 801ff10:	1c41      	adds	r1, r0, #1
 801ff12:	d1c7      	bne.n	801fea4 <__sflush_r+0x34>
 801ff14:	682b      	ldr	r3, [r5, #0]
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d0c4      	beq.n	801fea4 <__sflush_r+0x34>
 801ff1a:	2b1d      	cmp	r3, #29
 801ff1c:	d001      	beq.n	801ff22 <__sflush_r+0xb2>
 801ff1e:	2b16      	cmp	r3, #22
 801ff20:	d101      	bne.n	801ff26 <__sflush_r+0xb6>
 801ff22:	602f      	str	r7, [r5, #0]
 801ff24:	e7b1      	b.n	801fe8a <__sflush_r+0x1a>
 801ff26:	89a3      	ldrh	r3, [r4, #12]
 801ff28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ff2c:	81a3      	strh	r3, [r4, #12]
 801ff2e:	e7ad      	b.n	801fe8c <__sflush_r+0x1c>
 801ff30:	690f      	ldr	r7, [r1, #16]
 801ff32:	2f00      	cmp	r7, #0
 801ff34:	d0a9      	beq.n	801fe8a <__sflush_r+0x1a>
 801ff36:	0793      	lsls	r3, r2, #30
 801ff38:	680e      	ldr	r6, [r1, #0]
 801ff3a:	bf08      	it	eq
 801ff3c:	694b      	ldreq	r3, [r1, #20]
 801ff3e:	600f      	str	r7, [r1, #0]
 801ff40:	bf18      	it	ne
 801ff42:	2300      	movne	r3, #0
 801ff44:	eba6 0807 	sub.w	r8, r6, r7
 801ff48:	608b      	str	r3, [r1, #8]
 801ff4a:	f1b8 0f00 	cmp.w	r8, #0
 801ff4e:	dd9c      	ble.n	801fe8a <__sflush_r+0x1a>
 801ff50:	6a21      	ldr	r1, [r4, #32]
 801ff52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ff54:	4643      	mov	r3, r8
 801ff56:	463a      	mov	r2, r7
 801ff58:	4628      	mov	r0, r5
 801ff5a:	47b0      	blx	r6
 801ff5c:	2800      	cmp	r0, #0
 801ff5e:	dc06      	bgt.n	801ff6e <__sflush_r+0xfe>
 801ff60:	89a3      	ldrh	r3, [r4, #12]
 801ff62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ff66:	81a3      	strh	r3, [r4, #12]
 801ff68:	f04f 30ff 	mov.w	r0, #4294967295
 801ff6c:	e78e      	b.n	801fe8c <__sflush_r+0x1c>
 801ff6e:	4407      	add	r7, r0
 801ff70:	eba8 0800 	sub.w	r8, r8, r0
 801ff74:	e7e9      	b.n	801ff4a <__sflush_r+0xda>
 801ff76:	bf00      	nop
 801ff78:	20400001 	.word	0x20400001

0801ff7c <_fflush_r>:
 801ff7c:	b538      	push	{r3, r4, r5, lr}
 801ff7e:	690b      	ldr	r3, [r1, #16]
 801ff80:	4605      	mov	r5, r0
 801ff82:	460c      	mov	r4, r1
 801ff84:	b913      	cbnz	r3, 801ff8c <_fflush_r+0x10>
 801ff86:	2500      	movs	r5, #0
 801ff88:	4628      	mov	r0, r5
 801ff8a:	bd38      	pop	{r3, r4, r5, pc}
 801ff8c:	b118      	cbz	r0, 801ff96 <_fflush_r+0x1a>
 801ff8e:	6983      	ldr	r3, [r0, #24]
 801ff90:	b90b      	cbnz	r3, 801ff96 <_fflush_r+0x1a>
 801ff92:	f7ff fccd 	bl	801f930 <__sinit>
 801ff96:	4b14      	ldr	r3, [pc, #80]	; (801ffe8 <_fflush_r+0x6c>)
 801ff98:	429c      	cmp	r4, r3
 801ff9a:	d11b      	bne.n	801ffd4 <_fflush_r+0x58>
 801ff9c:	686c      	ldr	r4, [r5, #4]
 801ff9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	d0ef      	beq.n	801ff86 <_fflush_r+0xa>
 801ffa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ffa8:	07d0      	lsls	r0, r2, #31
 801ffaa:	d404      	bmi.n	801ffb6 <_fflush_r+0x3a>
 801ffac:	0599      	lsls	r1, r3, #22
 801ffae:	d402      	bmi.n	801ffb6 <_fflush_r+0x3a>
 801ffb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ffb2:	f7ff fd80 	bl	801fab6 <__retarget_lock_acquire_recursive>
 801ffb6:	4628      	mov	r0, r5
 801ffb8:	4621      	mov	r1, r4
 801ffba:	f7ff ff59 	bl	801fe70 <__sflush_r>
 801ffbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ffc0:	07da      	lsls	r2, r3, #31
 801ffc2:	4605      	mov	r5, r0
 801ffc4:	d4e0      	bmi.n	801ff88 <_fflush_r+0xc>
 801ffc6:	89a3      	ldrh	r3, [r4, #12]
 801ffc8:	059b      	lsls	r3, r3, #22
 801ffca:	d4dd      	bmi.n	801ff88 <_fflush_r+0xc>
 801ffcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ffce:	f7ff fd73 	bl	801fab8 <__retarget_lock_release_recursive>
 801ffd2:	e7d9      	b.n	801ff88 <_fflush_r+0xc>
 801ffd4:	4b05      	ldr	r3, [pc, #20]	; (801ffec <_fflush_r+0x70>)
 801ffd6:	429c      	cmp	r4, r3
 801ffd8:	d101      	bne.n	801ffde <_fflush_r+0x62>
 801ffda:	68ac      	ldr	r4, [r5, #8]
 801ffdc:	e7df      	b.n	801ff9e <_fflush_r+0x22>
 801ffde:	4b04      	ldr	r3, [pc, #16]	; (801fff0 <_fflush_r+0x74>)
 801ffe0:	429c      	cmp	r4, r3
 801ffe2:	bf08      	it	eq
 801ffe4:	68ec      	ldreq	r4, [r5, #12]
 801ffe6:	e7da      	b.n	801ff9e <_fflush_r+0x22>
 801ffe8:	08024c80 	.word	0x08024c80
 801ffec:	08024ca0 	.word	0x08024ca0
 801fff0:	08024c60 	.word	0x08024c60

0801fff4 <fiprintf>:
 801fff4:	b40e      	push	{r1, r2, r3}
 801fff6:	b503      	push	{r0, r1, lr}
 801fff8:	4601      	mov	r1, r0
 801fffa:	ab03      	add	r3, sp, #12
 801fffc:	4805      	ldr	r0, [pc, #20]	; (8020014 <fiprintf+0x20>)
 801fffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8020002:	6800      	ldr	r0, [r0, #0]
 8020004:	9301      	str	r3, [sp, #4]
 8020006:	f000 f8a7 	bl	8020158 <_vfiprintf_r>
 802000a:	b002      	add	sp, #8
 802000c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020010:	b003      	add	sp, #12
 8020012:	4770      	bx	lr
 8020014:	200000f4 	.word	0x200000f4

08020018 <_lseek_r>:
 8020018:	b538      	push	{r3, r4, r5, lr}
 802001a:	4d07      	ldr	r5, [pc, #28]	; (8020038 <_lseek_r+0x20>)
 802001c:	4604      	mov	r4, r0
 802001e:	4608      	mov	r0, r1
 8020020:	4611      	mov	r1, r2
 8020022:	2200      	movs	r2, #0
 8020024:	602a      	str	r2, [r5, #0]
 8020026:	461a      	mov	r2, r3
 8020028:	f7e1 fedc 	bl	8001de4 <_lseek>
 802002c:	1c43      	adds	r3, r0, #1
 802002e:	d102      	bne.n	8020036 <_lseek_r+0x1e>
 8020030:	682b      	ldr	r3, [r5, #0]
 8020032:	b103      	cbz	r3, 8020036 <_lseek_r+0x1e>
 8020034:	6023      	str	r3, [r4, #0]
 8020036:	bd38      	pop	{r3, r4, r5, pc}
 8020038:	2000ea38 	.word	0x2000ea38

0802003c <malloc>:
 802003c:	4b02      	ldr	r3, [pc, #8]	; (8020048 <malloc+0xc>)
 802003e:	4601      	mov	r1, r0
 8020040:	6818      	ldr	r0, [r3, #0]
 8020042:	f7ff bd5f 	b.w	801fb04 <_malloc_r>
 8020046:	bf00      	nop
 8020048:	200000f4 	.word	0x200000f4

0802004c <__malloc_lock>:
 802004c:	4801      	ldr	r0, [pc, #4]	; (8020054 <__malloc_lock+0x8>)
 802004e:	f7ff bd32 	b.w	801fab6 <__retarget_lock_acquire_recursive>
 8020052:	bf00      	nop
 8020054:	2000ea44 	.word	0x2000ea44

08020058 <__malloc_unlock>:
 8020058:	4801      	ldr	r0, [pc, #4]	; (8020060 <__malloc_unlock+0x8>)
 802005a:	f7ff bd2d 	b.w	801fab8 <__retarget_lock_release_recursive>
 802005e:	bf00      	nop
 8020060:	2000ea44 	.word	0x2000ea44

08020064 <_free_r>:
 8020064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020066:	2900      	cmp	r1, #0
 8020068:	d048      	beq.n	80200fc <_free_r+0x98>
 802006a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802006e:	9001      	str	r0, [sp, #4]
 8020070:	2b00      	cmp	r3, #0
 8020072:	f1a1 0404 	sub.w	r4, r1, #4
 8020076:	bfb8      	it	lt
 8020078:	18e4      	addlt	r4, r4, r3
 802007a:	f7ff ffe7 	bl	802004c <__malloc_lock>
 802007e:	4a20      	ldr	r2, [pc, #128]	; (8020100 <_free_r+0x9c>)
 8020080:	9801      	ldr	r0, [sp, #4]
 8020082:	6813      	ldr	r3, [r2, #0]
 8020084:	4615      	mov	r5, r2
 8020086:	b933      	cbnz	r3, 8020096 <_free_r+0x32>
 8020088:	6063      	str	r3, [r4, #4]
 802008a:	6014      	str	r4, [r2, #0]
 802008c:	b003      	add	sp, #12
 802008e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020092:	f7ff bfe1 	b.w	8020058 <__malloc_unlock>
 8020096:	42a3      	cmp	r3, r4
 8020098:	d90b      	bls.n	80200b2 <_free_r+0x4e>
 802009a:	6821      	ldr	r1, [r4, #0]
 802009c:	1862      	adds	r2, r4, r1
 802009e:	4293      	cmp	r3, r2
 80200a0:	bf04      	itt	eq
 80200a2:	681a      	ldreq	r2, [r3, #0]
 80200a4:	685b      	ldreq	r3, [r3, #4]
 80200a6:	6063      	str	r3, [r4, #4]
 80200a8:	bf04      	itt	eq
 80200aa:	1852      	addeq	r2, r2, r1
 80200ac:	6022      	streq	r2, [r4, #0]
 80200ae:	602c      	str	r4, [r5, #0]
 80200b0:	e7ec      	b.n	802008c <_free_r+0x28>
 80200b2:	461a      	mov	r2, r3
 80200b4:	685b      	ldr	r3, [r3, #4]
 80200b6:	b10b      	cbz	r3, 80200bc <_free_r+0x58>
 80200b8:	42a3      	cmp	r3, r4
 80200ba:	d9fa      	bls.n	80200b2 <_free_r+0x4e>
 80200bc:	6811      	ldr	r1, [r2, #0]
 80200be:	1855      	adds	r5, r2, r1
 80200c0:	42a5      	cmp	r5, r4
 80200c2:	d10b      	bne.n	80200dc <_free_r+0x78>
 80200c4:	6824      	ldr	r4, [r4, #0]
 80200c6:	4421      	add	r1, r4
 80200c8:	1854      	adds	r4, r2, r1
 80200ca:	42a3      	cmp	r3, r4
 80200cc:	6011      	str	r1, [r2, #0]
 80200ce:	d1dd      	bne.n	802008c <_free_r+0x28>
 80200d0:	681c      	ldr	r4, [r3, #0]
 80200d2:	685b      	ldr	r3, [r3, #4]
 80200d4:	6053      	str	r3, [r2, #4]
 80200d6:	4421      	add	r1, r4
 80200d8:	6011      	str	r1, [r2, #0]
 80200da:	e7d7      	b.n	802008c <_free_r+0x28>
 80200dc:	d902      	bls.n	80200e4 <_free_r+0x80>
 80200de:	230c      	movs	r3, #12
 80200e0:	6003      	str	r3, [r0, #0]
 80200e2:	e7d3      	b.n	802008c <_free_r+0x28>
 80200e4:	6825      	ldr	r5, [r4, #0]
 80200e6:	1961      	adds	r1, r4, r5
 80200e8:	428b      	cmp	r3, r1
 80200ea:	bf04      	itt	eq
 80200ec:	6819      	ldreq	r1, [r3, #0]
 80200ee:	685b      	ldreq	r3, [r3, #4]
 80200f0:	6063      	str	r3, [r4, #4]
 80200f2:	bf04      	itt	eq
 80200f4:	1949      	addeq	r1, r1, r5
 80200f6:	6021      	streq	r1, [r4, #0]
 80200f8:	6054      	str	r4, [r2, #4]
 80200fa:	e7c7      	b.n	802008c <_free_r+0x28>
 80200fc:	b003      	add	sp, #12
 80200fe:	bd30      	pop	{r4, r5, pc}
 8020100:	200060f4 	.word	0x200060f4

08020104 <__sfputc_r>:
 8020104:	6893      	ldr	r3, [r2, #8]
 8020106:	3b01      	subs	r3, #1
 8020108:	2b00      	cmp	r3, #0
 802010a:	b410      	push	{r4}
 802010c:	6093      	str	r3, [r2, #8]
 802010e:	da08      	bge.n	8020122 <__sfputc_r+0x1e>
 8020110:	6994      	ldr	r4, [r2, #24]
 8020112:	42a3      	cmp	r3, r4
 8020114:	db01      	blt.n	802011a <__sfputc_r+0x16>
 8020116:	290a      	cmp	r1, #10
 8020118:	d103      	bne.n	8020122 <__sfputc_r+0x1e>
 802011a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802011e:	f000 baf1 	b.w	8020704 <__swbuf_r>
 8020122:	6813      	ldr	r3, [r2, #0]
 8020124:	1c58      	adds	r0, r3, #1
 8020126:	6010      	str	r0, [r2, #0]
 8020128:	7019      	strb	r1, [r3, #0]
 802012a:	4608      	mov	r0, r1
 802012c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020130:	4770      	bx	lr

08020132 <__sfputs_r>:
 8020132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020134:	4606      	mov	r6, r0
 8020136:	460f      	mov	r7, r1
 8020138:	4614      	mov	r4, r2
 802013a:	18d5      	adds	r5, r2, r3
 802013c:	42ac      	cmp	r4, r5
 802013e:	d101      	bne.n	8020144 <__sfputs_r+0x12>
 8020140:	2000      	movs	r0, #0
 8020142:	e007      	b.n	8020154 <__sfputs_r+0x22>
 8020144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020148:	463a      	mov	r2, r7
 802014a:	4630      	mov	r0, r6
 802014c:	f7ff ffda 	bl	8020104 <__sfputc_r>
 8020150:	1c43      	adds	r3, r0, #1
 8020152:	d1f3      	bne.n	802013c <__sfputs_r+0xa>
 8020154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020158 <_vfiprintf_r>:
 8020158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802015c:	460d      	mov	r5, r1
 802015e:	b09d      	sub	sp, #116	; 0x74
 8020160:	4614      	mov	r4, r2
 8020162:	4698      	mov	r8, r3
 8020164:	4606      	mov	r6, r0
 8020166:	b118      	cbz	r0, 8020170 <_vfiprintf_r+0x18>
 8020168:	6983      	ldr	r3, [r0, #24]
 802016a:	b90b      	cbnz	r3, 8020170 <_vfiprintf_r+0x18>
 802016c:	f7ff fbe0 	bl	801f930 <__sinit>
 8020170:	4b89      	ldr	r3, [pc, #548]	; (8020398 <_vfiprintf_r+0x240>)
 8020172:	429d      	cmp	r5, r3
 8020174:	d11b      	bne.n	80201ae <_vfiprintf_r+0x56>
 8020176:	6875      	ldr	r5, [r6, #4]
 8020178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802017a:	07d9      	lsls	r1, r3, #31
 802017c:	d405      	bmi.n	802018a <_vfiprintf_r+0x32>
 802017e:	89ab      	ldrh	r3, [r5, #12]
 8020180:	059a      	lsls	r2, r3, #22
 8020182:	d402      	bmi.n	802018a <_vfiprintf_r+0x32>
 8020184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020186:	f7ff fc96 	bl	801fab6 <__retarget_lock_acquire_recursive>
 802018a:	89ab      	ldrh	r3, [r5, #12]
 802018c:	071b      	lsls	r3, r3, #28
 802018e:	d501      	bpl.n	8020194 <_vfiprintf_r+0x3c>
 8020190:	692b      	ldr	r3, [r5, #16]
 8020192:	b9eb      	cbnz	r3, 80201d0 <_vfiprintf_r+0x78>
 8020194:	4629      	mov	r1, r5
 8020196:	4630      	mov	r0, r6
 8020198:	f000 fb06 	bl	80207a8 <__swsetup_r>
 802019c:	b1c0      	cbz	r0, 80201d0 <_vfiprintf_r+0x78>
 802019e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80201a0:	07dc      	lsls	r4, r3, #31
 80201a2:	d50e      	bpl.n	80201c2 <_vfiprintf_r+0x6a>
 80201a4:	f04f 30ff 	mov.w	r0, #4294967295
 80201a8:	b01d      	add	sp, #116	; 0x74
 80201aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ae:	4b7b      	ldr	r3, [pc, #492]	; (802039c <_vfiprintf_r+0x244>)
 80201b0:	429d      	cmp	r5, r3
 80201b2:	d101      	bne.n	80201b8 <_vfiprintf_r+0x60>
 80201b4:	68b5      	ldr	r5, [r6, #8]
 80201b6:	e7df      	b.n	8020178 <_vfiprintf_r+0x20>
 80201b8:	4b79      	ldr	r3, [pc, #484]	; (80203a0 <_vfiprintf_r+0x248>)
 80201ba:	429d      	cmp	r5, r3
 80201bc:	bf08      	it	eq
 80201be:	68f5      	ldreq	r5, [r6, #12]
 80201c0:	e7da      	b.n	8020178 <_vfiprintf_r+0x20>
 80201c2:	89ab      	ldrh	r3, [r5, #12]
 80201c4:	0598      	lsls	r0, r3, #22
 80201c6:	d4ed      	bmi.n	80201a4 <_vfiprintf_r+0x4c>
 80201c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80201ca:	f7ff fc75 	bl	801fab8 <__retarget_lock_release_recursive>
 80201ce:	e7e9      	b.n	80201a4 <_vfiprintf_r+0x4c>
 80201d0:	2300      	movs	r3, #0
 80201d2:	9309      	str	r3, [sp, #36]	; 0x24
 80201d4:	2320      	movs	r3, #32
 80201d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80201da:	f8cd 800c 	str.w	r8, [sp, #12]
 80201de:	2330      	movs	r3, #48	; 0x30
 80201e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80203a4 <_vfiprintf_r+0x24c>
 80201e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80201e8:	f04f 0901 	mov.w	r9, #1
 80201ec:	4623      	mov	r3, r4
 80201ee:	469a      	mov	sl, r3
 80201f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201f4:	b10a      	cbz	r2, 80201fa <_vfiprintf_r+0xa2>
 80201f6:	2a25      	cmp	r2, #37	; 0x25
 80201f8:	d1f9      	bne.n	80201ee <_vfiprintf_r+0x96>
 80201fa:	ebba 0b04 	subs.w	fp, sl, r4
 80201fe:	d00b      	beq.n	8020218 <_vfiprintf_r+0xc0>
 8020200:	465b      	mov	r3, fp
 8020202:	4622      	mov	r2, r4
 8020204:	4629      	mov	r1, r5
 8020206:	4630      	mov	r0, r6
 8020208:	f7ff ff93 	bl	8020132 <__sfputs_r>
 802020c:	3001      	adds	r0, #1
 802020e:	f000 80aa 	beq.w	8020366 <_vfiprintf_r+0x20e>
 8020212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020214:	445a      	add	r2, fp
 8020216:	9209      	str	r2, [sp, #36]	; 0x24
 8020218:	f89a 3000 	ldrb.w	r3, [sl]
 802021c:	2b00      	cmp	r3, #0
 802021e:	f000 80a2 	beq.w	8020366 <_vfiprintf_r+0x20e>
 8020222:	2300      	movs	r3, #0
 8020224:	f04f 32ff 	mov.w	r2, #4294967295
 8020228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802022c:	f10a 0a01 	add.w	sl, sl, #1
 8020230:	9304      	str	r3, [sp, #16]
 8020232:	9307      	str	r3, [sp, #28]
 8020234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020238:	931a      	str	r3, [sp, #104]	; 0x68
 802023a:	4654      	mov	r4, sl
 802023c:	2205      	movs	r2, #5
 802023e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020242:	4858      	ldr	r0, [pc, #352]	; (80203a4 <_vfiprintf_r+0x24c>)
 8020244:	f7df ffc4 	bl	80001d0 <memchr>
 8020248:	9a04      	ldr	r2, [sp, #16]
 802024a:	b9d8      	cbnz	r0, 8020284 <_vfiprintf_r+0x12c>
 802024c:	06d1      	lsls	r1, r2, #27
 802024e:	bf44      	itt	mi
 8020250:	2320      	movmi	r3, #32
 8020252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020256:	0713      	lsls	r3, r2, #28
 8020258:	bf44      	itt	mi
 802025a:	232b      	movmi	r3, #43	; 0x2b
 802025c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020260:	f89a 3000 	ldrb.w	r3, [sl]
 8020264:	2b2a      	cmp	r3, #42	; 0x2a
 8020266:	d015      	beq.n	8020294 <_vfiprintf_r+0x13c>
 8020268:	9a07      	ldr	r2, [sp, #28]
 802026a:	4654      	mov	r4, sl
 802026c:	2000      	movs	r0, #0
 802026e:	f04f 0c0a 	mov.w	ip, #10
 8020272:	4621      	mov	r1, r4
 8020274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020278:	3b30      	subs	r3, #48	; 0x30
 802027a:	2b09      	cmp	r3, #9
 802027c:	d94e      	bls.n	802031c <_vfiprintf_r+0x1c4>
 802027e:	b1b0      	cbz	r0, 80202ae <_vfiprintf_r+0x156>
 8020280:	9207      	str	r2, [sp, #28]
 8020282:	e014      	b.n	80202ae <_vfiprintf_r+0x156>
 8020284:	eba0 0308 	sub.w	r3, r0, r8
 8020288:	fa09 f303 	lsl.w	r3, r9, r3
 802028c:	4313      	orrs	r3, r2
 802028e:	9304      	str	r3, [sp, #16]
 8020290:	46a2      	mov	sl, r4
 8020292:	e7d2      	b.n	802023a <_vfiprintf_r+0xe2>
 8020294:	9b03      	ldr	r3, [sp, #12]
 8020296:	1d19      	adds	r1, r3, #4
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	9103      	str	r1, [sp, #12]
 802029c:	2b00      	cmp	r3, #0
 802029e:	bfbb      	ittet	lt
 80202a0:	425b      	neglt	r3, r3
 80202a2:	f042 0202 	orrlt.w	r2, r2, #2
 80202a6:	9307      	strge	r3, [sp, #28]
 80202a8:	9307      	strlt	r3, [sp, #28]
 80202aa:	bfb8      	it	lt
 80202ac:	9204      	strlt	r2, [sp, #16]
 80202ae:	7823      	ldrb	r3, [r4, #0]
 80202b0:	2b2e      	cmp	r3, #46	; 0x2e
 80202b2:	d10c      	bne.n	80202ce <_vfiprintf_r+0x176>
 80202b4:	7863      	ldrb	r3, [r4, #1]
 80202b6:	2b2a      	cmp	r3, #42	; 0x2a
 80202b8:	d135      	bne.n	8020326 <_vfiprintf_r+0x1ce>
 80202ba:	9b03      	ldr	r3, [sp, #12]
 80202bc:	1d1a      	adds	r2, r3, #4
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	9203      	str	r2, [sp, #12]
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	bfb8      	it	lt
 80202c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80202ca:	3402      	adds	r4, #2
 80202cc:	9305      	str	r3, [sp, #20]
 80202ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80203b4 <_vfiprintf_r+0x25c>
 80202d2:	7821      	ldrb	r1, [r4, #0]
 80202d4:	2203      	movs	r2, #3
 80202d6:	4650      	mov	r0, sl
 80202d8:	f7df ff7a 	bl	80001d0 <memchr>
 80202dc:	b140      	cbz	r0, 80202f0 <_vfiprintf_r+0x198>
 80202de:	2340      	movs	r3, #64	; 0x40
 80202e0:	eba0 000a 	sub.w	r0, r0, sl
 80202e4:	fa03 f000 	lsl.w	r0, r3, r0
 80202e8:	9b04      	ldr	r3, [sp, #16]
 80202ea:	4303      	orrs	r3, r0
 80202ec:	3401      	adds	r4, #1
 80202ee:	9304      	str	r3, [sp, #16]
 80202f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80202f4:	482c      	ldr	r0, [pc, #176]	; (80203a8 <_vfiprintf_r+0x250>)
 80202f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80202fa:	2206      	movs	r2, #6
 80202fc:	f7df ff68 	bl	80001d0 <memchr>
 8020300:	2800      	cmp	r0, #0
 8020302:	d03f      	beq.n	8020384 <_vfiprintf_r+0x22c>
 8020304:	4b29      	ldr	r3, [pc, #164]	; (80203ac <_vfiprintf_r+0x254>)
 8020306:	bb1b      	cbnz	r3, 8020350 <_vfiprintf_r+0x1f8>
 8020308:	9b03      	ldr	r3, [sp, #12]
 802030a:	3307      	adds	r3, #7
 802030c:	f023 0307 	bic.w	r3, r3, #7
 8020310:	3308      	adds	r3, #8
 8020312:	9303      	str	r3, [sp, #12]
 8020314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020316:	443b      	add	r3, r7
 8020318:	9309      	str	r3, [sp, #36]	; 0x24
 802031a:	e767      	b.n	80201ec <_vfiprintf_r+0x94>
 802031c:	fb0c 3202 	mla	r2, ip, r2, r3
 8020320:	460c      	mov	r4, r1
 8020322:	2001      	movs	r0, #1
 8020324:	e7a5      	b.n	8020272 <_vfiprintf_r+0x11a>
 8020326:	2300      	movs	r3, #0
 8020328:	3401      	adds	r4, #1
 802032a:	9305      	str	r3, [sp, #20]
 802032c:	4619      	mov	r1, r3
 802032e:	f04f 0c0a 	mov.w	ip, #10
 8020332:	4620      	mov	r0, r4
 8020334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020338:	3a30      	subs	r2, #48	; 0x30
 802033a:	2a09      	cmp	r2, #9
 802033c:	d903      	bls.n	8020346 <_vfiprintf_r+0x1ee>
 802033e:	2b00      	cmp	r3, #0
 8020340:	d0c5      	beq.n	80202ce <_vfiprintf_r+0x176>
 8020342:	9105      	str	r1, [sp, #20]
 8020344:	e7c3      	b.n	80202ce <_vfiprintf_r+0x176>
 8020346:	fb0c 2101 	mla	r1, ip, r1, r2
 802034a:	4604      	mov	r4, r0
 802034c:	2301      	movs	r3, #1
 802034e:	e7f0      	b.n	8020332 <_vfiprintf_r+0x1da>
 8020350:	ab03      	add	r3, sp, #12
 8020352:	9300      	str	r3, [sp, #0]
 8020354:	462a      	mov	r2, r5
 8020356:	4b16      	ldr	r3, [pc, #88]	; (80203b0 <_vfiprintf_r+0x258>)
 8020358:	a904      	add	r1, sp, #16
 802035a:	4630      	mov	r0, r6
 802035c:	f3af 8000 	nop.w
 8020360:	4607      	mov	r7, r0
 8020362:	1c78      	adds	r0, r7, #1
 8020364:	d1d6      	bne.n	8020314 <_vfiprintf_r+0x1bc>
 8020366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020368:	07d9      	lsls	r1, r3, #31
 802036a:	d405      	bmi.n	8020378 <_vfiprintf_r+0x220>
 802036c:	89ab      	ldrh	r3, [r5, #12]
 802036e:	059a      	lsls	r2, r3, #22
 8020370:	d402      	bmi.n	8020378 <_vfiprintf_r+0x220>
 8020372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020374:	f7ff fba0 	bl	801fab8 <__retarget_lock_release_recursive>
 8020378:	89ab      	ldrh	r3, [r5, #12]
 802037a:	065b      	lsls	r3, r3, #25
 802037c:	f53f af12 	bmi.w	80201a4 <_vfiprintf_r+0x4c>
 8020380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020382:	e711      	b.n	80201a8 <_vfiprintf_r+0x50>
 8020384:	ab03      	add	r3, sp, #12
 8020386:	9300      	str	r3, [sp, #0]
 8020388:	462a      	mov	r2, r5
 802038a:	4b09      	ldr	r3, [pc, #36]	; (80203b0 <_vfiprintf_r+0x258>)
 802038c:	a904      	add	r1, sp, #16
 802038e:	4630      	mov	r0, r6
 8020390:	f000 f880 	bl	8020494 <_printf_i>
 8020394:	e7e4      	b.n	8020360 <_vfiprintf_r+0x208>
 8020396:	bf00      	nop
 8020398:	08024c80 	.word	0x08024c80
 802039c:	08024ca0 	.word	0x08024ca0
 80203a0:	08024c60 	.word	0x08024c60
 80203a4:	08024d76 	.word	0x08024d76
 80203a8:	08024d80 	.word	0x08024d80
 80203ac:	00000000 	.word	0x00000000
 80203b0:	08020133 	.word	0x08020133
 80203b4:	08024d7c 	.word	0x08024d7c

080203b8 <_printf_common>:
 80203b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203bc:	4616      	mov	r6, r2
 80203be:	4699      	mov	r9, r3
 80203c0:	688a      	ldr	r2, [r1, #8]
 80203c2:	690b      	ldr	r3, [r1, #16]
 80203c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80203c8:	4293      	cmp	r3, r2
 80203ca:	bfb8      	it	lt
 80203cc:	4613      	movlt	r3, r2
 80203ce:	6033      	str	r3, [r6, #0]
 80203d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80203d4:	4607      	mov	r7, r0
 80203d6:	460c      	mov	r4, r1
 80203d8:	b10a      	cbz	r2, 80203de <_printf_common+0x26>
 80203da:	3301      	adds	r3, #1
 80203dc:	6033      	str	r3, [r6, #0]
 80203de:	6823      	ldr	r3, [r4, #0]
 80203e0:	0699      	lsls	r1, r3, #26
 80203e2:	bf42      	ittt	mi
 80203e4:	6833      	ldrmi	r3, [r6, #0]
 80203e6:	3302      	addmi	r3, #2
 80203e8:	6033      	strmi	r3, [r6, #0]
 80203ea:	6825      	ldr	r5, [r4, #0]
 80203ec:	f015 0506 	ands.w	r5, r5, #6
 80203f0:	d106      	bne.n	8020400 <_printf_common+0x48>
 80203f2:	f104 0a19 	add.w	sl, r4, #25
 80203f6:	68e3      	ldr	r3, [r4, #12]
 80203f8:	6832      	ldr	r2, [r6, #0]
 80203fa:	1a9b      	subs	r3, r3, r2
 80203fc:	42ab      	cmp	r3, r5
 80203fe:	dc26      	bgt.n	802044e <_printf_common+0x96>
 8020400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020404:	1e13      	subs	r3, r2, #0
 8020406:	6822      	ldr	r2, [r4, #0]
 8020408:	bf18      	it	ne
 802040a:	2301      	movne	r3, #1
 802040c:	0692      	lsls	r2, r2, #26
 802040e:	d42b      	bmi.n	8020468 <_printf_common+0xb0>
 8020410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020414:	4649      	mov	r1, r9
 8020416:	4638      	mov	r0, r7
 8020418:	47c0      	blx	r8
 802041a:	3001      	adds	r0, #1
 802041c:	d01e      	beq.n	802045c <_printf_common+0xa4>
 802041e:	6823      	ldr	r3, [r4, #0]
 8020420:	68e5      	ldr	r5, [r4, #12]
 8020422:	6832      	ldr	r2, [r6, #0]
 8020424:	f003 0306 	and.w	r3, r3, #6
 8020428:	2b04      	cmp	r3, #4
 802042a:	bf08      	it	eq
 802042c:	1aad      	subeq	r5, r5, r2
 802042e:	68a3      	ldr	r3, [r4, #8]
 8020430:	6922      	ldr	r2, [r4, #16]
 8020432:	bf0c      	ite	eq
 8020434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020438:	2500      	movne	r5, #0
 802043a:	4293      	cmp	r3, r2
 802043c:	bfc4      	itt	gt
 802043e:	1a9b      	subgt	r3, r3, r2
 8020440:	18ed      	addgt	r5, r5, r3
 8020442:	2600      	movs	r6, #0
 8020444:	341a      	adds	r4, #26
 8020446:	42b5      	cmp	r5, r6
 8020448:	d11a      	bne.n	8020480 <_printf_common+0xc8>
 802044a:	2000      	movs	r0, #0
 802044c:	e008      	b.n	8020460 <_printf_common+0xa8>
 802044e:	2301      	movs	r3, #1
 8020450:	4652      	mov	r2, sl
 8020452:	4649      	mov	r1, r9
 8020454:	4638      	mov	r0, r7
 8020456:	47c0      	blx	r8
 8020458:	3001      	adds	r0, #1
 802045a:	d103      	bne.n	8020464 <_printf_common+0xac>
 802045c:	f04f 30ff 	mov.w	r0, #4294967295
 8020460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020464:	3501      	adds	r5, #1
 8020466:	e7c6      	b.n	80203f6 <_printf_common+0x3e>
 8020468:	18e1      	adds	r1, r4, r3
 802046a:	1c5a      	adds	r2, r3, #1
 802046c:	2030      	movs	r0, #48	; 0x30
 802046e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020472:	4422      	add	r2, r4
 8020474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802047c:	3302      	adds	r3, #2
 802047e:	e7c7      	b.n	8020410 <_printf_common+0x58>
 8020480:	2301      	movs	r3, #1
 8020482:	4622      	mov	r2, r4
 8020484:	4649      	mov	r1, r9
 8020486:	4638      	mov	r0, r7
 8020488:	47c0      	blx	r8
 802048a:	3001      	adds	r0, #1
 802048c:	d0e6      	beq.n	802045c <_printf_common+0xa4>
 802048e:	3601      	adds	r6, #1
 8020490:	e7d9      	b.n	8020446 <_printf_common+0x8e>
	...

08020494 <_printf_i>:
 8020494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020498:	460c      	mov	r4, r1
 802049a:	4691      	mov	r9, r2
 802049c:	7e27      	ldrb	r7, [r4, #24]
 802049e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80204a0:	2f78      	cmp	r7, #120	; 0x78
 80204a2:	4680      	mov	r8, r0
 80204a4:	469a      	mov	sl, r3
 80204a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80204aa:	d807      	bhi.n	80204bc <_printf_i+0x28>
 80204ac:	2f62      	cmp	r7, #98	; 0x62
 80204ae:	d80a      	bhi.n	80204c6 <_printf_i+0x32>
 80204b0:	2f00      	cmp	r7, #0
 80204b2:	f000 80d8 	beq.w	8020666 <_printf_i+0x1d2>
 80204b6:	2f58      	cmp	r7, #88	; 0x58
 80204b8:	f000 80a3 	beq.w	8020602 <_printf_i+0x16e>
 80204bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80204c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80204c4:	e03a      	b.n	802053c <_printf_i+0xa8>
 80204c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80204ca:	2b15      	cmp	r3, #21
 80204cc:	d8f6      	bhi.n	80204bc <_printf_i+0x28>
 80204ce:	a001      	add	r0, pc, #4	; (adr r0, 80204d4 <_printf_i+0x40>)
 80204d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80204d4:	0802052d 	.word	0x0802052d
 80204d8:	08020541 	.word	0x08020541
 80204dc:	080204bd 	.word	0x080204bd
 80204e0:	080204bd 	.word	0x080204bd
 80204e4:	080204bd 	.word	0x080204bd
 80204e8:	080204bd 	.word	0x080204bd
 80204ec:	08020541 	.word	0x08020541
 80204f0:	080204bd 	.word	0x080204bd
 80204f4:	080204bd 	.word	0x080204bd
 80204f8:	080204bd 	.word	0x080204bd
 80204fc:	080204bd 	.word	0x080204bd
 8020500:	0802064d 	.word	0x0802064d
 8020504:	08020571 	.word	0x08020571
 8020508:	0802062f 	.word	0x0802062f
 802050c:	080204bd 	.word	0x080204bd
 8020510:	080204bd 	.word	0x080204bd
 8020514:	0802066f 	.word	0x0802066f
 8020518:	080204bd 	.word	0x080204bd
 802051c:	08020571 	.word	0x08020571
 8020520:	080204bd 	.word	0x080204bd
 8020524:	080204bd 	.word	0x080204bd
 8020528:	08020637 	.word	0x08020637
 802052c:	680b      	ldr	r3, [r1, #0]
 802052e:	1d1a      	adds	r2, r3, #4
 8020530:	681b      	ldr	r3, [r3, #0]
 8020532:	600a      	str	r2, [r1, #0]
 8020534:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802053c:	2301      	movs	r3, #1
 802053e:	e0a3      	b.n	8020688 <_printf_i+0x1f4>
 8020540:	6825      	ldr	r5, [r4, #0]
 8020542:	6808      	ldr	r0, [r1, #0]
 8020544:	062e      	lsls	r6, r5, #24
 8020546:	f100 0304 	add.w	r3, r0, #4
 802054a:	d50a      	bpl.n	8020562 <_printf_i+0xce>
 802054c:	6805      	ldr	r5, [r0, #0]
 802054e:	600b      	str	r3, [r1, #0]
 8020550:	2d00      	cmp	r5, #0
 8020552:	da03      	bge.n	802055c <_printf_i+0xc8>
 8020554:	232d      	movs	r3, #45	; 0x2d
 8020556:	426d      	negs	r5, r5
 8020558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802055c:	485e      	ldr	r0, [pc, #376]	; (80206d8 <_printf_i+0x244>)
 802055e:	230a      	movs	r3, #10
 8020560:	e019      	b.n	8020596 <_printf_i+0x102>
 8020562:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020566:	6805      	ldr	r5, [r0, #0]
 8020568:	600b      	str	r3, [r1, #0]
 802056a:	bf18      	it	ne
 802056c:	b22d      	sxthne	r5, r5
 802056e:	e7ef      	b.n	8020550 <_printf_i+0xbc>
 8020570:	680b      	ldr	r3, [r1, #0]
 8020572:	6825      	ldr	r5, [r4, #0]
 8020574:	1d18      	adds	r0, r3, #4
 8020576:	6008      	str	r0, [r1, #0]
 8020578:	0628      	lsls	r0, r5, #24
 802057a:	d501      	bpl.n	8020580 <_printf_i+0xec>
 802057c:	681d      	ldr	r5, [r3, #0]
 802057e:	e002      	b.n	8020586 <_printf_i+0xf2>
 8020580:	0669      	lsls	r1, r5, #25
 8020582:	d5fb      	bpl.n	802057c <_printf_i+0xe8>
 8020584:	881d      	ldrh	r5, [r3, #0]
 8020586:	4854      	ldr	r0, [pc, #336]	; (80206d8 <_printf_i+0x244>)
 8020588:	2f6f      	cmp	r7, #111	; 0x6f
 802058a:	bf0c      	ite	eq
 802058c:	2308      	moveq	r3, #8
 802058e:	230a      	movne	r3, #10
 8020590:	2100      	movs	r1, #0
 8020592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020596:	6866      	ldr	r6, [r4, #4]
 8020598:	60a6      	str	r6, [r4, #8]
 802059a:	2e00      	cmp	r6, #0
 802059c:	bfa2      	ittt	ge
 802059e:	6821      	ldrge	r1, [r4, #0]
 80205a0:	f021 0104 	bicge.w	r1, r1, #4
 80205a4:	6021      	strge	r1, [r4, #0]
 80205a6:	b90d      	cbnz	r5, 80205ac <_printf_i+0x118>
 80205a8:	2e00      	cmp	r6, #0
 80205aa:	d04d      	beq.n	8020648 <_printf_i+0x1b4>
 80205ac:	4616      	mov	r6, r2
 80205ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80205b2:	fb03 5711 	mls	r7, r3, r1, r5
 80205b6:	5dc7      	ldrb	r7, [r0, r7]
 80205b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80205bc:	462f      	mov	r7, r5
 80205be:	42bb      	cmp	r3, r7
 80205c0:	460d      	mov	r5, r1
 80205c2:	d9f4      	bls.n	80205ae <_printf_i+0x11a>
 80205c4:	2b08      	cmp	r3, #8
 80205c6:	d10b      	bne.n	80205e0 <_printf_i+0x14c>
 80205c8:	6823      	ldr	r3, [r4, #0]
 80205ca:	07df      	lsls	r7, r3, #31
 80205cc:	d508      	bpl.n	80205e0 <_printf_i+0x14c>
 80205ce:	6923      	ldr	r3, [r4, #16]
 80205d0:	6861      	ldr	r1, [r4, #4]
 80205d2:	4299      	cmp	r1, r3
 80205d4:	bfde      	ittt	le
 80205d6:	2330      	movle	r3, #48	; 0x30
 80205d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80205dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80205e0:	1b92      	subs	r2, r2, r6
 80205e2:	6122      	str	r2, [r4, #16]
 80205e4:	f8cd a000 	str.w	sl, [sp]
 80205e8:	464b      	mov	r3, r9
 80205ea:	aa03      	add	r2, sp, #12
 80205ec:	4621      	mov	r1, r4
 80205ee:	4640      	mov	r0, r8
 80205f0:	f7ff fee2 	bl	80203b8 <_printf_common>
 80205f4:	3001      	adds	r0, #1
 80205f6:	d14c      	bne.n	8020692 <_printf_i+0x1fe>
 80205f8:	f04f 30ff 	mov.w	r0, #4294967295
 80205fc:	b004      	add	sp, #16
 80205fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020602:	4835      	ldr	r0, [pc, #212]	; (80206d8 <_printf_i+0x244>)
 8020604:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020608:	6823      	ldr	r3, [r4, #0]
 802060a:	680e      	ldr	r6, [r1, #0]
 802060c:	061f      	lsls	r7, r3, #24
 802060e:	f856 5b04 	ldr.w	r5, [r6], #4
 8020612:	600e      	str	r6, [r1, #0]
 8020614:	d514      	bpl.n	8020640 <_printf_i+0x1ac>
 8020616:	07d9      	lsls	r1, r3, #31
 8020618:	bf44      	itt	mi
 802061a:	f043 0320 	orrmi.w	r3, r3, #32
 802061e:	6023      	strmi	r3, [r4, #0]
 8020620:	b91d      	cbnz	r5, 802062a <_printf_i+0x196>
 8020622:	6823      	ldr	r3, [r4, #0]
 8020624:	f023 0320 	bic.w	r3, r3, #32
 8020628:	6023      	str	r3, [r4, #0]
 802062a:	2310      	movs	r3, #16
 802062c:	e7b0      	b.n	8020590 <_printf_i+0xfc>
 802062e:	6823      	ldr	r3, [r4, #0]
 8020630:	f043 0320 	orr.w	r3, r3, #32
 8020634:	6023      	str	r3, [r4, #0]
 8020636:	2378      	movs	r3, #120	; 0x78
 8020638:	4828      	ldr	r0, [pc, #160]	; (80206dc <_printf_i+0x248>)
 802063a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802063e:	e7e3      	b.n	8020608 <_printf_i+0x174>
 8020640:	065e      	lsls	r6, r3, #25
 8020642:	bf48      	it	mi
 8020644:	b2ad      	uxthmi	r5, r5
 8020646:	e7e6      	b.n	8020616 <_printf_i+0x182>
 8020648:	4616      	mov	r6, r2
 802064a:	e7bb      	b.n	80205c4 <_printf_i+0x130>
 802064c:	680b      	ldr	r3, [r1, #0]
 802064e:	6826      	ldr	r6, [r4, #0]
 8020650:	6960      	ldr	r0, [r4, #20]
 8020652:	1d1d      	adds	r5, r3, #4
 8020654:	600d      	str	r5, [r1, #0]
 8020656:	0635      	lsls	r5, r6, #24
 8020658:	681b      	ldr	r3, [r3, #0]
 802065a:	d501      	bpl.n	8020660 <_printf_i+0x1cc>
 802065c:	6018      	str	r0, [r3, #0]
 802065e:	e002      	b.n	8020666 <_printf_i+0x1d2>
 8020660:	0671      	lsls	r1, r6, #25
 8020662:	d5fb      	bpl.n	802065c <_printf_i+0x1c8>
 8020664:	8018      	strh	r0, [r3, #0]
 8020666:	2300      	movs	r3, #0
 8020668:	6123      	str	r3, [r4, #16]
 802066a:	4616      	mov	r6, r2
 802066c:	e7ba      	b.n	80205e4 <_printf_i+0x150>
 802066e:	680b      	ldr	r3, [r1, #0]
 8020670:	1d1a      	adds	r2, r3, #4
 8020672:	600a      	str	r2, [r1, #0]
 8020674:	681e      	ldr	r6, [r3, #0]
 8020676:	6862      	ldr	r2, [r4, #4]
 8020678:	2100      	movs	r1, #0
 802067a:	4630      	mov	r0, r6
 802067c:	f7df fda8 	bl	80001d0 <memchr>
 8020680:	b108      	cbz	r0, 8020686 <_printf_i+0x1f2>
 8020682:	1b80      	subs	r0, r0, r6
 8020684:	6060      	str	r0, [r4, #4]
 8020686:	6863      	ldr	r3, [r4, #4]
 8020688:	6123      	str	r3, [r4, #16]
 802068a:	2300      	movs	r3, #0
 802068c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020690:	e7a8      	b.n	80205e4 <_printf_i+0x150>
 8020692:	6923      	ldr	r3, [r4, #16]
 8020694:	4632      	mov	r2, r6
 8020696:	4649      	mov	r1, r9
 8020698:	4640      	mov	r0, r8
 802069a:	47d0      	blx	sl
 802069c:	3001      	adds	r0, #1
 802069e:	d0ab      	beq.n	80205f8 <_printf_i+0x164>
 80206a0:	6823      	ldr	r3, [r4, #0]
 80206a2:	079b      	lsls	r3, r3, #30
 80206a4:	d413      	bmi.n	80206ce <_printf_i+0x23a>
 80206a6:	68e0      	ldr	r0, [r4, #12]
 80206a8:	9b03      	ldr	r3, [sp, #12]
 80206aa:	4298      	cmp	r0, r3
 80206ac:	bfb8      	it	lt
 80206ae:	4618      	movlt	r0, r3
 80206b0:	e7a4      	b.n	80205fc <_printf_i+0x168>
 80206b2:	2301      	movs	r3, #1
 80206b4:	4632      	mov	r2, r6
 80206b6:	4649      	mov	r1, r9
 80206b8:	4640      	mov	r0, r8
 80206ba:	47d0      	blx	sl
 80206bc:	3001      	adds	r0, #1
 80206be:	d09b      	beq.n	80205f8 <_printf_i+0x164>
 80206c0:	3501      	adds	r5, #1
 80206c2:	68e3      	ldr	r3, [r4, #12]
 80206c4:	9903      	ldr	r1, [sp, #12]
 80206c6:	1a5b      	subs	r3, r3, r1
 80206c8:	42ab      	cmp	r3, r5
 80206ca:	dcf2      	bgt.n	80206b2 <_printf_i+0x21e>
 80206cc:	e7eb      	b.n	80206a6 <_printf_i+0x212>
 80206ce:	2500      	movs	r5, #0
 80206d0:	f104 0619 	add.w	r6, r4, #25
 80206d4:	e7f5      	b.n	80206c2 <_printf_i+0x22e>
 80206d6:	bf00      	nop
 80206d8:	08024d87 	.word	0x08024d87
 80206dc:	08024d98 	.word	0x08024d98

080206e0 <_read_r>:
 80206e0:	b538      	push	{r3, r4, r5, lr}
 80206e2:	4d07      	ldr	r5, [pc, #28]	; (8020700 <_read_r+0x20>)
 80206e4:	4604      	mov	r4, r0
 80206e6:	4608      	mov	r0, r1
 80206e8:	4611      	mov	r1, r2
 80206ea:	2200      	movs	r2, #0
 80206ec:	602a      	str	r2, [r5, #0]
 80206ee:	461a      	mov	r2, r3
 80206f0:	f7e1 fb18 	bl	8001d24 <_read>
 80206f4:	1c43      	adds	r3, r0, #1
 80206f6:	d102      	bne.n	80206fe <_read_r+0x1e>
 80206f8:	682b      	ldr	r3, [r5, #0]
 80206fa:	b103      	cbz	r3, 80206fe <_read_r+0x1e>
 80206fc:	6023      	str	r3, [r4, #0]
 80206fe:	bd38      	pop	{r3, r4, r5, pc}
 8020700:	2000ea38 	.word	0x2000ea38

08020704 <__swbuf_r>:
 8020704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020706:	460e      	mov	r6, r1
 8020708:	4614      	mov	r4, r2
 802070a:	4605      	mov	r5, r0
 802070c:	b118      	cbz	r0, 8020716 <__swbuf_r+0x12>
 802070e:	6983      	ldr	r3, [r0, #24]
 8020710:	b90b      	cbnz	r3, 8020716 <__swbuf_r+0x12>
 8020712:	f7ff f90d 	bl	801f930 <__sinit>
 8020716:	4b21      	ldr	r3, [pc, #132]	; (802079c <__swbuf_r+0x98>)
 8020718:	429c      	cmp	r4, r3
 802071a:	d12b      	bne.n	8020774 <__swbuf_r+0x70>
 802071c:	686c      	ldr	r4, [r5, #4]
 802071e:	69a3      	ldr	r3, [r4, #24]
 8020720:	60a3      	str	r3, [r4, #8]
 8020722:	89a3      	ldrh	r3, [r4, #12]
 8020724:	071a      	lsls	r2, r3, #28
 8020726:	d52f      	bpl.n	8020788 <__swbuf_r+0x84>
 8020728:	6923      	ldr	r3, [r4, #16]
 802072a:	b36b      	cbz	r3, 8020788 <__swbuf_r+0x84>
 802072c:	6923      	ldr	r3, [r4, #16]
 802072e:	6820      	ldr	r0, [r4, #0]
 8020730:	1ac0      	subs	r0, r0, r3
 8020732:	6963      	ldr	r3, [r4, #20]
 8020734:	b2f6      	uxtb	r6, r6
 8020736:	4283      	cmp	r3, r0
 8020738:	4637      	mov	r7, r6
 802073a:	dc04      	bgt.n	8020746 <__swbuf_r+0x42>
 802073c:	4621      	mov	r1, r4
 802073e:	4628      	mov	r0, r5
 8020740:	f7ff fc1c 	bl	801ff7c <_fflush_r>
 8020744:	bb30      	cbnz	r0, 8020794 <__swbuf_r+0x90>
 8020746:	68a3      	ldr	r3, [r4, #8]
 8020748:	3b01      	subs	r3, #1
 802074a:	60a3      	str	r3, [r4, #8]
 802074c:	6823      	ldr	r3, [r4, #0]
 802074e:	1c5a      	adds	r2, r3, #1
 8020750:	6022      	str	r2, [r4, #0]
 8020752:	701e      	strb	r6, [r3, #0]
 8020754:	6963      	ldr	r3, [r4, #20]
 8020756:	3001      	adds	r0, #1
 8020758:	4283      	cmp	r3, r0
 802075a:	d004      	beq.n	8020766 <__swbuf_r+0x62>
 802075c:	89a3      	ldrh	r3, [r4, #12]
 802075e:	07db      	lsls	r3, r3, #31
 8020760:	d506      	bpl.n	8020770 <__swbuf_r+0x6c>
 8020762:	2e0a      	cmp	r6, #10
 8020764:	d104      	bne.n	8020770 <__swbuf_r+0x6c>
 8020766:	4621      	mov	r1, r4
 8020768:	4628      	mov	r0, r5
 802076a:	f7ff fc07 	bl	801ff7c <_fflush_r>
 802076e:	b988      	cbnz	r0, 8020794 <__swbuf_r+0x90>
 8020770:	4638      	mov	r0, r7
 8020772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020774:	4b0a      	ldr	r3, [pc, #40]	; (80207a0 <__swbuf_r+0x9c>)
 8020776:	429c      	cmp	r4, r3
 8020778:	d101      	bne.n	802077e <__swbuf_r+0x7a>
 802077a:	68ac      	ldr	r4, [r5, #8]
 802077c:	e7cf      	b.n	802071e <__swbuf_r+0x1a>
 802077e:	4b09      	ldr	r3, [pc, #36]	; (80207a4 <__swbuf_r+0xa0>)
 8020780:	429c      	cmp	r4, r3
 8020782:	bf08      	it	eq
 8020784:	68ec      	ldreq	r4, [r5, #12]
 8020786:	e7ca      	b.n	802071e <__swbuf_r+0x1a>
 8020788:	4621      	mov	r1, r4
 802078a:	4628      	mov	r0, r5
 802078c:	f000 f80c 	bl	80207a8 <__swsetup_r>
 8020790:	2800      	cmp	r0, #0
 8020792:	d0cb      	beq.n	802072c <__swbuf_r+0x28>
 8020794:	f04f 37ff 	mov.w	r7, #4294967295
 8020798:	e7ea      	b.n	8020770 <__swbuf_r+0x6c>
 802079a:	bf00      	nop
 802079c:	08024c80 	.word	0x08024c80
 80207a0:	08024ca0 	.word	0x08024ca0
 80207a4:	08024c60 	.word	0x08024c60

080207a8 <__swsetup_r>:
 80207a8:	4b32      	ldr	r3, [pc, #200]	; (8020874 <__swsetup_r+0xcc>)
 80207aa:	b570      	push	{r4, r5, r6, lr}
 80207ac:	681d      	ldr	r5, [r3, #0]
 80207ae:	4606      	mov	r6, r0
 80207b0:	460c      	mov	r4, r1
 80207b2:	b125      	cbz	r5, 80207be <__swsetup_r+0x16>
 80207b4:	69ab      	ldr	r3, [r5, #24]
 80207b6:	b913      	cbnz	r3, 80207be <__swsetup_r+0x16>
 80207b8:	4628      	mov	r0, r5
 80207ba:	f7ff f8b9 	bl	801f930 <__sinit>
 80207be:	4b2e      	ldr	r3, [pc, #184]	; (8020878 <__swsetup_r+0xd0>)
 80207c0:	429c      	cmp	r4, r3
 80207c2:	d10f      	bne.n	80207e4 <__swsetup_r+0x3c>
 80207c4:	686c      	ldr	r4, [r5, #4]
 80207c6:	89a3      	ldrh	r3, [r4, #12]
 80207c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80207cc:	0719      	lsls	r1, r3, #28
 80207ce:	d42c      	bmi.n	802082a <__swsetup_r+0x82>
 80207d0:	06dd      	lsls	r5, r3, #27
 80207d2:	d411      	bmi.n	80207f8 <__swsetup_r+0x50>
 80207d4:	2309      	movs	r3, #9
 80207d6:	6033      	str	r3, [r6, #0]
 80207d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80207dc:	81a3      	strh	r3, [r4, #12]
 80207de:	f04f 30ff 	mov.w	r0, #4294967295
 80207e2:	e03e      	b.n	8020862 <__swsetup_r+0xba>
 80207e4:	4b25      	ldr	r3, [pc, #148]	; (802087c <__swsetup_r+0xd4>)
 80207e6:	429c      	cmp	r4, r3
 80207e8:	d101      	bne.n	80207ee <__swsetup_r+0x46>
 80207ea:	68ac      	ldr	r4, [r5, #8]
 80207ec:	e7eb      	b.n	80207c6 <__swsetup_r+0x1e>
 80207ee:	4b24      	ldr	r3, [pc, #144]	; (8020880 <__swsetup_r+0xd8>)
 80207f0:	429c      	cmp	r4, r3
 80207f2:	bf08      	it	eq
 80207f4:	68ec      	ldreq	r4, [r5, #12]
 80207f6:	e7e6      	b.n	80207c6 <__swsetup_r+0x1e>
 80207f8:	0758      	lsls	r0, r3, #29
 80207fa:	d512      	bpl.n	8020822 <__swsetup_r+0x7a>
 80207fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80207fe:	b141      	cbz	r1, 8020812 <__swsetup_r+0x6a>
 8020800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020804:	4299      	cmp	r1, r3
 8020806:	d002      	beq.n	802080e <__swsetup_r+0x66>
 8020808:	4630      	mov	r0, r6
 802080a:	f7ff fc2b 	bl	8020064 <_free_r>
 802080e:	2300      	movs	r3, #0
 8020810:	6363      	str	r3, [r4, #52]	; 0x34
 8020812:	89a3      	ldrh	r3, [r4, #12]
 8020814:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020818:	81a3      	strh	r3, [r4, #12]
 802081a:	2300      	movs	r3, #0
 802081c:	6063      	str	r3, [r4, #4]
 802081e:	6923      	ldr	r3, [r4, #16]
 8020820:	6023      	str	r3, [r4, #0]
 8020822:	89a3      	ldrh	r3, [r4, #12]
 8020824:	f043 0308 	orr.w	r3, r3, #8
 8020828:	81a3      	strh	r3, [r4, #12]
 802082a:	6923      	ldr	r3, [r4, #16]
 802082c:	b94b      	cbnz	r3, 8020842 <__swsetup_r+0x9a>
 802082e:	89a3      	ldrh	r3, [r4, #12]
 8020830:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020838:	d003      	beq.n	8020842 <__swsetup_r+0x9a>
 802083a:	4621      	mov	r1, r4
 802083c:	4630      	mov	r0, r6
 802083e:	f000 f84d 	bl	80208dc <__smakebuf_r>
 8020842:	89a0      	ldrh	r0, [r4, #12]
 8020844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020848:	f010 0301 	ands.w	r3, r0, #1
 802084c:	d00a      	beq.n	8020864 <__swsetup_r+0xbc>
 802084e:	2300      	movs	r3, #0
 8020850:	60a3      	str	r3, [r4, #8]
 8020852:	6963      	ldr	r3, [r4, #20]
 8020854:	425b      	negs	r3, r3
 8020856:	61a3      	str	r3, [r4, #24]
 8020858:	6923      	ldr	r3, [r4, #16]
 802085a:	b943      	cbnz	r3, 802086e <__swsetup_r+0xc6>
 802085c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020860:	d1ba      	bne.n	80207d8 <__swsetup_r+0x30>
 8020862:	bd70      	pop	{r4, r5, r6, pc}
 8020864:	0781      	lsls	r1, r0, #30
 8020866:	bf58      	it	pl
 8020868:	6963      	ldrpl	r3, [r4, #20]
 802086a:	60a3      	str	r3, [r4, #8]
 802086c:	e7f4      	b.n	8020858 <__swsetup_r+0xb0>
 802086e:	2000      	movs	r0, #0
 8020870:	e7f7      	b.n	8020862 <__swsetup_r+0xba>
 8020872:	bf00      	nop
 8020874:	200000f4 	.word	0x200000f4
 8020878:	08024c80 	.word	0x08024c80
 802087c:	08024ca0 	.word	0x08024ca0
 8020880:	08024c60 	.word	0x08024c60

08020884 <abort>:
 8020884:	b508      	push	{r3, lr}
 8020886:	2006      	movs	r0, #6
 8020888:	f000 f890 	bl	80209ac <raise>
 802088c:	2001      	movs	r0, #1
 802088e:	f7e1 fa3f 	bl	8001d10 <_exit>

08020892 <__swhatbuf_r>:
 8020892:	b570      	push	{r4, r5, r6, lr}
 8020894:	460e      	mov	r6, r1
 8020896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802089a:	2900      	cmp	r1, #0
 802089c:	b096      	sub	sp, #88	; 0x58
 802089e:	4614      	mov	r4, r2
 80208a0:	461d      	mov	r5, r3
 80208a2:	da07      	bge.n	80208b4 <__swhatbuf_r+0x22>
 80208a4:	2300      	movs	r3, #0
 80208a6:	602b      	str	r3, [r5, #0]
 80208a8:	89b3      	ldrh	r3, [r6, #12]
 80208aa:	061a      	lsls	r2, r3, #24
 80208ac:	d410      	bmi.n	80208d0 <__swhatbuf_r+0x3e>
 80208ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80208b2:	e00e      	b.n	80208d2 <__swhatbuf_r+0x40>
 80208b4:	466a      	mov	r2, sp
 80208b6:	f000 f895 	bl	80209e4 <_fstat_r>
 80208ba:	2800      	cmp	r0, #0
 80208bc:	dbf2      	blt.n	80208a4 <__swhatbuf_r+0x12>
 80208be:	9a01      	ldr	r2, [sp, #4]
 80208c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80208c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80208c8:	425a      	negs	r2, r3
 80208ca:	415a      	adcs	r2, r3
 80208cc:	602a      	str	r2, [r5, #0]
 80208ce:	e7ee      	b.n	80208ae <__swhatbuf_r+0x1c>
 80208d0:	2340      	movs	r3, #64	; 0x40
 80208d2:	2000      	movs	r0, #0
 80208d4:	6023      	str	r3, [r4, #0]
 80208d6:	b016      	add	sp, #88	; 0x58
 80208d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080208dc <__smakebuf_r>:
 80208dc:	898b      	ldrh	r3, [r1, #12]
 80208de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80208e0:	079d      	lsls	r5, r3, #30
 80208e2:	4606      	mov	r6, r0
 80208e4:	460c      	mov	r4, r1
 80208e6:	d507      	bpl.n	80208f8 <__smakebuf_r+0x1c>
 80208e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80208ec:	6023      	str	r3, [r4, #0]
 80208ee:	6123      	str	r3, [r4, #16]
 80208f0:	2301      	movs	r3, #1
 80208f2:	6163      	str	r3, [r4, #20]
 80208f4:	b002      	add	sp, #8
 80208f6:	bd70      	pop	{r4, r5, r6, pc}
 80208f8:	ab01      	add	r3, sp, #4
 80208fa:	466a      	mov	r2, sp
 80208fc:	f7ff ffc9 	bl	8020892 <__swhatbuf_r>
 8020900:	9900      	ldr	r1, [sp, #0]
 8020902:	4605      	mov	r5, r0
 8020904:	4630      	mov	r0, r6
 8020906:	f7ff f8fd 	bl	801fb04 <_malloc_r>
 802090a:	b948      	cbnz	r0, 8020920 <__smakebuf_r+0x44>
 802090c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020910:	059a      	lsls	r2, r3, #22
 8020912:	d4ef      	bmi.n	80208f4 <__smakebuf_r+0x18>
 8020914:	f023 0303 	bic.w	r3, r3, #3
 8020918:	f043 0302 	orr.w	r3, r3, #2
 802091c:	81a3      	strh	r3, [r4, #12]
 802091e:	e7e3      	b.n	80208e8 <__smakebuf_r+0xc>
 8020920:	4b0d      	ldr	r3, [pc, #52]	; (8020958 <__smakebuf_r+0x7c>)
 8020922:	62b3      	str	r3, [r6, #40]	; 0x28
 8020924:	89a3      	ldrh	r3, [r4, #12]
 8020926:	6020      	str	r0, [r4, #0]
 8020928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802092c:	81a3      	strh	r3, [r4, #12]
 802092e:	9b00      	ldr	r3, [sp, #0]
 8020930:	6163      	str	r3, [r4, #20]
 8020932:	9b01      	ldr	r3, [sp, #4]
 8020934:	6120      	str	r0, [r4, #16]
 8020936:	b15b      	cbz	r3, 8020950 <__smakebuf_r+0x74>
 8020938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802093c:	4630      	mov	r0, r6
 802093e:	f000 f863 	bl	8020a08 <_isatty_r>
 8020942:	b128      	cbz	r0, 8020950 <__smakebuf_r+0x74>
 8020944:	89a3      	ldrh	r3, [r4, #12]
 8020946:	f023 0303 	bic.w	r3, r3, #3
 802094a:	f043 0301 	orr.w	r3, r3, #1
 802094e:	81a3      	strh	r3, [r4, #12]
 8020950:	89a0      	ldrh	r0, [r4, #12]
 8020952:	4305      	orrs	r5, r0
 8020954:	81a5      	strh	r5, [r4, #12]
 8020956:	e7cd      	b.n	80208f4 <__smakebuf_r+0x18>
 8020958:	0801f8c9 	.word	0x0801f8c9

0802095c <_raise_r>:
 802095c:	291f      	cmp	r1, #31
 802095e:	b538      	push	{r3, r4, r5, lr}
 8020960:	4604      	mov	r4, r0
 8020962:	460d      	mov	r5, r1
 8020964:	d904      	bls.n	8020970 <_raise_r+0x14>
 8020966:	2316      	movs	r3, #22
 8020968:	6003      	str	r3, [r0, #0]
 802096a:	f04f 30ff 	mov.w	r0, #4294967295
 802096e:	bd38      	pop	{r3, r4, r5, pc}
 8020970:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020972:	b112      	cbz	r2, 802097a <_raise_r+0x1e>
 8020974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020978:	b94b      	cbnz	r3, 802098e <_raise_r+0x32>
 802097a:	4620      	mov	r0, r4
 802097c:	f000 f830 	bl	80209e0 <_getpid_r>
 8020980:	462a      	mov	r2, r5
 8020982:	4601      	mov	r1, r0
 8020984:	4620      	mov	r0, r4
 8020986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802098a:	f000 b817 	b.w	80209bc <_kill_r>
 802098e:	2b01      	cmp	r3, #1
 8020990:	d00a      	beq.n	80209a8 <_raise_r+0x4c>
 8020992:	1c59      	adds	r1, r3, #1
 8020994:	d103      	bne.n	802099e <_raise_r+0x42>
 8020996:	2316      	movs	r3, #22
 8020998:	6003      	str	r3, [r0, #0]
 802099a:	2001      	movs	r0, #1
 802099c:	e7e7      	b.n	802096e <_raise_r+0x12>
 802099e:	2400      	movs	r4, #0
 80209a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80209a4:	4628      	mov	r0, r5
 80209a6:	4798      	blx	r3
 80209a8:	2000      	movs	r0, #0
 80209aa:	e7e0      	b.n	802096e <_raise_r+0x12>

080209ac <raise>:
 80209ac:	4b02      	ldr	r3, [pc, #8]	; (80209b8 <raise+0xc>)
 80209ae:	4601      	mov	r1, r0
 80209b0:	6818      	ldr	r0, [r3, #0]
 80209b2:	f7ff bfd3 	b.w	802095c <_raise_r>
 80209b6:	bf00      	nop
 80209b8:	200000f4 	.word	0x200000f4

080209bc <_kill_r>:
 80209bc:	b538      	push	{r3, r4, r5, lr}
 80209be:	4d07      	ldr	r5, [pc, #28]	; (80209dc <_kill_r+0x20>)
 80209c0:	2300      	movs	r3, #0
 80209c2:	4604      	mov	r4, r0
 80209c4:	4608      	mov	r0, r1
 80209c6:	4611      	mov	r1, r2
 80209c8:	602b      	str	r3, [r5, #0]
 80209ca:	f7e1 f98f 	bl	8001cec <_kill>
 80209ce:	1c43      	adds	r3, r0, #1
 80209d0:	d102      	bne.n	80209d8 <_kill_r+0x1c>
 80209d2:	682b      	ldr	r3, [r5, #0]
 80209d4:	b103      	cbz	r3, 80209d8 <_kill_r+0x1c>
 80209d6:	6023      	str	r3, [r4, #0]
 80209d8:	bd38      	pop	{r3, r4, r5, pc}
 80209da:	bf00      	nop
 80209dc:	2000ea38 	.word	0x2000ea38

080209e0 <_getpid_r>:
 80209e0:	f7e1 b97c 	b.w	8001cdc <_getpid>

080209e4 <_fstat_r>:
 80209e4:	b538      	push	{r3, r4, r5, lr}
 80209e6:	4d07      	ldr	r5, [pc, #28]	; (8020a04 <_fstat_r+0x20>)
 80209e8:	2300      	movs	r3, #0
 80209ea:	4604      	mov	r4, r0
 80209ec:	4608      	mov	r0, r1
 80209ee:	4611      	mov	r1, r2
 80209f0:	602b      	str	r3, [r5, #0]
 80209f2:	f7e1 f9dc 	bl	8001dae <_fstat>
 80209f6:	1c43      	adds	r3, r0, #1
 80209f8:	d102      	bne.n	8020a00 <_fstat_r+0x1c>
 80209fa:	682b      	ldr	r3, [r5, #0]
 80209fc:	b103      	cbz	r3, 8020a00 <_fstat_r+0x1c>
 80209fe:	6023      	str	r3, [r4, #0]
 8020a00:	bd38      	pop	{r3, r4, r5, pc}
 8020a02:	bf00      	nop
 8020a04:	2000ea38 	.word	0x2000ea38

08020a08 <_isatty_r>:
 8020a08:	b538      	push	{r3, r4, r5, lr}
 8020a0a:	4d06      	ldr	r5, [pc, #24]	; (8020a24 <_isatty_r+0x1c>)
 8020a0c:	2300      	movs	r3, #0
 8020a0e:	4604      	mov	r4, r0
 8020a10:	4608      	mov	r0, r1
 8020a12:	602b      	str	r3, [r5, #0]
 8020a14:	f7e1 f9db 	bl	8001dce <_isatty>
 8020a18:	1c43      	adds	r3, r0, #1
 8020a1a:	d102      	bne.n	8020a22 <_isatty_r+0x1a>
 8020a1c:	682b      	ldr	r3, [r5, #0]
 8020a1e:	b103      	cbz	r3, 8020a22 <_isatty_r+0x1a>
 8020a20:	6023      	str	r3, [r4, #0]
 8020a22:	bd38      	pop	{r3, r4, r5, pc}
 8020a24:	2000ea38 	.word	0x2000ea38

08020a28 <log>:
 8020a28:	b538      	push	{r3, r4, r5, lr}
 8020a2a:	ed2d 8b02 	vpush	{d8}
 8020a2e:	ec55 4b10 	vmov	r4, r5, d0
 8020a32:	f000 f841 	bl	8020ab8 <__ieee754_log>
 8020a36:	4b1e      	ldr	r3, [pc, #120]	; (8020ab0 <log+0x88>)
 8020a38:	eeb0 8a40 	vmov.f32	s16, s0
 8020a3c:	eef0 8a60 	vmov.f32	s17, s1
 8020a40:	f993 3000 	ldrsb.w	r3, [r3]
 8020a44:	3301      	adds	r3, #1
 8020a46:	d01a      	beq.n	8020a7e <log+0x56>
 8020a48:	4622      	mov	r2, r4
 8020a4a:	462b      	mov	r3, r5
 8020a4c:	4620      	mov	r0, r4
 8020a4e:	4629      	mov	r1, r5
 8020a50:	f7e0 f864 	bl	8000b1c <__aeabi_dcmpun>
 8020a54:	b998      	cbnz	r0, 8020a7e <log+0x56>
 8020a56:	2200      	movs	r2, #0
 8020a58:	2300      	movs	r3, #0
 8020a5a:	4620      	mov	r0, r4
 8020a5c:	4629      	mov	r1, r5
 8020a5e:	f7e0 f853 	bl	8000b08 <__aeabi_dcmpgt>
 8020a62:	b960      	cbnz	r0, 8020a7e <log+0x56>
 8020a64:	2200      	movs	r2, #0
 8020a66:	2300      	movs	r3, #0
 8020a68:	4620      	mov	r0, r4
 8020a6a:	4629      	mov	r1, r5
 8020a6c:	f7e0 f824 	bl	8000ab8 <__aeabi_dcmpeq>
 8020a70:	b160      	cbz	r0, 8020a8c <log+0x64>
 8020a72:	f7ff f9f7 	bl	801fe64 <__errno>
 8020a76:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8020aa8 <log+0x80>
 8020a7a:	2322      	movs	r3, #34	; 0x22
 8020a7c:	6003      	str	r3, [r0, #0]
 8020a7e:	eeb0 0a48 	vmov.f32	s0, s16
 8020a82:	eef0 0a68 	vmov.f32	s1, s17
 8020a86:	ecbd 8b02 	vpop	{d8}
 8020a8a:	bd38      	pop	{r3, r4, r5, pc}
 8020a8c:	f7ff f9ea 	bl	801fe64 <__errno>
 8020a90:	ecbd 8b02 	vpop	{d8}
 8020a94:	2321      	movs	r3, #33	; 0x21
 8020a96:	6003      	str	r3, [r0, #0]
 8020a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020a9c:	4805      	ldr	r0, [pc, #20]	; (8020ab4 <log+0x8c>)
 8020a9e:	f000 b9c7 	b.w	8020e30 <nan>
 8020aa2:	bf00      	nop
 8020aa4:	f3af 8000 	nop.w
 8020aa8:	00000000 	.word	0x00000000
 8020aac:	fff00000 	.word	0xfff00000
 8020ab0:	20000158 	.word	0x20000158
 8020ab4:	08024d75 	.word	0x08024d75

08020ab8 <__ieee754_log>:
 8020ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020abc:	ec51 0b10 	vmov	r0, r1, d0
 8020ac0:	ed2d 8b04 	vpush	{d8-d9}
 8020ac4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020ac8:	b083      	sub	sp, #12
 8020aca:	460d      	mov	r5, r1
 8020acc:	da29      	bge.n	8020b22 <__ieee754_log+0x6a>
 8020ace:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020ad2:	4303      	orrs	r3, r0
 8020ad4:	ee10 2a10 	vmov	r2, s0
 8020ad8:	d10c      	bne.n	8020af4 <__ieee754_log+0x3c>
 8020ada:	49cf      	ldr	r1, [pc, #828]	; (8020e18 <__ieee754_log+0x360>)
 8020adc:	2200      	movs	r2, #0
 8020ade:	2300      	movs	r3, #0
 8020ae0:	2000      	movs	r0, #0
 8020ae2:	f7df feab 	bl	800083c <__aeabi_ddiv>
 8020ae6:	ec41 0b10 	vmov	d0, r0, r1
 8020aea:	b003      	add	sp, #12
 8020aec:	ecbd 8b04 	vpop	{d8-d9}
 8020af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020af4:	2900      	cmp	r1, #0
 8020af6:	da05      	bge.n	8020b04 <__ieee754_log+0x4c>
 8020af8:	460b      	mov	r3, r1
 8020afa:	f7df fbbd 	bl	8000278 <__aeabi_dsub>
 8020afe:	2200      	movs	r2, #0
 8020b00:	2300      	movs	r3, #0
 8020b02:	e7ee      	b.n	8020ae2 <__ieee754_log+0x2a>
 8020b04:	4bc5      	ldr	r3, [pc, #788]	; (8020e1c <__ieee754_log+0x364>)
 8020b06:	2200      	movs	r2, #0
 8020b08:	f7df fd6e 	bl	80005e8 <__aeabi_dmul>
 8020b0c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8020b10:	460d      	mov	r5, r1
 8020b12:	4ac3      	ldr	r2, [pc, #780]	; (8020e20 <__ieee754_log+0x368>)
 8020b14:	4295      	cmp	r5, r2
 8020b16:	dd06      	ble.n	8020b26 <__ieee754_log+0x6e>
 8020b18:	4602      	mov	r2, r0
 8020b1a:	460b      	mov	r3, r1
 8020b1c:	f7df fbae 	bl	800027c <__adddf3>
 8020b20:	e7e1      	b.n	8020ae6 <__ieee754_log+0x2e>
 8020b22:	2300      	movs	r3, #0
 8020b24:	e7f5      	b.n	8020b12 <__ieee754_log+0x5a>
 8020b26:	152c      	asrs	r4, r5, #20
 8020b28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8020b2c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8020b30:	441c      	add	r4, r3
 8020b32:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8020b36:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8020b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020b3e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8020b42:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8020b46:	ea42 0105 	orr.w	r1, r2, r5
 8020b4a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8020b4e:	2200      	movs	r2, #0
 8020b50:	4bb4      	ldr	r3, [pc, #720]	; (8020e24 <__ieee754_log+0x36c>)
 8020b52:	f7df fb91 	bl	8000278 <__aeabi_dsub>
 8020b56:	1cab      	adds	r3, r5, #2
 8020b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020b5c:	2b02      	cmp	r3, #2
 8020b5e:	4682      	mov	sl, r0
 8020b60:	468b      	mov	fp, r1
 8020b62:	f04f 0200 	mov.w	r2, #0
 8020b66:	dc53      	bgt.n	8020c10 <__ieee754_log+0x158>
 8020b68:	2300      	movs	r3, #0
 8020b6a:	f7df ffa5 	bl	8000ab8 <__aeabi_dcmpeq>
 8020b6e:	b1d0      	cbz	r0, 8020ba6 <__ieee754_log+0xee>
 8020b70:	2c00      	cmp	r4, #0
 8020b72:	f000 8122 	beq.w	8020dba <__ieee754_log+0x302>
 8020b76:	4620      	mov	r0, r4
 8020b78:	f7df fccc 	bl	8000514 <__aeabi_i2d>
 8020b7c:	a390      	add	r3, pc, #576	; (adr r3, 8020dc0 <__ieee754_log+0x308>)
 8020b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b82:	4606      	mov	r6, r0
 8020b84:	460f      	mov	r7, r1
 8020b86:	f7df fd2f 	bl	80005e8 <__aeabi_dmul>
 8020b8a:	a38f      	add	r3, pc, #572	; (adr r3, 8020dc8 <__ieee754_log+0x310>)
 8020b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b90:	4604      	mov	r4, r0
 8020b92:	460d      	mov	r5, r1
 8020b94:	4630      	mov	r0, r6
 8020b96:	4639      	mov	r1, r7
 8020b98:	f7df fd26 	bl	80005e8 <__aeabi_dmul>
 8020b9c:	4602      	mov	r2, r0
 8020b9e:	460b      	mov	r3, r1
 8020ba0:	4620      	mov	r0, r4
 8020ba2:	4629      	mov	r1, r5
 8020ba4:	e7ba      	b.n	8020b1c <__ieee754_log+0x64>
 8020ba6:	a38a      	add	r3, pc, #552	; (adr r3, 8020dd0 <__ieee754_log+0x318>)
 8020ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bac:	4650      	mov	r0, sl
 8020bae:	4659      	mov	r1, fp
 8020bb0:	f7df fd1a 	bl	80005e8 <__aeabi_dmul>
 8020bb4:	4602      	mov	r2, r0
 8020bb6:	460b      	mov	r3, r1
 8020bb8:	2000      	movs	r0, #0
 8020bba:	499b      	ldr	r1, [pc, #620]	; (8020e28 <__ieee754_log+0x370>)
 8020bbc:	f7df fb5c 	bl	8000278 <__aeabi_dsub>
 8020bc0:	4652      	mov	r2, sl
 8020bc2:	4606      	mov	r6, r0
 8020bc4:	460f      	mov	r7, r1
 8020bc6:	465b      	mov	r3, fp
 8020bc8:	4650      	mov	r0, sl
 8020bca:	4659      	mov	r1, fp
 8020bcc:	f7df fd0c 	bl	80005e8 <__aeabi_dmul>
 8020bd0:	4602      	mov	r2, r0
 8020bd2:	460b      	mov	r3, r1
 8020bd4:	4630      	mov	r0, r6
 8020bd6:	4639      	mov	r1, r7
 8020bd8:	f7df fd06 	bl	80005e8 <__aeabi_dmul>
 8020bdc:	4606      	mov	r6, r0
 8020bde:	460f      	mov	r7, r1
 8020be0:	b914      	cbnz	r4, 8020be8 <__ieee754_log+0x130>
 8020be2:	4632      	mov	r2, r6
 8020be4:	463b      	mov	r3, r7
 8020be6:	e0a2      	b.n	8020d2e <__ieee754_log+0x276>
 8020be8:	4620      	mov	r0, r4
 8020bea:	f7df fc93 	bl	8000514 <__aeabi_i2d>
 8020bee:	a374      	add	r3, pc, #464	; (adr r3, 8020dc0 <__ieee754_log+0x308>)
 8020bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bf4:	4680      	mov	r8, r0
 8020bf6:	4689      	mov	r9, r1
 8020bf8:	f7df fcf6 	bl	80005e8 <__aeabi_dmul>
 8020bfc:	a372      	add	r3, pc, #456	; (adr r3, 8020dc8 <__ieee754_log+0x310>)
 8020bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c02:	4604      	mov	r4, r0
 8020c04:	460d      	mov	r5, r1
 8020c06:	4640      	mov	r0, r8
 8020c08:	4649      	mov	r1, r9
 8020c0a:	f7df fced 	bl	80005e8 <__aeabi_dmul>
 8020c0e:	e0a7      	b.n	8020d60 <__ieee754_log+0x2a8>
 8020c10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020c14:	f7df fb32 	bl	800027c <__adddf3>
 8020c18:	4602      	mov	r2, r0
 8020c1a:	460b      	mov	r3, r1
 8020c1c:	4650      	mov	r0, sl
 8020c1e:	4659      	mov	r1, fp
 8020c20:	f7df fe0c 	bl	800083c <__aeabi_ddiv>
 8020c24:	ec41 0b18 	vmov	d8, r0, r1
 8020c28:	4620      	mov	r0, r4
 8020c2a:	f7df fc73 	bl	8000514 <__aeabi_i2d>
 8020c2e:	ec53 2b18 	vmov	r2, r3, d8
 8020c32:	ec41 0b19 	vmov	d9, r0, r1
 8020c36:	ec51 0b18 	vmov	r0, r1, d8
 8020c3a:	f7df fcd5 	bl	80005e8 <__aeabi_dmul>
 8020c3e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8020c42:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8020c46:	9301      	str	r3, [sp, #4]
 8020c48:	4602      	mov	r2, r0
 8020c4a:	460b      	mov	r3, r1
 8020c4c:	4680      	mov	r8, r0
 8020c4e:	4689      	mov	r9, r1
 8020c50:	f7df fcca 	bl	80005e8 <__aeabi_dmul>
 8020c54:	a360      	add	r3, pc, #384	; (adr r3, 8020dd8 <__ieee754_log+0x320>)
 8020c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c5a:	4606      	mov	r6, r0
 8020c5c:	460f      	mov	r7, r1
 8020c5e:	f7df fcc3 	bl	80005e8 <__aeabi_dmul>
 8020c62:	a35f      	add	r3, pc, #380	; (adr r3, 8020de0 <__ieee754_log+0x328>)
 8020c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c68:	f7df fb08 	bl	800027c <__adddf3>
 8020c6c:	4632      	mov	r2, r6
 8020c6e:	463b      	mov	r3, r7
 8020c70:	f7df fcba 	bl	80005e8 <__aeabi_dmul>
 8020c74:	a35c      	add	r3, pc, #368	; (adr r3, 8020de8 <__ieee754_log+0x330>)
 8020c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c7a:	f7df faff 	bl	800027c <__adddf3>
 8020c7e:	4632      	mov	r2, r6
 8020c80:	463b      	mov	r3, r7
 8020c82:	f7df fcb1 	bl	80005e8 <__aeabi_dmul>
 8020c86:	a35a      	add	r3, pc, #360	; (adr r3, 8020df0 <__ieee754_log+0x338>)
 8020c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c8c:	f7df faf6 	bl	800027c <__adddf3>
 8020c90:	4642      	mov	r2, r8
 8020c92:	464b      	mov	r3, r9
 8020c94:	f7df fca8 	bl	80005e8 <__aeabi_dmul>
 8020c98:	a357      	add	r3, pc, #348	; (adr r3, 8020df8 <__ieee754_log+0x340>)
 8020c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c9e:	4680      	mov	r8, r0
 8020ca0:	4689      	mov	r9, r1
 8020ca2:	4630      	mov	r0, r6
 8020ca4:	4639      	mov	r1, r7
 8020ca6:	f7df fc9f 	bl	80005e8 <__aeabi_dmul>
 8020caa:	a355      	add	r3, pc, #340	; (adr r3, 8020e00 <__ieee754_log+0x348>)
 8020cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cb0:	f7df fae4 	bl	800027c <__adddf3>
 8020cb4:	4632      	mov	r2, r6
 8020cb6:	463b      	mov	r3, r7
 8020cb8:	f7df fc96 	bl	80005e8 <__aeabi_dmul>
 8020cbc:	a352      	add	r3, pc, #328	; (adr r3, 8020e08 <__ieee754_log+0x350>)
 8020cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cc2:	f7df fadb 	bl	800027c <__adddf3>
 8020cc6:	4632      	mov	r2, r6
 8020cc8:	463b      	mov	r3, r7
 8020cca:	f7df fc8d 	bl	80005e8 <__aeabi_dmul>
 8020cce:	460b      	mov	r3, r1
 8020cd0:	4602      	mov	r2, r0
 8020cd2:	4649      	mov	r1, r9
 8020cd4:	4640      	mov	r0, r8
 8020cd6:	f7df fad1 	bl	800027c <__adddf3>
 8020cda:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8020cde:	9b01      	ldr	r3, [sp, #4]
 8020ce0:	3551      	adds	r5, #81	; 0x51
 8020ce2:	431d      	orrs	r5, r3
 8020ce4:	2d00      	cmp	r5, #0
 8020ce6:	4680      	mov	r8, r0
 8020ce8:	4689      	mov	r9, r1
 8020cea:	dd48      	ble.n	8020d7e <__ieee754_log+0x2c6>
 8020cec:	4b4e      	ldr	r3, [pc, #312]	; (8020e28 <__ieee754_log+0x370>)
 8020cee:	2200      	movs	r2, #0
 8020cf0:	4650      	mov	r0, sl
 8020cf2:	4659      	mov	r1, fp
 8020cf4:	f7df fc78 	bl	80005e8 <__aeabi_dmul>
 8020cf8:	4652      	mov	r2, sl
 8020cfa:	465b      	mov	r3, fp
 8020cfc:	f7df fc74 	bl	80005e8 <__aeabi_dmul>
 8020d00:	4602      	mov	r2, r0
 8020d02:	460b      	mov	r3, r1
 8020d04:	4606      	mov	r6, r0
 8020d06:	460f      	mov	r7, r1
 8020d08:	4640      	mov	r0, r8
 8020d0a:	4649      	mov	r1, r9
 8020d0c:	f7df fab6 	bl	800027c <__adddf3>
 8020d10:	ec53 2b18 	vmov	r2, r3, d8
 8020d14:	f7df fc68 	bl	80005e8 <__aeabi_dmul>
 8020d18:	4680      	mov	r8, r0
 8020d1a:	4689      	mov	r9, r1
 8020d1c:	b964      	cbnz	r4, 8020d38 <__ieee754_log+0x280>
 8020d1e:	4602      	mov	r2, r0
 8020d20:	460b      	mov	r3, r1
 8020d22:	4630      	mov	r0, r6
 8020d24:	4639      	mov	r1, r7
 8020d26:	f7df faa7 	bl	8000278 <__aeabi_dsub>
 8020d2a:	4602      	mov	r2, r0
 8020d2c:	460b      	mov	r3, r1
 8020d2e:	4650      	mov	r0, sl
 8020d30:	4659      	mov	r1, fp
 8020d32:	f7df faa1 	bl	8000278 <__aeabi_dsub>
 8020d36:	e6d6      	b.n	8020ae6 <__ieee754_log+0x2e>
 8020d38:	a321      	add	r3, pc, #132	; (adr r3, 8020dc0 <__ieee754_log+0x308>)
 8020d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d3e:	ec51 0b19 	vmov	r0, r1, d9
 8020d42:	f7df fc51 	bl	80005e8 <__aeabi_dmul>
 8020d46:	a320      	add	r3, pc, #128	; (adr r3, 8020dc8 <__ieee754_log+0x310>)
 8020d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d4c:	4604      	mov	r4, r0
 8020d4e:	460d      	mov	r5, r1
 8020d50:	ec51 0b19 	vmov	r0, r1, d9
 8020d54:	f7df fc48 	bl	80005e8 <__aeabi_dmul>
 8020d58:	4642      	mov	r2, r8
 8020d5a:	464b      	mov	r3, r9
 8020d5c:	f7df fa8e 	bl	800027c <__adddf3>
 8020d60:	4602      	mov	r2, r0
 8020d62:	460b      	mov	r3, r1
 8020d64:	4630      	mov	r0, r6
 8020d66:	4639      	mov	r1, r7
 8020d68:	f7df fa86 	bl	8000278 <__aeabi_dsub>
 8020d6c:	4652      	mov	r2, sl
 8020d6e:	465b      	mov	r3, fp
 8020d70:	f7df fa82 	bl	8000278 <__aeabi_dsub>
 8020d74:	4602      	mov	r2, r0
 8020d76:	460b      	mov	r3, r1
 8020d78:	4620      	mov	r0, r4
 8020d7a:	4629      	mov	r1, r5
 8020d7c:	e7d9      	b.n	8020d32 <__ieee754_log+0x27a>
 8020d7e:	4602      	mov	r2, r0
 8020d80:	460b      	mov	r3, r1
 8020d82:	4650      	mov	r0, sl
 8020d84:	4659      	mov	r1, fp
 8020d86:	f7df fa77 	bl	8000278 <__aeabi_dsub>
 8020d8a:	ec53 2b18 	vmov	r2, r3, d8
 8020d8e:	f7df fc2b 	bl	80005e8 <__aeabi_dmul>
 8020d92:	4606      	mov	r6, r0
 8020d94:	460f      	mov	r7, r1
 8020d96:	2c00      	cmp	r4, #0
 8020d98:	f43f af23 	beq.w	8020be2 <__ieee754_log+0x12a>
 8020d9c:	a308      	add	r3, pc, #32	; (adr r3, 8020dc0 <__ieee754_log+0x308>)
 8020d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020da2:	ec51 0b19 	vmov	r0, r1, d9
 8020da6:	f7df fc1f 	bl	80005e8 <__aeabi_dmul>
 8020daa:	a307      	add	r3, pc, #28	; (adr r3, 8020dc8 <__ieee754_log+0x310>)
 8020dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020db0:	4604      	mov	r4, r0
 8020db2:	460d      	mov	r5, r1
 8020db4:	ec51 0b19 	vmov	r0, r1, d9
 8020db8:	e727      	b.n	8020c0a <__ieee754_log+0x152>
 8020dba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8020e10 <__ieee754_log+0x358>
 8020dbe:	e694      	b.n	8020aea <__ieee754_log+0x32>
 8020dc0:	fee00000 	.word	0xfee00000
 8020dc4:	3fe62e42 	.word	0x3fe62e42
 8020dc8:	35793c76 	.word	0x35793c76
 8020dcc:	3dea39ef 	.word	0x3dea39ef
 8020dd0:	55555555 	.word	0x55555555
 8020dd4:	3fd55555 	.word	0x3fd55555
 8020dd8:	df3e5244 	.word	0xdf3e5244
 8020ddc:	3fc2f112 	.word	0x3fc2f112
 8020de0:	96cb03de 	.word	0x96cb03de
 8020de4:	3fc74664 	.word	0x3fc74664
 8020de8:	94229359 	.word	0x94229359
 8020dec:	3fd24924 	.word	0x3fd24924
 8020df0:	55555593 	.word	0x55555593
 8020df4:	3fe55555 	.word	0x3fe55555
 8020df8:	d078c69f 	.word	0xd078c69f
 8020dfc:	3fc39a09 	.word	0x3fc39a09
 8020e00:	1d8e78af 	.word	0x1d8e78af
 8020e04:	3fcc71c5 	.word	0x3fcc71c5
 8020e08:	9997fa04 	.word	0x9997fa04
 8020e0c:	3fd99999 	.word	0x3fd99999
	...
 8020e18:	c3500000 	.word	0xc3500000
 8020e1c:	43500000 	.word	0x43500000
 8020e20:	7fefffff 	.word	0x7fefffff
 8020e24:	3ff00000 	.word	0x3ff00000
 8020e28:	3fe00000 	.word	0x3fe00000
 8020e2c:	00000000 	.word	0x00000000

08020e30 <nan>:
 8020e30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020e38 <nan+0x8>
 8020e34:	4770      	bx	lr
 8020e36:	bf00      	nop
 8020e38:	00000000 	.word	0x00000000
 8020e3c:	7ff80000 	.word	0x7ff80000

08020e40 <_init>:
 8020e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e42:	bf00      	nop
 8020e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e46:	bc08      	pop	{r3}
 8020e48:	469e      	mov	lr, r3
 8020e4a:	4770      	bx	lr

08020e4c <_fini>:
 8020e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e4e:	bf00      	nop
 8020e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e52:	bc08      	pop	{r3}
 8020e54:	469e      	mov	lr, r3
 8020e56:	4770      	bx	lr
