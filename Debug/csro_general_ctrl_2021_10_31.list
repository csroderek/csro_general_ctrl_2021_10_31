
csro_general_ctrl_2021_10_31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000374c  0801e000  0801e000  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802174c  0802174c  0004015c  2**0
                  CONTENTS
  4 .ARM          00000008  0802174c  0802174c  0003174c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021754  08021754  0004015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021754  08021754  00031754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021758  08021758  00031758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0802175c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004015c  2**0
                  CONTENTS
 10 .bss          000138f0  2000015c  2000015c  0004015c  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20013a4c  20013a4c  0004015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005ab44  00000000  00000000  0004018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aa50  00000000  00000000  0009acd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b28  00000000  00000000  000a5720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000028c0  00000000  00000000  000a8248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003758e  00000000  00000000  000aab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000481e4  00000000  00000000  000e2096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103b74  00000000  00000000  0012a27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0022ddee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bb00  00000000  00000000  0022de44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801dfe8 	.word	0x0801dfe8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0801dfe8 	.word	0x0801dfe8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f42:	4b75      	ldr	r3, [pc, #468]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f44:	4a75      	ldr	r2, [pc, #468]	; (800111c <MX_ADC1_Init+0x1ec>)
 8000f46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f48:	4b73      	ldr	r3, [pc, #460]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f50:	4b71      	ldr	r3, [pc, #452]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f56:	4b70      	ldr	r3, [pc, #448]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f5c:	4b6e      	ldr	r3, [pc, #440]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f62:	4b6d      	ldr	r3, [pc, #436]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f6a:	4b6b      	ldr	r3, [pc, #428]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f70:	4b69      	ldr	r3, [pc, #420]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f72:	4a6b      	ldr	r2, [pc, #428]	; (8001120 <MX_ADC1_Init+0x1f0>)
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f76:	4b68      	ldr	r3, [pc, #416]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000f7c:	4b66      	ldr	r3, [pc, #408]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f7e:	220d      	movs	r2, #13
 8000f80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f82:	4b65      	ldr	r3, [pc, #404]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8a:	4b63      	ldr	r3, [pc, #396]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f90:	4861      	ldr	r0, [pc, #388]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000f92:	f002 fe0b 	bl	8003bac <HAL_ADC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f000 fd62 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fa0:	2305      	movs	r3, #5
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000fa8:	2306      	movs	r3, #6
 8000faa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4859      	ldr	r0, [pc, #356]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000fb2:	f002 ff6d 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fbc:	f000 fd52 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4852      	ldr	r0, [pc, #328]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000fce:	f002 ff5f 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fd8:	f000 fd44 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	484b      	ldr	r0, [pc, #300]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8000fea:	f002 ff51 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ff4:	f000 fd36 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	4844      	ldr	r0, [pc, #272]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8001006:	f002 ff43 	bl	8003e90 <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001010:	f000 fd28 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001014:	230c      	movs	r3, #12
 8001016:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001018:	2305      	movs	r3, #5
 800101a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	483d      	ldr	r0, [pc, #244]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8001022:	f002 ff35 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800102c:	f000 fd1a 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001030:	230d      	movs	r3, #13
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001034:	2306      	movs	r3, #6
 8001036:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4836      	ldr	r0, [pc, #216]	; (8001118 <MX_ADC1_Init+0x1e8>)
 800103e:	f002 ff27 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001048:	f000 fd0c 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001050:	2307      	movs	r3, #7
 8001052:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	482f      	ldr	r0, [pc, #188]	; (8001118 <MX_ADC1_Init+0x1e8>)
 800105a:	f002 ff19 	bl	8003e90 <HAL_ADC_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001064:	f000 fcfe 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001068:	2303      	movs	r3, #3
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800106c:	2308      	movs	r3, #8
 800106e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4828      	ldr	r0, [pc, #160]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8001076:	f002 ff0b 	bl	8003e90 <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001080:	f000 fcf0 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001084:	2304      	movs	r3, #4
 8001086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001088:	2309      	movs	r3, #9
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4821      	ldr	r0, [pc, #132]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8001092:	f002 fefd 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800109c:	f000 fce2 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010a0:	2309      	movs	r3, #9
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80010a4:	230a      	movs	r3, #10
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	481a      	ldr	r0, [pc, #104]	; (8001118 <MX_ADC1_Init+0x1e8>)
 80010ae:	f002 feef 	bl	8003e90 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80010b8:	f000 fcd4 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010bc:	2310      	movs	r3, #16
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80010c0:	230b      	movs	r3, #11
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <MX_ADC1_Init+0x1e8>)
 80010ca:	f002 fee1 	bl	8003e90 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80010d4:	f000 fcc6 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010d8:	2311      	movs	r3, #17
 80010da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80010dc:	230c      	movs	r3, #12
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_ADC1_Init+0x1e8>)
 80010e6:	f002 fed3 	bl	8003e90 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80010f0:	f000 fcb8 	bl	8001a64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80010f4:	2312      	movs	r3, #18
 80010f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80010f8:	230d      	movs	r3, #13
 80010fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_ADC1_Init+0x1e8>)
 8001102:	f002 fec5 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800110c:	f000 fcaa 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000b0f8 	.word	0x2000b0f8
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a49      	ldr	r2, [pc, #292]	; (8001268 <HAL_ADC_MspInit+0x144>)
 8001142:	4293      	cmp	r3, r2
 8001144:	f040 808c 	bne.w	8001260 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_ADC_MspInit+0x148>)
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	4a46      	ldr	r2, [pc, #280]	; (800126c <HAL_ADC_MspInit+0x148>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	6453      	str	r3, [r2, #68]	; 0x44
 8001158:	4b44      	ldr	r3, [pc, #272]	; (800126c <HAL_ADC_MspInit+0x148>)
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	4b40      	ldr	r3, [pc, #256]	; (800126c <HAL_ADC_MspInit+0x148>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a3f      	ldr	r2, [pc, #252]	; (800126c <HAL_ADC_MspInit+0x148>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b3d      	ldr	r3, [pc, #244]	; (800126c <HAL_ADC_MspInit+0x148>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	4b39      	ldr	r3, [pc, #228]	; (800126c <HAL_ADC_MspInit+0x148>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a38      	ldr	r2, [pc, #224]	; (800126c <HAL_ADC_MspInit+0x148>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <HAL_ADC_MspInit+0x148>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <HAL_ADC_MspInit+0x148>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4a31      	ldr	r2, [pc, #196]	; (800126c <HAL_ADC_MspInit+0x148>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_ADC_MspInit+0x148>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = NTC_01_Pin|NTC_02_Pin|NTC_03_Pin;
 80011b8:	230d      	movs	r3, #13
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4829      	ldr	r0, [pc, #164]	; (8001270 <HAL_ADC_MspInit+0x14c>)
 80011cc:	f004 ff8a 	bl	80060e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_04_Pin|NTC_05_Pin|NTC_06_Pin|DP_01_Pin
 80011d0:	2379      	movs	r3, #121	; 0x79
 80011d2:	61fb      	str	r3, [r7, #28]
                          |DP_02_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4824      	ldr	r0, [pc, #144]	; (8001274 <HAL_ADC_MspInit+0x150>)
 80011e4:	f004 ff7e 	bl	80060e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DP_03_Pin|VAL_FB_Pin;
 80011e8:	2303      	movs	r3, #3
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ec:	2303      	movs	r3, #3
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	481f      	ldr	r0, [pc, #124]	; (8001278 <HAL_ADC_MspInit+0x154>)
 80011fc:	f004 ff72 	bl	80060e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <HAL_ADC_MspInit+0x158>)
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <HAL_ADC_MspInit+0x15c>)
 8001204:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_ADC_MspInit+0x158>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_ADC_MspInit+0x158>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_ADC_MspInit+0x158>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_ADC_MspInit+0x158>)
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_ADC_MspInit+0x158>)
 8001222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001226:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_ADC_MspInit+0x158>)
 800122a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_ADC_MspInit+0x158>)
 8001232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001236:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_ADC_MspInit+0x158>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_ADC_MspInit+0x158>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <HAL_ADC_MspInit+0x158>)
 8001246:	f003 f9a5 	bl	8004594 <HAL_DMA_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001250:	f000 fc08 	bl	8001a64 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <HAL_ADC_MspInit+0x158>)
 8001258:	639a      	str	r2, [r3, #56]	; 0x38
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_ADC_MspInit+0x158>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001260:	bf00      	nop
 8001262:	3730      	adds	r7, #48	; 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40012000 	.word	0x40012000
 800126c:	40023800 	.word	0x40023800
 8001270:	40020800 	.word	0x40020800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400
 800127c:	2000b140 	.word	0x2000b140
 8001280:	40026410 	.word	0x40026410

08001284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <MX_DMA_Init+0xd8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a32      	ldr	r2, [pc, #200]	; (800135c <MX_DMA_Init+0xd8>)
 8001294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <MX_DMA_Init+0xd8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <MX_DMA_Init+0xd8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a2b      	ldr	r2, [pc, #172]	; (800135c <MX_DMA_Init+0xd8>)
 80012b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_DMA_Init+0xd8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	200c      	movs	r0, #12
 80012c8:	f003 f93a 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012cc:	200c      	movs	r0, #12
 80012ce:	f003 f953 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	200e      	movs	r0, #14
 80012d8:	f003 f932 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012dc:	200e      	movs	r0, #14
 80012de:	f003 f94b 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2105      	movs	r1, #5
 80012e6:	2010      	movs	r0, #16
 80012e8:	f003 f92a 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012ec:	2010      	movs	r0, #16
 80012ee:	f003 f943 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2105      	movs	r1, #5
 80012f6:	2011      	movs	r0, #17
 80012f8:	f003 f922 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012fc:	2011      	movs	r0, #17
 80012fe:	f003 f93b 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2105      	movs	r1, #5
 8001306:	2038      	movs	r0, #56	; 0x38
 8001308:	f003 f91a 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800130c:	2038      	movs	r0, #56	; 0x38
 800130e:	f003 f933 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2105      	movs	r1, #5
 8001316:	2039      	movs	r0, #57	; 0x39
 8001318:	f003 f912 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800131c:	2039      	movs	r0, #57	; 0x39
 800131e:	f003 f92b 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2105      	movs	r1, #5
 8001326:	203a      	movs	r0, #58	; 0x3a
 8001328:	f003 f90a 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800132c:	203a      	movs	r0, #58	; 0x3a
 800132e:	f003 f923 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2105      	movs	r1, #5
 8001336:	2045      	movs	r0, #69	; 0x45
 8001338:	f003 f902 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800133c:	2045      	movs	r0, #69	; 0x45
 800133e:	f003 f91b 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2105      	movs	r1, #5
 8001346:	2046      	movs	r0, #70	; 0x46
 8001348:	f003 f8fa 	bl	8004540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800134c:	2046      	movs	r0, #70	; 0x46
 800134e:	f003 f913 	bl	8004578 <HAL_NVIC_EnableIRQ>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  fnd_com_modbus_rtu_init();
 8001364:	f001 fb86 	bl	8002a74 <fnd_com_modbus_rtu_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8001368:	4a24      	ldr	r2, [pc, #144]	; (80013fc <MX_FREERTOS_Init+0x9c>)
 800136a:	2100      	movs	r1, #0
 800136c:	4824      	ldr	r0, [pc, #144]	; (8001400 <MX_FREERTOS_Init+0xa0>)
 800136e:	f00a f896 	bl	800b49e <osThreadNew>
 8001372:	4603      	mov	r3, r0
 8001374:	4a23      	ldr	r2, [pc, #140]	; (8001404 <MX_FREERTOS_Init+0xa4>)
 8001376:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001378:	4a23      	ldr	r2, [pc, #140]	; (8001408 <MX_FREERTOS_Init+0xa8>)
 800137a:	2100      	movs	r1, #0
 800137c:	4823      	ldr	r0, [pc, #140]	; (800140c <MX_FREERTOS_Init+0xac>)
 800137e:	f00a f88e 	bl	800b49e <osThreadNew>
 8001382:	4603      	mov	r3, r0
 8001384:	4a22      	ldr	r2, [pc, #136]	; (8001410 <MX_FREERTOS_Init+0xb0>)
 8001386:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <MX_FREERTOS_Init+0xb4>)
 800138a:	2100      	movs	r1, #0
 800138c:	4822      	ldr	r0, [pc, #136]	; (8001418 <MX_FREERTOS_Init+0xb8>)
 800138e:	f00a f886 	bl	800b49e <osThreadNew>
 8001392:	4603      	mov	r3, r0
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <MX_FREERTOS_Init+0xbc>)
 8001396:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8001398:	4a21      	ldr	r2, [pc, #132]	; (8001420 <MX_FREERTOS_Init+0xc0>)
 800139a:	2100      	movs	r1, #0
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <MX_FREERTOS_Init+0xc4>)
 800139e:	f00a f87e 	bl	800b49e <osThreadNew>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a20      	ldr	r2, [pc, #128]	; (8001428 <MX_FREERTOS_Init+0xc8>)
 80013a6:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 80013a8:	4a20      	ldr	r2, [pc, #128]	; (800142c <MX_FREERTOS_Init+0xcc>)
 80013aa:	2100      	movs	r1, #0
 80013ac:	4820      	ldr	r0, [pc, #128]	; (8001430 <MX_FREERTOS_Init+0xd0>)
 80013ae:	f00a f876 	bl	800b49e <osThreadNew>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <MX_FREERTOS_Init+0xd4>)
 80013b6:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 80013b8:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <MX_FREERTOS_Init+0xd8>)
 80013ba:	2100      	movs	r1, #0
 80013bc:	481f      	ldr	r0, [pc, #124]	; (800143c <MX_FREERTOS_Init+0xdc>)
 80013be:	f00a f86e 	bl	800b49e <osThreadNew>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <MX_FREERTOS_Init+0xe0>)
 80013c6:	6013      	str	r3, [r2, #0]

  /* creation of myTask07 */
  myTask07Handle = osThreadNew(StartTask07, NULL, &myTask07_attributes);
 80013c8:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <MX_FREERTOS_Init+0xe4>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	481e      	ldr	r0, [pc, #120]	; (8001448 <MX_FREERTOS_Init+0xe8>)
 80013ce:	f00a f866 	bl	800b49e <osThreadNew>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a1d      	ldr	r2, [pc, #116]	; (800144c <MX_FREERTOS_Init+0xec>)
 80013d6:	6013      	str	r3, [r2, #0]

  /* creation of myTask08 */
  myTask08Handle = osThreadNew(StartTask08, NULL, &myTask08_attributes);
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <MX_FREERTOS_Init+0xf0>)
 80013da:	2100      	movs	r1, #0
 80013dc:	481d      	ldr	r0, [pc, #116]	; (8001454 <MX_FREERTOS_Init+0xf4>)
 80013de:	f00a f85e 	bl	800b49e <osThreadNew>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <MX_FREERTOS_Init+0xf8>)
 80013e6:	6013      	str	r3, [r2, #0]

  /* creation of myTask09 */
  myTask09Handle = osThreadNew(StartTask09, NULL, &myTask09_attributes);
 80013e8:	4a1c      	ldr	r2, [pc, #112]	; (800145c <MX_FREERTOS_Init+0xfc>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	481c      	ldr	r0, [pc, #112]	; (8001460 <MX_FREERTOS_Init+0x100>)
 80013ee:	f00a f856 	bl	800b49e <osThreadNew>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <MX_FREERTOS_Init+0x104>)
 80013f6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08020f64 	.word	0x08020f64
 8001400:	08001469 	.word	0x08001469
 8001404:	2000b204 	.word	0x2000b204
 8001408:	08020f88 	.word	0x08020f88
 800140c:	0800147f 	.word	0x0800147f
 8001410:	2000b1e8 	.word	0x2000b1e8
 8001414:	08020fac 	.word	0x08020fac
 8001418:	0800148d 	.word	0x0800148d
 800141c:	2000b1fc 	.word	0x2000b1fc
 8001420:	08020fd0 	.word	0x08020fd0
 8001424:	0800149b 	.word	0x0800149b
 8001428:	2000b1b4 	.word	0x2000b1b4
 800142c:	08020ff4 	.word	0x08020ff4
 8001430:	080014b1 	.word	0x080014b1
 8001434:	2000b1b0 	.word	0x2000b1b0
 8001438:	08021018 	.word	0x08021018
 800143c:	080014c1 	.word	0x080014c1
 8001440:	2000b210 	.word	0x2000b210
 8001444:	0802103c 	.word	0x0802103c
 8001448:	080014d5 	.word	0x080014d5
 800144c:	2000b200 	.word	0x2000b200
 8001450:	08021060 	.word	0x08021060
 8001454:	080014f5 	.word	0x080014f5
 8001458:	2000b1b8 	.word	0x2000b1b8
 800145c:	08021084 	.word	0x08021084
 8001460:	08001509 	.word	0x08001509
 8001464:	2000b20c 	.word	0x2000b20c

08001468 <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001470:	f009 fae0 	bl	800aa34 <MX_LWIP_Init>
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001478:	f00a f8a3 	bl	800b5c2 <osDelay>
 800147c:	e7fa      	b.n	8001474 <StartTask01+0xc>

0800147e <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave1_wait();
 8001486:	f001 fb97 	bl	8002bb8 <fnd_com_modbus_rtu_slave1_wait>
 800148a:	e7fc      	b.n	8001486 <StartTask02+0x8>

0800148c <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave2_wait();
 8001494:	f001 fb9a 	bl	8002bcc <fnd_com_modbus_rtu_slave2_wait>
 8001498:	e7fc      	b.n	8001494 <StartTask03+0x8>

0800149a <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(500);
 80014a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a6:	f00a f88c 	bl	800b5c2 <osDelay>
    fnd_com_modbus_rtu_master1_read_write();
 80014aa:	f001 fb99 	bl	8002be0 <fnd_com_modbus_rtu_master1_read_write>
    osDelay(500);
 80014ae:	e7f8      	b.n	80014a2 <StartTask04+0x8>

080014b0 <StartTask05>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 80014b8:	2064      	movs	r0, #100	; 0x64
 80014ba:	f00a f882 	bl	800b5c2 <osDelay>
 80014be:	e7fb      	b.n	80014b8 <StartTask05+0x8>

080014c0 <StartTask06>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f00a f87a 	bl	800b5c2 <osDelay>
    fnd_output_stepper_10ms_tick();
 80014ce:	f002 faef 	bl	8003ab0 <fnd_output_stepper_10ms_tick>
    osDelay(10);
 80014d2:	e7f9      	b.n	80014c8 <StartTask06+0x8>

080014d4 <StartTask07>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  fnd_input_init();
 80014dc:	f001 fbee 	bl	8002cbc <fnd_input_init>
  fnd_output_init();
 80014e0:	f001 ff86 	bl	80033f0 <fnd_output_init>
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	f00a f86c 	bl	800b5c2 <osDelay>
    fnd_input_update();
 80014ea:	f001 fbf1 	bl	8002cd0 <fnd_input_update>
    fnd_output_update();
 80014ee:	f001 ff87 	bl	8003400 <fnd_output_update>
    osDelay(100);
 80014f2:	e7f7      	b.n	80014e4 <StartTask07+0x10>

080014f4 <StartTask08>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */

  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 80014fc:	2064      	movs	r0, #100	; 0x64
 80014fe:	f00a f860 	bl	800b5c2 <osDelay>
    fnd_input_i2c_read_sht();
 8001502:	f001 fd03 	bl	8002f0c <fnd_input_i2c_read_sht>
    osDelay(100);
 8001506:	e7f9      	b.n	80014fc <StartTask08+0x8>

08001508 <StartTask09>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask09 */
void StartTask09(void *argument)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask09 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(200);
 8001510:	20c8      	movs	r0, #200	; 0xc8
 8001512:	f00a f856 	bl	800b5c2 <osDelay>
    HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8001516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151a:	4802      	ldr	r0, [pc, #8]	; (8001524 <StartTask09+0x1c>)
 800151c:	f004 ffaf 	bl	800647e <HAL_GPIO_TogglePin>
    osDelay(200);
 8001520:	e7f6      	b.n	8001510 <StartTask09+0x8>
 8001522:	bf00      	nop
 8001524:	40020800 	.word	0x40020800

08001528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b73      	ldr	r3, [pc, #460]	; (8001710 <MX_GPIO_Init+0x1e8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a72      	ldr	r2, [pc, #456]	; (8001710 <MX_GPIO_Init+0x1e8>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b70      	ldr	r3, [pc, #448]	; (8001710 <MX_GPIO_Init+0x1e8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b6c      	ldr	r3, [pc, #432]	; (8001710 <MX_GPIO_Init+0x1e8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a6b      	ldr	r2, [pc, #428]	; (8001710 <MX_GPIO_Init+0x1e8>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b69      	ldr	r3, [pc, #420]	; (8001710 <MX_GPIO_Init+0x1e8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b65      	ldr	r3, [pc, #404]	; (8001710 <MX_GPIO_Init+0x1e8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a64      	ldr	r2, [pc, #400]	; (8001710 <MX_GPIO_Init+0x1e8>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b62      	ldr	r3, [pc, #392]	; (8001710 <MX_GPIO_Init+0x1e8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <MX_GPIO_Init+0x1e8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a5d      	ldr	r2, [pc, #372]	; (8001710 <MX_GPIO_Init+0x1e8>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <MX_GPIO_Init+0x1e8>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b57      	ldr	r3, [pc, #348]	; (8001710 <MX_GPIO_Init+0x1e8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a56      	ldr	r2, [pc, #344]	; (8001710 <MX_GPIO_Init+0x1e8>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b54      	ldr	r3, [pc, #336]	; (8001710 <MX_GPIO_Init+0x1e8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RLY_05_Pin|RLY_06_Pin|ID_LD_Pin|ID_CLK_Pin
 80015ca:	2200      	movs	r2, #0
 80015cc:	f24f 51ef 	movw	r1, #62959	; 0xf5ef
 80015d0:	4850      	ldr	r0, [pc, #320]	; (8001714 <MX_GPIO_Init+0x1ec>)
 80015d2:	f004 ff3b 	bl	800644c <HAL_GPIO_WritePin>
                          |STEP_B4_Pin|STEP_B3_Pin|STEP_B2_Pin|STEP_B1_Pin
                          |STEP_A8_Pin|STEP_A7_Pin|STEP_A6_Pin|RLY_03_Pin
                          |RLY_04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_B8_Pin|STEP_B7_Pin|STEP_B6_Pin|LED_01_Pin
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 417d 	mov.w	r1, #64768	; 0xfd00
 80015dc:	484e      	ldr	r0, [pc, #312]	; (8001718 <MX_GPIO_Init+0x1f0>)
 80015de:	f004 ff35 	bl	800644c <HAL_GPIO_WritePin>
                          |DS1302_CLK_Pin|DS1302_IO_Pin|DS1302_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_B5_Pin|ETH_RSTN_Pin|STEP_A5_Pin|RS485_EN3_Pin
 80015e2:	2200      	movs	r2, #0
 80015e4:	f24c 7104 	movw	r1, #50948	; 0xc704
 80015e8:	484c      	ldr	r0, [pc, #304]	; (800171c <MX_GPIO_Init+0x1f4>)
 80015ea:	f004 ff2f 	bl	800644c <HAL_GPIO_WritePin>
                          |RLY_01_Pin|RLY_02_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP_A4_Pin|STEP_A3_Pin|STEP_A2_Pin|STEP_A1_Pin
 80015ee:	2200      	movs	r2, #0
 80015f0:	f64b 4110 	movw	r1, #48144	; 0xbc10
 80015f4:	484a      	ldr	r0, [pc, #296]	; (8001720 <MX_GPIO_Init+0x1f8>)
 80015f6:	f004 ff29 	bl	800644c <HAL_GPIO_WritePin>
                          |RS485_EN4_Pin|RS485_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN1_GPIO_Port, RS485_EN1_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001600:	4848      	ldr	r0, [pc, #288]	; (8001724 <MX_GPIO_Init+0x1fc>)
 8001602:	f004 ff23 	bl	800644c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = RLY_05_Pin|RLY_06_Pin|ID_LD_Pin|ID_CLK_Pin
 8001606:	f24f 53ef 	movw	r3, #62959	; 0xf5ef
 800160a:	617b      	str	r3, [r7, #20]
                          |STEP_B4_Pin|STEP_B3_Pin|STEP_B2_Pin|STEP_B1_Pin
                          |STEP_A8_Pin|STEP_A7_Pin|STEP_A6_Pin|RLY_03_Pin
                          |RLY_04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	483d      	ldr	r0, [pc, #244]	; (8001714 <MX_GPIO_Init+0x1ec>)
 8001620:	f004 fd60 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ID_DATA_Pin;
 8001624:	2310      	movs	r3, #16
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ID_DATA_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4837      	ldr	r0, [pc, #220]	; (8001714 <MX_GPIO_Init+0x1ec>)
 8001638:	f004 fd54 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_B8_Pin|STEP_B7_Pin|STEP_B6_Pin|LED_01_Pin
 800163c:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8001640:	617b      	str	r3, [r7, #20]
                          |DS1302_CLK_Pin|DS1302_IO_Pin|DS1302_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4830      	ldr	r0, [pc, #192]	; (8001718 <MX_GPIO_Init+0x1f0>)
 8001656:	f004 fd45 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = STEP_B5_Pin|ETH_RSTN_Pin|STEP_A5_Pin|RLY_01_Pin
 800165a:	f244 7304 	movw	r3, #18180	; 0x4704
 800165e:	617b      	str	r3, [r7, #20]
                          |RLY_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	482a      	ldr	r0, [pc, #168]	; (800171c <MX_GPIO_Init+0x1f4>)
 8001674:	f004 fd36 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_EN3_Pin;
 8001678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN3_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4822      	ldr	r0, [pc, #136]	; (800171c <MX_GPIO_Init+0x1f4>)
 8001692:	f004 fd27 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STEP_A4_Pin|STEP_A3_Pin|STEP_A2_Pin|STEP_A1_Pin;
 8001696:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	481c      	ldr	r0, [pc, #112]	; (8001720 <MX_GPIO_Init+0x1f8>)
 80016b0:	f004 fd18 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RS485_EN4_Pin|RS485_EN2_Pin;
 80016b4:	f248 0310 	movw	r3, #32784	; 0x8010
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016be:	2302      	movs	r3, #2
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4814      	ldr	r0, [pc, #80]	; (8001720 <MX_GPIO_Init+0x1f8>)
 80016ce:	f004 fd09 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_EN1_Pin;
 80016d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016dc:	2302      	movs	r3, #2
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN1_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	480e      	ldr	r0, [pc, #56]	; (8001724 <MX_GPIO_Init+0x1fc>)
 80016ec:	f004 fcfa 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_04_Pin|DI_03_Pin|DI_02_Pin|DI_01_Pin;
 80016f0:	230f      	movs	r3, #15
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <MX_GPIO_Init+0x1f8>)
 8001704:	f004 fcee 	bl	80060e4 <HAL_GPIO_Init>

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40021000 	.word	0x40021000
 8001718:	40020800 	.word	0x40020800
 800171c:	40020400 	.word	0x40020400
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40020000 	.word	0x40020000

08001728 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_I2C1_Init+0x50>)
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <MX_I2C1_Init+0x54>)
 8001730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_I2C1_Init+0x50>)
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <MX_I2C1_Init+0x58>)
 8001736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_I2C1_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_I2C1_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_I2C1_Init+0x50>)
 8001746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800174a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_I2C1_Init+0x50>)
 8001766:	f004 fea5 	bl	80064b4 <HAL_I2C_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001770:	f000 f978 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000b278 	.word	0x2000b278
 800177c:	40005400 	.word	0x40005400
 8001780:	000186a0 	.word	0x000186a0

08001784 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_I2C3_Init+0x50>)
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <MX_I2C3_Init+0x54>)
 800178c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_I2C3_Init+0x50>)
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_I2C3_Init+0x58>)
 8001792:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_I2C3_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_I2C3_Init+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_I2C3_Init+0x50>)
 80017a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_I2C3_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_I2C3_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_I2C3_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_I2C3_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_I2C3_Init+0x50>)
 80017c2:	f004 fe77 	bl	80064b4 <HAL_I2C_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017cc:	f000 f94a 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000b224 	.word	0x2000b224
 80017d8:	40005c00 	.word	0x40005c00
 80017dc:	000186a0 	.word	0x000186a0

080017e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a42      	ldr	r2, [pc, #264]	; (8001908 <HAL_I2C_MspInit+0x128>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12c      	bne.n	800185c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <HAL_I2C_MspInit+0x12c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a40      	ldr	r2, [pc, #256]	; (800190c <HAL_I2C_MspInit+0x12c>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b3e      	ldr	r3, [pc, #248]	; (800190c <HAL_I2C_MspInit+0x12c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TH_SCL1_Pin|TH_SDA1_Pin;
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001822:	2312      	movs	r3, #18
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182e:	2304      	movs	r3, #4
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4835      	ldr	r0, [pc, #212]	; (8001910 <HAL_I2C_MspInit+0x130>)
 800183a:	f004 fc53 	bl	80060e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	4b32      	ldr	r3, [pc, #200]	; (800190c <HAL_I2C_MspInit+0x12c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a31      	ldr	r2, [pc, #196]	; (800190c <HAL_I2C_MspInit+0x12c>)
 8001848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_I2C_MspInit+0x12c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800185a:	e050      	b.n	80018fe <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <HAL_I2C_MspInit+0x134>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d14b      	bne.n	80018fe <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b28      	ldr	r3, [pc, #160]	; (800190c <HAL_I2C_MspInit+0x12c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a27      	ldr	r2, [pc, #156]	; (800190c <HAL_I2C_MspInit+0x12c>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_I2C_MspInit+0x12c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_I2C_MspInit+0x12c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a20      	ldr	r2, [pc, #128]	; (800190c <HAL_I2C_MspInit+0x12c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_I2C_MspInit+0x12c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TH_SDA2_Pin;
 800189e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a4:	2312      	movs	r3, #18
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018b0:	2304      	movs	r3, #4
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TH_SDA2_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	4817      	ldr	r0, [pc, #92]	; (8001918 <HAL_I2C_MspInit+0x138>)
 80018bc:	f004 fc12 	bl	80060e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TH_SCL2_Pin;
 80018c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c6:	2312      	movs	r3, #18
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018d2:	2304      	movs	r3, #4
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TH_SCL2_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	480f      	ldr	r0, [pc, #60]	; (800191c <HAL_I2C_MspInit+0x13c>)
 80018de:	f004 fc01 	bl	80060e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_I2C_MspInit+0x12c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_I2C_MspInit+0x12c>)
 80018ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_I2C_MspInit+0x12c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
}
 80018fe:	bf00      	nop
 8001900:	3730      	adds	r7, #48	; 0x30
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40005400 	.word	0x40005400
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400
 8001914:	40005c00 	.word	0x40005c00
 8001918:	40020800 	.word	0x40020800
 800191c:	40020000 	.word	0x40020000

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001924:	f002 f8dc 	bl	8003ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001928:	f000 f820 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192c:	f7ff fdfc 	bl	8001528 <MX_GPIO_Init>
  MX_DMA_Init();
 8001930:	f7ff fca8 	bl	8001284 <MX_DMA_Init>
  MX_ADC1_Init();
 8001934:	f7ff fafc 	bl	8000f30 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001938:	f000 fd24 	bl	8002384 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800193c:	f000 fd4c 	bl	80023d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001940:	f000 fd74 	bl	800242c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001944:	f000 fd9c 	bl	8002480 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001948:	f7ff feee 	bl	8001728 <MX_I2C1_Init>
  MX_I2C3_Init();
 800194c:	f7ff ff1a 	bl	8001784 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001950:	f000 faa4 	bl	8001e9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001954:	f000 fb52 	bl	8001ffc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001958:	f000 fbc6 	bl	80020e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800195c:	f009 fd40 	bl	800b3e0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001960:	f7ff fcfe 	bl	8001360 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001964:	f009 fd60 	bl	800b428 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001968:	e7fe      	b.n	8001968 <main+0x48>
	...

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b094      	sub	sp, #80	; 0x50
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	2230      	movs	r2, #48	; 0x30
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f01b f98d 	bl	801cc9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <SystemClock_Config+0xcc>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	4a27      	ldr	r2, [pc, #156]	; (8001a38 <SystemClock_Config+0xcc>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	; 0x40
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <SystemClock_Config+0xcc>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <SystemClock_Config+0xd0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <SystemClock_Config+0xd0>)
 80019b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <SystemClock_Config+0xd0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c8:	2302      	movs	r3, #2
 80019ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d0:	2310      	movs	r3, #16
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d4:	2302      	movs	r3, #2
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d8:	2300      	movs	r3, #0
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019dc:	2308      	movs	r3, #8
 80019de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019e0:	23a8      	movs	r3, #168	; 0xa8
 80019e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019e8:	2304      	movs	r3, #4
 80019ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0320 	add.w	r3, r7, #32
 80019f0:	4618      	mov	r0, r3
 80019f2:	f005 fe23 	bl	800763c <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019fc:	f000 f832 	bl	8001a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2302      	movs	r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f006 f884 	bl	8007b2c <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a2a:	f000 f81b 	bl	8001a64 <Error_Handler>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3750      	adds	r7, #80	; 0x50
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a52:	f002 f867 	bl	8003b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40002000 	.word	0x40002000

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <Error_Handler+0x8>
	...

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_MspInit+0x54>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <HAL_MspInit+0x54>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x54>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_MspInit+0x54>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_MspInit+0x54>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_MspInit+0x54>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	210f      	movs	r1, #15
 8001ab2:	f06f 0001 	mvn.w	r0, #1
 8001ab6:	f002 fd43 	bl	8004540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	202d      	movs	r0, #45	; 0x2d
 8001ade:	f002 fd2f 	bl	8004540 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001ae2:	202d      	movs	r0, #45	; 0x2d
 8001ae4:	f002 fd48 	bl	8004578 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <HAL_InitTick+0xa4>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_InitTick+0xa4>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_InitTick+0xa4>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b04:	f107 0210 	add.w	r2, r7, #16
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f006 f9dc 	bl	8007ecc <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b14:	f006 f9b2 	bl	8007e7c <HAL_RCC_GetPCLK1Freq>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <HAL_InitTick+0xa8>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9b      	lsrs	r3, r3, #18
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_InitTick+0xac>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <HAL_InitTick+0xb0>)
 8001b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_InitTick+0xac>)
 8001b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b38:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_InitTick+0xac>)
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_InitTick+0xac>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_InitTick+0xac>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001b4c:	4809      	ldr	r0, [pc, #36]	; (8001b74 <HAL_InitTick+0xac>)
 8001b4e:	f006 f9ef 	bl	8007f30 <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d104      	bne.n	8001b62 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001b58:	4806      	ldr	r0, [pc, #24]	; (8001b74 <HAL_InitTick+0xac>)
 8001b5a:	f006 fa39 	bl	8007fd0 <HAL_TIM_Base_Start_IT>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	e000      	b.n	8001b64 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3730      	adds	r7, #48	; 0x30
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	2000b2cc 	.word	0x2000b2cc
 8001b78:	40002000 	.word	0x40002000

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA1_Stream1_IRQHandler+0x10>)
 8001bae:	f002 fe89 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000b4ac 	.word	0x2000b4ac

08001bbc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <DMA1_Stream3_IRQHandler+0x10>)
 8001bc2:	f002 fe7f 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000b550 	.word	0x2000b550

08001bd0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <DMA1_Stream5_IRQHandler+0x10>)
 8001bd6:	f002 fe75 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000b3ec 	.word	0x2000b3ec

08001be4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <DMA1_Stream6_IRQHandler+0x10>)
 8001bea:	f002 fe6b 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000b6d0 	.word	0x2000b6d0

08001bf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart1);
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <USART1_IRQHandler+0x14>)
 8001bfe:	f000 ff65 	bl	8002acc <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c02:	4802      	ldr	r0, [pc, #8]	; (8001c0c <USART1_IRQHandler+0x14>)
 8001c04:	f007 fedc 	bl	80099c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000b730 	.word	0x2000b730

08001c10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart2);
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <USART2_IRQHandler+0x14>)
 8001c16:	f000 ff59 	bl	8002acc <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c1a:	4802      	ldr	r0, [pc, #8]	; (8001c24 <USART2_IRQHandler+0x14>)
 8001c1c:	f007 fed0 	bl	80099c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000b7b8 	.word	0x2000b7b8

08001c28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart3);
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <USART3_IRQHandler+0x14>)
 8001c2e:	f000 ff4d 	bl	8002acc <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c32:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART3_IRQHandler+0x14>)
 8001c34:	f007 fec4 	bl	80099c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000b50c 	.word	0x2000b50c

08001c40 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c46:	f006 fcd7 	bl	80085f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000b2cc 	.word	0x2000b2cc

08001c54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <DMA2_Stream0_IRQHandler+0x10>)
 8001c5a:	f002 fe33 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000b140 	.word	0x2000b140

08001c68 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <DMA2_Stream1_IRQHandler+0x10>)
 8001c6e:	f002 fe29 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000b44c 	.word	0x2000b44c

08001c7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <DMA2_Stream2_IRQHandler+0x10>)
 8001c82:	f002 fe1f 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000b670 	.word	0x2000b670

08001c90 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <ETH_IRQHandler+0x10>)
 8001c96:	f003 fc63 	bl	8005560 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000ea64 	.word	0x2000ea64

08001ca4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <DMA2_Stream6_IRQHandler+0x10>)
 8001caa:	f002 fe0b 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000b610 	.word	0x2000b610

08001cb8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <DMA2_Stream7_IRQHandler+0x10>)
 8001cbe:	f002 fe01 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000b5b0 	.word	0x2000b5b0

08001ccc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart6);
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <USART6_IRQHandler+0x14>)
 8001cd2:	f000 fefb 	bl	8002acc <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cd6:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <USART6_IRQHandler+0x14>)
 8001cd8:	f007 fe72 	bl	80099c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000b774 	.word	0x2000b774

08001ce4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	return 1;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_kill>:

int _kill(int pid, int sig)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <_kill+0x20>)
 8001d00:	2216      	movs	r2, #22
 8001d02:	601a      	str	r2, [r3, #0]
	return -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20013a38 	.word	0x20013a38

08001d18 <_exit>:

void _exit (int status)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ffe5 	bl	8001cf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d2a:	e7fe      	b.n	8001d2a <_exit+0x12>

08001d2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	e00a      	b.n	8001d54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d3e:	f3af 8000 	nop.w
 8001d42:	4601      	mov	r1, r0
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60ba      	str	r2, [r7, #8]
 8001d4a:	b2ca      	uxtb	r2, r1
 8001d4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbf0      	blt.n	8001d3e <_read+0x12>
	}

return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	e009      	b.n	8001d8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	60ba      	str	r2, [r7, #8]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dbf1      	blt.n	8001d78 <_write+0x12>
	}
	return len;
 8001d94:	687b      	ldr	r3, [r7, #4]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_close>:

int _close(int file)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
	return -1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dc6:	605a      	str	r2, [r3, #4]
	return 0;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <_isatty>:

int _isatty(int file)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
	return 1;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
	return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d205      	bcs.n	8001e44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <_sbrk+0x6c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	e009      	b.n	8001e58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <_sbrk+0x64>)
 8001e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	20020000 	.word	0x20020000
 8001e68:	00000800 	.word	0x00000800
 8001e6c:	20000178 	.word	0x20000178
 8001e70:	20013a50 	.word	0x20013a50
 8001e74:	20013a38 	.word	0x20013a38

08001e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <SystemInit+0x20>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <SystemInit+0x20>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b096      	sub	sp, #88	; 0x58
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f01a fee0 	bl	801cc9a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001edc:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <MX_TIM1_Init+0x15c>)
 8001ede:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001ee0:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001ee2:	22a7      	movs	r2, #167	; 0xa7
 8001ee4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001eec:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001eee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ef2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef4:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001efa:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f00:	4b3c      	ldr	r3, [pc, #240]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f06:	483b      	ldr	r0, [pc, #236]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001f08:	f006 f812 	bl	8007f30 <HAL_TIM_Base_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f12:	f7ff fda7 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f20:	4619      	mov	r1, r3
 8001f22:	4834      	ldr	r0, [pc, #208]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001f24:	f006 fdce 	bl	8008ac4 <HAL_TIM_ConfigClockSource>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f2e:	f7ff fd99 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f32:	4830      	ldr	r0, [pc, #192]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001f34:	f006 f8bc 	bl	80080b0 <HAL_TIM_PWM_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f3e:	f7ff fd91 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4828      	ldr	r0, [pc, #160]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001f52:	f007 fad7 	bl	8009504 <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f5c:	f7ff fd82 	bl	8001a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f60:	2360      	movs	r3, #96	; 0x60
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 199;
 8001f64:	23c7      	movs	r3, #199	; 0xc7
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	2200      	movs	r2, #0
 8001f82:	4619      	mov	r1, r3
 8001f84:	481b      	ldr	r0, [pc, #108]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001f86:	f006 fcdb 	bl	8008940 <HAL_TIM_PWM_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001f90:	f7ff fd68 	bl	8001a64 <Error_Handler>
  }
  sConfigOC.Pulse = 399;
 8001f94:	f240 138f 	movw	r3, #399	; 0x18f
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4814      	ldr	r0, [pc, #80]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001fa4:	f006 fccc 	bl	8008940 <HAL_TIM_PWM_ConfigChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001fae:	f7ff fd59 	bl	8001a64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001fd6:	f007 fb11 	bl	80095fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001fe0:	f7ff fd40 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fe4:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <MX_TIM1_Init+0x158>)
 8001fe6:	f000 f96d 	bl	80022c4 <HAL_TIM_MspPostInit>

}
 8001fea:	bf00      	nop
 8001fec:	3758      	adds	r7, #88	; 0x58
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000b35c 	.word	0x2000b35c
 8001ff8:	40010000 	.word	0x40010000

08001ffc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
 8002028:	615a      	str	r2, [r3, #20]
 800202a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <MX_TIM2_Init+0xe8>)
 800202e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <MX_TIM2_Init+0xe8>)
 8002036:	22a7      	movs	r2, #167	; 0xa7
 8002038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <MX_TIM2_Init+0xe8>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <MX_TIM2_Init+0xe8>)
 8002042:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <MX_TIM2_Init+0xe8>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <MX_TIM2_Init+0xe8>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002054:	4823      	ldr	r0, [pc, #140]	; (80020e4 <MX_TIM2_Init+0xe8>)
 8002056:	f005 ff6b 	bl	8007f30 <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002060:	f7ff fd00 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800206a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800206e:	4619      	mov	r1, r3
 8002070:	481c      	ldr	r0, [pc, #112]	; (80020e4 <MX_TIM2_Init+0xe8>)
 8002072:	f006 fd27 	bl	8008ac4 <HAL_TIM_ConfigClockSource>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800207c:	f7ff fcf2 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002080:	4818      	ldr	r0, [pc, #96]	; (80020e4 <MX_TIM2_Init+0xe8>)
 8002082:	f006 f815 	bl	80080b0 <HAL_TIM_PWM_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800208c:	f7ff fcea 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	4619      	mov	r1, r3
 800209e:	4811      	ldr	r0, [pc, #68]	; (80020e4 <MX_TIM2_Init+0xe8>)
 80020a0:	f007 fa30 	bl	8009504 <HAL_TIMEx_MasterConfigSynchronization>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020aa:	f7ff fcdb 	bl	8001a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ae:	2360      	movs	r3, #96	; 0x60
 80020b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 599;
 80020b2:	f240 2357 	movw	r3, #599	; 0x257
 80020b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	2204      	movs	r2, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4807      	ldr	r0, [pc, #28]	; (80020e4 <MX_TIM2_Init+0xe8>)
 80020c8:	f006 fc3a 	bl	8008940 <HAL_TIM_PWM_ConfigChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80020d2:	f7ff fcc7 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020d6:	4803      	ldr	r0, [pc, #12]	; (80020e4 <MX_TIM2_Init+0xe8>)
 80020d8:	f000 f8f4 	bl	80022c4 <HAL_TIM_MspPostInit>

}
 80020dc:	bf00      	nop
 80020de:	3738      	adds	r7, #56	; 0x38
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	2000b3a4 	.word	0x2000b3a4

080020e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0318 	add.w	r3, r7, #24
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002106:	463b      	mov	r3, r7
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <MX_TIM3_Init+0xf0>)
 8002114:	4a31      	ldr	r2, [pc, #196]	; (80021dc <MX_TIM3_Init+0xf4>)
 8002116:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <MX_TIM3_Init+0xf0>)
 800211a:	22a7      	movs	r2, #167	; 0xa7
 800211c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <MX_TIM3_Init+0xf0>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002124:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <MX_TIM3_Init+0xf0>)
 8002126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <MX_TIM3_Init+0xf0>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <MX_TIM3_Init+0xf0>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002138:	4827      	ldr	r0, [pc, #156]	; (80021d8 <MX_TIM3_Init+0xf0>)
 800213a:	f005 fef9 	bl	8007f30 <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002144:	f7ff fc8e 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800214e:	f107 0318 	add.w	r3, r7, #24
 8002152:	4619      	mov	r1, r3
 8002154:	4820      	ldr	r0, [pc, #128]	; (80021d8 <MX_TIM3_Init+0xf0>)
 8002156:	f006 fcb5 	bl	8008ac4 <HAL_TIM_ConfigClockSource>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002160:	f7ff fc80 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002164:	481c      	ldr	r0, [pc, #112]	; (80021d8 <MX_TIM3_Init+0xf0>)
 8002166:	f006 f8c5 	bl	80082f4 <HAL_TIM_IC_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002170:	f7ff fc78 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	4619      	mov	r1, r3
 8002182:	4815      	ldr	r0, [pc, #84]	; (80021d8 <MX_TIM3_Init+0xf0>)
 8002184:	f007 f9be 	bl	8009504 <HAL_TIMEx_MasterConfigSynchronization>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800218e:	f7ff fc69 	bl	8001a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002196:	2301      	movs	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021a2:	463b      	mov	r3, r7
 80021a4:	2200      	movs	r2, #0
 80021a6:	4619      	mov	r1, r3
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <MX_TIM3_Init+0xf0>)
 80021aa:	f006 fb2d 	bl	8008808 <HAL_TIM_IC_ConfigChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80021b4:	f7ff fc56 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	2204      	movs	r2, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <MX_TIM3_Init+0xf0>)
 80021c0:	f006 fb22 	bl	8008808 <HAL_TIM_IC_ConfigChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80021ca:	f7ff fc4b 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000b314 	.word	0x2000b314
 80021dc:	40000400 	.word	0x40000400

080021e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	; 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2d      	ldr	r2, [pc, #180]	; (80022b4 <HAL_TIM_Base_MspInit+0xd4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800221e:	e044      	b.n	80022aa <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697b      	ldr	r3, [r7, #20]
}
 8002246:	e030      	b.n	80022aa <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_TIM_Base_MspInit+0xdc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d12b      	bne.n	80022aa <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_TIM_Base_MspInit+0xd8>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN1_SPD_Pin|FAN2_SPD_Pin;
 800228a:	2330      	movs	r3, #48	; 0x30
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800229a:	2302      	movs	r3, #2
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4806      	ldr	r0, [pc, #24]	; (80022c0 <HAL_TIM_Base_MspInit+0xe0>)
 80022a6:	f003 ff1d 	bl	80060e4 <HAL_GPIO_Init>
}
 80022aa:	bf00      	nop
 80022ac:	3730      	adds	r7, #48	; 0x30
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40020400 	.word	0x40020400

080022c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a24      	ldr	r2, [pc, #144]	; (8002374 <HAL_TIM_MspPostInit+0xb0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d11f      	bne.n	8002326 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_TIM_MspPostInit+0xb4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a22      	ldr	r2, [pc, #136]	; (8002378 <HAL_TIM_MspPostInit+0xb4>)
 80022f0:	f043 0310 	orr.w	r3, r3, #16
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_TIM_MspPostInit+0xb4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_PWM_Pin|FAN2_PWM_Pin;
 8002302:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002314:	2301      	movs	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	4817      	ldr	r0, [pc, #92]	; (800237c <HAL_TIM_MspPostInit+0xb8>)
 8002320:	f003 fee0 	bl	80060e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002324:	e022      	b.n	800236c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232e:	d11d      	bne.n	800236c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_TIM_MspPostInit+0xb4>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <HAL_TIM_MspPostInit+0xb4>)
 800233a:	f043 0302 	orr.w	r3, r3, #2
 800233e:	6313      	str	r3, [r2, #48]	; 0x30
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_TIM_MspPostInit+0xb4>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VAL_PWM_Pin;
 800234c:	2308      	movs	r3, #8
 800234e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800235c:	2301      	movs	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VAL_PWM_GPIO_Port, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	4806      	ldr	r0, [pc, #24]	; (8002380 <HAL_TIM_MspPostInit+0xbc>)
 8002368:	f003 febc 	bl	80060e4 <HAL_GPIO_Init>
}
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40010000 	.word	0x40010000
 8002378:	40023800 	.word	0x40023800
 800237c:	40021000 	.word	0x40021000
 8002380:	40020400 	.word	0x40020400

08002384 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <MX_USART1_UART_Init+0x50>)
 800238c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 8002390:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023aa:	220c      	movs	r2, #12
 80023ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_USART1_UART_Init+0x4c>)
 80023bc:	f007 f984 	bl	80096c8 <HAL_UART_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023c6:	f7ff fb4d 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000b730 	.word	0x2000b730
 80023d4:	40011000 	.word	0x40011000

080023d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_USART2_UART_Init+0x4c>)
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <MX_USART2_UART_Init+0x50>)
 80023e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <MX_USART2_UART_Init+0x4c>)
 80023e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_USART2_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_USART2_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_USART2_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_USART2_UART_Init+0x4c>)
 80023fe:	220c      	movs	r2, #12
 8002400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_USART2_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_USART2_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_USART2_UART_Init+0x4c>)
 8002410:	f007 f95a 	bl	80096c8 <HAL_UART_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800241a:	f7ff fb23 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000b7b8 	.word	0x2000b7b8
 8002428:	40004400 	.word	0x40004400

0800242c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <MX_USART3_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <MX_USART3_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <MX_USART3_UART_Init+0x4c>)
 8002438:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800243c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_USART3_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <MX_USART3_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <MX_USART3_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <MX_USART3_UART_Init+0x4c>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <MX_USART3_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MX_USART3_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_USART3_UART_Init+0x4c>)
 8002464:	f007 f930 	bl	80096c8 <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f7ff faf9 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000b50c 	.word	0x2000b50c
 800247c:	40004800 	.word	0x40004800

08002480 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <MX_USART6_UART_Init+0x50>)
 8002488:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 800248c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002490:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024a6:	220c      	movs	r2, #12
 80024a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_USART6_UART_Init+0x4c>)
 80024b8:	f007 f906 	bl	80096c8 <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024c2:	f7ff facf 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000b774 	.word	0x2000b774
 80024d0:	40011400 	.word	0x40011400

080024d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b090      	sub	sp, #64	; 0x40
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a97      	ldr	r2, [pc, #604]	; (8002750 <HAL_UART_MspInit+0x27c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	f040 8093 	bne.w	800261e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f8:	2300      	movs	r3, #0
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fc:	4b95      	ldr	r3, [pc, #596]	; (8002754 <HAL_UART_MspInit+0x280>)
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	4a94      	ldr	r2, [pc, #592]	; (8002754 <HAL_UART_MspInit+0x280>)
 8002502:	f043 0310 	orr.w	r3, r3, #16
 8002506:	6453      	str	r3, [r2, #68]	; 0x44
 8002508:	4b92      	ldr	r3, [pc, #584]	; (8002754 <HAL_UART_MspInit+0x280>)
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
 8002518:	4b8e      	ldr	r3, [pc, #568]	; (8002754 <HAL_UART_MspInit+0x280>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a8d      	ldr	r2, [pc, #564]	; (8002754 <HAL_UART_MspInit+0x280>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b8b      	ldr	r3, [pc, #556]	; (8002754 <HAL_UART_MspInit+0x280>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002530:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002542:	2307      	movs	r3, #7
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	4882      	ldr	r0, [pc, #520]	; (8002758 <HAL_UART_MspInit+0x284>)
 800254e:	f003 fdc9 	bl	80060e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002552:	4b82      	ldr	r3, [pc, #520]	; (800275c <HAL_UART_MspInit+0x288>)
 8002554:	4a82      	ldr	r2, [pc, #520]	; (8002760 <HAL_UART_MspInit+0x28c>)
 8002556:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002558:	4b80      	ldr	r3, [pc, #512]	; (800275c <HAL_UART_MspInit+0x288>)
 800255a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800255e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002560:	4b7e      	ldr	r3, [pc, #504]	; (800275c <HAL_UART_MspInit+0x288>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002566:	4b7d      	ldr	r3, [pc, #500]	; (800275c <HAL_UART_MspInit+0x288>)
 8002568:	2200      	movs	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800256c:	4b7b      	ldr	r3, [pc, #492]	; (800275c <HAL_UART_MspInit+0x288>)
 800256e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002572:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002574:	4b79      	ldr	r3, [pc, #484]	; (800275c <HAL_UART_MspInit+0x288>)
 8002576:	2200      	movs	r2, #0
 8002578:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800257a:	4b78      	ldr	r3, [pc, #480]	; (800275c <HAL_UART_MspInit+0x288>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002580:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_UART_MspInit+0x288>)
 8002582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002586:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002588:	4b74      	ldr	r3, [pc, #464]	; (800275c <HAL_UART_MspInit+0x288>)
 800258a:	2200      	movs	r2, #0
 800258c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800258e:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_UART_MspInit+0x288>)
 8002590:	2200      	movs	r2, #0
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002594:	4871      	ldr	r0, [pc, #452]	; (800275c <HAL_UART_MspInit+0x288>)
 8002596:	f001 fffd 	bl	8004594 <HAL_DMA_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80025a0:	f7ff fa60 	bl	8001a64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a6d      	ldr	r2, [pc, #436]	; (800275c <HAL_UART_MspInit+0x288>)
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
 80025aa:	4a6c      	ldr	r2, [pc, #432]	; (800275c <HAL_UART_MspInit+0x288>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80025b0:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025b2:	4a6d      	ldr	r2, [pc, #436]	; (8002768 <HAL_UART_MspInit+0x294>)
 80025b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80025b6:	4b6b      	ldr	r3, [pc, #428]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025be:	4b69      	ldr	r3, [pc, #420]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c4:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ca:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d2:	4b64      	ldr	r3, [pc, #400]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d8:	4b62      	ldr	r3, [pc, #392]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025de:	4b61      	ldr	r3, [pc, #388]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025e4:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ea:	4b5e      	ldr	r3, [pc, #376]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025f0:	485c      	ldr	r0, [pc, #368]	; (8002764 <HAL_UART_MspInit+0x290>)
 80025f2:	f001 ffcf 	bl	8004594 <HAL_DMA_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80025fc:	f7ff fa32 	bl	8001a64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_UART_MspInit+0x290>)
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
 8002606:	4a57      	ldr	r2, [pc, #348]	; (8002764 <HAL_UART_MspInit+0x290>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2105      	movs	r1, #5
 8002610:	2025      	movs	r0, #37	; 0x25
 8002612:	f001 ff95 	bl	8004540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002616:	2025      	movs	r0, #37	; 0x25
 8002618:	f001 ffae 	bl	8004578 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800261c:	e1e2      	b.n	80029e4 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a52      	ldr	r2, [pc, #328]	; (800276c <HAL_UART_MspInit+0x298>)
 8002624:	4293      	cmp	r3, r2
 8002626:	f040 80ad 	bne.w	8002784 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_UART_MspInit+0x280>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a48      	ldr	r2, [pc, #288]	; (8002754 <HAL_UART_MspInit+0x280>)
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_UART_MspInit+0x280>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <HAL_UART_MspInit+0x280>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a41      	ldr	r2, [pc, #260]	; (8002754 <HAL_UART_MspInit+0x280>)
 8002650:	f043 0308 	orr.w	r3, r3, #8
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_UART_MspInit+0x280>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002662:	2360      	movs	r3, #96	; 0x60
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002672:	2307      	movs	r3, #7
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267a:	4619      	mov	r1, r3
 800267c:	483c      	ldr	r0, [pc, #240]	; (8002770 <HAL_UART_MspInit+0x29c>)
 800267e:	f003 fd31 	bl	80060e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002682:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 8002684:	4a3c      	ldr	r2, [pc, #240]	; (8002778 <HAL_UART_MspInit+0x2a4>)
 8002686:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 800268a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800268e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002690:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 8002698:	2200      	movs	r2, #0
 800269a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 800269e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026b0:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 80026b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b8:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026be:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026c4:	482b      	ldr	r0, [pc, #172]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 80026c6:	f001 ff65 	bl	8004594 <HAL_DMA_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_MspInit+0x200>
      Error_Handler();
 80026d0:	f7ff f9c8 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a27      	ldr	r2, [pc, #156]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
 80026da:	4a26      	ldr	r2, [pc, #152]	; (8002774 <HAL_UART_MspInit+0x2a0>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80026e0:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_UART_MspInit+0x2a8>)
 80026e2:	4a27      	ldr	r2, [pc, #156]	; (8002780 <HAL_UART_MspInit+0x2ac>)
 80026e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80026e6:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_UART_MspInit+0x2a8>)
 80026e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_UART_MspInit+0x2a8>)
 80026f0:	2240      	movs	r2, #64	; 0x40
 80026f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <HAL_UART_MspInit+0x2a8>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_UART_MspInit+0x2a8>)
 80026fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002700:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_UART_MspInit+0x2a8>)
 8002704:	2200      	movs	r2, #0
 8002706:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_UART_MspInit+0x2a8>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_UART_MspInit+0x2a8>)
 8002710:	2200      	movs	r2, #0
 8002712:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_UART_MspInit+0x2a8>)
 8002716:	2200      	movs	r2, #0
 8002718:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <HAL_UART_MspInit+0x2a8>)
 800271c:	2200      	movs	r2, #0
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002720:	4816      	ldr	r0, [pc, #88]	; (800277c <HAL_UART_MspInit+0x2a8>)
 8002722:	f001 ff37 	bl	8004594 <HAL_DMA_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 800272c:	f7ff f99a 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_UART_MspInit+0x2a8>)
 8002734:	635a      	str	r2, [r3, #52]	; 0x34
 8002736:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_UART_MspInit+0x2a8>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2105      	movs	r1, #5
 8002740:	2026      	movs	r0, #38	; 0x26
 8002742:	f001 fefd 	bl	8004540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002746:	2026      	movs	r0, #38	; 0x26
 8002748:	f001 ff16 	bl	8004578 <HAL_NVIC_EnableIRQ>
}
 800274c:	e14a      	b.n	80029e4 <HAL_UART_MspInit+0x510>
 800274e:	bf00      	nop
 8002750:	40011000 	.word	0x40011000
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000
 800275c:	2000b670 	.word	0x2000b670
 8002760:	40026440 	.word	0x40026440
 8002764:	2000b5b0 	.word	0x2000b5b0
 8002768:	400264b8 	.word	0x400264b8
 800276c:	40004400 	.word	0x40004400
 8002770:	40020c00 	.word	0x40020c00
 8002774:	2000b3ec 	.word	0x2000b3ec
 8002778:	40026088 	.word	0x40026088
 800277c:	2000b6d0 	.word	0x2000b6d0
 8002780:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a98      	ldr	r2, [pc, #608]	; (80029ec <HAL_UART_MspInit+0x518>)
 800278a:	4293      	cmp	r3, r2
 800278c:	f040 8093 	bne.w	80028b6 <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	4b96      	ldr	r3, [pc, #600]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a95      	ldr	r2, [pc, #596]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 800279a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
 80027a0:	4b93      	ldr	r3, [pc, #588]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	4b8f      	ldr	r3, [pc, #572]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	4a8e      	ldr	r2, [pc, #568]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80027b6:	f043 0308 	orr.w	r3, r3, #8
 80027ba:	6313      	str	r3, [r2, #48]	; 0x30
 80027bc:	4b8c      	ldr	r3, [pc, #560]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027da:	2307      	movs	r3, #7
 80027dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e2:	4619      	mov	r1, r3
 80027e4:	4883      	ldr	r0, [pc, #524]	; (80029f4 <HAL_UART_MspInit+0x520>)
 80027e6:	f003 fc7d 	bl	80060e4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80027ea:	4b83      	ldr	r3, [pc, #524]	; (80029f8 <HAL_UART_MspInit+0x524>)
 80027ec:	4a83      	ldr	r2, [pc, #524]	; (80029fc <HAL_UART_MspInit+0x528>)
 80027ee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80027f0:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_UART_MspInit+0x524>)
 80027f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f8:	4b7f      	ldr	r3, [pc, #508]	; (80029f8 <HAL_UART_MspInit+0x524>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fe:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <HAL_UART_MspInit+0x524>)
 8002800:	2200      	movs	r2, #0
 8002802:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002804:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_UART_MspInit+0x524>)
 8002806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280c:	4b7a      	ldr	r3, [pc, #488]	; (80029f8 <HAL_UART_MspInit+0x524>)
 800280e:	2200      	movs	r2, #0
 8002810:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002812:	4b79      	ldr	r3, [pc, #484]	; (80029f8 <HAL_UART_MspInit+0x524>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002818:	4b77      	ldr	r3, [pc, #476]	; (80029f8 <HAL_UART_MspInit+0x524>)
 800281a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800281e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002820:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <HAL_UART_MspInit+0x524>)
 8002822:	2200      	movs	r2, #0
 8002824:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002826:	4b74      	ldr	r3, [pc, #464]	; (80029f8 <HAL_UART_MspInit+0x524>)
 8002828:	2200      	movs	r2, #0
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800282c:	4872      	ldr	r0, [pc, #456]	; (80029f8 <HAL_UART_MspInit+0x524>)
 800282e:	f001 feb1 	bl	8004594 <HAL_DMA_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_UART_MspInit+0x368>
      Error_Handler();
 8002838:	f7ff f914 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a6e      	ldr	r2, [pc, #440]	; (80029f8 <HAL_UART_MspInit+0x524>)
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
 8002842:	4a6d      	ldr	r2, [pc, #436]	; (80029f8 <HAL_UART_MspInit+0x524>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002848:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 800284a:	4a6e      	ldr	r2, [pc, #440]	; (8002a04 <HAL_UART_MspInit+0x530>)
 800284c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800284e:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 8002850:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002854:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002856:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800285c:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002862:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 8002864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002868:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286a:	4b65      	ldr	r3, [pc, #404]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 800286c:	2200      	movs	r2, #0
 800286e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002870:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 8002872:	2200      	movs	r2, #0
 8002874:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002876:	4b62      	ldr	r3, [pc, #392]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 8002878:	2200      	movs	r2, #0
 800287a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800287c:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 8002884:	2200      	movs	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002888:	485d      	ldr	r0, [pc, #372]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 800288a:	f001 fe83 	bl	8004594 <HAL_DMA_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8002894:	f7ff f8e6 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a59      	ldr	r2, [pc, #356]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
 800289e:	4a58      	ldr	r2, [pc, #352]	; (8002a00 <HAL_UART_MspInit+0x52c>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2105      	movs	r1, #5
 80028a8:	2027      	movs	r0, #39	; 0x27
 80028aa:	f001 fe49 	bl	8004540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028ae:	2027      	movs	r0, #39	; 0x27
 80028b0:	f001 fe62 	bl	8004578 <HAL_NVIC_EnableIRQ>
}
 80028b4:	e096      	b.n	80029e4 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART6)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a53      	ldr	r2, [pc, #332]	; (8002a08 <HAL_UART_MspInit+0x534>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	f040 8091 	bne.w	80029e4 <HAL_UART_MspInit+0x510>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a49      	ldr	r2, [pc, #292]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80028cc:	f043 0320 	orr.w	r3, r3, #32
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <HAL_UART_MspInit+0x51c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028fa:	23c0      	movs	r3, #192	; 0xc0
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002906:	2303      	movs	r3, #3
 8002908:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800290a:	2308      	movs	r3, #8
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002912:	4619      	mov	r1, r3
 8002914:	483d      	ldr	r0, [pc, #244]	; (8002a0c <HAL_UART_MspInit+0x538>)
 8002916:	f003 fbe5 	bl	80060e4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 800291c:	4a3d      	ldr	r2, [pc, #244]	; (8002a14 <HAL_UART_MspInit+0x540>)
 800291e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002920:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 8002922:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002926:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 8002936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800293c:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 800293e:	2200      	movs	r2, #0
 8002940:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002942:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 800294a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 8002952:	2200      	movs	r2, #0
 8002954:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002956:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 8002958:	2200      	movs	r2, #0
 800295a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800295c:	482c      	ldr	r0, [pc, #176]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 800295e:	f001 fe19 	bl	8004594 <HAL_DMA_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_UART_MspInit+0x498>
      Error_Handler();
 8002968:	f7ff f87c 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 8002970:	639a      	str	r2, [r3, #56]	; 0x38
 8002972:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <HAL_UART_MspInit+0x53c>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_UART_MspInit+0x544>)
 800297a:	4a28      	ldr	r2, [pc, #160]	; (8002a1c <HAL_UART_MspInit+0x548>)
 800297c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_UART_MspInit+0x544>)
 8002980:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002984:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_UART_MspInit+0x544>)
 8002988:	2240      	movs	r2, #64	; 0x40
 800298a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_UART_MspInit+0x544>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_UART_MspInit+0x544>)
 8002994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002998:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_UART_MspInit+0x544>)
 800299c:	2200      	movs	r2, #0
 800299e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_UART_MspInit+0x544>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_UART_MspInit+0x544>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_UART_MspInit+0x544>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029b2:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_UART_MspInit+0x544>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80029b8:	4817      	ldr	r0, [pc, #92]	; (8002a18 <HAL_UART_MspInit+0x544>)
 80029ba:	f001 fdeb 	bl	8004594 <HAL_DMA_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_UART_MspInit+0x4f4>
      Error_Handler();
 80029c4:	f7ff f84e 	bl	8001a64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <HAL_UART_MspInit+0x544>)
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_UART_MspInit+0x544>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2105      	movs	r1, #5
 80029d8:	2047      	movs	r0, #71	; 0x47
 80029da:	f001 fdb1 	bl	8004540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80029de:	2047      	movs	r0, #71	; 0x47
 80029e0:	f001 fdca 	bl	8004578 <HAL_NVIC_EnableIRQ>
}
 80029e4:	bf00      	nop
 80029e6:	3740      	adds	r7, #64	; 0x40
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40004800 	.word	0x40004800
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40020c00 	.word	0x40020c00
 80029f8:	2000b4ac 	.word	0x2000b4ac
 80029fc:	40026028 	.word	0x40026028
 8002a00:	2000b550 	.word	0x2000b550
 8002a04:	40026058 	.word	0x40026058
 8002a08:	40011400 	.word	0x40011400
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	2000b44c 	.word	0x2000b44c
 8002a14:	40026428 	.word	0x40026428
 8002a18:	2000b610 	.word	0x2000b610
 8002a1c:	400264a0 	.word	0x400264a0

08002a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a24:	480d      	ldr	r0, [pc, #52]	; (8002a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a26:	490e      	ldr	r1, [pc, #56]	; (8002a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a3c:	4c0b      	ldr	r4, [pc, #44]	; (8002a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a4a:	f7ff fa15 	bl	8001e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a4e:	f01a f8e1 	bl	801cc14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a52:	f7fe ff65 	bl	8001920 <main>
  bx  lr    
 8002a56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8002a64:	0802175c 	.word	0x0802175c
  ldr r2, =_sbss
 8002a68:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8002a6c:	20013a4c 	.word	0x20013a4c

08002a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC_IRQHandler>
	...

08002a74 <fnd_com_modbus_rtu_init>:
modbus_regs sys_regs;
modbus_master master[2];
modbus_slave slaves[2];

void fnd_com_modbus_rtu_init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
    master_init(&master[0], &port[0], 1);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	490b      	ldr	r1, [pc, #44]	; (8002aa8 <fnd_com_modbus_rtu_init+0x34>)
 8002a7c:	480b      	ldr	r0, [pc, #44]	; (8002aac <fnd_com_modbus_rtu_init+0x38>)
 8002a7e:	f018 ff51 	bl	801b924 <master_init>
    master_init(&master[1], &port[1], 1);
 8002a82:	2201      	movs	r2, #1
 8002a84:	490a      	ldr	r1, [pc, #40]	; (8002ab0 <fnd_com_modbus_rtu_init+0x3c>)
 8002a86:	480b      	ldr	r0, [pc, #44]	; (8002ab4 <fnd_com_modbus_rtu_init+0x40>)
 8002a88:	f018 ff4c 	bl	801b924 <master_init>

    slave_init(&slaves[0], &port[2], 1, &sys_regs);
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <fnd_com_modbus_rtu_init+0x44>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	490a      	ldr	r1, [pc, #40]	; (8002abc <fnd_com_modbus_rtu_init+0x48>)
 8002a92:	480b      	ldr	r0, [pc, #44]	; (8002ac0 <fnd_com_modbus_rtu_init+0x4c>)
 8002a94:	f019 fefc 	bl	801c890 <slave_init>
    slave_init(&slaves[1], &port[3], 2, &sys_regs);
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <fnd_com_modbus_rtu_init+0x44>)
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4909      	ldr	r1, [pc, #36]	; (8002ac4 <fnd_com_modbus_rtu_init+0x50>)
 8002a9e:	480a      	ldr	r0, [pc, #40]	; (8002ac8 <fnd_com_modbus_rtu_init+0x54>)
 8002aa0:	f019 fef6 	bl	801c890 <slave_init>
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	2000c63c 	.word	0x2000c63c
 8002ab0:	20000010 	.word	0x20000010
 8002ab4:	2000ca60 	.word	0x2000ca60
 8002ab8:	2000c03c 	.word	0x2000c03c
 8002abc:	2000001c 	.word	0x2000001c
 8002ac0:	2000b7fc 	.word	0x2000b7fc
 8002ac4:	20000028 	.word	0x20000028
 8002ac8:	2000bc1c 	.word	0x2000bc1c

08002acc <fnd_com_modbus_rtu_uart_idle_irq>:
void fnd_com_modbus_rtu_uart_idle_irq(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    if (huart == master[0].uart_port->uart)
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d103      	bne.n	8002ae8 <fnd_com_modbus_rtu_uart_idle_irq+0x1c>
    {
        master_uart_idle(&master[0]);
 8002ae0:	4813      	ldr	r0, [pc, #76]	; (8002b30 <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 8002ae2:	f018 ff6c 	bl	801b9be <master_uart_idle>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_uart_idle(&slaves[1]);
    }
}
 8002ae6:	e01e      	b.n	8002b26 <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
    else if (huart == master[1].uart_port->uart)
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 8002aea:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d103      	bne.n	8002afe <fnd_com_modbus_rtu_uart_idle_irq+0x32>
        master_uart_idle(&master[1]);
 8002af6:	480f      	ldr	r0, [pc, #60]	; (8002b34 <fnd_com_modbus_rtu_uart_idle_irq+0x68>)
 8002af8:	f018 ff61 	bl	801b9be <master_uart_idle>
}
 8002afc:	e013      	b.n	8002b26 <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
    else if (huart == slaves[0].uart_port->uart)
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d103      	bne.n	8002b12 <fnd_com_modbus_rtu_uart_idle_irq+0x46>
        slave_uart_idle(&slaves[0]);
 8002b0a:	480b      	ldr	r0, [pc, #44]	; (8002b38 <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 8002b0c:	f019 fef8 	bl	801c900 <slave_uart_idle>
}
 8002b10:	e009      	b.n	8002b26 <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
    else if (huart == slaves[1].uart_port->uart)
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 8002b14:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d102      	bne.n	8002b26 <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
        slave_uart_idle(&slaves[1]);
 8002b20:	4806      	ldr	r0, [pc, #24]	; (8002b3c <fnd_com_modbus_rtu_uart_idle_irq+0x70>)
 8002b22:	f019 feed 	bl	801c900 <slave_uart_idle>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2000c63c 	.word	0x2000c63c
 8002b34:	2000ca60 	.word	0x2000ca60
 8002b38:	2000b7fc 	.word	0x2000b7fc
 8002b3c:	2000bc1c 	.word	0x2000bc1c

08002b40 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
    if (huart == master[0].uart_port->uart)
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_UART_TxCpltCallback+0x68>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d104      	bne.n	8002b5e <HAL_UART_TxCpltCallback+0x1e>
    {
        master_set_tx_rx(&master[0], rx);
 8002b54:	2100      	movs	r1, #0
 8002b56:	4814      	ldr	r0, [pc, #80]	; (8002ba8 <HAL_UART_TxCpltCallback+0x68>)
 8002b58:	f018 ff18 	bl	801b98c <master_set_tx_rx>
 8002b5c:	e00a      	b.n	8002b74 <HAL_UART_TxCpltCallback+0x34>
    }
    else if (huart == master[1].uart_port->uart)
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_UART_TxCpltCallback+0x68>)
 8002b60:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d103      	bne.n	8002b74 <HAL_UART_TxCpltCallback+0x34>
    {
        master_set_tx_rx(&master[1], rx);
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	480f      	ldr	r0, [pc, #60]	; (8002bac <HAL_UART_TxCpltCallback+0x6c>)
 8002b70:	f018 ff0c 	bl	801b98c <master_set_tx_rx>
    }
    if (huart == slaves[0].uart_port->uart)
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_UART_TxCpltCallback+0x70>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d104      	bne.n	8002b8a <HAL_UART_TxCpltCallback+0x4a>
    {
        slave_set_tx_rx(&slaves[0], rx);
 8002b80:	2100      	movs	r1, #0
 8002b82:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <HAL_UART_TxCpltCallback+0x70>)
 8002b84:	f019 fefc 	bl	801c980 <slave_set_tx_rx>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_set_tx_rx(&slaves[1], rx);
    }
}
 8002b88:	e00a      	b.n	8002ba0 <HAL_UART_TxCpltCallback+0x60>
    else if (huart == slaves[1].uart_port->uart)
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_UART_TxCpltCallback+0x70>)
 8002b8c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d103      	bne.n	8002ba0 <HAL_UART_TxCpltCallback+0x60>
        slave_set_tx_rx(&slaves[1], rx);
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <HAL_UART_TxCpltCallback+0x74>)
 8002b9c:	f019 fef0 	bl	801c980 <slave_set_tx_rx>
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000c63c 	.word	0x2000c63c
 8002bac:	2000ca60 	.word	0x2000ca60
 8002bb0:	2000b7fc 	.word	0x2000b7fc
 8002bb4:	2000bc1c 	.word	0x2000bc1c

08002bb8 <fnd_com_modbus_rtu_slave1_wait>:

void fnd_com_modbus_rtu_slave1_wait(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[0]);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <fnd_com_modbus_rtu_slave1_wait+0x10>)
 8002bbe:	f019 fef8 	bl	801c9b2 <slave_wait_request>
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	2000b7fc 	.word	0x2000b7fc

08002bcc <fnd_com_modbus_rtu_slave2_wait>:
void fnd_com_modbus_rtu_slave2_wait(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[1]);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <fnd_com_modbus_rtu_slave2_wait+0x10>)
 8002bd2:	f019 feee 	bl	801c9b2 <slave_wait_request>
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000bc1c 	.word	0x2000bc1c

08002be0 <fnd_com_modbus_rtu_master1_read_write>:

void fnd_com_modbus_rtu_master1_read_write(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
    osDelay(50);
 8002be4:	2032      	movs	r0, #50	; 0x32
 8002be6:	f008 fcec 	bl	800b5c2 <osDelay>
    master_read_holding_regs(&master[0], 10, 4, &sys_regs.inputs[50]);
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <fnd_com_modbus_rtu_master1_read_write+0x2c>)
 8002bec:	2204      	movs	r2, #4
 8002bee:	210a      	movs	r1, #10
 8002bf0:	4807      	ldr	r0, [pc, #28]	; (8002c10 <fnd_com_modbus_rtu_master1_read_write+0x30>)
 8002bf2:	f018 ff77 	bl	801bae4 <master_read_holding_regs>

    osDelay(50);
 8002bf6:	2032      	movs	r0, #50	; 0x32
 8002bf8:	f008 fce3 	bl	800b5c2 <osDelay>
    master_read_holding_regs(&master[0], 20, 4, &sys_regs.inputs[60]);
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <fnd_com_modbus_rtu_master1_read_write+0x34>)
 8002bfe:	2204      	movs	r2, #4
 8002c00:	2114      	movs	r1, #20
 8002c02:	4803      	ldr	r0, [pc, #12]	; (8002c10 <fnd_com_modbus_rtu_master1_read_write+0x30>)
 8002c04:	f018 ff6e 	bl	801bae4 <master_read_holding_regs>
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	2000c2a0 	.word	0x2000c2a0
 8002c10:	2000c63c 	.word	0x2000c63c
 8002c14:	2000c2b4 	.word	0x2000c2b4

08002c18 <calculate_ntc_temperature>:

#define VAL_FB_START_CH 9
#define VAL_FB_END_CH 9

static float calculate_ntc_temperature(double res_value, double res_ref, double b_value)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002c22:	ed87 1b02 	vstr	d1, [r7, #8]
 8002c26:	ed87 2b00 	vstr	d2, [r7]
    return (float)(1 / (((log(res_value / res_ref)) / b_value) + (1 / (273.15 + 25))) - 273.15);
 8002c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c32:	f7fd fe03 	bl	800083c <__aeabi_ddiv>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	ec43 2b17 	vmov	d7, r2, r3
 8002c3e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c42:	eef0 0a67 	vmov.f32	s1, s15
 8002c46:	f01a ffc3 	bl	801dbd0 <log>
 8002c4a:	ec51 0b10 	vmov	r0, r1, d0
 8002c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c52:	f7fd fdf3 	bl	800083c <__aeabi_ddiv>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	a315      	add	r3, pc, #84	; (adr r3, 8002cb4 <calculate_ntc_temperature+0x9c>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f7fd fb0a 	bl	800027c <__adddf3>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	490f      	ldr	r1, [pc, #60]	; (8002cb0 <calculate_ntc_temperature+0x98>)
 8002c72:	f7fd fde3 	bl	800083c <__aeabi_ddiv>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	a30a      	add	r3, pc, #40	; (adr r3, 8002ca8 <calculate_ntc_temperature+0x90>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd faf8 	bl	8000278 <__aeabi_dsub>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7fd ff82 	bl	8000b98 <__aeabi_d2f>
 8002c94:	4603      	mov	r3, r0
 8002c96:	ee07 3a90 	vmov	s15, r3
}
 8002c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	66666666 	.word	0x66666666
 8002cac:	40711266 	.word	0x40711266
 8002cb0:	3ff00000 	.word	0x3ff00000
 8002cb4:	dcb5db83 	.word	0xdcb5db83
 8002cb8:	3f6b79e1 	.word	0x3f6b79e1

08002cbc <fnd_input_init>:

void fnd_input_init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
    fnd_input_adc_init();
 8002cc0:	f000 f9cc 	bl	800305c <fnd_input_adc_init>
    fnd_input_tim_input_capture_init();
 8002cc4:	f000 fb64 	bl	8003390 <fnd_input_tim_input_capture_init>
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	0000      	movs	r0, r0
	...

08002cd0 <fnd_input_update>:

void fnd_input_update(void)
{
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b090      	sub	sp, #64	; 0x40
 8002cd4:	af00      	add	r7, sp, #0
    float adc_values[10];
    fnd_input_adc_read_values(adc_values);
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f9cc 	bl	8003078 <fnd_input_adc_read_values>
    for (uint8_t i = 0; i < (DP_END_CH - DP_START_CH + 1); i++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002ce6:	e02c      	b.n	8002d42 <fnd_input_update+0x72>
    {
        sys_regs.inputs[INPUT_DP_START + i] = adc_values[DP_START_CH + i] / 4095.0 * 3300;
 8002ce8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b34      	subs	r3, #52	; 0x34
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc1d 	bl	8000538 <__aeabi_f2d>
 8002cfe:	a37f      	add	r3, pc, #508	; (adr r3, 8002efc <fnd_input_update+0x22c>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fd9a 	bl	800083c <__aeabi_ddiv>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	a37c      	add	r3, pc, #496	; (adr r3, 8002f04 <fnd_input_update+0x234>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f7fd fc67 	bl	80005e8 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7fd ff0f 	bl	8000b48 <__aeabi_d2iz>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	b219      	sxth	r1, r3
 8002d2e:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <fnd_input_update+0x228>)
 8002d30:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8002d34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (DP_END_CH - DP_START_CH + 1); i++)
 8002d38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002d42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d9ce      	bls.n	8002ce8 <fnd_input_update+0x18>
    }
    for (uint8_t i = 0; i < (NTC_END_CH - NTC_START_CH + 1); i++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002d50:	e055      	b.n	8002dfe <fnd_input_update+0x12e>
    {
        float ntc_resister_value = (float)10.0 * adc_values[NTC_START_CH + i] / (4095.1 - adc_values[NTC_START_CH + i]);
 8002d52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002d56:	3303      	adds	r3, #3
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b34      	subs	r3, #52	; 0x34
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6e:	ee17 0a90 	vmov	r0, s15
 8002d72:	f7fd fbe1 	bl	8000538 <__aeabi_f2d>
 8002d76:	4604      	mov	r4, r0
 8002d78:	460d      	mov	r5, r1
 8002d7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002d7e:	3303      	adds	r3, #3
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d86:	4413      	add	r3, r2
 8002d88:	3b34      	subs	r3, #52	; 0x34
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fbd3 	bl	8000538 <__aeabi_f2d>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	a152      	add	r1, pc, #328	; (adr r1, 8002ee0 <fnd_input_update+0x210>)
 8002d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d9c:	f7fd fa6c 	bl	8000278 <__aeabi_dsub>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4620      	mov	r0, r4
 8002da6:	4629      	mov	r1, r5
 8002da8:	f7fd fd48 	bl	800083c <__aeabi_ddiv>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	f7fd fef0 	bl	8000b98 <__aeabi_d2f>
 8002db8:	4603      	mov	r3, r0
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
        sys_regs.inputs[INPUT_NTC_START + i] = calculate_ntc_temperature(ntc_resister_value, 5.0, 3470);
 8002dbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dbe:	f7fd fbbb 	bl	8000538 <__aeabi_f2d>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	ed9f 2b48 	vldr	d2, [pc, #288]	; 8002ee8 <fnd_input_update+0x218>
 8002dca:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8002ef0 <fnd_input_update+0x220>
 8002dce:	ec43 2b10 	vmov	d0, r2, r3
 8002dd2:	f7ff ff21 	bl	8002c18 <calculate_ntc_temperature>
 8002dd6:	eef0 7a40 	vmov.f32	s15, s0
 8002dda:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002dde:	3303      	adds	r3, #3
 8002de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de4:	ee17 2a90 	vmov	r2, s15
 8002de8:	b211      	sxth	r1, r2
 8002dea:	4a43      	ldr	r2, [pc, #268]	; (8002ef8 <fnd_input_update+0x228>)
 8002dec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002df0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (NTC_END_CH - NTC_START_CH + 1); i++)
 8002df4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002dfe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d9a5      	bls.n	8002d52 <fnd_input_update+0x82>
    }
    for (uint8_t i = 0; i < (VAL_FB_END_CH - VAL_FB_START_CH + 1); i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002e0c:	e01b      	b.n	8002e46 <fnd_input_update+0x176>
    {
        sys_regs.inputs[INPUT_VAL_FB_START + i] = adc_values[VAL_FB_START_CH + i];
 8002e0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002e12:	3309      	adds	r3, #9
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b34      	subs	r3, #52	; 0x34
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002e26:	3309      	adds	r3, #9
 8002e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e2c:	ee17 2a90 	vmov	r2, s15
 8002e30:	b211      	sxth	r1, r2
 8002e32:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <fnd_input_update+0x228>)
 8002e34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (VAL_FB_END_CH - VAL_FB_START_CH + 1); i++)
 8002e3c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002e40:	3301      	adds	r3, #1
 8002e42:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002e46:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0df      	beq.n	8002e0e <fnd_input_update+0x13e>
    }

    uint8_t di_values[4];
    fnd_input_gpio_read_di(di_values);
 8002e4e:	f107 0308 	add.w	r3, r7, #8
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f92e 	bl	80030b4 <fnd_input_gpio_read_di>
    for (uint8_t i = 0; i < 4; i++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002e5e:	e014      	b.n	8002e8a <fnd_input_update+0x1ba>
    {
        sys_regs.inputs[INPUT_DI_START + i] = di_values[i];
 8002e60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002e64:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002e68:	4413      	add	r3, r2
 8002e6a:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8002e6e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002e72:	330a      	adds	r3, #10
 8002e74:	b211      	sxth	r1, r2
 8002e76:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <fnd_input_update+0x228>)
 8002e78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 4; i++)
 8002e80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002e84:	3301      	adds	r3, #1
 8002e86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002e8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d9e6      	bls.n	8002e60 <fnd_input_update+0x190>
    }

    uint8_t id_values[8];
    fnd_input_gpio_read_id(id_values);
 8002e92:	463b      	mov	r3, r7
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f93b 	bl	8003110 <fnd_input_gpio_read_id>
    for (uint8_t i = 0; i < 8; i++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002ea0:	e014      	b.n	8002ecc <fnd_input_update+0x1fc>
    {
        sys_regs.inputs[INPUT_ID_START + i] = id_values[i];
 8002ea2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002ea6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002eaa:	4413      	add	r3, r2
 8002eac:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8002eb0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002eb4:	330e      	adds	r3, #14
 8002eb6:	b211      	sxth	r1, r2
 8002eb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ef8 <fnd_input_update+0x228>)
 8002eba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ebe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 8; i++)
 8002ec2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002ecc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002ed0:	2b07      	cmp	r3, #7
 8002ed2:	d9e6      	bls.n	8002ea2 <fnd_input_update+0x1d2>
    }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3740      	adds	r7, #64	; 0x40
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	33333333 	.word	0x33333333
 8002ee4:	40affe33 	.word	0x40affe33
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	40ab1c00 	.word	0x40ab1c00
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	40140000 	.word	0x40140000
 8002ef8:	2000c03c 	.word	0x2000c03c
 8002efc:	00000000 	.word	0x00000000
 8002f00:	40affe00 	.word	0x40affe00
 8002f04:	00000000 	.word	0x00000000
 8002f08:	40a9c800 	.word	0x40a9c800

08002f0c <fnd_input_i2c_read_sht>:

void fnd_input_i2c_read_sht(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
    float sht1_values[2] = {0};
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
    float sht2_values[2] = {0};
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef status = fnd_input_i2c_read_sht_temp_humi(0, sht1_values);
 8002f24:	f107 030c 	add.w	r3, r7, #12
 8002f28:	4619      	mov	r1, r3
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f000 f98e 	bl	800324c <fnd_input_i2c_read_sht_temp_humi>
 8002f30:	4603      	mov	r3, r0
 8002f32:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < 2; i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	75fb      	strb	r3, [r7, #23]
 8002f38:	e020      	b.n	8002f7c <fnd_input_i2c_read_sht+0x70>
    {
        sys_regs.inputs[INPUT_SHT1_START + i] = (status == HAL_OK) ? (int16_t)(sht1_values[i] * 10) : (-1);
 8002f3a:	7d7b      	ldrb	r3, [r7, #21]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <fnd_input_i2c_read_sht+0x58>
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f107 0218 	add.w	r2, r7, #24
 8002f48:	4413      	add	r3, r2
 8002f4a:	3b0c      	subs	r3, #12
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f5c:	ee17 3a90 	vmov	r3, s15
 8002f60:	b21a      	sxth	r2, r3
 8002f62:	e001      	b.n	8002f68 <fnd_input_i2c_read_sht+0x5c>
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	3316      	adds	r3, #22
 8002f6c:	491e      	ldr	r1, [pc, #120]	; (8002fe8 <fnd_input_i2c_read_sht+0xdc>)
 8002f6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f72:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++)
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d9db      	bls.n	8002f3a <fnd_input_i2c_read_sht+0x2e>
    }
    status = fnd_input_i2c_read_sht_temp_humi(1, sht2_values);
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	2001      	movs	r0, #1
 8002f88:	f000 f960 	bl	800324c <fnd_input_i2c_read_sht_temp_humi>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < 2; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	75bb      	strb	r3, [r7, #22]
 8002f94:	e020      	b.n	8002fd8 <fnd_input_i2c_read_sht+0xcc>
    {
        sys_regs.inputs[INPUT_SHT2_START + i] = (status == HAL_OK) ? (int16_t)(sht2_values[i] * 10) : (-1);
 8002f96:	7d7b      	ldrb	r3, [r7, #21]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d111      	bne.n	8002fc0 <fnd_input_i2c_read_sht+0xb4>
 8002f9c:	7dbb      	ldrb	r3, [r7, #22]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f107 0218 	add.w	r2, r7, #24
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b14      	subs	r3, #20
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fb8:	ee17 3a90 	vmov	r3, s15
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	e001      	b.n	8002fc4 <fnd_input_i2c_read_sht+0xb8>
 8002fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc4:	7dbb      	ldrb	r3, [r7, #22]
 8002fc6:	3318      	adds	r3, #24
 8002fc8:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <fnd_input_i2c_read_sht+0xdc>)
 8002fca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++)
 8002fd2:	7dbb      	ldrb	r3, [r7, #22]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	75bb      	strb	r3, [r7, #22]
 8002fd8:	7dbb      	ldrb	r3, [r7, #22]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d9db      	bls.n	8002f96 <fnd_input_i2c_read_sht+0x8a>
    }
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	2000c03c 	.word	0x2000c03c

08002fec <get_channel_average>:
#define DATA_PER_CH 10

uint32_t fnd_adc_data[ADC_TOTAL_CH * DATA_PER_CH];

static float get_channel_average(uint8_t ch_idx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
    float sum = 0;
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	72fb      	strb	r3, [r7, #11]
 8003000:	e017      	b.n	8003032 <get_channel_average+0x46>
    {
        sum = sum + fnd_adc_data[ch_idx + i * ADC_TOTAL_CH];
 8003002:	79f9      	ldrb	r1, [r7, #7]
 8003004:	7afa      	ldrb	r2, [r7, #11]
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	440b      	add	r3, r1
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <get_channel_average+0x6c>)
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003020:	ed97 7a03 	vldr	s14, [r7, #12]
 8003024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003028:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 800302c:	7afb      	ldrb	r3, [r7, #11]
 800302e:	3301      	adds	r3, #1
 8003030:	72fb      	strb	r3, [r7, #11]
 8003032:	7afb      	ldrb	r3, [r7, #11]
 8003034:	2b09      	cmp	r3, #9
 8003036:	d9e4      	bls.n	8003002 <get_channel_average+0x16>
    }
    return sum / DATA_PER_CH;
 8003038:	edd7 7a03 	vldr	s15, [r7, #12]
 800303c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003040:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003044:	eef0 7a66 	vmov.f32	s15, s13
}
 8003048:	eeb0 0a67 	vmov.f32	s0, s15
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	2000ce84 	.word	0x2000ce84

0800305c <fnd_input_adc_init>:

void fnd_input_adc_init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, fnd_adc_data, ADC_TOTAL_CH * DATA_PER_CH);
 8003060:	2282      	movs	r2, #130	; 0x82
 8003062:	4903      	ldr	r1, [pc, #12]	; (8003070 <fnd_input_adc_init+0x14>)
 8003064:	4803      	ldr	r0, [pc, #12]	; (8003074 <fnd_input_adc_init+0x18>)
 8003066:	f000 fde5 	bl	8003c34 <HAL_ADC_Start_DMA>
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000ce84 	.word	0x2000ce84
 8003074:	2000b0f8 	.word	0x2000b0f8

08003078 <fnd_input_adc_read_values>:

void fnd_input_adc_read_values(float *values)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 10; i++)
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e00e      	b.n	80030a4 <fnd_input_adc_read_values+0x2c>
    {
        values[i] = get_channel_average(i);
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	18d4      	adds	r4, r2, r3
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ffab 	bl	8002fec <get_channel_average>
 8003096:	eef0 7a40 	vmov.f32	s15, s0
 800309a:	edc4 7a00 	vstr	s15, [r4]
    for (uint8_t i = 0; i < 10; i++)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	3301      	adds	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b09      	cmp	r3, #9
 80030a8:	d9ed      	bls.n	8003086 <fnd_input_adc_read_values+0xe>
    }
}
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd90      	pop	{r4, r7, pc}

080030b4 <fnd_input_gpio_read_di>:

GPIO_TypeDef *gpio_input_port[4] = {DI_01_GPIO_Port, DI_02_GPIO_Port, DI_03_GPIO_Port, DI_04_GPIO_Port};
uint16_t gpio_input_pin[4] = {DI_01_Pin, DI_02_Pin, DI_03_Pin, DI_04_Pin};

void fnd_input_gpio_read_di(uint8_t *values)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e019      	b.n	80030f6 <fnd_input_gpio_read_di+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_input_port[i], gpio_input_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	4a10      	ldr	r2, [pc, #64]	; (8003108 <fnd_input_gpio_read_di+0x54>)
 80030c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	490f      	ldr	r1, [pc, #60]	; (800310c <fnd_input_gpio_read_di+0x58>)
 80030ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f003 f9a1 	bl	800641c <HAL_GPIO_ReadPin>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b01      	cmp	r3, #1
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2d9      	uxtb	r1, r3
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	460a      	mov	r2, r1
 80030ee:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	3301      	adds	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d9e2      	bls.n	80030c2 <fnd_input_gpio_read_di+0xe>
    }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000034 	.word	0x20000034
 800310c:	20000044 	.word	0x20000044

08003110 <fnd_input_gpio_read_id>:

void fnd_input_gpio_read_id(uint8_t *values)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ID_LD_GPIO_Port, ID_LD_Pin, GPIO_PIN_RESET);
 8003118:	2200      	movs	r2, #0
 800311a:	2120      	movs	r1, #32
 800311c:	4821      	ldr	r0, [pc, #132]	; (80031a4 <fnd_input_gpio_read_id+0x94>)
 800311e:	f003 f995 	bl	800644c <HAL_GPIO_WritePin>
    osDelay(1);
 8003122:	2001      	movs	r0, #1
 8003124:	f008 fa4d 	bl	800b5c2 <osDelay>
    HAL_GPIO_WritePin(ID_LD_GPIO_Port, ID_LD_Pin, GPIO_PIN_SET);
 8003128:	2201      	movs	r2, #1
 800312a:	2120      	movs	r1, #32
 800312c:	481d      	ldr	r0, [pc, #116]	; (80031a4 <fnd_input_gpio_read_id+0x94>)
 800312e:	f003 f98d 	bl	800644c <HAL_GPIO_WritePin>
    values[7] = HAL_GPIO_ReadPin(ID_DATA_GPIO_Port, ID_DATA_Pin) == GPIO_PIN_SET ? 1 : 0;
 8003132:	2110      	movs	r1, #16
 8003134:	481b      	ldr	r0, [pc, #108]	; (80031a4 <fnd_input_gpio_read_id+0x94>)
 8003136:	f003 f971 	bl	800641c <HAL_GPIO_ReadPin>
 800313a:	4603      	mov	r3, r0
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2da      	uxtb	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3307      	adds	r3, #7
 800314a:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 7; i++)
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	e020      	b.n	8003194 <fnd_input_gpio_read_id+0x84>
    {
        HAL_GPIO_WritePin(ID_CLK_GPIO_Port, ID_CLK_Pin, GPIO_PIN_RESET);
 8003152:	2200      	movs	r2, #0
 8003154:	2140      	movs	r1, #64	; 0x40
 8003156:	4813      	ldr	r0, [pc, #76]	; (80031a4 <fnd_input_gpio_read_id+0x94>)
 8003158:	f003 f978 	bl	800644c <HAL_GPIO_WritePin>
        osDelay(1);
 800315c:	2001      	movs	r0, #1
 800315e:	f008 fa30 	bl	800b5c2 <osDelay>
        HAL_GPIO_WritePin(ID_CLK_GPIO_Port, ID_CLK_Pin, GPIO_PIN_SET);
 8003162:	2201      	movs	r2, #1
 8003164:	2140      	movs	r1, #64	; 0x40
 8003166:	480f      	ldr	r0, [pc, #60]	; (80031a4 <fnd_input_gpio_read_id+0x94>)
 8003168:	f003 f970 	bl	800644c <HAL_GPIO_WritePin>
        values[6 - i] = HAL_GPIO_ReadPin(ID_DATA_GPIO_Port, ID_DATA_Pin) == GPIO_PIN_SET ? 1 : 0;
 800316c:	2110      	movs	r1, #16
 800316e:	480d      	ldr	r0, [pc, #52]	; (80031a4 <fnd_input_gpio_read_id+0x94>)
 8003170:	f003 f954 	bl	800641c <HAL_GPIO_ReadPin>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2da      	uxtb	r2, r3
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	f1c3 0306 	rsb	r3, r3, #6
 8003186:	4619      	mov	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	440b      	add	r3, r1
 800318c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 7; i++)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	3301      	adds	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b06      	cmp	r3, #6
 8003198:	d9db      	bls.n	8003152 <fnd_input_gpio_read_id+0x42>
    }
 800319a:	bf00      	nop
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000

080031a8 <sht_write_cmd>:
#define I2C_TIMEOUT 100

I2C_HandleTypeDef *sht_i2c[2] = {&hi2c1, &hi2c3};

static HAL_StatusTypeDef sht_write_cmd(I2C_HandleTypeDef *hi2c, uint16_t cmd)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
    uint8_t buff[2] = {cmd >> 8, cmd};
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	733b      	strb	r3, [r7, #12]
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(hi2c, SHT_ADDR, buff, 2, I2C_TIMEOUT);
 80031c4:	f107 020c 	add.w	r2, r7, #12
 80031c8:	2364      	movs	r3, #100	; 0x64
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2302      	movs	r3, #2
 80031ce:	2188      	movs	r1, #136	; 0x88
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f003 fab3 	bl	800673c <HAL_I2C_Master_Transmit>
 80031d6:	4603      	mov	r3, r0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <calculate_crc>:

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xff;
 80031ea:	23ff      	movs	r3, #255	; 0xff
 80031ec:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < length; i++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e020      	b.n	8003236 <calculate_crc+0x56>
    {
        crc ^= data[i];
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	4053      	eors	r3, r2
 8003200:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e010      	b.n	800322a <calculate_crc+0x4a>
        {
            if ((crc & 0x80u) != 0)
 8003208:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800320c:	2b00      	cmp	r3, #0
 800320e:	da06      	bge.n	800321e <calculate_crc+0x3e>
            {
                crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800321a:	75fb      	strb	r3, [r7, #23]
 800321c:	e002      	b.n	8003224 <calculate_crc+0x44>
            }
            else
            {
                crc <<= 1u;
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3301      	adds	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b07      	cmp	r3, #7
 800322e:	d9eb      	bls.n	8003208 <calculate_crc+0x28>
    for (size_t i = 0; i < length; i++)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	3301      	adds	r3, #1
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d3da      	bcc.n	80031f4 <calculate_crc+0x14>
            }
        }
    }
    return crc;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <fnd_input_i2c_read_sht_temp_humi>:

HAL_StatusTypeDef fnd_input_i2c_read_sht_temp_humi(uint8_t idx, float *values)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af02      	add	r7, sp, #8
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
    uint8_t buff[6] = {0};
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	2300      	movs	r3, #0
 800325e:	823b      	strh	r3, [r7, #16]

    if (HAL_I2C_IsDeviceReady(sht_i2c[idx], SHT_ADDR, 10, I2C_TIMEOUT) != HAL_OK)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	4a46      	ldr	r2, [pc, #280]	; (800337c <fnd_input_i2c_read_sht_temp_humi+0x130>)
 8003264:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003268:	2364      	movs	r3, #100	; 0x64
 800326a:	220a      	movs	r2, #10
 800326c:	2188      	movs	r1, #136	; 0x88
 800326e:	f003 fd89 	bl	8006d84 <HAL_I2C_IsDeviceReady>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <fnd_input_i2c_read_sht_temp_humi+0x46>
    {
        if (idx == 0)
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <fnd_input_i2c_read_sht_temp_humi+0x38>
        {
            MX_I2C1_Init();
 800327e:	f7fe fa53 	bl	8001728 <MX_I2C1_Init>
 8003282:	e004      	b.n	800328e <fnd_input_i2c_read_sht_temp_humi+0x42>
        }
        else if (idx == 1)
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <fnd_input_i2c_read_sht_temp_humi+0x42>
        {
            MX_I2C3_Init();
 800328a:	f7fe fa7b 	bl	8001784 <MX_I2C3_Init>
        }
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e070      	b.n	8003374 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (sht_write_cmd(sht_i2c[idx], 0x240B) != HAL_OK)
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	4a39      	ldr	r2, [pc, #228]	; (800337c <fnd_input_i2c_read_sht_temp_humi+0x130>)
 8003296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329a:	f242 410b 	movw	r1, #9227	; 0x240b
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff82 	bl	80031a8 <sht_write_cmd>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <fnd_input_i2c_read_sht_temp_humi+0x62>
    {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e062      	b.n	8003374 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    osDelay(50);
 80032ae:	2032      	movs	r0, #50	; 0x32
 80032b0:	f008 f987 	bl	800b5c2 <osDelay>

    if (HAL_I2C_Master_Receive(sht_i2c[idx], SHT_ADDR | 0x01, buff, 6, I2C_TIMEOUT) != HAL_OK)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	4a31      	ldr	r2, [pc, #196]	; (800337c <fnd_input_i2c_read_sht_temp_humi+0x130>)
 80032b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032bc:	f107 020c 	add.w	r2, r7, #12
 80032c0:	2364      	movs	r3, #100	; 0x64
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2306      	movs	r3, #6
 80032c6:	2189      	movs	r1, #137	; 0x89
 80032c8:	f003 fb36 	bl	8006938 <HAL_I2C_Master_Receive>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <fnd_input_i2c_read_sht_temp_humi+0x8a>
    {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e04e      	b.n	8003374 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (calculate_crc(buff, 2) == buff[2] && calculate_crc(&buff[3], 2) == buff[5])
 80032d6:	f107 030c 	add.w	r3, r7, #12
 80032da:	2102      	movs	r1, #2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff7f 	bl	80031e0 <calculate_crc>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	7bbb      	ldrb	r3, [r7, #14]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d142      	bne.n	8003372 <fnd_input_i2c_read_sht_temp_humi+0x126>
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	3303      	adds	r3, #3
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff73 	bl	80031e0 <calculate_crc>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	7c7b      	ldrb	r3, [r7, #17]
 8003300:	429a      	cmp	r2, r3
 8003302:	d136      	bne.n	8003372 <fnd_input_i2c_read_sht_temp_humi+0x126>
    {
        uint16_t temp_value = ((uint16_t)buff[0] << 8) | buff[1];
 8003304:	7b3b      	ldrb	r3, [r7, #12]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	b21a      	sxth	r2, r3
 800330a:	7b7b      	ldrb	r3, [r7, #13]
 800330c:	b21b      	sxth	r3, r3
 800330e:	4313      	orrs	r3, r2
 8003310:	b21b      	sxth	r3, r3
 8003312:	82fb      	strh	r3, [r7, #22]
        values[0] = -45 + 175 * ((float)temp_value / 65535);
 8003314:	8afb      	ldrh	r3, [r7, #22]
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800331e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003380 <fnd_input_i2c_read_sht_temp_humi+0x134>
 8003322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003326:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003384 <fnd_input_i2c_read_sht_temp_humi+0x138>
 800332a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800332e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003388 <fnd_input_i2c_read_sht_temp_humi+0x13c>
 8003332:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	edc3 7a00 	vstr	s15, [r3]

        uint16_t humi_value = ((uint16_t)buff[3] << 8) | buff[4];
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	b21a      	sxth	r2, r3
 8003342:	7c3b      	ldrb	r3, [r7, #16]
 8003344:	b21b      	sxth	r3, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	b21b      	sxth	r3, r3
 800334a:	82bb      	strh	r3, [r7, #20]
        values[1] = 100 * ((float)humi_value / 65535);
 800334c:	8abb      	ldrh	r3, [r7, #20]
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003356:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003380 <fnd_input_i2c_read_sht_temp_humi+0x134>
 800335a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	3304      	adds	r3, #4
 8003362:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800338c <fnd_input_i2c_read_sht_temp_humi+0x140>
 8003366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800336a:	edc3 7a00 	vstr	s15, [r3]
        return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	2000004c 	.word	0x2000004c
 8003380:	477fff00 	.word	0x477fff00
 8003384:	432f0000 	.word	0x432f0000
 8003388:	42340000 	.word	0x42340000
 800338c:	42c80000 	.word	0x42c80000

08003390 <fnd_input_tim_input_capture_init>:
#include "tim.h"

uint16_t spd_pulse[2];

void fnd_input_tim_input_capture_init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003394:	2100      	movs	r1, #0
 8003396:	4804      	ldr	r0, [pc, #16]	; (80033a8 <fnd_input_tim_input_capture_init+0x18>)
 8003398:	f005 f806 	bl	80083a8 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800339c:	2104      	movs	r1, #4
 800339e:	4802      	ldr	r0, [pc, #8]	; (80033a8 <fnd_input_tim_input_capture_init+0x18>)
 80033a0:	f005 f802 	bl	80083a8 <HAL_TIM_IC_Start_IT>
}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	2000b314 	.word	0x2000b314

080033ac <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7f1b      	ldrb	r3, [r3, #28]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <HAL_TIM_IC_CaptureCallback+0x1e>
    {
        spd_pulse[0]++;
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_TIM_IC_CaptureCallback+0x40>)
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_TIM_IC_CaptureCallback+0x40>)
 80033c6:	801a      	strh	r2, [r3, #0]
    }
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
    {
        spd_pulse[1]++;
    }
}
 80033c8:	e009      	b.n	80033de <HAL_TIM_IC_CaptureCallback+0x32>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7f1b      	ldrb	r3, [r3, #28]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d105      	bne.n	80033de <HAL_TIM_IC_CaptureCallback+0x32>
        spd_pulse[1]++;
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_TIM_IC_CaptureCallback+0x40>)
 80033d4:	885b      	ldrh	r3, [r3, #2]
 80033d6:	3301      	adds	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b04      	ldr	r3, [pc, #16]	; (80033ec <HAL_TIM_IC_CaptureCallback+0x40>)
 80033dc:	805a      	strh	r2, [r3, #2]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	2000d08c 	.word	0x2000d08c

080033f0 <fnd_output_init>:
#include "fnd_output.h"
#include "fnd_com.h"

void fnd_output_init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
    fnd_output_pwm_init();
 80033f4:	f000 f894 	bl	8003520 <fnd_output_pwm_init>
    fnd_output_stepper_init();
 80033f8:	f000 fab8 	bl	800396c <fnd_output_stepper_init>
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}

08003400 <fnd_output_update>:

void fnd_output_update(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
    uint8_t do_value[6] = {0};
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	2300      	movs	r3, #0
 800340c:	833b      	strh	r3, [r7, #24]
    for (uint8_t i = 0; i < 6; i++)
 800340e:	2300      	movs	r3, #0
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e014      	b.n	800343e <fnd_output_update+0x3e>
    {
        do_value[i] = sys_regs.inputs[OUTPUT_DO_START + i] == 0 ? 0 : 1;
 8003414:	7ffb      	ldrb	r3, [r7, #31]
 8003416:	3364      	adds	r3, #100	; 0x64
 8003418:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <fnd_output_update+0xc8>)
 800341a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800341e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2da      	uxtb	r2, r3
 800342c:	7ffb      	ldrb	r3, [r7, #31]
 800342e:	f107 0120 	add.w	r1, r7, #32
 8003432:	440b      	add	r3, r1
 8003434:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 6; i++)
 8003438:	7ffb      	ldrb	r3, [r7, #31]
 800343a:	3301      	adds	r3, #1
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	7ffb      	ldrb	r3, [r7, #31]
 8003440:	2b05      	cmp	r3, #5
 8003442:	d9e7      	bls.n	8003414 <fnd_output_update+0x14>
    }
    fnd_output_gpio_write_do(do_value);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f83f 	bl	80034cc <fnd_output_gpio_write_do>

    uint16_t pwm_value[3];
    for (uint8_t i = 0; i < 3; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	77bb      	strb	r3, [r7, #30]
 8003452:	e011      	b.n	8003478 <fnd_output_update+0x78>
    {
        pwm_value[i] = (uint16_t)sys_regs.inputs[OUTPUT_PWM_START + i];
 8003454:	7fbb      	ldrb	r3, [r7, #30]
 8003456:	336a      	adds	r3, #106	; 0x6a
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <fnd_output_update+0xc8>)
 800345a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800345e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003462:	7fbb      	ldrb	r3, [r7, #30]
 8003464:	b292      	uxth	r2, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	f107 0120 	add.w	r1, r7, #32
 800346c:	440b      	add	r3, r1
 800346e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < 3; i++)
 8003472:	7fbb      	ldrb	r3, [r7, #30]
 8003474:	3301      	adds	r3, #1
 8003476:	77bb      	strb	r3, [r7, #30]
 8003478:	7fbb      	ldrb	r3, [r7, #30]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d9ea      	bls.n	8003454 <fnd_output_update+0x54>
    }
    fnd_output_pwm_write_value(pwm_value);
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f860 	bl	8003548 <fnd_output_pwm_write_value>

    uint16_t stepper_value[4];
    for (uint8_t i = 0; i < 4; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	777b      	strb	r3, [r7, #29]
 800348c:	e011      	b.n	80034b2 <fnd_output_update+0xb2>
    {
        stepper_value[i] = (uint16_t)sys_regs.inputs[OUTPUT_STEPPER_START + i];
 800348e:	7f7b      	ldrb	r3, [r7, #29]
 8003490:	336d      	adds	r3, #109	; 0x6d
 8003492:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <fnd_output_update+0xc8>)
 8003494:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003498:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800349c:	7f7b      	ldrb	r3, [r7, #29]
 800349e:	b292      	uxth	r2, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	f107 0120 	add.w	r1, r7, #32
 80034a6:	440b      	add	r3, r1
 80034a8:	f823 2c1c 	strh.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 4; i++)
 80034ac:	7f7b      	ldrb	r3, [r7, #29]
 80034ae:	3301      	adds	r3, #1
 80034b0:	777b      	strb	r3, [r7, #29]
 80034b2:	7f7b      	ldrb	r3, [r7, #29]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d9ea      	bls.n	800348e <fnd_output_update+0x8e>
    }
    fnd_output_stepper_set_position(stepper_value);
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fad8 	bl	8003a70 <fnd_output_stepper_set_position>
 80034c0:	bf00      	nop
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	2000c03c 	.word	0x2000c03c

080034cc <fnd_output_gpio_write_do>:

GPIO_TypeDef *relay_port[6] = {RLY_01_GPIO_Port, RLY_02_GPIO_Port, RLY_03_GPIO_Port, RLY_04_GPIO_Port, RLY_05_GPIO_Port, RLY_06_GPIO_Port};
uint16_t relay_pin[6] = {RLY_01_Pin, RLY_02_Pin, RLY_03_Pin, RLY_04_Pin, RLY_05_Pin, RLY_06_Pin};

void fnd_output_gpio_write_do(uint8_t *values)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 6; i++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
 80034d8:	e016      	b.n	8003508 <fnd_output_gpio_write_do+0x3c>
    {
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <fnd_output_gpio_write_do+0x4c>)
 80034de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <fnd_output_gpio_write_do+0x50>)
 80034e6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	f002 ffa5 	bl	800644c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 6; i++)
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	3301      	adds	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b05      	cmp	r3, #5
 800350c:	d9e5      	bls.n	80034da <fnd_output_gpio_write_do+0xe>
    }
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000054 	.word	0x20000054
 800351c:	2000006c 	.word	0x2000006c

08003520 <fnd_output_pwm_init>:
#include "fnd_output.h"
#include "tim.h"

void fnd_output_pwm_init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003524:	2100      	movs	r1, #0
 8003526:	4806      	ldr	r0, [pc, #24]	; (8003540 <fnd_output_pwm_init+0x20>)
 8003528:	f004 fe1c 	bl	8008164 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800352c:	2104      	movs	r1, #4
 800352e:	4804      	ldr	r0, [pc, #16]	; (8003540 <fnd_output_pwm_init+0x20>)
 8003530:	f004 fe18 	bl	8008164 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003534:	2104      	movs	r1, #4
 8003536:	4803      	ldr	r0, [pc, #12]	; (8003544 <fnd_output_pwm_init+0x24>)
 8003538:	f004 fe14 	bl	8008164 <HAL_TIM_PWM_Start>
}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2000b35c 	.word	0x2000b35c
 8003544:	2000b3a4 	.word	0x2000b3a4

08003548 <fnd_output_pwm_write_value>:

void fnd_output_pwm_write_value(uint16_t *values)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    if (values[0] < 1000)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003558:	d204      	bcs.n	8003564 <fnd_output_pwm_write_value+0x1c>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t)(values[0] / 1));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <fnd_output_pwm_write_value+0x58>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (values[1] < 1000)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3302      	adds	r3, #2
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800356e:	d205      	bcs.n	800357c <fnd_output_pwm_write_value+0x34>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t)(values[1] / 1));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3302      	adds	r3, #2
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <fnd_output_pwm_write_value+0x58>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if (values[2] < 1000)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003586:	d205      	bcs.n	8003594 <fnd_output_pwm_write_value+0x4c>
    {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint16_t)(values[2] / 1));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <fnd_output_pwm_write_value+0x5c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	2000b35c 	.word	0x2000b35c
 80035a4:	2000b3a4 	.word	0x2000b3a4

080035a8 <fnd_output_stepper_tick>:
                            STEP_A5_Pin, STEP_A6_Pin, STEP_A7_Pin, STEP_A8_Pin,
                            STEP_B1_Pin, STEP_B2_Pin, STEP_B3_Pin, STEP_B4_Pin,
                            STEP_B5_Pin, STEP_B6_Pin, STEP_B7_Pin, STEP_B8_Pin};

static void fnd_output_stepper_tick(stepper_motor *motor)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    if (motor->current_pos == motor->target_pos)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8c1a      	ldrh	r2, [r3, #32]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8bdb      	ldrh	r3, [r3, #30]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d109      	bne.n	80035d0 <fnd_output_stepper_tick+0x28>
    {
        motor->mode = STOP;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	761a      	strb	r2, [r3, #24]
        motor->up_excite_cnt = 0;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	835a      	strh	r2, [r3, #26]
        motor->down_excite_cnt = 0;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	839a      	strh	r2, [r3, #28]
 80035ce:	e034      	b.n	800363a <fnd_output_stepper_tick+0x92>
    }
    else if (motor->current_pos < motor->target_pos)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8c1a      	ldrh	r2, [r3, #32]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8bdb      	ldrh	r3, [r3, #30]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d214      	bcs.n	8003606 <fnd_output_stepper_tick+0x5e>
    {
        motor->down_excite_cnt = 0;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	839a      	strh	r2, [r3, #28]
        if (motor->up_excite_cnt < EXCITE_TICKS)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8b5b      	ldrh	r3, [r3, #26]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d809      	bhi.n	80035fe <fnd_output_stepper_tick+0x56>
        {
            motor->mode = UP_EXCITE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	761a      	strb	r2, [r3, #24]
            motor->up_excite_cnt = motor->up_excite_cnt + 1;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8b5b      	ldrh	r3, [r3, #26]
 80035f4:	3301      	adds	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	835a      	strh	r2, [r3, #26]
 80035fc:	e01d      	b.n	800363a <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = UP;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	761a      	strb	r2, [r3, #24]
 8003604:	e019      	b.n	800363a <fnd_output_stepper_tick+0x92>
        }
    }
    else if (motor->current_pos > motor->target_pos)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8c1a      	ldrh	r2, [r3, #32]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8bdb      	ldrh	r3, [r3, #30]
 800360e:	429a      	cmp	r2, r3
 8003610:	d913      	bls.n	800363a <fnd_output_stepper_tick+0x92>
    {
        motor->up_excite_cnt = 0;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	835a      	strh	r2, [r3, #26]
        if (motor->down_excite_cnt < EXCITE_TICKS)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8b9b      	ldrh	r3, [r3, #28]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d809      	bhi.n	8003634 <fnd_output_stepper_tick+0x8c>
        {
            motor->mode = DOWN_EXCITE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2203      	movs	r2, #3
 8003624:	761a      	strb	r2, [r3, #24]
            motor->down_excite_cnt = motor->down_excite_cnt + 1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8b9b      	ldrh	r3, [r3, #28]
 800362a:	3301      	adds	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	839a      	strh	r2, [r3, #28]
 8003632:	e002      	b.n	800363a <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = DOWN;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2204      	movs	r2, #4
 8003638:	761a      	strb	r2, [r3, #24]
        }
    }

    if (motor->mode == STOP)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7e1b      	ldrb	r3, [r3, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <fnd_output_stepper_tick+0xc8>
    {
        for (uint8_t i = 0; i < 4; i++)
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
 8003646:	e00f      	b.n	8003668 <fnd_output_stepper_tick+0xc0>
        {
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800365a:	2200      	movs	r2, #0
 800365c:	4619      	mov	r1, r3
 800365e:	f002 fef5 	bl	800644c <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	3301      	adds	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d9ec      	bls.n	8003648 <fnd_output_stepper_tick+0xa0>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}
 800366e:	e179      	b.n	8003964 <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == UP_EXCITE || motor->mode == DOWN_EXCITE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7e1b      	ldrb	r3, [r3, #24]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d003      	beq.n	8003680 <fnd_output_stepper_tick+0xd8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7e1b      	ldrb	r3, [r3, #24]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d15c      	bne.n	800373a <fnd_output_stepper_tick+0x192>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8a19      	ldrh	r1, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <fnd_output_stepper_tick+0xf8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003694:	2b01      	cmp	r3, #1
 8003696:	d003      	beq.n	80036a0 <fnd_output_stepper_tick+0xf8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800369c:	2b07      	cmp	r3, #7
 800369e:	d101      	bne.n	80036a4 <fnd_output_stepper_tick+0xfc>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <fnd_output_stepper_tick+0xfe>
 80036a4:	2300      	movs	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	f002 fecf 	bl	800644c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6858      	ldr	r0, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8a59      	ldrh	r1, [r3, #18]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d007      	beq.n	80036ce <fnd_output_stepper_tick+0x126>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d003      	beq.n	80036ce <fnd_output_stepper_tick+0x126>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d101      	bne.n	80036d2 <fnd_output_stepper_tick+0x12a>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <fnd_output_stepper_tick+0x12c>
 80036d2:	2300      	movs	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	f002 feb8 	bl	800644c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6898      	ldr	r0, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8a99      	ldrh	r1, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d007      	beq.n	80036fc <fnd_output_stepper_tick+0x154>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d003      	beq.n	80036fc <fnd_output_stepper_tick+0x154>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d101      	bne.n	8003700 <fnd_output_stepper_tick+0x158>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <fnd_output_stepper_tick+0x15a>
 8003700:	2300      	movs	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	f002 fea1 	bl	800644c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68d8      	ldr	r0, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8ad9      	ldrh	r1, [r3, #22]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003716:	2b05      	cmp	r3, #5
 8003718:	d007      	beq.n	800372a <fnd_output_stepper_tick+0x182>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800371e:	2b06      	cmp	r3, #6
 8003720:	d003      	beq.n	800372a <fnd_output_stepper_tick+0x182>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003726:	2b07      	cmp	r3, #7
 8003728:	d101      	bne.n	800372e <fnd_output_stepper_tick+0x186>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <fnd_output_stepper_tick+0x188>
 800372e:	2300      	movs	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	f002 fe8a 	bl	800644c <HAL_GPIO_WritePin>
}
 8003738:	e114      	b.n	8003964 <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == UP)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7e1b      	ldrb	r3, [r3, #24]
 800373e:	2b02      	cmp	r3, #2
 8003740:	f040 8086 	bne.w	8003850 <fnd_output_stepper_tick+0x2a8>
        for (uint8_t i = 0; i < 4; i++)
 8003744:	2300      	movs	r3, #0
 8003746:	73bb      	strb	r3, [r7, #14]
 8003748:	e00f      	b.n	800376a <fnd_output_stepper_tick+0x1c2>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 800374a:	7bba      	ldrb	r2, [r7, #14]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003752:	7bba      	ldrb	r2, [r7, #14]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3208      	adds	r2, #8
 8003758:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800375c:	2200      	movs	r2, #0
 800375e:	4619      	mov	r1, r3
 8003760:	f002 fe74 	bl	800644c <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 8003764:	7bbb      	ldrb	r3, [r7, #14]
 8003766:	3301      	adds	r3, #1
 8003768:	73bb      	strb	r3, [r7, #14]
 800376a:	7bbb      	ldrb	r3, [r7, #14]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d9ec      	bls.n	800374a <fnd_output_stepper_tick+0x1a2>
        motor->current_pos = motor->current_pos + 1;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8c1b      	ldrh	r3, [r3, #32]
 8003774:	3301      	adds	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	841a      	strh	r2, [r3, #32]
        motor->phase = (motor->phase + 1) % 8;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003780:	3301      	adds	r3, #1
 8003782:	425a      	negs	r2, r3
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	f002 0207 	and.w	r2, r2, #7
 800378c:	bf58      	it	pl
 800378e:	4253      	negpl	r3, r2
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8a19      	ldrh	r1, [r3, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <fnd_output_stepper_tick+0x20e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d003      	beq.n	80037b6 <fnd_output_stepper_tick+0x20e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037b2:	2b07      	cmp	r3, #7
 80037b4:	d101      	bne.n	80037ba <fnd_output_stepper_tick+0x212>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <fnd_output_stepper_tick+0x214>
 80037ba:	2300      	movs	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	f002 fe44 	bl	800644c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6858      	ldr	r0, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8a59      	ldrh	r1, [r3, #18]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d007      	beq.n	80037e4 <fnd_output_stepper_tick+0x23c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d003      	beq.n	80037e4 <fnd_output_stepper_tick+0x23c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d101      	bne.n	80037e8 <fnd_output_stepper_tick+0x240>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <fnd_output_stepper_tick+0x242>
 80037e8:	2300      	movs	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	f002 fe2d 	bl	800644c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6898      	ldr	r0, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8a99      	ldrh	r1, [r3, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d007      	beq.n	8003812 <fnd_output_stepper_tick+0x26a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003806:	2b04      	cmp	r3, #4
 8003808:	d003      	beq.n	8003812 <fnd_output_stepper_tick+0x26a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800380e:	2b05      	cmp	r3, #5
 8003810:	d101      	bne.n	8003816 <fnd_output_stepper_tick+0x26e>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <fnd_output_stepper_tick+0x270>
 8003816:	2300      	movs	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	f002 fe16 	bl	800644c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68d8      	ldr	r0, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8ad9      	ldrh	r1, [r3, #22]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800382c:	2b05      	cmp	r3, #5
 800382e:	d007      	beq.n	8003840 <fnd_output_stepper_tick+0x298>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003834:	2b06      	cmp	r3, #6
 8003836:	d003      	beq.n	8003840 <fnd_output_stepper_tick+0x298>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800383c:	2b07      	cmp	r3, #7
 800383e:	d101      	bne.n	8003844 <fnd_output_stepper_tick+0x29c>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <fnd_output_stepper_tick+0x29e>
 8003844:	2300      	movs	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	f002 fdff 	bl	800644c <HAL_GPIO_WritePin>
}
 800384e:	e089      	b.n	8003964 <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == DOWN)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7e1b      	ldrb	r3, [r3, #24]
 8003854:	2b04      	cmp	r3, #4
 8003856:	f040 8085 	bne.w	8003964 <fnd_output_stepper_tick+0x3bc>
        for (uint8_t i = 0; i < 4; i++)
 800385a:	2300      	movs	r3, #0
 800385c:	737b      	strb	r3, [r7, #13]
 800385e:	e00f      	b.n	8003880 <fnd_output_stepper_tick+0x2d8>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003860:	7b7a      	ldrb	r2, [r7, #13]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003868:	7b7a      	ldrb	r2, [r7, #13]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3208      	adds	r2, #8
 800386e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003872:	2200      	movs	r2, #0
 8003874:	4619      	mov	r1, r3
 8003876:	f002 fde9 	bl	800644c <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 800387a:	7b7b      	ldrb	r3, [r7, #13]
 800387c:	3301      	adds	r3, #1
 800387e:	737b      	strb	r3, [r7, #13]
 8003880:	7b7b      	ldrb	r3, [r7, #13]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d9ec      	bls.n	8003860 <fnd_output_stepper_tick+0x2b8>
        motor->current_pos = motor->current_pos - 1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8c1b      	ldrh	r3, [r3, #32]
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	841a      	strh	r2, [r3, #32]
        motor->phase = (motor->phase + 7) % 8;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003896:	3307      	adds	r3, #7
 8003898:	425a      	negs	r2, r3
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	f002 0207 	and.w	r2, r2, #7
 80038a2:	bf58      	it	pl
 80038a4:	4253      	negpl	r3, r2
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8a19      	ldrh	r1, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <fnd_output_stepper_tick+0x324>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d003      	beq.n	80038cc <fnd_output_stepper_tick+0x324>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038c8:	2b07      	cmp	r3, #7
 80038ca:	d101      	bne.n	80038d0 <fnd_output_stepper_tick+0x328>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <fnd_output_stepper_tick+0x32a>
 80038d0:	2300      	movs	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	f002 fdb9 	bl	800644c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6858      	ldr	r0, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8a59      	ldrh	r1, [r3, #18]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d007      	beq.n	80038fa <fnd_output_stepper_tick+0x352>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d003      	beq.n	80038fa <fnd_output_stepper_tick+0x352>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d101      	bne.n	80038fe <fnd_output_stepper_tick+0x356>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <fnd_output_stepper_tick+0x358>
 80038fe:	2300      	movs	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	f002 fda2 	bl	800644c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6898      	ldr	r0, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8a99      	ldrh	r1, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003914:	2b03      	cmp	r3, #3
 8003916:	d007      	beq.n	8003928 <fnd_output_stepper_tick+0x380>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800391c:	2b04      	cmp	r3, #4
 800391e:	d003      	beq.n	8003928 <fnd_output_stepper_tick+0x380>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003924:	2b05      	cmp	r3, #5
 8003926:	d101      	bne.n	800392c <fnd_output_stepper_tick+0x384>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <fnd_output_stepper_tick+0x386>
 800392c:	2300      	movs	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	f002 fd8b 	bl	800644c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68d8      	ldr	r0, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8ad9      	ldrh	r1, [r3, #22]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003942:	2b05      	cmp	r3, #5
 8003944:	d007      	beq.n	8003956 <fnd_output_stepper_tick+0x3ae>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800394a:	2b06      	cmp	r3, #6
 800394c:	d003      	beq.n	8003956 <fnd_output_stepper_tick+0x3ae>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003952:	2b07      	cmp	r3, #7
 8003954:	d101      	bne.n	800395a <fnd_output_stepper_tick+0x3b2>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <fnd_output_stepper_tick+0x3b4>
 800395a:	2300      	movs	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	f002 fd74 	bl	800644c <HAL_GPIO_WritePin>
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <fnd_output_stepper_init>:

void fnd_output_stepper_init(void)
{
 800396c:	b490      	push	{r4, r7}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; i++)
 8003972:	2300      	movs	r3, #0
 8003974:	71fb      	strb	r3, [r7, #7]
 8003976:	e06b      	b.n	8003a50 <fnd_output_stepper_init+0xe4>
    {
        for (uint8_t j = 0; j < 4; j++)
 8003978:	2300      	movs	r3, #0
 800397a:	71bb      	strb	r3, [r7, #6]
 800397c:	e025      	b.n	80039ca <fnd_output_stepper_init+0x5e>
        {
            motor[i].gpio_port[j] = stepper_port[i * 4 + j];
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	009a      	lsls	r2, r3, #2
 8003982:	79bb      	ldrb	r3, [r7, #6]
 8003984:	4413      	add	r3, r2
 8003986:	79fa      	ldrb	r2, [r7, #7]
 8003988:	79b8      	ldrb	r0, [r7, #6]
 800398a:	4936      	ldr	r1, [pc, #216]	; (8003a64 <fnd_output_stepper_init+0xf8>)
 800398c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003990:	4c35      	ldr	r4, [pc, #212]	; (8003a68 <fnd_output_stepper_init+0xfc>)
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4413      	add	r3, r2
 8003998:	4403      	add	r3, r0
 800399a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
            motor[i].gpio_pin[j] = stepper_pin[i * 4 + j];
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	009a      	lsls	r2, r3, #2
 80039a2:	79bb      	ldrb	r3, [r7, #6]
 80039a4:	4413      	add	r3, r2
 80039a6:	79fa      	ldrb	r2, [r7, #7]
 80039a8:	79b9      	ldrb	r1, [r7, #6]
 80039aa:	4830      	ldr	r0, [pc, #192]	; (8003a6c <fnd_output_stepper_init+0x100>)
 80039ac:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 80039b0:	482d      	ldr	r0, [pc, #180]	; (8003a68 <fnd_output_stepper_init+0xfc>)
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	440b      	add	r3, r1
 80039bc:	3308      	adds	r3, #8
 80039be:	4622      	mov	r2, r4
 80039c0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (uint8_t j = 0; j < 4; j++)
 80039c4:	79bb      	ldrb	r3, [r7, #6]
 80039c6:	3301      	adds	r3, #1
 80039c8:	71bb      	strb	r3, [r7, #6]
 80039ca:	79bb      	ldrb	r3, [r7, #6]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d9d6      	bls.n	800397e <fnd_output_stepper_init+0x12>
        }
        motor[i].current_pos = 1200;
 80039d0:	79fa      	ldrb	r2, [r7, #7]
 80039d2:	4925      	ldr	r1, [pc, #148]	; (8003a68 <fnd_output_stepper_init+0xfc>)
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3320      	adds	r3, #32
 80039e0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80039e4:	801a      	strh	r2, [r3, #0]
        motor[i].down_excite_cnt = 0;
 80039e6:	79fa      	ldrb	r2, [r7, #7]
 80039e8:	491f      	ldr	r1, [pc, #124]	; (8003a68 <fnd_output_stepper_init+0xfc>)
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	331c      	adds	r3, #28
 80039f6:	2200      	movs	r2, #0
 80039f8:	801a      	strh	r2, [r3, #0]
        motor[i].mode = STOP;
 80039fa:	79fa      	ldrb	r2, [r7, #7]
 80039fc:	491a      	ldr	r1, [pc, #104]	; (8003a68 <fnd_output_stepper_init+0xfc>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3318      	adds	r3, #24
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
        motor[i].phase = 0;
 8003a0e:	79fa      	ldrb	r2, [r7, #7]
 8003a10:	4915      	ldr	r1, [pc, #84]	; (8003a68 <fnd_output_stepper_init+0xfc>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3322      	adds	r3, #34	; 0x22
 8003a1e:	2200      	movs	r2, #0
 8003a20:	801a      	strh	r2, [r3, #0]
        motor[i].target_pos = 0;
 8003a22:	79fa      	ldrb	r2, [r7, #7]
 8003a24:	4910      	ldr	r1, [pc, #64]	; (8003a68 <fnd_output_stepper_init+0xfc>)
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	331e      	adds	r3, #30
 8003a32:	2200      	movs	r2, #0
 8003a34:	801a      	strh	r2, [r3, #0]
        motor[i].up_excite_cnt = 0;
 8003a36:	79fa      	ldrb	r2, [r7, #7]
 8003a38:	490b      	ldr	r1, [pc, #44]	; (8003a68 <fnd_output_stepper_init+0xfc>)
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	331a      	adds	r3, #26
 8003a46:	2200      	movs	r2, #0
 8003a48:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	71fb      	strb	r3, [r7, #7]
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d990      	bls.n	8003978 <fnd_output_stepper_init+0xc>
    }
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc90      	pop	{r4, r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000078 	.word	0x20000078
 8003a68:	2000d090 	.word	0x2000d090
 8003a6c:	200000b8 	.word	0x200000b8

08003a70 <fnd_output_stepper_set_position>:

void fnd_output_stepper_set_position(uint16_t *values)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    motor[0].target_pos = values[0];
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <fnd_output_stepper_set_position+0x3c>)
 8003a7e:	83da      	strh	r2, [r3, #30]
    motor[1].target_pos = values[1];
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	885a      	ldrh	r2, [r3, #2]
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <fnd_output_stepper_set_position+0x3c>)
 8003a86:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    motor[2].target_pos = values[2];
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	889a      	ldrh	r2, [r3, #4]
 8003a8e:	4b07      	ldr	r3, [pc, #28]	; (8003aac <fnd_output_stepper_set_position+0x3c>)
 8003a90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    motor[3].target_pos = values[3];
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	88da      	ldrh	r2, [r3, #6]
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <fnd_output_stepper_set_position+0x3c>)
 8003a9a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	2000d090 	.word	0x2000d090

08003ab0 <fnd_output_stepper_10ms_tick>:

void fnd_output_stepper_10ms_tick(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
    fnd_output_stepper_tick(&motor[0]);
 8003ab4:	4806      	ldr	r0, [pc, #24]	; (8003ad0 <fnd_output_stepper_10ms_tick+0x20>)
 8003ab6:	f7ff fd77 	bl	80035a8 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[1]);
 8003aba:	4806      	ldr	r0, [pc, #24]	; (8003ad4 <fnd_output_stepper_10ms_tick+0x24>)
 8003abc:	f7ff fd74 	bl	80035a8 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[2]);
 8003ac0:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <fnd_output_stepper_10ms_tick+0x28>)
 8003ac2:	f7ff fd71 	bl	80035a8 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[3]);
 8003ac6:	4805      	ldr	r0, [pc, #20]	; (8003adc <fnd_output_stepper_10ms_tick+0x2c>)
 8003ac8:	f7ff fd6e 	bl	80035a8 <fnd_output_stepper_tick>
}
 8003acc:	bf00      	nop
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	2000d090 	.word	0x2000d090
 8003ad4:	2000d0b4 	.word	0x2000d0b4
 8003ad8:	2000d0d8 	.word	0x2000d0d8
 8003adc:	2000d0fc 	.word	0x2000d0fc

08003ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <HAL_Init+0x40>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <HAL_Init+0x40>)
 8003aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_Init+0x40>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <HAL_Init+0x40>)
 8003af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <HAL_Init+0x40>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <HAL_Init+0x40>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b08:	2003      	movs	r0, #3
 8003b0a:	f000 fd0e 	bl	800452a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b0e:	200f      	movs	r0, #15
 8003b10:	f7fd ffda 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b14:	f7fd ffac 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023c00 	.word	0x40023c00

08003b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_IncTick+0x20>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_IncTick+0x24>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <HAL_IncTick+0x24>)
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	200000dc 	.word	0x200000dc
 8003b48:	2000d120 	.word	0x2000d120

08003b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_GetTick+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	2000d120 	.word	0x2000d120

08003b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b6c:	f7ff ffee 	bl	8003b4c <HAL_GetTick>
 8003b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d005      	beq.n	8003b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <HAL_Delay+0x44>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b8a:	bf00      	nop
 8003b8c:	f7ff ffde 	bl	8003b4c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d8f7      	bhi.n	8003b8c <HAL_Delay+0x28>
  {
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200000dc 	.word	0x200000dc

08003bac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e033      	b.n	8003c2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd faaa 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d118      	bne.n	8003c1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bf2:	f023 0302 	bic.w	r3, r3, #2
 8003bf6:	f043 0202 	orr.w	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa68 	bl	80040d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	f043 0201 	orr.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
 8003c1a:	e001      	b.n	8003c20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_ADC_Start_DMA+0x1e>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e0e9      	b.n	8003e26 <HAL_ADC_Start_DMA+0x1f2>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d018      	beq.n	8003c9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c78:	4b6d      	ldr	r3, [pc, #436]	; (8003e30 <HAL_ADC_Start_DMA+0x1fc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6d      	ldr	r2, [pc, #436]	; (8003e34 <HAL_ADC_Start_DMA+0x200>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	0c9a      	lsrs	r2, r3, #18
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c8c:	e002      	b.n	8003c94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f9      	bne.n	8003c8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca8:	d107      	bne.n	8003cba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	f040 80a1 	bne.w	8003e0c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cf4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d106      	bne.n	8003d18 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f023 0206 	bic.w	r2, r3, #6
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
 8003d16:	e002      	b.n	8003d1e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d26:	4b44      	ldr	r3, [pc, #272]	; (8003e38 <HAL_ADC_Start_DMA+0x204>)
 8003d28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	4a43      	ldr	r2, [pc, #268]	; (8003e3c <HAL_ADC_Start_DMA+0x208>)
 8003d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	4a42      	ldr	r2, [pc, #264]	; (8003e40 <HAL_ADC_Start_DMA+0x20c>)
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	4a41      	ldr	r2, [pc, #260]	; (8003e44 <HAL_ADC_Start_DMA+0x210>)
 8003d40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	334c      	adds	r3, #76	; 0x4c
 8003d76:	4619      	mov	r1, r3
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f000 fcb8 	bl	80046f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d12a      	bne.n	8003de2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2d      	ldr	r2, [pc, #180]	; (8003e48 <HAL_ADC_Start_DMA+0x214>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d015      	beq.n	8003dc2 <HAL_ADC_Start_DMA+0x18e>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <HAL_ADC_Start_DMA+0x218>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d105      	bne.n	8003dac <HAL_ADC_Start_DMA+0x178>
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <HAL_ADC_Start_DMA+0x204>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <HAL_ADC_Start_DMA+0x21c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d136      	bne.n	8003e24 <HAL_ADC_Start_DMA+0x1f0>
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_ADC_Start_DMA+0x204>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d130      	bne.n	8003e24 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d129      	bne.n	8003e24 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	e020      	b.n	8003e24 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <HAL_ADC_Start_DMA+0x214>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d11b      	bne.n	8003e24 <HAL_ADC_Start_DMA+0x1f0>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d114      	bne.n	8003e24 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	e00b      	b.n	8003e24 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f043 0210 	orr.w	r2, r3, #16
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	f043 0201 	orr.w	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000000 	.word	0x20000000
 8003e34:	431bde83 	.word	0x431bde83
 8003e38:	40012300 	.word	0x40012300
 8003e3c:	080042cd 	.word	0x080042cd
 8003e40:	08004387 	.word	0x08004387
 8003e44:	080043a3 	.word	0x080043a3
 8003e48:	40012000 	.word	0x40012000
 8003e4c:	40012100 	.word	0x40012100
 8003e50:	40012200 	.word	0x40012200

08003e54 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x1c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e105      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x228>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d925      	bls.n	8003f08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	3b1e      	subs	r3, #30
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	400a      	ands	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68d9      	ldr	r1, [r3, #12]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4403      	add	r3, r0
 8003efa:	3b1e      	subs	r3, #30
 8003efc:	409a      	lsls	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	e022      	b.n	8003f4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6919      	ldr	r1, [r3, #16]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	4613      	mov	r3, r2
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43da      	mvns	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	400a      	ands	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6919      	ldr	r1, [r3, #16]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4403      	add	r3, r0
 8003f44:	409a      	lsls	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d824      	bhi.n	8003fa0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	3b05      	subs	r3, #5
 8003f68:	221f      	movs	r2, #31
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	400a      	ands	r2, r1
 8003f76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4618      	mov	r0, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	3b05      	subs	r3, #5
 8003f92:	fa00 f203 	lsl.w	r2, r0, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f9e:	e04c      	b.n	800403a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d824      	bhi.n	8003ff2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3b23      	subs	r3, #35	; 0x23
 8003fba:	221f      	movs	r2, #31
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43da      	mvns	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3b23      	subs	r3, #35	; 0x23
 8003fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff0:	e023      	b.n	800403a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	3b41      	subs	r3, #65	; 0x41
 8004004:	221f      	movs	r2, #31
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43da      	mvns	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	400a      	ands	r2, r1
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	4618      	mov	r0, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	3b41      	subs	r3, #65	; 0x41
 800402e:	fa00 f203 	lsl.w	r2, r0, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800403a:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_ADC_ConfigChannel+0x234>)
 800403c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a21      	ldr	r2, [pc, #132]	; (80040c8 <HAL_ADC_ConfigChannel+0x238>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d109      	bne.n	800405c <HAL_ADC_ConfigChannel+0x1cc>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b12      	cmp	r3, #18
 800404e:	d105      	bne.n	800405c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a19      	ldr	r2, [pc, #100]	; (80040c8 <HAL_ADC_ConfigChannel+0x238>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d123      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x21e>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b10      	cmp	r3, #16
 800406c:	d003      	beq.n	8004076 <HAL_ADC_ConfigChannel+0x1e6>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b11      	cmp	r3, #17
 8004074:	d11b      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b10      	cmp	r3, #16
 8004088:	d111      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_ADC_ConfigChannel+0x23c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_ADC_ConfigChannel+0x240>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	0c9a      	lsrs	r2, r3, #18
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040a0:	e002      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f9      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40012300 	.word	0x40012300
 80040c8:	40012000 	.word	0x40012000
 80040cc:	20000000 	.word	0x20000000
 80040d0:	431bde83 	.word	0x431bde83

080040d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040dc:	4b79      	ldr	r3, [pc, #484]	; (80042c4 <ADC_Init+0x1f0>)
 80040de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	021a      	lsls	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800412c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800414e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <ADC_Init+0x1f4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d022      	beq.n	80041b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800417a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6899      	ldr	r1, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800419c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	e00f      	b.n	80041d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0202 	bic.w	r2, r2, #2
 80041e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7e1b      	ldrb	r3, [r3, #24]
 80041ec:	005a      	lsls	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800421e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	3b01      	subs	r3, #1
 800422c:	035a      	lsls	r2, r3, #13
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	e007      	b.n	8004248 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004246:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	3b01      	subs	r3, #1
 8004264:	051a      	lsls	r2, r3, #20
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800427c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6899      	ldr	r1, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800428a:	025a      	lsls	r2, r3, #9
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6899      	ldr	r1, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	029a      	lsls	r2, r3, #10
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40012300 	.word	0x40012300
 80042c8:	0f000001 	.word	0x0f000001

080042cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d13c      	bne.n	8004360 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d12b      	bne.n	8004358 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004304:	2b00      	cmp	r3, #0
 8004306:	d127      	bne.n	8004358 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004312:	2b00      	cmp	r3, #0
 8004314:	d006      	beq.n	8004324 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004320:	2b00      	cmp	r3, #0
 8004322:	d119      	bne.n	8004358 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0220 	bic.w	r2, r2, #32
 8004332:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fd7b 	bl	8003e54 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800435e:	e00e      	b.n	800437e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff fd85 	bl	8003e7c <HAL_ADC_ErrorCallback>
}
 8004372:	e004      	b.n	800437e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fd67 	bl	8003e68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2240      	movs	r2, #64	; 0x40
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f043 0204 	orr.w	r2, r3, #4
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff fd5a 	bl	8003e7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <__NVIC_SetPriorityGrouping+0x44>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043ec:	4013      	ands	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004402:	4a04      	ldr	r2, [pc, #16]	; (8004414 <__NVIC_SetPriorityGrouping+0x44>)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	60d3      	str	r3, [r2, #12]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <__NVIC_GetPriorityGrouping+0x18>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	f003 0307 	and.w	r3, r3, #7
}
 8004426:	4618      	mov	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db0b      	blt.n	800445e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	f003 021f 	and.w	r2, r3, #31
 800444c:	4907      	ldr	r1, [pc, #28]	; (800446c <__NVIC_EnableIRQ+0x38>)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2001      	movs	r0, #1
 8004456:	fa00 f202 	lsl.w	r2, r0, r2
 800445a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000e100 	.word	0xe000e100

08004470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db0a      	blt.n	800449a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	490c      	ldr	r1, [pc, #48]	; (80044bc <__NVIC_SetPriority+0x4c>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	0112      	lsls	r2, r2, #4
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	440b      	add	r3, r1
 8004494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004498:	e00a      	b.n	80044b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4908      	ldr	r1, [pc, #32]	; (80044c0 <__NVIC_SetPriority+0x50>)
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	3b04      	subs	r3, #4
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	440b      	add	r3, r1
 80044ae:	761a      	strb	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000e100 	.word	0xe000e100
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f1c3 0307 	rsb	r3, r3, #7
 80044de:	2b04      	cmp	r3, #4
 80044e0:	bf28      	it	cs
 80044e2:	2304      	movcs	r3, #4
 80044e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3304      	adds	r3, #4
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d902      	bls.n	80044f4 <NVIC_EncodePriority+0x30>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3b03      	subs	r3, #3
 80044f2:	e000      	b.n	80044f6 <NVIC_EncodePriority+0x32>
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43da      	mvns	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	401a      	ands	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800450c:	f04f 31ff 	mov.w	r1, #4294967295
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	43d9      	mvns	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800451c:	4313      	orrs	r3, r2
         );
}
 800451e:	4618      	mov	r0, r3
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ff4c 	bl	80043d0 <__NVIC_SetPriorityGrouping>
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004552:	f7ff ff61 	bl	8004418 <__NVIC_GetPriorityGrouping>
 8004556:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	6978      	ldr	r0, [r7, #20]
 800455e:	f7ff ffb1 	bl	80044c4 <NVIC_EncodePriority>
 8004562:	4602      	mov	r2, r0
 8004564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff ff80 	bl	8004470 <__NVIC_SetPriority>
}
 8004570:	bf00      	nop
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff54 	bl	8004434 <__NVIC_EnableIRQ>
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045a0:	f7ff fad4 	bl	8003b4c <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e099      	b.n	80046e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045d0:	e00f      	b.n	80045f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045d2:	f7ff fabb 	bl	8003b4c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d908      	bls.n	80045f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2203      	movs	r2, #3
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e078      	b.n	80046e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e8      	bne.n	80045d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4b38      	ldr	r3, [pc, #224]	; (80046ec <HAL_DMA_Init+0x158>)
 800460c:	4013      	ands	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800461e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800462a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2b04      	cmp	r3, #4
 800464a:	d107      	bne.n	800465c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	4313      	orrs	r3, r2
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0307 	bic.w	r3, r3, #7
 8004672:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	2b04      	cmp	r3, #4
 8004684:	d117      	bne.n	80046b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00e      	beq.n	80046b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fb01 	bl	8004ca0 <DMA_CheckFifoParam>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2240      	movs	r2, #64	; 0x40
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046b2:	2301      	movs	r3, #1
 80046b4:	e016      	b.n	80046e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fab8 	bl	8004c34 <DMA_CalcBaseAndBitshift>
 80046c4:	4603      	mov	r3, r0
 80046c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046cc:	223f      	movs	r2, #63	; 0x3f
 80046ce:	409a      	lsls	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	f010803f 	.word	0xf010803f

080046f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_DMA_Start_IT+0x26>
 8004712:	2302      	movs	r3, #2
 8004714:	e040      	b.n	8004798 <HAL_DMA_Start_IT+0xa8>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b01      	cmp	r3, #1
 8004728:	d12f      	bne.n	800478a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fa4a 	bl	8004bd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	223f      	movs	r2, #63	; 0x3f
 800474a:	409a      	lsls	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0216 	orr.w	r2, r2, #22
 800475e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e005      	b.n	8004796 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004792:	2302      	movs	r3, #2
 8004794:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047ae:	f7ff f9cd 	bl	8003b4c <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d008      	beq.n	80047d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e052      	b.n	8004878 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0216 	bic.w	r2, r2, #22
 80047e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <HAL_DMA_Abort+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0208 	bic.w	r2, r2, #8
 8004810:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004822:	e013      	b.n	800484c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004824:	f7ff f992 	bl	8003b4c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b05      	cmp	r3, #5
 8004830:	d90c      	bls.n	800484c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2203      	movs	r2, #3
 800483c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e015      	b.n	8004878 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e4      	bne.n	8004824 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485e:	223f      	movs	r2, #63	; 0x3f
 8004860:	409a      	lsls	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d004      	beq.n	800489e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2280      	movs	r2, #128	; 0x80
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e00c      	b.n	80048b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2205      	movs	r2, #5
 80048a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048d0:	4b92      	ldr	r3, [pc, #584]	; (8004b1c <HAL_DMA_IRQHandler+0x258>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a92      	ldr	r2, [pc, #584]	; (8004b20 <HAL_DMA_IRQHandler+0x25c>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ee:	2208      	movs	r2, #8
 80048f0:	409a      	lsls	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01a      	beq.n	8004930 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d013      	beq.n	8004930 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0204 	bic.w	r2, r2, #4
 8004916:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	2208      	movs	r2, #8
 800491e:	409a      	lsls	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004952:	2201      	movs	r2, #1
 8004954:	409a      	lsls	r2, r3
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496a:	2204      	movs	r2, #4
 800496c:	409a      	lsls	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d012      	beq.n	800499c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004988:	2204      	movs	r2, #4
 800498a:	409a      	lsls	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004994:	f043 0204 	orr.w	r2, r3, #4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	2210      	movs	r2, #16
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d043      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03c      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049be:	2210      	movs	r2, #16
 80049c0:	409a      	lsls	r2, r3
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d018      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d024      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	e01f      	b.n	8004a34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01b      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
 8004a04:	e016      	b.n	8004a34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0208 	bic.w	r2, r2, #8
 8004a22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	2220      	movs	r2, #32
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 808e 	beq.w	8004b62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8086 	beq.w	8004b62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d136      	bne.n	8004adc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0216 	bic.w	r2, r2, #22
 8004a7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <HAL_DMA_IRQHandler+0x1da>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0208 	bic.w	r2, r2, #8
 8004aac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab2:	223f      	movs	r2, #63	; 0x3f
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d07d      	beq.n	8004bce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
        }
        return;
 8004ada:	e078      	b.n	8004bce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01c      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d108      	bne.n	8004b0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d030      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
 8004b08:	e02b      	b.n	8004b62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d027      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	e022      	b.n	8004b62 <HAL_DMA_IRQHandler+0x29e>
 8004b1c:	20000000 	.word	0x20000000
 8004b20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10f      	bne.n	8004b52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0210 	bic.w	r2, r2, #16
 8004b40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d032      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d022      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2205      	movs	r2, #5
 8004b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0201 	bic.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	3301      	adds	r3, #1
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d307      	bcc.n	8004baa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f2      	bne.n	8004b8e <HAL_DMA_IRQHandler+0x2ca>
 8004ba8:	e000      	b.n	8004bac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004baa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
 8004bcc:	e000      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004bce:	bf00      	nop
    }
  }
}
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop

08004bd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d108      	bne.n	8004c18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c16:	e007      	b.n	8004c28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	60da      	str	r2, [r3, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	3b10      	subs	r3, #16
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <DMA_CalcBaseAndBitshift+0x64>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c4e:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <DMA_CalcBaseAndBitshift+0x68>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d909      	bls.n	8004c76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c6a:	f023 0303 	bic.w	r3, r3, #3
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	659a      	str	r2, [r3, #88]	; 0x58
 8004c74:	e007      	b.n	8004c86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	aaaaaaab 	.word	0xaaaaaaab
 8004c9c:	080210c0 	.word	0x080210c0

08004ca0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d11f      	bne.n	8004cfa <DMA_CheckFifoParam+0x5a>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d856      	bhi.n	8004d6e <DMA_CheckFifoParam+0xce>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <DMA_CheckFifoParam+0x28>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004ceb 	.word	0x08004ceb
 8004cd0:	08004cd9 	.word	0x08004cd9
 8004cd4:	08004d6f 	.word	0x08004d6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d046      	beq.n	8004d72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce8:	e043      	b.n	8004d72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cf2:	d140      	bne.n	8004d76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf8:	e03d      	b.n	8004d76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d02:	d121      	bne.n	8004d48 <DMA_CheckFifoParam+0xa8>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d837      	bhi.n	8004d7a <DMA_CheckFifoParam+0xda>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <DMA_CheckFifoParam+0x70>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d27 	.word	0x08004d27
 8004d18:	08004d21 	.word	0x08004d21
 8004d1c:	08004d39 	.word	0x08004d39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      break;
 8004d24:	e030      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d025      	beq.n	8004d7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d36:	e022      	b.n	8004d7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d40:	d11f      	bne.n	8004d82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d46:	e01c      	b.n	8004d82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d903      	bls.n	8004d56 <DMA_CheckFifoParam+0xb6>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d003      	beq.n	8004d5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d54:	e018      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
      break;
 8004d5a:	e015      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00e      	beq.n	8004d86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6c:	e00b      	b.n	8004d86 <DMA_CheckFifoParam+0xe6>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e00a      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d72:	bf00      	nop
 8004d74:	e008      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d76:	bf00      	nop
 8004d78:	e006      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d7a:	bf00      	nop
 8004d7c:	e004      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d7e:	bf00      	nop
 8004d80:	e002      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <DMA_CheckFifoParam+0xe8>
      break;
 8004d86:	bf00      	nop
    }
  } 
  
  return status; 
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop

08004d98 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004da8:	4baa      	ldr	r3, [pc, #680]	; (8005054 <HAL_ETH_Init+0x2bc>)
 8004daa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e183      	b.n	80050c6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f005 fea2 	bl	800ab1c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	4b9e      	ldr	r3, [pc, #632]	; (8005058 <HAL_ETH_Init+0x2c0>)
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	4a9d      	ldr	r2, [pc, #628]	; (8005058 <HAL_ETH_Init+0x2c0>)
 8004de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004de6:	6453      	str	r3, [r2, #68]	; 0x44
 8004de8:	4b9b      	ldr	r3, [pc, #620]	; (8005058 <HAL_ETH_Init+0x2c0>)
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004df4:	4b99      	ldr	r3, [pc, #612]	; (800505c <HAL_ETH_Init+0x2c4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a98      	ldr	r2, [pc, #608]	; (800505c <HAL_ETH_Init+0x2c4>)
 8004dfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dfe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004e00:	4b96      	ldr	r3, [pc, #600]	; (800505c <HAL_ETH_Init+0x2c4>)
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4994      	ldr	r1, [pc, #592]	; (800505c <HAL_ETH_Init+0x2c4>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e24:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e26:	f7fe fe91 	bl	8003b4c <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004e2c:	e011      	b.n	8004e52 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004e2e:	f7fe fe8d 	bl	8003b4c <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e3c:	d909      	bls.n	8004e52 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2203      	movs	r2, #3
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e139      	b.n	80050c6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e4      	bne.n	8004e2e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f023 031c 	bic.w	r3, r3, #28
 8004e72:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e74:	f002 fff6 	bl	8007e64 <HAL_RCC_GetHCLKFreq>
 8004e78:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	4a78      	ldr	r2, [pc, #480]	; (8005060 <HAL_ETH_Init+0x2c8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d908      	bls.n	8004e94 <HAL_ETH_Init+0xfc>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	4a77      	ldr	r2, [pc, #476]	; (8005064 <HAL_ETH_Init+0x2cc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d804      	bhi.n	8004e94 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	e027      	b.n	8004ee4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	4a73      	ldr	r2, [pc, #460]	; (8005064 <HAL_ETH_Init+0x2cc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d908      	bls.n	8004eae <HAL_ETH_Init+0x116>
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	4a6d      	ldr	r2, [pc, #436]	; (8005054 <HAL_ETH_Init+0x2bc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d204      	bcs.n	8004eae <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f043 030c 	orr.w	r3, r3, #12
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	e01a      	b.n	8004ee4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	4a68      	ldr	r2, [pc, #416]	; (8005054 <HAL_ETH_Init+0x2bc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d303      	bcc.n	8004ebe <HAL_ETH_Init+0x126>
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	4a6b      	ldr	r2, [pc, #428]	; (8005068 <HAL_ETH_Init+0x2d0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d911      	bls.n	8004ee2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	4a69      	ldr	r2, [pc, #420]	; (8005068 <HAL_ETH_Init+0x2d0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d908      	bls.n	8004ed8 <HAL_ETH_Init+0x140>
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	4a68      	ldr	r2, [pc, #416]	; (800506c <HAL_ETH_Init+0x2d4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d804      	bhi.n	8004ed8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f043 0304 	orr.w	r3, r3, #4
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	e005      	b.n	8004ee4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f043 0310 	orr.w	r3, r3, #16
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e000      	b.n	8004ee4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004ee2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004eec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fc17 	bl	8005726 <HAL_ETH_WritePHYRegister>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004f02:	6939      	ldr	r1, [r7, #16]
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fdcd 	bl	8005aa4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0d7      	b.n	80050c6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004f16:	20ff      	movs	r0, #255	; 0xff
 8004f18:	f7fe fe24 	bl	8003b64 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a5 	beq.w	8005070 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f26:	f7fe fe11 	bl	8003b4c <HAL_GetTick>
 8004f2a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004f2c:	f107 030c 	add.w	r3, r7, #12
 8004f30:	461a      	mov	r2, r3
 8004f32:	2101      	movs	r1, #1
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fb8e 	bl	8005656 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004f3a:	f7fe fe07 	bl	8003b4c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d90f      	bls.n	8004f6c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004f50:	6939      	ldr	r1, [r7, #16]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fda6 	bl	8005aa4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0ac      	b.n	80050c6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0da      	beq.n	8004f2c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fbd2 	bl	8005726 <HAL_ETH_WritePHYRegister>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00b      	beq.n	8004fa0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004f8c:	6939      	ldr	r1, [r7, #16]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fd88 	bl	8005aa4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e092      	b.n	80050c6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa0:	f7fe fdd4 	bl	8003b4c <HAL_GetTick>
 8004fa4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004fa6:	f107 030c 	add.w	r3, r7, #12
 8004faa:	461a      	mov	r2, r3
 8004fac:	2101      	movs	r1, #1
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fb51 	bl	8005656 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004fb4:	f7fe fdca 	bl	8003b4c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d90f      	bls.n	8004fe6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004fca:	6939      	ldr	r1, [r7, #16]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fd69 	bl	8005aa4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e06f      	b.n	80050c6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0da      	beq.n	8004fa6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004ff0:	f107 030c 	add.w	r3, r7, #12
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2110      	movs	r1, #16
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fb2c 	bl	8005656 <HAL_ETH_ReadPHYRegister>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00b      	beq.n	800501c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005008:	6939      	ldr	r1, [r7, #16]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fd4a 	bl	8005aa4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005018:	2301      	movs	r3, #1
 800501a:	e054      	b.n	80050c6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d004      	beq.n	8005030 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800502c:	60da      	str	r2, [r3, #12]
 800502e:	e002      	b.n	8005036 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
 8005046:	e035      	b.n	80050b4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	e030      	b.n	80050b4 <HAL_ETH_Init+0x31c>
 8005052:	bf00      	nop
 8005054:	03938700 	.word	0x03938700
 8005058:	40023800 	.word	0x40023800
 800505c:	40013800 	.word	0x40013800
 8005060:	01312cff 	.word	0x01312cff
 8005064:	02160ebf 	.word	0x02160ebf
 8005068:	05f5e0ff 	.word	0x05f5e0ff
 800506c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	08db      	lsrs	r3, r3, #3
 8005076:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8005080:	4313      	orrs	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	2100      	movs	r1, #0
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fb4c 	bl	8005726 <HAL_ETH_WritePHYRegister>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00b      	beq.n	80050ac <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005098:	6939      	ldr	r1, [r7, #16]
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fd02 	bl	8005aa4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e00c      	b.n	80050c6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80050ac:	f640 70ff 	movw	r0, #4095	; 0xfff
 80050b0:	f7fe fd58 	bl	8003b64 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80050b4:	6939      	ldr	r1, [r7, #16]
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fcf4 	bl	8005aa4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop

080050d0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_ETH_DMATxDescListInit+0x20>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e052      	b.n	8005196 <HAL_ETH_DMATxDescListInit+0xc6>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e030      	b.n	800516e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	015b      	lsls	r3, r3, #5
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	4413      	add	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800511c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005124:	fb02 f303 	mul.w	r3, r2, r3
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	4413      	add	r3, r2
 800512c:	461a      	mov	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	3b01      	subs	r3, #1
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	429a      	cmp	r2, r3
 800514e:	d208      	bcs.n	8005162 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3301      	adds	r3, #1
 8005154:	015b      	lsls	r3, r3, #5
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	4413      	add	r3, r2
 800515a:	461a      	mov	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	60da      	str	r2, [r3, #12]
 8005160:	e002      	b.n	8005168 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	3301      	adds	r3, #1
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d3ca      	bcc.n	800510c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005180:	3310      	adds	r3, #16
 8005182:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b087      	sub	sp, #28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_ETH_DMARxDescListInit+0x20>
 80051be:	2302      	movs	r3, #2
 80051c0:	e056      	b.n	8005270 <HAL_ETH_DMARxDescListInit+0xce>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	e034      	b.n	8005248 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	015b      	lsls	r3, r3, #5
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4413      	add	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051ee:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80051f6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	461a      	mov	r2, r3
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d105      	bne.n	8005220 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	3b01      	subs	r3, #1
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	429a      	cmp	r2, r3
 8005228:	d208      	bcs.n	800523c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	3301      	adds	r3, #1
 800522e:	015b      	lsls	r3, r3, #5
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	4413      	add	r3, r2
 8005234:	461a      	mov	r2, r3
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	e002      	b.n	8005242 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3301      	adds	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d3c6      	bcc.n	80051de <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525a:	330c      	adds	r3, #12
 800525c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	2300      	movs	r3, #0
 8005290:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_ETH_TransmitFrame+0x24>
 800529c:	2302      	movs	r3, #2
 800529e:	e0cd      	b.n	800543c <HAL_ETH_TransmitFrame+0x1c0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80052c6:	2301      	movs	r3, #1
 80052c8:	e0b8      	b.n	800543c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	da09      	bge.n	80052e8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2212      	movs	r2, #18
 80052d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0a9      	b.n	800543c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d915      	bls.n	800531e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	4a54      	ldr	r2, [pc, #336]	; (8005448 <HAL_ETH_TransmitFrame+0x1cc>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	0a9b      	lsrs	r3, r3, #10
 80052fc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	4b51      	ldr	r3, [pc, #324]	; (8005448 <HAL_ETH_TransmitFrame+0x1cc>)
 8005302:	fba3 1302 	umull	r1, r3, r3, r2
 8005306:	0a9b      	lsrs	r3, r3, #10
 8005308:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	3301      	adds	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e001      	b.n	8005322 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800531e:	2301      	movs	r3, #1
 8005320:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d11c      	bne.n	8005362 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8005336:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005342:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005352:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	461a      	mov	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005360:	e04b      	b.n	80053fa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8005362:	2300      	movs	r3, #0
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	e044      	b.n	80053f2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005376:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800538c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005396:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3b01      	subs	r3, #1
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d116      	bne.n	80053d0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80053b0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4a25      	ldr	r2, [pc, #148]	; (800544c <HAL_ETH_TransmitFrame+0x1d0>)
 80053b6:	fb02 f203 	mul.w	r2, r2, r3
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80053c2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80053ce:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80053de:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	3301      	adds	r3, #1
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d3b6      	bcc.n	8005368 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005402:	3314      	adds	r3, #20
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00d      	beq.n	800542a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005416:	3314      	adds	r3, #20
 8005418:	2204      	movs	r2, #4
 800541a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005424:	3304      	adds	r3, #4
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	ac02b00b 	.word	0xac02b00b
 800544c:	fffffa0c 	.word	0xfffffa0c

08005450 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8005466:	2302      	movs	r3, #2
 8005468:	e074      	b.n	8005554 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800547a:	e05a      	b.n	8005532 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d10d      	bne.n	80054ae <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	461a      	mov	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28
 80054ac:	e041      	b.n	8005532 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10b      	bne.n	80054d4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	461a      	mov	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
 80054d2:	e02e      	b.n	8005532 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d103      	bne.n	80054f6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005502:	1f1a      	subs	r2, r3, #4
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	461a      	mov	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e010      	b.n	8005554 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	db02      	blt.n	8005542 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b03      	cmp	r3, #3
 8005540:	d99c      	bls.n	800547c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005570:	3314      	adds	r3, #20
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d112      	bne.n	80055a2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f005 fb8d 	bl	800ac9c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558a:	3314      	adds	r3, #20
 800558c:	2240      	movs	r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055a0:	e01b      	b.n	80055da <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055aa:	3314      	adds	r3, #20
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d111      	bne.n	80055da <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f839 	bl	800562e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c4:	3314      	adds	r3, #20
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e2:	3314      	adds	r3, #20
 80055e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80055e8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f2:	3314      	adds	r3, #20
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fe:	d112      	bne.n	8005626 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f81e 	bl	8005642 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560e:	3314      	adds	r3, #20
 8005610:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005614:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	460b      	mov	r3, r1
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b82      	cmp	r3, #130	; 0x82
 8005676:	d101      	bne.n	800567c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
 800567a:	e050      	b.n	800571e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2282      	movs	r2, #130	; 0x82
 8005680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f003 031c 	and.w	r3, r3, #28
 8005692:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8a1b      	ldrh	r3, [r3, #16]
 8005698:	02db      	lsls	r3, r3, #11
 800569a:	b29b      	uxth	r3, r3
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80056a2:	897b      	ldrh	r3, [r7, #10]
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0302 	bic.w	r3, r3, #2
 80056b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80056c8:	f7fe fa40 	bl	8003b4c <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80056ce:	e015      	b.n	80056fc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80056d0:	f7fe fa3c 	bl	8003b4c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056de:	d309      	bcc.n	80056f4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e014      	b.n	800571e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e4      	bne.n	80056d0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	b29b      	uxth	r3, r3
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	460b      	mov	r3, r1
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b42      	cmp	r3, #66	; 0x42
 8005746:	d101      	bne.n	800574c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
 800574a:	e04e      	b.n	80057ea <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2242      	movs	r2, #66	; 0x42
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f003 031c 	and.w	r3, r3, #28
 8005762:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8a1b      	ldrh	r3, [r3, #16]
 8005768:	02db      	lsls	r3, r3, #11
 800576a:	b29b      	uxth	r3, r3
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005772:	897b      	ldrh	r3, [r7, #10]
 8005774:	019b      	lsls	r3, r3, #6
 8005776:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f043 0302 	orr.w	r3, r3, #2
 8005786:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80057a2:	f7fe f9d3 	bl	8003b4c <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80057a8:	e015      	b.n	80057d6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80057aa:	f7fe f9cf 	bl	8003b4c <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b8:	d309      	bcc.n	80057ce <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e00d      	b.n	80057ea <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e4      	bne.n	80057aa <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_ETH_Start+0x16>
 8005804:	2302      	movs	r3, #2
 8005806:	e01f      	b.n	8005848 <HAL_ETH_Start+0x56>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fb45 	bl	8005ea8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fb7c 	bl	8005f1c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fc13 	bl	8006050 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fbb0 	bl	8005f90 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fbdd 	bl	8005ff0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_ETH_Stop+0x16>
 8005862:	2302      	movs	r3, #2
 8005864:	e01f      	b.n	80058a6 <HAL_ETH_Stop+0x56>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fba2 	bl	8005fc0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fbcf 	bl	8006020 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fb67 	bl	8005f56 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fbe1 	bl	8006050 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fb27 	bl	8005ee2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_ETH_ConfigMAC+0x1c>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e0e4      	b.n	8005a96 <HAL_ETH_ConfigMAC+0x1e6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80b1 	beq.w	8005a46 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4b6c      	ldr	r3, [pc, #432]	; (8005aa0 <HAL_ETH_ConfigMAC+0x1f0>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80058fc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8005902:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005908:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800590e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005914:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800591a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005920:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8005926:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800592c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8005932:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8005938:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800593e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005956:	2001      	movs	r0, #1
 8005958:	f7fe f904 	bl	8003b64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800596c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8005972:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005978:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800597e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005984:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800598a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005996:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005998:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80059a2:	2001      	movs	r0, #1
 80059a4:	f7fe f8de 	bl	8003b64 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80059b8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059c2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	f64f 7341 	movw	r3, #65345	; 0xff41
 80059d2:	4013      	ands	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059da:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80059e0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80059e6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80059ec:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80059f2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80059f8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a10:	2001      	movs	r0, #1
 8005a12:	f7fe f8a7 	bl	8003b64 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a36:	2001      	movs	r0, #1
 8005a38:	f7fe f894 	bl	8003b64 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	61da      	str	r2, [r3, #28]
 8005a44:	e01e      	b.n	8005a84 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005a54:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a76:	2001      	movs	r0, #1
 8005a78:	f7fe f874 	bl	8003b64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	ff20810f 	.word	0xff20810f

08005aa4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b0b0      	sub	sp, #192	; 0xc0
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ac0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ac8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aee:	663b      	str	r3, [r7, #96]	; 0x60
 8005af0:	e001      	b.n	8005af6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005afa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005b00:	2300      	movs	r3, #0
 8005b02:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005b78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b7c:	4bac      	ldr	r3, [pc, #688]	; (8005e30 <ETH_MACDMAConfig+0x38c>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8005b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005b88:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005b8c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005b90:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005b96:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005b9a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005b9e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005ba4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005ba8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005bac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005bb0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005bb4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005bb8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005bba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bcc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bd8:	2001      	movs	r0, #1
 8005bda:	f7fd ffc3 	bl	8003b64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005be6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005be8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005bec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005bee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005bf0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005bf6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005bfc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005c02:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005c08:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005c0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005c14:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c16:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c22:	2001      	movs	r0, #1
 8005c24:	f7fd ff9e 	bl	8003b64 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c30:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c3a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005c44:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005c50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c54:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005c58:	4013      	ands	r3, r2
 8005c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c62:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005c64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005c68:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005c6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005c6e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005c74:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005c7a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005c80:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005c82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c94:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	f7fd ff5f 	bl	8003b64 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005cae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005cb0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005cb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005cca:	2001      	movs	r0, #1
 8005ccc:	f7fd ff4a 	bl	8003b64 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005cd8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ce2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005ce8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005cec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005cfe:	2304      	movs	r3, #4
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d0c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d12:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d18:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005d22:	2300      	movs	r3, #0
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2e:	3318      	adds	r3, #24
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005d36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d3a:	4b3e      	ldr	r3, [pc, #248]	; (8005e34 <ETH_MACDMAConfig+0x390>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005d42:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005d44:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005d46:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005d48:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005d4a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005d4c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005d4e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005d50:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005d52:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005d54:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005d56:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005d58:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005d5a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005d5e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005d62:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005d64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d76:	3318      	adds	r3, #24
 8005d78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d7c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d86:	3318      	adds	r3, #24
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d8e:	2001      	movs	r0, #1
 8005d90:	f7fd fee8 	bl	8003b64 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9c:	3318      	adds	r3, #24
 8005d9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005da2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005da8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005dac:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005db0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005db4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005dba:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005dbe:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dcc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ddc:	2001      	movs	r0, #1
 8005dde:	f7fd fec1 	bl	8003b64 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005dee:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d10f      	bne.n	8005e18 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e00:	331c      	adds	r3, #28
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e14:	331c      	adds	r3, #28
 8005e16:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	2100      	movs	r1, #0
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f809 	bl	8005e38 <ETH_MACAddressConfig>
}
 8005e26:	bf00      	nop
 8005e28:	37c0      	adds	r7, #192	; 0xc0
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	ff20810f 	.word	0xff20810f
 8005e34:	f8de3f23 	.word	0xf8de3f23

08005e38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3305      	adds	r3, #5
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	3204      	adds	r2, #4
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <ETH_MACAddressConfig+0x68>)
 8005e5a:	4413      	add	r3, r2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3303      	adds	r3, #3
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	061a      	lsls	r2, r3, #24
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	041b      	lsls	r3, r3, #16
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3301      	adds	r3, #1
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	7812      	ldrb	r2, [r2, #0]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <ETH_MACAddressConfig+0x6c>)
 8005e8a:	4413      	add	r3, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	6013      	str	r3, [r2, #0]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40028040 	.word	0x40028040
 8005ea4:	40028044 	.word	0x40028044

08005ea8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0208 	orr.w	r2, r2, #8
 8005ec2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005ecc:	2001      	movs	r0, #1
 8005ece:	f000 f8e9 	bl	80060a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	601a      	str	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0208 	bic.w	r2, r2, #8
 8005efc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005f06:	2001      	movs	r0, #1
 8005f08:	f000 f8cc 	bl	80060a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0204 	orr.w	r2, r2, #4
 8005f36:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005f40:	2001      	movs	r0, #1
 8005f42:	f000 f8af 	bl	80060a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	601a      	str	r2, [r3, #0]
}
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0204 	bic.w	r2, r2, #4
 8005f70:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f000 f892 	bl	80060a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	601a      	str	r2, [r3, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb0:	3318      	adds	r3, #24
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd0:	3318      	adds	r3, #24
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe0:	3318      	adds	r3, #24
 8005fe2:	601a      	str	r2, [r3, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006000:	3318      	adds	r3, #24
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0202 	orr.w	r2, r2, #2
 800600c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006010:	3318      	adds	r3, #24
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006030:	3318      	adds	r3, #24
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0202 	bic.w	r2, r2, #2
 800603c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006040:	3318      	adds	r3, #24
 8006042:	601a      	str	r2, [r3, #0]
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006064:	3318      	adds	r3, #24
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006074:	3318      	adds	r3, #24
 8006076:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006080:	3318      	adds	r3, #24
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8006086:	2001      	movs	r0, #1
 8006088:	f000 f80c 	bl	80060a4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006096:	3318      	adds	r3, #24
 8006098:	601a      	str	r2, [r3, #0]
}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <ETH_Delay+0x38>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0b      	ldr	r2, [pc, #44]	; (80060e0 <ETH_Delay+0x3c>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	0a5b      	lsrs	r3, r3, #9
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80060c0:	bf00      	nop
  } 
  while (Delay --);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1e5a      	subs	r2, r3, #1
 80060c6:	60fa      	str	r2, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1f9      	bne.n	80060c0 <ETH_Delay+0x1c>
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000000 	.word	0x20000000
 80060e0:	10624dd3 	.word	0x10624dd3

080060e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	; 0x24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
 80060fe:	e16b      	b.n	80063d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006100:	2201      	movs	r2, #1
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4013      	ands	r3, r2
 8006112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	429a      	cmp	r2, r3
 800611a:	f040 815a 	bne.w	80063d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	2b01      	cmp	r3, #1
 8006128:	d005      	beq.n	8006136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006132:	2b02      	cmp	r3, #2
 8006134:	d130      	bne.n	8006198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	2203      	movs	r2, #3
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800616c:	2201      	movs	r2, #1
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 0201 	and.w	r2, r3, #1
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d017      	beq.n	80061d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	2203      	movs	r2, #3
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	43db      	mvns	r3, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4013      	ands	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d123      	bne.n	8006228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	08da      	lsrs	r2, r3, #3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3208      	adds	r2, #8
 80061e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	220f      	movs	r2, #15
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	43db      	mvns	r3, r3
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4013      	ands	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	08da      	lsrs	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3208      	adds	r2, #8
 8006222:	69b9      	ldr	r1, [r7, #24]
 8006224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	2203      	movs	r2, #3
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4013      	ands	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0203 	and.w	r2, r3, #3
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	4313      	orrs	r3, r2
 8006254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80b4 	beq.w	80063d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	4b60      	ldr	r3, [pc, #384]	; (80063f0 <HAL_GPIO_Init+0x30c>)
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	4a5f      	ldr	r2, [pc, #380]	; (80063f0 <HAL_GPIO_Init+0x30c>)
 8006274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006278:	6453      	str	r3, [r2, #68]	; 0x44
 800627a:	4b5d      	ldr	r3, [pc, #372]	; (80063f0 <HAL_GPIO_Init+0x30c>)
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006286:	4a5b      	ldr	r2, [pc, #364]	; (80063f4 <HAL_GPIO_Init+0x310>)
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	089b      	lsrs	r3, r3, #2
 800628c:	3302      	adds	r3, #2
 800628e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	220f      	movs	r2, #15
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43db      	mvns	r3, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4013      	ands	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a52      	ldr	r2, [pc, #328]	; (80063f8 <HAL_GPIO_Init+0x314>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d02b      	beq.n	800630a <HAL_GPIO_Init+0x226>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a51      	ldr	r2, [pc, #324]	; (80063fc <HAL_GPIO_Init+0x318>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d025      	beq.n	8006306 <HAL_GPIO_Init+0x222>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a50      	ldr	r2, [pc, #320]	; (8006400 <HAL_GPIO_Init+0x31c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01f      	beq.n	8006302 <HAL_GPIO_Init+0x21e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a4f      	ldr	r2, [pc, #316]	; (8006404 <HAL_GPIO_Init+0x320>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d019      	beq.n	80062fe <HAL_GPIO_Init+0x21a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a4e      	ldr	r2, [pc, #312]	; (8006408 <HAL_GPIO_Init+0x324>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <HAL_GPIO_Init+0x216>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a4d      	ldr	r2, [pc, #308]	; (800640c <HAL_GPIO_Init+0x328>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00d      	beq.n	80062f6 <HAL_GPIO_Init+0x212>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a4c      	ldr	r2, [pc, #304]	; (8006410 <HAL_GPIO_Init+0x32c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d007      	beq.n	80062f2 <HAL_GPIO_Init+0x20e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a4b      	ldr	r2, [pc, #300]	; (8006414 <HAL_GPIO_Init+0x330>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_GPIO_Init+0x20a>
 80062ea:	2307      	movs	r3, #7
 80062ec:	e00e      	b.n	800630c <HAL_GPIO_Init+0x228>
 80062ee:	2308      	movs	r3, #8
 80062f0:	e00c      	b.n	800630c <HAL_GPIO_Init+0x228>
 80062f2:	2306      	movs	r3, #6
 80062f4:	e00a      	b.n	800630c <HAL_GPIO_Init+0x228>
 80062f6:	2305      	movs	r3, #5
 80062f8:	e008      	b.n	800630c <HAL_GPIO_Init+0x228>
 80062fa:	2304      	movs	r3, #4
 80062fc:	e006      	b.n	800630c <HAL_GPIO_Init+0x228>
 80062fe:	2303      	movs	r3, #3
 8006300:	e004      	b.n	800630c <HAL_GPIO_Init+0x228>
 8006302:	2302      	movs	r3, #2
 8006304:	e002      	b.n	800630c <HAL_GPIO_Init+0x228>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <HAL_GPIO_Init+0x228>
 800630a:	2300      	movs	r3, #0
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	f002 0203 	and.w	r2, r2, #3
 8006312:	0092      	lsls	r2, r2, #2
 8006314:	4093      	lsls	r3, r2
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	4313      	orrs	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800631c:	4935      	ldr	r1, [pc, #212]	; (80063f4 <HAL_GPIO_Init+0x310>)
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	089b      	lsrs	r3, r3, #2
 8006322:	3302      	adds	r3, #2
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800632a:	4b3b      	ldr	r3, [pc, #236]	; (8006418 <HAL_GPIO_Init+0x334>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	43db      	mvns	r3, r3
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	4013      	ands	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800634e:	4a32      	ldr	r2, [pc, #200]	; (8006418 <HAL_GPIO_Init+0x334>)
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006354:	4b30      	ldr	r3, [pc, #192]	; (8006418 <HAL_GPIO_Init+0x334>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	43db      	mvns	r3, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4013      	ands	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006378:	4a27      	ldr	r2, [pc, #156]	; (8006418 <HAL_GPIO_Init+0x334>)
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800637e:	4b26      	ldr	r3, [pc, #152]	; (8006418 <HAL_GPIO_Init+0x334>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	43db      	mvns	r3, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4013      	ands	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063a2:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <HAL_GPIO_Init+0x334>)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063a8:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <HAL_GPIO_Init+0x334>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	43db      	mvns	r3, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063cc:	4a12      	ldr	r2, [pc, #72]	; (8006418 <HAL_GPIO_Init+0x334>)
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	3301      	adds	r3, #1
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	2b0f      	cmp	r3, #15
 80063dc:	f67f ae90 	bls.w	8006100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	3724      	adds	r7, #36	; 0x24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40023800 	.word	0x40023800
 80063f4:	40013800 	.word	0x40013800
 80063f8:	40020000 	.word	0x40020000
 80063fc:	40020400 	.word	0x40020400
 8006400:	40020800 	.word	0x40020800
 8006404:	40020c00 	.word	0x40020c00
 8006408:	40021000 	.word	0x40021000
 800640c:	40021400 	.word	0x40021400
 8006410:	40021800 	.word	0x40021800
 8006414:	40021c00 	.word	0x40021c00
 8006418:	40013c00 	.word	0x40013c00

0800641c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	887b      	ldrh	r3, [r7, #2]
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
 8006438:	e001      	b.n	800643e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	807b      	strh	r3, [r7, #2]
 8006458:	4613      	mov	r3, r2
 800645a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800645c:	787b      	ldrb	r3, [r7, #1]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006462:	887a      	ldrh	r2, [r7, #2]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006468:	e003      	b.n	8006472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800646a:	887b      	ldrh	r3, [r7, #2]
 800646c:	041a      	lsls	r2, r3, #16
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	619a      	str	r2, [r3, #24]
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006490:	887a      	ldrh	r2, [r7, #2]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4013      	ands	r3, r2
 8006496:	041a      	lsls	r2, r3, #16
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	43d9      	mvns	r1, r3
 800649c:	887b      	ldrh	r3, [r7, #2]
 800649e:	400b      	ands	r3, r1
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	619a      	str	r2, [r3, #24]
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
	...

080064b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e12b      	b.n	800671e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fb f980 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2224      	movs	r2, #36	; 0x24
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006518:	f001 fcb0 	bl	8007e7c <HAL_RCC_GetPCLK1Freq>
 800651c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4a81      	ldr	r2, [pc, #516]	; (8006728 <HAL_I2C_Init+0x274>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d807      	bhi.n	8006538 <HAL_I2C_Init+0x84>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a80      	ldr	r2, [pc, #512]	; (800672c <HAL_I2C_Init+0x278>)
 800652c:	4293      	cmp	r3, r2
 800652e:	bf94      	ite	ls
 8006530:	2301      	movls	r3, #1
 8006532:	2300      	movhi	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	e006      	b.n	8006546 <HAL_I2C_Init+0x92>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a7d      	ldr	r2, [pc, #500]	; (8006730 <HAL_I2C_Init+0x27c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	bf94      	ite	ls
 8006540:	2301      	movls	r3, #1
 8006542:	2300      	movhi	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e0e7      	b.n	800671e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a78      	ldr	r2, [pc, #480]	; (8006734 <HAL_I2C_Init+0x280>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	0c9b      	lsrs	r3, r3, #18
 8006558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	4a6a      	ldr	r2, [pc, #424]	; (8006728 <HAL_I2C_Init+0x274>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d802      	bhi.n	8006588 <HAL_I2C_Init+0xd4>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	3301      	adds	r3, #1
 8006586:	e009      	b.n	800659c <HAL_I2C_Init+0xe8>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	4a69      	ldr	r2, [pc, #420]	; (8006738 <HAL_I2C_Init+0x284>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	099b      	lsrs	r3, r3, #6
 800659a:	3301      	adds	r3, #1
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	495c      	ldr	r1, [pc, #368]	; (8006728 <HAL_I2C_Init+0x274>)
 80065b8:	428b      	cmp	r3, r1
 80065ba:	d819      	bhi.n	80065f0 <HAL_I2C_Init+0x13c>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	1e59      	subs	r1, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ca:	1c59      	adds	r1, r3, #1
 80065cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065d0:	400b      	ands	r3, r1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <HAL_I2C_Init+0x138>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1e59      	subs	r1, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ea:	e051      	b.n	8006690 <HAL_I2C_Init+0x1dc>
 80065ec:	2304      	movs	r3, #4
 80065ee:	e04f      	b.n	8006690 <HAL_I2C_Init+0x1dc>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d111      	bne.n	800661c <HAL_I2C_Init+0x168>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	1e58      	subs	r0, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6859      	ldr	r1, [r3, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	440b      	add	r3, r1
 8006606:	fbb0 f3f3 	udiv	r3, r0, r3
 800660a:	3301      	adds	r3, #1
 800660c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	e012      	b.n	8006642 <HAL_I2C_Init+0x18e>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1e58      	subs	r0, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6859      	ldr	r1, [r3, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	0099      	lsls	r1, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006632:	3301      	adds	r3, #1
 8006634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006638:	2b00      	cmp	r3, #0
 800663a:	bf0c      	ite	eq
 800663c:	2301      	moveq	r3, #1
 800663e:	2300      	movne	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_I2C_Init+0x196>
 8006646:	2301      	movs	r3, #1
 8006648:	e022      	b.n	8006690 <HAL_I2C_Init+0x1dc>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10e      	bne.n	8006670 <HAL_I2C_Init+0x1bc>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1e58      	subs	r0, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	440b      	add	r3, r1
 8006660:	fbb0 f3f3 	udiv	r3, r0, r3
 8006664:	3301      	adds	r3, #1
 8006666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800666a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666e:	e00f      	b.n	8006690 <HAL_I2C_Init+0x1dc>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1e58      	subs	r0, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6859      	ldr	r1, [r3, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	0099      	lsls	r1, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	fbb0 f3f3 	udiv	r3, r0, r3
 8006686:	3301      	adds	r3, #1
 8006688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	6809      	ldr	r1, [r1, #0]
 8006694:	4313      	orrs	r3, r2
 8006696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69da      	ldr	r2, [r3, #28]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6911      	ldr	r1, [r2, #16]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	68d2      	ldr	r2, [r2, #12]
 80066ca:	4311      	orrs	r1, r2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	000186a0 	.word	0x000186a0
 800672c:	001e847f 	.word	0x001e847f
 8006730:	003d08ff 	.word	0x003d08ff
 8006734:	431bde83 	.word	0x431bde83
 8006738:	10624dd3 	.word	0x10624dd3

0800673c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	461a      	mov	r2, r3
 8006748:	460b      	mov	r3, r1
 800674a:	817b      	strh	r3, [r7, #10]
 800674c:	4613      	mov	r3, r2
 800674e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006750:	f7fd f9fc 	bl	8003b4c <HAL_GetTick>
 8006754:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b20      	cmp	r3, #32
 8006760:	f040 80e0 	bne.w	8006924 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2319      	movs	r3, #25
 800676a:	2201      	movs	r2, #1
 800676c:	4970      	ldr	r1, [pc, #448]	; (8006930 <HAL_I2C_Master_Transmit+0x1f4>)
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fd86 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800677a:	2302      	movs	r3, #2
 800677c:	e0d3      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_I2C_Master_Transmit+0x50>
 8006788:	2302      	movs	r3, #2
 800678a:	e0cc      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d007      	beq.n	80067b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2221      	movs	r2, #33	; 0x21
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2210      	movs	r2, #16
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	893a      	ldrh	r2, [r7, #8]
 80067e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4a50      	ldr	r2, [pc, #320]	; (8006934 <HAL_I2C_Master_Transmit+0x1f8>)
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80067f4:	8979      	ldrh	r1, [r7, #10]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	6a3a      	ldr	r2, [r7, #32]
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fbf0 	bl	8006fe0 <I2C_MasterRequestWrite>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e08d      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006820:	e066      	b.n	80068f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	6a39      	ldr	r1, [r7, #32]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fe00 	bl	800742c <I2C_WaitOnTXEFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	2b04      	cmp	r3, #4
 8006838:	d107      	bne.n	800684a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e06b      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b04      	cmp	r3, #4
 800688a:	d11b      	bne.n	80068c4 <HAL_I2C_Master_Transmit+0x188>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	d017      	beq.n	80068c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	6a39      	ldr	r1, [r7, #32]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fdf0 	bl	80074ae <I2C_WaitOnBTFFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00d      	beq.n	80068f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d107      	bne.n	80068ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e01a      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d194      	bne.n	8006822 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e000      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006924:	2302      	movs	r3, #2
  }
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	00100002 	.word	0x00100002
 8006934:	ffff0000 	.word	0xffff0000

08006938 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08c      	sub	sp, #48	; 0x30
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	461a      	mov	r2, r3
 8006944:	460b      	mov	r3, r1
 8006946:	817b      	strh	r3, [r7, #10]
 8006948:	4613      	mov	r3, r2
 800694a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800694c:	f7fd f8fe 	bl	8003b4c <HAL_GetTick>
 8006950:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b20      	cmp	r3, #32
 800695c:	f040 820b 	bne.w	8006d76 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	2319      	movs	r3, #25
 8006966:	2201      	movs	r2, #1
 8006968:	497c      	ldr	r1, [pc, #496]	; (8006b5c <HAL_I2C_Master_Receive+0x224>)
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fc88 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006976:	2302      	movs	r3, #2
 8006978:	e1fe      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_I2C_Master_Receive+0x50>
 8006984:	2302      	movs	r3, #2
 8006986:	e1f7      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b01      	cmp	r3, #1
 800699c:	d007      	beq.n	80069ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2222      	movs	r2, #34	; 0x22
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2210      	movs	r2, #16
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	893a      	ldrh	r2, [r7, #8]
 80069de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a5c      	ldr	r2, [pc, #368]	; (8006b60 <HAL_I2C_Master_Receive+0x228>)
 80069ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069f0:	8979      	ldrh	r1, [r7, #10]
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fb74 	bl	80070e4 <I2C_MasterRequestRead>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e1b8      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d113      	bne.n	8006a36 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	623b      	str	r3, [r7, #32]
 8006a22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e18c      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d11b      	bne.n	8006a76 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e16c      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d11b      	bne.n	8006ab6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	e14c      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ac4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006adc:	e138      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	f200 80f1 	bhi.w	8006cca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d123      	bne.n	8006b38 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fd1b 	bl	8007530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e139      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b36:	e10b      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d14e      	bne.n	8006bde <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	2200      	movs	r2, #0
 8006b48:	4906      	ldr	r1, [pc, #24]	; (8006b64 <HAL_I2C_Master_Receive+0x22c>)
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 fb98 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d008      	beq.n	8006b68 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e10e      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
 8006b5a:	bf00      	nop
 8006b5c:	00100002 	.word	0x00100002
 8006b60:	ffff0000 	.word	0xffff0000
 8006b64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bdc:	e0b8      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	2200      	movs	r2, #0
 8006be6:	4966      	ldr	r1, [pc, #408]	; (8006d80 <HAL_I2C_Master_Receive+0x448>)
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fb49 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0bf      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	2200      	movs	r2, #0
 8006c42:	494f      	ldr	r1, [pc, #316]	; (8006d80 <HAL_I2C_Master_Receive+0x448>)
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fb1b 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e091      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cc8:	e042      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fc2e 	bl	8007530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e04c      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d118      	bne.n	8006d50 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f47f aec2 	bne.w	8006ade <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e000      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d76:	2302      	movs	r3, #2
  }
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3728      	adds	r7, #40	; 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	00010004 	.word	0x00010004

08006d84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	; 0x28
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	460b      	mov	r3, r1
 8006d92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006d94:	f7fc feda 	bl	8003b4c <HAL_GetTick>
 8006d98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	f040 8111 	bne.w	8006fce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	2319      	movs	r3, #25
 8006db2:	2201      	movs	r2, #1
 8006db4:	4988      	ldr	r1, [pc, #544]	; (8006fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 fa62 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e104      	b.n	8006fd0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_I2C_IsDeviceReady+0x50>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e0fd      	b.n	8006fd0 <HAL_I2C_IsDeviceReady+0x24c>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d007      	beq.n	8006dfa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0201 	orr.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2224      	movs	r2, #36	; 0x24
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4a70      	ldr	r2, [pc, #448]	; (8006fdc <HAL_I2C_IsDeviceReady+0x258>)
 8006e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e2c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fa20 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00d      	beq.n	8006e62 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e54:	d103      	bne.n	8006e5e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e0b6      	b.n	8006fd0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e62:	897b      	ldrh	r3, [r7, #10]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e70:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006e72:	f7fc fe6b 	bl	8003b4c <HAL_GetTick>
 8006e76:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	bf0c      	ite	eq
 8006e86:	2301      	moveq	r3, #1
 8006e88:	2300      	movne	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9c:	bf0c      	ite	eq
 8006e9e:	2301      	moveq	r3, #1
 8006ea0:	2300      	movne	r3, #0
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006ea6:	e025      	b.n	8006ef4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ea8:	f7fc fe50 	bl	8003b4c <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d302      	bcc.n	8006ebe <HAL_I2C_IsDeviceReady+0x13a>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	22a0      	movs	r2, #160	; 0xa0
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	bf0c      	ite	eq
 8006ed4:	2301      	moveq	r3, #1
 8006ed6:	2300      	movne	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eea:	bf0c      	ite	eq
 8006eec:	2301      	moveq	r3, #1
 8006eee:	2300      	movne	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2ba0      	cmp	r3, #160	; 0xa0
 8006efe:	d005      	beq.n	8006f0c <HAL_I2C_IsDeviceReady+0x188>
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d102      	bne.n	8006f0c <HAL_I2C_IsDeviceReady+0x188>
 8006f06:	7dbb      	ldrb	r3, [r7, #22]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0cd      	beq.n	8006ea8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d129      	bne.n	8006f76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f30:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f32:	2300      	movs	r3, #0
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	613b      	str	r3, [r7, #16]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	2319      	movs	r3, #25
 8006f4e:	2201      	movs	r2, #1
 8006f50:	4921      	ldr	r1, [pc, #132]	; (8006fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 f994 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e036      	b.n	8006fd0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	e02c      	b.n	8006fd0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f84:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f8e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2319      	movs	r3, #25
 8006f96:	2201      	movs	r2, #1
 8006f98:	490f      	ldr	r1, [pc, #60]	; (8006fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 f970 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e012      	b.n	8006fd0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	3301      	adds	r3, #1
 8006fae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	f4ff af32 	bcc.w	8006e1e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006fce:	2302      	movs	r3, #2
  }
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	00100002 	.word	0x00100002
 8006fdc:	ffff0000 	.word	0xffff0000

08006fe0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	460b      	mov	r3, r1
 8006fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d006      	beq.n	800700a <I2C_MasterRequestWrite+0x2a>
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d003      	beq.n	800700a <I2C_MasterRequestWrite+0x2a>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007008:	d108      	bne.n	800701c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	e00b      	b.n	8007034 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007020:	2b12      	cmp	r3, #18
 8007022:	d107      	bne.n	8007034 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007032:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f91d 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00d      	beq.n	8007068 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705a:	d103      	bne.n	8007064 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e035      	b.n	80070d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007070:	d108      	bne.n	8007084 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007072:	897b      	ldrh	r3, [r7, #10]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007080:	611a      	str	r2, [r3, #16]
 8007082:	e01b      	b.n	80070bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007084:	897b      	ldrh	r3, [r7, #10]
 8007086:	11db      	asrs	r3, r3, #7
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 0306 	and.w	r3, r3, #6
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f063 030f 	orn	r3, r3, #15
 8007094:	b2da      	uxtb	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	490e      	ldr	r1, [pc, #56]	; (80070dc <I2C_MasterRequestWrite+0xfc>)
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f943 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e010      	b.n	80070d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070b2:	897b      	ldrh	r3, [r7, #10]
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4907      	ldr	r1, [pc, #28]	; (80070e0 <I2C_MasterRequestWrite+0x100>)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f933 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	00010008 	.word	0x00010008
 80070e0:	00010002 	.word	0x00010002

080070e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	460b      	mov	r3, r1
 80070f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007108:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b08      	cmp	r3, #8
 800710e:	d006      	beq.n	800711e <I2C_MasterRequestRead+0x3a>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d003      	beq.n	800711e <I2C_MasterRequestRead+0x3a>
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800711c:	d108      	bne.n	8007130 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	e00b      	b.n	8007148 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	2b11      	cmp	r3, #17
 8007136:	d107      	bne.n	8007148 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007146:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f893 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00d      	beq.n	800717c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800716e:	d103      	bne.n	8007178 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e079      	b.n	8007270 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007184:	d108      	bne.n	8007198 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007186:	897b      	ldrh	r3, [r7, #10]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	b2da      	uxtb	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	611a      	str	r2, [r3, #16]
 8007196:	e05f      	b.n	8007258 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007198:	897b      	ldrh	r3, [r7, #10]
 800719a:	11db      	asrs	r3, r3, #7
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f003 0306 	and.w	r3, r3, #6
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f063 030f 	orn	r3, r3, #15
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	4930      	ldr	r1, [pc, #192]	; (8007278 <I2C_MasterRequestRead+0x194>)
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f8b9 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e054      	b.n	8007270 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80071c6:	897b      	ldrh	r3, [r7, #10]
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4929      	ldr	r1, [pc, #164]	; (800727c <I2C_MasterRequestRead+0x198>)
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 f8a9 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e044      	b.n	8007270 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800720a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f831 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00d      	beq.n	8007240 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007232:	d103      	bne.n	800723c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800723a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e017      	b.n	8007270 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007240:	897b      	ldrh	r3, [r7, #10]
 8007242:	11db      	asrs	r3, r3, #7
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f003 0306 	and.w	r3, r3, #6
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f063 030e 	orn	r3, r3, #14
 8007250:	b2da      	uxtb	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	4907      	ldr	r1, [pc, #28]	; (800727c <I2C_MasterRequestRead+0x198>)
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f865 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e000      	b.n	8007270 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	00010008 	.word	0x00010008
 800727c:	00010002 	.word	0x00010002

08007280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007290:	e025      	b.n	80072de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d021      	beq.n	80072de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729a:	f7fc fc57 	bl	8003b4c <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d302      	bcc.n	80072b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d116      	bne.n	80072de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f043 0220 	orr.w	r2, r3, #32
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e023      	b.n	8007326 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d10d      	bne.n	8007304 <I2C_WaitOnFlagUntilTimeout+0x84>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	43da      	mvns	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	e00c      	b.n	800731e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	43da      	mvns	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4013      	ands	r3, r2
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	bf0c      	ite	eq
 8007316:	2301      	moveq	r3, #1
 8007318:	2300      	movne	r3, #0
 800731a:	b2db      	uxtb	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	429a      	cmp	r2, r3
 8007322:	d0b6      	beq.n	8007292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	607a      	str	r2, [r7, #4]
 800733a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800733c:	e051      	b.n	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734c:	d123      	bne.n	8007396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800735c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007366:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f043 0204 	orr.w	r2, r3, #4
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e046      	b.n	8007424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d021      	beq.n	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739e:	f7fc fbd5 	bl	8003b4c <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d116      	bne.n	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	f043 0220 	orr.w	r2, r3, #32
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e020      	b.n	8007424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d10c      	bne.n	8007406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	43da      	mvns	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf14      	ite	ne
 80073fe:	2301      	movne	r3, #1
 8007400:	2300      	moveq	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	e00b      	b.n	800741e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	43da      	mvns	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4013      	ands	r3, r2
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	bf14      	ite	ne
 8007418:	2301      	movne	r3, #1
 800741a:	2300      	moveq	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d18d      	bne.n	800733e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007438:	e02d      	b.n	8007496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f8ce 	bl	80075dc <I2C_IsAcknowledgeFailed>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e02d      	b.n	80074a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d021      	beq.n	8007496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007452:	f7fc fb7b 	bl	8003b4c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	429a      	cmp	r2, r3
 8007460:	d302      	bcc.n	8007468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d116      	bne.n	8007496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f043 0220 	orr.w	r2, r3, #32
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e007      	b.n	80074a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	2b80      	cmp	r3, #128	; 0x80
 80074a2:	d1ca      	bne.n	800743a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074ba:	e02d      	b.n	8007518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f88d 	bl	80075dc <I2C_IsAcknowledgeFailed>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e02d      	b.n	8007528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d021      	beq.n	8007518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d4:	f7fc fb3a 	bl	8003b4c <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d302      	bcc.n	80074ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d116      	bne.n	8007518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e007      	b.n	8007528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b04      	cmp	r3, #4
 8007524:	d1ca      	bne.n	80074bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800753c:	e042      	b.n	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b10      	cmp	r3, #16
 800754a:	d119      	bne.n	8007580 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0210 	mvn.w	r2, #16
 8007554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2220      	movs	r2, #32
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e029      	b.n	80075d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007580:	f7fc fae4 	bl	8003b4c <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	429a      	cmp	r2, r3
 800758e:	d302      	bcc.n	8007596 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d116      	bne.n	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	f043 0220 	orr.w	r2, r3, #32
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e007      	b.n	80075d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ce:	2b40      	cmp	r3, #64	; 0x40
 80075d0:	d1b5      	bne.n	800753e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f2:	d11b      	bne.n	800762c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	f043 0204 	orr.w	r2, r3, #4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e264      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d075      	beq.n	8007746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800765a:	4ba3      	ldr	r3, [pc, #652]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f003 030c 	and.w	r3, r3, #12
 8007662:	2b04      	cmp	r3, #4
 8007664:	d00c      	beq.n	8007680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007666:	4ba0      	ldr	r3, [pc, #640]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800766e:	2b08      	cmp	r3, #8
 8007670:	d112      	bne.n	8007698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007672:	4b9d      	ldr	r3, [pc, #628]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800767a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800767e:	d10b      	bne.n	8007698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007680:	4b99      	ldr	r3, [pc, #612]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05b      	beq.n	8007744 <HAL_RCC_OscConfig+0x108>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d157      	bne.n	8007744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e23f      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a0:	d106      	bne.n	80076b0 <HAL_RCC_OscConfig+0x74>
 80076a2:	4b91      	ldr	r3, [pc, #580]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a90      	ldr	r2, [pc, #576]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e01d      	b.n	80076ec <HAL_RCC_OscConfig+0xb0>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076b8:	d10c      	bne.n	80076d4 <HAL_RCC_OscConfig+0x98>
 80076ba:	4b8b      	ldr	r3, [pc, #556]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a8a      	ldr	r2, [pc, #552]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	4b88      	ldr	r3, [pc, #544]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a87      	ldr	r2, [pc, #540]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	e00b      	b.n	80076ec <HAL_RCC_OscConfig+0xb0>
 80076d4:	4b84      	ldr	r3, [pc, #528]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a83      	ldr	r2, [pc, #524]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	4b81      	ldr	r3, [pc, #516]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a80      	ldr	r2, [pc, #512]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80076e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d013      	beq.n	800771c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f4:	f7fc fa2a 	bl	8003b4c <HAL_GetTick>
 80076f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076fa:	e008      	b.n	800770e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076fc:	f7fc fa26 	bl	8003b4c <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b64      	cmp	r3, #100	; 0x64
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e204      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800770e:	4b76      	ldr	r3, [pc, #472]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f0      	beq.n	80076fc <HAL_RCC_OscConfig+0xc0>
 800771a:	e014      	b.n	8007746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771c:	f7fc fa16 	bl	8003b4c <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007724:	f7fc fa12 	bl	8003b4c <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b64      	cmp	r3, #100	; 0x64
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e1f0      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007736:	4b6c      	ldr	r3, [pc, #432]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f0      	bne.n	8007724 <HAL_RCC_OscConfig+0xe8>
 8007742:	e000      	b.n	8007746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d063      	beq.n	800781a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007752:	4b65      	ldr	r3, [pc, #404]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 030c 	and.w	r3, r3, #12
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800775e:	4b62      	ldr	r3, [pc, #392]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007766:	2b08      	cmp	r3, #8
 8007768:	d11c      	bne.n	80077a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800776a:	4b5f      	ldr	r3, [pc, #380]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d116      	bne.n	80077a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007776:	4b5c      	ldr	r3, [pc, #368]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <HAL_RCC_OscConfig+0x152>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d001      	beq.n	800778e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e1c4      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800778e:	4b56      	ldr	r3, [pc, #344]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	4952      	ldr	r1, [pc, #328]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077a2:	e03a      	b.n	800781a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d020      	beq.n	80077ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077ac:	4b4f      	ldr	r3, [pc, #316]	; (80078ec <HAL_RCC_OscConfig+0x2b0>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b2:	f7fc f9cb 	bl	8003b4c <HAL_GetTick>
 80077b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b8:	e008      	b.n	80077cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077ba:	f7fc f9c7 	bl	8003b4c <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d901      	bls.n	80077cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e1a5      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077cc:	4b46      	ldr	r3, [pc, #280]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0f0      	beq.n	80077ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077d8:	4b43      	ldr	r3, [pc, #268]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	4940      	ldr	r1, [pc, #256]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	600b      	str	r3, [r1, #0]
 80077ec:	e015      	b.n	800781a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ee:	4b3f      	ldr	r3, [pc, #252]	; (80078ec <HAL_RCC_OscConfig+0x2b0>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f4:	f7fc f9aa 	bl	8003b4c <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077fc:	f7fc f9a6 	bl	8003b4c <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e184      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800780e:	4b36      	ldr	r3, [pc, #216]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f0      	bne.n	80077fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d030      	beq.n	8007888 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d016      	beq.n	800785c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800782e:	4b30      	ldr	r3, [pc, #192]	; (80078f0 <HAL_RCC_OscConfig+0x2b4>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007834:	f7fc f98a 	bl	8003b4c <HAL_GetTick>
 8007838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800783a:	e008      	b.n	800784e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800783c:	f7fc f986 	bl	8003b4c <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d901      	bls.n	800784e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e164      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800784e:	4b26      	ldr	r3, [pc, #152]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 8007850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0f0      	beq.n	800783c <HAL_RCC_OscConfig+0x200>
 800785a:	e015      	b.n	8007888 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800785c:	4b24      	ldr	r3, [pc, #144]	; (80078f0 <HAL_RCC_OscConfig+0x2b4>)
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007862:	f7fc f973 	bl	8003b4c <HAL_GetTick>
 8007866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007868:	e008      	b.n	800787c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800786a:	f7fc f96f 	bl	8003b4c <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d901      	bls.n	800787c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e14d      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800787c:	4b1a      	ldr	r3, [pc, #104]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 800787e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1f0      	bne.n	800786a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 80a0 	beq.w	80079d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10f      	bne.n	80078c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078a6:	2300      	movs	r3, #0
 80078a8:	60bb      	str	r3, [r7, #8]
 80078aa:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	4a0e      	ldr	r2, [pc, #56]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80078b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b4:	6413      	str	r3, [r2, #64]	; 0x40
 80078b6:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <HAL_RCC_OscConfig+0x2ac>)
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078be:	60bb      	str	r3, [r7, #8]
 80078c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078c6:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <HAL_RCC_OscConfig+0x2b8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d121      	bne.n	8007916 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078d2:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <HAL_RCC_OscConfig+0x2b8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a07      	ldr	r2, [pc, #28]	; (80078f4 <HAL_RCC_OscConfig+0x2b8>)
 80078d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078de:	f7fc f935 	bl	8003b4c <HAL_GetTick>
 80078e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e4:	e011      	b.n	800790a <HAL_RCC_OscConfig+0x2ce>
 80078e6:	bf00      	nop
 80078e8:	40023800 	.word	0x40023800
 80078ec:	42470000 	.word	0x42470000
 80078f0:	42470e80 	.word	0x42470e80
 80078f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f8:	f7fc f928 	bl	8003b4c <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e106      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800790a:	4b85      	ldr	r3, [pc, #532]	; (8007b20 <HAL_RCC_OscConfig+0x4e4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f0      	beq.n	80078f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d106      	bne.n	800792c <HAL_RCC_OscConfig+0x2f0>
 800791e:	4b81      	ldr	r3, [pc, #516]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	4a80      	ldr	r2, [pc, #512]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	6713      	str	r3, [r2, #112]	; 0x70
 800792a:	e01c      	b.n	8007966 <HAL_RCC_OscConfig+0x32a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b05      	cmp	r3, #5
 8007932:	d10c      	bne.n	800794e <HAL_RCC_OscConfig+0x312>
 8007934:	4b7b      	ldr	r3, [pc, #492]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007938:	4a7a      	ldr	r2, [pc, #488]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 800793a:	f043 0304 	orr.w	r3, r3, #4
 800793e:	6713      	str	r3, [r2, #112]	; 0x70
 8007940:	4b78      	ldr	r3, [pc, #480]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007944:	4a77      	ldr	r2, [pc, #476]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	6713      	str	r3, [r2, #112]	; 0x70
 800794c:	e00b      	b.n	8007966 <HAL_RCC_OscConfig+0x32a>
 800794e:	4b75      	ldr	r3, [pc, #468]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007952:	4a74      	ldr	r2, [pc, #464]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	6713      	str	r3, [r2, #112]	; 0x70
 800795a:	4b72      	ldr	r3, [pc, #456]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 800795c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795e:	4a71      	ldr	r2, [pc, #452]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007960:	f023 0304 	bic.w	r3, r3, #4
 8007964:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d015      	beq.n	800799a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800796e:	f7fc f8ed 	bl	8003b4c <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007974:	e00a      	b.n	800798c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007976:	f7fc f8e9 	bl	8003b4c <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	f241 3288 	movw	r2, #5000	; 0x1388
 8007984:	4293      	cmp	r3, r2
 8007986:	d901      	bls.n	800798c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e0c5      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800798c:	4b65      	ldr	r3, [pc, #404]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 800798e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0ee      	beq.n	8007976 <HAL_RCC_OscConfig+0x33a>
 8007998:	e014      	b.n	80079c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800799a:	f7fc f8d7 	bl	8003b4c <HAL_GetTick>
 800799e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079a0:	e00a      	b.n	80079b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a2:	f7fc f8d3 	bl	8003b4c <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e0af      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b8:	4b5a      	ldr	r3, [pc, #360]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 80079ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1ee      	bne.n	80079a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d105      	bne.n	80079d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ca:	4b56      	ldr	r3, [pc, #344]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	4a55      	ldr	r2, [pc, #340]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 80079d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 809b 	beq.w	8007b16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079e0:	4b50      	ldr	r3, [pc, #320]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 030c 	and.w	r3, r3, #12
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d05c      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d141      	bne.n	8007a78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079f4:	4b4c      	ldr	r3, [pc, #304]	; (8007b28 <HAL_RCC_OscConfig+0x4ec>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079fa:	f7fc f8a7 	bl	8003b4c <HAL_GetTick>
 80079fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a00:	e008      	b.n	8007a14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a02:	f7fc f8a3 	bl	8003b4c <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e081      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a14:	4b43      	ldr	r3, [pc, #268]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1f0      	bne.n	8007a02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	019b      	lsls	r3, r3, #6
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	041b      	lsls	r3, r3, #16
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	061b      	lsls	r3, r3, #24
 8007a44:	4937      	ldr	r1, [pc, #220]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a4a:	4b37      	ldr	r3, [pc, #220]	; (8007b28 <HAL_RCC_OscConfig+0x4ec>)
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a50:	f7fc f87c 	bl	8003b4c <HAL_GetTick>
 8007a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a58:	f7fc f878 	bl	8003b4c <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e056      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a6a:	4b2e      	ldr	r3, [pc, #184]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCC_OscConfig+0x41c>
 8007a76:	e04e      	b.n	8007b16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a78:	4b2b      	ldr	r3, [pc, #172]	; (8007b28 <HAL_RCC_OscConfig+0x4ec>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7e:	f7fc f865 	bl	8003b4c <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a86:	f7fc f861 	bl	8003b4c <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e03f      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a98:	4b22      	ldr	r3, [pc, #136]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1f0      	bne.n	8007a86 <HAL_RCC_OscConfig+0x44a>
 8007aa4:	e037      	b.n	8007b16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e032      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ab2:	4b1c      	ldr	r3, [pc, #112]	; (8007b24 <HAL_RCC_OscConfig+0x4e8>)
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d028      	beq.n	8007b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d121      	bne.n	8007b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d11a      	bne.n	8007b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ae8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d111      	bne.n	8007b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af8:	085b      	lsrs	r3, r3, #1
 8007afa:	3b01      	subs	r3, #1
 8007afc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d107      	bne.n	8007b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d001      	beq.n	8007b16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	40007000 	.word	0x40007000
 8007b24:	40023800 	.word	0x40023800
 8007b28:	42470060 	.word	0x42470060

08007b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e0cc      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b40:	4b68      	ldr	r3, [pc, #416]	; (8007ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0307 	and.w	r3, r3, #7
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d90c      	bls.n	8007b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b4e:	4b65      	ldr	r3, [pc, #404]	; (8007ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	b2d2      	uxtb	r2, r2
 8007b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b56:	4b63      	ldr	r3, [pc, #396]	; (8007ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0307 	and.w	r3, r3, #7
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d001      	beq.n	8007b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e0b8      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d020      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b80:	4b59      	ldr	r3, [pc, #356]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	4a58      	ldr	r2, [pc, #352]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0308 	and.w	r3, r3, #8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b98:	4b53      	ldr	r3, [pc, #332]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	4a52      	ldr	r2, [pc, #328]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ba4:	4b50      	ldr	r3, [pc, #320]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	494d      	ldr	r1, [pc, #308]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d044      	beq.n	8007c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d107      	bne.n	8007bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bca:	4b47      	ldr	r3, [pc, #284]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d119      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e07f      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d003      	beq.n	8007bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d107      	bne.n	8007bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bea:	4b3f      	ldr	r3, [pc, #252]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e06f      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bfa:	4b3b      	ldr	r3, [pc, #236]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e067      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c0a:	4b37      	ldr	r3, [pc, #220]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f023 0203 	bic.w	r2, r3, #3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	4934      	ldr	r1, [pc, #208]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c1c:	f7fb ff96 	bl	8003b4c <HAL_GetTick>
 8007c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c22:	e00a      	b.n	8007c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c24:	f7fb ff92 	bl	8003b4c <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d901      	bls.n	8007c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e04f      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3a:	4b2b      	ldr	r3, [pc, #172]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 020c 	and.w	r2, r3, #12
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d1eb      	bne.n	8007c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c4c:	4b25      	ldr	r3, [pc, #148]	; (8007ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d20c      	bcs.n	8007c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c5a:	4b22      	ldr	r3, [pc, #136]	; (8007ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c62:	4b20      	ldr	r3, [pc, #128]	; (8007ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d001      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e032      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c80:	4b19      	ldr	r3, [pc, #100]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4916      	ldr	r1, [pc, #88]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d009      	beq.n	8007cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c9e:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	490e      	ldr	r1, [pc, #56]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cb2:	f000 f821 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	4b0b      	ldr	r3, [pc, #44]	; (8007ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	091b      	lsrs	r3, r3, #4
 8007cbe:	f003 030f 	and.w	r3, r3, #15
 8007cc2:	490a      	ldr	r1, [pc, #40]	; (8007cec <HAL_RCC_ClockConfig+0x1c0>)
 8007cc4:	5ccb      	ldrb	r3, [r1, r3]
 8007cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cca:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7f9 fef8 	bl	8001ac8 <HAL_InitTick>

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40023c00 	.word	0x40023c00
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	080210a8 	.word	0x080210a8
 8007cf0:	20000000 	.word	0x20000000
 8007cf4:	200000d8 	.word	0x200000d8

08007cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cf8:	b5b0      	push	{r4, r5, r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007cfe:	2100      	movs	r1, #0
 8007d00:	6079      	str	r1, [r7, #4]
 8007d02:	2100      	movs	r1, #0
 8007d04:	60f9      	str	r1, [r7, #12]
 8007d06:	2100      	movs	r1, #0
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d0e:	4952      	ldr	r1, [pc, #328]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d10:	6889      	ldr	r1, [r1, #8]
 8007d12:	f001 010c 	and.w	r1, r1, #12
 8007d16:	2908      	cmp	r1, #8
 8007d18:	d00d      	beq.n	8007d36 <HAL_RCC_GetSysClockFreq+0x3e>
 8007d1a:	2908      	cmp	r1, #8
 8007d1c:	f200 8094 	bhi.w	8007e48 <HAL_RCC_GetSysClockFreq+0x150>
 8007d20:	2900      	cmp	r1, #0
 8007d22:	d002      	beq.n	8007d2a <HAL_RCC_GetSysClockFreq+0x32>
 8007d24:	2904      	cmp	r1, #4
 8007d26:	d003      	beq.n	8007d30 <HAL_RCC_GetSysClockFreq+0x38>
 8007d28:	e08e      	b.n	8007e48 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d2a:	4b4c      	ldr	r3, [pc, #304]	; (8007e5c <HAL_RCC_GetSysClockFreq+0x164>)
 8007d2c:	60bb      	str	r3, [r7, #8]
       break;
 8007d2e:	e08e      	b.n	8007e4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d30:	4b4b      	ldr	r3, [pc, #300]	; (8007e60 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d32:	60bb      	str	r3, [r7, #8]
      break;
 8007d34:	e08b      	b.n	8007e4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d36:	4948      	ldr	r1, [pc, #288]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d38:	6849      	ldr	r1, [r1, #4]
 8007d3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007d3e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d40:	4945      	ldr	r1, [pc, #276]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d42:	6849      	ldr	r1, [r1, #4]
 8007d44:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	d024      	beq.n	8007d96 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d4c:	4942      	ldr	r1, [pc, #264]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d4e:	6849      	ldr	r1, [r1, #4]
 8007d50:	0989      	lsrs	r1, r1, #6
 8007d52:	4608      	mov	r0, r1
 8007d54:	f04f 0100 	mov.w	r1, #0
 8007d58:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007d5c:	f04f 0500 	mov.w	r5, #0
 8007d60:	ea00 0204 	and.w	r2, r0, r4
 8007d64:	ea01 0305 	and.w	r3, r1, r5
 8007d68:	493d      	ldr	r1, [pc, #244]	; (8007e60 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d6a:	fb01 f003 	mul.w	r0, r1, r3
 8007d6e:	2100      	movs	r1, #0
 8007d70:	fb01 f102 	mul.w	r1, r1, r2
 8007d74:	1844      	adds	r4, r0, r1
 8007d76:	493a      	ldr	r1, [pc, #232]	; (8007e60 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d78:	fba2 0101 	umull	r0, r1, r2, r1
 8007d7c:	1863      	adds	r3, r4, r1
 8007d7e:	4619      	mov	r1, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	461a      	mov	r2, r3
 8007d84:	f04f 0300 	mov.w	r3, #0
 8007d88:	f7f8 ff56 	bl	8000c38 <__aeabi_uldivmod>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4613      	mov	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	e04a      	b.n	8007e2c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d96:	4b30      	ldr	r3, [pc, #192]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	099b      	lsrs	r3, r3, #6
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007da6:	f04f 0100 	mov.w	r1, #0
 8007daa:	ea02 0400 	and.w	r4, r2, r0
 8007dae:	ea03 0501 	and.w	r5, r3, r1
 8007db2:	4620      	mov	r0, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	f04f 0200 	mov.w	r2, #0
 8007dba:	f04f 0300 	mov.w	r3, #0
 8007dbe:	014b      	lsls	r3, r1, #5
 8007dc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007dc4:	0142      	lsls	r2, r0, #5
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	4619      	mov	r1, r3
 8007dca:	1b00      	subs	r0, r0, r4
 8007dcc:	eb61 0105 	sbc.w	r1, r1, r5
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	018b      	lsls	r3, r1, #6
 8007dda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007dde:	0182      	lsls	r2, r0, #6
 8007de0:	1a12      	subs	r2, r2, r0
 8007de2:	eb63 0301 	sbc.w	r3, r3, r1
 8007de6:	f04f 0000 	mov.w	r0, #0
 8007dea:	f04f 0100 	mov.w	r1, #0
 8007dee:	00d9      	lsls	r1, r3, #3
 8007df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007df4:	00d0      	lsls	r0, r2, #3
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	1912      	adds	r2, r2, r4
 8007dfc:	eb45 0303 	adc.w	r3, r5, r3
 8007e00:	f04f 0000 	mov.w	r0, #0
 8007e04:	f04f 0100 	mov.w	r1, #0
 8007e08:	0299      	lsls	r1, r3, #10
 8007e0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e0e:	0290      	lsls	r0, r2, #10
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4610      	mov	r0, r2
 8007e16:	4619      	mov	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f04f 0300 	mov.w	r3, #0
 8007e20:	f7f8 ff0a 	bl	8000c38 <__aeabi_uldivmod>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4613      	mov	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	0c1b      	lsrs	r3, r3, #16
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	3301      	adds	r3, #1
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e44:	60bb      	str	r3, [r7, #8]
      break;
 8007e46:	e002      	b.n	8007e4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <HAL_RCC_GetSysClockFreq+0x164>)
 8007e4a:	60bb      	str	r3, [r7, #8]
      break;
 8007e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bdb0      	pop	{r4, r5, r7, pc}
 8007e58:	40023800 	.word	0x40023800
 8007e5c:	00f42400 	.word	0x00f42400
 8007e60:	017d7840 	.word	0x017d7840

08007e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e68:	4b03      	ldr	r3, [pc, #12]	; (8007e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000000 	.word	0x20000000

08007e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e80:	f7ff fff0 	bl	8007e64 <HAL_RCC_GetHCLKFreq>
 8007e84:	4602      	mov	r2, r0
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	0a9b      	lsrs	r3, r3, #10
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	4903      	ldr	r1, [pc, #12]	; (8007ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e92:	5ccb      	ldrb	r3, [r1, r3]
 8007e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	080210b8 	.word	0x080210b8

08007ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ea8:	f7ff ffdc 	bl	8007e64 <HAL_RCC_GetHCLKFreq>
 8007eac:	4602      	mov	r2, r0
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	0b5b      	lsrs	r3, r3, #13
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	4903      	ldr	r1, [pc, #12]	; (8007ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007eba:	5ccb      	ldrb	r3, [r1, r3]
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	40023800 	.word	0x40023800
 8007ec8:	080210b8 	.word	0x080210b8

08007ecc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	220f      	movs	r2, #15
 8007eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007edc:	4b12      	ldr	r3, [pc, #72]	; (8007f28 <HAL_RCC_GetClockConfig+0x5c>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0203 	and.w	r2, r3, #3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ee8:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <HAL_RCC_GetClockConfig+0x5c>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ef4:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <HAL_RCC_GetClockConfig+0x5c>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007f00:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <HAL_RCC_GetClockConfig+0x5c>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	08db      	lsrs	r3, r3, #3
 8007f06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <HAL_RCC_GetClockConfig+0x60>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0207 	and.w	r2, r3, #7
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	601a      	str	r2, [r3, #0]
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	40023800 	.word	0x40023800
 8007f2c:	40023c00 	.word	0x40023c00

08007f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e041      	b.n	8007fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fa f942 	bl	80021e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4610      	mov	r0, r2
 8007f70:	f000 fe8e 	bl	8008c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d001      	beq.n	8007fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e04e      	b.n	8008086 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a23      	ldr	r2, [pc, #140]	; (8008094 <HAL_TIM_Base_Start_IT+0xc4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d022      	beq.n	8008050 <HAL_TIM_Base_Start_IT+0x80>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008012:	d01d      	beq.n	8008050 <HAL_TIM_Base_Start_IT+0x80>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a1f      	ldr	r2, [pc, #124]	; (8008098 <HAL_TIM_Base_Start_IT+0xc8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d018      	beq.n	8008050 <HAL_TIM_Base_Start_IT+0x80>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a1e      	ldr	r2, [pc, #120]	; (800809c <HAL_TIM_Base_Start_IT+0xcc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d013      	beq.n	8008050 <HAL_TIM_Base_Start_IT+0x80>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a1c      	ldr	r2, [pc, #112]	; (80080a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d00e      	beq.n	8008050 <HAL_TIM_Base_Start_IT+0x80>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1b      	ldr	r2, [pc, #108]	; (80080a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d009      	beq.n	8008050 <HAL_TIM_Base_Start_IT+0x80>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a19      	ldr	r2, [pc, #100]	; (80080a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <HAL_TIM_Base_Start_IT+0x80>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a18      	ldr	r2, [pc, #96]	; (80080ac <HAL_TIM_Base_Start_IT+0xdc>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d111      	bne.n	8008074 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b06      	cmp	r3, #6
 8008060:	d010      	beq.n	8008084 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0201 	orr.w	r2, r2, #1
 8008070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008072:	e007      	b.n	8008084 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	40010000 	.word	0x40010000
 8008098:	40000400 	.word	0x40000400
 800809c:	40000800 	.word	0x40000800
 80080a0:	40000c00 	.word	0x40000c00
 80080a4:	40010400 	.word	0x40010400
 80080a8:	40014000 	.word	0x40014000
 80080ac:	40001800 	.word	0x40001800

080080b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e041      	b.n	8008146 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f839 	bl	800814e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f000 fdce 	bl	8008c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
	...

08008164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d109      	bne.n	8008188 <HAL_TIM_PWM_Start+0x24>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b01      	cmp	r3, #1
 800817e:	bf14      	ite	ne
 8008180:	2301      	movne	r3, #1
 8008182:	2300      	moveq	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	e022      	b.n	80081ce <HAL_TIM_PWM_Start+0x6a>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b04      	cmp	r3, #4
 800818c:	d109      	bne.n	80081a2 <HAL_TIM_PWM_Start+0x3e>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b01      	cmp	r3, #1
 8008198:	bf14      	ite	ne
 800819a:	2301      	movne	r3, #1
 800819c:	2300      	moveq	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	e015      	b.n	80081ce <HAL_TIM_PWM_Start+0x6a>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	d109      	bne.n	80081bc <HAL_TIM_PWM_Start+0x58>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	bf14      	ite	ne
 80081b4:	2301      	movne	r3, #1
 80081b6:	2300      	moveq	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	e008      	b.n	80081ce <HAL_TIM_PWM_Start+0x6a>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	bf14      	ite	ne
 80081c8:	2301      	movne	r3, #1
 80081ca:	2300      	moveq	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e07c      	b.n	80082d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d104      	bne.n	80081e6 <HAL_TIM_PWM_Start+0x82>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081e4:	e013      	b.n	800820e <HAL_TIM_PWM_Start+0xaa>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d104      	bne.n	80081f6 <HAL_TIM_PWM_Start+0x92>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081f4:	e00b      	b.n	800820e <HAL_TIM_PWM_Start+0xaa>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d104      	bne.n	8008206 <HAL_TIM_PWM_Start+0xa2>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008204:	e003      	b.n	800820e <HAL_TIM_PWM_Start+0xaa>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2201      	movs	r2, #1
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f001 f94e 	bl	80094b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a2d      	ldr	r2, [pc, #180]	; (80082d8 <HAL_TIM_PWM_Start+0x174>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d004      	beq.n	8008230 <HAL_TIM_PWM_Start+0xcc>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a2c      	ldr	r2, [pc, #176]	; (80082dc <HAL_TIM_PWM_Start+0x178>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d101      	bne.n	8008234 <HAL_TIM_PWM_Start+0xd0>
 8008230:	2301      	movs	r3, #1
 8008232:	e000      	b.n	8008236 <HAL_TIM_PWM_Start+0xd2>
 8008234:	2300      	movs	r3, #0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a22      	ldr	r2, [pc, #136]	; (80082d8 <HAL_TIM_PWM_Start+0x174>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d022      	beq.n	800829a <HAL_TIM_PWM_Start+0x136>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d01d      	beq.n	800829a <HAL_TIM_PWM_Start+0x136>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <HAL_TIM_PWM_Start+0x17c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d018      	beq.n	800829a <HAL_TIM_PWM_Start+0x136>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <HAL_TIM_PWM_Start+0x180>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d013      	beq.n	800829a <HAL_TIM_PWM_Start+0x136>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a1c      	ldr	r2, [pc, #112]	; (80082e8 <HAL_TIM_PWM_Start+0x184>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00e      	beq.n	800829a <HAL_TIM_PWM_Start+0x136>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a16      	ldr	r2, [pc, #88]	; (80082dc <HAL_TIM_PWM_Start+0x178>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d009      	beq.n	800829a <HAL_TIM_PWM_Start+0x136>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a18      	ldr	r2, [pc, #96]	; (80082ec <HAL_TIM_PWM_Start+0x188>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d004      	beq.n	800829a <HAL_TIM_PWM_Start+0x136>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a16      	ldr	r2, [pc, #88]	; (80082f0 <HAL_TIM_PWM_Start+0x18c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d111      	bne.n	80082be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b06      	cmp	r3, #6
 80082aa:	d010      	beq.n	80082ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 0201 	orr.w	r2, r2, #1
 80082ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082bc:	e007      	b.n	80082ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f042 0201 	orr.w	r2, r2, #1
 80082cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	40010000 	.word	0x40010000
 80082dc:	40010400 	.word	0x40010400
 80082e0:	40000400 	.word	0x40000400
 80082e4:	40000800 	.word	0x40000800
 80082e8:	40000c00 	.word	0x40000c00
 80082ec:	40014000 	.word	0x40014000
 80082f0:	40001800 	.word	0x40001800

080082f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e041      	b.n	800838a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d106      	bne.n	8008320 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f839 	bl	8008392 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3304      	adds	r3, #4
 8008330:	4619      	mov	r1, r3
 8008332:	4610      	mov	r0, r2
 8008334:	f000 fcac 	bl	8008c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <HAL_TIM_IC_Start_IT+0x1e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	e013      	b.n	80083ee <HAL_TIM_IC_Start_IT+0x46>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d104      	bne.n	80083d6 <HAL_TIM_IC_Start_IT+0x2e>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	e00b      	b.n	80083ee <HAL_TIM_IC_Start_IT+0x46>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d104      	bne.n	80083e6 <HAL_TIM_IC_Start_IT+0x3e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	e003      	b.n	80083ee <HAL_TIM_IC_Start_IT+0x46>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d104      	bne.n	8008400 <HAL_TIM_IC_Start_IT+0x58>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	e013      	b.n	8008428 <HAL_TIM_IC_Start_IT+0x80>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b04      	cmp	r3, #4
 8008404:	d104      	bne.n	8008410 <HAL_TIM_IC_Start_IT+0x68>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800840c:	b2db      	uxtb	r3, r3
 800840e:	e00b      	b.n	8008428 <HAL_TIM_IC_Start_IT+0x80>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b08      	cmp	r3, #8
 8008414:	d104      	bne.n	8008420 <HAL_TIM_IC_Start_IT+0x78>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800841c:	b2db      	uxtb	r3, r3
 800841e:	e003      	b.n	8008428 <HAL_TIM_IC_Start_IT+0x80>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008426:	b2db      	uxtb	r3, r3
 8008428:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d102      	bne.n	8008436 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008430:	7b7b      	ldrb	r3, [r7, #13]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d001      	beq.n	800843a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e0cc      	b.n	80085d4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <HAL_TIM_IC_Start_IT+0xa2>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008448:	e013      	b.n	8008472 <HAL_TIM_IC_Start_IT+0xca>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d104      	bne.n	800845a <HAL_TIM_IC_Start_IT+0xb2>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008458:	e00b      	b.n	8008472 <HAL_TIM_IC_Start_IT+0xca>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b08      	cmp	r3, #8
 800845e:	d104      	bne.n	800846a <HAL_TIM_IC_Start_IT+0xc2>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008468:	e003      	b.n	8008472 <HAL_TIM_IC_Start_IT+0xca>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2202      	movs	r2, #2
 800846e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <HAL_TIM_IC_Start_IT+0xda>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008480:	e013      	b.n	80084aa <HAL_TIM_IC_Start_IT+0x102>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b04      	cmp	r3, #4
 8008486:	d104      	bne.n	8008492 <HAL_TIM_IC_Start_IT+0xea>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008490:	e00b      	b.n	80084aa <HAL_TIM_IC_Start_IT+0x102>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b08      	cmp	r3, #8
 8008496:	d104      	bne.n	80084a2 <HAL_TIM_IC_Start_IT+0xfa>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084a0:	e003      	b.n	80084aa <HAL_TIM_IC_Start_IT+0x102>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2202      	movs	r2, #2
 80084a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b0c      	cmp	r3, #12
 80084ae:	d841      	bhi.n	8008534 <HAL_TIM_IC_Start_IT+0x18c>
 80084b0:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <HAL_TIM_IC_Start_IT+0x110>)
 80084b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b6:	bf00      	nop
 80084b8:	080084ed 	.word	0x080084ed
 80084bc:	08008535 	.word	0x08008535
 80084c0:	08008535 	.word	0x08008535
 80084c4:	08008535 	.word	0x08008535
 80084c8:	080084ff 	.word	0x080084ff
 80084cc:	08008535 	.word	0x08008535
 80084d0:	08008535 	.word	0x08008535
 80084d4:	08008535 	.word	0x08008535
 80084d8:	08008511 	.word	0x08008511
 80084dc:	08008535 	.word	0x08008535
 80084e0:	08008535 	.word	0x08008535
 80084e4:	08008535 	.word	0x08008535
 80084e8:	08008523 	.word	0x08008523
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0202 	orr.w	r2, r2, #2
 80084fa:	60da      	str	r2, [r3, #12]
      break;
 80084fc:	e01d      	b.n	800853a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f042 0204 	orr.w	r2, r2, #4
 800850c:	60da      	str	r2, [r3, #12]
      break;
 800850e:	e014      	b.n	800853a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0208 	orr.w	r2, r2, #8
 800851e:	60da      	str	r2, [r3, #12]
      break;
 8008520:	e00b      	b.n	800853a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0210 	orr.w	r2, r2, #16
 8008530:	60da      	str	r2, [r3, #12]
      break;
 8008532:	e002      	b.n	800853a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	73fb      	strb	r3, [r7, #15]
      break;
 8008538:	bf00      	nop
  }

  if (status == HAL_OK)
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d148      	bne.n	80085d2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2201      	movs	r2, #1
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f000 ffb5 	bl	80094b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a22      	ldr	r2, [pc, #136]	; (80085dc <HAL_TIM_IC_Start_IT+0x234>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d022      	beq.n	800859e <HAL_TIM_IC_Start_IT+0x1f6>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008560:	d01d      	beq.n	800859e <HAL_TIM_IC_Start_IT+0x1f6>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a1e      	ldr	r2, [pc, #120]	; (80085e0 <HAL_TIM_IC_Start_IT+0x238>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d018      	beq.n	800859e <HAL_TIM_IC_Start_IT+0x1f6>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1c      	ldr	r2, [pc, #112]	; (80085e4 <HAL_TIM_IC_Start_IT+0x23c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d013      	beq.n	800859e <HAL_TIM_IC_Start_IT+0x1f6>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1b      	ldr	r2, [pc, #108]	; (80085e8 <HAL_TIM_IC_Start_IT+0x240>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00e      	beq.n	800859e <HAL_TIM_IC_Start_IT+0x1f6>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a19      	ldr	r2, [pc, #100]	; (80085ec <HAL_TIM_IC_Start_IT+0x244>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d009      	beq.n	800859e <HAL_TIM_IC_Start_IT+0x1f6>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a18      	ldr	r2, [pc, #96]	; (80085f0 <HAL_TIM_IC_Start_IT+0x248>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d004      	beq.n	800859e <HAL_TIM_IC_Start_IT+0x1f6>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a16      	ldr	r2, [pc, #88]	; (80085f4 <HAL_TIM_IC_Start_IT+0x24c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d111      	bne.n	80085c2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b06      	cmp	r3, #6
 80085ae:	d010      	beq.n	80085d2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0201 	orr.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c0:	e007      	b.n	80085d2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0201 	orr.w	r2, r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40000400 	.word	0x40000400
 80085e4:	40000800 	.word	0x40000800
 80085e8:	40000c00 	.word	0x40000c00
 80085ec:	40010400 	.word	0x40010400
 80085f0:	40014000 	.word	0x40014000
 80085f4:	40001800 	.word	0x40001800

080085f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b02      	cmp	r3, #2
 800860c:	d122      	bne.n	8008654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f003 0302 	and.w	r3, r3, #2
 8008618:	2b02      	cmp	r3, #2
 800861a:	d11b      	bne.n	8008654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f06f 0202 	mvn.w	r2, #2
 8008624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7fa feb6 	bl	80033ac <HAL_TIM_IC_CaptureCallback>
 8008640:	e005      	b.n	800864e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fb05 	bl	8008c52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fb0c 	bl	8008c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	2b04      	cmp	r3, #4
 8008660:	d122      	bne.n	80086a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b04      	cmp	r3, #4
 800866e:	d11b      	bne.n	80086a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0204 	mvn.w	r2, #4
 8008678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fa fe8c 	bl	80033ac <HAL_TIM_IC_CaptureCallback>
 8008694:	e005      	b.n	80086a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fadb 	bl	8008c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fae2 	bl	8008c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d122      	bne.n	80086fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d11b      	bne.n	80086fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f06f 0208 	mvn.w	r2, #8
 80086cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2204      	movs	r2, #4
 80086d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7fa fe62 	bl	80033ac <HAL_TIM_IC_CaptureCallback>
 80086e8:	e005      	b.n	80086f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fab1 	bl	8008c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fab8 	bl	8008c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f003 0310 	and.w	r3, r3, #16
 8008706:	2b10      	cmp	r3, #16
 8008708:	d122      	bne.n	8008750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b10      	cmp	r3, #16
 8008716:	d11b      	bne.n	8008750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f06f 0210 	mvn.w	r2, #16
 8008720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2208      	movs	r2, #8
 8008726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7fa fe38 	bl	80033ac <HAL_TIM_IC_CaptureCallback>
 800873c:	e005      	b.n	800874a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fa87 	bl	8008c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fa8e 	bl	8008c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b01      	cmp	r3, #1
 800875c:	d10e      	bne.n	800877c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b01      	cmp	r3, #1
 800876a:	d107      	bne.n	800877c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f06f 0201 	mvn.w	r2, #1
 8008774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7f9 f962 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d10e      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008794:	2b80      	cmp	r3, #128	; 0x80
 8008796:	d107      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 ff86 	bl	80096b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b2:	2b40      	cmp	r3, #64	; 0x40
 80087b4:	d10e      	bne.n	80087d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b40      	cmp	r3, #64	; 0x40
 80087c2:	d107      	bne.n	80087d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa53 	bl	8008c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b20      	cmp	r3, #32
 80087e0:	d10e      	bne.n	8008800 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	d107      	bne.n	8008800 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0220 	mvn.w	r2, #32
 80087f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 ff50 	bl	80096a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800881e:	2b01      	cmp	r3, #1
 8008820:	d101      	bne.n	8008826 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008822:	2302      	movs	r3, #2
 8008824:	e088      	b.n	8008938 <HAL_TIM_IC_ConfigChannel+0x130>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d11b      	bne.n	800886c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	6819      	ldr	r1, [r3, #0]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f000 fc74 	bl	8009130 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 020c 	bic.w	r2, r2, #12
 8008856:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6999      	ldr	r1, [r3, #24]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	619a      	str	r2, [r3, #24]
 800886a:	e060      	b.n	800892e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b04      	cmp	r3, #4
 8008870:	d11c      	bne.n	80088ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	6819      	ldr	r1, [r3, #0]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f000 fcf8 	bl	8009276 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008894:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6999      	ldr	r1, [r3, #24]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	021a      	lsls	r2, r3, #8
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	619a      	str	r2, [r3, #24]
 80088aa:	e040      	b.n	800892e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b08      	cmp	r3, #8
 80088b0:	d11b      	bne.n	80088ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6819      	ldr	r1, [r3, #0]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f000 fd45 	bl	8009350 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 020c 	bic.w	r2, r2, #12
 80088d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69d9      	ldr	r1, [r3, #28]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	61da      	str	r2, [r3, #28]
 80088e8:	e021      	b.n	800892e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b0c      	cmp	r3, #12
 80088ee:	d11c      	bne.n	800892a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	6819      	ldr	r1, [r3, #0]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f000 fd62 	bl	80093c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	69da      	ldr	r2, [r3, #28]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008912:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69d9      	ldr	r1, [r3, #28]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	021a      	lsls	r2, r3, #8
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	61da      	str	r2, [r3, #28]
 8008928:	e001      	b.n	800892e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800895a:	2302      	movs	r3, #2
 800895c:	e0ae      	b.n	8008abc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b0c      	cmp	r3, #12
 800896a:	f200 809f 	bhi.w	8008aac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	080089a9 	.word	0x080089a9
 8008978:	08008aad 	.word	0x08008aad
 800897c:	08008aad 	.word	0x08008aad
 8008980:	08008aad 	.word	0x08008aad
 8008984:	080089e9 	.word	0x080089e9
 8008988:	08008aad 	.word	0x08008aad
 800898c:	08008aad 	.word	0x08008aad
 8008990:	08008aad 	.word	0x08008aad
 8008994:	08008a2b 	.word	0x08008a2b
 8008998:	08008aad 	.word	0x08008aad
 800899c:	08008aad 	.word	0x08008aad
 80089a0:	08008aad 	.word	0x08008aad
 80089a4:	08008a6b 	.word	0x08008a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68b9      	ldr	r1, [r7, #8]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 fa0e 	bl	8008dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	699a      	ldr	r2, [r3, #24]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0208 	orr.w	r2, r2, #8
 80089c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 0204 	bic.w	r2, r2, #4
 80089d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6999      	ldr	r1, [r3, #24]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	691a      	ldr	r2, [r3, #16]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	619a      	str	r2, [r3, #24]
      break;
 80089e6:	e064      	b.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fa5e 	bl	8008eb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6999      	ldr	r1, [r3, #24]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	021a      	lsls	r2, r3, #8
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	430a      	orrs	r2, r1
 8008a26:	619a      	str	r2, [r3, #24]
      break;
 8008a28:	e043      	b.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fab3 	bl	8008f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69da      	ldr	r2, [r3, #28]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0208 	orr.w	r2, r2, #8
 8008a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f022 0204 	bic.w	r2, r2, #4
 8008a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69d9      	ldr	r1, [r3, #28]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	691a      	ldr	r2, [r3, #16]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	61da      	str	r2, [r3, #28]
      break;
 8008a68:	e023      	b.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68b9      	ldr	r1, [r7, #8]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 fb07 	bl	8009084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69da      	ldr	r2, [r3, #28]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69da      	ldr	r2, [r3, #28]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	69d9      	ldr	r1, [r3, #28]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	021a      	lsls	r2, r3, #8
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	61da      	str	r2, [r3, #28]
      break;
 8008aaa:	e002      	b.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e0b4      	b.n	8008c4a <HAL_TIM_ConfigClockSource+0x186>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b18:	d03e      	beq.n	8008b98 <HAL_TIM_ConfigClockSource+0xd4>
 8008b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b1e:	f200 8087 	bhi.w	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
 8008b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b26:	f000 8086 	beq.w	8008c36 <HAL_TIM_ConfigClockSource+0x172>
 8008b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2e:	d87f      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
 8008b30:	2b70      	cmp	r3, #112	; 0x70
 8008b32:	d01a      	beq.n	8008b6a <HAL_TIM_ConfigClockSource+0xa6>
 8008b34:	2b70      	cmp	r3, #112	; 0x70
 8008b36:	d87b      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
 8008b38:	2b60      	cmp	r3, #96	; 0x60
 8008b3a:	d050      	beq.n	8008bde <HAL_TIM_ConfigClockSource+0x11a>
 8008b3c:	2b60      	cmp	r3, #96	; 0x60
 8008b3e:	d877      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
 8008b40:	2b50      	cmp	r3, #80	; 0x50
 8008b42:	d03c      	beq.n	8008bbe <HAL_TIM_ConfigClockSource+0xfa>
 8008b44:	2b50      	cmp	r3, #80	; 0x50
 8008b46:	d873      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	d058      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0x13a>
 8008b4c:	2b40      	cmp	r3, #64	; 0x40
 8008b4e:	d86f      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
 8008b50:	2b30      	cmp	r3, #48	; 0x30
 8008b52:	d064      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x15a>
 8008b54:	2b30      	cmp	r3, #48	; 0x30
 8008b56:	d86b      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d060      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x15a>
 8008b5c:	2b20      	cmp	r3, #32
 8008b5e:	d867      	bhi.n	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d05c      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x15a>
 8008b64:	2b10      	cmp	r3, #16
 8008b66:	d05a      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x15a>
 8008b68:	e062      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	6899      	ldr	r1, [r3, #8]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f000 fc7d 	bl	8009478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	609a      	str	r2, [r3, #8]
      break;
 8008b96:	e04f      	b.n	8008c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	6899      	ldr	r1, [r3, #8]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f000 fc66 	bl	8009478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bba:	609a      	str	r2, [r3, #8]
      break;
 8008bbc:	e03c      	b.n	8008c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	6859      	ldr	r1, [r3, #4]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f000 fb24 	bl	8009218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2150      	movs	r1, #80	; 0x50
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fc33 	bl	8009442 <TIM_ITRx_SetConfig>
      break;
 8008bdc:	e02c      	b.n	8008c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	6859      	ldr	r1, [r3, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	461a      	mov	r2, r3
 8008bec:	f000 fb80 	bl	80092f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2160      	movs	r1, #96	; 0x60
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fc23 	bl	8009442 <TIM_ITRx_SetConfig>
      break;
 8008bfc:	e01c      	b.n	8008c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6859      	ldr	r1, [r3, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f000 fb04 	bl	8009218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2140      	movs	r1, #64	; 0x40
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fc13 	bl	8009442 <TIM_ITRx_SetConfig>
      break;
 8008c1c:	e00c      	b.n	8008c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f000 fc0a 	bl	8009442 <TIM_ITRx_SetConfig>
      break;
 8008c2e:	e003      	b.n	8008c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	73fb      	strb	r3, [r7, #15]
      break;
 8008c34:	e000      	b.n	8008c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c5a:	bf00      	nop
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
	...

08008c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a40      	ldr	r2, [pc, #256]	; (8008da4 <TIM_Base_SetConfig+0x114>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d013      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cae:	d00f      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a3d      	ldr	r2, [pc, #244]	; (8008da8 <TIM_Base_SetConfig+0x118>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00b      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a3c      	ldr	r2, [pc, #240]	; (8008dac <TIM_Base_SetConfig+0x11c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d007      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a3b      	ldr	r2, [pc, #236]	; (8008db0 <TIM_Base_SetConfig+0x120>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d003      	beq.n	8008cd0 <TIM_Base_SetConfig+0x40>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a3a      	ldr	r2, [pc, #232]	; (8008db4 <TIM_Base_SetConfig+0x124>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d108      	bne.n	8008ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a2f      	ldr	r2, [pc, #188]	; (8008da4 <TIM_Base_SetConfig+0x114>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d02b      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf0:	d027      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2c      	ldr	r2, [pc, #176]	; (8008da8 <TIM_Base_SetConfig+0x118>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d023      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a2b      	ldr	r2, [pc, #172]	; (8008dac <TIM_Base_SetConfig+0x11c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01f      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a2a      	ldr	r2, [pc, #168]	; (8008db0 <TIM_Base_SetConfig+0x120>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d01b      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a29      	ldr	r2, [pc, #164]	; (8008db4 <TIM_Base_SetConfig+0x124>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d017      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a28      	ldr	r2, [pc, #160]	; (8008db8 <TIM_Base_SetConfig+0x128>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d013      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a27      	ldr	r2, [pc, #156]	; (8008dbc <TIM_Base_SetConfig+0x12c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00f      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a26      	ldr	r2, [pc, #152]	; (8008dc0 <TIM_Base_SetConfig+0x130>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00b      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a25      	ldr	r2, [pc, #148]	; (8008dc4 <TIM_Base_SetConfig+0x134>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d007      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a24      	ldr	r2, [pc, #144]	; (8008dc8 <TIM_Base_SetConfig+0x138>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d003      	beq.n	8008d42 <TIM_Base_SetConfig+0xb2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a23      	ldr	r2, [pc, #140]	; (8008dcc <TIM_Base_SetConfig+0x13c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d108      	bne.n	8008d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a0a      	ldr	r2, [pc, #40]	; (8008da4 <TIM_Base_SetConfig+0x114>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d003      	beq.n	8008d88 <TIM_Base_SetConfig+0xf8>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a0c      	ldr	r2, [pc, #48]	; (8008db4 <TIM_Base_SetConfig+0x124>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d103      	bne.n	8008d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	691a      	ldr	r2, [r3, #16]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	615a      	str	r2, [r3, #20]
}
 8008d96:	bf00      	nop
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40010000 	.word	0x40010000
 8008da8:	40000400 	.word	0x40000400
 8008dac:	40000800 	.word	0x40000800
 8008db0:	40000c00 	.word	0x40000c00
 8008db4:	40010400 	.word	0x40010400
 8008db8:	40014000 	.word	0x40014000
 8008dbc:	40014400 	.word	0x40014400
 8008dc0:	40014800 	.word	0x40014800
 8008dc4:	40001800 	.word	0x40001800
 8008dc8:	40001c00 	.word	0x40001c00
 8008dcc:	40002000 	.word	0x40002000

08008dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	f023 0201 	bic.w	r2, r3, #1
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0303 	bic.w	r3, r3, #3
 8008e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f023 0302 	bic.w	r3, r3, #2
 8008e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a20      	ldr	r2, [pc, #128]	; (8008ea8 <TIM_OC1_SetConfig+0xd8>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_OC1_SetConfig+0x64>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a1f      	ldr	r2, [pc, #124]	; (8008eac <TIM_OC1_SetConfig+0xdc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d10c      	bne.n	8008e4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f023 0308 	bic.w	r3, r3, #8
 8008e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f023 0304 	bic.w	r3, r3, #4
 8008e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a15      	ldr	r2, [pc, #84]	; (8008ea8 <TIM_OC1_SetConfig+0xd8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d003      	beq.n	8008e5e <TIM_OC1_SetConfig+0x8e>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a14      	ldr	r2, [pc, #80]	; (8008eac <TIM_OC1_SetConfig+0xdc>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d111      	bne.n	8008e82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	621a      	str	r2, [r3, #32]
}
 8008e9c:	bf00      	nop
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	40010000 	.word	0x40010000
 8008eac:	40010400 	.word	0x40010400

08008eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f023 0210 	bic.w	r2, r3, #16
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f023 0320 	bic.w	r3, r3, #32
 8008efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a22      	ldr	r2, [pc, #136]	; (8008f94 <TIM_OC2_SetConfig+0xe4>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_OC2_SetConfig+0x68>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a21      	ldr	r2, [pc, #132]	; (8008f98 <TIM_OC2_SetConfig+0xe8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d10d      	bne.n	8008f34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <TIM_OC2_SetConfig+0xe4>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d003      	beq.n	8008f44 <TIM_OC2_SetConfig+0x94>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a16      	ldr	r2, [pc, #88]	; (8008f98 <TIM_OC2_SetConfig+0xe8>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d113      	bne.n	8008f6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	621a      	str	r2, [r3, #32]
}
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	40010000 	.word	0x40010000
 8008f98:	40010400 	.word	0x40010400

08008f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0303 	bic.w	r3, r3, #3
 8008fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a21      	ldr	r2, [pc, #132]	; (800907c <TIM_OC3_SetConfig+0xe0>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d003      	beq.n	8009002 <TIM_OC3_SetConfig+0x66>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a20      	ldr	r2, [pc, #128]	; (8009080 <TIM_OC3_SetConfig+0xe4>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d10d      	bne.n	800901e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	4313      	orrs	r3, r2
 8009014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800901c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a16      	ldr	r2, [pc, #88]	; (800907c <TIM_OC3_SetConfig+0xe0>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d003      	beq.n	800902e <TIM_OC3_SetConfig+0x92>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <TIM_OC3_SetConfig+0xe4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d113      	bne.n	8009056 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800903c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	4313      	orrs	r3, r2
 8009048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	4313      	orrs	r3, r2
 8009054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	621a      	str	r2, [r3, #32]
}
 8009070:	bf00      	nop
 8009072:	371c      	adds	r7, #28
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	40010000 	.word	0x40010000
 8009080:	40010400 	.word	0x40010400

08009084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	031b      	lsls	r3, r3, #12
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4313      	orrs	r3, r2
 80090da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a12      	ldr	r2, [pc, #72]	; (8009128 <TIM_OC4_SetConfig+0xa4>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d003      	beq.n	80090ec <TIM_OC4_SetConfig+0x68>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a11      	ldr	r2, [pc, #68]	; (800912c <TIM_OC4_SetConfig+0xa8>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d109      	bne.n	8009100 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	019b      	lsls	r3, r3, #6
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40010000 	.word	0x40010000
 800912c:	40010400 	.word	0x40010400

08009130 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	f023 0201 	bic.w	r2, r3, #1
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	4a28      	ldr	r2, [pc, #160]	; (80091fc <TIM_TI1_SetConfig+0xcc>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d01b      	beq.n	8009196 <TIM_TI1_SetConfig+0x66>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009164:	d017      	beq.n	8009196 <TIM_TI1_SetConfig+0x66>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	4a25      	ldr	r2, [pc, #148]	; (8009200 <TIM_TI1_SetConfig+0xd0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d013      	beq.n	8009196 <TIM_TI1_SetConfig+0x66>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4a24      	ldr	r2, [pc, #144]	; (8009204 <TIM_TI1_SetConfig+0xd4>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00f      	beq.n	8009196 <TIM_TI1_SetConfig+0x66>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4a23      	ldr	r2, [pc, #140]	; (8009208 <TIM_TI1_SetConfig+0xd8>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00b      	beq.n	8009196 <TIM_TI1_SetConfig+0x66>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4a22      	ldr	r2, [pc, #136]	; (800920c <TIM_TI1_SetConfig+0xdc>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d007      	beq.n	8009196 <TIM_TI1_SetConfig+0x66>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4a21      	ldr	r2, [pc, #132]	; (8009210 <TIM_TI1_SetConfig+0xe0>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d003      	beq.n	8009196 <TIM_TI1_SetConfig+0x66>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4a20      	ldr	r2, [pc, #128]	; (8009214 <TIM_TI1_SetConfig+0xe4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d101      	bne.n	800919a <TIM_TI1_SetConfig+0x6a>
 8009196:	2301      	movs	r3, #1
 8009198:	e000      	b.n	800919c <TIM_TI1_SetConfig+0x6c>
 800919a:	2300      	movs	r3, #0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d008      	beq.n	80091b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f023 0303 	bic.w	r3, r3, #3
 80091a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	e003      	b.n	80091ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f043 0301 	orr.w	r3, r3, #1
 80091b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f023 030a 	bic.w	r3, r3, #10
 80091d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	f003 030a 	and.w	r3, r3, #10
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	4313      	orrs	r3, r2
 80091e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	621a      	str	r2, [r3, #32]
}
 80091ee:	bf00      	nop
 80091f0:	371c      	adds	r7, #28
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	40010000 	.word	0x40010000
 8009200:	40000400 	.word	0x40000400
 8009204:	40000800 	.word	0x40000800
 8009208:	40000c00 	.word	0x40000c00
 800920c:	40010400 	.word	0x40010400
 8009210:	40014000 	.word	0x40014000
 8009214:	40001800 	.word	0x40001800

08009218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f023 0201 	bic.w	r2, r3, #1
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	4313      	orrs	r3, r2
 800924c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f023 030a 	bic.w	r3, r3, #10
 8009254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	621a      	str	r2, [r3, #32]
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009276:	b480      	push	{r7}
 8009278:	b087      	sub	sp, #28
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6a1b      	ldr	r3, [r3, #32]
 8009288:	f023 0210 	bic.w	r2, r3, #16
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	021b      	lsls	r3, r3, #8
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	031b      	lsls	r3, r3, #12
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	4313      	orrs	r3, r2
 80092c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	621a      	str	r2, [r3, #32]
}
 80092e4:	bf00      	nop
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	f023 0210 	bic.w	r2, r3, #16
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800931a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	031b      	lsls	r3, r3, #12
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800932c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	621a      	str	r2, [r3, #32]
}
 8009344:	bf00      	nop
 8009346:	371c      	adds	r7, #28
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f023 0303 	bic.w	r3, r3, #3
 800937c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4313      	orrs	r3, r2
 8009384:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800938c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	b2db      	uxtb	r3, r3
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	4313      	orrs	r3, r2
 8009398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80093a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	021b      	lsls	r3, r3, #8
 80093a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	621a      	str	r2, [r3, #32]
}
 80093bc:	bf00      	nop
 80093be:	371c      	adds	r7, #28
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	021b      	lsls	r3, r3, #8
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009406:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	031b      	lsls	r3, r3, #12
 800940c:	b29b      	uxth	r3, r3
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	4313      	orrs	r3, r2
 8009412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800941a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	031b      	lsls	r3, r3, #12
 8009420:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	4313      	orrs	r3, r2
 8009428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	621a      	str	r2, [r3, #32]
}
 8009436:	bf00      	nop
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009442:	b480      	push	{r7}
 8009444:	b085      	sub	sp, #20
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4313      	orrs	r3, r2
 8009460:	f043 0307 	orr.w	r3, r3, #7
 8009464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	609a      	str	r2, [r3, #8]
}
 800946c:	bf00      	nop
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	021a      	lsls	r2, r3, #8
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	431a      	orrs	r2, r3
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	4313      	orrs	r3, r2
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	609a      	str	r2, [r3, #8]
}
 80094ac:	bf00      	nop
 80094ae:	371c      	adds	r7, #28
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f003 031f 	and.w	r3, r3, #31
 80094ca:	2201      	movs	r2, #1
 80094cc:	fa02 f303 	lsl.w	r3, r2, r3
 80094d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6a1a      	ldr	r2, [r3, #32]
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	43db      	mvns	r3, r3
 80094da:	401a      	ands	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6a1a      	ldr	r2, [r3, #32]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f003 031f 	and.w	r3, r3, #31
 80094ea:	6879      	ldr	r1, [r7, #4]
 80094ec:	fa01 f303 	lsl.w	r3, r1, r3
 80094f0:	431a      	orrs	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	621a      	str	r2, [r3, #32]
}
 80094f6:	bf00      	nop
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
	...

08009504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009514:	2b01      	cmp	r3, #1
 8009516:	d101      	bne.n	800951c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009518:	2302      	movs	r3, #2
 800951a:	e05a      	b.n	80095d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a21      	ldr	r2, [pc, #132]	; (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d022      	beq.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009568:	d01d      	beq.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d018      	beq.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1b      	ldr	r2, [pc, #108]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d013      	beq.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a1a      	ldr	r2, [pc, #104]	; (80095ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d00e      	beq.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a18      	ldr	r2, [pc, #96]	; (80095f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d009      	beq.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a17      	ldr	r2, [pc, #92]	; (80095f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d004      	beq.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a15      	ldr	r2, [pc, #84]	; (80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d10c      	bne.n	80095c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	40010000 	.word	0x40010000
 80095e4:	40000400 	.word	0x40000400
 80095e8:	40000800 	.word	0x40000800
 80095ec:	40000c00 	.word	0x40000c00
 80095f0:	40010400 	.word	0x40010400
 80095f4:	40014000 	.word	0x40014000
 80095f8:	40001800 	.word	0x40001800

080095fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009614:	2302      	movs	r3, #2
 8009616:	e03d      	b.n	8009694 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	4313      	orrs	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4313      	orrs	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e03f      	b.n	800975a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d106      	bne.n	80096f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7f8 fef0 	bl	80024d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2224      	movs	r2, #36	; 0x24
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800970a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 ffc9 	bl	800a6a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	691a      	ldr	r2, [r3, #16]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	695a      	ldr	r2, [r3, #20]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68da      	ldr	r2, [r3, #12]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2220      	movs	r2, #32
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2220      	movs	r2, #32
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08c      	sub	sp, #48	; 0x30
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	4613      	mov	r3, r2
 8009770:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b20      	cmp	r3, #32
 800977c:	d165      	bne.n	800984a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <HAL_UART_Transmit_DMA+0x26>
 8009784:	88fb      	ldrh	r3, [r7, #6]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e05e      	b.n	800984c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009794:	2b01      	cmp	r3, #1
 8009796:	d101      	bne.n	800979c <HAL_UART_Transmit_DMA+0x38>
 8009798:	2302      	movs	r3, #2
 800979a:	e057      	b.n	800984c <HAL_UART_Transmit_DMA+0xe8>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	88fa      	ldrh	r2, [r7, #6]
 80097ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	88fa      	ldrh	r2, [r7, #6]
 80097b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2221      	movs	r2, #33	; 0x21
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c8:	4a22      	ldr	r2, [pc, #136]	; (8009854 <HAL_UART_Transmit_DMA+0xf0>)
 80097ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d0:	4a21      	ldr	r2, [pc, #132]	; (8009858 <HAL_UART_Transmit_DMA+0xf4>)
 80097d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d8:	4a20      	ldr	r2, [pc, #128]	; (800985c <HAL_UART_Transmit_DMA+0xf8>)
 80097da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e0:	2200      	movs	r2, #0
 80097e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80097ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f0:	6819      	ldr	r1, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3304      	adds	r3, #4
 80097f8:	461a      	mov	r2, r3
 80097fa:	88fb      	ldrh	r3, [r7, #6]
 80097fc:	f7fa ff78 	bl	80046f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009808:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3314      	adds	r3, #20
 8009818:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	617b      	str	r3, [r7, #20]
   return(result);
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009828:	62bb      	str	r3, [r7, #40]	; 0x28
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3314      	adds	r3, #20
 8009830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009832:	627a      	str	r2, [r7, #36]	; 0x24
 8009834:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	6a39      	ldr	r1, [r7, #32]
 8009838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e5      	bne.n	8009812 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	e000      	b.n	800984c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800984a:	2302      	movs	r3, #2
  }
}
 800984c:	4618      	mov	r0, r3
 800984e:	3730      	adds	r7, #48	; 0x30
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	08009f45 	.word	0x08009f45
 8009858:	08009fdf 	.word	0x08009fdf
 800985c:	0800a157 	.word	0x0800a157

08009860 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b20      	cmp	r3, #32
 8009878:	d11d      	bne.n	80098b6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <HAL_UART_Receive_DMA+0x26>
 8009880:	88fb      	ldrh	r3, [r7, #6]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e016      	b.n	80098b8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009890:	2b01      	cmp	r3, #1
 8009892:	d101      	bne.n	8009898 <HAL_UART_Receive_DMA+0x38>
 8009894:	2302      	movs	r3, #2
 8009896:	e00f      	b.n	80098b8 <HAL_UART_Receive_DMA+0x58>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	461a      	mov	r2, r3
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 fc9d 	bl	800a1ec <UART_Start_Receive_DMA>
 80098b2:	4603      	mov	r3, r0
 80098b4:	e000      	b.n	80098b8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80098b6:	2302      	movs	r3, #2
  }
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b090      	sub	sp, #64	; 0x40
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098d6:	2b80      	cmp	r3, #128	; 0x80
 80098d8:	bf0c      	ite	eq
 80098da:	2301      	moveq	r3, #1
 80098dc:	2300      	movne	r3, #0
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b21      	cmp	r3, #33	; 0x21
 80098ec:	d128      	bne.n	8009940 <HAL_UART_DMAStop+0x80>
 80098ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d025      	beq.n	8009940 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3314      	adds	r3, #20
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	e853 3f00 	ldrex	r3, [r3]
 8009902:	623b      	str	r3, [r7, #32]
   return(result);
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800990a:	63bb      	str	r3, [r7, #56]	; 0x38
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3314      	adds	r3, #20
 8009912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009914:	633a      	str	r2, [r7, #48]	; 0x30
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800991a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991c:	e841 2300 	strex	r3, r2, [r1]
 8009920:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1e5      	bne.n	80098f4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009934:	4618      	mov	r0, r3
 8009936:	f7fa ff33 	bl	80047a0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fcf0 	bl	800a320 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800994a:	2b40      	cmp	r3, #64	; 0x40
 800994c:	bf0c      	ite	eq
 800994e:	2301      	moveq	r3, #1
 8009950:	2300      	movne	r3, #0
 8009952:	b2db      	uxtb	r3, r3
 8009954:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b22      	cmp	r3, #34	; 0x22
 8009960:	d128      	bne.n	80099b4 <HAL_UART_DMAStop+0xf4>
 8009962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d025      	beq.n	80099b4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3314      	adds	r3, #20
 800996e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	e853 3f00 	ldrex	r3, [r3]
 8009976:	60fb      	str	r3, [r7, #12]
   return(result);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800997e:	637b      	str	r3, [r7, #52]	; 0x34
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3314      	adds	r3, #20
 8009986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009988:	61fa      	str	r2, [r7, #28]
 800998a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	69b9      	ldr	r1, [r7, #24]
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	617b      	str	r3, [r7, #20]
   return(result);
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e5      	bne.n	8009968 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d004      	beq.n	80099ae <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fa fef9 	bl	80047a0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fcde 	bl	800a370 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3740      	adds	r7, #64	; 0x40
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b0ba      	sub	sp, #232	; 0xe8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80099f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099f6:	f003 030f 	and.w	r3, r3, #15
 80099fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80099fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10f      	bne.n	8009a26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d009      	beq.n	8009a26 <HAL_UART_IRQHandler+0x66>
 8009a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a16:	f003 0320 	and.w	r3, r3, #32
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fd85 	bl	800a52e <UART_Receive_IT>
      return;
 8009a24:	e256      	b.n	8009ed4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 80de 	beq.w	8009bec <HAL_UART_IRQHandler+0x22c>
 8009a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d106      	bne.n	8009a4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 80d1 	beq.w	8009bec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00b      	beq.n	8009a6e <HAL_UART_IRQHandler+0xae>
 8009a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d005      	beq.n	8009a6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a66:	f043 0201 	orr.w	r2, r3, #1
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a72:	f003 0304 	and.w	r3, r3, #4
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00b      	beq.n	8009a92 <HAL_UART_IRQHandler+0xd2>
 8009a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d005      	beq.n	8009a92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8a:	f043 0202 	orr.w	r2, r3, #2
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00b      	beq.n	8009ab6 <HAL_UART_IRQHandler+0xf6>
 8009a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d005      	beq.n	8009ab6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aae:	f043 0204 	orr.w	r2, r3, #4
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aba:	f003 0308 	and.w	r3, r3, #8
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d011      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x126>
 8009ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d105      	bne.n	8009ada <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d005      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	f043 0208 	orr.w	r2, r3, #8
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 81ed 	beq.w	8009eca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d008      	beq.n	8009b0e <HAL_UART_IRQHandler+0x14e>
 8009afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b00:	f003 0320 	and.w	r3, r3, #32
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fd10 	bl	800a52e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b18:	2b40      	cmp	r3, #64	; 0x40
 8009b1a:	bf0c      	ite	eq
 8009b1c:	2301      	moveq	r3, #1
 8009b1e:	2300      	movne	r3, #0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2a:	f003 0308 	and.w	r3, r3, #8
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d103      	bne.n	8009b3a <HAL_UART_IRQHandler+0x17a>
 8009b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d04f      	beq.n	8009bda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fc18 	bl	800a370 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4a:	2b40      	cmp	r3, #64	; 0x40
 8009b4c:	d141      	bne.n	8009bd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3314      	adds	r3, #20
 8009b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3314      	adds	r3, #20
 8009b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1d9      	bne.n	8009b4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d013      	beq.n	8009bca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba6:	4a7d      	ldr	r2, [pc, #500]	; (8009d9c <HAL_UART_IRQHandler+0x3dc>)
 8009ba8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fa fe66 	bl	8004880 <HAL_DMA_Abort_IT>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d016      	beq.n	8009be8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc8:	e00e      	b.n	8009be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f9a4 	bl	8009f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd0:	e00a      	b.n	8009be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9a0 	bl	8009f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd8:	e006      	b.n	8009be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f99c 	bl	8009f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009be6:	e170      	b.n	8009eca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be8:	bf00      	nop
    return;
 8009bea:	e16e      	b.n	8009eca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	f040 814a 	bne.w	8009e8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bfa:	f003 0310 	and.w	r3, r3, #16
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 8143 	beq.w	8009e8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c08:	f003 0310 	and.w	r3, r3, #16
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 813c 	beq.w	8009e8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c12:	2300      	movs	r3, #0
 8009c14:	60bb      	str	r3, [r7, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60bb      	str	r3, [r7, #8]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	60bb      	str	r3, [r7, #8]
 8009c26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c32:	2b40      	cmp	r3, #64	; 0x40
 8009c34:	f040 80b4 	bne.w	8009da0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 8140 	beq.w	8009ece <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c56:	429a      	cmp	r2, r3
 8009c58:	f080 8139 	bcs.w	8009ece <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c6e:	f000 8088 	beq.w	8009d82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	330c      	adds	r3, #12
 8009c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	330c      	adds	r3, #12
 8009c9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1d9      	bne.n	8009c72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3314      	adds	r3, #20
 8009cc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cd0:	f023 0301 	bic.w	r3, r3, #1
 8009cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3314      	adds	r3, #20
 8009cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ce2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e1      	bne.n	8009cbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3314      	adds	r3, #20
 8009d00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3314      	adds	r3, #20
 8009d1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e3      	bne.n	8009cfa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2220      	movs	r2, #32
 8009d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	330c      	adds	r3, #12
 8009d46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d4a:	e853 3f00 	ldrex	r3, [r3]
 8009d4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d52:	f023 0310 	bic.w	r3, r3, #16
 8009d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	330c      	adds	r3, #12
 8009d60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009d64:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e3      	bne.n	8009d40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fa fd0f 	bl	80047a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	4619      	mov	r1, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f8ca 	bl	8009f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d98:	e099      	b.n	8009ece <HAL_UART_IRQHandler+0x50e>
 8009d9a:	bf00      	nop
 8009d9c:	0800a437 	.word	0x0800a437
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 808b 	beq.w	8009ed2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 8086 	beq.w	8009ed2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	330c      	adds	r3, #12
 8009dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330c      	adds	r3, #12
 8009de6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009dea:	647a      	str	r2, [r7, #68]	; 0x44
 8009dec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df2:	e841 2300 	strex	r3, r2, [r1]
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1e3      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3314      	adds	r3, #20
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	e853 3f00 	ldrex	r3, [r3]
 8009e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	f023 0301 	bic.w	r3, r3, #1
 8009e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3314      	adds	r3, #20
 8009e1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e22:	633a      	str	r2, [r7, #48]	; 0x30
 8009e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e3      	bne.n	8009dfe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	330c      	adds	r3, #12
 8009e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 0310 	bic.w	r3, r3, #16
 8009e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	330c      	adds	r3, #12
 8009e64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009e68:	61fa      	str	r2, [r7, #28]
 8009e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6c:	69b9      	ldr	r1, [r7, #24]
 8009e6e:	69fa      	ldr	r2, [r7, #28]
 8009e70:	e841 2300 	strex	r3, r2, [r1]
 8009e74:	617b      	str	r3, [r7, #20]
   return(result);
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1e3      	bne.n	8009e44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f852 	bl	8009f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e88:	e023      	b.n	8009ed2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d009      	beq.n	8009eaa <HAL_UART_IRQHandler+0x4ea>
 8009e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fadb 	bl	800a45e <UART_Transmit_IT>
    return;
 8009ea8:	e014      	b.n	8009ed4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00e      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x514>
 8009eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d008      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fb1b 	bl	800a4fe <UART_EndTransmit_IT>
    return;
 8009ec8:	e004      	b.n	8009ed4 <HAL_UART_IRQHandler+0x514>
    return;
 8009eca:	bf00      	nop
 8009ecc:	e002      	b.n	8009ed4 <HAL_UART_IRQHandler+0x514>
      return;
 8009ece:	bf00      	nop
 8009ed0:	e000      	b.n	8009ed4 <HAL_UART_IRQHandler+0x514>
      return;
 8009ed2:	bf00      	nop
  }
}
 8009ed4:	37e8      	adds	r7, #232	; 0xe8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop

08009edc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b090      	sub	sp, #64	; 0x40
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d137      	bne.n	8009fd0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f62:	2200      	movs	r2, #0
 8009f64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3314      	adds	r3, #20
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	623b      	str	r3, [r7, #32]
   return(result);
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3314      	adds	r3, #20
 8009f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f86:	633a      	str	r2, [r7, #48]	; 0x30
 8009f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e5      	bne.n	8009f66 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	330c      	adds	r3, #12
 8009fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	330c      	adds	r3, #12
 8009fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fba:	61fa      	str	r2, [r7, #28]
 8009fbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	69b9      	ldr	r1, [r7, #24]
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e5      	bne.n	8009f9a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fce:	e002      	b.n	8009fd6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009fd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009fd2:	f7f8 fdb5 	bl	8002b40 <HAL_UART_TxCpltCallback>
}
 8009fd6:	bf00      	nop
 8009fd8:	3740      	adds	r7, #64	; 0x40
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7ff ff75 	bl	8009edc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ff2:	bf00      	nop
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b09c      	sub	sp, #112	; 0x70
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a006:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a012:	2b00      	cmp	r3, #0
 800a014:	d172      	bne.n	800a0fc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a018:	2200      	movs	r2, #0
 800a01a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	330c      	adds	r3, #12
 800a022:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a02c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a02e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a032:	66bb      	str	r3, [r7, #104]	; 0x68
 800a034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	330c      	adds	r3, #12
 800a03a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a03c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a03e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a040:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a044:	e841 2300 	strex	r3, r2, [r1]
 800a048:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a04a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e5      	bne.n	800a01c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3314      	adds	r3, #20
 800a056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a062:	f023 0301 	bic.w	r3, r3, #1
 800a066:	667b      	str	r3, [r7, #100]	; 0x64
 800a068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3314      	adds	r3, #20
 800a06e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a070:	647a      	str	r2, [r7, #68]	; 0x44
 800a072:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e5      	bne.n	800a050 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3314      	adds	r3, #20
 800a08a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	623b      	str	r3, [r7, #32]
   return(result);
 800a094:	6a3b      	ldr	r3, [r7, #32]
 800a096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a09a:	663b      	str	r3, [r7, #96]	; 0x60
 800a09c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3314      	adds	r3, #20
 800a0a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a0a4:	633a      	str	r2, [r7, #48]	; 0x30
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e5      	bne.n	800a084 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d119      	bne.n	800a0fc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	e853 3f00 	ldrex	r3, [r3]
 800a0d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f023 0310 	bic.w	r3, r3, #16
 800a0de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	330c      	adds	r3, #12
 800a0e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0e8:	61fa      	str	r2, [r7, #28]
 800a0ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	69b9      	ldr	r1, [r7, #24]
 800a0ee:	69fa      	ldr	r2, [r7, #28]
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e5      	bne.n	800a0c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a100:	2b01      	cmp	r3, #1
 800a102:	d106      	bne.n	800a112 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a106:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a108:	4619      	mov	r1, r3
 800a10a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a10c:	f7ff ff0e 	bl	8009f2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a110:	e002      	b.n	800a118 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a112:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a114:	f7ff feec 	bl	8009ef0 <HAL_UART_RxCpltCallback>
}
 800a118:	bf00      	nop
 800a11a:	3770      	adds	r7, #112	; 0x70
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a132:	2b01      	cmp	r3, #1
 800a134:	d108      	bne.n	800a148 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a13a:	085b      	lsrs	r3, r3, #1
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	4619      	mov	r1, r3
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f7ff fef3 	bl	8009f2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a146:	e002      	b.n	800a14e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f7ff fedb 	bl	8009f04 <HAL_UART_RxHalfCpltCallback>
}
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a15e:	2300      	movs	r3, #0
 800a160:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a172:	2b80      	cmp	r3, #128	; 0x80
 800a174:	bf0c      	ite	eq
 800a176:	2301      	moveq	r3, #1
 800a178:	2300      	movne	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b21      	cmp	r3, #33	; 0x21
 800a188:	d108      	bne.n	800a19c <UART_DMAError+0x46>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2200      	movs	r2, #0
 800a194:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a196:	68b8      	ldr	r0, [r7, #8]
 800a198:	f000 f8c2 	bl	800a320 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a6:	2b40      	cmp	r3, #64	; 0x40
 800a1a8:	bf0c      	ite	eq
 800a1aa:	2301      	moveq	r3, #1
 800a1ac:	2300      	movne	r3, #0
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b22      	cmp	r3, #34	; 0x22
 800a1bc:	d108      	bne.n	800a1d0 <UART_DMAError+0x7a>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d005      	beq.n	800a1d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a1ca:	68b8      	ldr	r0, [r7, #8]
 800a1cc:	f000 f8d0 	bl	800a370 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d4:	f043 0210 	orr.w	r2, r3, #16
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1dc:	68b8      	ldr	r0, [r7, #8]
 800a1de:	f7ff fe9b 	bl	8009f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1e2:	bf00      	nop
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
	...

0800a1ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b098      	sub	sp, #96	; 0x60
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	88fa      	ldrh	r2, [r7, #6]
 800a204:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2222      	movs	r2, #34	; 0x22
 800a210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a218:	4a3e      	ldr	r2, [pc, #248]	; (800a314 <UART_Start_Receive_DMA+0x128>)
 800a21a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a220:	4a3d      	ldr	r2, [pc, #244]	; (800a318 <UART_Start_Receive_DMA+0x12c>)
 800a222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a228:	4a3c      	ldr	r2, [pc, #240]	; (800a31c <UART_Start_Receive_DMA+0x130>)
 800a22a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	2200      	movs	r2, #0
 800a232:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a234:	f107 0308 	add.w	r3, r7, #8
 800a238:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3304      	adds	r3, #4
 800a244:	4619      	mov	r1, r3
 800a246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	88fb      	ldrh	r3, [r7, #6]
 800a24c:	f7fa fa50 	bl	80046f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a250:	2300      	movs	r3, #0
 800a252:	613b      	str	r3, [r7, #16]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	613b      	str	r3, [r7, #16]
 800a264:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	330c      	adds	r3, #12
 800a274:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a278:	e853 3f00 	ldrex	r3, [r3]
 800a27c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a284:	65bb      	str	r3, [r7, #88]	; 0x58
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	330c      	adds	r3, #12
 800a28c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a28e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a290:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a292:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a294:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a296:	e841 2300 	strex	r3, r2, [r1]
 800a29a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a29c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1e5      	bne.n	800a26e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3314      	adds	r3, #20
 800a2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	f043 0301 	orr.w	r3, r3, #1
 800a2b8:	657b      	str	r3, [r7, #84]	; 0x54
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3314      	adds	r3, #20
 800a2c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2c2:	63ba      	str	r2, [r7, #56]	; 0x38
 800a2c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e5      	bne.n	800a2a2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3314      	adds	r3, #20
 800a2dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	e853 3f00 	ldrex	r3, [r3]
 800a2e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ec:	653b      	str	r3, [r7, #80]	; 0x50
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3314      	adds	r3, #20
 800a2f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2f6:	627a      	str	r2, [r7, #36]	; 0x24
 800a2f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fa:	6a39      	ldr	r1, [r7, #32]
 800a2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	61fb      	str	r3, [r7, #28]
   return(result);
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e5      	bne.n	800a2d6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3760      	adds	r7, #96	; 0x60
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	08009ffb 	.word	0x08009ffb
 800a318:	0800a121 	.word	0x0800a121
 800a31c:	0800a157 	.word	0x0800a157

0800a320 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a320:	b480      	push	{r7}
 800a322:	b089      	sub	sp, #36	; 0x24
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	330c      	adds	r3, #12
 800a32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	60bb      	str	r3, [r7, #8]
   return(result);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a33e:	61fb      	str	r3, [r7, #28]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	330c      	adds	r3, #12
 800a346:	69fa      	ldr	r2, [r7, #28]
 800a348:	61ba      	str	r2, [r7, #24]
 800a34a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	6979      	ldr	r1, [r7, #20]
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	613b      	str	r3, [r7, #16]
   return(result);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e5      	bne.n	800a328 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a364:	bf00      	nop
 800a366:	3724      	adds	r7, #36	; 0x24
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a370:	b480      	push	{r7}
 800a372:	b095      	sub	sp, #84	; 0x54
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	330c      	adds	r3, #12
 800a37e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a382:	e853 3f00 	ldrex	r3, [r3]
 800a386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a38e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	330c      	adds	r3, #12
 800a396:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a398:	643a      	str	r2, [r7, #64]	; 0x40
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a39e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3a0:	e841 2300 	strex	r3, r2, [r1]
 800a3a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e5      	bne.n	800a378 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3314      	adds	r3, #20
 800a3b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	e853 3f00 	ldrex	r3, [r3]
 800a3ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	f023 0301 	bic.w	r3, r3, #1
 800a3c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3314      	adds	r3, #20
 800a3ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3d4:	e841 2300 	strex	r3, r2, [r1]
 800a3d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1e5      	bne.n	800a3ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d119      	bne.n	800a41c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	330c      	adds	r3, #12
 800a3ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	e853 3f00 	ldrex	r3, [r3]
 800a3f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f023 0310 	bic.w	r3, r3, #16
 800a3fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	330c      	adds	r3, #12
 800a406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a408:	61ba      	str	r2, [r7, #24]
 800a40a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40c:	6979      	ldr	r1, [r7, #20]
 800a40e:	69ba      	ldr	r2, [r7, #24]
 800a410:	e841 2300 	strex	r3, r2, [r1]
 800a414:	613b      	str	r3, [r7, #16]
   return(result);
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1e5      	bne.n	800a3e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2220      	movs	r2, #32
 800a420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a42a:	bf00      	nop
 800a42c:	3754      	adds	r7, #84	; 0x54
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a442:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7ff fd61 	bl	8009f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a456:	bf00      	nop
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a45e:	b480      	push	{r7}
 800a460:	b085      	sub	sp, #20
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b21      	cmp	r3, #33	; 0x21
 800a470:	d13e      	bne.n	800a4f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47a:	d114      	bne.n	800a4a6 <UART_Transmit_IT+0x48>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d110      	bne.n	800a4a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a1b      	ldr	r3, [r3, #32]
 800a488:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a498:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	1c9a      	adds	r2, r3, #2
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	621a      	str	r2, [r3, #32]
 800a4a4:	e008      	b.n	800a4b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	1c59      	adds	r1, r3, #1
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	6211      	str	r1, [r2, #32]
 800a4b0:	781a      	ldrb	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10f      	bne.n	800a4ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e000      	b.n	800a4f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a4f0:	2302      	movs	r3, #2
  }
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68da      	ldr	r2, [r3, #12]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a514:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2220      	movs	r2, #32
 800a51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7f8 fb0e 	bl	8002b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b08c      	sub	sp, #48	; 0x30
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b22      	cmp	r3, #34	; 0x22
 800a540:	f040 80ab 	bne.w	800a69a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a54c:	d117      	bne.n	800a57e <UART_Receive_IT+0x50>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d113      	bne.n	800a57e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a556:	2300      	movs	r3, #0
 800a558:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	b29b      	uxth	r3, r3
 800a568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a576:	1c9a      	adds	r2, r3, #2
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	629a      	str	r2, [r3, #40]	; 0x28
 800a57c:	e026      	b.n	800a5cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a582:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a584:	2300      	movs	r3, #0
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a590:	d007      	beq.n	800a5a2 <UART_Receive_IT+0x74>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10a      	bne.n	800a5b0 <UART_Receive_IT+0x82>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	701a      	strb	r2, [r3, #0]
 800a5ae:	e008      	b.n	800a5c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d15a      	bne.n	800a696 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68da      	ldr	r2, [r3, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f022 0220 	bic.w	r2, r2, #32
 800a5ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68da      	ldr	r2, [r3, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	695a      	ldr	r2, [r3, #20]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f022 0201 	bic.w	r2, r2, #1
 800a60e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2220      	movs	r2, #32
 800a614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d135      	bne.n	800a68c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	330c      	adds	r3, #12
 800a62c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	613b      	str	r3, [r7, #16]
   return(result);
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f023 0310 	bic.w	r3, r3, #16
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	330c      	adds	r3, #12
 800a644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a646:	623a      	str	r2, [r7, #32]
 800a648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64a:	69f9      	ldr	r1, [r7, #28]
 800a64c:	6a3a      	ldr	r2, [r7, #32]
 800a64e:	e841 2300 	strex	r3, r2, [r1]
 800a652:	61bb      	str	r3, [r7, #24]
   return(result);
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e5      	bne.n	800a626 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0310 	and.w	r3, r3, #16
 800a664:	2b10      	cmp	r3, #16
 800a666:	d10a      	bne.n	800a67e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a668:	2300      	movs	r3, #0
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7ff fc51 	bl	8009f2c <HAL_UARTEx_RxEventCallback>
 800a68a:	e002      	b.n	800a692 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff fc2f 	bl	8009ef0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	e002      	b.n	800a69c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a696:	2300      	movs	r3, #0
 800a698:	e000      	b.n	800a69c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a69a:	2302      	movs	r3, #2
  }
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3730      	adds	r7, #48	; 0x30
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	b09f      	sub	sp, #124	; 0x7c
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a6b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ba:	68d9      	ldr	r1, [r3, #12]
 800a6bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	ea40 0301 	orr.w	r3, r0, r1
 800a6c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	431a      	orrs	r2, r3
 800a6d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a6de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a6e8:	f021 010c 	bic.w	r1, r1, #12
 800a6ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6f2:	430b      	orrs	r3, r1
 800a6f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a702:	6999      	ldr	r1, [r3, #24]
 800a704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	ea40 0301 	orr.w	r3, r0, r1
 800a70c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	4bc5      	ldr	r3, [pc, #788]	; (800aa28 <UART_SetConfig+0x384>)
 800a714:	429a      	cmp	r2, r3
 800a716:	d004      	beq.n	800a722 <UART_SetConfig+0x7e>
 800a718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	4bc3      	ldr	r3, [pc, #780]	; (800aa2c <UART_SetConfig+0x388>)
 800a71e:	429a      	cmp	r2, r3
 800a720:	d103      	bne.n	800a72a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a722:	f7fd fbbf 	bl	8007ea4 <HAL_RCC_GetPCLK2Freq>
 800a726:	6778      	str	r0, [r7, #116]	; 0x74
 800a728:	e002      	b.n	800a730 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a72a:	f7fd fba7 	bl	8007e7c <HAL_RCC_GetPCLK1Freq>
 800a72e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a738:	f040 80b6 	bne.w	800a8a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a73c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a73e:	461c      	mov	r4, r3
 800a740:	f04f 0500 	mov.w	r5, #0
 800a744:	4622      	mov	r2, r4
 800a746:	462b      	mov	r3, r5
 800a748:	1891      	adds	r1, r2, r2
 800a74a:	6439      	str	r1, [r7, #64]	; 0x40
 800a74c:	415b      	adcs	r3, r3
 800a74e:	647b      	str	r3, [r7, #68]	; 0x44
 800a750:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a754:	1912      	adds	r2, r2, r4
 800a756:	eb45 0303 	adc.w	r3, r5, r3
 800a75a:	f04f 0000 	mov.w	r0, #0
 800a75e:	f04f 0100 	mov.w	r1, #0
 800a762:	00d9      	lsls	r1, r3, #3
 800a764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a768:	00d0      	lsls	r0, r2, #3
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	1911      	adds	r1, r2, r4
 800a770:	6639      	str	r1, [r7, #96]	; 0x60
 800a772:	416b      	adcs	r3, r5
 800a774:	667b      	str	r3, [r7, #100]	; 0x64
 800a776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f04f 0300 	mov.w	r3, #0
 800a780:	1891      	adds	r1, r2, r2
 800a782:	63b9      	str	r1, [r7, #56]	; 0x38
 800a784:	415b      	adcs	r3, r3
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a78c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a790:	f7f6 fa52 	bl	8000c38 <__aeabi_uldivmod>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4ba5      	ldr	r3, [pc, #660]	; (800aa30 <UART_SetConfig+0x38c>)
 800a79a:	fba3 2302 	umull	r2, r3, r3, r2
 800a79e:	095b      	lsrs	r3, r3, #5
 800a7a0:	011e      	lsls	r6, r3, #4
 800a7a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7a4:	461c      	mov	r4, r3
 800a7a6:	f04f 0500 	mov.w	r5, #0
 800a7aa:	4622      	mov	r2, r4
 800a7ac:	462b      	mov	r3, r5
 800a7ae:	1891      	adds	r1, r2, r2
 800a7b0:	6339      	str	r1, [r7, #48]	; 0x30
 800a7b2:	415b      	adcs	r3, r3
 800a7b4:	637b      	str	r3, [r7, #52]	; 0x34
 800a7b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a7ba:	1912      	adds	r2, r2, r4
 800a7bc:	eb45 0303 	adc.w	r3, r5, r3
 800a7c0:	f04f 0000 	mov.w	r0, #0
 800a7c4:	f04f 0100 	mov.w	r1, #0
 800a7c8:	00d9      	lsls	r1, r3, #3
 800a7ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7ce:	00d0      	lsls	r0, r2, #3
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	1911      	adds	r1, r2, r4
 800a7d6:	65b9      	str	r1, [r7, #88]	; 0x58
 800a7d8:	416b      	adcs	r3, r5
 800a7da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	f04f 0300 	mov.w	r3, #0
 800a7e6:	1891      	adds	r1, r2, r2
 800a7e8:	62b9      	str	r1, [r7, #40]	; 0x28
 800a7ea:	415b      	adcs	r3, r3
 800a7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a7f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a7f6:	f7f6 fa1f 	bl	8000c38 <__aeabi_uldivmod>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4b8c      	ldr	r3, [pc, #560]	; (800aa30 <UART_SetConfig+0x38c>)
 800a800:	fba3 1302 	umull	r1, r3, r3, r2
 800a804:	095b      	lsrs	r3, r3, #5
 800a806:	2164      	movs	r1, #100	; 0x64
 800a808:	fb01 f303 	mul.w	r3, r1, r3
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	3332      	adds	r3, #50	; 0x32
 800a812:	4a87      	ldr	r2, [pc, #540]	; (800aa30 <UART_SetConfig+0x38c>)
 800a814:	fba2 2303 	umull	r2, r3, r2, r3
 800a818:	095b      	lsrs	r3, r3, #5
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a820:	441e      	add	r6, r3
 800a822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a824:	4618      	mov	r0, r3
 800a826:	f04f 0100 	mov.w	r1, #0
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	1894      	adds	r4, r2, r2
 800a830:	623c      	str	r4, [r7, #32]
 800a832:	415b      	adcs	r3, r3
 800a834:	627b      	str	r3, [r7, #36]	; 0x24
 800a836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a83a:	1812      	adds	r2, r2, r0
 800a83c:	eb41 0303 	adc.w	r3, r1, r3
 800a840:	f04f 0400 	mov.w	r4, #0
 800a844:	f04f 0500 	mov.w	r5, #0
 800a848:	00dd      	lsls	r5, r3, #3
 800a84a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a84e:	00d4      	lsls	r4, r2, #3
 800a850:	4622      	mov	r2, r4
 800a852:	462b      	mov	r3, r5
 800a854:	1814      	adds	r4, r2, r0
 800a856:	653c      	str	r4, [r7, #80]	; 0x50
 800a858:	414b      	adcs	r3, r1
 800a85a:	657b      	str	r3, [r7, #84]	; 0x54
 800a85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	461a      	mov	r2, r3
 800a862:	f04f 0300 	mov.w	r3, #0
 800a866:	1891      	adds	r1, r2, r2
 800a868:	61b9      	str	r1, [r7, #24]
 800a86a:	415b      	adcs	r3, r3
 800a86c:	61fb      	str	r3, [r7, #28]
 800a86e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a872:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a876:	f7f6 f9df 	bl	8000c38 <__aeabi_uldivmod>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4b6c      	ldr	r3, [pc, #432]	; (800aa30 <UART_SetConfig+0x38c>)
 800a880:	fba3 1302 	umull	r1, r3, r3, r2
 800a884:	095b      	lsrs	r3, r3, #5
 800a886:	2164      	movs	r1, #100	; 0x64
 800a888:	fb01 f303 	mul.w	r3, r1, r3
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	3332      	adds	r3, #50	; 0x32
 800a892:	4a67      	ldr	r2, [pc, #412]	; (800aa30 <UART_SetConfig+0x38c>)
 800a894:	fba2 2303 	umull	r2, r3, r2, r3
 800a898:	095b      	lsrs	r3, r3, #5
 800a89a:	f003 0207 	and.w	r2, r3, #7
 800a89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4432      	add	r2, r6
 800a8a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8a6:	e0b9      	b.n	800aa1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8aa:	461c      	mov	r4, r3
 800a8ac:	f04f 0500 	mov.w	r5, #0
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	462b      	mov	r3, r5
 800a8b4:	1891      	adds	r1, r2, r2
 800a8b6:	6139      	str	r1, [r7, #16]
 800a8b8:	415b      	adcs	r3, r3
 800a8ba:	617b      	str	r3, [r7, #20]
 800a8bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a8c0:	1912      	adds	r2, r2, r4
 800a8c2:	eb45 0303 	adc.w	r3, r5, r3
 800a8c6:	f04f 0000 	mov.w	r0, #0
 800a8ca:	f04f 0100 	mov.w	r1, #0
 800a8ce:	00d9      	lsls	r1, r3, #3
 800a8d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a8d4:	00d0      	lsls	r0, r2, #3
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	eb12 0804 	adds.w	r8, r2, r4
 800a8de:	eb43 0905 	adc.w	r9, r3, r5
 800a8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f04f 0100 	mov.w	r1, #0
 800a8ec:	f04f 0200 	mov.w	r2, #0
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	008b      	lsls	r3, r1, #2
 800a8f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a8fa:	0082      	lsls	r2, r0, #2
 800a8fc:	4640      	mov	r0, r8
 800a8fe:	4649      	mov	r1, r9
 800a900:	f7f6 f99a 	bl	8000c38 <__aeabi_uldivmod>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	4b49      	ldr	r3, [pc, #292]	; (800aa30 <UART_SetConfig+0x38c>)
 800a90a:	fba3 2302 	umull	r2, r3, r3, r2
 800a90e:	095b      	lsrs	r3, r3, #5
 800a910:	011e      	lsls	r6, r3, #4
 800a912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a914:	4618      	mov	r0, r3
 800a916:	f04f 0100 	mov.w	r1, #0
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	1894      	adds	r4, r2, r2
 800a920:	60bc      	str	r4, [r7, #8]
 800a922:	415b      	adcs	r3, r3
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a92a:	1812      	adds	r2, r2, r0
 800a92c:	eb41 0303 	adc.w	r3, r1, r3
 800a930:	f04f 0400 	mov.w	r4, #0
 800a934:	f04f 0500 	mov.w	r5, #0
 800a938:	00dd      	lsls	r5, r3, #3
 800a93a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a93e:	00d4      	lsls	r4, r2, #3
 800a940:	4622      	mov	r2, r4
 800a942:	462b      	mov	r3, r5
 800a944:	1814      	adds	r4, r2, r0
 800a946:	64bc      	str	r4, [r7, #72]	; 0x48
 800a948:	414b      	adcs	r3, r1
 800a94a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a94c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	4618      	mov	r0, r3
 800a952:	f04f 0100 	mov.w	r1, #0
 800a956:	f04f 0200 	mov.w	r2, #0
 800a95a:	f04f 0300 	mov.w	r3, #0
 800a95e:	008b      	lsls	r3, r1, #2
 800a960:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a964:	0082      	lsls	r2, r0, #2
 800a966:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a96a:	f7f6 f965 	bl	8000c38 <__aeabi_uldivmod>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	4b2f      	ldr	r3, [pc, #188]	; (800aa30 <UART_SetConfig+0x38c>)
 800a974:	fba3 1302 	umull	r1, r3, r3, r2
 800a978:	095b      	lsrs	r3, r3, #5
 800a97a:	2164      	movs	r1, #100	; 0x64
 800a97c:	fb01 f303 	mul.w	r3, r1, r3
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	3332      	adds	r3, #50	; 0x32
 800a986:	4a2a      	ldr	r2, [pc, #168]	; (800aa30 <UART_SetConfig+0x38c>)
 800a988:	fba2 2303 	umull	r2, r3, r2, r3
 800a98c:	095b      	lsrs	r3, r3, #5
 800a98e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a992:	441e      	add	r6, r3
 800a994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a996:	4618      	mov	r0, r3
 800a998:	f04f 0100 	mov.w	r1, #0
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	1894      	adds	r4, r2, r2
 800a9a2:	603c      	str	r4, [r7, #0]
 800a9a4:	415b      	adcs	r3, r3
 800a9a6:	607b      	str	r3, [r7, #4]
 800a9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ac:	1812      	adds	r2, r2, r0
 800a9ae:	eb41 0303 	adc.w	r3, r1, r3
 800a9b2:	f04f 0400 	mov.w	r4, #0
 800a9b6:	f04f 0500 	mov.w	r5, #0
 800a9ba:	00dd      	lsls	r5, r3, #3
 800a9bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a9c0:	00d4      	lsls	r4, r2, #3
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	eb12 0a00 	adds.w	sl, r2, r0
 800a9ca:	eb43 0b01 	adc.w	fp, r3, r1
 800a9ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f04f 0100 	mov.w	r1, #0
 800a9d8:	f04f 0200 	mov.w	r2, #0
 800a9dc:	f04f 0300 	mov.w	r3, #0
 800a9e0:	008b      	lsls	r3, r1, #2
 800a9e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a9e6:	0082      	lsls	r2, r0, #2
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	4659      	mov	r1, fp
 800a9ec:	f7f6 f924 	bl	8000c38 <__aeabi_uldivmod>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4b0e      	ldr	r3, [pc, #56]	; (800aa30 <UART_SetConfig+0x38c>)
 800a9f6:	fba3 1302 	umull	r1, r3, r3, r2
 800a9fa:	095b      	lsrs	r3, r3, #5
 800a9fc:	2164      	movs	r1, #100	; 0x64
 800a9fe:	fb01 f303 	mul.w	r3, r1, r3
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	011b      	lsls	r3, r3, #4
 800aa06:	3332      	adds	r3, #50	; 0x32
 800aa08:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <UART_SetConfig+0x38c>)
 800aa0a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0e:	095b      	lsrs	r3, r3, #5
 800aa10:	f003 020f 	and.w	r2, r3, #15
 800aa14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4432      	add	r2, r6
 800aa1a:	609a      	str	r2, [r3, #8]
}
 800aa1c:	bf00      	nop
 800aa1e:	377c      	adds	r7, #124	; 0x7c
 800aa20:	46bd      	mov	sp, r7
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	bf00      	nop
 800aa28:	40011000 	.word	0x40011000
 800aa2c:	40011400 	.word	0x40011400
 800aa30:	51eb851f 	.word	0x51eb851f

0800aa34 <MX_LWIP_Init>:

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init(NULL, NULL);
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	f004 fd85 	bl	800f54c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800aa42:	4b2a      	ldr	r3, [pc, #168]	; (800aaec <MX_LWIP_Init+0xb8>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800aa48:	4b29      	ldr	r3, [pc, #164]	; (800aaf0 <MX_LWIP_Init+0xbc>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800aa4e:	4b29      	ldr	r3, [pc, #164]	; (800aaf4 <MX_LWIP_Init+0xc0>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800aa54:	4b28      	ldr	r3, [pc, #160]	; (800aaf8 <MX_LWIP_Init+0xc4>)
 800aa56:	9302      	str	r3, [sp, #8]
 800aa58:	4b28      	ldr	r3, [pc, #160]	; (800aafc <MX_LWIP_Init+0xc8>)
 800aa5a:	9301      	str	r3, [sp, #4]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	4b24      	ldr	r3, [pc, #144]	; (800aaf4 <MX_LWIP_Init+0xc0>)
 800aa62:	4a23      	ldr	r2, [pc, #140]	; (800aaf0 <MX_LWIP_Init+0xbc>)
 800aa64:	4921      	ldr	r1, [pc, #132]	; (800aaec <MX_LWIP_Init+0xb8>)
 800aa66:	4826      	ldr	r0, [pc, #152]	; (800ab00 <MX_LWIP_Init+0xcc>)
 800aa68:	f005 faf4 	bl	8010054 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800aa6c:	4824      	ldr	r0, [pc, #144]	; (800ab00 <MX_LWIP_Init+0xcc>)
 800aa6e:	f005 fcab 	bl	80103c8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800aa72:	4b23      	ldr	r3, [pc, #140]	; (800ab00 <MX_LWIP_Init+0xcc>)
 800aa74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa78:	089b      	lsrs	r3, r3, #2
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d003      	beq.n	800aa8c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800aa84:	481e      	ldr	r0, [pc, #120]	; (800ab00 <MX_LWIP_Init+0xcc>)
 800aa86:	f005 fcaf 	bl	80103e8 <netif_set_up>
 800aa8a:	e002      	b.n	800aa92 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800aa8c:	481c      	ldr	r0, [pc, #112]	; (800ab00 <MX_LWIP_Init+0xcc>)
 800aa8e:	f005 fd17 	bl	80104c0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800aa92:	491c      	ldr	r1, [pc, #112]	; (800ab04 <MX_LWIP_Init+0xd0>)
 800aa94:	481a      	ldr	r0, [pc, #104]	; (800ab00 <MX_LWIP_Init+0xcc>)
 800aa96:	f005 fdad 	bl	80105f4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2101      	movs	r1, #1
 800aa9e:	2001      	movs	r0, #1
 800aaa0:	f000 ff78 	bl	800b994 <osSemaphoreNew>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	4a18      	ldr	r2, [pc, #96]	; (800ab08 <MX_LWIP_Init+0xd4>)
 800aaa8:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800aaaa:	4b18      	ldr	r3, [pc, #96]	; (800ab0c <MX_LWIP_Init+0xd8>)
 800aaac:	4a14      	ldr	r2, [pc, #80]	; (800ab00 <MX_LWIP_Init+0xcc>)
 800aaae:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800aab0:	4b15      	ldr	r3, [pc, #84]	; (800ab08 <MX_LWIP_Init+0xd4>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a15      	ldr	r2, [pc, #84]	; (800ab0c <MX_LWIP_Init+0xd8>)
 800aab6:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
  /* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800aab8:	2224      	movs	r2, #36	; 0x24
 800aaba:	2100      	movs	r1, #0
 800aabc:	4814      	ldr	r0, [pc, #80]	; (800ab10 <MX_LWIP_Init+0xdc>)
 800aabe:	f012 f8ec 	bl	801cc9a <memset>
  attributes.name = "LinkThr";
 800aac2:	4b13      	ldr	r3, [pc, #76]	; (800ab10 <MX_LWIP_Init+0xdc>)
 800aac4:	4a13      	ldr	r2, [pc, #76]	; (800ab14 <MX_LWIP_Init+0xe0>)
 800aac6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800aac8:	4b11      	ldr	r3, [pc, #68]	; (800ab10 <MX_LWIP_Init+0xdc>)
 800aaca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aace:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800aad0:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <MX_LWIP_Init+0xdc>)
 800aad2:	2210      	movs	r2, #16
 800aad4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800aad6:	4a0e      	ldr	r2, [pc, #56]	; (800ab10 <MX_LWIP_Init+0xdc>)
 800aad8:	490c      	ldr	r1, [pc, #48]	; (800ab0c <MX_LWIP_Init+0xd8>)
 800aada:	480f      	ldr	r0, [pc, #60]	; (800ab18 <MX_LWIP_Init+0xe4>)
 800aadc:	f000 fcdf 	bl	800b49e <osThreadNew>
  /* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800aae0:	4807      	ldr	r0, [pc, #28]	; (800ab00 <MX_LWIP_Init+0xcc>)
 800aae2:	f00c fee9 	bl	80178b8 <dhcp_start>

  /* USER CODE BEGIN 3 */
  // sys_thread_new("tcp_thread_01", tcp_thread_01, NULL, 512, 4);
  // sys_thread_new("tcp_thread_02", tcp_thread_02, NULL, 512, 4);
  /* USER CODE END 3 */
}
 800aae6:	bf00      	nop
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	2000d188 	.word	0x2000d188
 800aaf0:	2000d18c 	.word	0x2000d18c
 800aaf4:	2000d190 	.word	0x2000d190
 800aaf8:	0800f489 	.word	0x0800f489
 800aafc:	0800b169 	.word	0x0800b169
 800ab00:	2000d150 	.word	0x2000d150
 800ab04:	0800b24d 	.word	0x0800b24d
 800ab08:	2000017c 	.word	0x2000017c
 800ab0c:	2000d124 	.word	0x2000d124
 800ab10:	2000d12c 	.word	0x2000d12c
 800ab14:	0801e0c0 	.word	0x0801e0c0
 800ab18:	0800b1d5 	.word	0x0800b1d5

0800ab1c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08e      	sub	sp, #56	; 0x38
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	605a      	str	r2, [r3, #4]
 800ab2e:	609a      	str	r2, [r3, #8]
 800ab30:	60da      	str	r2, [r3, #12]
 800ab32:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a53      	ldr	r2, [pc, #332]	; (800ac88 <HAL_ETH_MspInit+0x16c>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	f040 809f 	bne.w	800ac7e <HAL_ETH_MspInit+0x162>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ab40:	2300      	movs	r3, #0
 800ab42:	623b      	str	r3, [r7, #32]
 800ab44:	4b51      	ldr	r3, [pc, #324]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab48:	4a50      	ldr	r2, [pc, #320]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ab4e:	6313      	str	r3, [r2, #48]	; 0x30
 800ab50:	4b4e      	ldr	r3, [pc, #312]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab58:	623b      	str	r3, [r7, #32]
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	61fb      	str	r3, [r7, #28]
 800ab60:	4b4a      	ldr	r3, [pc, #296]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab64:	4a49      	ldr	r2, [pc, #292]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab6a:	6313      	str	r3, [r2, #48]	; 0x30
 800ab6c:	4b47      	ldr	r3, [pc, #284]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab74:	61fb      	str	r3, [r7, #28]
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	2300      	movs	r3, #0
 800ab7a:	61bb      	str	r3, [r7, #24]
 800ab7c:	4b43      	ldr	r3, [pc, #268]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab80:	4a42      	ldr	r2, [pc, #264]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab86:	6313      	str	r3, [r2, #48]	; 0x30
 800ab88:	4b40      	ldr	r3, [pc, #256]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab90:	61bb      	str	r3, [r7, #24]
 800ab92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab94:	2300      	movs	r3, #0
 800ab96:	617b      	str	r3, [r7, #20]
 800ab98:	4b3c      	ldr	r3, [pc, #240]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9c:	4a3b      	ldr	r2, [pc, #236]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800ab9e:	f043 0304 	orr.w	r3, r3, #4
 800aba2:	6313      	str	r3, [r2, #48]	; 0x30
 800aba4:	4b39      	ldr	r3, [pc, #228]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800aba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba8:	f003 0304 	and.w	r3, r3, #4
 800abac:	617b      	str	r3, [r7, #20]
 800abae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abb0:	2300      	movs	r3, #0
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	4b35      	ldr	r3, [pc, #212]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800abb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb8:	4a34      	ldr	r2, [pc, #208]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800abba:	f043 0301 	orr.w	r3, r3, #1
 800abbe:	6313      	str	r3, [r2, #48]	; 0x30
 800abc0:	4b32      	ldr	r3, [pc, #200]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800abc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc4:	f003 0301 	and.w	r3, r3, #1
 800abc8:	613b      	str	r3, [r7, #16]
 800abca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800abcc:	2300      	movs	r3, #0
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	4b2e      	ldr	r3, [pc, #184]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800abd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd4:	4a2d      	ldr	r2, [pc, #180]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800abd6:	f043 0302 	orr.w	r3, r3, #2
 800abda:	6313      	str	r3, [r2, #48]	; 0x30
 800abdc:	4b2b      	ldr	r3, [pc, #172]	; (800ac8c <HAL_ETH_MspInit+0x170>)
 800abde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	60fb      	str	r3, [r7, #12]
 800abe6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800abe8:	2332      	movs	r3, #50	; 0x32
 800abea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abec:	2302      	movs	r3, #2
 800abee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf0:	2300      	movs	r3, #0
 800abf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abf4:	2303      	movs	r3, #3
 800abf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800abf8:	230b      	movs	r3, #11
 800abfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac00:	4619      	mov	r1, r3
 800ac02:	4823      	ldr	r0, [pc, #140]	; (800ac90 <HAL_ETH_MspInit+0x174>)
 800ac04:	f7fb fa6e 	bl	80060e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ac08:	2386      	movs	r3, #134	; 0x86
 800ac0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac10:	2300      	movs	r3, #0
 800ac12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac14:	2303      	movs	r3, #3
 800ac16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac18:	230b      	movs	r3, #11
 800ac1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac20:	4619      	mov	r1, r3
 800ac22:	481c      	ldr	r0, [pc, #112]	; (800ac94 <HAL_ETH_MspInit+0x178>)
 800ac24:	f7fb fa5e 	bl	80060e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800ac28:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac2e:	2302      	movs	r3, #2
 800ac30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac36:	2303      	movs	r3, #3
 800ac38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac3a:	230b      	movs	r3, #11
 800ac3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac42:	4619      	mov	r1, r3
 800ac44:	4814      	ldr	r0, [pc, #80]	; (800ac98 <HAL_ETH_MspInit+0x17c>)
 800ac46:	f7fb fa4d 	bl	80060e4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	2105      	movs	r1, #5
 800ac4e:	203d      	movs	r0, #61	; 0x3d
 800ac50:	f7f9 fc76 	bl	8004540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ac54:	203d      	movs	r0, #61	; 0x3d
 800ac56:	f7f9 fc8f 	bl	8004578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */
    HAL_GPIO_WritePin(ETH_RSTN_GPIO_Port, ETH_RSTN_Pin, GPIO_PIN_RESET);
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ac60:	480d      	ldr	r0, [pc, #52]	; (800ac98 <HAL_ETH_MspInit+0x17c>)
 800ac62:	f7fb fbf3 	bl	800644c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800ac66:	2032      	movs	r0, #50	; 0x32
 800ac68:	f7f8 ff7c 	bl	8003b64 <HAL_Delay>
    HAL_GPIO_WritePin(ETH_RSTN_GPIO_Port, ETH_RSTN_Pin, GPIO_PIN_SET);
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ac72:	4809      	ldr	r0, [pc, #36]	; (800ac98 <HAL_ETH_MspInit+0x17c>)
 800ac74:	f7fb fbea 	bl	800644c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800ac78:	2032      	movs	r0, #50	; 0x32
 800ac7a:	f7f8 ff73 	bl	8003b64 <HAL_Delay>
  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3738      	adds	r7, #56	; 0x38
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	40028000 	.word	0x40028000
 800ac8c:	40023800 	.word	0x40023800
 800ac90:	40020800 	.word	0x40020800
 800ac94:	40020000 	.word	0x40020000
 800ac98:	40020400 	.word	0x40020400

0800ac9c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800aca4:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <HAL_ETH_RxCpltCallback+0x1c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 ff4f 	bl	800bb4c <osSemaphoreRelease>
}
 800acae:	bf00      	nop
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20000180 	.word	0x20000180

0800acbc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b090      	sub	sp, #64	; 0x40
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800acc8:	4b5d      	ldr	r3, [pc, #372]	; (800ae40 <low_level_init+0x184>)
 800acca:	4a5e      	ldr	r2, [pc, #376]	; (800ae44 <low_level_init+0x188>)
 800accc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800acce:	4b5c      	ldr	r3, [pc, #368]	; (800ae40 <low_level_init+0x184>)
 800acd0:	2201      	movs	r2, #1
 800acd2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800acd4:	4b5a      	ldr	r3, [pc, #360]	; (800ae40 <low_level_init+0x184>)
 800acd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800acda:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800acdc:	4b58      	ldr	r3, [pc, #352]	; (800ae40 <low_level_init+0x184>)
 800acde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ace2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ace4:	4b56      	ldr	r3, [pc, #344]	; (800ae40 <low_level_init+0x184>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800acea:	2300      	movs	r3, #0
 800acec:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800acee:	2380      	movs	r3, #128	; 0x80
 800acf0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800acf2:	23e1      	movs	r3, #225	; 0xe1
 800acf4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800acfa:	2300      	movs	r3, #0
 800acfc:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800acfe:	2300      	movs	r3, #0
 800ad00:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800ad02:	4a4f      	ldr	r2, [pc, #316]	; (800ae40 <low_level_init+0x184>)
 800ad04:	f107 030c 	add.w	r3, r7, #12
 800ad08:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800ad0a:	4b4d      	ldr	r3, [pc, #308]	; (800ae40 <low_level_init+0x184>)
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ad10:	4b4b      	ldr	r3, [pc, #300]	; (800ae40 <low_level_init+0x184>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ad16:	4b4a      	ldr	r3, [pc, #296]	; (800ae40 <low_level_init+0x184>)
 800ad18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ad1c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ad1e:	4848      	ldr	r0, [pc, #288]	; (800ae40 <low_level_init+0x184>)
 800ad20:	f7fa f83a 	bl	8004d98 <HAL_ETH_Init>
 800ad24:	4603      	mov	r3, r0
 800ad26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800ad2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d108      	bne.n	800ad44 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad38:	f043 0304 	orr.w	r3, r3, #4
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ad44:	2304      	movs	r3, #4
 800ad46:	4a40      	ldr	r2, [pc, #256]	; (800ae48 <low_level_init+0x18c>)
 800ad48:	4940      	ldr	r1, [pc, #256]	; (800ae4c <low_level_init+0x190>)
 800ad4a:	483d      	ldr	r0, [pc, #244]	; (800ae40 <low_level_init+0x184>)
 800ad4c:	f7fa f9c0 	bl	80050d0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ad50:	2304      	movs	r3, #4
 800ad52:	4a3f      	ldr	r2, [pc, #252]	; (800ae50 <low_level_init+0x194>)
 800ad54:	493f      	ldr	r1, [pc, #252]	; (800ae54 <low_level_init+0x198>)
 800ad56:	483a      	ldr	r0, [pc, #232]	; (800ae40 <low_level_init+0x184>)
 800ad58:	f7fa fa23 	bl	80051a2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2206      	movs	r2, #6
 800ad60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ad64:	4b36      	ldr	r3, [pc, #216]	; (800ae40 <low_level_init+0x184>)
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	781a      	ldrb	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ad70:	4b33      	ldr	r3, [pc, #204]	; (800ae40 <low_level_init+0x184>)
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	785a      	ldrb	r2, [r3, #1]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ad7c:	4b30      	ldr	r3, [pc, #192]	; (800ae40 <low_level_init+0x184>)
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	789a      	ldrb	r2, [r3, #2]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ad88:	4b2d      	ldr	r3, [pc, #180]	; (800ae40 <low_level_init+0x184>)
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	78da      	ldrb	r2, [r3, #3]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ad94:	4b2a      	ldr	r3, [pc, #168]	; (800ae40 <low_level_init+0x184>)
 800ad96:	695b      	ldr	r3, [r3, #20]
 800ad98:	791a      	ldrb	r2, [r3, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ada0:	4b27      	ldr	r3, [pc, #156]	; (800ae40 <low_level_init+0x184>)
 800ada2:	695b      	ldr	r3, [r3, #20]
 800ada4:	795a      	ldrb	r2, [r3, #5]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800adb2:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800adba:	f043 030a 	orr.w	r3, r3, #10
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800adc6:	2200      	movs	r2, #0
 800adc8:	2101      	movs	r1, #1
 800adca:	2001      	movs	r0, #1
 800adcc:	f000 fde2 	bl	800b994 <osSemaphoreNew>
 800add0:	4603      	mov	r3, r0
 800add2:	4a21      	ldr	r2, [pc, #132]	; (800ae58 <low_level_init+0x19c>)
 800add4:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800add6:	f107 0314 	add.w	r3, r7, #20
 800adda:	2224      	movs	r2, #36	; 0x24
 800addc:	2100      	movs	r1, #0
 800adde:	4618      	mov	r0, r3
 800ade0:	f011 ff5b 	bl	801cc9a <memset>
  attributes.name = "EthIf";
 800ade4:	4b1d      	ldr	r3, [pc, #116]	; (800ae5c <low_level_init+0x1a0>)
 800ade6:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800ade8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800adec:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800adee:	2330      	movs	r3, #48	; 0x30
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800adf2:	f107 0314 	add.w	r3, r7, #20
 800adf6:	461a      	mov	r2, r3
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4819      	ldr	r0, [pc, #100]	; (800ae60 <low_level_init+0x1a4>)
 800adfc:	f000 fb4f 	bl	800b49e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800ae00:	480f      	ldr	r0, [pc, #60]	; (800ae40 <low_level_init+0x184>)
 800ae02:	f7fa fcf6 	bl	80057f2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800ae06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	211d      	movs	r1, #29
 800ae0e:	480c      	ldr	r0, [pc, #48]	; (800ae40 <low_level_init+0x184>)
 800ae10:	f7fa fc21 	bl	8005656 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	f043 030b 	orr.w	r3, r3, #11
 800ae1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	461a      	mov	r2, r3
 800ae20:	211d      	movs	r1, #29
 800ae22:	4807      	ldr	r0, [pc, #28]	; (800ae40 <low_level_init+0x184>)
 800ae24:	f7fa fc7f 	bl	8005726 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800ae28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	211d      	movs	r1, #29
 800ae30:	4803      	ldr	r0, [pc, #12]	; (800ae40 <low_level_init+0x184>)
 800ae32:	f7fa fc10 	bl	8005656 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ae36:	bf00      	nop
 800ae38:	3740      	adds	r7, #64	; 0x40
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	2000ea64 	.word	0x2000ea64
 800ae44:	40028000 	.word	0x40028000
 800ae48:	2000eaac 	.word	0x2000eaac
 800ae4c:	2000d194 	.word	0x2000d194
 800ae50:	2000d214 	.word	0x2000d214
 800ae54:	2000e9e4 	.word	0x2000e9e4
 800ae58:	20000180 	.word	0x20000180
 800ae5c:	0801e0c8 	.word	0x0801e0c8
 800ae60:	0800b109 	.word	0x0800b109

0800ae64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b08a      	sub	sp, #40	; 0x28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ae6e:	4b4b      	ldr	r3, [pc, #300]	; (800af9c <low_level_output+0x138>)
 800ae70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800ae86:	4b45      	ldr	r3, [pc, #276]	; (800af9c <low_level_output+0x138>)
 800ae88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	623b      	str	r3, [r7, #32]
 800ae94:	e05a      	b.n	800af4c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	da03      	bge.n	800aea6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800ae9e:	23f8      	movs	r3, #248	; 0xf8
 800aea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800aea4:	e05c      	b.n	800af60 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800aea6:	6a3b      	ldr	r3, [r7, #32]
 800aea8:	895b      	ldrh	r3, [r3, #10]
 800aeaa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800aeb0:	e02f      	b.n	800af12 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800aeb2:	69fa      	ldr	r2, [r7, #28]
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	18d0      	adds	r0, r2, r3
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	18d1      	adds	r1, r2, r3
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800aec6:	3304      	adds	r3, #4
 800aec8:	461a      	mov	r2, r3
 800aeca:	f011 fed8 	bl	801cc7e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	da03      	bge.n	800aee4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800aedc:	23f8      	movs	r3, #248	; 0xf8
 800aede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800aee2:	e03d      	b.n	800af60 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4413      	add	r3, r2
 800aef0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800aef4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800af00:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800af0c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	4413      	add	r3, r2
 800af18:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d8c8      	bhi.n	800aeb2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800af20:	69fa      	ldr	r2, [r7, #28]
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	18d0      	adds	r0, r2, r3
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	685a      	ldr	r2, [r3, #4]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	4413      	add	r3, r2
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	4619      	mov	r1, r3
 800af32:	f011 fea4 	bl	801cc7e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4413      	add	r3, r2
 800af3c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4413      	add	r3, r2
 800af44:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	623b      	str	r3, [r7, #32]
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1a1      	bne.n	800ae96 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800af52:	6979      	ldr	r1, [r7, #20]
 800af54:	4811      	ldr	r0, [pc, #68]	; (800af9c <low_level_output+0x138>)
 800af56:	f7fa f991 	bl	800527c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800af60:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <low_level_output+0x138>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af68:	3314      	adds	r3, #20
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0320 	and.w	r3, r3, #32
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00d      	beq.n	800af90 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800af74:	4b09      	ldr	r3, [pc, #36]	; (800af9c <low_level_output+0x138>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af7c:	3314      	adds	r3, #20
 800af7e:	2220      	movs	r2, #32
 800af80:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800af82:	4b06      	ldr	r3, [pc, #24]	; (800af9c <low_level_output+0x138>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af8a:	3304      	adds	r3, #4
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800af90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800af94:	4618      	mov	r0, r3
 800af96:	3728      	adds	r7, #40	; 0x28
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	2000ea64 	.word	0x2000ea64

0800afa0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08c      	sub	sp, #48	; 0x30
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800afa8:	2300      	movs	r3, #0
 800afaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800afac:	2300      	movs	r3, #0
 800afae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800afb8:	2300      	movs	r3, #0
 800afba:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800afc4:	484f      	ldr	r0, [pc, #316]	; (800b104 <low_level_input+0x164>)
 800afc6:	f7fa fa43 	bl	8005450 <HAL_ETH_GetReceivedFrame_IT>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <low_level_input+0x34>

    return NULL;
 800afd0:	2300      	movs	r3, #0
 800afd2:	e092      	b.n	800b0fa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800afd4:	4b4b      	ldr	r3, [pc, #300]	; (800b104 <low_level_input+0x164>)
 800afd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800afda:	4b4a      	ldr	r3, [pc, #296]	; (800b104 <low_level_input+0x164>)
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800afe0:	89fb      	ldrh	r3, [r7, #14]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d007      	beq.n	800aff6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800afe6:	89fb      	ldrh	r3, [r7, #14]
 800afe8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800afec:	4619      	mov	r1, r3
 800afee:	2000      	movs	r0, #0
 800aff0:	f005 fbca 	bl	8010788 <pbuf_alloc>
 800aff4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800aff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d04b      	beq.n	800b094 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800affc:	4b41      	ldr	r3, [pc, #260]	; (800b104 <low_level_input+0x164>)
 800affe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b000:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b008:	62bb      	str	r3, [r7, #40]	; 0x28
 800b00a:	e040      	b.n	800b08e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	895b      	ldrh	r3, [r3, #10]
 800b010:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800b012:	2300      	movs	r3, #0
 800b014:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b016:	e021      	b.n	800b05c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	18d0      	adds	r0, r2, r3
 800b020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	18d1      	adds	r1, r2, r3
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b02c:	3304      	adds	r3, #4
 800b02e:	461a      	mov	r2, r3
 800b030:	f011 fe25 	bl	801cc7e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b040:	69fa      	ldr	r2, [r7, #28]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	4413      	add	r3, r2
 800b046:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b04a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b056:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b058:	2300      	movs	r3, #0
 800b05a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	4413      	add	r3, r2
 800b062:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b066:	4293      	cmp	r3, r2
 800b068:	d8d6      	bhi.n	800b018 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	685a      	ldr	r2, [r3, #4]
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	18d0      	adds	r0, r2, r3
 800b072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	4413      	add	r3, r2
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	4619      	mov	r1, r3
 800b07c:	f011 fdff 	bl	801cc7e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b080:	69fa      	ldr	r2, [r7, #28]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	4413      	add	r3, r2
 800b086:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1bb      	bne.n	800b00c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b094:	4b1b      	ldr	r3, [pc, #108]	; (800b104 <low_level_input+0x164>)
 800b096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b098:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b09a:	2300      	movs	r3, #0
 800b09c:	613b      	str	r3, [r7, #16]
 800b09e:	e00b      	b.n	800b0b8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
 800b0aa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	613b      	str	r3, [r7, #16]
 800b0b8:	4b12      	ldr	r3, [pc, #72]	; (800b104 <low_level_input+0x164>)
 800b0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d3ee      	bcc.n	800b0a0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b0c2:	4b10      	ldr	r3, [pc, #64]	; (800b104 <low_level_input+0x164>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b0c8:	4b0e      	ldr	r3, [pc, #56]	; (800b104 <low_level_input+0x164>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d0:	3314      	adds	r3, #20
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00d      	beq.n	800b0f8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <low_level_input+0x164>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e4:	3314      	adds	r3, #20
 800b0e6:	2280      	movs	r2, #128	; 0x80
 800b0e8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b0ea:	4b06      	ldr	r3, [pc, #24]	; (800b104 <low_level_input+0x164>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
  }
  return p;
 800b0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3730      	adds	r7, #48	; 0x30
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	2000ea64 	.word	0x2000ea64

0800b108 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b114:	4b12      	ldr	r3, [pc, #72]	; (800b160 <ethernetif_input+0x58>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f04f 31ff 	mov.w	r1, #4294967295
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 fcc3 	bl	800baa8 <osSemaphoreAcquire>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1f5      	bne.n	800b114 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800b128:	480e      	ldr	r0, [pc, #56]	; (800b164 <ethernetif_input+0x5c>)
 800b12a:	f010 fa55 	bl	801b5d8 <sys_mutex_lock>
        p = low_level_input( netif );
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f7ff ff36 	bl	800afa0 <low_level_input>
 800b134:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00a      	beq.n	800b152 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	68f9      	ldr	r1, [r7, #12]
 800b142:	68b8      	ldr	r0, [r7, #8]
 800b144:	4798      	blx	r3
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800b14c:	68b8      	ldr	r0, [r7, #8]
 800b14e:	f005 fdff 	bl	8010d50 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800b152:	4804      	ldr	r0, [pc, #16]	; (800b164 <ethernetif_input+0x5c>)
 800b154:	f010 fa4f 	bl	801b5f6 <sys_mutex_unlock>
      } while(p!=NULL);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e4      	bne.n	800b128 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b15e:	e7d9      	b.n	800b114 <ethernetif_input+0xc>
 800b160:	20000180 	.word	0x20000180
 800b164:	200102bc 	.word	0x200102bc

0800b168 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <ethernetif_init+0x1c>
 800b176:	4b0e      	ldr	r3, [pc, #56]	; (800b1b0 <ethernetif_init+0x48>)
 800b178:	f240 2233 	movw	r2, #563	; 0x233
 800b17c:	490d      	ldr	r1, [pc, #52]	; (800b1b4 <ethernetif_init+0x4c>)
 800b17e:	480e      	ldr	r0, [pc, #56]	; (800b1b8 <ethernetif_init+0x50>)
 800b180:	f011 fdee 	bl	801cd60 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2273      	movs	r2, #115	; 0x73
 800b188:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2274      	movs	r2, #116	; 0x74
 800b190:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a09      	ldr	r2, [pc, #36]	; (800b1bc <ethernetif_init+0x54>)
 800b198:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a08      	ldr	r2, [pc, #32]	; (800b1c0 <ethernetif_init+0x58>)
 800b19e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f7ff fd8b 	bl	800acbc <low_level_init>

  return ERR_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	0801e0d0 	.word	0x0801e0d0
 800b1b4:	0801e0ec 	.word	0x0801e0ec
 800b1b8:	0801e0fc 	.word	0x0801e0fc
 800b1bc:	08019785 	.word	0x08019785
 800b1c0:	0800ae65 	.word	0x0800ae65

0800b1c4 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b1c8:	f7f8 fcc0 	bl	8003b4c <HAL_GetTick>
 800b1cc:	4603      	mov	r3, r0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b1e4:	f107 0308 	add.w	r3, r7, #8
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	4816      	ldr	r0, [pc, #88]	; (800b248 <ethernetif_set_link+0x74>)
 800b1ee:	f7fa fa32 	bl	8005656 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f003 0304 	and.w	r3, r3, #4
 800b1f8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b202:	f003 0304 	and.w	r3, r3, #4
 800b206:	2b00      	cmp	r3, #0
 800b208:	d108      	bne.n	800b21c <ethernetif_set_link+0x48>
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d005      	beq.n	800b21c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4618      	mov	r0, r3
 800b216:	f005 f985 	bl	8010524 <netif_set_link_up>
 800b21a:	e011      	b.n	800b240 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b224:	089b      	lsrs	r3, r3, #2
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d007      	beq.n	800b240 <ethernetif_set_link+0x6c>
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d104      	bne.n	800b240 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f005 f9aa 	bl	8010594 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800b240:	20c8      	movs	r0, #200	; 0xc8
 800b242:	f000 f9be 	bl	800b5c2 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b246:	e7cd      	b.n	800b1e4 <ethernetif_set_link+0x10>
 800b248:	2000ea64 	.word	0x2000ea64

0800b24c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b258:	2300      	movs	r3, #0
 800b25a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b262:	089b      	lsrs	r3, r3, #2
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d05d      	beq.n	800b32a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b26e:	4b34      	ldr	r3, [pc, #208]	; (800b340 <ethernetif_update_config+0xf4>)
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d03f      	beq.n	800b2f6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b276:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b27a:	2100      	movs	r1, #0
 800b27c:	4830      	ldr	r0, [pc, #192]	; (800b340 <ethernetif_update_config+0xf4>)
 800b27e:	f7fa fa52 	bl	8005726 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b282:	f7f8 fc63 	bl	8003b4c <HAL_GetTick>
 800b286:	4603      	mov	r3, r0
 800b288:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b28a:	f107 0308 	add.w	r3, r7, #8
 800b28e:	461a      	mov	r2, r3
 800b290:	2101      	movs	r1, #1
 800b292:	482b      	ldr	r0, [pc, #172]	; (800b340 <ethernetif_update_config+0xf4>)
 800b294:	f7fa f9df 	bl	8005656 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b298:	f7f8 fc58 	bl	8003b4c <HAL_GetTick>
 800b29c:	4602      	mov	r2, r0
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2a6:	d828      	bhi.n	800b2fa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f003 0320 	and.w	r3, r3, #32
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0eb      	beq.n	800b28a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b2b2:	f107 0308 	add.w	r3, r7, #8
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	2110      	movs	r1, #16
 800b2ba:	4821      	ldr	r0, [pc, #132]	; (800b340 <ethernetif_update_config+0xf4>)
 800b2bc:	f7fa f9cb 	bl	8005656 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f003 0304 	and.w	r3, r3, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b2ca:	4b1d      	ldr	r3, [pc, #116]	; (800b340 <ethernetif_update_config+0xf4>)
 800b2cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2d0:	60da      	str	r2, [r3, #12]
 800b2d2:	e002      	b.n	800b2da <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b2d4:	4b1a      	ldr	r3, [pc, #104]	; (800b340 <ethernetif_update_config+0xf4>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d003      	beq.n	800b2ec <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b2e4:	4b16      	ldr	r3, [pc, #88]	; (800b340 <ethernetif_update_config+0xf4>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	609a      	str	r2, [r3, #8]
 800b2ea:	e016      	b.n	800b31a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b2ec:	4b14      	ldr	r3, [pc, #80]	; (800b340 <ethernetif_update_config+0xf4>)
 800b2ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b2f2:	609a      	str	r2, [r3, #8]
 800b2f4:	e011      	b.n	800b31a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b2f6:	bf00      	nop
 800b2f8:	e000      	b.n	800b2fc <ethernetif_update_config+0xb0>
          goto error;
 800b2fa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b2fc:	4b10      	ldr	r3, [pc, #64]	; (800b340 <ethernetif_update_config+0xf4>)
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	08db      	lsrs	r3, r3, #3
 800b302:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b304:	4b0e      	ldr	r3, [pc, #56]	; (800b340 <ethernetif_update_config+0xf4>)
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	085b      	lsrs	r3, r3, #1
 800b30a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b30c:	4313      	orrs	r3, r2
 800b30e:	b29b      	uxth	r3, r3
 800b310:	461a      	mov	r2, r3
 800b312:	2100      	movs	r1, #0
 800b314:	480a      	ldr	r0, [pc, #40]	; (800b340 <ethernetif_update_config+0xf4>)
 800b316:	f7fa fa06 	bl	8005726 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b31a:	2100      	movs	r1, #0
 800b31c:	4808      	ldr	r0, [pc, #32]	; (800b340 <ethernetif_update_config+0xf4>)
 800b31e:	f7fa fac7 	bl	80058b0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b322:	4807      	ldr	r0, [pc, #28]	; (800b340 <ethernetif_update_config+0xf4>)
 800b324:	f7fa fa65 	bl	80057f2 <HAL_ETH_Start>
 800b328:	e002      	b.n	800b330 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b32a:	4805      	ldr	r0, [pc, #20]	; (800b340 <ethernetif_update_config+0xf4>)
 800b32c:	f7fa fa90 	bl	8005850 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f807 	bl	800b344 <ethernetif_notify_conn_changed>
}
 800b336:	bf00      	nop
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	2000ea64 	.word	0x2000ea64

0800b344 <ethernetif_notify_conn_changed>:
 * @brief  This function notify user about link status changement.
 * @param  netif: the network interface
 * @retval None
 */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <__NVIC_SetPriority>:
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	6039      	str	r1, [r7, #0]
 800b362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	db0a      	blt.n	800b382 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	490c      	ldr	r1, [pc, #48]	; (800b3a4 <__NVIC_SetPriority+0x4c>)
 800b372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b376:	0112      	lsls	r2, r2, #4
 800b378:	b2d2      	uxtb	r2, r2
 800b37a:	440b      	add	r3, r1
 800b37c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b380:	e00a      	b.n	800b398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	b2da      	uxtb	r2, r3
 800b386:	4908      	ldr	r1, [pc, #32]	; (800b3a8 <__NVIC_SetPriority+0x50>)
 800b388:	79fb      	ldrb	r3, [r7, #7]
 800b38a:	f003 030f 	and.w	r3, r3, #15
 800b38e:	3b04      	subs	r3, #4
 800b390:	0112      	lsls	r2, r2, #4
 800b392:	b2d2      	uxtb	r2, r2
 800b394:	440b      	add	r3, r1
 800b396:	761a      	strb	r2, [r3, #24]
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr
 800b3a4:	e000e100 	.word	0xe000e100
 800b3a8:	e000ed00 	.word	0xe000ed00

0800b3ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b3b0:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <SysTick_Handler+0x1c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b3b4:	f002 fd56 	bl	800de64 <xTaskGetSchedulerState>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d001      	beq.n	800b3c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b3be:	f003 fcf3 	bl	800eda8 <xPortSysTickHandler>
  }
}
 800b3c2:	bf00      	nop
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	e000e010 	.word	0xe000e010

0800b3cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	f06f 0004 	mvn.w	r0, #4
 800b3d6:	f7ff ffbf 	bl	800b358 <__NVIC_SetPriority>
#endif
}
 800b3da:	bf00      	nop
 800b3dc:	bd80      	pop	{r7, pc}
	...

0800b3e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e6:	f3ef 8305 	mrs	r3, IPSR
 800b3ea:	603b      	str	r3, [r7, #0]
  return(result);
 800b3ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b3f2:	f06f 0305 	mvn.w	r3, #5
 800b3f6:	607b      	str	r3, [r7, #4]
 800b3f8:	e00c      	b.n	800b414 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3fa:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <osKernelInitialize+0x44>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d105      	bne.n	800b40e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b402:	4b08      	ldr	r3, [pc, #32]	; (800b424 <osKernelInitialize+0x44>)
 800b404:	2201      	movs	r2, #1
 800b406:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b408:	2300      	movs	r3, #0
 800b40a:	607b      	str	r3, [r7, #4]
 800b40c:	e002      	b.n	800b414 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b40e:	f04f 33ff 	mov.w	r3, #4294967295
 800b412:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b414:	687b      	ldr	r3, [r7, #4]
}
 800b416:	4618      	mov	r0, r3
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	20000184 	.word	0x20000184

0800b428 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b42e:	f3ef 8305 	mrs	r3, IPSR
 800b432:	603b      	str	r3, [r7, #0]
  return(result);
 800b434:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b43a:	f06f 0305 	mvn.w	r3, #5
 800b43e:	607b      	str	r3, [r7, #4]
 800b440:	e010      	b.n	800b464 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b442:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <osKernelStart+0x48>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d109      	bne.n	800b45e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b44a:	f7ff ffbf 	bl	800b3cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b44e:	4b08      	ldr	r3, [pc, #32]	; (800b470 <osKernelStart+0x48>)
 800b450:	2202      	movs	r2, #2
 800b452:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b454:	f002 f888 	bl	800d568 <vTaskStartScheduler>
      stat = osOK;
 800b458:	2300      	movs	r3, #0
 800b45a:	607b      	str	r3, [r7, #4]
 800b45c:	e002      	b.n	800b464 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b45e:	f04f 33ff 	mov.w	r3, #4294967295
 800b462:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b464:	687b      	ldr	r3, [r7, #4]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000184 	.word	0x20000184

0800b474 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b47a:	f3ef 8305 	mrs	r3, IPSR
 800b47e:	603b      	str	r3, [r7, #0]
  return(result);
 800b480:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b486:	f002 f99b 	bl	800d7c0 <xTaskGetTickCountFromISR>
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	e002      	b.n	800b494 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b48e:	f002 f987 	bl	800d7a0 <xTaskGetTickCount>
 800b492:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b494:	687b      	ldr	r3, [r7, #4]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b08e      	sub	sp, #56	; 0x38
 800b4a2:	af04      	add	r7, sp, #16
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4ae:	f3ef 8305 	mrs	r3, IPSR
 800b4b2:	617b      	str	r3, [r7, #20]
  return(result);
 800b4b4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d17e      	bne.n	800b5b8 <osThreadNew+0x11a>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d07b      	beq.n	800b5b8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b4c0:	2380      	movs	r3, #128	; 0x80
 800b4c2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b4c4:	2318      	movs	r3, #24
 800b4c6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d045      	beq.n	800b564 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <osThreadNew+0x48>
        name = attr->name;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d002      	beq.n	800b4f4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d008      	beq.n	800b50c <osThreadNew+0x6e>
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	2b38      	cmp	r3, #56	; 0x38
 800b4fe:	d805      	bhi.n	800b50c <osThreadNew+0x6e>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <osThreadNew+0x72>
        return (NULL);
 800b50c:	2300      	movs	r3, #0
 800b50e:	e054      	b.n	800b5ba <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d003      	beq.n	800b520 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	089b      	lsrs	r3, r3, #2
 800b51e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00e      	beq.n	800b546 <osThreadNew+0xa8>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	2bbb      	cmp	r3, #187	; 0xbb
 800b52e:	d90a      	bls.n	800b546 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b534:	2b00      	cmp	r3, #0
 800b536:	d006      	beq.n	800b546 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	695b      	ldr	r3, [r3, #20]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <osThreadNew+0xa8>
        mem = 1;
 800b540:	2301      	movs	r3, #1
 800b542:	61bb      	str	r3, [r7, #24]
 800b544:	e010      	b.n	800b568 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10c      	bne.n	800b568 <osThreadNew+0xca>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d108      	bne.n	800b568 <osThreadNew+0xca>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d104      	bne.n	800b568 <osThreadNew+0xca>
          mem = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	61bb      	str	r3, [r7, #24]
 800b562:	e001      	b.n	800b568 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d110      	bne.n	800b590 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b576:	9202      	str	r2, [sp, #8]
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	6a3a      	ldr	r2, [r7, #32]
 800b582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f001 fe03 	bl	800d190 <xTaskCreateStatic>
 800b58a:	4603      	mov	r3, r0
 800b58c:	613b      	str	r3, [r7, #16]
 800b58e:	e013      	b.n	800b5b8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d110      	bne.n	800b5b8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	b29a      	uxth	r2, r3
 800b59a:	f107 0310 	add.w	r3, r7, #16
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f001 fe4e 	bl	800d24a <xTaskCreate>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d001      	beq.n	800b5b8 <osThreadNew+0x11a>
            hTask = NULL;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b5b8:	693b      	ldr	r3, [r7, #16]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3728      	adds	r7, #40	; 0x28
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b084      	sub	sp, #16
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ca:	f3ef 8305 	mrs	r3, IPSR
 800b5ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <osDelay+0x1c>
    stat = osErrorISR;
 800b5d6:	f06f 0305 	mvn.w	r3, #5
 800b5da:	60fb      	str	r3, [r7, #12]
 800b5dc:	e007      	b.n	800b5ee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <osDelay+0x2c>
      vTaskDelay(ticks);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 ff89 	bl	800d500 <vTaskDelay>
    }
  }

  return (stat);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f003 f9f5 	bl	800e9f0 <pvTimerGetTimerID>
 800b606:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d005      	beq.n	800b61a <TimerCallback+0x22>
    callb->func (callb->arg);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	6852      	ldr	r2, [r2, #4]
 800b616:	4610      	mov	r0, r2
 800b618:	4798      	blx	r3
  }
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
	...

0800b624 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b624:	b580      	push	{r7, lr}
 800b626:	b08c      	sub	sp, #48	; 0x30
 800b628:	af02      	add	r7, sp, #8
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	607a      	str	r2, [r7, #4]
 800b62e:	603b      	str	r3, [r7, #0]
 800b630:	460b      	mov	r3, r1
 800b632:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b634:	2300      	movs	r3, #0
 800b636:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b638:	f3ef 8305 	mrs	r3, IPSR
 800b63c:	613b      	str	r3, [r7, #16]
  return(result);
 800b63e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b640:	2b00      	cmp	r3, #0
 800b642:	d163      	bne.n	800b70c <osTimerNew+0xe8>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d060      	beq.n	800b70c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b64a:	2008      	movs	r0, #8
 800b64c:	f003 fc3c 	bl	800eec8 <pvPortMalloc>
 800b650:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d059      	beq.n	800b70c <osTimerNew+0xe8>
      callb->func = func;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b664:	7afb      	ldrb	r3, [r7, #11]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d102      	bne.n	800b670 <osTimerNew+0x4c>
        reload = pdFALSE;
 800b66a:	2300      	movs	r3, #0
 800b66c:	61fb      	str	r3, [r7, #28]
 800b66e:	e001      	b.n	800b674 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b670:	2301      	movs	r3, #1
 800b672:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b674:	f04f 33ff 	mov.w	r3, #4294967295
 800b678:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d01c      	beq.n	800b6be <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <osTimerNew+0x6e>
          name = attr->name;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d006      	beq.n	800b6a8 <osTimerNew+0x84>
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	2b2b      	cmp	r3, #43	; 0x2b
 800b6a0:	d902      	bls.n	800b6a8 <osTimerNew+0x84>
          mem = 1;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	61bb      	str	r3, [r7, #24]
 800b6a6:	e00c      	b.n	800b6c2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d108      	bne.n	800b6c2 <osTimerNew+0x9e>
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d104      	bne.n	800b6c2 <osTimerNew+0x9e>
            mem = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	61bb      	str	r3, [r7, #24]
 800b6bc:	e001      	b.n	800b6c2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d10c      	bne.n	800b6e2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	9301      	str	r3, [sp, #4]
 800b6ce:	4b12      	ldr	r3, [pc, #72]	; (800b718 <osTimerNew+0xf4>)
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	69fa      	ldr	r2, [r7, #28]
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6da:	f002 fe0a 	bl	800e2f2 <xTimerCreateStatic>
 800b6de:	6238      	str	r0, [r7, #32]
 800b6e0:	e00b      	b.n	800b6fa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d108      	bne.n	800b6fa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b6e8:	4b0b      	ldr	r3, [pc, #44]	; (800b718 <osTimerNew+0xf4>)
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	69fa      	ldr	r2, [r7, #28]
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6f4:	f002 fddc 	bl	800e2b0 <xTimerCreate>
 800b6f8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d105      	bne.n	800b70c <osTimerNew+0xe8>
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <osTimerNew+0xe8>
        vPortFree (callb);
 800b706:	6978      	ldr	r0, [r7, #20]
 800b708:	f003 fcaa 	bl	800f060 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b70c:	6a3b      	ldr	r3, [r7, #32]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3728      	adds	r7, #40	; 0x28
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	0800b5f9 	.word	0x0800b5f9

0800b71c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af02      	add	r7, sp, #8
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b72a:	f3ef 8305 	mrs	r3, IPSR
 800b72e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b730:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b732:	2b00      	cmp	r3, #0
 800b734:	d003      	beq.n	800b73e <osTimerStart+0x22>
    stat = osErrorISR;
 800b736:	f06f 0305 	mvn.w	r3, #5
 800b73a:	617b      	str	r3, [r7, #20]
 800b73c:	e017      	b.n	800b76e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <osTimerStart+0x30>
    stat = osErrorParameter;
 800b744:	f06f 0303 	mvn.w	r3, #3
 800b748:	617b      	str	r3, [r7, #20]
 800b74a:	e010      	b.n	800b76e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b74c:	2300      	movs	r3, #0
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	2300      	movs	r3, #0
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	2104      	movs	r1, #4
 800b756:	6938      	ldr	r0, [r7, #16]
 800b758:	f002 fe44 	bl	800e3e4 <xTimerGenericCommand>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d102      	bne.n	800b768 <osTimerStart+0x4c>
      stat = osOK;
 800b762:	2300      	movs	r3, #0
 800b764:	617b      	str	r3, [r7, #20]
 800b766:	e002      	b.n	800b76e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b768:	f06f 0302 	mvn.w	r3, #2
 800b76c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b76e:	697b      	ldr	r3, [r7, #20]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3718      	adds	r7, #24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b780:	2300      	movs	r3, #0
 800b782:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b784:	f3ef 8305 	mrs	r3, IPSR
 800b788:	60bb      	str	r3, [r7, #8]
  return(result);
 800b78a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d174      	bne.n	800b87a <osMutexNew+0x102>
    if (attr != NULL) {
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d003      	beq.n	800b79e <osMutexNew+0x26>
      type = attr->attr_bits;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	61bb      	str	r3, [r7, #24]
 800b79c:	e001      	b.n	800b7a2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <osMutexNew+0x3a>
      rmtx = 1U;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	617b      	str	r3, [r7, #20]
 800b7b0:	e001      	b.n	800b7b6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	f003 0308 	and.w	r3, r3, #8
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d15c      	bne.n	800b87a <osMutexNew+0x102>
      mem = -1;
 800b7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d015      	beq.n	800b7f8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d006      	beq.n	800b7e2 <osMutexNew+0x6a>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	2b4f      	cmp	r3, #79	; 0x4f
 800b7da:	d902      	bls.n	800b7e2 <osMutexNew+0x6a>
          mem = 1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	613b      	str	r3, [r7, #16]
 800b7e0:	e00c      	b.n	800b7fc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d108      	bne.n	800b7fc <osMutexNew+0x84>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d104      	bne.n	800b7fc <osMutexNew+0x84>
            mem = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	613b      	str	r3, [r7, #16]
 800b7f6:	e001      	b.n	800b7fc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d112      	bne.n	800b828 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d007      	beq.n	800b818 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	4619      	mov	r1, r3
 800b80e:	2004      	movs	r0, #4
 800b810:	f000 fd69 	bl	800c2e6 <xQueueCreateMutexStatic>
 800b814:	61f8      	str	r0, [r7, #28]
 800b816:	e016      	b.n	800b846 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	4619      	mov	r1, r3
 800b81e:	2001      	movs	r0, #1
 800b820:	f000 fd61 	bl	800c2e6 <xQueueCreateMutexStatic>
 800b824:	61f8      	str	r0, [r7, #28]
 800b826:	e00e      	b.n	800b846 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10b      	bne.n	800b846 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d004      	beq.n	800b83e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b834:	2004      	movs	r0, #4
 800b836:	f000 fd3e 	bl	800c2b6 <xQueueCreateMutex>
 800b83a:	61f8      	str	r0, [r7, #28]
 800b83c:	e003      	b.n	800b846 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b83e:	2001      	movs	r0, #1
 800b840:	f000 fd39 	bl	800c2b6 <xQueueCreateMutex>
 800b844:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00c      	beq.n	800b866 <osMutexNew+0xee>
        if (attr != NULL) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <osMutexNew+0xe2>
          name = attr->name;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	e001      	b.n	800b85e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b85e:	68f9      	ldr	r1, [r7, #12]
 800b860:	69f8      	ldr	r0, [r7, #28]
 800b862:	f001 fc0d 	bl	800d080 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d006      	beq.n	800b87a <osMutexNew+0x102>
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	f043 0301 	orr.w	r3, r3, #1
 800b878:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b87a:	69fb      	ldr	r3, [r7, #28]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3720      	adds	r7, #32
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f023 0301 	bic.w	r3, r3, #1
 800b894:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a2:	f3ef 8305 	mrs	r3, IPSR
 800b8a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8a8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b8ae:	f06f 0305 	mvn.w	r3, #5
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	e02c      	b.n	800b910 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d103      	bne.n	800b8c4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b8bc:	f06f 0303 	mvn.w	r3, #3
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	e025      	b.n	800b910 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d011      	beq.n	800b8ee <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6938      	ldr	r0, [r7, #16]
 800b8ce:	f000 fd59 	bl	800c384 <xQueueTakeMutexRecursive>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d01b      	beq.n	800b910 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b8de:	f06f 0301 	mvn.w	r3, #1
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	e014      	b.n	800b910 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b8e6:	f06f 0302 	mvn.w	r3, #2
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	e010      	b.n	800b910 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6938      	ldr	r0, [r7, #16]
 800b8f2:	f001 f8ed 	bl	800cad0 <xQueueSemaphoreTake>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d009      	beq.n	800b910 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b902:	f06f 0301 	mvn.w	r3, #1
 800b906:	617b      	str	r3, [r7, #20]
 800b908:	e002      	b.n	800b910 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b90a:	f06f 0302 	mvn.w	r3, #2
 800b90e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b910:	697b      	ldr	r3, [r7, #20]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3718      	adds	r7, #24
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b086      	sub	sp, #24
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f023 0301 	bic.w	r3, r3, #1
 800b928:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b932:	2300      	movs	r3, #0
 800b934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b936:	f3ef 8305 	mrs	r3, IPSR
 800b93a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b93c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d003      	beq.n	800b94a <osMutexRelease+0x30>
    stat = osErrorISR;
 800b942:	f06f 0305 	mvn.w	r3, #5
 800b946:	617b      	str	r3, [r7, #20]
 800b948:	e01f      	b.n	800b98a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d103      	bne.n	800b958 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b950:	f06f 0303 	mvn.w	r3, #3
 800b954:	617b      	str	r3, [r7, #20]
 800b956:	e018      	b.n	800b98a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d009      	beq.n	800b972 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b95e:	6938      	ldr	r0, [r7, #16]
 800b960:	f000 fcdc 	bl	800c31c <xQueueGiveMutexRecursive>
 800b964:	4603      	mov	r3, r0
 800b966:	2b01      	cmp	r3, #1
 800b968:	d00f      	beq.n	800b98a <osMutexRelease+0x70>
        stat = osErrorResource;
 800b96a:	f06f 0302 	mvn.w	r3, #2
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	e00b      	b.n	800b98a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b972:	2300      	movs	r3, #0
 800b974:	2200      	movs	r2, #0
 800b976:	2100      	movs	r1, #0
 800b978:	6938      	ldr	r0, [r7, #16]
 800b97a:	f000 fda3 	bl	800c4c4 <xQueueGenericSend>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b01      	cmp	r3, #1
 800b982:	d002      	beq.n	800b98a <osMutexRelease+0x70>
        stat = osErrorResource;
 800b984:	f06f 0302 	mvn.w	r3, #2
 800b988:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b98a:	697b      	ldr	r3, [r7, #20]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b994:	b580      	push	{r7, lr}
 800b996:	b08a      	sub	sp, #40	; 0x28
 800b998:	af02      	add	r7, sp, #8
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9a4:	f3ef 8305 	mrs	r3, IPSR
 800b9a8:	613b      	str	r3, [r7, #16]
  return(result);
 800b9aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d175      	bne.n	800ba9c <osSemaphoreNew+0x108>
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d072      	beq.n	800ba9c <osSemaphoreNew+0x108>
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d86e      	bhi.n	800ba9c <osSemaphoreNew+0x108>
    mem = -1;
 800b9be:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d015      	beq.n	800b9f6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d006      	beq.n	800b9e0 <osSemaphoreNew+0x4c>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	2b4f      	cmp	r3, #79	; 0x4f
 800b9d8:	d902      	bls.n	800b9e0 <osSemaphoreNew+0x4c>
        mem = 1;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	61bb      	str	r3, [r7, #24]
 800b9de:	e00c      	b.n	800b9fa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d108      	bne.n	800b9fa <osSemaphoreNew+0x66>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d104      	bne.n	800b9fa <osSemaphoreNew+0x66>
          mem = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	61bb      	str	r3, [r7, #24]
 800b9f4:	e001      	b.n	800b9fa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba00:	d04c      	beq.n	800ba9c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d128      	bne.n	800ba5a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d10a      	bne.n	800ba24 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	2203      	movs	r2, #3
 800ba14:	9200      	str	r2, [sp, #0]
 800ba16:	2200      	movs	r2, #0
 800ba18:	2100      	movs	r1, #0
 800ba1a:	2001      	movs	r0, #1
 800ba1c:	f000 fb5c 	bl	800c0d8 <xQueueGenericCreateStatic>
 800ba20:	61f8      	str	r0, [r7, #28]
 800ba22:	e005      	b.n	800ba30 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ba24:	2203      	movs	r2, #3
 800ba26:	2100      	movs	r1, #0
 800ba28:	2001      	movs	r0, #1
 800ba2a:	f000 fbcd 	bl	800c1c8 <xQueueGenericCreate>
 800ba2e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d022      	beq.n	800ba7c <osSemaphoreNew+0xe8>
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d01f      	beq.n	800ba7c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2100      	movs	r1, #0
 800ba42:	69f8      	ldr	r0, [r7, #28]
 800ba44:	f000 fd3e 	bl	800c4c4 <xQueueGenericSend>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d016      	beq.n	800ba7c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ba4e:	69f8      	ldr	r0, [r7, #28]
 800ba50:	f001 f9ca 	bl	800cde8 <vQueueDelete>
            hSemaphore = NULL;
 800ba54:	2300      	movs	r3, #0
 800ba56:	61fb      	str	r3, [r7, #28]
 800ba58:	e010      	b.n	800ba7c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d108      	bne.n	800ba72 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	461a      	mov	r2, r3
 800ba66:	68b9      	ldr	r1, [r7, #8]
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f000 fcc1 	bl	800c3f0 <xQueueCreateCountingSemaphoreStatic>
 800ba6e:	61f8      	str	r0, [r7, #28]
 800ba70:	e004      	b.n	800ba7c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ba72:	68b9      	ldr	r1, [r7, #8]
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f000 fcf2 	bl	800c45e <xQueueCreateCountingSemaphore>
 800ba7a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00c      	beq.n	800ba9c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d003      	beq.n	800ba90 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	e001      	b.n	800ba94 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ba90:	2300      	movs	r3, #0
 800ba92:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ba94:	6979      	ldr	r1, [r7, #20]
 800ba96:	69f8      	ldr	r0, [r7, #28]
 800ba98:	f001 faf2 	bl	800d080 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ba9c:	69fb      	ldr	r3, [r7, #28]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3720      	adds	r7, #32
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d103      	bne.n	800bac8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bac0:	f06f 0303 	mvn.w	r3, #3
 800bac4:	617b      	str	r3, [r7, #20]
 800bac6:	e039      	b.n	800bb3c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bac8:	f3ef 8305 	mrs	r3, IPSR
 800bacc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bace:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d022      	beq.n	800bb1a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800bada:	f06f 0303 	mvn.w	r3, #3
 800bade:	617b      	str	r3, [r7, #20]
 800bae0:	e02c      	b.n	800bb3c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bae6:	f107 0308 	add.w	r3, r7, #8
 800baea:	461a      	mov	r2, r3
 800baec:	2100      	movs	r1, #0
 800baee:	6938      	ldr	r0, [r7, #16]
 800baf0:	f001 f8fa 	bl	800cce8 <xQueueReceiveFromISR>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d003      	beq.n	800bb02 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800bafa:	f06f 0302 	mvn.w	r3, #2
 800bafe:	617b      	str	r3, [r7, #20]
 800bb00:	e01c      	b.n	800bb3c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d019      	beq.n	800bb3c <osSemaphoreAcquire+0x94>
 800bb08:	4b0f      	ldr	r3, [pc, #60]	; (800bb48 <osSemaphoreAcquire+0xa0>)
 800bb0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	e010      	b.n	800bb3c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bb1a:	6839      	ldr	r1, [r7, #0]
 800bb1c:	6938      	ldr	r0, [r7, #16]
 800bb1e:	f000 ffd7 	bl	800cad0 <xQueueSemaphoreTake>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d009      	beq.n	800bb3c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800bb2e:	f06f 0301 	mvn.w	r3, #1
 800bb32:	617b      	str	r3, [r7, #20]
 800bb34:	e002      	b.n	800bb3c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800bb36:	f06f 0302 	mvn.w	r3, #2
 800bb3a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bb3c:	697b      	ldr	r3, [r7, #20]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3718      	adds	r7, #24
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	e000ed04 	.word	0xe000ed04

0800bb4c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d103      	bne.n	800bb6a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bb62:	f06f 0303 	mvn.w	r3, #3
 800bb66:	617b      	str	r3, [r7, #20]
 800bb68:	e02c      	b.n	800bbc4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb6a:	f3ef 8305 	mrs	r3, IPSR
 800bb6e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb70:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d01a      	beq.n	800bbac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bb7a:	f107 0308 	add.w	r3, r7, #8
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6938      	ldr	r0, [r7, #16]
 800bb82:	f000 fe38 	bl	800c7f6 <xQueueGiveFromISR>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d003      	beq.n	800bb94 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800bb8c:	f06f 0302 	mvn.w	r3, #2
 800bb90:	617b      	str	r3, [r7, #20]
 800bb92:	e017      	b.n	800bbc4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d014      	beq.n	800bbc4 <osSemaphoreRelease+0x78>
 800bb9a:	4b0d      	ldr	r3, [pc, #52]	; (800bbd0 <osSemaphoreRelease+0x84>)
 800bb9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	e00b      	b.n	800bbc4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bbac:	2300      	movs	r3, #0
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	6938      	ldr	r0, [r7, #16]
 800bbb4:	f000 fc86 	bl	800c4c4 <xQueueGenericSend>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d002      	beq.n	800bbc4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800bbbe:	f06f 0302 	mvn.w	r3, #2
 800bbc2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bbc4:	697b      	ldr	r3, [r7, #20]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	e000ed04 	.word	0xe000ed04

0800bbd4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08a      	sub	sp, #40	; 0x28
 800bbd8:	af02      	add	r7, sp, #8
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbe4:	f3ef 8305 	mrs	r3, IPSR
 800bbe8:	613b      	str	r3, [r7, #16]
  return(result);
 800bbea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d15f      	bne.n	800bcb0 <osMessageQueueNew+0xdc>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d05c      	beq.n	800bcb0 <osMessageQueueNew+0xdc>
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d059      	beq.n	800bcb0 <osMessageQueueNew+0xdc>
    mem = -1;
 800bbfc:	f04f 33ff 	mov.w	r3, #4294967295
 800bc00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d029      	beq.n	800bc5c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d012      	beq.n	800bc36 <osMessageQueueNew+0x62>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	2b4f      	cmp	r3, #79	; 0x4f
 800bc16:	d90e      	bls.n	800bc36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00a      	beq.n	800bc36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	695a      	ldr	r2, [r3, #20]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	68b9      	ldr	r1, [r7, #8]
 800bc28:	fb01 f303 	mul.w	r3, r1, r3
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d302      	bcc.n	800bc36 <osMessageQueueNew+0x62>
        mem = 1;
 800bc30:	2301      	movs	r3, #1
 800bc32:	61bb      	str	r3, [r7, #24]
 800bc34:	e014      	b.n	800bc60 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d110      	bne.n	800bc60 <osMessageQueueNew+0x8c>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10c      	bne.n	800bc60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d108      	bne.n	800bc60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d104      	bne.n	800bc60 <osMessageQueueNew+0x8c>
          mem = 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	61bb      	str	r3, [r7, #24]
 800bc5a:	e001      	b.n	800bc60 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d10b      	bne.n	800bc7e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	691a      	ldr	r2, [r3, #16]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	2100      	movs	r1, #0
 800bc70:	9100      	str	r1, [sp, #0]
 800bc72:	68b9      	ldr	r1, [r7, #8]
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f000 fa2f 	bl	800c0d8 <xQueueGenericCreateStatic>
 800bc7a:	61f8      	str	r0, [r7, #28]
 800bc7c:	e008      	b.n	800bc90 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d105      	bne.n	800bc90 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bc84:	2200      	movs	r2, #0
 800bc86:	68b9      	ldr	r1, [r7, #8]
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 fa9d 	bl	800c1c8 <xQueueGenericCreate>
 800bc8e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00c      	beq.n	800bcb0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	617b      	str	r3, [r7, #20]
 800bca2:	e001      	b.n	800bca8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bca8:	6979      	ldr	r1, [r7, #20]
 800bcaa:	69f8      	ldr	r0, [r7, #28]
 800bcac:	f001 f9e8 	bl	800d080 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bcb0:	69fb      	ldr	r3, [r7, #28]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3720      	adds	r7, #32
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
	...

0800bcbc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	603b      	str	r3, [r7, #0]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcd4:	f3ef 8305 	mrs	r3, IPSR
 800bcd8:	617b      	str	r3, [r7, #20]
  return(result);
 800bcda:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d028      	beq.n	800bd32 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d005      	beq.n	800bcf2 <osMessageQueuePut+0x36>
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <osMessageQueuePut+0x36>
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bcf2:	f06f 0303 	mvn.w	r3, #3
 800bcf6:	61fb      	str	r3, [r7, #28]
 800bcf8:	e038      	b.n	800bd6c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bcfe:	f107 0210 	add.w	r2, r7, #16
 800bd02:	2300      	movs	r3, #0
 800bd04:	68b9      	ldr	r1, [r7, #8]
 800bd06:	69b8      	ldr	r0, [r7, #24]
 800bd08:	f000 fcda 	bl	800c6c0 <xQueueGenericSendFromISR>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d003      	beq.n	800bd1a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bd12:	f06f 0302 	mvn.w	r3, #2
 800bd16:	61fb      	str	r3, [r7, #28]
 800bd18:	e028      	b.n	800bd6c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d025      	beq.n	800bd6c <osMessageQueuePut+0xb0>
 800bd20:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <osMessageQueuePut+0xbc>)
 800bd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	e01c      	b.n	800bd6c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <osMessageQueuePut+0x82>
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d103      	bne.n	800bd46 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bd3e:	f06f 0303 	mvn.w	r3, #3
 800bd42:	61fb      	str	r3, [r7, #28]
 800bd44:	e012      	b.n	800bd6c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bd46:	2300      	movs	r3, #0
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	69b8      	ldr	r0, [r7, #24]
 800bd4e:	f000 fbb9 	bl	800c4c4 <xQueueGenericSend>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d009      	beq.n	800bd6c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d003      	beq.n	800bd66 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bd5e:	f06f 0301 	mvn.w	r3, #1
 800bd62:	61fb      	str	r3, [r7, #28]
 800bd64:	e002      	b.n	800bd6c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bd66:	f06f 0302 	mvn.w	r3, #2
 800bd6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bd6c:	69fb      	ldr	r3, [r7, #28]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3720      	adds	r7, #32
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	e000ed04 	.word	0xe000ed04

0800bd7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b088      	sub	sp, #32
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd92:	f3ef 8305 	mrs	r3, IPSR
 800bd96:	617b      	str	r3, [r7, #20]
  return(result);
 800bd98:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d028      	beq.n	800bdf0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <osMessageQueueGet+0x34>
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <osMessageQueueGet+0x34>
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d003      	beq.n	800bdb8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bdb0:	f06f 0303 	mvn.w	r3, #3
 800bdb4:	61fb      	str	r3, [r7, #28]
 800bdb6:	e037      	b.n	800be28 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bdbc:	f107 0310 	add.w	r3, r7, #16
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	69b8      	ldr	r0, [r7, #24]
 800bdc6:	f000 ff8f 	bl	800cce8 <xQueueReceiveFromISR>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d003      	beq.n	800bdd8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bdd0:	f06f 0302 	mvn.w	r3, #2
 800bdd4:	61fb      	str	r3, [r7, #28]
 800bdd6:	e027      	b.n	800be28 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d024      	beq.n	800be28 <osMessageQueueGet+0xac>
 800bdde:	4b15      	ldr	r3, [pc, #84]	; (800be34 <osMessageQueueGet+0xb8>)
 800bde0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	e01b      	b.n	800be28 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d002      	beq.n	800bdfc <osMessageQueueGet+0x80>
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d103      	bne.n	800be04 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bdfc:	f06f 0303 	mvn.w	r3, #3
 800be00:	61fb      	str	r3, [r7, #28]
 800be02:	e011      	b.n	800be28 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	69b8      	ldr	r0, [r7, #24]
 800be0a:	f000 fd81 	bl	800c910 <xQueueReceive>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b01      	cmp	r3, #1
 800be12:	d009      	beq.n	800be28 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d003      	beq.n	800be22 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800be1a:	f06f 0301 	mvn.w	r3, #1
 800be1e:	61fb      	str	r3, [r7, #28]
 800be20:	e002      	b.n	800be28 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800be22:	f06f 0302 	mvn.w	r3, #2
 800be26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800be28:	69fb      	ldr	r3, [r7, #28]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3720      	adds	r7, #32
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	e000ed04 	.word	0xe000ed04

0800be38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	4a07      	ldr	r2, [pc, #28]	; (800be64 <vApplicationGetIdleTaskMemory+0x2c>)
 800be48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	4a06      	ldr	r2, [pc, #24]	; (800be68 <vApplicationGetIdleTaskMemory+0x30>)
 800be4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2280      	movs	r2, #128	; 0x80
 800be54:	601a      	str	r2, [r3, #0]
}
 800be56:	bf00      	nop
 800be58:	3714      	adds	r7, #20
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	20000188 	.word	0x20000188
 800be68:	20000244 	.word	0x20000244

0800be6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	4a07      	ldr	r2, [pc, #28]	; (800be98 <vApplicationGetTimerTaskMemory+0x2c>)
 800be7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	4a06      	ldr	r2, [pc, #24]	; (800be9c <vApplicationGetTimerTaskMemory+0x30>)
 800be82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be8a:	601a      	str	r2, [r3, #0]
}
 800be8c:	bf00      	nop
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	20000444 	.word	0x20000444
 800be9c:	20000500 	.word	0x20000500

0800bea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f103 0208 	add.w	r2, r3, #8
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f04f 32ff 	mov.w	r2, #4294967295
 800beb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f103 0208 	add.w	r2, r3, #8
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f103 0208 	add.w	r2, r3, #8
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800beee:	bf00      	nop
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800befa:	b480      	push	{r7}
 800befc:	b085      	sub	sp, #20
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
 800bf02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	689a      	ldr	r2, [r3, #8]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	683a      	ldr	r2, [r7, #0]
 800bf24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	1c5a      	adds	r2, r3, #1
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	601a      	str	r2, [r3, #0]
}
 800bf36:	bf00      	nop
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf42:	b480      	push	{r7}
 800bf44:	b085      	sub	sp, #20
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf58:	d103      	bne.n	800bf62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	e00c      	b.n	800bf7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3308      	adds	r3, #8
 800bf66:	60fb      	str	r3, [r7, #12]
 800bf68:	e002      	b.n	800bf70 <vListInsert+0x2e>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d2f6      	bcs.n	800bf6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	683a      	ldr	r2, [r7, #0]
 800bf8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	1c5a      	adds	r2, r3, #1
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	601a      	str	r2, [r3, #0]
}
 800bfa8:	bf00      	nop
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	6892      	ldr	r2, [r2, #8]
 800bfca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	6852      	ldr	r2, [r2, #4]
 800bfd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d103      	bne.n	800bfe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	689a      	ldr	r2, [r3, #8]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	1e5a      	subs	r2, r3, #1
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10a      	bne.n	800c032 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c032:	f002 fe27 	bl	800ec84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03e:	68f9      	ldr	r1, [r7, #12]
 800c040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c042:	fb01 f303 	mul.w	r3, r1, r3
 800c046:	441a      	add	r2, r3
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c062:	3b01      	subs	r3, #1
 800c064:	68f9      	ldr	r1, [r7, #12]
 800c066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c068:	fb01 f303 	mul.w	r3, r1, r3
 800c06c:	441a      	add	r2, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	22ff      	movs	r2, #255	; 0xff
 800c076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	22ff      	movs	r2, #255	; 0xff
 800c07e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d114      	bne.n	800c0b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d01a      	beq.n	800c0c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	3310      	adds	r3, #16
 800c094:	4618      	mov	r0, r3
 800c096:	f001 fd13 	bl	800dac0 <xTaskRemoveFromEventList>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d012      	beq.n	800c0c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0a0:	4b0c      	ldr	r3, [pc, #48]	; (800c0d4 <xQueueGenericReset+0xcc>)
 800c0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	e009      	b.n	800c0c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3310      	adds	r3, #16
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7ff fef2 	bl	800bea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	3324      	adds	r3, #36	; 0x24
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7ff feed 	bl	800bea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0c6:	f002 fe0d 	bl	800ece4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0ca:	2301      	movs	r3, #1
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	e000ed04 	.word	0xe000ed04

0800c0d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08e      	sub	sp, #56	; 0x38
 800c0dc:	af02      	add	r7, sp, #8
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10a      	bne.n	800c102 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0fe:	bf00      	nop
 800c100:	e7fe      	b.n	800c100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10a      	bne.n	800c11e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c11a:	bf00      	nop
 800c11c:	e7fe      	b.n	800c11c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <xQueueGenericCreateStatic+0x52>
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <xQueueGenericCreateStatic+0x56>
 800c12a:	2301      	movs	r3, #1
 800c12c:	e000      	b.n	800c130 <xQueueGenericCreateStatic+0x58>
 800c12e:	2300      	movs	r3, #0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10a      	bne.n	800c14a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	623b      	str	r3, [r7, #32]
}
 800c146:	bf00      	nop
 800c148:	e7fe      	b.n	800c148 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d102      	bne.n	800c156 <xQueueGenericCreateStatic+0x7e>
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <xQueueGenericCreateStatic+0x82>
 800c156:	2301      	movs	r3, #1
 800c158:	e000      	b.n	800c15c <xQueueGenericCreateStatic+0x84>
 800c15a:	2300      	movs	r3, #0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10a      	bne.n	800c176 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	61fb      	str	r3, [r7, #28]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c176:	2350      	movs	r3, #80	; 0x50
 800c178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b50      	cmp	r3, #80	; 0x50
 800c17e:	d00a      	beq.n	800c196 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	61bb      	str	r3, [r7, #24]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c196:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00d      	beq.n	800c1be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	68b9      	ldr	r1, [r7, #8]
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f000 f83f 	bl	800c23c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3730      	adds	r7, #48	; 0x30
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08a      	sub	sp, #40	; 0x28
 800c1cc:	af02      	add	r7, sp, #8
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10a      	bne.n	800c1f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	613b      	str	r3, [r7, #16]
}
 800c1ee:	bf00      	nop
 800c1f0:	e7fe      	b.n	800c1f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	fb02 f303 	mul.w	r3, r2, r3
 800c1fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	3350      	adds	r3, #80	; 0x50
 800c200:	4618      	mov	r0, r3
 800c202:	f002 fe61 	bl	800eec8 <pvPortMalloc>
 800c206:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d011      	beq.n	800c232 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	3350      	adds	r3, #80	; 0x50
 800c216:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c220:	79fa      	ldrb	r2, [r7, #7]
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	4613      	mov	r3, r2
 800c228:	697a      	ldr	r2, [r7, #20]
 800c22a:	68b9      	ldr	r1, [r7, #8]
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f000 f805 	bl	800c23c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c232:	69bb      	ldr	r3, [r7, #24]
	}
 800c234:	4618      	mov	r0, r3
 800c236:	3720      	adds	r7, #32
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
 800c248:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d103      	bne.n	800c258 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	69ba      	ldr	r2, [r7, #24]
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	e002      	b.n	800c25e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c26a:	2101      	movs	r1, #1
 800c26c:	69b8      	ldr	r0, [r7, #24]
 800c26e:	f7ff fecb 	bl	800c008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	78fa      	ldrb	r2, [r7, #3]
 800c276:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c27a:	bf00      	nop
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00e      	beq.n	800c2ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f90b 	bl	800c4c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c2ae:	bf00      	nop
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b086      	sub	sp, #24
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	4603      	mov	r3, r0
 800c2be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c2c8:	79fb      	ldrb	r3, [r7, #7]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	6939      	ldr	r1, [r7, #16]
 800c2ce:	6978      	ldr	r0, [r7, #20]
 800c2d0:	f7ff ff7a 	bl	800c1c8 <xQueueGenericCreate>
 800c2d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f7ff ffd3 	bl	800c282 <prvInitialiseMutex>

		return xNewQueue;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
	}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b088      	sub	sp, #32
 800c2ea:	af02      	add	r7, sp, #8
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	6039      	str	r1, [r7, #0]
 800c2f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	617b      	str	r3, [r7, #20]
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c2fa:	79fb      	ldrb	r3, [r7, #7]
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2200      	movs	r2, #0
 800c302:	6939      	ldr	r1, [r7, #16]
 800c304:	6978      	ldr	r0, [r7, #20]
 800c306:	f7ff fee7 	bl	800c0d8 <xQueueGenericCreateStatic>
 800c30a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f7ff ffb8 	bl	800c282 <prvInitialiseMutex>

		return xNewQueue;
 800c312:	68fb      	ldr	r3, [r7, #12]
	}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c31c:	b590      	push	{r4, r7, lr}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10a      	bne.n	800c344 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	60fb      	str	r3, [r7, #12]
}
 800c340:	bf00      	nop
 800c342:	e7fe      	b.n	800c342 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	689c      	ldr	r4, [r3, #8]
 800c348:	f001 fd7c 	bl	800de44 <xTaskGetCurrentTaskHandle>
 800c34c:	4603      	mov	r3, r0
 800c34e:	429c      	cmp	r4, r3
 800c350:	d111      	bne.n	800c376 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	1e5a      	subs	r2, r3, #1
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d105      	bne.n	800c370 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c364:	2300      	movs	r3, #0
 800c366:	2200      	movs	r2, #0
 800c368:	2100      	movs	r1, #0
 800c36a:	6938      	ldr	r0, [r7, #16]
 800c36c:	f000 f8aa 	bl	800c4c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c370:	2301      	movs	r3, #1
 800c372:	617b      	str	r3, [r7, #20]
 800c374:	e001      	b.n	800c37a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c376:	2300      	movs	r3, #0
 800c378:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c37a:	697b      	ldr	r3, [r7, #20]
	}
 800c37c:	4618      	mov	r0, r3
 800c37e:	371c      	adds	r7, #28
 800c380:	46bd      	mov	sp, r7
 800c382:	bd90      	pop	{r4, r7, pc}

0800c384 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c384:	b590      	push	{r4, r7, lr}
 800c386:	b087      	sub	sp, #28
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10a      	bne.n	800c3ae <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	60fb      	str	r3, [r7, #12]
}
 800c3aa:	bf00      	nop
 800c3ac:	e7fe      	b.n	800c3ac <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	689c      	ldr	r4, [r3, #8]
 800c3b2:	f001 fd47 	bl	800de44 <xTaskGetCurrentTaskHandle>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	429c      	cmp	r4, r3
 800c3ba:	d107      	bne.n	800c3cc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	1c5a      	adds	r2, r3, #1
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	617b      	str	r3, [r7, #20]
 800c3ca:	e00c      	b.n	800c3e6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	6938      	ldr	r0, [r7, #16]
 800c3d0:	f000 fb7e 	bl	800cad0 <xQueueSemaphoreTake>
 800c3d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d004      	beq.n	800c3e6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c3e6:	697b      	ldr	r3, [r7, #20]
	}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	371c      	adds	r7, #28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd90      	pop	{r4, r7, pc}

0800c3f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b08a      	sub	sp, #40	; 0x28
 800c3f4:	af02      	add	r7, sp, #8
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10a      	bne.n	800c418 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	61bb      	str	r3, [r7, #24]
}
 800c414:	bf00      	nop
 800c416:	e7fe      	b.n	800c416 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d90a      	bls.n	800c436 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	617b      	str	r3, [r7, #20]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c436:	2302      	movs	r3, #2
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	2100      	movs	r1, #0
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f7ff fe49 	bl	800c0d8 <xQueueGenericCreateStatic>
 800c446:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d002      	beq.n	800c454 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c454:	69fb      	ldr	r3, [r7, #28]
	}
 800c456:	4618      	mov	r0, r3
 800c458:	3720      	adds	r7, #32
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b086      	sub	sp, #24
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10a      	bne.n	800c484 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	613b      	str	r3, [r7, #16]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c484:	683a      	ldr	r2, [r7, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d90a      	bls.n	800c4a2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	60fb      	str	r3, [r7, #12]
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7ff fe8e 	bl	800c1c8 <xQueueGenericCreate>
 800c4ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d002      	beq.n	800c4ba <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c4ba:	697b      	ldr	r3, [r7, #20]
	}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3718      	adds	r7, #24
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b08e      	sub	sp, #56	; 0x38
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10a      	bne.n	800c4f6 <xQueueGenericSend+0x32>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d103      	bne.n	800c504 <xQueueGenericSend+0x40>
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c500:	2b00      	cmp	r3, #0
 800c502:	d101      	bne.n	800c508 <xQueueGenericSend+0x44>
 800c504:	2301      	movs	r3, #1
 800c506:	e000      	b.n	800c50a <xQueueGenericSend+0x46>
 800c508:	2300      	movs	r3, #0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10a      	bne.n	800c524 <xQueueGenericSend+0x60>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2b02      	cmp	r3, #2
 800c528:	d103      	bne.n	800c532 <xQueueGenericSend+0x6e>
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d101      	bne.n	800c536 <xQueueGenericSend+0x72>
 800c532:	2301      	movs	r3, #1
 800c534:	e000      	b.n	800c538 <xQueueGenericSend+0x74>
 800c536:	2300      	movs	r3, #0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10a      	bne.n	800c552 <xQueueGenericSend+0x8e>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	623b      	str	r3, [r7, #32]
}
 800c54e:	bf00      	nop
 800c550:	e7fe      	b.n	800c550 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c552:	f001 fc87 	bl	800de64 <xTaskGetSchedulerState>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <xQueueGenericSend+0x9e>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d101      	bne.n	800c566 <xQueueGenericSend+0xa2>
 800c562:	2301      	movs	r3, #1
 800c564:	e000      	b.n	800c568 <xQueueGenericSend+0xa4>
 800c566:	2300      	movs	r3, #0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10a      	bne.n	800c582 <xQueueGenericSend+0xbe>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	61fb      	str	r3, [r7, #28]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c582:	f002 fb7f 	bl	800ec84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c58e:	429a      	cmp	r2, r3
 800c590:	d302      	bcc.n	800c598 <xQueueGenericSend+0xd4>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b02      	cmp	r3, #2
 800c596:	d129      	bne.n	800c5ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	68b9      	ldr	r1, [r7, #8]
 800c59c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c59e:	f000 fc5e 	bl	800ce5e <prvCopyDataToQueue>
 800c5a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d010      	beq.n	800c5ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ae:	3324      	adds	r3, #36	; 0x24
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f001 fa85 	bl	800dac0 <xTaskRemoveFromEventList>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d013      	beq.n	800c5e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c5bc:	4b3f      	ldr	r3, [pc, #252]	; (800c6bc <xQueueGenericSend+0x1f8>)
 800c5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	e00a      	b.n	800c5e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d007      	beq.n	800c5e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c5d4:	4b39      	ldr	r3, [pc, #228]	; (800c6bc <xQueueGenericSend+0x1f8>)
 800c5d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c5e4:	f002 fb7e 	bl	800ece4 <vPortExitCritical>
				return pdPASS;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e063      	b.n	800c6b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d103      	bne.n	800c5fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5f2:	f002 fb77 	bl	800ece4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e05c      	b.n	800c6b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d106      	bne.n	800c60e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c600:	f107 0314 	add.w	r3, r7, #20
 800c604:	4618      	mov	r0, r3
 800c606:	f001 fabf 	bl	800db88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c60a:	2301      	movs	r3, #1
 800c60c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c60e:	f002 fb69 	bl	800ece4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c612:	f001 f819 	bl	800d648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c616:	f002 fb35 	bl	800ec84 <vPortEnterCritical>
 800c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c620:	b25b      	sxtb	r3, r3
 800c622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c626:	d103      	bne.n	800c630 <xQueueGenericSend+0x16c>
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c636:	b25b      	sxtb	r3, r3
 800c638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63c:	d103      	bne.n	800c646 <xQueueGenericSend+0x182>
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	2200      	movs	r2, #0
 800c642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c646:	f002 fb4d 	bl	800ece4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c64a:	1d3a      	adds	r2, r7, #4
 800c64c:	f107 0314 	add.w	r3, r7, #20
 800c650:	4611      	mov	r1, r2
 800c652:	4618      	mov	r0, r3
 800c654:	f001 faae 	bl	800dbb4 <xTaskCheckForTimeOut>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d124      	bne.n	800c6a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c65e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c660:	f000 fcf5 	bl	800d04e <prvIsQueueFull>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d018      	beq.n	800c69c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66c:	3310      	adds	r3, #16
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	4611      	mov	r1, r2
 800c672:	4618      	mov	r0, r3
 800c674:	f001 f9d4 	bl	800da20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c67a:	f000 fc80 	bl	800cf7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c67e:	f000 fff1 	bl	800d664 <xTaskResumeAll>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	f47f af7c 	bne.w	800c582 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c68a:	4b0c      	ldr	r3, [pc, #48]	; (800c6bc <xQueueGenericSend+0x1f8>)
 800c68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	e772      	b.n	800c582 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c69c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c69e:	f000 fc6e 	bl	800cf7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6a2:	f000 ffdf 	bl	800d664 <xTaskResumeAll>
 800c6a6:	e76c      	b.n	800c582 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6aa:	f000 fc68 	bl	800cf7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6ae:	f000 ffd9 	bl	800d664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c6b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3738      	adds	r7, #56	; 0x38
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	e000ed04 	.word	0xe000ed04

0800c6c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b090      	sub	sp, #64	; 0x40
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
 800c6cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c6ea:	bf00      	nop
 800c6ec:	e7fe      	b.n	800c6ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d103      	bne.n	800c6fc <xQueueGenericSendFromISR+0x3c>
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <xQueueGenericSendFromISR+0x40>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e000      	b.n	800c702 <xQueueGenericSendFromISR+0x42>
 800c700:	2300      	movs	r3, #0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10a      	bne.n	800c71c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c718:	bf00      	nop
 800c71a:	e7fe      	b.n	800c71a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d103      	bne.n	800c72a <xQueueGenericSendFromISR+0x6a>
 800c722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c726:	2b01      	cmp	r3, #1
 800c728:	d101      	bne.n	800c72e <xQueueGenericSendFromISR+0x6e>
 800c72a:	2301      	movs	r3, #1
 800c72c:	e000      	b.n	800c730 <xQueueGenericSendFromISR+0x70>
 800c72e:	2300      	movs	r3, #0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10a      	bne.n	800c74a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	623b      	str	r3, [r7, #32]
}
 800c746:	bf00      	nop
 800c748:	e7fe      	b.n	800c748 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c74a:	f002 fb7d 	bl	800ee48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c74e:	f3ef 8211 	mrs	r2, BASEPRI
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	61fa      	str	r2, [r7, #28]
 800c764:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c766:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c768:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c772:	429a      	cmp	r2, r3
 800c774:	d302      	bcc.n	800c77c <xQueueGenericSendFromISR+0xbc>
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b02      	cmp	r3, #2
 800c77a:	d12f      	bne.n	800c7dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c78c:	683a      	ldr	r2, [r7, #0]
 800c78e:	68b9      	ldr	r1, [r7, #8]
 800c790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c792:	f000 fb64 	bl	800ce5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c796:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c79e:	d112      	bne.n	800c7c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d016      	beq.n	800c7d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7aa:	3324      	adds	r3, #36	; 0x24
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f001 f987 	bl	800dac0 <xTaskRemoveFromEventList>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00e      	beq.n	800c7d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00b      	beq.n	800c7d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	e007      	b.n	800c7d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	b25a      	sxtb	r2, r3
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c7da:	e001      	b.n	800c7e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c7ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3740      	adds	r7, #64	; 0x40
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b08e      	sub	sp, #56	; 0x38
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10a      	bne.n	800c820 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	623b      	str	r3, [r7, #32]
}
 800c81c:	bf00      	nop
 800c81e:	e7fe      	b.n	800c81e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00a      	beq.n	800c83e <xQueueGiveFromISR+0x48>
	__asm volatile
 800c828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	61fb      	str	r3, [r7, #28]
}
 800c83a:	bf00      	nop
 800c83c:	e7fe      	b.n	800c83c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d103      	bne.n	800c84e <xQueueGiveFromISR+0x58>
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d101      	bne.n	800c852 <xQueueGiveFromISR+0x5c>
 800c84e:	2301      	movs	r3, #1
 800c850:	e000      	b.n	800c854 <xQueueGiveFromISR+0x5e>
 800c852:	2300      	movs	r3, #0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10a      	bne.n	800c86e <xQueueGiveFromISR+0x78>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	61bb      	str	r3, [r7, #24]
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c86e:	f002 faeb 	bl	800ee48 <vPortValidateInterruptPriority>
	__asm volatile
 800c872:	f3ef 8211 	mrs	r2, BASEPRI
 800c876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87a:	f383 8811 	msr	BASEPRI, r3
 800c87e:	f3bf 8f6f 	isb	sy
 800c882:	f3bf 8f4f 	dsb	sy
 800c886:	617a      	str	r2, [r7, #20]
 800c888:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c88a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c88c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c892:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d22b      	bcs.n	800c8f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8aa:	1c5a      	adds	r2, r3, #1
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b8:	d112      	bne.n	800c8e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d016      	beq.n	800c8f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c4:	3324      	adds	r3, #36	; 0x24
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f001 f8fa 	bl	800dac0 <xTaskRemoveFromEventList>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00e      	beq.n	800c8f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00b      	beq.n	800c8f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	601a      	str	r2, [r3, #0]
 800c8de:	e007      	b.n	800c8f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	b25a      	sxtb	r2, r3
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c8f4:	e001      	b.n	800c8fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f383 8811 	msr	BASEPRI, r3
}
 800c904:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3738      	adds	r7, #56	; 0x38
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08c      	sub	sp, #48	; 0x30
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c91c:	2300      	movs	r3, #0
 800c91e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10a      	bne.n	800c940 <xQueueReceive+0x30>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	623b      	str	r3, [r7, #32]
}
 800c93c:	bf00      	nop
 800c93e:	e7fe      	b.n	800c93e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d103      	bne.n	800c94e <xQueueReceive+0x3e>
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d101      	bne.n	800c952 <xQueueReceive+0x42>
 800c94e:	2301      	movs	r3, #1
 800c950:	e000      	b.n	800c954 <xQueueReceive+0x44>
 800c952:	2300      	movs	r3, #0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10a      	bne.n	800c96e <xQueueReceive+0x5e>
	__asm volatile
 800c958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95c:	f383 8811 	msr	BASEPRI, r3
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	61fb      	str	r3, [r7, #28]
}
 800c96a:	bf00      	nop
 800c96c:	e7fe      	b.n	800c96c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c96e:	f001 fa79 	bl	800de64 <xTaskGetSchedulerState>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <xQueueReceive+0x6e>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d101      	bne.n	800c982 <xQueueReceive+0x72>
 800c97e:	2301      	movs	r3, #1
 800c980:	e000      	b.n	800c984 <xQueueReceive+0x74>
 800c982:	2300      	movs	r3, #0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <xQueueReceive+0x8e>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	61bb      	str	r3, [r7, #24]
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c99e:	f002 f971 	bl	800ec84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d01f      	beq.n	800c9ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9ae:	68b9      	ldr	r1, [r7, #8]
 800c9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9b2:	f000 fabe 	bl	800cf32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	1e5a      	subs	r2, r3, #1
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00f      	beq.n	800c9e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	3310      	adds	r3, #16
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f001 f878 	bl	800dac0 <xTaskRemoveFromEventList>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d007      	beq.n	800c9e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c9d6:	4b3d      	ldr	r3, [pc, #244]	; (800cacc <xQueueReceive+0x1bc>)
 800c9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9dc:	601a      	str	r2, [r3, #0]
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c9e6:	f002 f97d 	bl	800ece4 <vPortExitCritical>
				return pdPASS;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e069      	b.n	800cac2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d103      	bne.n	800c9fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9f4:	f002 f976 	bl	800ece4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	e062      	b.n	800cac2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d106      	bne.n	800ca10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca02:	f107 0310 	add.w	r3, r7, #16
 800ca06:	4618      	mov	r0, r3
 800ca08:	f001 f8be 	bl	800db88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca10:	f002 f968 	bl	800ece4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca14:	f000 fe18 	bl	800d648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca18:	f002 f934 	bl	800ec84 <vPortEnterCritical>
 800ca1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca22:	b25b      	sxtb	r3, r3
 800ca24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca28:	d103      	bne.n	800ca32 <xQueueReceive+0x122>
 800ca2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca38:	b25b      	sxtb	r3, r3
 800ca3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3e:	d103      	bne.n	800ca48 <xQueueReceive+0x138>
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca48:	f002 f94c 	bl	800ece4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca4c:	1d3a      	adds	r2, r7, #4
 800ca4e:	f107 0310 	add.w	r3, r7, #16
 800ca52:	4611      	mov	r1, r2
 800ca54:	4618      	mov	r0, r3
 800ca56:	f001 f8ad 	bl	800dbb4 <xTaskCheckForTimeOut>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d123      	bne.n	800caa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca62:	f000 fade 	bl	800d022 <prvIsQueueEmpty>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d017      	beq.n	800ca9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	3324      	adds	r3, #36	; 0x24
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	4611      	mov	r1, r2
 800ca74:	4618      	mov	r0, r3
 800ca76:	f000 ffd3 	bl	800da20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca7c:	f000 fa7f 	bl	800cf7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca80:	f000 fdf0 	bl	800d664 <xTaskResumeAll>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d189      	bne.n	800c99e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ca8a:	4b10      	ldr	r3, [pc, #64]	; (800cacc <xQueueReceive+0x1bc>)
 800ca8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca90:	601a      	str	r2, [r3, #0]
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	e780      	b.n	800c99e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca9e:	f000 fa6e 	bl	800cf7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800caa2:	f000 fddf 	bl	800d664 <xTaskResumeAll>
 800caa6:	e77a      	b.n	800c99e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800caa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caaa:	f000 fa68 	bl	800cf7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800caae:	f000 fdd9 	bl	800d664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cab4:	f000 fab5 	bl	800d022 <prvIsQueueEmpty>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f43f af6f 	beq.w	800c99e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cac0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3730      	adds	r7, #48	; 0x30
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	e000ed04 	.word	0xe000ed04

0800cad0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b08e      	sub	sp, #56	; 0x38
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cada:	2300      	movs	r3, #0
 800cadc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cae2:	2300      	movs	r3, #0
 800cae4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	623b      	str	r3, [r7, #32]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00a      	beq.n	800cb20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	61fb      	str	r3, [r7, #28]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb20:	f001 f9a0 	bl	800de64 <xTaskGetSchedulerState>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d102      	bne.n	800cb30 <xQueueSemaphoreTake+0x60>
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <xQueueSemaphoreTake+0x64>
 800cb30:	2301      	movs	r3, #1
 800cb32:	e000      	b.n	800cb36 <xQueueSemaphoreTake+0x66>
 800cb34:	2300      	movs	r3, #0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10a      	bne.n	800cb50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	61bb      	str	r3, [r7, #24]
}
 800cb4c:	bf00      	nop
 800cb4e:	e7fe      	b.n	800cb4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb50:	f002 f898 	bl	800ec84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d024      	beq.n	800cbaa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb62:	1e5a      	subs	r2, r3, #1
 800cb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d104      	bne.n	800cb7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb70:	f001 faee 	bl	800e150 <pvTaskIncrementMutexHeldCount>
 800cb74:	4602      	mov	r2, r0
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00f      	beq.n	800cba2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	3310      	adds	r3, #16
 800cb86:	4618      	mov	r0, r3
 800cb88:	f000 ff9a 	bl	800dac0 <xTaskRemoveFromEventList>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d007      	beq.n	800cba2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb92:	4b54      	ldr	r3, [pc, #336]	; (800cce4 <xQueueSemaphoreTake+0x214>)
 800cb94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cba2:	f002 f89f 	bl	800ece4 <vPortExitCritical>
				return pdPASS;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e097      	b.n	800ccda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d111      	bne.n	800cbd4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00a      	beq.n	800cbcc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbba:	f383 8811 	msr	BASEPRI, r3
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f3bf 8f4f 	dsb	sy
 800cbc6:	617b      	str	r3, [r7, #20]
}
 800cbc8:	bf00      	nop
 800cbca:	e7fe      	b.n	800cbca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cbcc:	f002 f88a 	bl	800ece4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	e082      	b.n	800ccda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d106      	bne.n	800cbe8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cbda:	f107 030c 	add.w	r3, r7, #12
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 ffd2 	bl	800db88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbe8:	f002 f87c 	bl	800ece4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbec:	f000 fd2c 	bl	800d648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbf0:	f002 f848 	bl	800ec84 <vPortEnterCritical>
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbfa:	b25b      	sxtb	r3, r3
 800cbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc00:	d103      	bne.n	800cc0a <xQueueSemaphoreTake+0x13a>
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc10:	b25b      	sxtb	r3, r3
 800cc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc16:	d103      	bne.n	800cc20 <xQueueSemaphoreTake+0x150>
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc20:	f002 f860 	bl	800ece4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc24:	463a      	mov	r2, r7
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 ffc1 	bl	800dbb4 <xTaskCheckForTimeOut>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d132      	bne.n	800cc9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc3a:	f000 f9f2 	bl	800d022 <prvIsQueueEmpty>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d026      	beq.n	800cc92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d109      	bne.n	800cc60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cc4c:	f002 f81a 	bl	800ec84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f001 f923 	bl	800dea0 <xTaskPriorityInherit>
 800cc5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cc5c:	f002 f842 	bl	800ece4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc62:	3324      	adds	r3, #36	; 0x24
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 fed9 	bl	800da20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc70:	f000 f985 	bl	800cf7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc74:	f000 fcf6 	bl	800d664 <xTaskResumeAll>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f47f af68 	bne.w	800cb50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cc80:	4b18      	ldr	r3, [pc, #96]	; (800cce4 <xQueueSemaphoreTake+0x214>)
 800cc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc86:	601a      	str	r2, [r3, #0]
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	e75e      	b.n	800cb50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cc92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc94:	f000 f973 	bl	800cf7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc98:	f000 fce4 	bl	800d664 <xTaskResumeAll>
 800cc9c:	e758      	b.n	800cb50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cc9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cca0:	f000 f96d 	bl	800cf7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cca4:	f000 fcde 	bl	800d664 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccaa:	f000 f9ba 	bl	800d022 <prvIsQueueEmpty>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f43f af4d 	beq.w	800cb50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00d      	beq.n	800ccd8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ccbc:	f001 ffe2 	bl	800ec84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ccc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccc2:	f000 f8b4 	bl	800ce2e <prvGetDisinheritPriorityAfterTimeout>
 800ccc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f001 f9bc 	bl	800e04c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ccd4:	f002 f806 	bl	800ece4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ccd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3738      	adds	r7, #56	; 0x38
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	e000ed04 	.word	0xe000ed04

0800cce8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b08e      	sub	sp, #56	; 0x38
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ccf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10a      	bne.n	800cd14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	623b      	str	r3, [r7, #32]
}
 800cd10:	bf00      	nop
 800cd12:	e7fe      	b.n	800cd12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d103      	bne.n	800cd22 <xQueueReceiveFromISR+0x3a>
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <xQueueReceiveFromISR+0x3e>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e000      	b.n	800cd28 <xQueueReceiveFromISR+0x40>
 800cd26:	2300      	movs	r3, #0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	61fb      	str	r3, [r7, #28]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd42:	f002 f881 	bl	800ee48 <vPortValidateInterruptPriority>
	__asm volatile
 800cd46:	f3ef 8211 	mrs	r2, BASEPRI
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	61ba      	str	r2, [r7, #24]
 800cd5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cd5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d02f      	beq.n	800cdce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd78:	68b9      	ldr	r1, [r7, #8]
 800cd7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd7c:	f000 f8d9 	bl	800cf32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	1e5a      	subs	r2, r3, #1
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cd88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd90:	d112      	bne.n	800cdb8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d016      	beq.n	800cdc8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	3310      	adds	r3, #16
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 fe8e 	bl	800dac0 <xTaskRemoveFromEventList>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00e      	beq.n	800cdc8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00b      	beq.n	800cdc8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	601a      	str	r2, [r3, #0]
 800cdb6:	e007      	b.n	800cdc8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cdb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	b25a      	sxtb	r2, r3
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	637b      	str	r3, [r7, #52]	; 0x34
 800cdcc:	e001      	b.n	800cdd2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	f383 8811 	msr	BASEPRI, r3
}
 800cddc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3738      	adds	r7, #56	; 0x38
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10a      	bne.n	800ce10 <vQueueDelete+0x28>
	__asm volatile
 800cdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfe:	f383 8811 	msr	BASEPRI, r3
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	f3bf 8f4f 	dsb	sy
 800ce0a:	60bb      	str	r3, [r7, #8]
}
 800ce0c:	bf00      	nop
 800ce0e:	e7fe      	b.n	800ce0e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f000 f95f 	bl	800d0d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f002 f91d 	bl	800f060 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ce26:	bf00      	nop
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ce2e:	b480      	push	{r7}
 800ce30:	b085      	sub	sp, #20
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d006      	beq.n	800ce4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	e001      	b.n	800ce50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce50:	68fb      	ldr	r3, [r7, #12]
	}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3714      	adds	r7, #20
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr

0800ce5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b086      	sub	sp, #24
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	60f8      	str	r0, [r7, #12]
 800ce66:	60b9      	str	r1, [r7, #8]
 800ce68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10d      	bne.n	800ce98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d14d      	bne.n	800cf20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f001 f871 	bl	800df70 <xTaskPriorityDisinherit>
 800ce8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	609a      	str	r2, [r3, #8]
 800ce96:	e043      	b.n	800cf20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d119      	bne.n	800ced2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6858      	ldr	r0, [r3, #4]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea6:	461a      	mov	r2, r3
 800cea8:	68b9      	ldr	r1, [r7, #8]
 800ceaa:	f00f fee8 	bl	801cc7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb6:	441a      	add	r2, r3
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d32b      	bcc.n	800cf20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	605a      	str	r2, [r3, #4]
 800ced0:	e026      	b.n	800cf20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	68d8      	ldr	r0, [r3, #12]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceda:	461a      	mov	r2, r3
 800cedc:	68b9      	ldr	r1, [r7, #8]
 800cede:	f00f fece 	bl	801cc7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	68da      	ldr	r2, [r3, #12]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceea:	425b      	negs	r3, r3
 800ceec:	441a      	add	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	68da      	ldr	r2, [r3, #12]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d207      	bcs.n	800cf0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	689a      	ldr	r2, [r3, #8]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf06:	425b      	negs	r3, r3
 800cf08:	441a      	add	r2, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d105      	bne.n	800cf20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	1c5a      	adds	r2, r3, #1
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf28:	697b      	ldr	r3, [r7, #20]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3718      	adds	r7, #24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b082      	sub	sp, #8
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
 800cf3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d018      	beq.n	800cf76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68da      	ldr	r2, [r3, #12]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4c:	441a      	add	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	68da      	ldr	r2, [r3, #12]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d303      	bcc.n	800cf66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	68d9      	ldr	r1, [r3, #12]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6e:	461a      	mov	r2, r3
 800cf70:	6838      	ldr	r0, [r7, #0]
 800cf72:	f00f fe84 	bl	801cc7e <memcpy>
	}
}
 800cf76:	bf00      	nop
 800cf78:	3708      	adds	r7, #8
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b084      	sub	sp, #16
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf86:	f001 fe7d 	bl	800ec84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf92:	e011      	b.n	800cfb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d012      	beq.n	800cfc2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	3324      	adds	r3, #36	; 0x24
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f000 fd8d 	bl	800dac0 <xTaskRemoveFromEventList>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d001      	beq.n	800cfb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfac:	f000 fe64 	bl	800dc78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dce9      	bgt.n	800cf94 <prvUnlockQueue+0x16>
 800cfc0:	e000      	b.n	800cfc4 <prvUnlockQueue+0x46>
					break;
 800cfc2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	22ff      	movs	r2, #255	; 0xff
 800cfc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cfcc:	f001 fe8a 	bl	800ece4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cfd0:	f001 fe58 	bl	800ec84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfdc:	e011      	b.n	800d002 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d012      	beq.n	800d00c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	3310      	adds	r3, #16
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 fd68 	bl	800dac0 <xTaskRemoveFromEventList>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d001      	beq.n	800cffa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cff6:	f000 fe3f 	bl	800dc78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cffa:	7bbb      	ldrb	r3, [r7, #14]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d006:	2b00      	cmp	r3, #0
 800d008:	dce9      	bgt.n	800cfde <prvUnlockQueue+0x60>
 800d00a:	e000      	b.n	800d00e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d00c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	22ff      	movs	r2, #255	; 0xff
 800d012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d016:	f001 fe65 	bl	800ece4 <vPortExitCritical>
}
 800d01a:	bf00      	nop
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b084      	sub	sp, #16
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d02a:	f001 fe2b 	bl	800ec84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d032:	2b00      	cmp	r3, #0
 800d034:	d102      	bne.n	800d03c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d036:	2301      	movs	r3, #1
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	e001      	b.n	800d040 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d040:	f001 fe50 	bl	800ece4 <vPortExitCritical>

	return xReturn;
 800d044:	68fb      	ldr	r3, [r7, #12]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3710      	adds	r7, #16
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b084      	sub	sp, #16
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d056:	f001 fe15 	bl	800ec84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d062:	429a      	cmp	r2, r3
 800d064:	d102      	bne.n	800d06c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d066:	2301      	movs	r3, #1
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	e001      	b.n	800d070 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d070:	f001 fe38 	bl	800ece4 <vPortExitCritical>

	return xReturn;
 800d074:	68fb      	ldr	r3, [r7, #12]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d08a:	2300      	movs	r3, #0
 800d08c:	60fb      	str	r3, [r7, #12]
 800d08e:	e014      	b.n	800d0ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d090:	4a0f      	ldr	r2, [pc, #60]	; (800d0d0 <vQueueAddToRegistry+0x50>)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10b      	bne.n	800d0b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d09c:	490c      	ldr	r1, [pc, #48]	; (800d0d0 <vQueueAddToRegistry+0x50>)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0a6:	4a0a      	ldr	r2, [pc, #40]	; (800d0d0 <vQueueAddToRegistry+0x50>)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	00db      	lsls	r3, r3, #3
 800d0ac:	4413      	add	r3, r2
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0b2:	e006      	b.n	800d0c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	60fb      	str	r3, [r7, #12]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2b07      	cmp	r3, #7
 800d0be:	d9e7      	bls.n	800d090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0c0:	bf00      	nop
 800d0c2:	bf00      	nop
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	2001027c 	.word	0x2001027c

0800d0d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0dc:	2300      	movs	r3, #0
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	e016      	b.n	800d110 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d0e2:	4a10      	ldr	r2, [pc, #64]	; (800d124 <vQueueUnregisterQueue+0x50>)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	4413      	add	r3, r2
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d10b      	bne.n	800d10a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d0f2:	4a0c      	ldr	r2, [pc, #48]	; (800d124 <vQueueUnregisterQueue+0x50>)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d0fc:	4a09      	ldr	r2, [pc, #36]	; (800d124 <vQueueUnregisterQueue+0x50>)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	4413      	add	r3, r2
 800d104:	2200      	movs	r2, #0
 800d106:	605a      	str	r2, [r3, #4]
				break;
 800d108:	e006      	b.n	800d118 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3301      	adds	r3, #1
 800d10e:	60fb      	str	r3, [r7, #12]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b07      	cmp	r3, #7
 800d114:	d9e5      	bls.n	800d0e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d116:	bf00      	nop
 800d118:	bf00      	nop
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	2001027c 	.word	0x2001027c

0800d128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d138:	f001 fda4 	bl	800ec84 <vPortEnterCritical>
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d142:	b25b      	sxtb	r3, r3
 800d144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d148:	d103      	bne.n	800d152 <vQueueWaitForMessageRestricted+0x2a>
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d158:	b25b      	sxtb	r3, r3
 800d15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15e:	d103      	bne.n	800d168 <vQueueWaitForMessageRestricted+0x40>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d168:	f001 fdbc 	bl	800ece4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d170:	2b00      	cmp	r3, #0
 800d172:	d106      	bne.n	800d182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	3324      	adds	r3, #36	; 0x24
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	68b9      	ldr	r1, [r7, #8]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f000 fc73 	bl	800da68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d182:	6978      	ldr	r0, [r7, #20]
 800d184:	f7ff fefb 	bl	800cf7e <prvUnlockQueue>
	}
 800d188:	bf00      	nop
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d190:	b580      	push	{r7, lr}
 800d192:	b08e      	sub	sp, #56	; 0x38
 800d194:	af04      	add	r7, sp, #16
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
 800d19c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	623b      	str	r3, [r7, #32]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10a      	bne.n	800d1d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	61fb      	str	r3, [r7, #28]
}
 800d1d2:	bf00      	nop
 800d1d4:	e7fe      	b.n	800d1d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1d6:	23bc      	movs	r3, #188	; 0xbc
 800d1d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	2bbc      	cmp	r3, #188	; 0xbc
 800d1de:	d00a      	beq.n	800d1f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	61bb      	str	r3, [r7, #24]
}
 800d1f2:	bf00      	nop
 800d1f4:	e7fe      	b.n	800d1f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d01e      	beq.n	800d23c <xTaskCreateStatic+0xac>
 800d1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d200:	2b00      	cmp	r3, #0
 800d202:	d01b      	beq.n	800d23c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d20c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	2202      	movs	r2, #2
 800d212:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d216:	2300      	movs	r3, #0
 800d218:	9303      	str	r3, [sp, #12]
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	9302      	str	r3, [sp, #8]
 800d21e:	f107 0314 	add.w	r3, r7, #20
 800d222:	9301      	str	r3, [sp, #4]
 800d224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	68b9      	ldr	r1, [r7, #8]
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f000 f850 	bl	800d2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d236:	f000 f8f3 	bl	800d420 <prvAddNewTaskToReadyList>
 800d23a:	e001      	b.n	800d240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d23c:	2300      	movs	r3, #0
 800d23e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d240:	697b      	ldr	r3, [r7, #20]
	}
 800d242:	4618      	mov	r0, r3
 800d244:	3728      	adds	r7, #40	; 0x28
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b08c      	sub	sp, #48	; 0x30
 800d24e:	af04      	add	r7, sp, #16
 800d250:	60f8      	str	r0, [r7, #12]
 800d252:	60b9      	str	r1, [r7, #8]
 800d254:	603b      	str	r3, [r7, #0]
 800d256:	4613      	mov	r3, r2
 800d258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d25a:	88fb      	ldrh	r3, [r7, #6]
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4618      	mov	r0, r3
 800d260:	f001 fe32 	bl	800eec8 <pvPortMalloc>
 800d264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00e      	beq.n	800d28a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d26c:	20bc      	movs	r0, #188	; 0xbc
 800d26e:	f001 fe2b 	bl	800eec8 <pvPortMalloc>
 800d272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	631a      	str	r2, [r3, #48]	; 0x30
 800d280:	e005      	b.n	800d28e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d282:	6978      	ldr	r0, [r7, #20]
 800d284:	f001 feec 	bl	800f060 <vPortFree>
 800d288:	e001      	b.n	800d28e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d017      	beq.n	800d2c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	2200      	movs	r2, #0
 800d298:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d29c:	88fa      	ldrh	r2, [r7, #6]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	9303      	str	r3, [sp, #12]
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	9302      	str	r3, [sp, #8]
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	9301      	str	r3, [sp, #4]
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	68b9      	ldr	r1, [r7, #8]
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f000 f80e 	bl	800d2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2b8:	69f8      	ldr	r0, [r7, #28]
 800d2ba:	f000 f8b1 	bl	800d420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	61bb      	str	r3, [r7, #24]
 800d2c2:	e002      	b.n	800d2ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2ca:	69bb      	ldr	r3, [r7, #24]
	}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3720      	adds	r7, #32
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
 800d2e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	21a5      	movs	r1, #165	; 0xa5
 800d2ee:	f00f fcd4 	bl	801cc9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	f023 0307 	bic.w	r3, r3, #7
 800d30a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	f003 0307 	and.w	r3, r3, #7
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00a      	beq.n	800d32c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	617b      	str	r3, [r7, #20]
}
 800d328:	bf00      	nop
 800d32a:	e7fe      	b.n	800d32a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d01f      	beq.n	800d372 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d332:	2300      	movs	r3, #0
 800d334:	61fb      	str	r3, [r7, #28]
 800d336:	e012      	b.n	800d35e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	4413      	add	r3, r2
 800d33e:	7819      	ldrb	r1, [r3, #0]
 800d340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	4413      	add	r3, r2
 800d346:	3334      	adds	r3, #52	; 0x34
 800d348:	460a      	mov	r2, r1
 800d34a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	4413      	add	r3, r2
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d006      	beq.n	800d366 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	3301      	adds	r3, #1
 800d35c:	61fb      	str	r3, [r7, #28]
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	2b0f      	cmp	r3, #15
 800d362:	d9e9      	bls.n	800d338 <prvInitialiseNewTask+0x64>
 800d364:	e000      	b.n	800d368 <prvInitialiseNewTask+0x94>
			{
				break;
 800d366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d370:	e003      	b.n	800d37a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d374:	2200      	movs	r2, #0
 800d376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37c:	2b37      	cmp	r3, #55	; 0x37
 800d37e:	d901      	bls.n	800d384 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d380:	2337      	movs	r3, #55	; 0x37
 800d382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d38e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	2200      	movs	r2, #0
 800d394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d398:	3304      	adds	r3, #4
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7fe fda0 	bl	800bee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	3318      	adds	r3, #24
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe fd9b 	bl	800bee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d2:	3354      	adds	r3, #84	; 0x54
 800d3d4:	2260      	movs	r2, #96	; 0x60
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f00f fc5e 	bl	801cc9a <memset>
 800d3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e0:	4a0c      	ldr	r2, [pc, #48]	; (800d414 <prvInitialiseNewTask+0x140>)
 800d3e2:	659a      	str	r2, [r3, #88]	; 0x58
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	4a0c      	ldr	r2, [pc, #48]	; (800d418 <prvInitialiseNewTask+0x144>)
 800d3e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	4a0b      	ldr	r2, [pc, #44]	; (800d41c <prvInitialiseNewTask+0x148>)
 800d3ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	68f9      	ldr	r1, [r7, #12]
 800d3f4:	69b8      	ldr	r0, [r7, #24]
 800d3f6:	f001 fb1b 	bl	800ea30 <pxPortInitialiseStack>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	2b00      	cmp	r3, #0
 800d404:	d002      	beq.n	800d40c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d40a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d40c:	bf00      	nop
 800d40e:	3720      	adds	r7, #32
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	08021620 	.word	0x08021620
 800d418:	08021640 	.word	0x08021640
 800d41c:	08021600 	.word	0x08021600

0800d420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d428:	f001 fc2c 	bl	800ec84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d42c:	4b2d      	ldr	r3, [pc, #180]	; (800d4e4 <prvAddNewTaskToReadyList+0xc4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3301      	adds	r3, #1
 800d432:	4a2c      	ldr	r2, [pc, #176]	; (800d4e4 <prvAddNewTaskToReadyList+0xc4>)
 800d434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d436:	4b2c      	ldr	r3, [pc, #176]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d109      	bne.n	800d452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d43e:	4a2a      	ldr	r2, [pc, #168]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d444:	4b27      	ldr	r3, [pc, #156]	; (800d4e4 <prvAddNewTaskToReadyList+0xc4>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d110      	bne.n	800d46e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d44c:	f000 fc38 	bl	800dcc0 <prvInitialiseTaskLists>
 800d450:	e00d      	b.n	800d46e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d452:	4b26      	ldr	r3, [pc, #152]	; (800d4ec <prvAddNewTaskToReadyList+0xcc>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d109      	bne.n	800d46e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d45a:	4b23      	ldr	r3, [pc, #140]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	429a      	cmp	r2, r3
 800d466:	d802      	bhi.n	800d46e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d468:	4a1f      	ldr	r2, [pc, #124]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d46e:	4b20      	ldr	r3, [pc, #128]	; (800d4f0 <prvAddNewTaskToReadyList+0xd0>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3301      	adds	r3, #1
 800d474:	4a1e      	ldr	r2, [pc, #120]	; (800d4f0 <prvAddNewTaskToReadyList+0xd0>)
 800d476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d478:	4b1d      	ldr	r3, [pc, #116]	; (800d4f0 <prvAddNewTaskToReadyList+0xd0>)
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d484:	4b1b      	ldr	r3, [pc, #108]	; (800d4f4 <prvAddNewTaskToReadyList+0xd4>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d903      	bls.n	800d494 <prvAddNewTaskToReadyList+0x74>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d490:	4a18      	ldr	r2, [pc, #96]	; (800d4f4 <prvAddNewTaskToReadyList+0xd4>)
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d498:	4613      	mov	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4a15      	ldr	r2, [pc, #84]	; (800d4f8 <prvAddNewTaskToReadyList+0xd8>)
 800d4a2:	441a      	add	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	f7fe fd25 	bl	800befa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4b0:	f001 fc18 	bl	800ece4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4b4:	4b0d      	ldr	r3, [pc, #52]	; (800d4ec <prvAddNewTaskToReadyList+0xcc>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00e      	beq.n	800d4da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d207      	bcs.n	800d4da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4ca:	4b0c      	ldr	r3, [pc, #48]	; (800d4fc <prvAddNewTaskToReadyList+0xdc>)
 800d4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4da:	bf00      	nop
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	20000dd4 	.word	0x20000dd4
 800d4e8:	20000900 	.word	0x20000900
 800d4ec:	20000de0 	.word	0x20000de0
 800d4f0:	20000df0 	.word	0x20000df0
 800d4f4:	20000ddc 	.word	0x20000ddc
 800d4f8:	20000904 	.word	0x20000904
 800d4fc:	e000ed04 	.word	0xe000ed04

0800d500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d508:	2300      	movs	r3, #0
 800d50a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d017      	beq.n	800d542 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d512:	4b13      	ldr	r3, [pc, #76]	; (800d560 <vTaskDelay+0x60>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00a      	beq.n	800d530 <vTaskDelay+0x30>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	60bb      	str	r3, [r7, #8]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d530:	f000 f88a 	bl	800d648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d534:	2100      	movs	r1, #0
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fe1e 	bl	800e178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d53c:	f000 f892 	bl	800d664 <xTaskResumeAll>
 800d540:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d107      	bne.n	800d558 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d548:	4b06      	ldr	r3, [pc, #24]	; (800d564 <vTaskDelay+0x64>)
 800d54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d558:	bf00      	nop
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20000dfc 	.word	0x20000dfc
 800d564:	e000ed04 	.word	0xe000ed04

0800d568 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d56e:	2300      	movs	r3, #0
 800d570:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d572:	2300      	movs	r3, #0
 800d574:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d576:	463a      	mov	r2, r7
 800d578:	1d39      	adds	r1, r7, #4
 800d57a:	f107 0308 	add.w	r3, r7, #8
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fe fc5a 	bl	800be38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d584:	6839      	ldr	r1, [r7, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	9202      	str	r2, [sp, #8]
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	2300      	movs	r3, #0
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	2300      	movs	r3, #0
 800d594:	460a      	mov	r2, r1
 800d596:	4924      	ldr	r1, [pc, #144]	; (800d628 <vTaskStartScheduler+0xc0>)
 800d598:	4824      	ldr	r0, [pc, #144]	; (800d62c <vTaskStartScheduler+0xc4>)
 800d59a:	f7ff fdf9 	bl	800d190 <xTaskCreateStatic>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	4a23      	ldr	r2, [pc, #140]	; (800d630 <vTaskStartScheduler+0xc8>)
 800d5a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d5a4:	4b22      	ldr	r3, [pc, #136]	; (800d630 <vTaskStartScheduler+0xc8>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d002      	beq.n	800d5b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	617b      	str	r3, [r7, #20]
 800d5b0:	e001      	b.n	800d5b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d102      	bne.n	800d5c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d5bc:	f000 fe30 	bl	800e220 <xTimerCreateTimerTask>
 800d5c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d11b      	bne.n	800d600 <vTaskStartScheduler+0x98>
	__asm volatile
 800d5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	613b      	str	r3, [r7, #16]
}
 800d5da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5dc:	4b15      	ldr	r3, [pc, #84]	; (800d634 <vTaskStartScheduler+0xcc>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3354      	adds	r3, #84	; 0x54
 800d5e2:	4a15      	ldr	r2, [pc, #84]	; (800d638 <vTaskStartScheduler+0xd0>)
 800d5e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d5e6:	4b15      	ldr	r3, [pc, #84]	; (800d63c <vTaskStartScheduler+0xd4>)
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d5ee:	4b14      	ldr	r3, [pc, #80]	; (800d640 <vTaskStartScheduler+0xd8>)
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d5f4:	4b13      	ldr	r3, [pc, #76]	; (800d644 <vTaskStartScheduler+0xdc>)
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d5fa:	f001 faa1 	bl	800eb40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d5fe:	e00e      	b.n	800d61e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d606:	d10a      	bne.n	800d61e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	60fb      	str	r3, [r7, #12]
}
 800d61a:	bf00      	nop
 800d61c:	e7fe      	b.n	800d61c <vTaskStartScheduler+0xb4>
}
 800d61e:	bf00      	nop
 800d620:	3718      	adds	r7, #24
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	0801e124 	.word	0x0801e124
 800d62c:	0800dc91 	.word	0x0800dc91
 800d630:	20000df8 	.word	0x20000df8
 800d634:	20000900 	.word	0x20000900
 800d638:	200000f4 	.word	0x200000f4
 800d63c:	20000df4 	.word	0x20000df4
 800d640:	20000de0 	.word	0x20000de0
 800d644:	20000dd8 	.word	0x20000dd8

0800d648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d648:	b480      	push	{r7}
 800d64a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d64c:	4b04      	ldr	r3, [pc, #16]	; (800d660 <vTaskSuspendAll+0x18>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3301      	adds	r3, #1
 800d652:	4a03      	ldr	r2, [pc, #12]	; (800d660 <vTaskSuspendAll+0x18>)
 800d654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d656:	bf00      	nop
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	20000dfc 	.word	0x20000dfc

0800d664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d66e:	2300      	movs	r3, #0
 800d670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d672:	4b42      	ldr	r3, [pc, #264]	; (800d77c <xTaskResumeAll+0x118>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10a      	bne.n	800d690 <xTaskResumeAll+0x2c>
	__asm volatile
 800d67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67e:	f383 8811 	msr	BASEPRI, r3
 800d682:	f3bf 8f6f 	isb	sy
 800d686:	f3bf 8f4f 	dsb	sy
 800d68a:	603b      	str	r3, [r7, #0]
}
 800d68c:	bf00      	nop
 800d68e:	e7fe      	b.n	800d68e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d690:	f001 faf8 	bl	800ec84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d694:	4b39      	ldr	r3, [pc, #228]	; (800d77c <xTaskResumeAll+0x118>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3b01      	subs	r3, #1
 800d69a:	4a38      	ldr	r2, [pc, #224]	; (800d77c <xTaskResumeAll+0x118>)
 800d69c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d69e:	4b37      	ldr	r3, [pc, #220]	; (800d77c <xTaskResumeAll+0x118>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d162      	bne.n	800d76c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d6a6:	4b36      	ldr	r3, [pc, #216]	; (800d780 <xTaskResumeAll+0x11c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d05e      	beq.n	800d76c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6ae:	e02f      	b.n	800d710 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6b0:	4b34      	ldr	r3, [pc, #208]	; (800d784 <xTaskResumeAll+0x120>)
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3318      	adds	r3, #24
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fe fc79 	bl	800bfb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fe fc74 	bl	800bfb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d0:	4b2d      	ldr	r3, [pc, #180]	; (800d788 <xTaskResumeAll+0x124>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d903      	bls.n	800d6e0 <xTaskResumeAll+0x7c>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6dc:	4a2a      	ldr	r2, [pc, #168]	; (800d788 <xTaskResumeAll+0x124>)
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4a27      	ldr	r2, [pc, #156]	; (800d78c <xTaskResumeAll+0x128>)
 800d6ee:	441a      	add	r2, r3
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	4610      	mov	r0, r2
 800d6f8:	f7fe fbff 	bl	800befa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d700:	4b23      	ldr	r3, [pc, #140]	; (800d790 <xTaskResumeAll+0x12c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d706:	429a      	cmp	r2, r3
 800d708:	d302      	bcc.n	800d710 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d70a:	4b22      	ldr	r3, [pc, #136]	; (800d794 <xTaskResumeAll+0x130>)
 800d70c:	2201      	movs	r2, #1
 800d70e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d710:	4b1c      	ldr	r3, [pc, #112]	; (800d784 <xTaskResumeAll+0x120>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1cb      	bne.n	800d6b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d71e:	f000 fb71 	bl	800de04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d722:	4b1d      	ldr	r3, [pc, #116]	; (800d798 <xTaskResumeAll+0x134>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d010      	beq.n	800d750 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d72e:	f000 f859 	bl	800d7e4 <xTaskIncrementTick>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d738:	4b16      	ldr	r3, [pc, #88]	; (800d794 <xTaskResumeAll+0x130>)
 800d73a:	2201      	movs	r2, #1
 800d73c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3b01      	subs	r3, #1
 800d742:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1f1      	bne.n	800d72e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d74a:	4b13      	ldr	r3, [pc, #76]	; (800d798 <xTaskResumeAll+0x134>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d750:	4b10      	ldr	r3, [pc, #64]	; (800d794 <xTaskResumeAll+0x130>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d009      	beq.n	800d76c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d75c:	4b0f      	ldr	r3, [pc, #60]	; (800d79c <xTaskResumeAll+0x138>)
 800d75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d762:	601a      	str	r2, [r3, #0]
 800d764:	f3bf 8f4f 	dsb	sy
 800d768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d76c:	f001 faba 	bl	800ece4 <vPortExitCritical>

	return xAlreadyYielded;
 800d770:	68bb      	ldr	r3, [r7, #8]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	20000dfc 	.word	0x20000dfc
 800d780:	20000dd4 	.word	0x20000dd4
 800d784:	20000d94 	.word	0x20000d94
 800d788:	20000ddc 	.word	0x20000ddc
 800d78c:	20000904 	.word	0x20000904
 800d790:	20000900 	.word	0x20000900
 800d794:	20000de8 	.word	0x20000de8
 800d798:	20000de4 	.word	0x20000de4
 800d79c:	e000ed04 	.word	0xe000ed04

0800d7a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d7a6:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <xTaskGetTickCount+0x1c>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d7ac:	687b      	ldr	r3, [r7, #4]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	20000dd8 	.word	0x20000dd8

0800d7c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7c6:	f001 fb3f 	bl	800ee48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d7ce:	4b04      	ldr	r3, [pc, #16]	; (800d7e0 <xTaskGetTickCountFromISR+0x20>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7d4:	683b      	ldr	r3, [r7, #0]
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	20000dd8 	.word	0x20000dd8

0800d7e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ee:	4b4f      	ldr	r3, [pc, #316]	; (800d92c <xTaskIncrementTick+0x148>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f040 808f 	bne.w	800d916 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7f8:	4b4d      	ldr	r3, [pc, #308]	; (800d930 <xTaskIncrementTick+0x14c>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d800:	4a4b      	ldr	r2, [pc, #300]	; (800d930 <xTaskIncrementTick+0x14c>)
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d120      	bne.n	800d84e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d80c:	4b49      	ldr	r3, [pc, #292]	; (800d934 <xTaskIncrementTick+0x150>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00a      	beq.n	800d82c <xTaskIncrementTick+0x48>
	__asm volatile
 800d816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	603b      	str	r3, [r7, #0]
}
 800d828:	bf00      	nop
 800d82a:	e7fe      	b.n	800d82a <xTaskIncrementTick+0x46>
 800d82c:	4b41      	ldr	r3, [pc, #260]	; (800d934 <xTaskIncrementTick+0x150>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	60fb      	str	r3, [r7, #12]
 800d832:	4b41      	ldr	r3, [pc, #260]	; (800d938 <xTaskIncrementTick+0x154>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a3f      	ldr	r2, [pc, #252]	; (800d934 <xTaskIncrementTick+0x150>)
 800d838:	6013      	str	r3, [r2, #0]
 800d83a:	4a3f      	ldr	r2, [pc, #252]	; (800d938 <xTaskIncrementTick+0x154>)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6013      	str	r3, [r2, #0]
 800d840:	4b3e      	ldr	r3, [pc, #248]	; (800d93c <xTaskIncrementTick+0x158>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	3301      	adds	r3, #1
 800d846:	4a3d      	ldr	r2, [pc, #244]	; (800d93c <xTaskIncrementTick+0x158>)
 800d848:	6013      	str	r3, [r2, #0]
 800d84a:	f000 fadb 	bl	800de04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d84e:	4b3c      	ldr	r3, [pc, #240]	; (800d940 <xTaskIncrementTick+0x15c>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	693a      	ldr	r2, [r7, #16]
 800d854:	429a      	cmp	r2, r3
 800d856:	d349      	bcc.n	800d8ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d858:	4b36      	ldr	r3, [pc, #216]	; (800d934 <xTaskIncrementTick+0x150>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d104      	bne.n	800d86c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d862:	4b37      	ldr	r3, [pc, #220]	; (800d940 <xTaskIncrementTick+0x15c>)
 800d864:	f04f 32ff 	mov.w	r2, #4294967295
 800d868:	601a      	str	r2, [r3, #0]
					break;
 800d86a:	e03f      	b.n	800d8ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d86c:	4b31      	ldr	r3, [pc, #196]	; (800d934 <xTaskIncrementTick+0x150>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d87c:	693a      	ldr	r2, [r7, #16]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	429a      	cmp	r2, r3
 800d882:	d203      	bcs.n	800d88c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d884:	4a2e      	ldr	r2, [pc, #184]	; (800d940 <xTaskIncrementTick+0x15c>)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d88a:	e02f      	b.n	800d8ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	3304      	adds	r3, #4
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe fb8f 	bl	800bfb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	3318      	adds	r3, #24
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fe fb86 	bl	800bfb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ac:	4b25      	ldr	r3, [pc, #148]	; (800d944 <xTaskIncrementTick+0x160>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d903      	bls.n	800d8bc <xTaskIncrementTick+0xd8>
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b8:	4a22      	ldr	r2, [pc, #136]	; (800d944 <xTaskIncrementTick+0x160>)
 800d8ba:	6013      	str	r3, [r2, #0]
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4413      	add	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4a1f      	ldr	r2, [pc, #124]	; (800d948 <xTaskIncrementTick+0x164>)
 800d8ca:	441a      	add	r2, r3
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	4610      	mov	r0, r2
 800d8d4:	f7fe fb11 	bl	800befa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8dc:	4b1b      	ldr	r3, [pc, #108]	; (800d94c <xTaskIncrementTick+0x168>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d3b8      	bcc.n	800d858 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8ea:	e7b5      	b.n	800d858 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8ec:	4b17      	ldr	r3, [pc, #92]	; (800d94c <xTaskIncrementTick+0x168>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f2:	4915      	ldr	r1, [pc, #84]	; (800d948 <xTaskIncrementTick+0x164>)
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	440b      	add	r3, r1
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b01      	cmp	r3, #1
 800d902:	d901      	bls.n	800d908 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d904:	2301      	movs	r3, #1
 800d906:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d908:	4b11      	ldr	r3, [pc, #68]	; (800d950 <xTaskIncrementTick+0x16c>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d007      	beq.n	800d920 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d910:	2301      	movs	r3, #1
 800d912:	617b      	str	r3, [r7, #20]
 800d914:	e004      	b.n	800d920 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d916:	4b0f      	ldr	r3, [pc, #60]	; (800d954 <xTaskIncrementTick+0x170>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	3301      	adds	r3, #1
 800d91c:	4a0d      	ldr	r2, [pc, #52]	; (800d954 <xTaskIncrementTick+0x170>)
 800d91e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d920:	697b      	ldr	r3, [r7, #20]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3718      	adds	r7, #24
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	20000dfc 	.word	0x20000dfc
 800d930:	20000dd8 	.word	0x20000dd8
 800d934:	20000d8c 	.word	0x20000d8c
 800d938:	20000d90 	.word	0x20000d90
 800d93c:	20000dec 	.word	0x20000dec
 800d940:	20000df4 	.word	0x20000df4
 800d944:	20000ddc 	.word	0x20000ddc
 800d948:	20000904 	.word	0x20000904
 800d94c:	20000900 	.word	0x20000900
 800d950:	20000de8 	.word	0x20000de8
 800d954:	20000de4 	.word	0x20000de4

0800d958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d95e:	4b2a      	ldr	r3, [pc, #168]	; (800da08 <vTaskSwitchContext+0xb0>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d003      	beq.n	800d96e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d966:	4b29      	ldr	r3, [pc, #164]	; (800da0c <vTaskSwitchContext+0xb4>)
 800d968:	2201      	movs	r2, #1
 800d96a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d96c:	e046      	b.n	800d9fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d96e:	4b27      	ldr	r3, [pc, #156]	; (800da0c <vTaskSwitchContext+0xb4>)
 800d970:	2200      	movs	r2, #0
 800d972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d974:	4b26      	ldr	r3, [pc, #152]	; (800da10 <vTaskSwitchContext+0xb8>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	60fb      	str	r3, [r7, #12]
 800d97a:	e010      	b.n	800d99e <vTaskSwitchContext+0x46>
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10a      	bne.n	800d998 <vTaskSwitchContext+0x40>
	__asm volatile
 800d982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d986:	f383 8811 	msr	BASEPRI, r3
 800d98a:	f3bf 8f6f 	isb	sy
 800d98e:	f3bf 8f4f 	dsb	sy
 800d992:	607b      	str	r3, [r7, #4]
}
 800d994:	bf00      	nop
 800d996:	e7fe      	b.n	800d996 <vTaskSwitchContext+0x3e>
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	60fb      	str	r3, [r7, #12]
 800d99e:	491d      	ldr	r1, [pc, #116]	; (800da14 <vTaskSwitchContext+0xbc>)
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	4413      	add	r3, r2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	440b      	add	r3, r1
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d0e4      	beq.n	800d97c <vTaskSwitchContext+0x24>
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	4a15      	ldr	r2, [pc, #84]	; (800da14 <vTaskSwitchContext+0xbc>)
 800d9be:	4413      	add	r3, r2
 800d9c0:	60bb      	str	r3, [r7, #8]
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	685a      	ldr	r2, [r3, #4]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	605a      	str	r2, [r3, #4]
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d104      	bne.n	800d9e2 <vTaskSwitchContext+0x8a>
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	605a      	str	r2, [r3, #4]
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	4a0b      	ldr	r2, [pc, #44]	; (800da18 <vTaskSwitchContext+0xc0>)
 800d9ea:	6013      	str	r3, [r2, #0]
 800d9ec:	4a08      	ldr	r2, [pc, #32]	; (800da10 <vTaskSwitchContext+0xb8>)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9f2:	4b09      	ldr	r3, [pc, #36]	; (800da18 <vTaskSwitchContext+0xc0>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	3354      	adds	r3, #84	; 0x54
 800d9f8:	4a08      	ldr	r2, [pc, #32]	; (800da1c <vTaskSwitchContext+0xc4>)
 800d9fa:	6013      	str	r3, [r2, #0]
}
 800d9fc:	bf00      	nop
 800d9fe:	3714      	adds	r7, #20
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr
 800da08:	20000dfc 	.word	0x20000dfc
 800da0c:	20000de8 	.word	0x20000de8
 800da10:	20000ddc 	.word	0x20000ddc
 800da14:	20000904 	.word	0x20000904
 800da18:	20000900 	.word	0x20000900
 800da1c:	200000f4 	.word	0x200000f4

0800da20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d10a      	bne.n	800da46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800da30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da34:	f383 8811 	msr	BASEPRI, r3
 800da38:	f3bf 8f6f 	isb	sy
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	60fb      	str	r3, [r7, #12]
}
 800da42:	bf00      	nop
 800da44:	e7fe      	b.n	800da44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da46:	4b07      	ldr	r3, [pc, #28]	; (800da64 <vTaskPlaceOnEventList+0x44>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3318      	adds	r3, #24
 800da4c:	4619      	mov	r1, r3
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7fe fa77 	bl	800bf42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da54:	2101      	movs	r1, #1
 800da56:	6838      	ldr	r0, [r7, #0]
 800da58:	f000 fb8e 	bl	800e178 <prvAddCurrentTaskToDelayedList>
}
 800da5c:	bf00      	nop
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	20000900 	.word	0x20000900

0800da68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d10a      	bne.n	800da90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	617b      	str	r3, [r7, #20]
}
 800da8c:	bf00      	nop
 800da8e:	e7fe      	b.n	800da8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da90:	4b0a      	ldr	r3, [pc, #40]	; (800dabc <vTaskPlaceOnEventListRestricted+0x54>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	3318      	adds	r3, #24
 800da96:	4619      	mov	r1, r3
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f7fe fa2e 	bl	800befa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800daa4:	f04f 33ff 	mov.w	r3, #4294967295
 800daa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800daaa:	6879      	ldr	r1, [r7, #4]
 800daac:	68b8      	ldr	r0, [r7, #8]
 800daae:	f000 fb63 	bl	800e178 <prvAddCurrentTaskToDelayedList>
	}
 800dab2:	bf00      	nop
 800dab4:	3718      	adds	r7, #24
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	20000900 	.word	0x20000900

0800dac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d10a      	bne.n	800daec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	60fb      	str	r3, [r7, #12]
}
 800dae8:	bf00      	nop
 800daea:	e7fe      	b.n	800daea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	3318      	adds	r3, #24
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fe fa5f 	bl	800bfb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daf6:	4b1e      	ldr	r3, [pc, #120]	; (800db70 <xTaskRemoveFromEventList+0xb0>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d11d      	bne.n	800db3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	3304      	adds	r3, #4
 800db02:	4618      	mov	r0, r3
 800db04:	f7fe fa56 	bl	800bfb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db0c:	4b19      	ldr	r3, [pc, #100]	; (800db74 <xTaskRemoveFromEventList+0xb4>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d903      	bls.n	800db1c <xTaskRemoveFromEventList+0x5c>
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db18:	4a16      	ldr	r2, [pc, #88]	; (800db74 <xTaskRemoveFromEventList+0xb4>)
 800db1a:	6013      	str	r3, [r2, #0]
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db20:	4613      	mov	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4a13      	ldr	r2, [pc, #76]	; (800db78 <xTaskRemoveFromEventList+0xb8>)
 800db2a:	441a      	add	r2, r3
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	3304      	adds	r3, #4
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7fe f9e1 	bl	800befa <vListInsertEnd>
 800db38:	e005      	b.n	800db46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	3318      	adds	r3, #24
 800db3e:	4619      	mov	r1, r3
 800db40:	480e      	ldr	r0, [pc, #56]	; (800db7c <xTaskRemoveFromEventList+0xbc>)
 800db42:	f7fe f9da 	bl	800befa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db4a:	4b0d      	ldr	r3, [pc, #52]	; (800db80 <xTaskRemoveFromEventList+0xc0>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db50:	429a      	cmp	r2, r3
 800db52:	d905      	bls.n	800db60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db54:	2301      	movs	r3, #1
 800db56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db58:	4b0a      	ldr	r3, [pc, #40]	; (800db84 <xTaskRemoveFromEventList+0xc4>)
 800db5a:	2201      	movs	r2, #1
 800db5c:	601a      	str	r2, [r3, #0]
 800db5e:	e001      	b.n	800db64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800db60:	2300      	movs	r3, #0
 800db62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800db64:	697b      	ldr	r3, [r7, #20]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	20000dfc 	.word	0x20000dfc
 800db74:	20000ddc 	.word	0x20000ddc
 800db78:	20000904 	.word	0x20000904
 800db7c:	20000d94 	.word	0x20000d94
 800db80:	20000900 	.word	0x20000900
 800db84:	20000de8 	.word	0x20000de8

0800db88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db90:	4b06      	ldr	r3, [pc, #24]	; (800dbac <vTaskInternalSetTimeOutState+0x24>)
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db98:	4b05      	ldr	r3, [pc, #20]	; (800dbb0 <vTaskInternalSetTimeOutState+0x28>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	605a      	str	r2, [r3, #4]
}
 800dba0:	bf00      	nop
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	20000dec 	.word	0x20000dec
 800dbb0:	20000dd8 	.word	0x20000dd8

0800dbb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b088      	sub	sp, #32
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10a      	bne.n	800dbda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc8:	f383 8811 	msr	BASEPRI, r3
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	613b      	str	r3, [r7, #16]
}
 800dbd6:	bf00      	nop
 800dbd8:	e7fe      	b.n	800dbd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10a      	bne.n	800dbf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	60fb      	str	r3, [r7, #12]
}
 800dbf2:	bf00      	nop
 800dbf4:	e7fe      	b.n	800dbf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dbf6:	f001 f845 	bl	800ec84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dbfa:	4b1d      	ldr	r3, [pc, #116]	; (800dc70 <xTaskCheckForTimeOut+0xbc>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	69ba      	ldr	r2, [r7, #24]
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc12:	d102      	bne.n	800dc1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc14:	2300      	movs	r3, #0
 800dc16:	61fb      	str	r3, [r7, #28]
 800dc18:	e023      	b.n	800dc62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	4b15      	ldr	r3, [pc, #84]	; (800dc74 <xTaskCheckForTimeOut+0xc0>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d007      	beq.n	800dc36 <xTaskCheckForTimeOut+0x82>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	69ba      	ldr	r2, [r7, #24]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d302      	bcc.n	800dc36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dc30:	2301      	movs	r3, #1
 800dc32:	61fb      	str	r3, [r7, #28]
 800dc34:	e015      	b.n	800dc62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	697a      	ldr	r2, [r7, #20]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d20b      	bcs.n	800dc58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	1ad2      	subs	r2, r2, r3
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7ff ff9b 	bl	800db88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc52:	2300      	movs	r3, #0
 800dc54:	61fb      	str	r3, [r7, #28]
 800dc56:	e004      	b.n	800dc62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc62:	f001 f83f 	bl	800ece4 <vPortExitCritical>

	return xReturn;
 800dc66:	69fb      	ldr	r3, [r7, #28]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3720      	adds	r7, #32
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	20000dd8 	.word	0x20000dd8
 800dc74:	20000dec 	.word	0x20000dec

0800dc78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc78:	b480      	push	{r7}
 800dc7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc7c:	4b03      	ldr	r3, [pc, #12]	; (800dc8c <vTaskMissedYield+0x14>)
 800dc7e:	2201      	movs	r2, #1
 800dc80:	601a      	str	r2, [r3, #0]
}
 800dc82:	bf00      	nop
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	20000de8 	.word	0x20000de8

0800dc90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc98:	f000 f852 	bl	800dd40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc9c:	4b06      	ldr	r3, [pc, #24]	; (800dcb8 <prvIdleTask+0x28>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d9f9      	bls.n	800dc98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dca4:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <prvIdleTask+0x2c>)
 800dca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dcb4:	e7f0      	b.n	800dc98 <prvIdleTask+0x8>
 800dcb6:	bf00      	nop
 800dcb8:	20000904 	.word	0x20000904
 800dcbc:	e000ed04 	.word	0xe000ed04

0800dcc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	607b      	str	r3, [r7, #4]
 800dcca:	e00c      	b.n	800dce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4413      	add	r3, r2
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	4a12      	ldr	r2, [pc, #72]	; (800dd20 <prvInitialiseTaskLists+0x60>)
 800dcd8:	4413      	add	r3, r2
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fe f8e0 	bl	800bea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	3301      	adds	r3, #1
 800dce4:	607b      	str	r3, [r7, #4]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b37      	cmp	r3, #55	; 0x37
 800dcea:	d9ef      	bls.n	800dccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dcec:	480d      	ldr	r0, [pc, #52]	; (800dd24 <prvInitialiseTaskLists+0x64>)
 800dcee:	f7fe f8d7 	bl	800bea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dcf2:	480d      	ldr	r0, [pc, #52]	; (800dd28 <prvInitialiseTaskLists+0x68>)
 800dcf4:	f7fe f8d4 	bl	800bea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dcf8:	480c      	ldr	r0, [pc, #48]	; (800dd2c <prvInitialiseTaskLists+0x6c>)
 800dcfa:	f7fe f8d1 	bl	800bea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dcfe:	480c      	ldr	r0, [pc, #48]	; (800dd30 <prvInitialiseTaskLists+0x70>)
 800dd00:	f7fe f8ce 	bl	800bea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd04:	480b      	ldr	r0, [pc, #44]	; (800dd34 <prvInitialiseTaskLists+0x74>)
 800dd06:	f7fe f8cb 	bl	800bea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd0a:	4b0b      	ldr	r3, [pc, #44]	; (800dd38 <prvInitialiseTaskLists+0x78>)
 800dd0c:	4a05      	ldr	r2, [pc, #20]	; (800dd24 <prvInitialiseTaskLists+0x64>)
 800dd0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd10:	4b0a      	ldr	r3, [pc, #40]	; (800dd3c <prvInitialiseTaskLists+0x7c>)
 800dd12:	4a05      	ldr	r2, [pc, #20]	; (800dd28 <prvInitialiseTaskLists+0x68>)
 800dd14:	601a      	str	r2, [r3, #0]
}
 800dd16:	bf00      	nop
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	20000904 	.word	0x20000904
 800dd24:	20000d64 	.word	0x20000d64
 800dd28:	20000d78 	.word	0x20000d78
 800dd2c:	20000d94 	.word	0x20000d94
 800dd30:	20000da8 	.word	0x20000da8
 800dd34:	20000dc0 	.word	0x20000dc0
 800dd38:	20000d8c 	.word	0x20000d8c
 800dd3c:	20000d90 	.word	0x20000d90

0800dd40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd46:	e019      	b.n	800dd7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd48:	f000 ff9c 	bl	800ec84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd4c:	4b10      	ldr	r3, [pc, #64]	; (800dd90 <prvCheckTasksWaitingTermination+0x50>)
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	3304      	adds	r3, #4
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fe f92b 	bl	800bfb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd5e:	4b0d      	ldr	r3, [pc, #52]	; (800dd94 <prvCheckTasksWaitingTermination+0x54>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	3b01      	subs	r3, #1
 800dd64:	4a0b      	ldr	r2, [pc, #44]	; (800dd94 <prvCheckTasksWaitingTermination+0x54>)
 800dd66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd68:	4b0b      	ldr	r3, [pc, #44]	; (800dd98 <prvCheckTasksWaitingTermination+0x58>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	4a0a      	ldr	r2, [pc, #40]	; (800dd98 <prvCheckTasksWaitingTermination+0x58>)
 800dd70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd72:	f000 ffb7 	bl	800ece4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f810 	bl	800dd9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd7c:	4b06      	ldr	r3, [pc, #24]	; (800dd98 <prvCheckTasksWaitingTermination+0x58>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1e1      	bne.n	800dd48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dd84:	bf00      	nop
 800dd86:	bf00      	nop
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	20000da8 	.word	0x20000da8
 800dd94:	20000dd4 	.word	0x20000dd4
 800dd98:	20000dbc 	.word	0x20000dbc

0800dd9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	3354      	adds	r3, #84	; 0x54
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f00f f83f 	bl	801ce2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d108      	bne.n	800ddca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f001 f94f 	bl	800f060 <vPortFree>
				vPortFree( pxTCB );
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f001 f94c 	bl	800f060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ddc8:	e018      	b.n	800ddfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d103      	bne.n	800dddc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f001 f943 	bl	800f060 <vPortFree>
	}
 800ddda:	e00f      	b.n	800ddfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d00a      	beq.n	800ddfc <prvDeleteTCB+0x60>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	60fb      	str	r3, [r7, #12]
}
 800ddf8:	bf00      	nop
 800ddfa:	e7fe      	b.n	800ddfa <prvDeleteTCB+0x5e>
	}
 800ddfc:	bf00      	nop
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de0a:	4b0c      	ldr	r3, [pc, #48]	; (800de3c <prvResetNextTaskUnblockTime+0x38>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d104      	bne.n	800de1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de14:	4b0a      	ldr	r3, [pc, #40]	; (800de40 <prvResetNextTaskUnblockTime+0x3c>)
 800de16:	f04f 32ff 	mov.w	r2, #4294967295
 800de1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de1c:	e008      	b.n	800de30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de1e:	4b07      	ldr	r3, [pc, #28]	; (800de3c <prvResetNextTaskUnblockTime+0x38>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	4a04      	ldr	r2, [pc, #16]	; (800de40 <prvResetNextTaskUnblockTime+0x3c>)
 800de2e:	6013      	str	r3, [r2, #0]
}
 800de30:	bf00      	nop
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr
 800de3c:	20000d8c 	.word	0x20000d8c
 800de40:	20000df4 	.word	0x20000df4

0800de44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800de4a:	4b05      	ldr	r3, [pc, #20]	; (800de60 <xTaskGetCurrentTaskHandle+0x1c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800de50:	687b      	ldr	r3, [r7, #4]
	}
 800de52:	4618      	mov	r0, r3
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	20000900 	.word	0x20000900

0800de64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de6a:	4b0b      	ldr	r3, [pc, #44]	; (800de98 <xTaskGetSchedulerState+0x34>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d102      	bne.n	800de78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de72:	2301      	movs	r3, #1
 800de74:	607b      	str	r3, [r7, #4]
 800de76:	e008      	b.n	800de8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de78:	4b08      	ldr	r3, [pc, #32]	; (800de9c <xTaskGetSchedulerState+0x38>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d102      	bne.n	800de86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de80:	2302      	movs	r3, #2
 800de82:	607b      	str	r3, [r7, #4]
 800de84:	e001      	b.n	800de8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de86:	2300      	movs	r3, #0
 800de88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de8a:	687b      	ldr	r3, [r7, #4]
	}
 800de8c:	4618      	mov	r0, r3
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr
 800de98:	20000de0 	.word	0x20000de0
 800de9c:	20000dfc 	.word	0x20000dfc

0800dea0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800deac:	2300      	movs	r3, #0
 800deae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d051      	beq.n	800df5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deba:	4b2a      	ldr	r3, [pc, #168]	; (800df64 <xTaskPriorityInherit+0xc4>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d241      	bcs.n	800df48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	699b      	ldr	r3, [r3, #24]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	db06      	blt.n	800deda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800decc:	4b25      	ldr	r3, [pc, #148]	; (800df64 <xTaskPriorityInherit+0xc4>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	6959      	ldr	r1, [r3, #20]
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee2:	4613      	mov	r3, r2
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	4413      	add	r3, r2
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	4a1f      	ldr	r2, [pc, #124]	; (800df68 <xTaskPriorityInherit+0xc8>)
 800deec:	4413      	add	r3, r2
 800deee:	4299      	cmp	r1, r3
 800def0:	d122      	bne.n	800df38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	3304      	adds	r3, #4
 800def6:	4618      	mov	r0, r3
 800def8:	f7fe f85c 	bl	800bfb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800defc:	4b19      	ldr	r3, [pc, #100]	; (800df64 <xTaskPriorityInherit+0xc4>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0a:	4b18      	ldr	r3, [pc, #96]	; (800df6c <xTaskPriorityInherit+0xcc>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d903      	bls.n	800df1a <xTaskPriorityInherit+0x7a>
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df16:	4a15      	ldr	r2, [pc, #84]	; (800df6c <xTaskPriorityInherit+0xcc>)
 800df18:	6013      	str	r3, [r2, #0]
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1e:	4613      	mov	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4413      	add	r3, r2
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	4a10      	ldr	r2, [pc, #64]	; (800df68 <xTaskPriorityInherit+0xc8>)
 800df28:	441a      	add	r2, r3
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	3304      	adds	r3, #4
 800df2e:	4619      	mov	r1, r3
 800df30:	4610      	mov	r0, r2
 800df32:	f7fd ffe2 	bl	800befa <vListInsertEnd>
 800df36:	e004      	b.n	800df42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df38:	4b0a      	ldr	r3, [pc, #40]	; (800df64 <xTaskPriorityInherit+0xc4>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800df42:	2301      	movs	r3, #1
 800df44:	60fb      	str	r3, [r7, #12]
 800df46:	e008      	b.n	800df5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df4c:	4b05      	ldr	r3, [pc, #20]	; (800df64 <xTaskPriorityInherit+0xc4>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df52:	429a      	cmp	r2, r3
 800df54:	d201      	bcs.n	800df5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800df56:	2301      	movs	r3, #1
 800df58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df5a:	68fb      	ldr	r3, [r7, #12]
	}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	20000900 	.word	0x20000900
 800df68:	20000904 	.word	0x20000904
 800df6c:	20000ddc 	.word	0x20000ddc

0800df70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800df7c:	2300      	movs	r3, #0
 800df7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d056      	beq.n	800e034 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800df86:	4b2e      	ldr	r3, [pc, #184]	; (800e040 <xTaskPriorityDisinherit+0xd0>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d00a      	beq.n	800dfa6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800df90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	60fb      	str	r3, [r7, #12]
}
 800dfa2:	bf00      	nop
 800dfa4:	e7fe      	b.n	800dfa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d10a      	bne.n	800dfc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb2:	f383 8811 	msr	BASEPRI, r3
 800dfb6:	f3bf 8f6f 	isb	sy
 800dfba:	f3bf 8f4f 	dsb	sy
 800dfbe:	60bb      	str	r3, [r7, #8]
}
 800dfc0:	bf00      	nop
 800dfc2:	e7fe      	b.n	800dfc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfc8:	1e5a      	subs	r2, r3, #1
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d02c      	beq.n	800e034 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d128      	bne.n	800e034 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fd ffe4 	bl	800bfb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e004:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <xTaskPriorityDisinherit+0xd4>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d903      	bls.n	800e014 <xTaskPriorityDisinherit+0xa4>
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e010:	4a0c      	ldr	r2, [pc, #48]	; (800e044 <xTaskPriorityDisinherit+0xd4>)
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e018:	4613      	mov	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4a09      	ldr	r2, [pc, #36]	; (800e048 <xTaskPriorityDisinherit+0xd8>)
 800e022:	441a      	add	r2, r3
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	3304      	adds	r3, #4
 800e028:	4619      	mov	r1, r3
 800e02a:	4610      	mov	r0, r2
 800e02c:	f7fd ff65 	bl	800befa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e030:	2301      	movs	r3, #1
 800e032:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e034:	697b      	ldr	r3, [r7, #20]
	}
 800e036:	4618      	mov	r0, r3
 800e038:	3718      	adds	r7, #24
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	20000900 	.word	0x20000900
 800e044:	20000ddc 	.word	0x20000ddc
 800e048:	20000904 	.word	0x20000904

0800e04c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b088      	sub	sp, #32
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e05a:	2301      	movs	r3, #1
 800e05c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d06a      	beq.n	800e13a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10a      	bne.n	800e082 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e070:	f383 8811 	msr	BASEPRI, r3
 800e074:	f3bf 8f6f 	isb	sy
 800e078:	f3bf 8f4f 	dsb	sy
 800e07c:	60fb      	str	r3, [r7, #12]
}
 800e07e:	bf00      	nop
 800e080:	e7fe      	b.n	800e080 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d902      	bls.n	800e092 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	61fb      	str	r3, [r7, #28]
 800e090:	e002      	b.n	800e098 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e096:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e09c:	69fa      	ldr	r2, [r7, #28]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d04b      	beq.n	800e13a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e0a2:	69bb      	ldr	r3, [r7, #24]
 800e0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0a6:	697a      	ldr	r2, [r7, #20]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d146      	bne.n	800e13a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e0ac:	4b25      	ldr	r3, [pc, #148]	; (800e144 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	69ba      	ldr	r2, [r7, #24]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d10a      	bne.n	800e0cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ba:	f383 8811 	msr	BASEPRI, r3
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	60bb      	str	r3, [r7, #8]
}
 800e0c8:	bf00      	nop
 800e0ca:	e7fe      	b.n	800e0ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	69fa      	ldr	r2, [r7, #28]
 800e0d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	db04      	blt.n	800e0ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	6959      	ldr	r1, [r3, #20]
 800e0ee:	693a      	ldr	r2, [r7, #16]
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	4a13      	ldr	r2, [pc, #76]	; (800e148 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e0fa:	4413      	add	r3, r2
 800e0fc:	4299      	cmp	r1, r3
 800e0fe:	d11c      	bne.n	800e13a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e100:	69bb      	ldr	r3, [r7, #24]
 800e102:	3304      	adds	r3, #4
 800e104:	4618      	mov	r0, r3
 800e106:	f7fd ff55 	bl	800bfb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10e:	4b0f      	ldr	r3, [pc, #60]	; (800e14c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	429a      	cmp	r2, r3
 800e114:	d903      	bls.n	800e11e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e11a:	4a0c      	ldr	r2, [pc, #48]	; (800e14c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e122:	4613      	mov	r3, r2
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	4413      	add	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4a07      	ldr	r2, [pc, #28]	; (800e148 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e12c:	441a      	add	r2, r3
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	3304      	adds	r3, #4
 800e132:	4619      	mov	r1, r3
 800e134:	4610      	mov	r0, r2
 800e136:	f7fd fee0 	bl	800befa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e13a:	bf00      	nop
 800e13c:	3720      	adds	r7, #32
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	20000900 	.word	0x20000900
 800e148:	20000904 	.word	0x20000904
 800e14c:	20000ddc 	.word	0x20000ddc

0800e150 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e150:	b480      	push	{r7}
 800e152:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e154:	4b07      	ldr	r3, [pc, #28]	; (800e174 <pvTaskIncrementMutexHeldCount+0x24>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d004      	beq.n	800e166 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e15c:	4b05      	ldr	r3, [pc, #20]	; (800e174 <pvTaskIncrementMutexHeldCount+0x24>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e162:	3201      	adds	r2, #1
 800e164:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e166:	4b03      	ldr	r3, [pc, #12]	; (800e174 <pvTaskIncrementMutexHeldCount+0x24>)
 800e168:	681b      	ldr	r3, [r3, #0]
	}
 800e16a:	4618      	mov	r0, r3
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr
 800e174:	20000900 	.word	0x20000900

0800e178 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e182:	4b21      	ldr	r3, [pc, #132]	; (800e208 <prvAddCurrentTaskToDelayedList+0x90>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e188:	4b20      	ldr	r3, [pc, #128]	; (800e20c <prvAddCurrentTaskToDelayedList+0x94>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	3304      	adds	r3, #4
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fd ff10 	bl	800bfb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19a:	d10a      	bne.n	800e1b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d007      	beq.n	800e1b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1a2:	4b1a      	ldr	r3, [pc, #104]	; (800e20c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	3304      	adds	r3, #4
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	4819      	ldr	r0, [pc, #100]	; (800e210 <prvAddCurrentTaskToDelayedList+0x98>)
 800e1ac:	f7fd fea5 	bl	800befa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1b0:	e026      	b.n	800e200 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e1ba:	4b14      	ldr	r3, [pc, #80]	; (800e20c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e1c2:	68ba      	ldr	r2, [r7, #8]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d209      	bcs.n	800e1de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1ca:	4b12      	ldr	r3, [pc, #72]	; (800e214 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	4b0f      	ldr	r3, [pc, #60]	; (800e20c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3304      	adds	r3, #4
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	4610      	mov	r0, r2
 800e1d8:	f7fd feb3 	bl	800bf42 <vListInsert>
}
 800e1dc:	e010      	b.n	800e200 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1de:	4b0e      	ldr	r3, [pc, #56]	; (800e218 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	4b0a      	ldr	r3, [pc, #40]	; (800e20c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4610      	mov	r0, r2
 800e1ec:	f7fd fea9 	bl	800bf42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e1f0:	4b0a      	ldr	r3, [pc, #40]	; (800e21c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	68ba      	ldr	r2, [r7, #8]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d202      	bcs.n	800e200 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e1fa:	4a08      	ldr	r2, [pc, #32]	; (800e21c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	6013      	str	r3, [r2, #0]
}
 800e200:	bf00      	nop
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20000dd8 	.word	0x20000dd8
 800e20c:	20000900 	.word	0x20000900
 800e210:	20000dc0 	.word	0x20000dc0
 800e214:	20000d90 	.word	0x20000d90
 800e218:	20000d8c 	.word	0x20000d8c
 800e21c:	20000df4 	.word	0x20000df4

0800e220 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b08a      	sub	sp, #40	; 0x28
 800e224:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e226:	2300      	movs	r3, #0
 800e228:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e22a:	f000 fba1 	bl	800e970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e22e:	4b1c      	ldr	r3, [pc, #112]	; (800e2a0 <xTimerCreateTimerTask+0x80>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d021      	beq.n	800e27a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e236:	2300      	movs	r3, #0
 800e238:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e23a:	2300      	movs	r3, #0
 800e23c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e23e:	1d3a      	adds	r2, r7, #4
 800e240:	f107 0108 	add.w	r1, r7, #8
 800e244:	f107 030c 	add.w	r3, r7, #12
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fd fe0f 	bl	800be6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e24e:	6879      	ldr	r1, [r7, #4]
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	9202      	str	r2, [sp, #8]
 800e256:	9301      	str	r3, [sp, #4]
 800e258:	2302      	movs	r3, #2
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	2300      	movs	r3, #0
 800e25e:	460a      	mov	r2, r1
 800e260:	4910      	ldr	r1, [pc, #64]	; (800e2a4 <xTimerCreateTimerTask+0x84>)
 800e262:	4811      	ldr	r0, [pc, #68]	; (800e2a8 <xTimerCreateTimerTask+0x88>)
 800e264:	f7fe ff94 	bl	800d190 <xTaskCreateStatic>
 800e268:	4603      	mov	r3, r0
 800e26a:	4a10      	ldr	r2, [pc, #64]	; (800e2ac <xTimerCreateTimerTask+0x8c>)
 800e26c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e26e:	4b0f      	ldr	r3, [pc, #60]	; (800e2ac <xTimerCreateTimerTask+0x8c>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d001      	beq.n	800e27a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e276:	2301      	movs	r3, #1
 800e278:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10a      	bne.n	800e296 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	613b      	str	r3, [r7, #16]
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e296:	697b      	ldr	r3, [r7, #20]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3718      	adds	r7, #24
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	20000e30 	.word	0x20000e30
 800e2a4:	0801e12c 	.word	0x0801e12c
 800e2a8:	0800e519 	.word	0x0800e519
 800e2ac:	20000e34 	.word	0x20000e34

0800e2b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af02      	add	r7, sp, #8
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e2be:	202c      	movs	r0, #44	; 0x2c
 800e2c0:	f000 fe02 	bl	800eec8 <pvPortMalloc>
 800e2c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d00d      	beq.n	800e2e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	9301      	str	r3, [sp, #4]
 800e2d8:	6a3b      	ldr	r3, [r7, #32]
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	68b9      	ldr	r1, [r7, #8]
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 f843 	bl	800e36e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e2e8:	697b      	ldr	r3, [r7, #20]
	}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3718      	adds	r7, #24
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e2f2:	b580      	push	{r7, lr}
 800e2f4:	b08a      	sub	sp, #40	; 0x28
 800e2f6:	af02      	add	r7, sp, #8
 800e2f8:	60f8      	str	r0, [r7, #12]
 800e2fa:	60b9      	str	r1, [r7, #8]
 800e2fc:	607a      	str	r2, [r7, #4]
 800e2fe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e300:	232c      	movs	r3, #44	; 0x2c
 800e302:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	2b2c      	cmp	r3, #44	; 0x2c
 800e308:	d00a      	beq.n	800e320 <xTimerCreateStatic+0x2e>
	__asm volatile
 800e30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	61bb      	str	r3, [r7, #24]
}
 800e31c:	bf00      	nop
 800e31e:	e7fe      	b.n	800e31e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e320:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <xTimerCreateStatic+0x4c>
	__asm volatile
 800e328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	617b      	str	r3, [r7, #20]
}
 800e33a:	bf00      	nop
 800e33c:	e7fe      	b.n	800e33c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00d      	beq.n	800e364 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	2202      	movs	r2, #2
 800e34c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	9301      	str	r3, [sp, #4]
 800e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	68b9      	ldr	r1, [r7, #8]
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f000 f805 	bl	800e36e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e364:	69fb      	ldr	r3, [r7, #28]
	}
 800e366:	4618      	mov	r0, r3
 800e368:	3720      	adds	r7, #32
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b086      	sub	sp, #24
 800e372:	af00      	add	r7, sp, #0
 800e374:	60f8      	str	r0, [r7, #12]
 800e376:	60b9      	str	r1, [r7, #8]
 800e378:	607a      	str	r2, [r7, #4]
 800e37a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d10a      	bne.n	800e398 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	617b      	str	r3, [r7, #20]
}
 800e394:	bf00      	nop
 800e396:	e7fe      	b.n	800e396 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d01e      	beq.n	800e3dc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e39e:	f000 fae7 	bl	800e970 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	68fa      	ldr	r2, [r7, #12]
 800e3a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b0:	683a      	ldr	r2, [r7, #0]
 800e3b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b6:	6a3a      	ldr	r2, [r7, #32]
 800e3b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3bc:	3304      	adds	r3, #4
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fd fd8e 	bl	800bee0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d008      	beq.n	800e3dc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3d0:	f043 0304 	orr.w	r3, r3, #4
 800e3d4:	b2da      	uxtb	r2, r3
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e3dc:	bf00      	nop
 800e3de:	3718      	adds	r7, #24
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b08a      	sub	sp, #40	; 0x28
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
 800e3f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10a      	bne.n	800e412 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	623b      	str	r3, [r7, #32]
}
 800e40e:	bf00      	nop
 800e410:	e7fe      	b.n	800e410 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e412:	4b1a      	ldr	r3, [pc, #104]	; (800e47c <xTimerGenericCommand+0x98>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d02a      	beq.n	800e470 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	2b05      	cmp	r3, #5
 800e42a:	dc18      	bgt.n	800e45e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e42c:	f7ff fd1a 	bl	800de64 <xTaskGetSchedulerState>
 800e430:	4603      	mov	r3, r0
 800e432:	2b02      	cmp	r3, #2
 800e434:	d109      	bne.n	800e44a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e436:	4b11      	ldr	r3, [pc, #68]	; (800e47c <xTimerGenericCommand+0x98>)
 800e438:	6818      	ldr	r0, [r3, #0]
 800e43a:	f107 0110 	add.w	r1, r7, #16
 800e43e:	2300      	movs	r3, #0
 800e440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e442:	f7fe f83f 	bl	800c4c4 <xQueueGenericSend>
 800e446:	6278      	str	r0, [r7, #36]	; 0x24
 800e448:	e012      	b.n	800e470 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e44a:	4b0c      	ldr	r3, [pc, #48]	; (800e47c <xTimerGenericCommand+0x98>)
 800e44c:	6818      	ldr	r0, [r3, #0]
 800e44e:	f107 0110 	add.w	r1, r7, #16
 800e452:	2300      	movs	r3, #0
 800e454:	2200      	movs	r2, #0
 800e456:	f7fe f835 	bl	800c4c4 <xQueueGenericSend>
 800e45a:	6278      	str	r0, [r7, #36]	; 0x24
 800e45c:	e008      	b.n	800e470 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e45e:	4b07      	ldr	r3, [pc, #28]	; (800e47c <xTimerGenericCommand+0x98>)
 800e460:	6818      	ldr	r0, [r3, #0]
 800e462:	f107 0110 	add.w	r1, r7, #16
 800e466:	2300      	movs	r3, #0
 800e468:	683a      	ldr	r2, [r7, #0]
 800e46a:	f7fe f929 	bl	800c6c0 <xQueueGenericSendFromISR>
 800e46e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e472:	4618      	mov	r0, r3
 800e474:	3728      	adds	r7, #40	; 0x28
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	20000e30 	.word	0x20000e30

0800e480 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b088      	sub	sp, #32
 800e484:	af02      	add	r7, sp, #8
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e48a:	4b22      	ldr	r3, [pc, #136]	; (800e514 <prvProcessExpiredTimer+0x94>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	3304      	adds	r3, #4
 800e498:	4618      	mov	r0, r3
 800e49a:	f7fd fd8b 	bl	800bfb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4a4:	f003 0304 	and.w	r3, r3, #4
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d022      	beq.n	800e4f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	699a      	ldr	r2, [r3, #24]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	18d1      	adds	r1, r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	6978      	ldr	r0, [r7, #20]
 800e4ba:	f000 f8d1 	bl	800e660 <prvInsertTimerInActiveList>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d01f      	beq.n	800e504 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	2100      	movs	r1, #0
 800e4ce:	6978      	ldr	r0, [r7, #20]
 800e4d0:	f7ff ff88 	bl	800e3e4 <xTimerGenericCommand>
 800e4d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d113      	bne.n	800e504 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e0:	f383 8811 	msr	BASEPRI, r3
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	60fb      	str	r3, [r7, #12]
}
 800e4ee:	bf00      	nop
 800e4f0:	e7fe      	b.n	800e4f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4f8:	f023 0301 	bic.w	r3, r3, #1
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	6a1b      	ldr	r3, [r3, #32]
 800e508:	6978      	ldr	r0, [r7, #20]
 800e50a:	4798      	blx	r3
}
 800e50c:	bf00      	nop
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	20000e28 	.word	0x20000e28

0800e518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e520:	f107 0308 	add.w	r3, r7, #8
 800e524:	4618      	mov	r0, r3
 800e526:	f000 f857 	bl	800e5d8 <prvGetNextExpireTime>
 800e52a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	4619      	mov	r1, r3
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f000 f803 	bl	800e53c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e536:	f000 f8d5 	bl	800e6e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e53a:	e7f1      	b.n	800e520 <prvTimerTask+0x8>

0800e53c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e546:	f7ff f87f 	bl	800d648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e54a:	f107 0308 	add.w	r3, r7, #8
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 f866 	bl	800e620 <prvSampleTimeNow>
 800e554:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d130      	bne.n	800e5be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d10a      	bne.n	800e578 <prvProcessTimerOrBlockTask+0x3c>
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	429a      	cmp	r2, r3
 800e568:	d806      	bhi.n	800e578 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e56a:	f7ff f87b 	bl	800d664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e56e:	68f9      	ldr	r1, [r7, #12]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7ff ff85 	bl	800e480 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e576:	e024      	b.n	800e5c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d008      	beq.n	800e590 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e57e:	4b13      	ldr	r3, [pc, #76]	; (800e5cc <prvProcessTimerOrBlockTask+0x90>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <prvProcessTimerOrBlockTask+0x50>
 800e588:	2301      	movs	r3, #1
 800e58a:	e000      	b.n	800e58e <prvProcessTimerOrBlockTask+0x52>
 800e58c:	2300      	movs	r3, #0
 800e58e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e590:	4b0f      	ldr	r3, [pc, #60]	; (800e5d0 <prvProcessTimerOrBlockTask+0x94>)
 800e592:	6818      	ldr	r0, [r3, #0]
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	4619      	mov	r1, r3
 800e59e:	f7fe fdc3 	bl	800d128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e5a2:	f7ff f85f 	bl	800d664 <xTaskResumeAll>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d10a      	bne.n	800e5c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e5ac:	4b09      	ldr	r3, [pc, #36]	; (800e5d4 <prvProcessTimerOrBlockTask+0x98>)
 800e5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5b2:	601a      	str	r2, [r3, #0]
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	f3bf 8f6f 	isb	sy
}
 800e5bc:	e001      	b.n	800e5c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e5be:	f7ff f851 	bl	800d664 <xTaskResumeAll>
}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	20000e2c 	.word	0x20000e2c
 800e5d0:	20000e30 	.word	0x20000e30
 800e5d4:	e000ed04 	.word	0xe000ed04

0800e5d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5e0:	4b0e      	ldr	r3, [pc, #56]	; (800e61c <prvGetNextExpireTime+0x44>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d101      	bne.n	800e5ee <prvGetNextExpireTime+0x16>
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	e000      	b.n	800e5f0 <prvGetNextExpireTime+0x18>
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d105      	bne.n	800e608 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5fc:	4b07      	ldr	r3, [pc, #28]	; (800e61c <prvGetNextExpireTime+0x44>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	e001      	b.n	800e60c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e608:	2300      	movs	r3, #0
 800e60a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e60c:	68fb      	ldr	r3, [r7, #12]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3714      	adds	r7, #20
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	20000e28 	.word	0x20000e28

0800e620 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e628:	f7ff f8ba 	bl	800d7a0 <xTaskGetTickCount>
 800e62c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e62e:	4b0b      	ldr	r3, [pc, #44]	; (800e65c <prvSampleTimeNow+0x3c>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	429a      	cmp	r2, r3
 800e636:	d205      	bcs.n	800e644 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e638:	f000 f936 	bl	800e8a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	601a      	str	r2, [r3, #0]
 800e642:	e002      	b.n	800e64a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e64a:	4a04      	ldr	r2, [pc, #16]	; (800e65c <prvSampleTimeNow+0x3c>)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e650:	68fb      	ldr	r3, [r7, #12]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	20000e38 	.word	0x20000e38

0800e660 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b086      	sub	sp, #24
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
 800e66c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e66e:	2300      	movs	r3, #0
 800e670:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	68ba      	ldr	r2, [r7, #8]
 800e676:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e67e:	68ba      	ldr	r2, [r7, #8]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	429a      	cmp	r2, r3
 800e684:	d812      	bhi.n	800e6ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	1ad2      	subs	r2, r2, r3
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	429a      	cmp	r2, r3
 800e692:	d302      	bcc.n	800e69a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e694:	2301      	movs	r3, #1
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	e01b      	b.n	800e6d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e69a:	4b10      	ldr	r3, [pc, #64]	; (800e6dc <prvInsertTimerInActiveList+0x7c>)
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	f7fd fc4c 	bl	800bf42 <vListInsert>
 800e6aa:	e012      	b.n	800e6d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d206      	bcs.n	800e6c2 <prvInsertTimerInActiveList+0x62>
 800e6b4:	68ba      	ldr	r2, [r7, #8]
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d302      	bcc.n	800e6c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	617b      	str	r3, [r7, #20]
 800e6c0:	e007      	b.n	800e6d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6c2:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <prvInsertTimerInActiveList+0x80>)
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	3304      	adds	r3, #4
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	4610      	mov	r0, r2
 800e6ce:	f7fd fc38 	bl	800bf42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e6d2:	697b      	ldr	r3, [r7, #20]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3718      	adds	r7, #24
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	20000e2c 	.word	0x20000e2c
 800e6e0:	20000e28 	.word	0x20000e28

0800e6e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b08e      	sub	sp, #56	; 0x38
 800e6e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6ea:	e0ca      	b.n	800e882 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	da18      	bge.n	800e724 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6f2:	1d3b      	adds	r3, r7, #4
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d10a      	bne.n	800e714 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	61fb      	str	r3, [r7, #28]
}
 800e710:	bf00      	nop
 800e712:	e7fe      	b.n	800e712 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e71a:	6850      	ldr	r0, [r2, #4]
 800e71c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e71e:	6892      	ldr	r2, [r2, #8]
 800e720:	4611      	mov	r1, r2
 800e722:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	f2c0 80aa 	blt.w	800e880 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e732:	695b      	ldr	r3, [r3, #20]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d004      	beq.n	800e742 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73a:	3304      	adds	r3, #4
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fd fc39 	bl	800bfb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e742:	463b      	mov	r3, r7
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff ff6b 	bl	800e620 <prvSampleTimeNow>
 800e74a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b09      	cmp	r3, #9
 800e750:	f200 8097 	bhi.w	800e882 <prvProcessReceivedCommands+0x19e>
 800e754:	a201      	add	r2, pc, #4	; (adr r2, 800e75c <prvProcessReceivedCommands+0x78>)
 800e756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e75a:	bf00      	nop
 800e75c:	0800e785 	.word	0x0800e785
 800e760:	0800e785 	.word	0x0800e785
 800e764:	0800e785 	.word	0x0800e785
 800e768:	0800e7f9 	.word	0x0800e7f9
 800e76c:	0800e80d 	.word	0x0800e80d
 800e770:	0800e857 	.word	0x0800e857
 800e774:	0800e785 	.word	0x0800e785
 800e778:	0800e785 	.word	0x0800e785
 800e77c:	0800e7f9 	.word	0x0800e7f9
 800e780:	0800e80d 	.word	0x0800e80d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e78a:	f043 0301 	orr.w	r3, r3, #1
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e796:	68ba      	ldr	r2, [r7, #8]
 800e798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79a:	699b      	ldr	r3, [r3, #24]
 800e79c:	18d1      	adds	r1, r2, r3
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7a4:	f7ff ff5c 	bl	800e660 <prvInsertTimerInActiveList>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d069      	beq.n	800e882 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b0:	6a1b      	ldr	r3, [r3, #32]
 800e7b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7bc:	f003 0304 	and.w	r3, r3, #4
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d05e      	beq.n	800e882 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c8:	699b      	ldr	r3, [r3, #24]
 800e7ca:	441a      	add	r2, r3
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7d6:	f7ff fe05 	bl	800e3e4 <xTimerGenericCommand>
 800e7da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d14f      	bne.n	800e882 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	61bb      	str	r3, [r7, #24]
}
 800e7f4:	bf00      	nop
 800e7f6:	e7fe      	b.n	800e7f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7fe:	f023 0301 	bic.w	r3, r3, #1
 800e802:	b2da      	uxtb	r2, r3
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e80a:	e03a      	b.n	800e882 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e812:	f043 0301 	orr.w	r3, r3, #1
 800e816:	b2da      	uxtb	r2, r3
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e822:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e826:	699b      	ldr	r3, [r3, #24]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d10a      	bne.n	800e842 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	617b      	str	r3, [r7, #20]
}
 800e83e:	bf00      	nop
 800e840:	e7fe      	b.n	800e840 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e844:	699a      	ldr	r2, [r3, #24]
 800e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e848:	18d1      	adds	r1, r2, r3
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e84e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e850:	f7ff ff06 	bl	800e660 <prvInsertTimerInActiveList>
					break;
 800e854:	e015      	b.n	800e882 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e85c:	f003 0302 	and.w	r3, r3, #2
 800e860:	2b00      	cmp	r3, #0
 800e862:	d103      	bne.n	800e86c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e866:	f000 fbfb 	bl	800f060 <vPortFree>
 800e86a:	e00a      	b.n	800e882 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e872:	f023 0301 	bic.w	r3, r3, #1
 800e876:	b2da      	uxtb	r2, r3
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e87e:	e000      	b.n	800e882 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e880:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e882:	4b08      	ldr	r3, [pc, #32]	; (800e8a4 <prvProcessReceivedCommands+0x1c0>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	1d39      	adds	r1, r7, #4
 800e888:	2200      	movs	r2, #0
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fe f840 	bl	800c910 <xQueueReceive>
 800e890:	4603      	mov	r3, r0
 800e892:	2b00      	cmp	r3, #0
 800e894:	f47f af2a 	bne.w	800e6ec <prvProcessReceivedCommands+0x8>
	}
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	3730      	adds	r7, #48	; 0x30
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	20000e30 	.word	0x20000e30

0800e8a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b088      	sub	sp, #32
 800e8ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8ae:	e048      	b.n	800e942 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8b0:	4b2d      	ldr	r3, [pc, #180]	; (800e968 <prvSwitchTimerLists+0xc0>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ba:	4b2b      	ldr	r3, [pc, #172]	; (800e968 <prvSwitchTimerLists+0xc0>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fd fb73 	bl	800bfb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6a1b      	ldr	r3, [r3, #32]
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8dc:	f003 0304 	and.w	r3, r3, #4
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d02e      	beq.n	800e942 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	693a      	ldr	r2, [r7, #16]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e8ee:	68ba      	ldr	r2, [r7, #8]
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d90e      	bls.n	800e914 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e902:	4b19      	ldr	r3, [pc, #100]	; (800e968 <prvSwitchTimerLists+0xc0>)
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	3304      	adds	r3, #4
 800e90a:	4619      	mov	r1, r3
 800e90c:	4610      	mov	r0, r2
 800e90e:	f7fd fb18 	bl	800bf42 <vListInsert>
 800e912:	e016      	b.n	800e942 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e914:	2300      	movs	r3, #0
 800e916:	9300      	str	r3, [sp, #0]
 800e918:	2300      	movs	r3, #0
 800e91a:	693a      	ldr	r2, [r7, #16]
 800e91c:	2100      	movs	r1, #0
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f7ff fd60 	bl	800e3e4 <xTimerGenericCommand>
 800e924:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10a      	bne.n	800e942 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e930:	f383 8811 	msr	BASEPRI, r3
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	603b      	str	r3, [r7, #0]
}
 800e93e:	bf00      	nop
 800e940:	e7fe      	b.n	800e940 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e942:	4b09      	ldr	r3, [pc, #36]	; (800e968 <prvSwitchTimerLists+0xc0>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1b1      	bne.n	800e8b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e94c:	4b06      	ldr	r3, [pc, #24]	; (800e968 <prvSwitchTimerLists+0xc0>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e952:	4b06      	ldr	r3, [pc, #24]	; (800e96c <prvSwitchTimerLists+0xc4>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a04      	ldr	r2, [pc, #16]	; (800e968 <prvSwitchTimerLists+0xc0>)
 800e958:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e95a:	4a04      	ldr	r2, [pc, #16]	; (800e96c <prvSwitchTimerLists+0xc4>)
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	6013      	str	r3, [r2, #0]
}
 800e960:	bf00      	nop
 800e962:	3718      	adds	r7, #24
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	20000e28 	.word	0x20000e28
 800e96c:	20000e2c 	.word	0x20000e2c

0800e970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e976:	f000 f985 	bl	800ec84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e97a:	4b15      	ldr	r3, [pc, #84]	; (800e9d0 <prvCheckForValidListAndQueue+0x60>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d120      	bne.n	800e9c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e982:	4814      	ldr	r0, [pc, #80]	; (800e9d4 <prvCheckForValidListAndQueue+0x64>)
 800e984:	f7fd fa8c 	bl	800bea0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e988:	4813      	ldr	r0, [pc, #76]	; (800e9d8 <prvCheckForValidListAndQueue+0x68>)
 800e98a:	f7fd fa89 	bl	800bea0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e98e:	4b13      	ldr	r3, [pc, #76]	; (800e9dc <prvCheckForValidListAndQueue+0x6c>)
 800e990:	4a10      	ldr	r2, [pc, #64]	; (800e9d4 <prvCheckForValidListAndQueue+0x64>)
 800e992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e994:	4b12      	ldr	r3, [pc, #72]	; (800e9e0 <prvCheckForValidListAndQueue+0x70>)
 800e996:	4a10      	ldr	r2, [pc, #64]	; (800e9d8 <prvCheckForValidListAndQueue+0x68>)
 800e998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e99a:	2300      	movs	r3, #0
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	4b11      	ldr	r3, [pc, #68]	; (800e9e4 <prvCheckForValidListAndQueue+0x74>)
 800e9a0:	4a11      	ldr	r2, [pc, #68]	; (800e9e8 <prvCheckForValidListAndQueue+0x78>)
 800e9a2:	2110      	movs	r1, #16
 800e9a4:	200a      	movs	r0, #10
 800e9a6:	f7fd fb97 	bl	800c0d8 <xQueueGenericCreateStatic>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	4a08      	ldr	r2, [pc, #32]	; (800e9d0 <prvCheckForValidListAndQueue+0x60>)
 800e9ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e9b0:	4b07      	ldr	r3, [pc, #28]	; (800e9d0 <prvCheckForValidListAndQueue+0x60>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d005      	beq.n	800e9c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e9b8:	4b05      	ldr	r3, [pc, #20]	; (800e9d0 <prvCheckForValidListAndQueue+0x60>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	490b      	ldr	r1, [pc, #44]	; (800e9ec <prvCheckForValidListAndQueue+0x7c>)
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fe fb5e 	bl	800d080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e9c4:	f000 f98e 	bl	800ece4 <vPortExitCritical>
}
 800e9c8:	bf00      	nop
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	20000e30 	.word	0x20000e30
 800e9d4:	20000e00 	.word	0x20000e00
 800e9d8:	20000e14 	.word	0x20000e14
 800e9dc:	20000e28 	.word	0x20000e28
 800e9e0:	20000e2c 	.word	0x20000e2c
 800e9e4:	20000edc 	.word	0x20000edc
 800e9e8:	20000e3c 	.word	0x20000e3c
 800e9ec:	0801e134 	.word	0x0801e134

0800e9f0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b086      	sub	sp, #24
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d10a      	bne.n	800ea18 <pvTimerGetTimerID+0x28>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	60fb      	str	r3, [r7, #12]
}
 800ea14:	bf00      	nop
 800ea16:	e7fe      	b.n	800ea16 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ea18:	f000 f934 	bl	800ec84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	69db      	ldr	r3, [r3, #28]
 800ea20:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ea22:	f000 f95f 	bl	800ece4 <vPortExitCritical>

	return pvReturn;
 800ea26:	693b      	ldr	r3, [r7, #16]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3718      	adds	r7, #24
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	3b04      	subs	r3, #4
 800ea40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	3b04      	subs	r3, #4
 800ea4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	f023 0201 	bic.w	r2, r3, #1
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	3b04      	subs	r3, #4
 800ea5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea60:	4a0c      	ldr	r2, [pc, #48]	; (800ea94 <pxPortInitialiseStack+0x64>)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	3b14      	subs	r3, #20
 800ea6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	3b04      	subs	r3, #4
 800ea76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f06f 0202 	mvn.w	r2, #2
 800ea7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	3b20      	subs	r3, #32
 800ea84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea86:	68fb      	ldr	r3, [r7, #12]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3714      	adds	r7, #20
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr
 800ea94:	0800ea99 	.word	0x0800ea99

0800ea98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eaa2:	4b12      	ldr	r3, [pc, #72]	; (800eaec <prvTaskExitError+0x54>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaaa:	d00a      	beq.n	800eac2 <prvTaskExitError+0x2a>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	60fb      	str	r3, [r7, #12]
}
 800eabe:	bf00      	nop
 800eac0:	e7fe      	b.n	800eac0 <prvTaskExitError+0x28>
	__asm volatile
 800eac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	60bb      	str	r3, [r7, #8]
}
 800ead4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ead6:	bf00      	nop
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d0fc      	beq.n	800ead8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eade:	bf00      	nop
 800eae0:	bf00      	nop
 800eae2:	3714      	adds	r7, #20
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	200000e0 	.word	0x200000e0

0800eaf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eaf0:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <pxCurrentTCBConst2>)
 800eaf2:	6819      	ldr	r1, [r3, #0]
 800eaf4:	6808      	ldr	r0, [r1, #0]
 800eaf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eafa:	f380 8809 	msr	PSP, r0
 800eafe:	f3bf 8f6f 	isb	sy
 800eb02:	f04f 0000 	mov.w	r0, #0
 800eb06:	f380 8811 	msr	BASEPRI, r0
 800eb0a:	4770      	bx	lr
 800eb0c:	f3af 8000 	nop.w

0800eb10 <pxCurrentTCBConst2>:
 800eb10:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eb14:	bf00      	nop
 800eb16:	bf00      	nop

0800eb18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb18:	4808      	ldr	r0, [pc, #32]	; (800eb3c <prvPortStartFirstTask+0x24>)
 800eb1a:	6800      	ldr	r0, [r0, #0]
 800eb1c:	6800      	ldr	r0, [r0, #0]
 800eb1e:	f380 8808 	msr	MSP, r0
 800eb22:	f04f 0000 	mov.w	r0, #0
 800eb26:	f380 8814 	msr	CONTROL, r0
 800eb2a:	b662      	cpsie	i
 800eb2c:	b661      	cpsie	f
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	df00      	svc	0
 800eb38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eb3a:	bf00      	nop
 800eb3c:	e000ed08 	.word	0xe000ed08

0800eb40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eb46:	4b46      	ldr	r3, [pc, #280]	; (800ec60 <xPortStartScheduler+0x120>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4a46      	ldr	r2, [pc, #280]	; (800ec64 <xPortStartScheduler+0x124>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d10a      	bne.n	800eb66 <xPortStartScheduler+0x26>
	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	613b      	str	r3, [r7, #16]
}
 800eb62:	bf00      	nop
 800eb64:	e7fe      	b.n	800eb64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb66:	4b3e      	ldr	r3, [pc, #248]	; (800ec60 <xPortStartScheduler+0x120>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a3f      	ldr	r2, [pc, #252]	; (800ec68 <xPortStartScheduler+0x128>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d10a      	bne.n	800eb86 <xPortStartScheduler+0x46>
	__asm volatile
 800eb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb74:	f383 8811 	msr	BASEPRI, r3
 800eb78:	f3bf 8f6f 	isb	sy
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	60fb      	str	r3, [r7, #12]
}
 800eb82:	bf00      	nop
 800eb84:	e7fe      	b.n	800eb84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb86:	4b39      	ldr	r3, [pc, #228]	; (800ec6c <xPortStartScheduler+0x12c>)
 800eb88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	22ff      	movs	r2, #255	; 0xff
 800eb96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eba0:	78fb      	ldrb	r3, [r7, #3]
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eba8:	b2da      	uxtb	r2, r3
 800ebaa:	4b31      	ldr	r3, [pc, #196]	; (800ec70 <xPortStartScheduler+0x130>)
 800ebac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ebae:	4b31      	ldr	r3, [pc, #196]	; (800ec74 <xPortStartScheduler+0x134>)
 800ebb0:	2207      	movs	r2, #7
 800ebb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebb4:	e009      	b.n	800ebca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ebb6:	4b2f      	ldr	r3, [pc, #188]	; (800ec74 <xPortStartScheduler+0x134>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	4a2d      	ldr	r2, [pc, #180]	; (800ec74 <xPortStartScheduler+0x134>)
 800ebbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ebc0:	78fb      	ldrb	r3, [r7, #3]
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	005b      	lsls	r3, r3, #1
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebca:	78fb      	ldrb	r3, [r7, #3]
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebd2:	2b80      	cmp	r3, #128	; 0x80
 800ebd4:	d0ef      	beq.n	800ebb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ebd6:	4b27      	ldr	r3, [pc, #156]	; (800ec74 <xPortStartScheduler+0x134>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f1c3 0307 	rsb	r3, r3, #7
 800ebde:	2b04      	cmp	r3, #4
 800ebe0:	d00a      	beq.n	800ebf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ebe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe6:	f383 8811 	msr	BASEPRI, r3
 800ebea:	f3bf 8f6f 	isb	sy
 800ebee:	f3bf 8f4f 	dsb	sy
 800ebf2:	60bb      	str	r3, [r7, #8]
}
 800ebf4:	bf00      	nop
 800ebf6:	e7fe      	b.n	800ebf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ebf8:	4b1e      	ldr	r3, [pc, #120]	; (800ec74 <xPortStartScheduler+0x134>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	021b      	lsls	r3, r3, #8
 800ebfe:	4a1d      	ldr	r2, [pc, #116]	; (800ec74 <xPortStartScheduler+0x134>)
 800ec00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec02:	4b1c      	ldr	r3, [pc, #112]	; (800ec74 <xPortStartScheduler+0x134>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec0a:	4a1a      	ldr	r2, [pc, #104]	; (800ec74 <xPortStartScheduler+0x134>)
 800ec0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	b2da      	uxtb	r2, r3
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ec16:	4b18      	ldr	r3, [pc, #96]	; (800ec78 <xPortStartScheduler+0x138>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4a17      	ldr	r2, [pc, #92]	; (800ec78 <xPortStartScheduler+0x138>)
 800ec1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ec22:	4b15      	ldr	r3, [pc, #84]	; (800ec78 <xPortStartScheduler+0x138>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4a14      	ldr	r2, [pc, #80]	; (800ec78 <xPortStartScheduler+0x138>)
 800ec28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ec2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ec2e:	f000 f8dd 	bl	800edec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ec32:	4b12      	ldr	r3, [pc, #72]	; (800ec7c <xPortStartScheduler+0x13c>)
 800ec34:	2200      	movs	r2, #0
 800ec36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ec38:	f000 f8fc 	bl	800ee34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ec3c:	4b10      	ldr	r3, [pc, #64]	; (800ec80 <xPortStartScheduler+0x140>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a0f      	ldr	r2, [pc, #60]	; (800ec80 <xPortStartScheduler+0x140>)
 800ec42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ec48:	f7ff ff66 	bl	800eb18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ec4c:	f7fe fe84 	bl	800d958 <vTaskSwitchContext>
	prvTaskExitError();
 800ec50:	f7ff ff22 	bl	800ea98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3718      	adds	r7, #24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	e000ed00 	.word	0xe000ed00
 800ec64:	410fc271 	.word	0x410fc271
 800ec68:	410fc270 	.word	0x410fc270
 800ec6c:	e000e400 	.word	0xe000e400
 800ec70:	20000f2c 	.word	0x20000f2c
 800ec74:	20000f30 	.word	0x20000f30
 800ec78:	e000ed20 	.word	0xe000ed20
 800ec7c:	200000e0 	.word	0x200000e0
 800ec80:	e000ef34 	.word	0xe000ef34

0800ec84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
	__asm volatile
 800ec8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8e:	f383 8811 	msr	BASEPRI, r3
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	f3bf 8f4f 	dsb	sy
 800ec9a:	607b      	str	r3, [r7, #4]
}
 800ec9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec9e:	4b0f      	ldr	r3, [pc, #60]	; (800ecdc <vPortEnterCritical+0x58>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	3301      	adds	r3, #1
 800eca4:	4a0d      	ldr	r2, [pc, #52]	; (800ecdc <vPortEnterCritical+0x58>)
 800eca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eca8:	4b0c      	ldr	r3, [pc, #48]	; (800ecdc <vPortEnterCritical+0x58>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d10f      	bne.n	800ecd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ecb0:	4b0b      	ldr	r3, [pc, #44]	; (800ece0 <vPortEnterCritical+0x5c>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00a      	beq.n	800ecd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	603b      	str	r3, [r7, #0]
}
 800eccc:	bf00      	nop
 800ecce:	e7fe      	b.n	800ecce <vPortEnterCritical+0x4a>
	}
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	200000e0 	.word	0x200000e0
 800ece0:	e000ed04 	.word	0xe000ed04

0800ece4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ecea:	4b12      	ldr	r3, [pc, #72]	; (800ed34 <vPortExitCritical+0x50>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10a      	bne.n	800ed08 <vPortExitCritical+0x24>
	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	607b      	str	r3, [r7, #4]
}
 800ed04:	bf00      	nop
 800ed06:	e7fe      	b.n	800ed06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ed08:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <vPortExitCritical+0x50>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	4a09      	ldr	r2, [pc, #36]	; (800ed34 <vPortExitCritical+0x50>)
 800ed10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ed12:	4b08      	ldr	r3, [pc, #32]	; (800ed34 <vPortExitCritical+0x50>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d105      	bne.n	800ed26 <vPortExitCritical+0x42>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	f383 8811 	msr	BASEPRI, r3
}
 800ed24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ed26:	bf00      	nop
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	200000e0 	.word	0x200000e0
	...

0800ed40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ed40:	f3ef 8009 	mrs	r0, PSP
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	4b15      	ldr	r3, [pc, #84]	; (800eda0 <pxCurrentTCBConst>)
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	f01e 0f10 	tst.w	lr, #16
 800ed50:	bf08      	it	eq
 800ed52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed5a:	6010      	str	r0, [r2, #0]
 800ed5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed64:	f380 8811 	msr	BASEPRI, r0
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	f3bf 8f6f 	isb	sy
 800ed70:	f7fe fdf2 	bl	800d958 <vTaskSwitchContext>
 800ed74:	f04f 0000 	mov.w	r0, #0
 800ed78:	f380 8811 	msr	BASEPRI, r0
 800ed7c:	bc09      	pop	{r0, r3}
 800ed7e:	6819      	ldr	r1, [r3, #0]
 800ed80:	6808      	ldr	r0, [r1, #0]
 800ed82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed86:	f01e 0f10 	tst.w	lr, #16
 800ed8a:	bf08      	it	eq
 800ed8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed90:	f380 8809 	msr	PSP, r0
 800ed94:	f3bf 8f6f 	isb	sy
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	f3af 8000 	nop.w

0800eda0 <pxCurrentTCBConst>:
 800eda0:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eda4:	bf00      	nop
 800eda6:	bf00      	nop

0800eda8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
	__asm volatile
 800edae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb2:	f383 8811 	msr	BASEPRI, r3
 800edb6:	f3bf 8f6f 	isb	sy
 800edba:	f3bf 8f4f 	dsb	sy
 800edbe:	607b      	str	r3, [r7, #4]
}
 800edc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800edc2:	f7fe fd0f 	bl	800d7e4 <xTaskIncrementTick>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d003      	beq.n	800edd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800edcc:	4b06      	ldr	r3, [pc, #24]	; (800ede8 <xPortSysTickHandler+0x40>)
 800edce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edd2:	601a      	str	r2, [r3, #0]
 800edd4:	2300      	movs	r3, #0
 800edd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	f383 8811 	msr	BASEPRI, r3
}
 800edde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ede0:	bf00      	nop
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	e000ed04 	.word	0xe000ed04

0800edec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800edec:	b480      	push	{r7}
 800edee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800edf0:	4b0b      	ldr	r3, [pc, #44]	; (800ee20 <vPortSetupTimerInterrupt+0x34>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800edf6:	4b0b      	ldr	r3, [pc, #44]	; (800ee24 <vPortSetupTimerInterrupt+0x38>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800edfc:	4b0a      	ldr	r3, [pc, #40]	; (800ee28 <vPortSetupTimerInterrupt+0x3c>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a0a      	ldr	r2, [pc, #40]	; (800ee2c <vPortSetupTimerInterrupt+0x40>)
 800ee02:	fba2 2303 	umull	r2, r3, r2, r3
 800ee06:	099b      	lsrs	r3, r3, #6
 800ee08:	4a09      	ldr	r2, [pc, #36]	; (800ee30 <vPortSetupTimerInterrupt+0x44>)
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ee0e:	4b04      	ldr	r3, [pc, #16]	; (800ee20 <vPortSetupTimerInterrupt+0x34>)
 800ee10:	2207      	movs	r2, #7
 800ee12:	601a      	str	r2, [r3, #0]
}
 800ee14:	bf00      	nop
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	e000e010 	.word	0xe000e010
 800ee24:	e000e018 	.word	0xe000e018
 800ee28:	20000000 	.word	0x20000000
 800ee2c:	10624dd3 	.word	0x10624dd3
 800ee30:	e000e014 	.word	0xe000e014

0800ee34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ee34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ee44 <vPortEnableVFP+0x10>
 800ee38:	6801      	ldr	r1, [r0, #0]
 800ee3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ee3e:	6001      	str	r1, [r0, #0]
 800ee40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ee42:	bf00      	nop
 800ee44:	e000ed88 	.word	0xe000ed88

0800ee48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee4e:	f3ef 8305 	mrs	r3, IPSR
 800ee52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2b0f      	cmp	r3, #15
 800ee58:	d914      	bls.n	800ee84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee5a:	4a17      	ldr	r2, [pc, #92]	; (800eeb8 <vPortValidateInterruptPriority+0x70>)
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	4413      	add	r3, r2
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee64:	4b15      	ldr	r3, [pc, #84]	; (800eebc <vPortValidateInterruptPriority+0x74>)
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	7afa      	ldrb	r2, [r7, #11]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d20a      	bcs.n	800ee84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ee6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	607b      	str	r3, [r7, #4]
}
 800ee80:	bf00      	nop
 800ee82:	e7fe      	b.n	800ee82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee84:	4b0e      	ldr	r3, [pc, #56]	; (800eec0 <vPortValidateInterruptPriority+0x78>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee8c:	4b0d      	ldr	r3, [pc, #52]	; (800eec4 <vPortValidateInterruptPriority+0x7c>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d90a      	bls.n	800eeaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	603b      	str	r3, [r7, #0]
}
 800eea6:	bf00      	nop
 800eea8:	e7fe      	b.n	800eea8 <vPortValidateInterruptPriority+0x60>
	}
 800eeaa:	bf00      	nop
 800eeac:	3714      	adds	r7, #20
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	e000e3f0 	.word	0xe000e3f0
 800eebc:	20000f2c 	.word	0x20000f2c
 800eec0:	e000ed0c 	.word	0xe000ed0c
 800eec4:	20000f30 	.word	0x20000f30

0800eec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b08a      	sub	sp, #40	; 0x28
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eed0:	2300      	movs	r3, #0
 800eed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eed4:	f7fe fbb8 	bl	800d648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eed8:	4b5b      	ldr	r3, [pc, #364]	; (800f048 <pvPortMalloc+0x180>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d101      	bne.n	800eee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eee0:	f000 f920 	bl	800f124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eee4:	4b59      	ldr	r3, [pc, #356]	; (800f04c <pvPortMalloc+0x184>)
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4013      	ands	r3, r2
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	f040 8093 	bne.w	800f018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d01d      	beq.n	800ef34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eef8:	2208      	movs	r2, #8
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4413      	add	r3, r2
 800eefe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f003 0307 	and.w	r3, r3, #7
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d014      	beq.n	800ef34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f023 0307 	bic.w	r3, r3, #7
 800ef10:	3308      	adds	r3, #8
 800ef12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f003 0307 	and.w	r3, r3, #7
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00a      	beq.n	800ef34 <pvPortMalloc+0x6c>
	__asm volatile
 800ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	617b      	str	r3, [r7, #20]
}
 800ef30:	bf00      	nop
 800ef32:	e7fe      	b.n	800ef32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d06e      	beq.n	800f018 <pvPortMalloc+0x150>
 800ef3a:	4b45      	ldr	r3, [pc, #276]	; (800f050 <pvPortMalloc+0x188>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d869      	bhi.n	800f018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ef44:	4b43      	ldr	r3, [pc, #268]	; (800f054 <pvPortMalloc+0x18c>)
 800ef46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ef48:	4b42      	ldr	r3, [pc, #264]	; (800f054 <pvPortMalloc+0x18c>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef4e:	e004      	b.n	800ef5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d903      	bls.n	800ef6c <pvPortMalloc+0xa4>
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1f1      	bne.n	800ef50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef6c:	4b36      	ldr	r3, [pc, #216]	; (800f048 <pvPortMalloc+0x180>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d050      	beq.n	800f018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef76:	6a3b      	ldr	r3, [r7, #32]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2208      	movs	r2, #8
 800ef7c:	4413      	add	r3, r2
 800ef7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	6a3b      	ldr	r3, [r7, #32]
 800ef86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8a:	685a      	ldr	r2, [r3, #4]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	1ad2      	subs	r2, r2, r3
 800ef90:	2308      	movs	r3, #8
 800ef92:	005b      	lsls	r3, r3, #1
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d91f      	bls.n	800efd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4413      	add	r3, r2
 800ef9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	f003 0307 	and.w	r3, r3, #7
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d00a      	beq.n	800efc0 <pvPortMalloc+0xf8>
	__asm volatile
 800efaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efae:	f383 8811 	msr	BASEPRI, r3
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	613b      	str	r3, [r7, #16]
}
 800efbc:	bf00      	nop
 800efbe:	e7fe      	b.n	800efbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	685a      	ldr	r2, [r3, #4]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	1ad2      	subs	r2, r2, r3
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800efd2:	69b8      	ldr	r0, [r7, #24]
 800efd4:	f000 f908 	bl	800f1e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800efd8:	4b1d      	ldr	r3, [pc, #116]	; (800f050 <pvPortMalloc+0x188>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	4a1b      	ldr	r2, [pc, #108]	; (800f050 <pvPortMalloc+0x188>)
 800efe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800efe6:	4b1a      	ldr	r3, [pc, #104]	; (800f050 <pvPortMalloc+0x188>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	4b1b      	ldr	r3, [pc, #108]	; (800f058 <pvPortMalloc+0x190>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d203      	bcs.n	800effa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eff2:	4b17      	ldr	r3, [pc, #92]	; (800f050 <pvPortMalloc+0x188>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4a18      	ldr	r2, [pc, #96]	; (800f058 <pvPortMalloc+0x190>)
 800eff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800effa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effc:	685a      	ldr	r2, [r3, #4]
 800effe:	4b13      	ldr	r3, [pc, #76]	; (800f04c <pvPortMalloc+0x184>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	431a      	orrs	r2, r3
 800f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	2200      	movs	r2, #0
 800f00c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f00e:	4b13      	ldr	r3, [pc, #76]	; (800f05c <pvPortMalloc+0x194>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	3301      	adds	r3, #1
 800f014:	4a11      	ldr	r2, [pc, #68]	; (800f05c <pvPortMalloc+0x194>)
 800f016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f018:	f7fe fb24 	bl	800d664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f01c:	69fb      	ldr	r3, [r7, #28]
 800f01e:	f003 0307 	and.w	r3, r3, #7
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00a      	beq.n	800f03c <pvPortMalloc+0x174>
	__asm volatile
 800f026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02a:	f383 8811 	msr	BASEPRI, r3
 800f02e:	f3bf 8f6f 	isb	sy
 800f032:	f3bf 8f4f 	dsb	sy
 800f036:	60fb      	str	r3, [r7, #12]
}
 800f038:	bf00      	nop
 800f03a:	e7fe      	b.n	800f03a <pvPortMalloc+0x172>
	return pvReturn;
 800f03c:	69fb      	ldr	r3, [r7, #28]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3728      	adds	r7, #40	; 0x28
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	2000af3c 	.word	0x2000af3c
 800f04c:	2000af50 	.word	0x2000af50
 800f050:	2000af40 	.word	0x2000af40
 800f054:	2000af34 	.word	0x2000af34
 800f058:	2000af44 	.word	0x2000af44
 800f05c:	2000af48 	.word	0x2000af48

0800f060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d04d      	beq.n	800f10e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f072:	2308      	movs	r3, #8
 800f074:	425b      	negs	r3, r3
 800f076:	697a      	ldr	r2, [r7, #20]
 800f078:	4413      	add	r3, r2
 800f07a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	685a      	ldr	r2, [r3, #4]
 800f084:	4b24      	ldr	r3, [pc, #144]	; (800f118 <vPortFree+0xb8>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4013      	ands	r3, r2
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10a      	bne.n	800f0a4 <vPortFree+0x44>
	__asm volatile
 800f08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	60fb      	str	r3, [r7, #12]
}
 800f0a0:	bf00      	nop
 800f0a2:	e7fe      	b.n	800f0a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00a      	beq.n	800f0c2 <vPortFree+0x62>
	__asm volatile
 800f0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b0:	f383 8811 	msr	BASEPRI, r3
 800f0b4:	f3bf 8f6f 	isb	sy
 800f0b8:	f3bf 8f4f 	dsb	sy
 800f0bc:	60bb      	str	r3, [r7, #8]
}
 800f0be:	bf00      	nop
 800f0c0:	e7fe      	b.n	800f0c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	685a      	ldr	r2, [r3, #4]
 800f0c6:	4b14      	ldr	r3, [pc, #80]	; (800f118 <vPortFree+0xb8>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d01e      	beq.n	800f10e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d11a      	bne.n	800f10e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	685a      	ldr	r2, [r3, #4]
 800f0dc:	4b0e      	ldr	r3, [pc, #56]	; (800f118 <vPortFree+0xb8>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	43db      	mvns	r3, r3
 800f0e2:	401a      	ands	r2, r3
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f0e8:	f7fe faae 	bl	800d648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	4b0a      	ldr	r3, [pc, #40]	; (800f11c <vPortFree+0xbc>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	4a09      	ldr	r2, [pc, #36]	; (800f11c <vPortFree+0xbc>)
 800f0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f0fa:	6938      	ldr	r0, [r7, #16]
 800f0fc:	f000 f874 	bl	800f1e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f100:	4b07      	ldr	r3, [pc, #28]	; (800f120 <vPortFree+0xc0>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	3301      	adds	r3, #1
 800f106:	4a06      	ldr	r2, [pc, #24]	; (800f120 <vPortFree+0xc0>)
 800f108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f10a:	f7fe faab 	bl	800d664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f10e:	bf00      	nop
 800f110:	3718      	adds	r7, #24
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	2000af50 	.word	0x2000af50
 800f11c:	2000af40 	.word	0x2000af40
 800f120:	2000af4c 	.word	0x2000af4c

0800f124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f12a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800f12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f130:	4b27      	ldr	r3, [pc, #156]	; (800f1d0 <prvHeapInit+0xac>)
 800f132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f003 0307 	and.w	r3, r3, #7
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00c      	beq.n	800f158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	3307      	adds	r3, #7
 800f142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f023 0307 	bic.w	r3, r3, #7
 800f14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	4a1f      	ldr	r2, [pc, #124]	; (800f1d0 <prvHeapInit+0xac>)
 800f154:	4413      	add	r3, r2
 800f156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f15c:	4a1d      	ldr	r2, [pc, #116]	; (800f1d4 <prvHeapInit+0xb0>)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f162:	4b1c      	ldr	r3, [pc, #112]	; (800f1d4 <prvHeapInit+0xb0>)
 800f164:	2200      	movs	r2, #0
 800f166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	4413      	add	r3, r2
 800f16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f170:	2208      	movs	r2, #8
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	1a9b      	subs	r3, r3, r2
 800f176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f023 0307 	bic.w	r3, r3, #7
 800f17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	4a15      	ldr	r2, [pc, #84]	; (800f1d8 <prvHeapInit+0xb4>)
 800f184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f186:	4b14      	ldr	r3, [pc, #80]	; (800f1d8 <prvHeapInit+0xb4>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2200      	movs	r2, #0
 800f18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f18e:	4b12      	ldr	r3, [pc, #72]	; (800f1d8 <prvHeapInit+0xb4>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2200      	movs	r2, #0
 800f194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	1ad2      	subs	r2, r2, r3
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f1a4:	4b0c      	ldr	r3, [pc, #48]	; (800f1d8 <prvHeapInit+0xb4>)
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	4a0a      	ldr	r2, [pc, #40]	; (800f1dc <prvHeapInit+0xb8>)
 800f1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	4a09      	ldr	r2, [pc, #36]	; (800f1e0 <prvHeapInit+0xbc>)
 800f1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f1bc:	4b09      	ldr	r3, [pc, #36]	; (800f1e4 <prvHeapInit+0xc0>)
 800f1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f1c2:	601a      	str	r2, [r3, #0]
}
 800f1c4:	bf00      	nop
 800f1c6:	3714      	adds	r7, #20
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	20000f34 	.word	0x20000f34
 800f1d4:	2000af34 	.word	0x2000af34
 800f1d8:	2000af3c 	.word	0x2000af3c
 800f1dc:	2000af44 	.word	0x2000af44
 800f1e0:	2000af40 	.word	0x2000af40
 800f1e4:	2000af50 	.word	0x2000af50

0800f1e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1f0:	4b28      	ldr	r3, [pc, #160]	; (800f294 <prvInsertBlockIntoFreeList+0xac>)
 800f1f2:	60fb      	str	r3, [r7, #12]
 800f1f4:	e002      	b.n	800f1fc <prvInsertBlockIntoFreeList+0x14>
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	60fb      	str	r3, [r7, #12]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	429a      	cmp	r2, r3
 800f204:	d8f7      	bhi.n	800f1f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	4413      	add	r3, r2
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	429a      	cmp	r2, r3
 800f216:	d108      	bne.n	800f22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	685a      	ldr	r2, [r3, #4]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	441a      	add	r2, r3
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	68ba      	ldr	r2, [r7, #8]
 800f234:	441a      	add	r2, r3
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d118      	bne.n	800f270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	4b15      	ldr	r3, [pc, #84]	; (800f298 <prvInsertBlockIntoFreeList+0xb0>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	429a      	cmp	r2, r3
 800f248:	d00d      	beq.n	800f266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	441a      	add	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	601a      	str	r2, [r3, #0]
 800f264:	e008      	b.n	800f278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f266:	4b0c      	ldr	r3, [pc, #48]	; (800f298 <prvInsertBlockIntoFreeList+0xb0>)
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	e003      	b.n	800f278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681a      	ldr	r2, [r3, #0]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d002      	beq.n	800f286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f286:	bf00      	nop
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	2000af34 	.word	0x2000af34
 800f298:	2000af3c 	.word	0x2000af3c

0800f29c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f2a6:	f007 fa97 	bl	80167d8 <sys_timeouts_sleeptime>
 800f2aa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b2:	d10b      	bne.n	800f2cc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f2b4:	4813      	ldr	r0, [pc, #76]	; (800f304 <tcpip_timeouts_mbox_fetch+0x68>)
 800f2b6:	f00c f99e 	bl	801b5f6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f00c f926 	bl	801b510 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f2c4:	480f      	ldr	r0, [pc, #60]	; (800f304 <tcpip_timeouts_mbox_fetch+0x68>)
 800f2c6:	f00c f987 	bl	801b5d8 <sys_mutex_lock>
    return;
 800f2ca:	e018      	b.n	800f2fe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d102      	bne.n	800f2d8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f2d2:	f007 fa47 	bl	8016764 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f2d6:	e7e6      	b.n	800f2a6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f2d8:	480a      	ldr	r0, [pc, #40]	; (800f304 <tcpip_timeouts_mbox_fetch+0x68>)
 800f2da:	f00c f98c 	bl	801b5f6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f2de:	68fa      	ldr	r2, [r7, #12]
 800f2e0:	6839      	ldr	r1, [r7, #0]
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f00c f914 	bl	801b510 <sys_arch_mbox_fetch>
 800f2e8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f2ea:	4806      	ldr	r0, [pc, #24]	; (800f304 <tcpip_timeouts_mbox_fetch+0x68>)
 800f2ec:	f00c f974 	bl	801b5d8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f6:	d102      	bne.n	800f2fe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f2f8:	f007 fa34 	bl	8016764 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f2fc:	e7d3      	b.n	800f2a6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	200102bc 	.word	0x200102bc

0800f308 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f310:	4810      	ldr	r0, [pc, #64]	; (800f354 <tcpip_thread+0x4c>)
 800f312:	f00c f961 	bl	801b5d8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f316:	4b10      	ldr	r3, [pc, #64]	; (800f358 <tcpip_thread+0x50>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d005      	beq.n	800f32a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f31e:	4b0e      	ldr	r3, [pc, #56]	; (800f358 <tcpip_thread+0x50>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4a0e      	ldr	r2, [pc, #56]	; (800f35c <tcpip_thread+0x54>)
 800f324:	6812      	ldr	r2, [r2, #0]
 800f326:	4610      	mov	r0, r2
 800f328:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f32a:	f107 030c 	add.w	r3, r7, #12
 800f32e:	4619      	mov	r1, r3
 800f330:	480b      	ldr	r0, [pc, #44]	; (800f360 <tcpip_thread+0x58>)
 800f332:	f7ff ffb3 	bl	800f29c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d106      	bne.n	800f34a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f33c:	4b09      	ldr	r3, [pc, #36]	; (800f364 <tcpip_thread+0x5c>)
 800f33e:	2291      	movs	r2, #145	; 0x91
 800f340:	4909      	ldr	r1, [pc, #36]	; (800f368 <tcpip_thread+0x60>)
 800f342:	480a      	ldr	r0, [pc, #40]	; (800f36c <tcpip_thread+0x64>)
 800f344:	f00d fd0c 	bl	801cd60 <iprintf>
      continue;
 800f348:	e003      	b.n	800f352 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f000 f80f 	bl	800f370 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f352:	e7ea      	b.n	800f32a <tcpip_thread+0x22>
 800f354:	200102bc 	.word	0x200102bc
 800f358:	2000af54 	.word	0x2000af54
 800f35c:	2000af58 	.word	0x2000af58
 800f360:	2000af5c 	.word	0x2000af5c
 800f364:	0801e13c 	.word	0x0801e13c
 800f368:	0801e16c 	.word	0x0801e16c
 800f36c:	0801e18c 	.word	0x0801e18c

0800f370 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d026      	beq.n	800f3ce <tcpip_thread_handle_msg+0x5e>
 800f380:	2b02      	cmp	r3, #2
 800f382:	dc2b      	bgt.n	800f3dc <tcpip_thread_handle_msg+0x6c>
 800f384:	2b00      	cmp	r3, #0
 800f386:	d002      	beq.n	800f38e <tcpip_thread_handle_msg+0x1e>
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d015      	beq.n	800f3b8 <tcpip_thread_handle_msg+0x48>
 800f38c:	e026      	b.n	800f3dc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	6850      	ldr	r0, [r2, #4]
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	6892      	ldr	r2, [r2, #8]
 800f39a:	4611      	mov	r1, r2
 800f39c:	4798      	blx	r3
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d004      	beq.n	800f3ae <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f001 fcd1 	bl	8010d50 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f3ae:	6879      	ldr	r1, [r7, #4]
 800f3b0:	2009      	movs	r0, #9
 800f3b2:	f000 fe1d 	bl	800fff0 <memp_free>
      break;
 800f3b6:	e018      	b.n	800f3ea <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	687a      	ldr	r2, [r7, #4]
 800f3be:	6892      	ldr	r2, [r2, #8]
 800f3c0:	4610      	mov	r0, r2
 800f3c2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f3c4:	6879      	ldr	r1, [r7, #4]
 800f3c6:	2008      	movs	r0, #8
 800f3c8:	f000 fe12 	bl	800fff0 <memp_free>
      break;
 800f3cc:	e00d      	b.n	800f3ea <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	6892      	ldr	r2, [r2, #8]
 800f3d6:	4610      	mov	r0, r2
 800f3d8:	4798      	blx	r3
      break;
 800f3da:	e006      	b.n	800f3ea <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f3dc:	4b05      	ldr	r3, [pc, #20]	; (800f3f4 <tcpip_thread_handle_msg+0x84>)
 800f3de:	22cf      	movs	r2, #207	; 0xcf
 800f3e0:	4905      	ldr	r1, [pc, #20]	; (800f3f8 <tcpip_thread_handle_msg+0x88>)
 800f3e2:	4806      	ldr	r0, [pc, #24]	; (800f3fc <tcpip_thread_handle_msg+0x8c>)
 800f3e4:	f00d fcbc 	bl	801cd60 <iprintf>
      break;
 800f3e8:	bf00      	nop
  }
}
 800f3ea:	bf00      	nop
 800f3ec:	3708      	adds	r7, #8
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	0801e13c 	.word	0x0801e13c
 800f3f8:	0801e16c 	.word	0x0801e16c
 800f3fc:	0801e18c 	.word	0x0801e18c

0800f400 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f40c:	481a      	ldr	r0, [pc, #104]	; (800f478 <tcpip_inpkt+0x78>)
 800f40e:	f00c f8b0 	bl	801b572 <sys_mbox_valid>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d105      	bne.n	800f424 <tcpip_inpkt+0x24>
 800f418:	4b18      	ldr	r3, [pc, #96]	; (800f47c <tcpip_inpkt+0x7c>)
 800f41a:	22fc      	movs	r2, #252	; 0xfc
 800f41c:	4918      	ldr	r1, [pc, #96]	; (800f480 <tcpip_inpkt+0x80>)
 800f41e:	4819      	ldr	r0, [pc, #100]	; (800f484 <tcpip_inpkt+0x84>)
 800f420:	f00d fc9e 	bl	801cd60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f424:	2009      	movs	r0, #9
 800f426:	f000 fd91 	bl	800ff4c <memp_malloc>
 800f42a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d102      	bne.n	800f438 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f432:	f04f 33ff 	mov.w	r3, #4294967295
 800f436:	e01a      	b.n	800f46e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	2200      	movs	r2, #0
 800f43c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	68fa      	ldr	r2, [r7, #12]
 800f442:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	68ba      	ldr	r2, [r7, #8]
 800f448:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	687a      	ldr	r2, [r7, #4]
 800f44e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f450:	6979      	ldr	r1, [r7, #20]
 800f452:	4809      	ldr	r0, [pc, #36]	; (800f478 <tcpip_inpkt+0x78>)
 800f454:	f00c f842 	bl	801b4dc <sys_mbox_trypost>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d006      	beq.n	800f46c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f45e:	6979      	ldr	r1, [r7, #20]
 800f460:	2009      	movs	r0, #9
 800f462:	f000 fdc5 	bl	800fff0 <memp_free>
    return ERR_MEM;
 800f466:	f04f 33ff 	mov.w	r3, #4294967295
 800f46a:	e000      	b.n	800f46e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f46c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3718      	adds	r7, #24
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	2000af5c 	.word	0x2000af5c
 800f47c:	0801e13c 	.word	0x0801e13c
 800f480:	0801e1b4 	.word	0x0801e1b4
 800f484:	0801e18c 	.word	0x0801e18c

0800f488 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f498:	f003 0318 	and.w	r3, r3, #24
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d006      	beq.n	800f4ae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f4a0:	4a08      	ldr	r2, [pc, #32]	; (800f4c4 <tcpip_input+0x3c>)
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f7ff ffab 	bl	800f400 <tcpip_inpkt>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	e005      	b.n	800f4ba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f4ae:	4a06      	ldr	r2, [pc, #24]	; (800f4c8 <tcpip_input+0x40>)
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7ff ffa4 	bl	800f400 <tcpip_inpkt>
 800f4b8:	4603      	mov	r3, r0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	0801b2fd 	.word	0x0801b2fd
 800f4c8:	0801a1d5 	.word	0x0801a1d5

0800f4cc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f4d6:	4819      	ldr	r0, [pc, #100]	; (800f53c <tcpip_try_callback+0x70>)
 800f4d8:	f00c f84b 	bl	801b572 <sys_mbox_valid>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d106      	bne.n	800f4f0 <tcpip_try_callback+0x24>
 800f4e2:	4b17      	ldr	r3, [pc, #92]	; (800f540 <tcpip_try_callback+0x74>)
 800f4e4:	f240 125d 	movw	r2, #349	; 0x15d
 800f4e8:	4916      	ldr	r1, [pc, #88]	; (800f544 <tcpip_try_callback+0x78>)
 800f4ea:	4817      	ldr	r0, [pc, #92]	; (800f548 <tcpip_try_callback+0x7c>)
 800f4ec:	f00d fc38 	bl	801cd60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f4f0:	2008      	movs	r0, #8
 800f4f2:	f000 fd2b 	bl	800ff4c <memp_malloc>
 800f4f6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d102      	bne.n	800f504 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f502:	e017      	b.n	800f534 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2201      	movs	r2, #1
 800f508:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	683a      	ldr	r2, [r7, #0]
 800f514:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f516:	68f9      	ldr	r1, [r7, #12]
 800f518:	4808      	ldr	r0, [pc, #32]	; (800f53c <tcpip_try_callback+0x70>)
 800f51a:	f00b ffdf 	bl	801b4dc <sys_mbox_trypost>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d006      	beq.n	800f532 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f524:	68f9      	ldr	r1, [r7, #12]
 800f526:	2008      	movs	r0, #8
 800f528:	f000 fd62 	bl	800fff0 <memp_free>
    return ERR_MEM;
 800f52c:	f04f 33ff 	mov.w	r3, #4294967295
 800f530:	e000      	b.n	800f534 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	2000af5c 	.word	0x2000af5c
 800f540:	0801e13c 	.word	0x0801e13c
 800f544:	0801e1b4 	.word	0x0801e1b4
 800f548:	0801e18c 	.word	0x0801e18c

0800f54c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af02      	add	r7, sp, #8
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f556:	f000 f871 	bl	800f63c <lwip_init>

  tcpip_init_done = initfunc;
 800f55a:	4a17      	ldr	r2, [pc, #92]	; (800f5b8 <tcpip_init+0x6c>)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f560:	4a16      	ldr	r2, [pc, #88]	; (800f5bc <tcpip_init+0x70>)
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f566:	2106      	movs	r1, #6
 800f568:	4815      	ldr	r0, [pc, #84]	; (800f5c0 <tcpip_init+0x74>)
 800f56a:	f00b ff9d 	bl	801b4a8 <sys_mbox_new>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	d006      	beq.n	800f582 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f574:	4b13      	ldr	r3, [pc, #76]	; (800f5c4 <tcpip_init+0x78>)
 800f576:	f240 2261 	movw	r2, #609	; 0x261
 800f57a:	4913      	ldr	r1, [pc, #76]	; (800f5c8 <tcpip_init+0x7c>)
 800f57c:	4813      	ldr	r0, [pc, #76]	; (800f5cc <tcpip_init+0x80>)
 800f57e:	f00d fbef 	bl	801cd60 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f582:	4813      	ldr	r0, [pc, #76]	; (800f5d0 <tcpip_init+0x84>)
 800f584:	f00c f812 	bl	801b5ac <sys_mutex_new>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d006      	beq.n	800f59c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f58e:	4b0d      	ldr	r3, [pc, #52]	; (800f5c4 <tcpip_init+0x78>)
 800f590:	f240 2265 	movw	r2, #613	; 0x265
 800f594:	490f      	ldr	r1, [pc, #60]	; (800f5d4 <tcpip_init+0x88>)
 800f596:	480d      	ldr	r0, [pc, #52]	; (800f5cc <tcpip_init+0x80>)
 800f598:	f00d fbe2 	bl	801cd60 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f59c:	2318      	movs	r3, #24
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	490c      	ldr	r1, [pc, #48]	; (800f5d8 <tcpip_init+0x8c>)
 800f5a8:	480c      	ldr	r0, [pc, #48]	; (800f5dc <tcpip_init+0x90>)
 800f5aa:	f00c f831 	bl	801b610 <sys_thread_new>
}
 800f5ae:	bf00      	nop
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	2000af54 	.word	0x2000af54
 800f5bc:	2000af58 	.word	0x2000af58
 800f5c0:	2000af5c 	.word	0x2000af5c
 800f5c4:	0801e13c 	.word	0x0801e13c
 800f5c8:	0801e1c4 	.word	0x0801e1c4
 800f5cc:	0801e18c 	.word	0x0801e18c
 800f5d0:	200102bc 	.word	0x200102bc
 800f5d4:	0801e1e8 	.word	0x0801e1e8
 800f5d8:	0800f309 	.word	0x0800f309
 800f5dc:	0801e20c 	.word	0x0801e20c

0800f5e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f5ea:	88fb      	ldrh	r3, [r7, #6]
 800f5ec:	021b      	lsls	r3, r3, #8
 800f5ee:	b21a      	sxth	r2, r3
 800f5f0:	88fb      	ldrh	r3, [r7, #6]
 800f5f2:	0a1b      	lsrs	r3, r3, #8
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	b21b      	sxth	r3, r3
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	b21b      	sxth	r3, r3
 800f5fc:	b29b      	uxth	r3, r3
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	370c      	adds	r7, #12
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f60a:	b480      	push	{r7}
 800f60c:	b083      	sub	sp, #12
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	061a      	lsls	r2, r3, #24
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	021b      	lsls	r3, r3, #8
 800f61a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f61e:	431a      	orrs	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	0a1b      	lsrs	r3, r3, #8
 800f624:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f628:	431a      	orrs	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	0e1b      	lsrs	r3, r3, #24
 800f62e:	4313      	orrs	r3, r2
}
 800f630:	4618      	mov	r0, r3
 800f632:	370c      	adds	r7, #12
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr

0800f63c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f642:	2300      	movs	r3, #0
 800f644:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f646:	f00b ffa5 	bl	801b594 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f64a:	f000 f8d5 	bl	800f7f8 <mem_init>
  memp_init();
 800f64e:	f000 fc31 	bl	800feb4 <memp_init>
  pbuf_init();
  netif_init();
 800f652:	f000 fcf7 	bl	8010044 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f656:	f007 f8f7 	bl	8016848 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f65a:	f001 fe23 	bl	80112a4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f65e:	f007 f839 	bl	80166d4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f662:	bf00      	nop
 800f664:	3708      	adds	r7, #8
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
	...

0800f66c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	4603      	mov	r3, r0
 800f674:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f676:	4b05      	ldr	r3, [pc, #20]	; (800f68c <ptr_to_mem+0x20>)
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	88fb      	ldrh	r3, [r7, #6]
 800f67c:	4413      	add	r3, r2
}
 800f67e:	4618      	mov	r0, r3
 800f680:	370c      	adds	r7, #12
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	2000af60 	.word	0x2000af60

0800f690 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f698:	4b05      	ldr	r3, [pc, #20]	; (800f6b0 <mem_to_ptr+0x20>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	1ad3      	subs	r3, r2, r3
 800f6a0:	b29b      	uxth	r3, r3
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	370c      	adds	r7, #12
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	2000af60 	.word	0x2000af60

0800f6b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f6b4:	b590      	push	{r4, r7, lr}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f6bc:	4b45      	ldr	r3, [pc, #276]	; (800f7d4 <plug_holes+0x120>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d206      	bcs.n	800f6d4 <plug_holes+0x20>
 800f6c6:	4b44      	ldr	r3, [pc, #272]	; (800f7d8 <plug_holes+0x124>)
 800f6c8:	f240 12df 	movw	r2, #479	; 0x1df
 800f6cc:	4943      	ldr	r1, [pc, #268]	; (800f7dc <plug_holes+0x128>)
 800f6ce:	4844      	ldr	r0, [pc, #272]	; (800f7e0 <plug_holes+0x12c>)
 800f6d0:	f00d fb46 	bl	801cd60 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f6d4:	4b43      	ldr	r3, [pc, #268]	; (800f7e4 <plug_holes+0x130>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d306      	bcc.n	800f6ec <plug_holes+0x38>
 800f6de:	4b3e      	ldr	r3, [pc, #248]	; (800f7d8 <plug_holes+0x124>)
 800f6e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f6e4:	4940      	ldr	r1, [pc, #256]	; (800f7e8 <plug_holes+0x134>)
 800f6e6:	483e      	ldr	r0, [pc, #248]	; (800f7e0 <plug_holes+0x12c>)
 800f6e8:	f00d fb3a 	bl	801cd60 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	791b      	ldrb	r3, [r3, #4]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d006      	beq.n	800f702 <plug_holes+0x4e>
 800f6f4:	4b38      	ldr	r3, [pc, #224]	; (800f7d8 <plug_holes+0x124>)
 800f6f6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f6fa:	493c      	ldr	r1, [pc, #240]	; (800f7ec <plug_holes+0x138>)
 800f6fc:	4838      	ldr	r0, [pc, #224]	; (800f7e0 <plug_holes+0x12c>)
 800f6fe:	f00d fb2f 	bl	801cd60 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	881b      	ldrh	r3, [r3, #0]
 800f706:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f70a:	d906      	bls.n	800f71a <plug_holes+0x66>
 800f70c:	4b32      	ldr	r3, [pc, #200]	; (800f7d8 <plug_holes+0x124>)
 800f70e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f712:	4937      	ldr	r1, [pc, #220]	; (800f7f0 <plug_holes+0x13c>)
 800f714:	4832      	ldr	r0, [pc, #200]	; (800f7e0 <plug_holes+0x12c>)
 800f716:	f00d fb23 	bl	801cd60 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7ff ffa4 	bl	800f66c <ptr_to_mem>
 800f724:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d024      	beq.n	800f778 <plug_holes+0xc4>
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	791b      	ldrb	r3, [r3, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d120      	bne.n	800f778 <plug_holes+0xc4>
 800f736:	4b2b      	ldr	r3, [pc, #172]	; (800f7e4 <plug_holes+0x130>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	68fa      	ldr	r2, [r7, #12]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d01b      	beq.n	800f778 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f740:	4b2c      	ldr	r3, [pc, #176]	; (800f7f4 <plug_holes+0x140>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	429a      	cmp	r2, r3
 800f748:	d102      	bne.n	800f750 <plug_holes+0x9c>
      lfree = mem;
 800f74a:	4a2a      	ldr	r2, [pc, #168]	; (800f7f4 <plug_holes+0x140>)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	881a      	ldrh	r2, [r3, #0]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	881b      	ldrh	r3, [r3, #0]
 800f75c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f760:	d00a      	beq.n	800f778 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	881b      	ldrh	r3, [r3, #0]
 800f766:	4618      	mov	r0, r3
 800f768:	f7ff ff80 	bl	800f66c <ptr_to_mem>
 800f76c:	4604      	mov	r4, r0
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7ff ff8e 	bl	800f690 <mem_to_ptr>
 800f774:	4603      	mov	r3, r0
 800f776:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	885b      	ldrh	r3, [r3, #2]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7ff ff75 	bl	800f66c <ptr_to_mem>
 800f782:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d01f      	beq.n	800f7cc <plug_holes+0x118>
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	791b      	ldrb	r3, [r3, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d11b      	bne.n	800f7cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f794:	4b17      	ldr	r3, [pc, #92]	; (800f7f4 <plug_holes+0x140>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d102      	bne.n	800f7a4 <plug_holes+0xf0>
      lfree = pmem;
 800f79e:	4a15      	ldr	r2, [pc, #84]	; (800f7f4 <plug_holes+0x140>)
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	881a      	ldrh	r2, [r3, #0]
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f7b4:	d00a      	beq.n	800f7cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	881b      	ldrh	r3, [r3, #0]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7ff ff56 	bl	800f66c <ptr_to_mem>
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	68b8      	ldr	r0, [r7, #8]
 800f7c4:	f7ff ff64 	bl	800f690 <mem_to_ptr>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f7cc:	bf00      	nop
 800f7ce:	3714      	adds	r7, #20
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd90      	pop	{r4, r7, pc}
 800f7d4:	2000af60 	.word	0x2000af60
 800f7d8:	0801e21c 	.word	0x0801e21c
 800f7dc:	0801e24c 	.word	0x0801e24c
 800f7e0:	0801e264 	.word	0x0801e264
 800f7e4:	2000af64 	.word	0x2000af64
 800f7e8:	0801e28c 	.word	0x0801e28c
 800f7ec:	0801e2a8 	.word	0x0801e2a8
 800f7f0:	0801e2c4 	.word	0x0801e2c4
 800f7f4:	2000af6c 	.word	0x2000af6c

0800f7f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f7fe:	4b1f      	ldr	r3, [pc, #124]	; (800f87c <mem_init+0x84>)
 800f800:	3303      	adds	r3, #3
 800f802:	f023 0303 	bic.w	r3, r3, #3
 800f806:	461a      	mov	r2, r3
 800f808:	4b1d      	ldr	r3, [pc, #116]	; (800f880 <mem_init+0x88>)
 800f80a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f80c:	4b1c      	ldr	r3, [pc, #112]	; (800f880 <mem_init+0x88>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f818:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f826:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f82a:	f7ff ff1f 	bl	800f66c <ptr_to_mem>
 800f82e:	4603      	mov	r3, r0
 800f830:	4a14      	ldr	r2, [pc, #80]	; (800f884 <mem_init+0x8c>)
 800f832:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f834:	4b13      	ldr	r3, [pc, #76]	; (800f884 <mem_init+0x8c>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2201      	movs	r2, #1
 800f83a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f83c:	4b11      	ldr	r3, [pc, #68]	; (800f884 <mem_init+0x8c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f844:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f846:	4b0f      	ldr	r3, [pc, #60]	; (800f884 <mem_init+0x8c>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f84e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f850:	4b0b      	ldr	r3, [pc, #44]	; (800f880 <mem_init+0x88>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a0c      	ldr	r2, [pc, #48]	; (800f888 <mem_init+0x90>)
 800f856:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f858:	480c      	ldr	r0, [pc, #48]	; (800f88c <mem_init+0x94>)
 800f85a:	f00b fea7 	bl	801b5ac <sys_mutex_new>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b00      	cmp	r3, #0
 800f862:	d006      	beq.n	800f872 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f864:	4b0a      	ldr	r3, [pc, #40]	; (800f890 <mem_init+0x98>)
 800f866:	f240 221f 	movw	r2, #543	; 0x21f
 800f86a:	490a      	ldr	r1, [pc, #40]	; (800f894 <mem_init+0x9c>)
 800f86c:	480a      	ldr	r0, [pc, #40]	; (800f898 <mem_init+0xa0>)
 800f86e:	f00d fa77 	bl	801cd60 <iprintf>
  }
}
 800f872:	bf00      	nop
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	200102d8 	.word	0x200102d8
 800f880:	2000af60 	.word	0x2000af60
 800f884:	2000af64 	.word	0x2000af64
 800f888:	2000af6c 	.word	0x2000af6c
 800f88c:	2000af68 	.word	0x2000af68
 800f890:	0801e21c 	.word	0x0801e21c
 800f894:	0801e2f0 	.word	0x0801e2f0
 800f898:	0801e264 	.word	0x0801e264

0800f89c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7ff fef3 	bl	800f690 <mem_to_ptr>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	881b      	ldrh	r3, [r3, #0]
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7ff feda 	bl	800f66c <ptr_to_mem>
 800f8b8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	885b      	ldrh	r3, [r3, #2]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7ff fed4 	bl	800f66c <ptr_to_mem>
 800f8c4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	881b      	ldrh	r3, [r3, #0]
 800f8ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f8ce:	d818      	bhi.n	800f902 <mem_link_valid+0x66>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	885b      	ldrh	r3, [r3, #2]
 800f8d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f8d8:	d813      	bhi.n	800f902 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f8de:	8afa      	ldrh	r2, [r7, #22]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d004      	beq.n	800f8ee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	881b      	ldrh	r3, [r3, #0]
 800f8e8:	8afa      	ldrh	r2, [r7, #22]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d109      	bne.n	800f902 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f8ee:	4b08      	ldr	r3, [pc, #32]	; (800f910 <mem_link_valid+0x74>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d006      	beq.n	800f906 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	885b      	ldrh	r3, [r3, #2]
 800f8fc:	8afa      	ldrh	r2, [r7, #22]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d001      	beq.n	800f906 <mem_link_valid+0x6a>
    return 0;
 800f902:	2300      	movs	r3, #0
 800f904:	e000      	b.n	800f908 <mem_link_valid+0x6c>
  }
  return 1;
 800f906:	2301      	movs	r3, #1
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3718      	adds	r7, #24
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	2000af64 	.word	0x2000af64

0800f914 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b088      	sub	sp, #32
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d070      	beq.n	800fa04 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f003 0303 	and.w	r3, r3, #3
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00d      	beq.n	800f948 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f92c:	4b37      	ldr	r3, [pc, #220]	; (800fa0c <mem_free+0xf8>)
 800f92e:	f240 2273 	movw	r2, #627	; 0x273
 800f932:	4937      	ldr	r1, [pc, #220]	; (800fa10 <mem_free+0xfc>)
 800f934:	4837      	ldr	r0, [pc, #220]	; (800fa14 <mem_free+0x100>)
 800f936:	f00d fa13 	bl	801cd60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f93a:	f00b fe89 	bl	801b650 <sys_arch_protect>
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f00b fe93 	bl	801b66c <sys_arch_unprotect>
    return;
 800f946:	e05e      	b.n	800fa06 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	3b08      	subs	r3, #8
 800f94c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f94e:	4b32      	ldr	r3, [pc, #200]	; (800fa18 <mem_free+0x104>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	69fa      	ldr	r2, [r7, #28]
 800f954:	429a      	cmp	r2, r3
 800f956:	d306      	bcc.n	800f966 <mem_free+0x52>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f103 020c 	add.w	r2, r3, #12
 800f95e:	4b2f      	ldr	r3, [pc, #188]	; (800fa1c <mem_free+0x108>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	429a      	cmp	r2, r3
 800f964:	d90d      	bls.n	800f982 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f966:	4b29      	ldr	r3, [pc, #164]	; (800fa0c <mem_free+0xf8>)
 800f968:	f240 227f 	movw	r2, #639	; 0x27f
 800f96c:	492c      	ldr	r1, [pc, #176]	; (800fa20 <mem_free+0x10c>)
 800f96e:	4829      	ldr	r0, [pc, #164]	; (800fa14 <mem_free+0x100>)
 800f970:	f00d f9f6 	bl	801cd60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f974:	f00b fe6c 	bl	801b650 <sys_arch_protect>
 800f978:	6138      	str	r0, [r7, #16]
 800f97a:	6938      	ldr	r0, [r7, #16]
 800f97c:	f00b fe76 	bl	801b66c <sys_arch_unprotect>
    return;
 800f980:	e041      	b.n	800fa06 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f982:	4828      	ldr	r0, [pc, #160]	; (800fa24 <mem_free+0x110>)
 800f984:	f00b fe28 	bl	801b5d8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	791b      	ldrb	r3, [r3, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d110      	bne.n	800f9b2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f990:	4b1e      	ldr	r3, [pc, #120]	; (800fa0c <mem_free+0xf8>)
 800f992:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f996:	4924      	ldr	r1, [pc, #144]	; (800fa28 <mem_free+0x114>)
 800f998:	481e      	ldr	r0, [pc, #120]	; (800fa14 <mem_free+0x100>)
 800f99a:	f00d f9e1 	bl	801cd60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f99e:	4821      	ldr	r0, [pc, #132]	; (800fa24 <mem_free+0x110>)
 800f9a0:	f00b fe29 	bl	801b5f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f9a4:	f00b fe54 	bl	801b650 <sys_arch_protect>
 800f9a8:	6178      	str	r0, [r7, #20]
 800f9aa:	6978      	ldr	r0, [r7, #20]
 800f9ac:	f00b fe5e 	bl	801b66c <sys_arch_unprotect>
    return;
 800f9b0:	e029      	b.n	800fa06 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f9b2:	69f8      	ldr	r0, [r7, #28]
 800f9b4:	f7ff ff72 	bl	800f89c <mem_link_valid>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d110      	bne.n	800f9e0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f9be:	4b13      	ldr	r3, [pc, #76]	; (800fa0c <mem_free+0xf8>)
 800f9c0:	f240 2295 	movw	r2, #661	; 0x295
 800f9c4:	4919      	ldr	r1, [pc, #100]	; (800fa2c <mem_free+0x118>)
 800f9c6:	4813      	ldr	r0, [pc, #76]	; (800fa14 <mem_free+0x100>)
 800f9c8:	f00d f9ca 	bl	801cd60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f9cc:	4815      	ldr	r0, [pc, #84]	; (800fa24 <mem_free+0x110>)
 800f9ce:	f00b fe12 	bl	801b5f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f9d2:	f00b fe3d 	bl	801b650 <sys_arch_protect>
 800f9d6:	61b8      	str	r0, [r7, #24]
 800f9d8:	69b8      	ldr	r0, [r7, #24]
 800f9da:	f00b fe47 	bl	801b66c <sys_arch_unprotect>
    return;
 800f9de:	e012      	b.n	800fa06 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f9e6:	4b12      	ldr	r3, [pc, #72]	; (800fa30 <mem_free+0x11c>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	69fa      	ldr	r2, [r7, #28]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d202      	bcs.n	800f9f6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f9f0:	4a0f      	ldr	r2, [pc, #60]	; (800fa30 <mem_free+0x11c>)
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f9f6:	69f8      	ldr	r0, [r7, #28]
 800f9f8:	f7ff fe5c 	bl	800f6b4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f9fc:	4809      	ldr	r0, [pc, #36]	; (800fa24 <mem_free+0x110>)
 800f9fe:	f00b fdfa 	bl	801b5f6 <sys_mutex_unlock>
 800fa02:	e000      	b.n	800fa06 <mem_free+0xf2>
    return;
 800fa04:	bf00      	nop
}
 800fa06:	3720      	adds	r7, #32
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	0801e21c 	.word	0x0801e21c
 800fa10:	0801e30c 	.word	0x0801e30c
 800fa14:	0801e264 	.word	0x0801e264
 800fa18:	2000af60 	.word	0x2000af60
 800fa1c:	2000af64 	.word	0x2000af64
 800fa20:	0801e330 	.word	0x0801e330
 800fa24:	2000af68 	.word	0x2000af68
 800fa28:	0801e34c 	.word	0x0801e34c
 800fa2c:	0801e374 	.word	0x0801e374
 800fa30:	2000af6c 	.word	0x2000af6c

0800fa34 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b088      	sub	sp, #32
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fa40:	887b      	ldrh	r3, [r7, #2]
 800fa42:	3303      	adds	r3, #3
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	f023 0303 	bic.w	r3, r3, #3
 800fa4a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fa4c:	8bfb      	ldrh	r3, [r7, #30]
 800fa4e:	2b0b      	cmp	r3, #11
 800fa50:	d801      	bhi.n	800fa56 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fa52:	230c      	movs	r3, #12
 800fa54:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fa56:	8bfb      	ldrh	r3, [r7, #30]
 800fa58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fa5c:	d803      	bhi.n	800fa66 <mem_trim+0x32>
 800fa5e:	8bfa      	ldrh	r2, [r7, #30]
 800fa60:	887b      	ldrh	r3, [r7, #2]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d201      	bcs.n	800fa6a <mem_trim+0x36>
    return NULL;
 800fa66:	2300      	movs	r3, #0
 800fa68:	e0d8      	b.n	800fc1c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fa6a:	4b6e      	ldr	r3, [pc, #440]	; (800fc24 <mem_trim+0x1f0>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d304      	bcc.n	800fa7e <mem_trim+0x4a>
 800fa74:	4b6c      	ldr	r3, [pc, #432]	; (800fc28 <mem_trim+0x1f4>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d306      	bcc.n	800fa8c <mem_trim+0x58>
 800fa7e:	4b6b      	ldr	r3, [pc, #428]	; (800fc2c <mem_trim+0x1f8>)
 800fa80:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fa84:	496a      	ldr	r1, [pc, #424]	; (800fc30 <mem_trim+0x1fc>)
 800fa86:	486b      	ldr	r0, [pc, #428]	; (800fc34 <mem_trim+0x200>)
 800fa88:	f00d f96a 	bl	801cd60 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fa8c:	4b65      	ldr	r3, [pc, #404]	; (800fc24 <mem_trim+0x1f0>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d304      	bcc.n	800faa0 <mem_trim+0x6c>
 800fa96:	4b64      	ldr	r3, [pc, #400]	; (800fc28 <mem_trim+0x1f4>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d307      	bcc.n	800fab0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800faa0:	f00b fdd6 	bl	801b650 <sys_arch_protect>
 800faa4:	60b8      	str	r0, [r7, #8]
 800faa6:	68b8      	ldr	r0, [r7, #8]
 800faa8:	f00b fde0 	bl	801b66c <sys_arch_unprotect>
    return rmem;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	e0b5      	b.n	800fc1c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	3b08      	subs	r3, #8
 800fab4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fab6:	69b8      	ldr	r0, [r7, #24]
 800fab8:	f7ff fdea 	bl	800f690 <mem_to_ptr>
 800fabc:	4603      	mov	r3, r0
 800fabe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	881a      	ldrh	r2, [r3, #0]
 800fac4:	8afb      	ldrh	r3, [r7, #22]
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	b29b      	uxth	r3, r3
 800faca:	3b08      	subs	r3, #8
 800facc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800face:	8bfa      	ldrh	r2, [r7, #30]
 800fad0:	8abb      	ldrh	r3, [r7, #20]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d906      	bls.n	800fae4 <mem_trim+0xb0>
 800fad6:	4b55      	ldr	r3, [pc, #340]	; (800fc2c <mem_trim+0x1f8>)
 800fad8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fadc:	4956      	ldr	r1, [pc, #344]	; (800fc38 <mem_trim+0x204>)
 800fade:	4855      	ldr	r0, [pc, #340]	; (800fc34 <mem_trim+0x200>)
 800fae0:	f00d f93e 	bl	801cd60 <iprintf>
  if (newsize > size) {
 800fae4:	8bfa      	ldrh	r2, [r7, #30]
 800fae6:	8abb      	ldrh	r3, [r7, #20]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d901      	bls.n	800faf0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800faec:	2300      	movs	r3, #0
 800faee:	e095      	b.n	800fc1c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800faf0:	8bfa      	ldrh	r2, [r7, #30]
 800faf2:	8abb      	ldrh	r3, [r7, #20]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d101      	bne.n	800fafc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	e08f      	b.n	800fc1c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fafc:	484f      	ldr	r0, [pc, #316]	; (800fc3c <mem_trim+0x208>)
 800fafe:	f00b fd6b 	bl	801b5d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800fb02:	69bb      	ldr	r3, [r7, #24]
 800fb04:	881b      	ldrh	r3, [r3, #0]
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7ff fdb0 	bl	800f66c <ptr_to_mem>
 800fb0c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	791b      	ldrb	r3, [r3, #4]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d13f      	bne.n	800fb96 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb1e:	d106      	bne.n	800fb2e <mem_trim+0xfa>
 800fb20:	4b42      	ldr	r3, [pc, #264]	; (800fc2c <mem_trim+0x1f8>)
 800fb22:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fb26:	4946      	ldr	r1, [pc, #280]	; (800fc40 <mem_trim+0x20c>)
 800fb28:	4842      	ldr	r0, [pc, #264]	; (800fc34 <mem_trim+0x200>)
 800fb2a:	f00d f919 	bl	801cd60 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	881b      	ldrh	r3, [r3, #0]
 800fb32:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fb34:	8afa      	ldrh	r2, [r7, #22]
 800fb36:	8bfb      	ldrh	r3, [r7, #30]
 800fb38:	4413      	add	r3, r2
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	3308      	adds	r3, #8
 800fb3e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800fb40:	4b40      	ldr	r3, [pc, #256]	; (800fc44 <mem_trim+0x210>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	693a      	ldr	r2, [r7, #16]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d106      	bne.n	800fb58 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800fb4a:	89fb      	ldrh	r3, [r7, #14]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7ff fd8d 	bl	800f66c <ptr_to_mem>
 800fb52:	4603      	mov	r3, r0
 800fb54:	4a3b      	ldr	r2, [pc, #236]	; (800fc44 <mem_trim+0x210>)
 800fb56:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fb58:	89fb      	ldrh	r3, [r7, #14]
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7ff fd86 	bl	800f66c <ptr_to_mem>
 800fb60:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	2200      	movs	r2, #0
 800fb66:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	89ba      	ldrh	r2, [r7, #12]
 800fb6c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	8afa      	ldrh	r2, [r7, #22]
 800fb72:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	89fa      	ldrh	r2, [r7, #14]
 800fb78:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb82:	d047      	beq.n	800fc14 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	881b      	ldrh	r3, [r3, #0]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7ff fd6f 	bl	800f66c <ptr_to_mem>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	89fb      	ldrh	r3, [r7, #14]
 800fb92:	8053      	strh	r3, [r2, #2]
 800fb94:	e03e      	b.n	800fc14 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fb96:	8bfb      	ldrh	r3, [r7, #30]
 800fb98:	f103 0214 	add.w	r2, r3, #20
 800fb9c:	8abb      	ldrh	r3, [r7, #20]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d838      	bhi.n	800fc14 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fba2:	8afa      	ldrh	r2, [r7, #22]
 800fba4:	8bfb      	ldrh	r3, [r7, #30]
 800fba6:	4413      	add	r3, r2
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	3308      	adds	r3, #8
 800fbac:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	881b      	ldrh	r3, [r3, #0]
 800fbb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fbb6:	d106      	bne.n	800fbc6 <mem_trim+0x192>
 800fbb8:	4b1c      	ldr	r3, [pc, #112]	; (800fc2c <mem_trim+0x1f8>)
 800fbba:	f240 3216 	movw	r2, #790	; 0x316
 800fbbe:	4920      	ldr	r1, [pc, #128]	; (800fc40 <mem_trim+0x20c>)
 800fbc0:	481c      	ldr	r0, [pc, #112]	; (800fc34 <mem_trim+0x200>)
 800fbc2:	f00d f8cd 	bl	801cd60 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fbc6:	89fb      	ldrh	r3, [r7, #14]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7ff fd4f 	bl	800f66c <ptr_to_mem>
 800fbce:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800fbd0:	4b1c      	ldr	r3, [pc, #112]	; (800fc44 <mem_trim+0x210>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d202      	bcs.n	800fbe0 <mem_trim+0x1ac>
      lfree = mem2;
 800fbda:	4a1a      	ldr	r2, [pc, #104]	; (800fc44 <mem_trim+0x210>)
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	881a      	ldrh	r2, [r3, #0]
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	8afa      	ldrh	r2, [r7, #22]
 800fbf2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800fbf4:	69bb      	ldr	r3, [r7, #24]
 800fbf6:	89fa      	ldrh	r2, [r7, #14]
 800fbf8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc02:	d007      	beq.n	800fc14 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	881b      	ldrh	r3, [r3, #0]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7ff fd2f 	bl	800f66c <ptr_to_mem>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	89fb      	ldrh	r3, [r7, #14]
 800fc12:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fc14:	4809      	ldr	r0, [pc, #36]	; (800fc3c <mem_trim+0x208>)
 800fc16:	f00b fcee 	bl	801b5f6 <sys_mutex_unlock>
  return rmem;
 800fc1a:	687b      	ldr	r3, [r7, #4]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3720      	adds	r7, #32
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	2000af60 	.word	0x2000af60
 800fc28:	2000af64 	.word	0x2000af64
 800fc2c:	0801e21c 	.word	0x0801e21c
 800fc30:	0801e3a8 	.word	0x0801e3a8
 800fc34:	0801e264 	.word	0x0801e264
 800fc38:	0801e3c0 	.word	0x0801e3c0
 800fc3c:	2000af68 	.word	0x2000af68
 800fc40:	0801e3e0 	.word	0x0801e3e0
 800fc44:	2000af6c 	.word	0x2000af6c

0800fc48 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b088      	sub	sp, #32
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	4603      	mov	r3, r0
 800fc50:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fc52:	88fb      	ldrh	r3, [r7, #6]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d101      	bne.n	800fc5c <mem_malloc+0x14>
    return NULL;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	e0e2      	b.n	800fe22 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fc5c:	88fb      	ldrh	r3, [r7, #6]
 800fc5e:	3303      	adds	r3, #3
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	f023 0303 	bic.w	r3, r3, #3
 800fc66:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800fc68:	8bbb      	ldrh	r3, [r7, #28]
 800fc6a:	2b0b      	cmp	r3, #11
 800fc6c:	d801      	bhi.n	800fc72 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fc6e:	230c      	movs	r3, #12
 800fc70:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fc72:	8bbb      	ldrh	r3, [r7, #28]
 800fc74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc78:	d803      	bhi.n	800fc82 <mem_malloc+0x3a>
 800fc7a:	8bba      	ldrh	r2, [r7, #28]
 800fc7c:	88fb      	ldrh	r3, [r7, #6]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d201      	bcs.n	800fc86 <mem_malloc+0x3e>
    return NULL;
 800fc82:	2300      	movs	r3, #0
 800fc84:	e0cd      	b.n	800fe22 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fc86:	4869      	ldr	r0, [pc, #420]	; (800fe2c <mem_malloc+0x1e4>)
 800fc88:	f00b fca6 	bl	801b5d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fc8c:	4b68      	ldr	r3, [pc, #416]	; (800fe30 <mem_malloc+0x1e8>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7ff fcfd 	bl	800f690 <mem_to_ptr>
 800fc96:	4603      	mov	r3, r0
 800fc98:	83fb      	strh	r3, [r7, #30]
 800fc9a:	e0b7      	b.n	800fe0c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fc9c:	8bfb      	ldrh	r3, [r7, #30]
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7ff fce4 	bl	800f66c <ptr_to_mem>
 800fca4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	791b      	ldrb	r3, [r3, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	f040 80a7 	bne.w	800fdfe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	881b      	ldrh	r3, [r3, #0]
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	8bfb      	ldrh	r3, [r7, #30]
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	f1a3 0208 	sub.w	r2, r3, #8
 800fcbe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	f0c0 809c 	bcc.w	800fdfe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	461a      	mov	r2, r3
 800fccc:	8bfb      	ldrh	r3, [r7, #30]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	f1a3 0208 	sub.w	r2, r3, #8
 800fcd4:	8bbb      	ldrh	r3, [r7, #28]
 800fcd6:	3314      	adds	r3, #20
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d333      	bcc.n	800fd44 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fcdc:	8bfa      	ldrh	r2, [r7, #30]
 800fcde:	8bbb      	ldrh	r3, [r7, #28]
 800fce0:	4413      	add	r3, r2
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	3308      	adds	r3, #8
 800fce6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fce8:	8a7b      	ldrh	r3, [r7, #18]
 800fcea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcee:	d106      	bne.n	800fcfe <mem_malloc+0xb6>
 800fcf0:	4b50      	ldr	r3, [pc, #320]	; (800fe34 <mem_malloc+0x1ec>)
 800fcf2:	f240 3287 	movw	r2, #903	; 0x387
 800fcf6:	4950      	ldr	r1, [pc, #320]	; (800fe38 <mem_malloc+0x1f0>)
 800fcf8:	4850      	ldr	r0, [pc, #320]	; (800fe3c <mem_malloc+0x1f4>)
 800fcfa:	f00d f831 	bl	801cd60 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fcfe:	8a7b      	ldrh	r3, [r7, #18]
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7ff fcb3 	bl	800f66c <ptr_to_mem>
 800fd06:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	881a      	ldrh	r2, [r3, #0]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	8bfa      	ldrh	r2, [r7, #30]
 800fd1a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	8a7a      	ldrh	r2, [r7, #18]
 800fd20:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	2201      	movs	r2, #1
 800fd26:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	881b      	ldrh	r3, [r3, #0]
 800fd2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fd30:	d00b      	beq.n	800fd4a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	881b      	ldrh	r3, [r3, #0]
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7ff fc98 	bl	800f66c <ptr_to_mem>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	8a7b      	ldrh	r3, [r7, #18]
 800fd40:	8053      	strh	r3, [r2, #2]
 800fd42:	e002      	b.n	800fd4a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	2201      	movs	r2, #1
 800fd48:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fd4a:	4b39      	ldr	r3, [pc, #228]	; (800fe30 <mem_malloc+0x1e8>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	697a      	ldr	r2, [r7, #20]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d127      	bne.n	800fda4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800fd54:	4b36      	ldr	r3, [pc, #216]	; (800fe30 <mem_malloc+0x1e8>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fd5a:	e005      	b.n	800fd68 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fd5c:	69bb      	ldr	r3, [r7, #24]
 800fd5e:	881b      	ldrh	r3, [r3, #0]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7ff fc83 	bl	800f66c <ptr_to_mem>
 800fd66:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	791b      	ldrb	r3, [r3, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d004      	beq.n	800fd7a <mem_malloc+0x132>
 800fd70:	4b33      	ldr	r3, [pc, #204]	; (800fe40 <mem_malloc+0x1f8>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	69ba      	ldr	r2, [r7, #24]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d1f0      	bne.n	800fd5c <mem_malloc+0x114>
          }
          lfree = cur;
 800fd7a:	4a2d      	ldr	r2, [pc, #180]	; (800fe30 <mem_malloc+0x1e8>)
 800fd7c:	69bb      	ldr	r3, [r7, #24]
 800fd7e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fd80:	4b2b      	ldr	r3, [pc, #172]	; (800fe30 <mem_malloc+0x1e8>)
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	4b2e      	ldr	r3, [pc, #184]	; (800fe40 <mem_malloc+0x1f8>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d00b      	beq.n	800fda4 <mem_malloc+0x15c>
 800fd8c:	4b28      	ldr	r3, [pc, #160]	; (800fe30 <mem_malloc+0x1e8>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	791b      	ldrb	r3, [r3, #4]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d006      	beq.n	800fda4 <mem_malloc+0x15c>
 800fd96:	4b27      	ldr	r3, [pc, #156]	; (800fe34 <mem_malloc+0x1ec>)
 800fd98:	f240 32b5 	movw	r2, #949	; 0x3b5
 800fd9c:	4929      	ldr	r1, [pc, #164]	; (800fe44 <mem_malloc+0x1fc>)
 800fd9e:	4827      	ldr	r0, [pc, #156]	; (800fe3c <mem_malloc+0x1f4>)
 800fda0:	f00c ffde 	bl	801cd60 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800fda4:	4821      	ldr	r0, [pc, #132]	; (800fe2c <mem_malloc+0x1e4>)
 800fda6:	f00b fc26 	bl	801b5f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fdaa:	8bba      	ldrh	r2, [r7, #28]
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	4413      	add	r3, r2
 800fdb0:	3308      	adds	r3, #8
 800fdb2:	4a23      	ldr	r2, [pc, #140]	; (800fe40 <mem_malloc+0x1f8>)
 800fdb4:	6812      	ldr	r2, [r2, #0]
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d906      	bls.n	800fdc8 <mem_malloc+0x180>
 800fdba:	4b1e      	ldr	r3, [pc, #120]	; (800fe34 <mem_malloc+0x1ec>)
 800fdbc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800fdc0:	4921      	ldr	r1, [pc, #132]	; (800fe48 <mem_malloc+0x200>)
 800fdc2:	481e      	ldr	r0, [pc, #120]	; (800fe3c <mem_malloc+0x1f4>)
 800fdc4:	f00c ffcc 	bl	801cd60 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	f003 0303 	and.w	r3, r3, #3
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d006      	beq.n	800fde0 <mem_malloc+0x198>
 800fdd2:	4b18      	ldr	r3, [pc, #96]	; (800fe34 <mem_malloc+0x1ec>)
 800fdd4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800fdd8:	491c      	ldr	r1, [pc, #112]	; (800fe4c <mem_malloc+0x204>)
 800fdda:	4818      	ldr	r0, [pc, #96]	; (800fe3c <mem_malloc+0x1f4>)
 800fddc:	f00c ffc0 	bl	801cd60 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	f003 0303 	and.w	r3, r3, #3
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d006      	beq.n	800fdf8 <mem_malloc+0x1b0>
 800fdea:	4b12      	ldr	r3, [pc, #72]	; (800fe34 <mem_malloc+0x1ec>)
 800fdec:	f240 32bd 	movw	r2, #957	; 0x3bd
 800fdf0:	4917      	ldr	r1, [pc, #92]	; (800fe50 <mem_malloc+0x208>)
 800fdf2:	4812      	ldr	r0, [pc, #72]	; (800fe3c <mem_malloc+0x1f4>)
 800fdf4:	f00c ffb4 	bl	801cd60 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	3308      	adds	r3, #8
 800fdfc:	e011      	b.n	800fe22 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800fdfe:	8bfb      	ldrh	r3, [r7, #30]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7ff fc33 	bl	800f66c <ptr_to_mem>
 800fe06:	4603      	mov	r3, r0
 800fe08:	881b      	ldrh	r3, [r3, #0]
 800fe0a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fe0c:	8bfa      	ldrh	r2, [r7, #30]
 800fe0e:	8bbb      	ldrh	r3, [r7, #28]
 800fe10:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800fe14:	429a      	cmp	r2, r3
 800fe16:	f4ff af41 	bcc.w	800fc9c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fe1a:	4804      	ldr	r0, [pc, #16]	; (800fe2c <mem_malloc+0x1e4>)
 800fe1c:	f00b fbeb 	bl	801b5f6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3720      	adds	r7, #32
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	2000af68 	.word	0x2000af68
 800fe30:	2000af6c 	.word	0x2000af6c
 800fe34:	0801e21c 	.word	0x0801e21c
 800fe38:	0801e3e0 	.word	0x0801e3e0
 800fe3c:	0801e264 	.word	0x0801e264
 800fe40:	2000af64 	.word	0x2000af64
 800fe44:	0801e3f4 	.word	0x0801e3f4
 800fe48:	0801e410 	.word	0x0801e410
 800fe4c:	0801e440 	.word	0x0801e440
 800fe50:	0801e470 	.word	0x0801e470

0800fe54 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b085      	sub	sp, #20
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	2200      	movs	r2, #0
 800fe62:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	3303      	adds	r3, #3
 800fe6a:	f023 0303 	bic.w	r3, r3, #3
 800fe6e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fe70:	2300      	movs	r3, #0
 800fe72:	60fb      	str	r3, [r7, #12]
 800fe74:	e011      	b.n	800fe9a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	689b      	ldr	r3, [r3, #8]
 800fe7a:	681a      	ldr	r2, [r3, #0]
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	881b      	ldrh	r3, [r3, #0]
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	4413      	add	r3, r2
 800fe92:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	3301      	adds	r3, #1
 800fe98:	60fb      	str	r3, [r7, #12]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	885b      	ldrh	r3, [r3, #2]
 800fe9e:	461a      	mov	r2, r3
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	4293      	cmp	r3, r2
 800fea4:	dbe7      	blt.n	800fe76 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fea6:	bf00      	nop
 800fea8:	bf00      	nop
 800feaa:	3714      	adds	r7, #20
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800feba:	2300      	movs	r3, #0
 800febc:	80fb      	strh	r3, [r7, #6]
 800febe:	e009      	b.n	800fed4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fec0:	88fb      	ldrh	r3, [r7, #6]
 800fec2:	4a08      	ldr	r2, [pc, #32]	; (800fee4 <memp_init+0x30>)
 800fec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fec8:	4618      	mov	r0, r3
 800feca:	f7ff ffc3 	bl	800fe54 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fece:	88fb      	ldrh	r3, [r7, #6]
 800fed0:	3301      	adds	r3, #1
 800fed2:	80fb      	strh	r3, [r7, #6]
 800fed4:	88fb      	ldrh	r3, [r7, #6]
 800fed6:	2b0c      	cmp	r3, #12
 800fed8:	d9f2      	bls.n	800fec0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800feda:	bf00      	nop
 800fedc:	bf00      	nop
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	08021164 	.word	0x08021164

0800fee8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fef0:	f00b fbae 	bl	801b650 <sys_arch_protect>
 800fef4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d015      	beq.n	800ff30 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	68ba      	ldr	r2, [r7, #8]
 800ff0a:	6812      	ldr	r2, [r2, #0]
 800ff0c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	f003 0303 	and.w	r3, r3, #3
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d006      	beq.n	800ff26 <do_memp_malloc_pool+0x3e>
 800ff18:	4b09      	ldr	r3, [pc, #36]	; (800ff40 <do_memp_malloc_pool+0x58>)
 800ff1a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ff1e:	4909      	ldr	r1, [pc, #36]	; (800ff44 <do_memp_malloc_pool+0x5c>)
 800ff20:	4809      	ldr	r0, [pc, #36]	; (800ff48 <do_memp_malloc_pool+0x60>)
 800ff22:	f00c ff1d 	bl	801cd60 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f00b fba0 	bl	801b66c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	e003      	b.n	800ff38 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	f00b fb9b 	bl	801b66c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	0801e494 	.word	0x0801e494
 800ff44:	0801e4c4 	.word	0x0801e4c4
 800ff48:	0801e4e8 	.word	0x0801e4e8

0800ff4c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	4603      	mov	r3, r0
 800ff54:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ff56:	79fb      	ldrb	r3, [r7, #7]
 800ff58:	2b0c      	cmp	r3, #12
 800ff5a:	d908      	bls.n	800ff6e <memp_malloc+0x22>
 800ff5c:	4b0a      	ldr	r3, [pc, #40]	; (800ff88 <memp_malloc+0x3c>)
 800ff5e:	f240 1257 	movw	r2, #343	; 0x157
 800ff62:	490a      	ldr	r1, [pc, #40]	; (800ff8c <memp_malloc+0x40>)
 800ff64:	480a      	ldr	r0, [pc, #40]	; (800ff90 <memp_malloc+0x44>)
 800ff66:	f00c fefb 	bl	801cd60 <iprintf>
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	e008      	b.n	800ff80 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ff6e:	79fb      	ldrb	r3, [r7, #7]
 800ff70:	4a08      	ldr	r2, [pc, #32]	; (800ff94 <memp_malloc+0x48>)
 800ff72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7ff ffb6 	bl	800fee8 <do_memp_malloc_pool>
 800ff7c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3710      	adds	r7, #16
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	0801e494 	.word	0x0801e494
 800ff8c:	0801e524 	.word	0x0801e524
 800ff90:	0801e4e8 	.word	0x0801e4e8
 800ff94:	08021164 	.word	0x08021164

0800ff98 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	f003 0303 	and.w	r3, r3, #3
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d006      	beq.n	800ffba <do_memp_free_pool+0x22>
 800ffac:	4b0d      	ldr	r3, [pc, #52]	; (800ffe4 <do_memp_free_pool+0x4c>)
 800ffae:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ffb2:	490d      	ldr	r1, [pc, #52]	; (800ffe8 <do_memp_free_pool+0x50>)
 800ffb4:	480d      	ldr	r0, [pc, #52]	; (800ffec <do_memp_free_pool+0x54>)
 800ffb6:	f00c fed3 	bl	801cd60 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ffbe:	f00b fb47 	bl	801b650 <sys_arch_protect>
 800ffc2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	689b      	ldr	r3, [r3, #8]
 800ffd2:	68fa      	ldr	r2, [r7, #12]
 800ffd4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ffd6:	68b8      	ldr	r0, [r7, #8]
 800ffd8:	f00b fb48 	bl	801b66c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ffdc:	bf00      	nop
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	0801e494 	.word	0x0801e494
 800ffe8:	0801e544 	.word	0x0801e544
 800ffec:	0801e4e8 	.word	0x0801e4e8

0800fff0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	4603      	mov	r3, r0
 800fff8:	6039      	str	r1, [r7, #0]
 800fffa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fffc:	79fb      	ldrb	r3, [r7, #7]
 800fffe:	2b0c      	cmp	r3, #12
 8010000:	d907      	bls.n	8010012 <memp_free+0x22>
 8010002:	4b0c      	ldr	r3, [pc, #48]	; (8010034 <memp_free+0x44>)
 8010004:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010008:	490b      	ldr	r1, [pc, #44]	; (8010038 <memp_free+0x48>)
 801000a:	480c      	ldr	r0, [pc, #48]	; (801003c <memp_free+0x4c>)
 801000c:	f00c fea8 	bl	801cd60 <iprintf>
 8010010:	e00c      	b.n	801002c <memp_free+0x3c>

  if (mem == NULL) {
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d008      	beq.n	801002a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010018:	79fb      	ldrb	r3, [r7, #7]
 801001a:	4a09      	ldr	r2, [pc, #36]	; (8010040 <memp_free+0x50>)
 801001c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010020:	6839      	ldr	r1, [r7, #0]
 8010022:	4618      	mov	r0, r3
 8010024:	f7ff ffb8 	bl	800ff98 <do_memp_free_pool>
 8010028:	e000      	b.n	801002c <memp_free+0x3c>
    return;
 801002a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	0801e494 	.word	0x0801e494
 8010038:	0801e564 	.word	0x0801e564
 801003c:	0801e4e8 	.word	0x0801e4e8
 8010040:	08021164 	.word	0x08021164

08010044 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010044:	b480      	push	{r7}
 8010046:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010048:	bf00      	nop
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
	...

08010054 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b086      	sub	sp, #24
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
 8010060:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d108      	bne.n	801007a <netif_add+0x26>
 8010068:	4b5b      	ldr	r3, [pc, #364]	; (80101d8 <netif_add+0x184>)
 801006a:	f240 1227 	movw	r2, #295	; 0x127
 801006e:	495b      	ldr	r1, [pc, #364]	; (80101dc <netif_add+0x188>)
 8010070:	485b      	ldr	r0, [pc, #364]	; (80101e0 <netif_add+0x18c>)
 8010072:	f00c fe75 	bl	801cd60 <iprintf>
 8010076:	2300      	movs	r3, #0
 8010078:	e0a9      	b.n	80101ce <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801007a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007c:	2b00      	cmp	r3, #0
 801007e:	d108      	bne.n	8010092 <netif_add+0x3e>
 8010080:	4b55      	ldr	r3, [pc, #340]	; (80101d8 <netif_add+0x184>)
 8010082:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010086:	4957      	ldr	r1, [pc, #348]	; (80101e4 <netif_add+0x190>)
 8010088:	4855      	ldr	r0, [pc, #340]	; (80101e0 <netif_add+0x18c>)
 801008a:	f00c fe69 	bl	801cd60 <iprintf>
 801008e:	2300      	movs	r3, #0
 8010090:	e09d      	b.n	80101ce <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d101      	bne.n	801009c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010098:	4b53      	ldr	r3, [pc, #332]	; (80101e8 <netif_add+0x194>)
 801009a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d101      	bne.n	80100a6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80100a2:	4b51      	ldr	r3, [pc, #324]	; (80101e8 <netif_add+0x194>)
 80100a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d101      	bne.n	80100b0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80100ac:	4b4e      	ldr	r3, [pc, #312]	; (80101e8 <netif_add+0x194>)
 80100ae:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2200      	movs	r2, #0
 80100b4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2200      	movs	r2, #0
 80100ba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2200      	movs	r2, #0
 80100c0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	4a49      	ldr	r2, [pc, #292]	; (80101ec <netif_add+0x198>)
 80100c6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2200      	movs	r2, #0
 80100cc:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2200      	movs	r2, #0
 80100d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	3324      	adds	r3, #36	; 0x24
 80100da:	2204      	movs	r2, #4
 80100dc:	2100      	movs	r1, #0
 80100de:	4618      	mov	r0, r3
 80100e0:	f00c fddb 	bl	801cc9a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2200      	movs	r2, #0
 80100e8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6a3a      	ldr	r2, [r7, #32]
 80100ee:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80100f0:	4b3f      	ldr	r3, [pc, #252]	; (80101f0 <netif_add+0x19c>)
 80100f2:	781a      	ldrb	r2, [r3, #0]
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100fe:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	68b9      	ldr	r1, [r7, #8]
 8010106:	68f8      	ldr	r0, [r7, #12]
 8010108:	f000 f914 	bl	8010334 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801010c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	4798      	blx	r3
 8010112:	4603      	mov	r3, r0
 8010114:	2b00      	cmp	r3, #0
 8010116:	d001      	beq.n	801011c <netif_add+0xc8>
    return NULL;
 8010118:	2300      	movs	r3, #0
 801011a:	e058      	b.n	80101ce <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010122:	2bff      	cmp	r3, #255	; 0xff
 8010124:	d103      	bne.n	801012e <netif_add+0xda>
        netif->num = 0;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2200      	movs	r2, #0
 801012a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801012e:	2300      	movs	r3, #0
 8010130:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010132:	4b30      	ldr	r3, [pc, #192]	; (80101f4 <netif_add+0x1a0>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	617b      	str	r3, [r7, #20]
 8010138:	e02b      	b.n	8010192 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801013a:	697a      	ldr	r2, [r7, #20]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	429a      	cmp	r2, r3
 8010140:	d106      	bne.n	8010150 <netif_add+0xfc>
 8010142:	4b25      	ldr	r3, [pc, #148]	; (80101d8 <netif_add+0x184>)
 8010144:	f240 128b 	movw	r2, #395	; 0x18b
 8010148:	492b      	ldr	r1, [pc, #172]	; (80101f8 <netif_add+0x1a4>)
 801014a:	4825      	ldr	r0, [pc, #148]	; (80101e0 <netif_add+0x18c>)
 801014c:	f00c fe08 	bl	801cd60 <iprintf>
        num_netifs++;
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	3301      	adds	r3, #1
 8010154:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	2bff      	cmp	r3, #255	; 0xff
 801015a:	dd06      	ble.n	801016a <netif_add+0x116>
 801015c:	4b1e      	ldr	r3, [pc, #120]	; (80101d8 <netif_add+0x184>)
 801015e:	f240 128d 	movw	r2, #397	; 0x18d
 8010162:	4926      	ldr	r1, [pc, #152]	; (80101fc <netif_add+0x1a8>)
 8010164:	481e      	ldr	r0, [pc, #120]	; (80101e0 <netif_add+0x18c>)
 8010166:	f00c fdfb 	bl	801cd60 <iprintf>
        if (netif2->num == netif->num) {
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010176:	429a      	cmp	r2, r3
 8010178:	d108      	bne.n	801018c <netif_add+0x138>
          netif->num++;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010180:	3301      	adds	r3, #1
 8010182:	b2da      	uxtb	r2, r3
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801018a:	e005      	b.n	8010198 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	617b      	str	r3, [r7, #20]
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d1d0      	bne.n	801013a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1be      	bne.n	801011c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80101a4:	2bfe      	cmp	r3, #254	; 0xfe
 80101a6:	d103      	bne.n	80101b0 <netif_add+0x15c>
    netif_num = 0;
 80101a8:	4b11      	ldr	r3, [pc, #68]	; (80101f0 <netif_add+0x19c>)
 80101aa:	2200      	movs	r2, #0
 80101ac:	701a      	strb	r2, [r3, #0]
 80101ae:	e006      	b.n	80101be <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80101b6:	3301      	adds	r3, #1
 80101b8:	b2da      	uxtb	r2, r3
 80101ba:	4b0d      	ldr	r3, [pc, #52]	; (80101f0 <netif_add+0x19c>)
 80101bc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80101be:	4b0d      	ldr	r3, [pc, #52]	; (80101f4 <netif_add+0x1a0>)
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80101c6:	4a0b      	ldr	r2, [pc, #44]	; (80101f4 <netif_add+0x1a0>)
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80101cc:	68fb      	ldr	r3, [r7, #12]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3718      	adds	r7, #24
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	0801e580 	.word	0x0801e580
 80101dc:	0801e614 	.word	0x0801e614
 80101e0:	0801e5d0 	.word	0x0801e5d0
 80101e4:	0801e630 	.word	0x0801e630
 80101e8:	080211e8 	.word	0x080211e8
 80101ec:	08010617 	.word	0x08010617
 80101f0:	2000afa4 	.word	0x2000afa4
 80101f4:	200139e4 	.word	0x200139e4
 80101f8:	0801e654 	.word	0x0801e654
 80101fc:	0801e668 	.word	0x0801e668

08010200 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801020a:	6839      	ldr	r1, [r7, #0]
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f002 fb91 	bl	8012934 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010212:	6839      	ldr	r1, [r7, #0]
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f006 ffa3 	bl	8017160 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801021a:	bf00      	nop
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
	...

08010224 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b086      	sub	sp, #24
 8010228:	af00      	add	r7, sp, #0
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d106      	bne.n	8010244 <netif_do_set_ipaddr+0x20>
 8010236:	4b1d      	ldr	r3, [pc, #116]	; (80102ac <netif_do_set_ipaddr+0x88>)
 8010238:	f240 12cb 	movw	r2, #459	; 0x1cb
 801023c:	491c      	ldr	r1, [pc, #112]	; (80102b0 <netif_do_set_ipaddr+0x8c>)
 801023e:	481d      	ldr	r0, [pc, #116]	; (80102b4 <netif_do_set_ipaddr+0x90>)
 8010240:	f00c fd8e 	bl	801cd60 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d106      	bne.n	8010258 <netif_do_set_ipaddr+0x34>
 801024a:	4b18      	ldr	r3, [pc, #96]	; (80102ac <netif_do_set_ipaddr+0x88>)
 801024c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010250:	4917      	ldr	r1, [pc, #92]	; (80102b0 <netif_do_set_ipaddr+0x8c>)
 8010252:	4818      	ldr	r0, [pc, #96]	; (80102b4 <netif_do_set_ipaddr+0x90>)
 8010254:	f00c fd84 	bl	801cd60 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	3304      	adds	r3, #4
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	429a      	cmp	r2, r3
 8010264:	d01c      	beq.n	80102a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	3304      	adds	r3, #4
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010276:	f107 0314 	add.w	r3, r7, #20
 801027a:	4619      	mov	r1, r3
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7ff ffbf 	bl	8010200 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d002      	beq.n	801028e <netif_do_set_ipaddr+0x6a>
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	e000      	b.n	8010290 <netif_do_set_ipaddr+0x6c>
 801028e:	2300      	movs	r3, #0
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010294:	2101      	movs	r1, #1
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f000 f8d2 	bl	8010440 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801029c:	2301      	movs	r3, #1
 801029e:	e000      	b.n	80102a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80102a0:	2300      	movs	r3, #0
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3718      	adds	r7, #24
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	0801e580 	.word	0x0801e580
 80102b0:	0801e698 	.word	0x0801e698
 80102b4:	0801e5d0 	.word	0x0801e5d0

080102b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	3308      	adds	r3, #8
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d00a      	beq.n	80102e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d002      	beq.n	80102de <netif_do_set_netmask+0x26>
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	e000      	b.n	80102e0 <netif_do_set_netmask+0x28>
 80102de:	2300      	movs	r3, #0
 80102e0:	68fa      	ldr	r2, [r7, #12]
 80102e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80102e4:	2301      	movs	r3, #1
 80102e6:	e000      	b.n	80102ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr

080102f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80102f6:	b480      	push	{r7}
 80102f8:	b085      	sub	sp, #20
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	60f8      	str	r0, [r7, #12]
 80102fe:	60b9      	str	r1, [r7, #8]
 8010300:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	330c      	adds	r3, #12
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	429a      	cmp	r2, r3
 801030e:	d00a      	beq.n	8010326 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d002      	beq.n	801031c <netif_do_set_gw+0x26>
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	e000      	b.n	801031e <netif_do_set_gw+0x28>
 801031c:	2300      	movs	r3, #0
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010322:	2301      	movs	r3, #1
 8010324:	e000      	b.n	8010328 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010326:	2300      	movs	r3, #0
}
 8010328:	4618      	mov	r0, r3
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b088      	sub	sp, #32
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	607a      	str	r2, [r7, #4]
 8010340:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010342:	2300      	movs	r3, #0
 8010344:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010346:	2300      	movs	r3, #0
 8010348:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d101      	bne.n	8010354 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010350:	4b1c      	ldr	r3, [pc, #112]	; (80103c4 <netif_set_addr+0x90>)
 8010352:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d101      	bne.n	801035e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801035a:	4b1a      	ldr	r3, [pc, #104]	; (80103c4 <netif_set_addr+0x90>)
 801035c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d101      	bne.n	8010368 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010364:	4b17      	ldr	r3, [pc, #92]	; (80103c4 <netif_set_addr+0x90>)
 8010366:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d003      	beq.n	8010376 <netif_set_addr+0x42>
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d101      	bne.n	801037a <netif_set_addr+0x46>
 8010376:	2301      	movs	r3, #1
 8010378:	e000      	b.n	801037c <netif_set_addr+0x48>
 801037a:	2300      	movs	r3, #0
 801037c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d006      	beq.n	8010392 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010384:	f107 0310 	add.w	r3, r7, #16
 8010388:	461a      	mov	r2, r3
 801038a:	68b9      	ldr	r1, [r7, #8]
 801038c:	68f8      	ldr	r0, [r7, #12]
 801038e:	f7ff ff49 	bl	8010224 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010392:	69fa      	ldr	r2, [r7, #28]
 8010394:	6879      	ldr	r1, [r7, #4]
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f7ff ff8e 	bl	80102b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801039c:	69ba      	ldr	r2, [r7, #24]
 801039e:	6839      	ldr	r1, [r7, #0]
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	f7ff ffa8 	bl	80102f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d106      	bne.n	80103ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80103ac:	f107 0310 	add.w	r3, r7, #16
 80103b0:	461a      	mov	r2, r3
 80103b2:	68b9      	ldr	r1, [r7, #8]
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f7ff ff35 	bl	8010224 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80103ba:	bf00      	nop
 80103bc:	3720      	adds	r7, #32
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	080211e8 	.word	0x080211e8

080103c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80103d0:	4a04      	ldr	r2, [pc, #16]	; (80103e4 <netif_set_default+0x1c>)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80103d6:	bf00      	nop
 80103d8:	370c      	adds	r7, #12
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	200139e8 	.word	0x200139e8

080103e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d107      	bne.n	8010406 <netif_set_up+0x1e>
 80103f6:	4b0f      	ldr	r3, [pc, #60]	; (8010434 <netif_set_up+0x4c>)
 80103f8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80103fc:	490e      	ldr	r1, [pc, #56]	; (8010438 <netif_set_up+0x50>)
 80103fe:	480f      	ldr	r0, [pc, #60]	; (801043c <netif_set_up+0x54>)
 8010400:	f00c fcae 	bl	801cd60 <iprintf>
 8010404:	e013      	b.n	801042e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801040c:	f003 0301 	and.w	r3, r3, #1
 8010410:	2b00      	cmp	r3, #0
 8010412:	d10c      	bne.n	801042e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801041a:	f043 0301 	orr.w	r3, r3, #1
 801041e:	b2da      	uxtb	r2, r3
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010426:	2103      	movs	r1, #3
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 f809 	bl	8010440 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801042e:	3708      	adds	r7, #8
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	0801e580 	.word	0x0801e580
 8010438:	0801e708 	.word	0x0801e708
 801043c:	0801e5d0 	.word	0x0801e5d0

08010440 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	460b      	mov	r3, r1
 801044a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d106      	bne.n	8010460 <netif_issue_reports+0x20>
 8010452:	4b18      	ldr	r3, [pc, #96]	; (80104b4 <netif_issue_reports+0x74>)
 8010454:	f240 326d 	movw	r2, #877	; 0x36d
 8010458:	4917      	ldr	r1, [pc, #92]	; (80104b8 <netif_issue_reports+0x78>)
 801045a:	4818      	ldr	r0, [pc, #96]	; (80104bc <netif_issue_reports+0x7c>)
 801045c:	f00c fc80 	bl	801cd60 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010466:	f003 0304 	and.w	r3, r3, #4
 801046a:	2b00      	cmp	r3, #0
 801046c:	d01e      	beq.n	80104ac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010474:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010478:	2b00      	cmp	r3, #0
 801047a:	d017      	beq.n	80104ac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801047c:	78fb      	ldrb	r3, [r7, #3]
 801047e:	f003 0301 	and.w	r3, r3, #1
 8010482:	2b00      	cmp	r3, #0
 8010484:	d013      	beq.n	80104ae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	3304      	adds	r3, #4
 801048a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801048c:	2b00      	cmp	r3, #0
 801048e:	d00e      	beq.n	80104ae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010496:	f003 0308 	and.w	r3, r3, #8
 801049a:	2b00      	cmp	r3, #0
 801049c:	d007      	beq.n	80104ae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	3304      	adds	r3, #4
 80104a2:	4619      	mov	r1, r3
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f009 fc5b 	bl	8019d60 <etharp_request>
 80104aa:	e000      	b.n	80104ae <netif_issue_reports+0x6e>
    return;
 80104ac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	0801e580 	.word	0x0801e580
 80104b8:	0801e724 	.word	0x0801e724
 80104bc:	0801e5d0 	.word	0x0801e5d0

080104c0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d107      	bne.n	80104de <netif_set_down+0x1e>
 80104ce:	4b12      	ldr	r3, [pc, #72]	; (8010518 <netif_set_down+0x58>)
 80104d0:	f240 329b 	movw	r2, #923	; 0x39b
 80104d4:	4911      	ldr	r1, [pc, #68]	; (801051c <netif_set_down+0x5c>)
 80104d6:	4812      	ldr	r0, [pc, #72]	; (8010520 <netif_set_down+0x60>)
 80104d8:	f00c fc42 	bl	801cd60 <iprintf>
 80104dc:	e019      	b.n	8010512 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80104e4:	f003 0301 	and.w	r3, r3, #1
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d012      	beq.n	8010512 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80104f2:	f023 0301 	bic.w	r3, r3, #1
 80104f6:	b2da      	uxtb	r2, r3
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010504:	f003 0308 	and.w	r3, r3, #8
 8010508:	2b00      	cmp	r3, #0
 801050a:	d002      	beq.n	8010512 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f008 ffe1 	bl	80194d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	0801e580 	.word	0x0801e580
 801051c:	0801e748 	.word	0x0801e748
 8010520:	0801e5d0 	.word	0x0801e5d0

08010524 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d107      	bne.n	8010542 <netif_set_link_up+0x1e>
 8010532:	4b15      	ldr	r3, [pc, #84]	; (8010588 <netif_set_link_up+0x64>)
 8010534:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010538:	4914      	ldr	r1, [pc, #80]	; (801058c <netif_set_link_up+0x68>)
 801053a:	4815      	ldr	r0, [pc, #84]	; (8010590 <netif_set_link_up+0x6c>)
 801053c:	f00c fc10 	bl	801cd60 <iprintf>
 8010540:	e01e      	b.n	8010580 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010548:	f003 0304 	and.w	r3, r3, #4
 801054c:	2b00      	cmp	r3, #0
 801054e:	d117      	bne.n	8010580 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010556:	f043 0304 	orr.w	r3, r3, #4
 801055a:	b2da      	uxtb	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f007 fa26 	bl	80179b4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010568:	2103      	movs	r1, #3
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7ff ff68 	bl	8010440 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	69db      	ldr	r3, [r3, #28]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d003      	beq.n	8010580 <netif_set_link_up+0x5c>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	69db      	ldr	r3, [r3, #28]
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	0801e580 	.word	0x0801e580
 801058c:	0801e768 	.word	0x0801e768
 8010590:	0801e5d0 	.word	0x0801e5d0

08010594 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d107      	bne.n	80105b2 <netif_set_link_down+0x1e>
 80105a2:	4b11      	ldr	r3, [pc, #68]	; (80105e8 <netif_set_link_down+0x54>)
 80105a4:	f240 4206 	movw	r2, #1030	; 0x406
 80105a8:	4910      	ldr	r1, [pc, #64]	; (80105ec <netif_set_link_down+0x58>)
 80105aa:	4811      	ldr	r0, [pc, #68]	; (80105f0 <netif_set_link_down+0x5c>)
 80105ac:	f00c fbd8 	bl	801cd60 <iprintf>
 80105b0:	e017      	b.n	80105e2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105b8:	f003 0304 	and.w	r3, r3, #4
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d010      	beq.n	80105e2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105c6:	f023 0304 	bic.w	r3, r3, #4
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	69db      	ldr	r3, [r3, #28]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d003      	beq.n	80105e2 <netif_set_link_down+0x4e>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	69db      	ldr	r3, [r3, #28]
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80105e2:	3708      	adds	r7, #8
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	0801e580 	.word	0x0801e580
 80105ec:	0801e78c 	.word	0x0801e78c
 80105f0:	0801e5d0 	.word	0x0801e5d0

080105f4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d002      	beq.n	801060a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	683a      	ldr	r2, [r7, #0]
 8010608:	61da      	str	r2, [r3, #28]
  }
}
 801060a:	bf00      	nop
 801060c:	370c      	adds	r7, #12
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr

08010616 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010616:	b480      	push	{r7}
 8010618:	b085      	sub	sp, #20
 801061a:	af00      	add	r7, sp, #0
 801061c:	60f8      	str	r0, [r7, #12]
 801061e:	60b9      	str	r1, [r7, #8]
 8010620:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010622:	f06f 030b 	mvn.w	r3, #11
}
 8010626:	4618      	mov	r0, r3
 8010628:	3714      	adds	r7, #20
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr
	...

08010634 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010634:	b480      	push	{r7}
 8010636:	b085      	sub	sp, #20
 8010638:	af00      	add	r7, sp, #0
 801063a:	4603      	mov	r3, r0
 801063c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801063e:	79fb      	ldrb	r3, [r7, #7]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d013      	beq.n	801066c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010644:	4b0d      	ldr	r3, [pc, #52]	; (801067c <netif_get_by_index+0x48>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	60fb      	str	r3, [r7, #12]
 801064a:	e00c      	b.n	8010666 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010652:	3301      	adds	r3, #1
 8010654:	b2db      	uxtb	r3, r3
 8010656:	79fa      	ldrb	r2, [r7, #7]
 8010658:	429a      	cmp	r2, r3
 801065a:	d101      	bne.n	8010660 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	e006      	b.n	801066e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	60fb      	str	r3, [r7, #12]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d1ef      	bne.n	801064c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3714      	adds	r7, #20
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	200139e4 	.word	0x200139e4

08010680 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010686:	f00a ffe3 	bl	801b650 <sys_arch_protect>
 801068a:	6038      	str	r0, [r7, #0]
 801068c:	4b0d      	ldr	r3, [pc, #52]	; (80106c4 <pbuf_free_ooseq+0x44>)
 801068e:	2200      	movs	r2, #0
 8010690:	701a      	strb	r2, [r3, #0]
 8010692:	6838      	ldr	r0, [r7, #0]
 8010694:	f00a ffea 	bl	801b66c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010698:	4b0b      	ldr	r3, [pc, #44]	; (80106c8 <pbuf_free_ooseq+0x48>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	607b      	str	r3, [r7, #4]
 801069e:	e00a      	b.n	80106b6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d003      	beq.n	80106b0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f002 f981 	bl	80129b0 <tcp_free_ooseq>
      return;
 80106ae:	e005      	b.n	80106bc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	607b      	str	r3, [r7, #4]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1f1      	bne.n	80106a0 <pbuf_free_ooseq+0x20>
    }
  }
}
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	200139ec 	.word	0x200139ec
 80106c8:	200139f4 	.word	0x200139f4

080106cc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80106d4:	f7ff ffd4 	bl	8010680 <pbuf_free_ooseq>
}
 80106d8:	bf00      	nop
 80106da:	3708      	adds	r7, #8
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80106e6:	f00a ffb3 	bl	801b650 <sys_arch_protect>
 80106ea:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80106ec:	4b0f      	ldr	r3, [pc, #60]	; (801072c <pbuf_pool_is_empty+0x4c>)
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80106f2:	4b0e      	ldr	r3, [pc, #56]	; (801072c <pbuf_pool_is_empty+0x4c>)
 80106f4:	2201      	movs	r2, #1
 80106f6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f00a ffb7 	bl	801b66c <sys_arch_unprotect>

  if (!queued) {
 80106fe:	78fb      	ldrb	r3, [r7, #3]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d10f      	bne.n	8010724 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010704:	2100      	movs	r1, #0
 8010706:	480a      	ldr	r0, [pc, #40]	; (8010730 <pbuf_pool_is_empty+0x50>)
 8010708:	f7fe fee0 	bl	800f4cc <tcpip_try_callback>
 801070c:	4603      	mov	r3, r0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d008      	beq.n	8010724 <pbuf_pool_is_empty+0x44>
 8010712:	f00a ff9d 	bl	801b650 <sys_arch_protect>
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	4b04      	ldr	r3, [pc, #16]	; (801072c <pbuf_pool_is_empty+0x4c>)
 801071a:	2200      	movs	r2, #0
 801071c:	701a      	strb	r2, [r3, #0]
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f00a ffa4 	bl	801b66c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010724:	bf00      	nop
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	200139ec 	.word	0x200139ec
 8010730:	080106cd 	.word	0x080106cd

08010734 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010734:	b480      	push	{r7}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	4611      	mov	r1, r2
 8010740:	461a      	mov	r2, r3
 8010742:	460b      	mov	r3, r1
 8010744:	80fb      	strh	r3, [r7, #6]
 8010746:	4613      	mov	r3, r2
 8010748:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	68ba      	ldr	r2, [r7, #8]
 8010754:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	88fa      	ldrh	r2, [r7, #6]
 801075a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	88ba      	ldrh	r2, [r7, #4]
 8010760:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010762:	8b3b      	ldrh	r3, [r7, #24]
 8010764:	b2da      	uxtb	r2, r3
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	7f3a      	ldrb	r2, [r7, #28]
 801076e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2201      	movs	r2, #1
 8010774:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2200      	movs	r2, #0
 801077a:	73da      	strb	r2, [r3, #15]
}
 801077c:	bf00      	nop
 801077e:	3714      	adds	r7, #20
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr

08010788 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b08c      	sub	sp, #48	; 0x30
 801078c:	af02      	add	r7, sp, #8
 801078e:	4603      	mov	r3, r0
 8010790:	71fb      	strb	r3, [r7, #7]
 8010792:	460b      	mov	r3, r1
 8010794:	80bb      	strh	r3, [r7, #4]
 8010796:	4613      	mov	r3, r2
 8010798:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801079a:	79fb      	ldrb	r3, [r7, #7]
 801079c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801079e:	887b      	ldrh	r3, [r7, #2]
 80107a0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80107a4:	d07f      	beq.n	80108a6 <pbuf_alloc+0x11e>
 80107a6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80107aa:	f300 80c8 	bgt.w	801093e <pbuf_alloc+0x1b6>
 80107ae:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80107b2:	d010      	beq.n	80107d6 <pbuf_alloc+0x4e>
 80107b4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80107b8:	f300 80c1 	bgt.w	801093e <pbuf_alloc+0x1b6>
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d002      	beq.n	80107c6 <pbuf_alloc+0x3e>
 80107c0:	2b41      	cmp	r3, #65	; 0x41
 80107c2:	f040 80bc 	bne.w	801093e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80107c6:	887a      	ldrh	r2, [r7, #2]
 80107c8:	88bb      	ldrh	r3, [r7, #4]
 80107ca:	4619      	mov	r1, r3
 80107cc:	2000      	movs	r0, #0
 80107ce:	f000 f8d1 	bl	8010974 <pbuf_alloc_reference>
 80107d2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80107d4:	e0bd      	b.n	8010952 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80107d6:	2300      	movs	r3, #0
 80107d8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80107de:	88bb      	ldrh	r3, [r7, #4]
 80107e0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80107e2:	200c      	movs	r0, #12
 80107e4:	f7ff fbb2 	bl	800ff4c <memp_malloc>
 80107e8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d109      	bne.n	8010804 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80107f0:	f7ff ff76 	bl	80106e0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d002      	beq.n	8010800 <pbuf_alloc+0x78>
            pbuf_free(p);
 80107fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107fc:	f000 faa8 	bl	8010d50 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010800:	2300      	movs	r3, #0
 8010802:	e0a7      	b.n	8010954 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010804:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010806:	3303      	adds	r3, #3
 8010808:	b29b      	uxth	r3, r3
 801080a:	f023 0303 	bic.w	r3, r3, #3
 801080e:	b29b      	uxth	r3, r3
 8010810:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010814:	b29b      	uxth	r3, r3
 8010816:	8b7a      	ldrh	r2, [r7, #26]
 8010818:	4293      	cmp	r3, r2
 801081a:	bf28      	it	cs
 801081c:	4613      	movcs	r3, r2
 801081e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010822:	3310      	adds	r3, #16
 8010824:	693a      	ldr	r2, [r7, #16]
 8010826:	4413      	add	r3, r2
 8010828:	3303      	adds	r3, #3
 801082a:	f023 0303 	bic.w	r3, r3, #3
 801082e:	4618      	mov	r0, r3
 8010830:	89f9      	ldrh	r1, [r7, #14]
 8010832:	8b7a      	ldrh	r2, [r7, #26]
 8010834:	2300      	movs	r3, #0
 8010836:	9301      	str	r3, [sp, #4]
 8010838:	887b      	ldrh	r3, [r7, #2]
 801083a:	9300      	str	r3, [sp, #0]
 801083c:	460b      	mov	r3, r1
 801083e:	4601      	mov	r1, r0
 8010840:	6938      	ldr	r0, [r7, #16]
 8010842:	f7ff ff77 	bl	8010734 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	f003 0303 	and.w	r3, r3, #3
 801084e:	2b00      	cmp	r3, #0
 8010850:	d006      	beq.n	8010860 <pbuf_alloc+0xd8>
 8010852:	4b42      	ldr	r3, [pc, #264]	; (801095c <pbuf_alloc+0x1d4>)
 8010854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010858:	4941      	ldr	r1, [pc, #260]	; (8010960 <pbuf_alloc+0x1d8>)
 801085a:	4842      	ldr	r0, [pc, #264]	; (8010964 <pbuf_alloc+0x1dc>)
 801085c:	f00c fa80 	bl	801cd60 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010862:	3303      	adds	r3, #3
 8010864:	f023 0303 	bic.w	r3, r3, #3
 8010868:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801086c:	d106      	bne.n	801087c <pbuf_alloc+0xf4>
 801086e:	4b3b      	ldr	r3, [pc, #236]	; (801095c <pbuf_alloc+0x1d4>)
 8010870:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010874:	493c      	ldr	r1, [pc, #240]	; (8010968 <pbuf_alloc+0x1e0>)
 8010876:	483b      	ldr	r0, [pc, #236]	; (8010964 <pbuf_alloc+0x1dc>)
 8010878:	f00c fa72 	bl	801cd60 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087e:	2b00      	cmp	r3, #0
 8010880:	d102      	bne.n	8010888 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	627b      	str	r3, [r7, #36]	; 0x24
 8010886:	e002      	b.n	801088e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	693a      	ldr	r2, [r7, #16]
 801088c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010892:	8b7a      	ldrh	r2, [r7, #26]
 8010894:	89fb      	ldrh	r3, [r7, #14]
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801089e:	8b7b      	ldrh	r3, [r7, #26]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d19e      	bne.n	80107e2 <pbuf_alloc+0x5a>
      break;
 80108a4:	e055      	b.n	8010952 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80108a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108a8:	3303      	adds	r3, #3
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	f023 0303 	bic.w	r3, r3, #3
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	88bb      	ldrh	r3, [r7, #4]
 80108b4:	3303      	adds	r3, #3
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	f023 0303 	bic.w	r3, r3, #3
 80108bc:	b29b      	uxth	r3, r3
 80108be:	4413      	add	r3, r2
 80108c0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80108c2:	8b3b      	ldrh	r3, [r7, #24]
 80108c4:	3310      	adds	r3, #16
 80108c6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80108c8:	8b3a      	ldrh	r2, [r7, #24]
 80108ca:	88bb      	ldrh	r3, [r7, #4]
 80108cc:	3303      	adds	r3, #3
 80108ce:	f023 0303 	bic.w	r3, r3, #3
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d306      	bcc.n	80108e4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80108d6:	8afa      	ldrh	r2, [r7, #22]
 80108d8:	88bb      	ldrh	r3, [r7, #4]
 80108da:	3303      	adds	r3, #3
 80108dc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d201      	bcs.n	80108e8 <pbuf_alloc+0x160>
        return NULL;
 80108e4:	2300      	movs	r3, #0
 80108e6:	e035      	b.n	8010954 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80108e8:	8afb      	ldrh	r3, [r7, #22]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7ff f9ac 	bl	800fc48 <mem_malloc>
 80108f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80108f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <pbuf_alloc+0x174>
        return NULL;
 80108f8:	2300      	movs	r3, #0
 80108fa:	e02b      	b.n	8010954 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80108fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108fe:	3310      	adds	r3, #16
 8010900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010902:	4413      	add	r3, r2
 8010904:	3303      	adds	r3, #3
 8010906:	f023 0303 	bic.w	r3, r3, #3
 801090a:	4618      	mov	r0, r3
 801090c:	88b9      	ldrh	r1, [r7, #4]
 801090e:	88ba      	ldrh	r2, [r7, #4]
 8010910:	2300      	movs	r3, #0
 8010912:	9301      	str	r3, [sp, #4]
 8010914:	887b      	ldrh	r3, [r7, #2]
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	460b      	mov	r3, r1
 801091a:	4601      	mov	r1, r0
 801091c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801091e:	f7ff ff09 	bl	8010734 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	f003 0303 	and.w	r3, r3, #3
 801092a:	2b00      	cmp	r3, #0
 801092c:	d010      	beq.n	8010950 <pbuf_alloc+0x1c8>
 801092e:	4b0b      	ldr	r3, [pc, #44]	; (801095c <pbuf_alloc+0x1d4>)
 8010930:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010934:	490d      	ldr	r1, [pc, #52]	; (801096c <pbuf_alloc+0x1e4>)
 8010936:	480b      	ldr	r0, [pc, #44]	; (8010964 <pbuf_alloc+0x1dc>)
 8010938:	f00c fa12 	bl	801cd60 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801093c:	e008      	b.n	8010950 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801093e:	4b07      	ldr	r3, [pc, #28]	; (801095c <pbuf_alloc+0x1d4>)
 8010940:	f240 1227 	movw	r2, #295	; 0x127
 8010944:	490a      	ldr	r1, [pc, #40]	; (8010970 <pbuf_alloc+0x1e8>)
 8010946:	4807      	ldr	r0, [pc, #28]	; (8010964 <pbuf_alloc+0x1dc>)
 8010948:	f00c fa0a 	bl	801cd60 <iprintf>
      return NULL;
 801094c:	2300      	movs	r3, #0
 801094e:	e001      	b.n	8010954 <pbuf_alloc+0x1cc>
      break;
 8010950:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010954:	4618      	mov	r0, r3
 8010956:	3728      	adds	r7, #40	; 0x28
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	0801e7b0 	.word	0x0801e7b0
 8010960:	0801e7e0 	.word	0x0801e7e0
 8010964:	0801e810 	.word	0x0801e810
 8010968:	0801e838 	.word	0x0801e838
 801096c:	0801e86c 	.word	0x0801e86c
 8010970:	0801e898 	.word	0x0801e898

08010974 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b086      	sub	sp, #24
 8010978:	af02      	add	r7, sp, #8
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	460b      	mov	r3, r1
 801097e:	807b      	strh	r3, [r7, #2]
 8010980:	4613      	mov	r3, r2
 8010982:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010984:	883b      	ldrh	r3, [r7, #0]
 8010986:	2b41      	cmp	r3, #65	; 0x41
 8010988:	d009      	beq.n	801099e <pbuf_alloc_reference+0x2a>
 801098a:	883b      	ldrh	r3, [r7, #0]
 801098c:	2b01      	cmp	r3, #1
 801098e:	d006      	beq.n	801099e <pbuf_alloc_reference+0x2a>
 8010990:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <pbuf_alloc_reference+0x5c>)
 8010992:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010996:	490f      	ldr	r1, [pc, #60]	; (80109d4 <pbuf_alloc_reference+0x60>)
 8010998:	480f      	ldr	r0, [pc, #60]	; (80109d8 <pbuf_alloc_reference+0x64>)
 801099a:	f00c f9e1 	bl	801cd60 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801099e:	200b      	movs	r0, #11
 80109a0:	f7ff fad4 	bl	800ff4c <memp_malloc>
 80109a4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d101      	bne.n	80109b0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80109ac:	2300      	movs	r3, #0
 80109ae:	e00b      	b.n	80109c8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80109b0:	8879      	ldrh	r1, [r7, #2]
 80109b2:	887a      	ldrh	r2, [r7, #2]
 80109b4:	2300      	movs	r3, #0
 80109b6:	9301      	str	r3, [sp, #4]
 80109b8:	883b      	ldrh	r3, [r7, #0]
 80109ba:	9300      	str	r3, [sp, #0]
 80109bc:	460b      	mov	r3, r1
 80109be:	6879      	ldr	r1, [r7, #4]
 80109c0:	68f8      	ldr	r0, [r7, #12]
 80109c2:	f7ff feb7 	bl	8010734 <pbuf_init_alloced_pbuf>
  return p;
 80109c6:	68fb      	ldr	r3, [r7, #12]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3710      	adds	r7, #16
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	0801e7b0 	.word	0x0801e7b0
 80109d4:	0801e8b4 	.word	0x0801e8b4
 80109d8:	0801e810 	.word	0x0801e810

080109dc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b088      	sub	sp, #32
 80109e0:	af02      	add	r7, sp, #8
 80109e2:	607b      	str	r3, [r7, #4]
 80109e4:	4603      	mov	r3, r0
 80109e6:	73fb      	strb	r3, [r7, #15]
 80109e8:	460b      	mov	r3, r1
 80109ea:	81bb      	strh	r3, [r7, #12]
 80109ec:	4613      	mov	r3, r2
 80109ee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80109f0:	7bfb      	ldrb	r3, [r7, #15]
 80109f2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80109f4:	8a7b      	ldrh	r3, [r7, #18]
 80109f6:	3303      	adds	r3, #3
 80109f8:	f023 0203 	bic.w	r2, r3, #3
 80109fc:	89bb      	ldrh	r3, [r7, #12]
 80109fe:	441a      	add	r2, r3
 8010a00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d901      	bls.n	8010a0a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010a06:	2300      	movs	r3, #0
 8010a08:	e018      	b.n	8010a3c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010a0a:	6a3b      	ldr	r3, [r7, #32]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d007      	beq.n	8010a20 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010a10:	8a7b      	ldrh	r3, [r7, #18]
 8010a12:	3303      	adds	r3, #3
 8010a14:	f023 0303 	bic.w	r3, r3, #3
 8010a18:	6a3a      	ldr	r2, [r7, #32]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	617b      	str	r3, [r7, #20]
 8010a1e:	e001      	b.n	8010a24 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010a20:	2300      	movs	r3, #0
 8010a22:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	89b9      	ldrh	r1, [r7, #12]
 8010a28:	89ba      	ldrh	r2, [r7, #12]
 8010a2a:	2302      	movs	r3, #2
 8010a2c:	9301      	str	r3, [sp, #4]
 8010a2e:	897b      	ldrh	r3, [r7, #10]
 8010a30:	9300      	str	r3, [sp, #0]
 8010a32:	460b      	mov	r3, r1
 8010a34:	6979      	ldr	r1, [r7, #20]
 8010a36:	f7ff fe7d 	bl	8010734 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010a3a:	687b      	ldr	r3, [r7, #4]
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d106      	bne.n	8010a64 <pbuf_realloc+0x20>
 8010a56:	4b3a      	ldr	r3, [pc, #232]	; (8010b40 <pbuf_realloc+0xfc>)
 8010a58:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010a5c:	4939      	ldr	r1, [pc, #228]	; (8010b44 <pbuf_realloc+0x100>)
 8010a5e:	483a      	ldr	r0, [pc, #232]	; (8010b48 <pbuf_realloc+0x104>)
 8010a60:	f00c f97e 	bl	801cd60 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	891b      	ldrh	r3, [r3, #8]
 8010a68:	887a      	ldrh	r2, [r7, #2]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d263      	bcs.n	8010b36 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	891a      	ldrh	r2, [r3, #8]
 8010a72:	887b      	ldrh	r3, [r7, #2]
 8010a74:	1ad3      	subs	r3, r2, r3
 8010a76:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010a78:	887b      	ldrh	r3, [r7, #2]
 8010a7a:	817b      	strh	r3, [r7, #10]
  q = p;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010a80:	e018      	b.n	8010ab4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	895b      	ldrh	r3, [r3, #10]
 8010a86:	897a      	ldrh	r2, [r7, #10]
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	891a      	ldrh	r2, [r3, #8]
 8010a90:	893b      	ldrh	r3, [r7, #8]
 8010a92:	1ad3      	subs	r3, r2, r3
 8010a94:	b29a      	uxth	r2, r3
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d106      	bne.n	8010ab4 <pbuf_realloc+0x70>
 8010aa6:	4b26      	ldr	r3, [pc, #152]	; (8010b40 <pbuf_realloc+0xfc>)
 8010aa8:	f240 12af 	movw	r2, #431	; 0x1af
 8010aac:	4927      	ldr	r1, [pc, #156]	; (8010b4c <pbuf_realloc+0x108>)
 8010aae:	4826      	ldr	r0, [pc, #152]	; (8010b48 <pbuf_realloc+0x104>)
 8010ab0:	f00c f956 	bl	801cd60 <iprintf>
  while (rem_len > q->len) {
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	895b      	ldrh	r3, [r3, #10]
 8010ab8:	897a      	ldrh	r2, [r7, #10]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d8e1      	bhi.n	8010a82 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	7b1b      	ldrb	r3, [r3, #12]
 8010ac2:	f003 030f 	and.w	r3, r3, #15
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d121      	bne.n	8010b0e <pbuf_realloc+0xca>
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	895b      	ldrh	r3, [r3, #10]
 8010ace:	897a      	ldrh	r2, [r7, #10]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d01c      	beq.n	8010b0e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	7b5b      	ldrb	r3, [r3, #13]
 8010ad8:	f003 0302 	and.w	r3, r3, #2
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d116      	bne.n	8010b0e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	685a      	ldr	r2, [r3, #4]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	897b      	ldrh	r3, [r7, #10]
 8010aec:	4413      	add	r3, r2
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	4619      	mov	r1, r3
 8010af2:	68f8      	ldr	r0, [r7, #12]
 8010af4:	f7fe ff9e 	bl	800fa34 <mem_trim>
 8010af8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d106      	bne.n	8010b0e <pbuf_realloc+0xca>
 8010b00:	4b0f      	ldr	r3, [pc, #60]	; (8010b40 <pbuf_realloc+0xfc>)
 8010b02:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010b06:	4912      	ldr	r1, [pc, #72]	; (8010b50 <pbuf_realloc+0x10c>)
 8010b08:	480f      	ldr	r0, [pc, #60]	; (8010b48 <pbuf_realloc+0x104>)
 8010b0a:	f00c f929 	bl	801cd60 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	897a      	ldrh	r2, [r7, #10]
 8010b12:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	895a      	ldrh	r2, [r3, #10]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d004      	beq.n	8010b2e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f000 f911 	bl	8010d50 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2200      	movs	r2, #0
 8010b32:	601a      	str	r2, [r3, #0]
 8010b34:	e000      	b.n	8010b38 <pbuf_realloc+0xf4>
    return;
 8010b36:	bf00      	nop

}
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	0801e7b0 	.word	0x0801e7b0
 8010b44:	0801e8c8 	.word	0x0801e8c8
 8010b48:	0801e810 	.word	0x0801e810
 8010b4c:	0801e8e0 	.word	0x0801e8e0
 8010b50:	0801e8f8 	.word	0x0801e8f8

08010b54 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b086      	sub	sp, #24
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	4613      	mov	r3, r2
 8010b60:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d106      	bne.n	8010b76 <pbuf_add_header_impl+0x22>
 8010b68:	4b2b      	ldr	r3, [pc, #172]	; (8010c18 <pbuf_add_header_impl+0xc4>)
 8010b6a:	f240 12df 	movw	r2, #479	; 0x1df
 8010b6e:	492b      	ldr	r1, [pc, #172]	; (8010c1c <pbuf_add_header_impl+0xc8>)
 8010b70:	482b      	ldr	r0, [pc, #172]	; (8010c20 <pbuf_add_header_impl+0xcc>)
 8010b72:	f00c f8f5 	bl	801cd60 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d003      	beq.n	8010b84 <pbuf_add_header_impl+0x30>
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b82:	d301      	bcc.n	8010b88 <pbuf_add_header_impl+0x34>
    return 1;
 8010b84:	2301      	movs	r3, #1
 8010b86:	e043      	b.n	8010c10 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d101      	bne.n	8010b92 <pbuf_add_header_impl+0x3e>
    return 0;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	e03e      	b.n	8010c10 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	891a      	ldrh	r2, [r3, #8]
 8010b9a:	8a7b      	ldrh	r3, [r7, #18]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	8a7a      	ldrh	r2, [r7, #18]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d901      	bls.n	8010baa <pbuf_add_header_impl+0x56>
    return 1;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	e032      	b.n	8010c10 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	7b1b      	ldrb	r3, [r3, #12]
 8010bae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010bb0:	8a3b      	ldrh	r3, [r7, #16]
 8010bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00c      	beq.n	8010bd4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	685a      	ldr	r2, [r3, #4]
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	425b      	negs	r3, r3
 8010bc2:	4413      	add	r3, r2
 8010bc4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	3310      	adds	r3, #16
 8010bca:	697a      	ldr	r2, [r7, #20]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d20d      	bcs.n	8010bec <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	e01d      	b.n	8010c10 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010bd4:	79fb      	ldrb	r3, [r7, #7]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d006      	beq.n	8010be8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	685a      	ldr	r2, [r3, #4]
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	425b      	negs	r3, r3
 8010be2:	4413      	add	r3, r2
 8010be4:	617b      	str	r3, [r7, #20]
 8010be6:	e001      	b.n	8010bec <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010be8:	2301      	movs	r3, #1
 8010bea:	e011      	b.n	8010c10 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	697a      	ldr	r2, [r7, #20]
 8010bf0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	895a      	ldrh	r2, [r3, #10]
 8010bf6:	8a7b      	ldrh	r3, [r7, #18]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	891a      	ldrh	r2, [r3, #8]
 8010c04:	8a7b      	ldrh	r3, [r7, #18]
 8010c06:	4413      	add	r3, r2
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	811a      	strh	r2, [r3, #8]


  return 0;
 8010c0e:	2300      	movs	r3, #0
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3718      	adds	r7, #24
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	0801e7b0 	.word	0x0801e7b0
 8010c1c:	0801e914 	.word	0x0801e914
 8010c20:	0801e810 	.word	0x0801e810

08010c24 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010c2e:	2200      	movs	r2, #0
 8010c30:	6839      	ldr	r1, [r7, #0]
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f7ff ff8e 	bl	8010b54 <pbuf_add_header_impl>
 8010c38:	4603      	mov	r3, r0
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3708      	adds	r7, #8
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
	...

08010c44 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d106      	bne.n	8010c62 <pbuf_remove_header+0x1e>
 8010c54:	4b20      	ldr	r3, [pc, #128]	; (8010cd8 <pbuf_remove_header+0x94>)
 8010c56:	f240 224b 	movw	r2, #587	; 0x24b
 8010c5a:	4920      	ldr	r1, [pc, #128]	; (8010cdc <pbuf_remove_header+0x98>)
 8010c5c:	4820      	ldr	r0, [pc, #128]	; (8010ce0 <pbuf_remove_header+0x9c>)
 8010c5e:	f00c f87f 	bl	801cd60 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d003      	beq.n	8010c70 <pbuf_remove_header+0x2c>
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c6e:	d301      	bcc.n	8010c74 <pbuf_remove_header+0x30>
    return 1;
 8010c70:	2301      	movs	r3, #1
 8010c72:	e02c      	b.n	8010cce <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d101      	bne.n	8010c7e <pbuf_remove_header+0x3a>
    return 0;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	e027      	b.n	8010cce <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	895b      	ldrh	r3, [r3, #10]
 8010c86:	89fa      	ldrh	r2, [r7, #14]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d908      	bls.n	8010c9e <pbuf_remove_header+0x5a>
 8010c8c:	4b12      	ldr	r3, [pc, #72]	; (8010cd8 <pbuf_remove_header+0x94>)
 8010c8e:	f240 2255 	movw	r2, #597	; 0x255
 8010c92:	4914      	ldr	r1, [pc, #80]	; (8010ce4 <pbuf_remove_header+0xa0>)
 8010c94:	4812      	ldr	r0, [pc, #72]	; (8010ce0 <pbuf_remove_header+0x9c>)
 8010c96:	f00c f863 	bl	801cd60 <iprintf>
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	e017      	b.n	8010cce <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	685a      	ldr	r2, [r3, #4]
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	441a      	add	r2, r3
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	895a      	ldrh	r2, [r3, #10]
 8010cb4:	89fb      	ldrh	r3, [r7, #14]
 8010cb6:	1ad3      	subs	r3, r2, r3
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	891a      	ldrh	r2, [r3, #8]
 8010cc2:	89fb      	ldrh	r3, [r7, #14]
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3710      	adds	r7, #16
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	0801e7b0 	.word	0x0801e7b0
 8010cdc:	0801e914 	.word	0x0801e914
 8010ce0:	0801e810 	.word	0x0801e810
 8010ce4:	0801e920 	.word	0x0801e920

08010ce8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	807b      	strh	r3, [r7, #2]
 8010cf4:	4613      	mov	r3, r2
 8010cf6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010cf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	da08      	bge.n	8010d12 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010d00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d04:	425b      	negs	r3, r3
 8010d06:	4619      	mov	r1, r3
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7ff ff9b 	bl	8010c44 <pbuf_remove_header>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	e007      	b.n	8010d22 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010d12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d16:	787a      	ldrb	r2, [r7, #1]
 8010d18:	4619      	mov	r1, r3
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f7ff ff1a 	bl	8010b54 <pbuf_add_header_impl>
 8010d20:	4603      	mov	r3, r0
  }
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3708      	adds	r7, #8
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}

08010d2a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010d2a:	b580      	push	{r7, lr}
 8010d2c:	b082      	sub	sp, #8
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
 8010d32:	460b      	mov	r3, r1
 8010d34:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010d36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f7ff ffd2 	bl	8010ce8 <pbuf_header_impl>
 8010d44:	4603      	mov	r3, r0
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3708      	adds	r7, #8
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
	...

08010d50 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b088      	sub	sp, #32
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d10b      	bne.n	8010d76 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d106      	bne.n	8010d72 <pbuf_free+0x22>
 8010d64:	4b3b      	ldr	r3, [pc, #236]	; (8010e54 <pbuf_free+0x104>)
 8010d66:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010d6a:	493b      	ldr	r1, [pc, #236]	; (8010e58 <pbuf_free+0x108>)
 8010d6c:	483b      	ldr	r0, [pc, #236]	; (8010e5c <pbuf_free+0x10c>)
 8010d6e:	f00b fff7 	bl	801cd60 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	e069      	b.n	8010e4a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010d7a:	e062      	b.n	8010e42 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010d7c:	f00a fc68 	bl	801b650 <sys_arch_protect>
 8010d80:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	7b9b      	ldrb	r3, [r3, #14]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d106      	bne.n	8010d98 <pbuf_free+0x48>
 8010d8a:	4b32      	ldr	r3, [pc, #200]	; (8010e54 <pbuf_free+0x104>)
 8010d8c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010d90:	4933      	ldr	r1, [pc, #204]	; (8010e60 <pbuf_free+0x110>)
 8010d92:	4832      	ldr	r0, [pc, #200]	; (8010e5c <pbuf_free+0x10c>)
 8010d94:	f00b ffe4 	bl	801cd60 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	7b9b      	ldrb	r3, [r3, #14]
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	b2da      	uxtb	r2, r3
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	739a      	strb	r2, [r3, #14]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	7b9b      	ldrb	r3, [r3, #14]
 8010da8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010daa:	69b8      	ldr	r0, [r7, #24]
 8010dac:	f00a fc5e 	bl	801b66c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010db0:	7dfb      	ldrb	r3, [r7, #23]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d143      	bne.n	8010e3e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	7b1b      	ldrb	r3, [r3, #12]
 8010dc0:	f003 030f 	and.w	r3, r3, #15
 8010dc4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	7b5b      	ldrb	r3, [r3, #13]
 8010dca:	f003 0302 	and.w	r3, r3, #2
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d011      	beq.n	8010df6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d106      	bne.n	8010dec <pbuf_free+0x9c>
 8010dde:	4b1d      	ldr	r3, [pc, #116]	; (8010e54 <pbuf_free+0x104>)
 8010de0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010de4:	491f      	ldr	r1, [pc, #124]	; (8010e64 <pbuf_free+0x114>)
 8010de6:	481d      	ldr	r0, [pc, #116]	; (8010e5c <pbuf_free+0x10c>)
 8010de8:	f00b ffba 	bl	801cd60 <iprintf>
        pc->custom_free_function(p);
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	691b      	ldr	r3, [r3, #16]
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	4798      	blx	r3
 8010df4:	e01d      	b.n	8010e32 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010df6:	7bfb      	ldrb	r3, [r7, #15]
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d104      	bne.n	8010e06 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010dfc:	6879      	ldr	r1, [r7, #4]
 8010dfe:	200c      	movs	r0, #12
 8010e00:	f7ff f8f6 	bl	800fff0 <memp_free>
 8010e04:	e015      	b.n	8010e32 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010e06:	7bfb      	ldrb	r3, [r7, #15]
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d104      	bne.n	8010e16 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010e0c:	6879      	ldr	r1, [r7, #4]
 8010e0e:	200b      	movs	r0, #11
 8010e10:	f7ff f8ee 	bl	800fff0 <memp_free>
 8010e14:	e00d      	b.n	8010e32 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010e16:	7bfb      	ldrb	r3, [r7, #15]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d103      	bne.n	8010e24 <pbuf_free+0xd4>
          mem_free(p);
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7fe fd79 	bl	800f914 <mem_free>
 8010e22:	e006      	b.n	8010e32 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010e24:	4b0b      	ldr	r3, [pc, #44]	; (8010e54 <pbuf_free+0x104>)
 8010e26:	f240 320f 	movw	r2, #783	; 0x30f
 8010e2a:	490f      	ldr	r1, [pc, #60]	; (8010e68 <pbuf_free+0x118>)
 8010e2c:	480b      	ldr	r0, [pc, #44]	; (8010e5c <pbuf_free+0x10c>)
 8010e2e:	f00b ff97 	bl	801cd60 <iprintf>
        }
      }
      count++;
 8010e32:	7ffb      	ldrb	r3, [r7, #31]
 8010e34:	3301      	adds	r3, #1
 8010e36:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	607b      	str	r3, [r7, #4]
 8010e3c:	e001      	b.n	8010e42 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d199      	bne.n	8010d7c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3720      	adds	r7, #32
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	0801e7b0 	.word	0x0801e7b0
 8010e58:	0801e914 	.word	0x0801e914
 8010e5c:	0801e810 	.word	0x0801e810
 8010e60:	0801e940 	.word	0x0801e940
 8010e64:	0801e958 	.word	0x0801e958
 8010e68:	0801e97c 	.word	0x0801e97c

08010e6c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b085      	sub	sp, #20
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010e74:	2300      	movs	r3, #0
 8010e76:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010e78:	e005      	b.n	8010e86 <pbuf_clen+0x1a>
    ++len;
 8010e7a:	89fb      	ldrh	r3, [r7, #14]
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d1f6      	bne.n	8010e7a <pbuf_clen+0xe>
  }
  return len;
 8010e8c:	89fb      	ldrh	r3, [r7, #14]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3714      	adds	r7, #20
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr
	...

08010e9c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d016      	beq.n	8010ed8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010eaa:	f00a fbd1 	bl	801b650 <sys_arch_protect>
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	7b9b      	ldrb	r3, [r3, #14]
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	b2da      	uxtb	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	739a      	strb	r2, [r3, #14]
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	f00a fbd5 	bl	801b66c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	7b9b      	ldrb	r3, [r3, #14]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d106      	bne.n	8010ed8 <pbuf_ref+0x3c>
 8010eca:	4b05      	ldr	r3, [pc, #20]	; (8010ee0 <pbuf_ref+0x44>)
 8010ecc:	f240 3242 	movw	r2, #834	; 0x342
 8010ed0:	4904      	ldr	r1, [pc, #16]	; (8010ee4 <pbuf_ref+0x48>)
 8010ed2:	4805      	ldr	r0, [pc, #20]	; (8010ee8 <pbuf_ref+0x4c>)
 8010ed4:	f00b ff44 	bl	801cd60 <iprintf>
  }
}
 8010ed8:	bf00      	nop
 8010eda:	3710      	adds	r7, #16
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	0801e7b0 	.word	0x0801e7b0
 8010ee4:	0801e990 	.word	0x0801e990
 8010ee8:	0801e810 	.word	0x0801e810

08010eec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d002      	beq.n	8010f02 <pbuf_cat+0x16>
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d107      	bne.n	8010f12 <pbuf_cat+0x26>
 8010f02:	4b20      	ldr	r3, [pc, #128]	; (8010f84 <pbuf_cat+0x98>)
 8010f04:	f240 3259 	movw	r2, #857	; 0x359
 8010f08:	491f      	ldr	r1, [pc, #124]	; (8010f88 <pbuf_cat+0x9c>)
 8010f0a:	4820      	ldr	r0, [pc, #128]	; (8010f8c <pbuf_cat+0xa0>)
 8010f0c:	f00b ff28 	bl	801cd60 <iprintf>
 8010f10:	e034      	b.n	8010f7c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	60fb      	str	r3, [r7, #12]
 8010f16:	e00a      	b.n	8010f2e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	891a      	ldrh	r2, [r3, #8]
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	891b      	ldrh	r3, [r3, #8]
 8010f20:	4413      	add	r3, r2
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	60fb      	str	r3, [r7, #12]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d1f0      	bne.n	8010f18 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	891a      	ldrh	r2, [r3, #8]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	895b      	ldrh	r3, [r3, #10]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d006      	beq.n	8010f50 <pbuf_cat+0x64>
 8010f42:	4b10      	ldr	r3, [pc, #64]	; (8010f84 <pbuf_cat+0x98>)
 8010f44:	f240 3262 	movw	r2, #866	; 0x362
 8010f48:	4911      	ldr	r1, [pc, #68]	; (8010f90 <pbuf_cat+0xa4>)
 8010f4a:	4810      	ldr	r0, [pc, #64]	; (8010f8c <pbuf_cat+0xa0>)
 8010f4c:	f00b ff08 	bl	801cd60 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d006      	beq.n	8010f66 <pbuf_cat+0x7a>
 8010f58:	4b0a      	ldr	r3, [pc, #40]	; (8010f84 <pbuf_cat+0x98>)
 8010f5a:	f240 3263 	movw	r2, #867	; 0x363
 8010f5e:	490d      	ldr	r1, [pc, #52]	; (8010f94 <pbuf_cat+0xa8>)
 8010f60:	480a      	ldr	r0, [pc, #40]	; (8010f8c <pbuf_cat+0xa0>)
 8010f62:	f00b fefd 	bl	801cd60 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	891a      	ldrh	r2, [r3, #8]
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	891b      	ldrh	r3, [r3, #8]
 8010f6e:	4413      	add	r3, r2
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	683a      	ldr	r2, [r7, #0]
 8010f7a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010f7c:	3710      	adds	r7, #16
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	0801e7b0 	.word	0x0801e7b0
 8010f88:	0801e9a4 	.word	0x0801e9a4
 8010f8c:	0801e810 	.word	0x0801e810
 8010f90:	0801e9dc 	.word	0x0801e9dc
 8010f94:	0801ea0c 	.word	0x0801ea0c

08010f98 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010fa2:	6839      	ldr	r1, [r7, #0]
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f7ff ffa1 	bl	8010eec <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010faa:	6838      	ldr	r0, [r7, #0]
 8010fac:	f7ff ff76 	bl	8010e9c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010fb0:	bf00      	nop
 8010fb2:	3708      	adds	r7, #8
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b086      	sub	sp, #24
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	617b      	str	r3, [r7, #20]
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d008      	beq.n	8010fe2 <pbuf_copy+0x2a>
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d005      	beq.n	8010fe2 <pbuf_copy+0x2a>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	891a      	ldrh	r2, [r3, #8]
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	891b      	ldrh	r3, [r3, #8]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d209      	bcs.n	8010ff6 <pbuf_copy+0x3e>
 8010fe2:	4b57      	ldr	r3, [pc, #348]	; (8011140 <pbuf_copy+0x188>)
 8010fe4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010fe8:	4956      	ldr	r1, [pc, #344]	; (8011144 <pbuf_copy+0x18c>)
 8010fea:	4857      	ldr	r0, [pc, #348]	; (8011148 <pbuf_copy+0x190>)
 8010fec:	f00b feb8 	bl	801cd60 <iprintf>
 8010ff0:	f06f 030f 	mvn.w	r3, #15
 8010ff4:	e09f      	b.n	8011136 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	895b      	ldrh	r3, [r3, #10]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	1ad2      	subs	r2, r2, r3
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	895b      	ldrh	r3, [r3, #10]
 8011004:	4619      	mov	r1, r3
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	1acb      	subs	r3, r1, r3
 801100a:	429a      	cmp	r2, r3
 801100c:	d306      	bcc.n	801101c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	895b      	ldrh	r3, [r3, #10]
 8011012:	461a      	mov	r2, r3
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	60fb      	str	r3, [r7, #12]
 801101a:	e005      	b.n	8011028 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	895b      	ldrh	r3, [r3, #10]
 8011020:	461a      	mov	r2, r3
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	685a      	ldr	r2, [r3, #4]
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	18d0      	adds	r0, r2, r3
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	685a      	ldr	r2, [r3, #4]
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	4413      	add	r3, r2
 8011038:	68fa      	ldr	r2, [r7, #12]
 801103a:	4619      	mov	r1, r3
 801103c:	f00b fe1f 	bl	801cc7e <memcpy>
    offset_to += len;
 8011040:	697a      	ldr	r2, [r7, #20]
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	4413      	add	r3, r2
 8011046:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011048:	693a      	ldr	r2, [r7, #16]
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	4413      	add	r3, r2
 801104e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	895b      	ldrh	r3, [r3, #10]
 8011054:	461a      	mov	r2, r3
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	4293      	cmp	r3, r2
 801105a:	d906      	bls.n	801106a <pbuf_copy+0xb2>
 801105c:	4b38      	ldr	r3, [pc, #224]	; (8011140 <pbuf_copy+0x188>)
 801105e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011062:	493a      	ldr	r1, [pc, #232]	; (801114c <pbuf_copy+0x194>)
 8011064:	4838      	ldr	r0, [pc, #224]	; (8011148 <pbuf_copy+0x190>)
 8011066:	f00b fe7b 	bl	801cd60 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	895b      	ldrh	r3, [r3, #10]
 801106e:	461a      	mov	r2, r3
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	4293      	cmp	r3, r2
 8011074:	d906      	bls.n	8011084 <pbuf_copy+0xcc>
 8011076:	4b32      	ldr	r3, [pc, #200]	; (8011140 <pbuf_copy+0x188>)
 8011078:	f240 32da 	movw	r2, #986	; 0x3da
 801107c:	4934      	ldr	r1, [pc, #208]	; (8011150 <pbuf_copy+0x198>)
 801107e:	4832      	ldr	r0, [pc, #200]	; (8011148 <pbuf_copy+0x190>)
 8011080:	f00b fe6e 	bl	801cd60 <iprintf>
    if (offset_from >= p_from->len) {
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	895b      	ldrh	r3, [r3, #10]
 8011088:	461a      	mov	r2, r3
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	4293      	cmp	r3, r2
 801108e:	d304      	bcc.n	801109a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011090:	2300      	movs	r3, #0
 8011092:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	895b      	ldrh	r3, [r3, #10]
 801109e:	461a      	mov	r2, r3
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d114      	bne.n	80110d0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10c      	bne.n	80110d0 <pbuf_copy+0x118>
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d009      	beq.n	80110d0 <pbuf_copy+0x118>
 80110bc:	4b20      	ldr	r3, [pc, #128]	; (8011140 <pbuf_copy+0x188>)
 80110be:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80110c2:	4924      	ldr	r1, [pc, #144]	; (8011154 <pbuf_copy+0x19c>)
 80110c4:	4820      	ldr	r0, [pc, #128]	; (8011148 <pbuf_copy+0x190>)
 80110c6:	f00b fe4b 	bl	801cd60 <iprintf>
 80110ca:	f06f 030f 	mvn.w	r3, #15
 80110ce:	e032      	b.n	8011136 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d013      	beq.n	80110fe <pbuf_copy+0x146>
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	895a      	ldrh	r2, [r3, #10]
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	891b      	ldrh	r3, [r3, #8]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d10d      	bne.n	80110fe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d009      	beq.n	80110fe <pbuf_copy+0x146>
 80110ea:	4b15      	ldr	r3, [pc, #84]	; (8011140 <pbuf_copy+0x188>)
 80110ec:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80110f0:	4919      	ldr	r1, [pc, #100]	; (8011158 <pbuf_copy+0x1a0>)
 80110f2:	4815      	ldr	r0, [pc, #84]	; (8011148 <pbuf_copy+0x190>)
 80110f4:	f00b fe34 	bl	801cd60 <iprintf>
 80110f8:	f06f 0305 	mvn.w	r3, #5
 80110fc:	e01b      	b.n	8011136 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d013      	beq.n	801112c <pbuf_copy+0x174>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	895a      	ldrh	r2, [r3, #10]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	891b      	ldrh	r3, [r3, #8]
 801110c:	429a      	cmp	r2, r3
 801110e:	d10d      	bne.n	801112c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d009      	beq.n	801112c <pbuf_copy+0x174>
 8011118:	4b09      	ldr	r3, [pc, #36]	; (8011140 <pbuf_copy+0x188>)
 801111a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801111e:	490e      	ldr	r1, [pc, #56]	; (8011158 <pbuf_copy+0x1a0>)
 8011120:	4809      	ldr	r0, [pc, #36]	; (8011148 <pbuf_copy+0x190>)
 8011122:	f00b fe1d 	bl	801cd60 <iprintf>
 8011126:	f06f 0305 	mvn.w	r3, #5
 801112a:	e004      	b.n	8011136 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	f47f af61 	bne.w	8010ff6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011134:	2300      	movs	r3, #0
}
 8011136:	4618      	mov	r0, r3
 8011138:	3718      	adds	r7, #24
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	0801e7b0 	.word	0x0801e7b0
 8011144:	0801ea58 	.word	0x0801ea58
 8011148:	0801e810 	.word	0x0801e810
 801114c:	0801ea88 	.word	0x0801ea88
 8011150:	0801eaa0 	.word	0x0801eaa0
 8011154:	0801eabc 	.word	0x0801eabc
 8011158:	0801eacc 	.word	0x0801eacc

0801115c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b088      	sub	sp, #32
 8011160:	af00      	add	r7, sp, #0
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	4611      	mov	r1, r2
 8011168:	461a      	mov	r2, r3
 801116a:	460b      	mov	r3, r1
 801116c:	80fb      	strh	r3, [r7, #6]
 801116e:	4613      	mov	r3, r2
 8011170:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011172:	2300      	movs	r3, #0
 8011174:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011176:	2300      	movs	r3, #0
 8011178:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d108      	bne.n	8011192 <pbuf_copy_partial+0x36>
 8011180:	4b2b      	ldr	r3, [pc, #172]	; (8011230 <pbuf_copy_partial+0xd4>)
 8011182:	f240 420a 	movw	r2, #1034	; 0x40a
 8011186:	492b      	ldr	r1, [pc, #172]	; (8011234 <pbuf_copy_partial+0xd8>)
 8011188:	482b      	ldr	r0, [pc, #172]	; (8011238 <pbuf_copy_partial+0xdc>)
 801118a:	f00b fde9 	bl	801cd60 <iprintf>
 801118e:	2300      	movs	r3, #0
 8011190:	e04a      	b.n	8011228 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d108      	bne.n	80111aa <pbuf_copy_partial+0x4e>
 8011198:	4b25      	ldr	r3, [pc, #148]	; (8011230 <pbuf_copy_partial+0xd4>)
 801119a:	f240 420b 	movw	r2, #1035	; 0x40b
 801119e:	4927      	ldr	r1, [pc, #156]	; (801123c <pbuf_copy_partial+0xe0>)
 80111a0:	4825      	ldr	r0, [pc, #148]	; (8011238 <pbuf_copy_partial+0xdc>)
 80111a2:	f00b fddd 	bl	801cd60 <iprintf>
 80111a6:	2300      	movs	r3, #0
 80111a8:	e03e      	b.n	8011228 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	61fb      	str	r3, [r7, #28]
 80111ae:	e034      	b.n	801121a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80111b0:	88bb      	ldrh	r3, [r7, #4]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d00a      	beq.n	80111cc <pbuf_copy_partial+0x70>
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	895b      	ldrh	r3, [r3, #10]
 80111ba:	88ba      	ldrh	r2, [r7, #4]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d305      	bcc.n	80111cc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80111c0:	69fb      	ldr	r3, [r7, #28]
 80111c2:	895b      	ldrh	r3, [r3, #10]
 80111c4:	88ba      	ldrh	r2, [r7, #4]
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	80bb      	strh	r3, [r7, #4]
 80111ca:	e023      	b.n	8011214 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	895a      	ldrh	r2, [r3, #10]
 80111d0:	88bb      	ldrh	r3, [r7, #4]
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80111d6:	8b3a      	ldrh	r2, [r7, #24]
 80111d8:	88fb      	ldrh	r3, [r7, #6]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d901      	bls.n	80111e2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80111de:	88fb      	ldrh	r3, [r7, #6]
 80111e0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80111e2:	8b7b      	ldrh	r3, [r7, #26]
 80111e4:	68ba      	ldr	r2, [r7, #8]
 80111e6:	18d0      	adds	r0, r2, r3
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	685a      	ldr	r2, [r3, #4]
 80111ec:	88bb      	ldrh	r3, [r7, #4]
 80111ee:	4413      	add	r3, r2
 80111f0:	8b3a      	ldrh	r2, [r7, #24]
 80111f2:	4619      	mov	r1, r3
 80111f4:	f00b fd43 	bl	801cc7e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80111f8:	8afa      	ldrh	r2, [r7, #22]
 80111fa:	8b3b      	ldrh	r3, [r7, #24]
 80111fc:	4413      	add	r3, r2
 80111fe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011200:	8b7a      	ldrh	r2, [r7, #26]
 8011202:	8b3b      	ldrh	r3, [r7, #24]
 8011204:	4413      	add	r3, r2
 8011206:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011208:	88fa      	ldrh	r2, [r7, #6]
 801120a:	8b3b      	ldrh	r3, [r7, #24]
 801120c:	1ad3      	subs	r3, r2, r3
 801120e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011210:	2300      	movs	r3, #0
 8011212:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	61fb      	str	r3, [r7, #28]
 801121a:	88fb      	ldrh	r3, [r7, #6]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d002      	beq.n	8011226 <pbuf_copy_partial+0xca>
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d1c4      	bne.n	80111b0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011226:	8afb      	ldrh	r3, [r7, #22]
}
 8011228:	4618      	mov	r0, r3
 801122a:	3720      	adds	r7, #32
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	0801e7b0 	.word	0x0801e7b0
 8011234:	0801eaf8 	.word	0x0801eaf8
 8011238:	0801e810 	.word	0x0801e810
 801123c:	0801eb18 	.word	0x0801eb18

08011240 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	4603      	mov	r3, r0
 8011248:	603a      	str	r2, [r7, #0]
 801124a:	71fb      	strb	r3, [r7, #7]
 801124c:	460b      	mov	r3, r1
 801124e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	8919      	ldrh	r1, [r3, #8]
 8011254:	88ba      	ldrh	r2, [r7, #4]
 8011256:	79fb      	ldrb	r3, [r7, #7]
 8011258:	4618      	mov	r0, r3
 801125a:	f7ff fa95 	bl	8010788 <pbuf_alloc>
 801125e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d101      	bne.n	801126a <pbuf_clone+0x2a>
    return NULL;
 8011266:	2300      	movs	r3, #0
 8011268:	e011      	b.n	801128e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801126a:	6839      	ldr	r1, [r7, #0]
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	f7ff fea3 	bl	8010fb8 <pbuf_copy>
 8011272:	4603      	mov	r3, r0
 8011274:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011276:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d006      	beq.n	801128c <pbuf_clone+0x4c>
 801127e:	4b06      	ldr	r3, [pc, #24]	; (8011298 <pbuf_clone+0x58>)
 8011280:	f240 5224 	movw	r2, #1316	; 0x524
 8011284:	4905      	ldr	r1, [pc, #20]	; (801129c <pbuf_clone+0x5c>)
 8011286:	4806      	ldr	r0, [pc, #24]	; (80112a0 <pbuf_clone+0x60>)
 8011288:	f00b fd6a 	bl	801cd60 <iprintf>
  return q;
 801128c:	68fb      	ldr	r3, [r7, #12]
}
 801128e:	4618      	mov	r0, r3
 8011290:	3710      	adds	r7, #16
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}
 8011296:	bf00      	nop
 8011298:	0801e7b0 	.word	0x0801e7b0
 801129c:	0801ec24 	.word	0x0801ec24
 80112a0:	0801e810 	.word	0x0801e810

080112a4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80112a8:	f00b fd72 	bl	801cd90 <rand>
 80112ac:	4603      	mov	r3, r0
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80112ba:	b29a      	uxth	r2, r3
 80112bc:	4b01      	ldr	r3, [pc, #4]	; (80112c4 <tcp_init+0x20>)
 80112be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80112c0:	bf00      	nop
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	200000e4 	.word	0x200000e4

080112c8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	7d1b      	ldrb	r3, [r3, #20]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d105      	bne.n	80112e4 <tcp_free+0x1c>
 80112d8:	4b06      	ldr	r3, [pc, #24]	; (80112f4 <tcp_free+0x2c>)
 80112da:	22d4      	movs	r2, #212	; 0xd4
 80112dc:	4906      	ldr	r1, [pc, #24]	; (80112f8 <tcp_free+0x30>)
 80112de:	4807      	ldr	r0, [pc, #28]	; (80112fc <tcp_free+0x34>)
 80112e0:	f00b fd3e 	bl	801cd60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80112e4:	6879      	ldr	r1, [r7, #4]
 80112e6:	2001      	movs	r0, #1
 80112e8:	f7fe fe82 	bl	800fff0 <memp_free>
}
 80112ec:	bf00      	nop
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	0801ecb0 	.word	0x0801ecb0
 80112f8:	0801ece0 	.word	0x0801ece0
 80112fc:	0801ecf4 	.word	0x0801ecf4

08011300 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	7d1b      	ldrb	r3, [r3, #20]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d105      	bne.n	801131c <tcp_free_listen+0x1c>
 8011310:	4b06      	ldr	r3, [pc, #24]	; (801132c <tcp_free_listen+0x2c>)
 8011312:	22df      	movs	r2, #223	; 0xdf
 8011314:	4906      	ldr	r1, [pc, #24]	; (8011330 <tcp_free_listen+0x30>)
 8011316:	4807      	ldr	r0, [pc, #28]	; (8011334 <tcp_free_listen+0x34>)
 8011318:	f00b fd22 	bl	801cd60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801131c:	6879      	ldr	r1, [r7, #4]
 801131e:	2002      	movs	r0, #2
 8011320:	f7fe fe66 	bl	800fff0 <memp_free>
}
 8011324:	bf00      	nop
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	0801ecb0 	.word	0x0801ecb0
 8011330:	0801ed1c 	.word	0x0801ed1c
 8011334:	0801ecf4 	.word	0x0801ecf4

08011338 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801133c:	f000 fea2 	bl	8012084 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011340:	4b07      	ldr	r3, [pc, #28]	; (8011360 <tcp_tmr+0x28>)
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	3301      	adds	r3, #1
 8011346:	b2da      	uxtb	r2, r3
 8011348:	4b05      	ldr	r3, [pc, #20]	; (8011360 <tcp_tmr+0x28>)
 801134a:	701a      	strb	r2, [r3, #0]
 801134c:	4b04      	ldr	r3, [pc, #16]	; (8011360 <tcp_tmr+0x28>)
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	f003 0301 	and.w	r3, r3, #1
 8011354:	2b00      	cmp	r3, #0
 8011356:	d001      	beq.n	801135c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011358:	f000 fb54 	bl	8011a04 <tcp_slowtmr>
  }
}
 801135c:	bf00      	nop
 801135e:	bd80      	pop	{r7, pc}
 8011360:	2000afa5 	.word	0x2000afa5

08011364 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d105      	bne.n	8011380 <tcp_remove_listener+0x1c>
 8011374:	4b0d      	ldr	r3, [pc, #52]	; (80113ac <tcp_remove_listener+0x48>)
 8011376:	22ff      	movs	r2, #255	; 0xff
 8011378:	490d      	ldr	r1, [pc, #52]	; (80113b0 <tcp_remove_listener+0x4c>)
 801137a:	480e      	ldr	r0, [pc, #56]	; (80113b4 <tcp_remove_listener+0x50>)
 801137c:	f00b fcf0 	bl	801cd60 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	60fb      	str	r3, [r7, #12]
 8011384:	e00a      	b.n	801139c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801138a:	683a      	ldr	r2, [r7, #0]
 801138c:	429a      	cmp	r2, r3
 801138e:	d102      	bne.n	8011396 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2200      	movs	r2, #0
 8011394:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	60fb      	str	r3, [r7, #12]
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d1f1      	bne.n	8011386 <tcp_remove_listener+0x22>
    }
  }
}
 80113a2:	bf00      	nop
 80113a4:	bf00      	nop
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	0801ecb0 	.word	0x0801ecb0
 80113b0:	0801ed38 	.word	0x0801ed38
 80113b4:	0801ecf4 	.word	0x0801ecf4

080113b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d106      	bne.n	80113d4 <tcp_listen_closed+0x1c>
 80113c6:	4b14      	ldr	r3, [pc, #80]	; (8011418 <tcp_listen_closed+0x60>)
 80113c8:	f240 1211 	movw	r2, #273	; 0x111
 80113cc:	4913      	ldr	r1, [pc, #76]	; (801141c <tcp_listen_closed+0x64>)
 80113ce:	4814      	ldr	r0, [pc, #80]	; (8011420 <tcp_listen_closed+0x68>)
 80113d0:	f00b fcc6 	bl	801cd60 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	7d1b      	ldrb	r3, [r3, #20]
 80113d8:	2b01      	cmp	r3, #1
 80113da:	d006      	beq.n	80113ea <tcp_listen_closed+0x32>
 80113dc:	4b0e      	ldr	r3, [pc, #56]	; (8011418 <tcp_listen_closed+0x60>)
 80113de:	f44f 7289 	mov.w	r2, #274	; 0x112
 80113e2:	4910      	ldr	r1, [pc, #64]	; (8011424 <tcp_listen_closed+0x6c>)
 80113e4:	480e      	ldr	r0, [pc, #56]	; (8011420 <tcp_listen_closed+0x68>)
 80113e6:	f00b fcbb 	bl	801cd60 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80113ea:	2301      	movs	r3, #1
 80113ec:	60fb      	str	r3, [r7, #12]
 80113ee:	e00b      	b.n	8011408 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80113f0:	4a0d      	ldr	r2, [pc, #52]	; (8011428 <tcp_listen_closed+0x70>)
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	6879      	ldr	r1, [r7, #4]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff ffb1 	bl	8011364 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	3301      	adds	r3, #1
 8011406:	60fb      	str	r3, [r7, #12]
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2b03      	cmp	r3, #3
 801140c:	d9f0      	bls.n	80113f0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801140e:	bf00      	nop
 8011410:	bf00      	nop
 8011412:	3710      	adds	r7, #16
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	0801ecb0 	.word	0x0801ecb0
 801141c:	0801ed60 	.word	0x0801ed60
 8011420:	0801ecf4 	.word	0x0801ecf4
 8011424:	0801ed6c 	.word	0x0801ed6c
 8011428:	080211b0 	.word	0x080211b0

0801142c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801142c:	b5b0      	push	{r4, r5, r7, lr}
 801142e:	b088      	sub	sp, #32
 8011430:	af04      	add	r7, sp, #16
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	460b      	mov	r3, r1
 8011436:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d106      	bne.n	801144c <tcp_close_shutdown+0x20>
 801143e:	4b63      	ldr	r3, [pc, #396]	; (80115cc <tcp_close_shutdown+0x1a0>)
 8011440:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011444:	4962      	ldr	r1, [pc, #392]	; (80115d0 <tcp_close_shutdown+0x1a4>)
 8011446:	4863      	ldr	r0, [pc, #396]	; (80115d4 <tcp_close_shutdown+0x1a8>)
 8011448:	f00b fc8a 	bl	801cd60 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801144c:	78fb      	ldrb	r3, [r7, #3]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d066      	beq.n	8011520 <tcp_close_shutdown+0xf4>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	7d1b      	ldrb	r3, [r3, #20]
 8011456:	2b04      	cmp	r3, #4
 8011458:	d003      	beq.n	8011462 <tcp_close_shutdown+0x36>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	7d1b      	ldrb	r3, [r3, #20]
 801145e:	2b07      	cmp	r3, #7
 8011460:	d15e      	bne.n	8011520 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011466:	2b00      	cmp	r3, #0
 8011468:	d104      	bne.n	8011474 <tcp_close_shutdown+0x48>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801146e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011472:	d055      	beq.n	8011520 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	8b5b      	ldrh	r3, [r3, #26]
 8011478:	f003 0310 	and.w	r3, r3, #16
 801147c:	2b00      	cmp	r3, #0
 801147e:	d106      	bne.n	801148e <tcp_close_shutdown+0x62>
 8011480:	4b52      	ldr	r3, [pc, #328]	; (80115cc <tcp_close_shutdown+0x1a0>)
 8011482:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011486:	4954      	ldr	r1, [pc, #336]	; (80115d8 <tcp_close_shutdown+0x1ac>)
 8011488:	4852      	ldr	r0, [pc, #328]	; (80115d4 <tcp_close_shutdown+0x1a8>)
 801148a:	f00b fc69 	bl	801cd60 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011496:	687d      	ldr	r5, [r7, #4]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	3304      	adds	r3, #4
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	8ad2      	ldrh	r2, [r2, #22]
 80114a0:	6879      	ldr	r1, [r7, #4]
 80114a2:	8b09      	ldrh	r1, [r1, #24]
 80114a4:	9102      	str	r1, [sp, #8]
 80114a6:	9201      	str	r2, [sp, #4]
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	462b      	mov	r3, r5
 80114ac:	4622      	mov	r2, r4
 80114ae:	4601      	mov	r1, r0
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f004 fe8d 	bl	80161d0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f001 f8c6 	bl	8012648 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80114bc:	4b47      	ldr	r3, [pc, #284]	; (80115dc <tcp_close_shutdown+0x1b0>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d105      	bne.n	80114d2 <tcp_close_shutdown+0xa6>
 80114c6:	4b45      	ldr	r3, [pc, #276]	; (80115dc <tcp_close_shutdown+0x1b0>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	4a43      	ldr	r2, [pc, #268]	; (80115dc <tcp_close_shutdown+0x1b0>)
 80114ce:	6013      	str	r3, [r2, #0]
 80114d0:	e013      	b.n	80114fa <tcp_close_shutdown+0xce>
 80114d2:	4b42      	ldr	r3, [pc, #264]	; (80115dc <tcp_close_shutdown+0x1b0>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	60fb      	str	r3, [r7, #12]
 80114d8:	e00c      	b.n	80114f4 <tcp_close_shutdown+0xc8>
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d104      	bne.n	80114ee <tcp_close_shutdown+0xc2>
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	68da      	ldr	r2, [r3, #12]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	60da      	str	r2, [r3, #12]
 80114ec:	e005      	b.n	80114fa <tcp_close_shutdown+0xce>
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	60fb      	str	r3, [r7, #12]
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d1ef      	bne.n	80114da <tcp_close_shutdown+0xae>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2200      	movs	r2, #0
 80114fe:	60da      	str	r2, [r3, #12]
 8011500:	4b37      	ldr	r3, [pc, #220]	; (80115e0 <tcp_close_shutdown+0x1b4>)
 8011502:	2201      	movs	r2, #1
 8011504:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011506:	4b37      	ldr	r3, [pc, #220]	; (80115e4 <tcp_close_shutdown+0x1b8>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	429a      	cmp	r2, r3
 801150e:	d102      	bne.n	8011516 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011510:	f003 fd5a 	bl	8014fc8 <tcp_trigger_input_pcb_close>
 8011514:	e002      	b.n	801151c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f7ff fed6 	bl	80112c8 <tcp_free>
      }
      return ERR_OK;
 801151c:	2300      	movs	r3, #0
 801151e:	e050      	b.n	80115c2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	7d1b      	ldrb	r3, [r3, #20]
 8011524:	2b02      	cmp	r3, #2
 8011526:	d03b      	beq.n	80115a0 <tcp_close_shutdown+0x174>
 8011528:	2b02      	cmp	r3, #2
 801152a:	dc44      	bgt.n	80115b6 <tcp_close_shutdown+0x18a>
 801152c:	2b00      	cmp	r3, #0
 801152e:	d002      	beq.n	8011536 <tcp_close_shutdown+0x10a>
 8011530:	2b01      	cmp	r3, #1
 8011532:	d02a      	beq.n	801158a <tcp_close_shutdown+0x15e>
 8011534:	e03f      	b.n	80115b6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8adb      	ldrh	r3, [r3, #22]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d021      	beq.n	8011582 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801153e:	4b2a      	ldr	r3, [pc, #168]	; (80115e8 <tcp_close_shutdown+0x1bc>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	429a      	cmp	r2, r3
 8011546:	d105      	bne.n	8011554 <tcp_close_shutdown+0x128>
 8011548:	4b27      	ldr	r3, [pc, #156]	; (80115e8 <tcp_close_shutdown+0x1bc>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	68db      	ldr	r3, [r3, #12]
 801154e:	4a26      	ldr	r2, [pc, #152]	; (80115e8 <tcp_close_shutdown+0x1bc>)
 8011550:	6013      	str	r3, [r2, #0]
 8011552:	e013      	b.n	801157c <tcp_close_shutdown+0x150>
 8011554:	4b24      	ldr	r3, [pc, #144]	; (80115e8 <tcp_close_shutdown+0x1bc>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	60bb      	str	r3, [r7, #8]
 801155a:	e00c      	b.n	8011576 <tcp_close_shutdown+0x14a>
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	687a      	ldr	r2, [r7, #4]
 8011562:	429a      	cmp	r2, r3
 8011564:	d104      	bne.n	8011570 <tcp_close_shutdown+0x144>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	68da      	ldr	r2, [r3, #12]
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	60da      	str	r2, [r3, #12]
 801156e:	e005      	b.n	801157c <tcp_close_shutdown+0x150>
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	60bb      	str	r3, [r7, #8]
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d1ef      	bne.n	801155c <tcp_close_shutdown+0x130>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2200      	movs	r2, #0
 8011580:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f7ff fea0 	bl	80112c8 <tcp_free>
      break;
 8011588:	e01a      	b.n	80115c0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f7ff ff14 	bl	80113b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011590:	6879      	ldr	r1, [r7, #4]
 8011592:	4816      	ldr	r0, [pc, #88]	; (80115ec <tcp_close_shutdown+0x1c0>)
 8011594:	f001 f8a8 	bl	80126e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7ff feb1 	bl	8011300 <tcp_free_listen>
      break;
 801159e:	e00f      	b.n	80115c0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80115a0:	6879      	ldr	r1, [r7, #4]
 80115a2:	480e      	ldr	r0, [pc, #56]	; (80115dc <tcp_close_shutdown+0x1b0>)
 80115a4:	f001 f8a0 	bl	80126e8 <tcp_pcb_remove>
 80115a8:	4b0d      	ldr	r3, [pc, #52]	; (80115e0 <tcp_close_shutdown+0x1b4>)
 80115aa:	2201      	movs	r2, #1
 80115ac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7ff fe8a 	bl	80112c8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80115b4:	e004      	b.n	80115c0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f000 f81a 	bl	80115f0 <tcp_close_shutdown_fin>
 80115bc:	4603      	mov	r3, r0
 80115be:	e000      	b.n	80115c2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3710      	adds	r7, #16
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bdb0      	pop	{r4, r5, r7, pc}
 80115ca:	bf00      	nop
 80115cc:	0801ecb0 	.word	0x0801ecb0
 80115d0:	0801ed84 	.word	0x0801ed84
 80115d4:	0801ecf4 	.word	0x0801ecf4
 80115d8:	0801eda4 	.word	0x0801eda4
 80115dc:	200139f4 	.word	0x200139f4
 80115e0:	200139f0 	.word	0x200139f0
 80115e4:	20013a08 	.word	0x20013a08
 80115e8:	20013a00 	.word	0x20013a00
 80115ec:	200139fc 	.word	0x200139fc

080115f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d106      	bne.n	801160c <tcp_close_shutdown_fin+0x1c>
 80115fe:	4b2e      	ldr	r3, [pc, #184]	; (80116b8 <tcp_close_shutdown_fin+0xc8>)
 8011600:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011604:	492d      	ldr	r1, [pc, #180]	; (80116bc <tcp_close_shutdown_fin+0xcc>)
 8011606:	482e      	ldr	r0, [pc, #184]	; (80116c0 <tcp_close_shutdown_fin+0xd0>)
 8011608:	f00b fbaa 	bl	801cd60 <iprintf>

  switch (pcb->state) {
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	7d1b      	ldrb	r3, [r3, #20]
 8011610:	2b07      	cmp	r3, #7
 8011612:	d020      	beq.n	8011656 <tcp_close_shutdown_fin+0x66>
 8011614:	2b07      	cmp	r3, #7
 8011616:	dc2b      	bgt.n	8011670 <tcp_close_shutdown_fin+0x80>
 8011618:	2b03      	cmp	r3, #3
 801161a:	d002      	beq.n	8011622 <tcp_close_shutdown_fin+0x32>
 801161c:	2b04      	cmp	r3, #4
 801161e:	d00d      	beq.n	801163c <tcp_close_shutdown_fin+0x4c>
 8011620:	e026      	b.n	8011670 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f003 fee2 	bl	80153ec <tcp_send_fin>
 8011628:	4603      	mov	r3, r0
 801162a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d11f      	bne.n	8011674 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2205      	movs	r2, #5
 8011638:	751a      	strb	r2, [r3, #20]
      }
      break;
 801163a:	e01b      	b.n	8011674 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f003 fed5 	bl	80153ec <tcp_send_fin>
 8011642:	4603      	mov	r3, r0
 8011644:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d114      	bne.n	8011678 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2205      	movs	r2, #5
 8011652:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011654:	e010      	b.n	8011678 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f003 fec8 	bl	80153ec <tcp_send_fin>
 801165c:	4603      	mov	r3, r0
 801165e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d109      	bne.n	801167c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2209      	movs	r2, #9
 801166c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801166e:	e005      	b.n	801167c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011670:	2300      	movs	r3, #0
 8011672:	e01c      	b.n	80116ae <tcp_close_shutdown_fin+0xbe>
      break;
 8011674:	bf00      	nop
 8011676:	e002      	b.n	801167e <tcp_close_shutdown_fin+0x8e>
      break;
 8011678:	bf00      	nop
 801167a:	e000      	b.n	801167e <tcp_close_shutdown_fin+0x8e>
      break;
 801167c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d103      	bne.n	801168e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f003 ffee 	bl	8015668 <tcp_output>
 801168c:	e00d      	b.n	80116aa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011696:	d108      	bne.n	80116aa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	8b5b      	ldrh	r3, [r3, #26]
 801169c:	f043 0308 	orr.w	r3, r3, #8
 80116a0:	b29a      	uxth	r2, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80116a6:	2300      	movs	r3, #0
 80116a8:	e001      	b.n	80116ae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80116aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	0801ecb0 	.word	0x0801ecb0
 80116bc:	0801ed60 	.word	0x0801ed60
 80116c0:	0801ecf4 	.word	0x0801ecf4

080116c4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d109      	bne.n	80116e6 <tcp_close+0x22>
 80116d2:	4b0f      	ldr	r3, [pc, #60]	; (8011710 <tcp_close+0x4c>)
 80116d4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80116d8:	490e      	ldr	r1, [pc, #56]	; (8011714 <tcp_close+0x50>)
 80116da:	480f      	ldr	r0, [pc, #60]	; (8011718 <tcp_close+0x54>)
 80116dc:	f00b fb40 	bl	801cd60 <iprintf>
 80116e0:	f06f 030f 	mvn.w	r3, #15
 80116e4:	e00f      	b.n	8011706 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	7d1b      	ldrb	r3, [r3, #20]
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d006      	beq.n	80116fc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	8b5b      	ldrh	r3, [r3, #26]
 80116f2:	f043 0310 	orr.w	r3, r3, #16
 80116f6:	b29a      	uxth	r2, r3
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80116fc:	2101      	movs	r1, #1
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f7ff fe94 	bl	801142c <tcp_close_shutdown>
 8011704:	4603      	mov	r3, r0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3708      	adds	r7, #8
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	0801ecb0 	.word	0x0801ecb0
 8011714:	0801edc0 	.word	0x0801edc0
 8011718:	0801ecf4 	.word	0x0801ecf4

0801171c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b08e      	sub	sp, #56	; 0x38
 8011720:	af04      	add	r7, sp, #16
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d107      	bne.n	801173c <tcp_abandon+0x20>
 801172c:	4b52      	ldr	r3, [pc, #328]	; (8011878 <tcp_abandon+0x15c>)
 801172e:	f240 223d 	movw	r2, #573	; 0x23d
 8011732:	4952      	ldr	r1, [pc, #328]	; (801187c <tcp_abandon+0x160>)
 8011734:	4852      	ldr	r0, [pc, #328]	; (8011880 <tcp_abandon+0x164>)
 8011736:	f00b fb13 	bl	801cd60 <iprintf>
 801173a:	e099      	b.n	8011870 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	7d1b      	ldrb	r3, [r3, #20]
 8011740:	2b01      	cmp	r3, #1
 8011742:	d106      	bne.n	8011752 <tcp_abandon+0x36>
 8011744:	4b4c      	ldr	r3, [pc, #304]	; (8011878 <tcp_abandon+0x15c>)
 8011746:	f44f 7210 	mov.w	r2, #576	; 0x240
 801174a:	494e      	ldr	r1, [pc, #312]	; (8011884 <tcp_abandon+0x168>)
 801174c:	484c      	ldr	r0, [pc, #304]	; (8011880 <tcp_abandon+0x164>)
 801174e:	f00b fb07 	bl	801cd60 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	7d1b      	ldrb	r3, [r3, #20]
 8011756:	2b0a      	cmp	r3, #10
 8011758:	d107      	bne.n	801176a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801175a:	6879      	ldr	r1, [r7, #4]
 801175c:	484a      	ldr	r0, [pc, #296]	; (8011888 <tcp_abandon+0x16c>)
 801175e:	f000 ffc3 	bl	80126e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f7ff fdb0 	bl	80112c8 <tcp_free>
 8011768:	e082      	b.n	8011870 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801176a:	2300      	movs	r3, #0
 801176c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011776:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801177c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011784:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	691b      	ldr	r3, [r3, #16]
 801178a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	7d1b      	ldrb	r3, [r3, #20]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d126      	bne.n	80117e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	8adb      	ldrh	r3, [r3, #22]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d02e      	beq.n	80117fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801179c:	4b3b      	ldr	r3, [pc, #236]	; (801188c <tcp_abandon+0x170>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d105      	bne.n	80117b2 <tcp_abandon+0x96>
 80117a6:	4b39      	ldr	r3, [pc, #228]	; (801188c <tcp_abandon+0x170>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	68db      	ldr	r3, [r3, #12]
 80117ac:	4a37      	ldr	r2, [pc, #220]	; (801188c <tcp_abandon+0x170>)
 80117ae:	6013      	str	r3, [r2, #0]
 80117b0:	e013      	b.n	80117da <tcp_abandon+0xbe>
 80117b2:	4b36      	ldr	r3, [pc, #216]	; (801188c <tcp_abandon+0x170>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	61fb      	str	r3, [r7, #28]
 80117b8:	e00c      	b.n	80117d4 <tcp_abandon+0xb8>
 80117ba:	69fb      	ldr	r3, [r7, #28]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	687a      	ldr	r2, [r7, #4]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d104      	bne.n	80117ce <tcp_abandon+0xb2>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	68da      	ldr	r2, [r3, #12]
 80117c8:	69fb      	ldr	r3, [r7, #28]
 80117ca:	60da      	str	r2, [r3, #12]
 80117cc:	e005      	b.n	80117da <tcp_abandon+0xbe>
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	61fb      	str	r3, [r7, #28]
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d1ef      	bne.n	80117ba <tcp_abandon+0x9e>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	60da      	str	r2, [r3, #12]
 80117e0:	e00b      	b.n	80117fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	8adb      	ldrh	r3, [r3, #22]
 80117ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80117ec:	6879      	ldr	r1, [r7, #4]
 80117ee:	4828      	ldr	r0, [pc, #160]	; (8011890 <tcp_abandon+0x174>)
 80117f0:	f000 ff7a 	bl	80126e8 <tcp_pcb_remove>
 80117f4:	4b27      	ldr	r3, [pc, #156]	; (8011894 <tcp_abandon+0x178>)
 80117f6:	2201      	movs	r2, #1
 80117f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d004      	beq.n	801180c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011806:	4618      	mov	r0, r3
 8011808:	f000 fd1c 	bl	8012244 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011810:	2b00      	cmp	r3, #0
 8011812:	d004      	beq.n	801181e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011818:	4618      	mov	r0, r3
 801181a:	f000 fd13 	bl	8012244 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011822:	2b00      	cmp	r3, #0
 8011824:	d004      	beq.n	8011830 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801182a:	4618      	mov	r0, r3
 801182c:	f000 fd0a 	bl	8012244 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00e      	beq.n	8011854 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011836:	6879      	ldr	r1, [r7, #4]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	3304      	adds	r3, #4
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	8b12      	ldrh	r2, [r2, #24]
 8011840:	9202      	str	r2, [sp, #8]
 8011842:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011844:	9201      	str	r2, [sp, #4]
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	460b      	mov	r3, r1
 801184a:	697a      	ldr	r2, [r7, #20]
 801184c:	69b9      	ldr	r1, [r7, #24]
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f004 fcbe 	bl	80161d0 <tcp_rst>
    }
    last_state = pcb->state;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	7d1b      	ldrb	r3, [r3, #20]
 8011858:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f7ff fd34 	bl	80112c8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d004      	beq.n	8011870 <tcp_abandon+0x154>
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	f06f 010c 	mvn.w	r1, #12
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	4798      	blx	r3
  }
}
 8011870:	3728      	adds	r7, #40	; 0x28
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	0801ecb0 	.word	0x0801ecb0
 801187c:	0801edf4 	.word	0x0801edf4
 8011880:	0801ecf4 	.word	0x0801ecf4
 8011884:	0801ee10 	.word	0x0801ee10
 8011888:	20013a04 	.word	0x20013a04
 801188c:	20013a00 	.word	0x20013a00
 8011890:	200139f4 	.word	0x200139f4
 8011894:	200139f0 	.word	0x200139f0

08011898 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80118a0:	2101      	movs	r1, #1
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f7ff ff3a 	bl	801171c <tcp_abandon>
}
 80118a8:	bf00      	nop
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d106      	bne.n	80118cc <tcp_update_rcv_ann_wnd+0x1c>
 80118be:	4b25      	ldr	r3, [pc, #148]	; (8011954 <tcp_update_rcv_ann_wnd+0xa4>)
 80118c0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80118c4:	4924      	ldr	r1, [pc, #144]	; (8011958 <tcp_update_rcv_ann_wnd+0xa8>)
 80118c6:	4825      	ldr	r0, [pc, #148]	; (801195c <tcp_update_rcv_ann_wnd+0xac>)
 80118c8:	f00b fa4a 	bl	801cd60 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d0:	687a      	ldr	r2, [r7, #4]
 80118d2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80118d4:	4413      	add	r3, r2
 80118d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80118e0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80118e4:	bf28      	it	cs
 80118e6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80118ea:	b292      	uxth	r2, r2
 80118ec:	4413      	add	r3, r2
 80118ee:	68fa      	ldr	r2, [r7, #12]
 80118f0:	1ad3      	subs	r3, r2, r3
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	db08      	blt.n	8011908 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	e020      	b.n	801194a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	2b00      	cmp	r3, #0
 8011914:	dd03      	ble.n	801191e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2200      	movs	r2, #0
 801191a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801191c:	e014      	b.n	8011948 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011930:	d306      	bcc.n	8011940 <tcp_update_rcv_ann_wnd+0x90>
 8011932:	4b08      	ldr	r3, [pc, #32]	; (8011954 <tcp_update_rcv_ann_wnd+0xa4>)
 8011934:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011938:	4909      	ldr	r1, [pc, #36]	; (8011960 <tcp_update_rcv_ann_wnd+0xb0>)
 801193a:	4808      	ldr	r0, [pc, #32]	; (801195c <tcp_update_rcv_ann_wnd+0xac>)
 801193c:	f00b fa10 	bl	801cd60 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	b29a      	uxth	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011948:	2300      	movs	r3, #0
  }
}
 801194a:	4618      	mov	r0, r3
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}
 8011952:	bf00      	nop
 8011954:	0801ecb0 	.word	0x0801ecb0
 8011958:	0801ef0c 	.word	0x0801ef0c
 801195c:	0801ecf4 	.word	0x0801ecf4
 8011960:	0801ef30 	.word	0x0801ef30

08011964 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	460b      	mov	r3, r1
 801196e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d107      	bne.n	8011986 <tcp_recved+0x22>
 8011976:	4b1f      	ldr	r3, [pc, #124]	; (80119f4 <tcp_recved+0x90>)
 8011978:	f240 32cf 	movw	r2, #975	; 0x3cf
 801197c:	491e      	ldr	r1, [pc, #120]	; (80119f8 <tcp_recved+0x94>)
 801197e:	481f      	ldr	r0, [pc, #124]	; (80119fc <tcp_recved+0x98>)
 8011980:	f00b f9ee 	bl	801cd60 <iprintf>
 8011984:	e032      	b.n	80119ec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	7d1b      	ldrb	r3, [r3, #20]
 801198a:	2b01      	cmp	r3, #1
 801198c:	d106      	bne.n	801199c <tcp_recved+0x38>
 801198e:	4b19      	ldr	r3, [pc, #100]	; (80119f4 <tcp_recved+0x90>)
 8011990:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011994:	491a      	ldr	r1, [pc, #104]	; (8011a00 <tcp_recved+0x9c>)
 8011996:	4819      	ldr	r0, [pc, #100]	; (80119fc <tcp_recved+0x98>)
 8011998:	f00b f9e2 	bl	801cd60 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80119a0:	887b      	ldrh	r3, [r7, #2]
 80119a2:	4413      	add	r3, r2
 80119a4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80119a6:	89fb      	ldrh	r3, [r7, #14]
 80119a8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80119ac:	d804      	bhi.n	80119b8 <tcp_recved+0x54>
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119b2:	89fa      	ldrh	r2, [r7, #14]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d204      	bcs.n	80119c2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80119be:	851a      	strh	r2, [r3, #40]	; 0x28
 80119c0:	e002      	b.n	80119c8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	89fa      	ldrh	r2, [r7, #14]
 80119c6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f7ff ff71 	bl	80118b0 <tcp_update_rcv_ann_wnd>
 80119ce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80119d6:	d309      	bcc.n	80119ec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	8b5b      	ldrh	r3, [r3, #26]
 80119dc:	f043 0302 	orr.w	r3, r3, #2
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f003 fe3e 	bl	8015668 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	0801ecb0 	.word	0x0801ecb0
 80119f8:	0801ef4c 	.word	0x0801ef4c
 80119fc:	0801ecf4 	.word	0x0801ecf4
 8011a00:	0801ef64 	.word	0x0801ef64

08011a04 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011a04:	b5b0      	push	{r4, r5, r7, lr}
 8011a06:	b090      	sub	sp, #64	; 0x40
 8011a08:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011a10:	4b94      	ldr	r3, [pc, #592]	; (8011c64 <tcp_slowtmr+0x260>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	3301      	adds	r3, #1
 8011a16:	4a93      	ldr	r2, [pc, #588]	; (8011c64 <tcp_slowtmr+0x260>)
 8011a18:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011a1a:	4b93      	ldr	r3, [pc, #588]	; (8011c68 <tcp_slowtmr+0x264>)
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	3301      	adds	r3, #1
 8011a20:	b2da      	uxtb	r2, r3
 8011a22:	4b91      	ldr	r3, [pc, #580]	; (8011c68 <tcp_slowtmr+0x264>)
 8011a24:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011a26:	2300      	movs	r3, #0
 8011a28:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011a2a:	4b90      	ldr	r3, [pc, #576]	; (8011c6c <tcp_slowtmr+0x268>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011a30:	e29f      	b.n	8011f72 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a34:	7d1b      	ldrb	r3, [r3, #20]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d106      	bne.n	8011a48 <tcp_slowtmr+0x44>
 8011a3a:	4b8d      	ldr	r3, [pc, #564]	; (8011c70 <tcp_slowtmr+0x26c>)
 8011a3c:	f240 42be 	movw	r2, #1214	; 0x4be
 8011a40:	498c      	ldr	r1, [pc, #560]	; (8011c74 <tcp_slowtmr+0x270>)
 8011a42:	488d      	ldr	r0, [pc, #564]	; (8011c78 <tcp_slowtmr+0x274>)
 8011a44:	f00b f98c 	bl	801cd60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4a:	7d1b      	ldrb	r3, [r3, #20]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d106      	bne.n	8011a5e <tcp_slowtmr+0x5a>
 8011a50:	4b87      	ldr	r3, [pc, #540]	; (8011c70 <tcp_slowtmr+0x26c>)
 8011a52:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011a56:	4989      	ldr	r1, [pc, #548]	; (8011c7c <tcp_slowtmr+0x278>)
 8011a58:	4887      	ldr	r0, [pc, #540]	; (8011c78 <tcp_slowtmr+0x274>)
 8011a5a:	f00b f981 	bl	801cd60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a60:	7d1b      	ldrb	r3, [r3, #20]
 8011a62:	2b0a      	cmp	r3, #10
 8011a64:	d106      	bne.n	8011a74 <tcp_slowtmr+0x70>
 8011a66:	4b82      	ldr	r3, [pc, #520]	; (8011c70 <tcp_slowtmr+0x26c>)
 8011a68:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011a6c:	4984      	ldr	r1, [pc, #528]	; (8011c80 <tcp_slowtmr+0x27c>)
 8011a6e:	4882      	ldr	r0, [pc, #520]	; (8011c78 <tcp_slowtmr+0x274>)
 8011a70:	f00b f976 	bl	801cd60 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a76:	7f9a      	ldrb	r2, [r3, #30]
 8011a78:	4b7b      	ldr	r3, [pc, #492]	; (8011c68 <tcp_slowtmr+0x264>)
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d105      	bne.n	8011a8c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011a8a:	e272      	b.n	8011f72 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011a8c:	4b76      	ldr	r3, [pc, #472]	; (8011c68 <tcp_slowtmr+0x264>)
 8011a8e:	781a      	ldrb	r2, [r3, #0]
 8011a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a92:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011a94:	2300      	movs	r3, #0
 8011a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa2:	7d1b      	ldrb	r3, [r3, #20]
 8011aa4:	2b02      	cmp	r3, #2
 8011aa6:	d10a      	bne.n	8011abe <tcp_slowtmr+0xba>
 8011aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011aae:	2b05      	cmp	r3, #5
 8011ab0:	d905      	bls.n	8011abe <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011abc:	e11e      	b.n	8011cfc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ac4:	2b0b      	cmp	r3, #11
 8011ac6:	d905      	bls.n	8011ad4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011acc:	3301      	adds	r3, #1
 8011ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ad2:	e113      	b.n	8011cfc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d075      	beq.n	8011bca <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d006      	beq.n	8011af4 <tcp_slowtmr+0xf0>
 8011ae6:	4b62      	ldr	r3, [pc, #392]	; (8011c70 <tcp_slowtmr+0x26c>)
 8011ae8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011aec:	4965      	ldr	r1, [pc, #404]	; (8011c84 <tcp_slowtmr+0x280>)
 8011aee:	4862      	ldr	r0, [pc, #392]	; (8011c78 <tcp_slowtmr+0x274>)
 8011af0:	f00b f936 	bl	801cd60 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d106      	bne.n	8011b0a <tcp_slowtmr+0x106>
 8011afc:	4b5c      	ldr	r3, [pc, #368]	; (8011c70 <tcp_slowtmr+0x26c>)
 8011afe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011b02:	4961      	ldr	r1, [pc, #388]	; (8011c88 <tcp_slowtmr+0x284>)
 8011b04:	485c      	ldr	r0, [pc, #368]	; (8011c78 <tcp_slowtmr+0x274>)
 8011b06:	f00b f92b 	bl	801cd60 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011b10:	2b0b      	cmp	r3, #11
 8011b12:	d905      	bls.n	8011b20 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b18:	3301      	adds	r3, #1
 8011b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b1e:	e0ed      	b.n	8011cfc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b26:	3b01      	subs	r3, #1
 8011b28:	4a58      	ldr	r2, [pc, #352]	; (8011c8c <tcp_slowtmr+0x288>)
 8011b2a:	5cd3      	ldrb	r3, [r2, r3]
 8011b2c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011b34:	7c7a      	ldrb	r2, [r7, #17]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d907      	bls.n	8011b4a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011b40:	3301      	adds	r3, #1
 8011b42:	b2da      	uxtb	r2, r3
 8011b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011b50:	7c7a      	ldrb	r2, [r7, #17]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	f200 80d2 	bhi.w	8011cfc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011b58:	2301      	movs	r3, #1
 8011b5a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d108      	bne.n	8011b78 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b68:	f004 fc26 	bl	80163b8 <tcp_zero_window_probe>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d014      	beq.n	8011b9c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011b72:	2300      	movs	r3, #0
 8011b74:	623b      	str	r3, [r7, #32]
 8011b76:	e011      	b.n	8011b9c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b7e:	4619      	mov	r1, r3
 8011b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b82:	f003 faeb 	bl	801515c <tcp_split_unsent_seg>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d107      	bne.n	8011b9c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011b8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b8e:	f003 fd6b 	bl	8015668 <tcp_output>
 8011b92:	4603      	mov	r3, r0
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d101      	bne.n	8011b9c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011b9c:	6a3b      	ldr	r3, [r7, #32]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f000 80ac 	beq.w	8011cfc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011bb2:	2b06      	cmp	r3, #6
 8011bb4:	f200 80a2 	bhi.w	8011cfc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	b2da      	uxtb	r2, r3
 8011bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011bc8:	e098      	b.n	8011cfc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bcc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	db0f      	blt.n	8011bf4 <tcp_slowtmr+0x1f0>
 8011bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011bda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d008      	beq.n	8011bf4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	3301      	adds	r3, #1
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	b21a      	sxth	r2, r3
 8011bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011c00:	429a      	cmp	r2, r3
 8011c02:	db7b      	blt.n	8011cfc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c06:	f004 f821 	bl	8015c4c <tcp_rexmit_rto_prepare>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d007      	beq.n	8011c20 <tcp_slowtmr+0x21c>
 8011c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d171      	bne.n	8011cfc <tcp_slowtmr+0x2f8>
 8011c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d06d      	beq.n	8011cfc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c22:	7d1b      	ldrb	r3, [r3, #20]
 8011c24:	2b02      	cmp	r3, #2
 8011c26:	d03a      	beq.n	8011c9e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c2e:	2b0c      	cmp	r3, #12
 8011c30:	bf28      	it	cs
 8011c32:	230c      	movcs	r3, #12
 8011c34:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011c3c:	10db      	asrs	r3, r3, #3
 8011c3e:	b21b      	sxth	r3, r3
 8011c40:	461a      	mov	r2, r3
 8011c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c48:	4413      	add	r3, r2
 8011c4a:	7efa      	ldrb	r2, [r7, #27]
 8011c4c:	4910      	ldr	r1, [pc, #64]	; (8011c90 <tcp_slowtmr+0x28c>)
 8011c4e:	5c8a      	ldrb	r2, [r1, r2]
 8011c50:	4093      	lsls	r3, r2
 8011c52:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	dc1a      	bgt.n	8011c94 <tcp_slowtmr+0x290>
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	b21a      	sxth	r2, r3
 8011c62:	e019      	b.n	8011c98 <tcp_slowtmr+0x294>
 8011c64:	200139f8 	.word	0x200139f8
 8011c68:	2000afa6 	.word	0x2000afa6
 8011c6c:	200139f4 	.word	0x200139f4
 8011c70:	0801ecb0 	.word	0x0801ecb0
 8011c74:	0801eff4 	.word	0x0801eff4
 8011c78:	0801ecf4 	.word	0x0801ecf4
 8011c7c:	0801f020 	.word	0x0801f020
 8011c80:	0801f04c 	.word	0x0801f04c
 8011c84:	0801f07c 	.word	0x0801f07c
 8011c88:	0801f0b0 	.word	0x0801f0b0
 8011c8c:	080211a8 	.word	0x080211a8
 8011c90:	08021198 	.word	0x08021198
 8011c94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	bf28      	it	cs
 8011cb4:	4613      	movcs	r3, r2
 8011cb6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011cb8:	8a7b      	ldrh	r3, [r7, #18]
 8011cba:	085b      	lsrs	r3, r3, #1
 8011cbc:	b29a      	uxth	r2, r3
 8011cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cce:	005b      	lsls	r3, r3, #1
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d206      	bcs.n	8011ce4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cda:	005b      	lsls	r3, r3, #1
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cf8:	f004 f818 	bl	8015d2c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfe:	7d1b      	ldrb	r3, [r3, #20]
 8011d00:	2b06      	cmp	r3, #6
 8011d02:	d111      	bne.n	8011d28 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d06:	8b5b      	ldrh	r3, [r3, #26]
 8011d08:	f003 0310 	and.w	r3, r3, #16
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d00b      	beq.n	8011d28 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d10:	4b9d      	ldr	r3, [pc, #628]	; (8011f88 <tcp_slowtmr+0x584>)
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d16:	6a1b      	ldr	r3, [r3, #32]
 8011d18:	1ad3      	subs	r3, r2, r3
 8011d1a:	2b28      	cmp	r3, #40	; 0x28
 8011d1c:	d904      	bls.n	8011d28 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d22:	3301      	adds	r3, #1
 8011d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2a:	7a5b      	ldrb	r3, [r3, #9]
 8011d2c:	f003 0308 	and.w	r3, r3, #8
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d04c      	beq.n	8011dce <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d36:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011d38:	2b04      	cmp	r3, #4
 8011d3a:	d003      	beq.n	8011d44 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011d40:	2b07      	cmp	r3, #7
 8011d42:	d144      	bne.n	8011dce <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d44:	4b90      	ldr	r3, [pc, #576]	; (8011f88 <tcp_slowtmr+0x584>)
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4a:	6a1b      	ldr	r3, [r3, #32]
 8011d4c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011d54:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011d58:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011d5c:	498b      	ldr	r1, [pc, #556]	; (8011f8c <tcp_slowtmr+0x588>)
 8011d5e:	fba1 1303 	umull	r1, r3, r1, r3
 8011d62:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d90a      	bls.n	8011d7e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011d72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d76:	3301      	adds	r3, #1
 8011d78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011d7c:	e027      	b.n	8011dce <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d7e:	4b82      	ldr	r3, [pc, #520]	; (8011f88 <tcp_slowtmr+0x584>)
 8011d80:	681a      	ldr	r2, [r3, #0]
 8011d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d84:	6a1b      	ldr	r3, [r3, #32]
 8011d86:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d90:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011d94:	4618      	mov	r0, r3
 8011d96:	4b7e      	ldr	r3, [pc, #504]	; (8011f90 <tcp_slowtmr+0x58c>)
 8011d98:	fb03 f300 	mul.w	r3, r3, r0
 8011d9c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011d9e:	497b      	ldr	r1, [pc, #492]	; (8011f8c <tcp_slowtmr+0x588>)
 8011da0:	fba1 1303 	umull	r1, r3, r1, r3
 8011da4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d911      	bls.n	8011dce <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dac:	f004 fac4 	bl	8016338 <tcp_keepalive>
 8011db0:	4603      	mov	r3, r0
 8011db2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011db6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d107      	bne.n	8011dce <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	b2da      	uxtb	r2, r3
 8011dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dca:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d011      	beq.n	8011dfa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011dd6:	4b6c      	ldr	r3, [pc, #432]	; (8011f88 <tcp_slowtmr+0x584>)
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ddc:	6a1b      	ldr	r3, [r3, #32]
 8011dde:	1ad2      	subs	r2, r2, r3
 8011de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011de6:	4619      	mov	r1, r3
 8011de8:	460b      	mov	r3, r1
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	440b      	add	r3, r1
 8011dee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d302      	bcc.n	8011dfa <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011df4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011df6:	f000 fddb 	bl	80129b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dfc:	7d1b      	ldrb	r3, [r3, #20]
 8011dfe:	2b03      	cmp	r3, #3
 8011e00:	d10b      	bne.n	8011e1a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e02:	4b61      	ldr	r3, [pc, #388]	; (8011f88 <tcp_slowtmr+0x584>)
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e08:	6a1b      	ldr	r3, [r3, #32]
 8011e0a:	1ad3      	subs	r3, r2, r3
 8011e0c:	2b28      	cmp	r3, #40	; 0x28
 8011e0e:	d904      	bls.n	8011e1a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e14:	3301      	adds	r3, #1
 8011e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1c:	7d1b      	ldrb	r3, [r3, #20]
 8011e1e:	2b09      	cmp	r3, #9
 8011e20:	d10b      	bne.n	8011e3a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011e22:	4b59      	ldr	r3, [pc, #356]	; (8011f88 <tcp_slowtmr+0x584>)
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e28:	6a1b      	ldr	r3, [r3, #32]
 8011e2a:	1ad3      	subs	r3, r2, r3
 8011e2c:	2bf0      	cmp	r3, #240	; 0xf0
 8011e2e:	d904      	bls.n	8011e3a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e34:	3301      	adds	r3, #1
 8011e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d060      	beq.n	8011f04 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e48:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011e4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e4c:	f000 fbfc 	bl	8012648 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d010      	beq.n	8011e78 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011e56:	4b4f      	ldr	r3, [pc, #316]	; (8011f94 <tcp_slowtmr+0x590>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d106      	bne.n	8011e6e <tcp_slowtmr+0x46a>
 8011e60:	4b4d      	ldr	r3, [pc, #308]	; (8011f98 <tcp_slowtmr+0x594>)
 8011e62:	f240 526d 	movw	r2, #1389	; 0x56d
 8011e66:	494d      	ldr	r1, [pc, #308]	; (8011f9c <tcp_slowtmr+0x598>)
 8011e68:	484d      	ldr	r0, [pc, #308]	; (8011fa0 <tcp_slowtmr+0x59c>)
 8011e6a:	f00a ff79 	bl	801cd60 <iprintf>
        prev->next = pcb->next;
 8011e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e70:	68da      	ldr	r2, [r3, #12]
 8011e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e74:	60da      	str	r2, [r3, #12]
 8011e76:	e00f      	b.n	8011e98 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011e78:	4b46      	ldr	r3, [pc, #280]	; (8011f94 <tcp_slowtmr+0x590>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d006      	beq.n	8011e90 <tcp_slowtmr+0x48c>
 8011e82:	4b45      	ldr	r3, [pc, #276]	; (8011f98 <tcp_slowtmr+0x594>)
 8011e84:	f240 5271 	movw	r2, #1393	; 0x571
 8011e88:	4946      	ldr	r1, [pc, #280]	; (8011fa4 <tcp_slowtmr+0x5a0>)
 8011e8a:	4845      	ldr	r0, [pc, #276]	; (8011fa0 <tcp_slowtmr+0x59c>)
 8011e8c:	f00a ff68 	bl	801cd60 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	4a3f      	ldr	r2, [pc, #252]	; (8011f94 <tcp_slowtmr+0x590>)
 8011e96:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011e98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d013      	beq.n	8011ec8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011ea8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eac:	3304      	adds	r3, #4
 8011eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011eb0:	8ad2      	ldrh	r2, [r2, #22]
 8011eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011eb4:	8b09      	ldrh	r1, [r1, #24]
 8011eb6:	9102      	str	r1, [sp, #8]
 8011eb8:	9201      	str	r2, [sp, #4]
 8011eba:	9300      	str	r3, [sp, #0]
 8011ebc:	462b      	mov	r3, r5
 8011ebe:	4622      	mov	r2, r4
 8011ec0:	4601      	mov	r1, r0
 8011ec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ec4:	f004 f984 	bl	80161d0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eca:	691b      	ldr	r3, [r3, #16]
 8011ecc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed0:	7d1b      	ldrb	r3, [r3, #20]
 8011ed2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eda:	68db      	ldr	r3, [r3, #12]
 8011edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011ede:	6838      	ldr	r0, [r7, #0]
 8011ee0:	f7ff f9f2 	bl	80112c8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011ee4:	4b30      	ldr	r3, [pc, #192]	; (8011fa8 <tcp_slowtmr+0x5a4>)
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d004      	beq.n	8011efa <tcp_slowtmr+0x4f6>
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f06f 010c 	mvn.w	r1, #12
 8011ef6:	68b8      	ldr	r0, [r7, #8]
 8011ef8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011efa:	4b2b      	ldr	r3, [pc, #172]	; (8011fa8 <tcp_slowtmr+0x5a4>)
 8011efc:	781b      	ldrb	r3, [r3, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d037      	beq.n	8011f72 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8011f02:	e590      	b.n	8011a26 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f10:	7f1b      	ldrb	r3, [r3, #28]
 8011f12:	3301      	adds	r3, #1
 8011f14:	b2da      	uxtb	r2, r3
 8011f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f18:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1c:	7f1a      	ldrb	r2, [r3, #28]
 8011f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f20:	7f5b      	ldrb	r3, [r3, #29]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d325      	bcc.n	8011f72 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f28:	2200      	movs	r2, #0
 8011f2a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011f2c:	4b1e      	ldr	r3, [pc, #120]	; (8011fa8 <tcp_slowtmr+0x5a4>)
 8011f2e:	2200      	movs	r2, #0
 8011f30:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d00b      	beq.n	8011f54 <tcp_slowtmr+0x550>
 8011f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f44:	6912      	ldr	r2, [r2, #16]
 8011f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f48:	4610      	mov	r0, r2
 8011f4a:	4798      	blx	r3
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011f52:	e002      	b.n	8011f5a <tcp_slowtmr+0x556>
 8011f54:	2300      	movs	r3, #0
 8011f56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011f5a:	4b13      	ldr	r3, [pc, #76]	; (8011fa8 <tcp_slowtmr+0x5a4>)
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d000      	beq.n	8011f64 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8011f62:	e560      	b.n	8011a26 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011f64:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d102      	bne.n	8011f72 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f6e:	f003 fb7b 	bl	8015668 <tcp_output>
  while (pcb != NULL) {
 8011f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f47f ad5c 	bne.w	8011a32 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011f7e:	4b0b      	ldr	r3, [pc, #44]	; (8011fac <tcp_slowtmr+0x5a8>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011f84:	e067      	b.n	8012056 <tcp_slowtmr+0x652>
 8011f86:	bf00      	nop
 8011f88:	200139f8 	.word	0x200139f8
 8011f8c:	10624dd3 	.word	0x10624dd3
 8011f90:	000124f8 	.word	0x000124f8
 8011f94:	200139f4 	.word	0x200139f4
 8011f98:	0801ecb0 	.word	0x0801ecb0
 8011f9c:	0801f0e8 	.word	0x0801f0e8
 8011fa0:	0801ecf4 	.word	0x0801ecf4
 8011fa4:	0801f114 	.word	0x0801f114
 8011fa8:	200139f0 	.word	0x200139f0
 8011fac:	20013a04 	.word	0x20013a04
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb2:	7d1b      	ldrb	r3, [r3, #20]
 8011fb4:	2b0a      	cmp	r3, #10
 8011fb6:	d006      	beq.n	8011fc6 <tcp_slowtmr+0x5c2>
 8011fb8:	4b2b      	ldr	r3, [pc, #172]	; (8012068 <tcp_slowtmr+0x664>)
 8011fba:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011fbe:	492b      	ldr	r1, [pc, #172]	; (801206c <tcp_slowtmr+0x668>)
 8011fc0:	482b      	ldr	r0, [pc, #172]	; (8012070 <tcp_slowtmr+0x66c>)
 8011fc2:	f00a fecd 	bl	801cd60 <iprintf>
    pcb_remove = 0;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011fcc:	4b29      	ldr	r3, [pc, #164]	; (8012074 <tcp_slowtmr+0x670>)
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd2:	6a1b      	ldr	r3, [r3, #32]
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	2bf0      	cmp	r3, #240	; 0xf0
 8011fd8:	d904      	bls.n	8011fe4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fde:	3301      	adds	r3, #1
 8011fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d02f      	beq.n	801204c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fee:	f000 fb2b 	bl	8012648 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d010      	beq.n	801201a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011ff8:	4b1f      	ldr	r3, [pc, #124]	; (8012078 <tcp_slowtmr+0x674>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d106      	bne.n	8012010 <tcp_slowtmr+0x60c>
 8012002:	4b19      	ldr	r3, [pc, #100]	; (8012068 <tcp_slowtmr+0x664>)
 8012004:	f240 52af 	movw	r2, #1455	; 0x5af
 8012008:	491c      	ldr	r1, [pc, #112]	; (801207c <tcp_slowtmr+0x678>)
 801200a:	4819      	ldr	r0, [pc, #100]	; (8012070 <tcp_slowtmr+0x66c>)
 801200c:	f00a fea8 	bl	801cd60 <iprintf>
        prev->next = pcb->next;
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	68da      	ldr	r2, [r3, #12]
 8012014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012016:	60da      	str	r2, [r3, #12]
 8012018:	e00f      	b.n	801203a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801201a:	4b17      	ldr	r3, [pc, #92]	; (8012078 <tcp_slowtmr+0x674>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012020:	429a      	cmp	r2, r3
 8012022:	d006      	beq.n	8012032 <tcp_slowtmr+0x62e>
 8012024:	4b10      	ldr	r3, [pc, #64]	; (8012068 <tcp_slowtmr+0x664>)
 8012026:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801202a:	4915      	ldr	r1, [pc, #84]	; (8012080 <tcp_slowtmr+0x67c>)
 801202c:	4810      	ldr	r0, [pc, #64]	; (8012070 <tcp_slowtmr+0x66c>)
 801202e:	f00a fe97 	bl	801cd60 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	4a10      	ldr	r2, [pc, #64]	; (8012078 <tcp_slowtmr+0x674>)
 8012038:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012044:	69f8      	ldr	r0, [r7, #28]
 8012046:	f7ff f93f 	bl	80112c8 <tcp_free>
 801204a:	e004      	b.n	8012056 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012052:	68db      	ldr	r3, [r3, #12]
 8012054:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012058:	2b00      	cmp	r3, #0
 801205a:	d1a9      	bne.n	8011fb0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801205c:	bf00      	nop
 801205e:	bf00      	nop
 8012060:	3730      	adds	r7, #48	; 0x30
 8012062:	46bd      	mov	sp, r7
 8012064:	bdb0      	pop	{r4, r5, r7, pc}
 8012066:	bf00      	nop
 8012068:	0801ecb0 	.word	0x0801ecb0
 801206c:	0801f140 	.word	0x0801f140
 8012070:	0801ecf4 	.word	0x0801ecf4
 8012074:	200139f8 	.word	0x200139f8
 8012078:	20013a04 	.word	0x20013a04
 801207c:	0801f170 	.word	0x0801f170
 8012080:	0801f198 	.word	0x0801f198

08012084 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801208a:	4b2d      	ldr	r3, [pc, #180]	; (8012140 <tcp_fasttmr+0xbc>)
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	3301      	adds	r3, #1
 8012090:	b2da      	uxtb	r2, r3
 8012092:	4b2b      	ldr	r3, [pc, #172]	; (8012140 <tcp_fasttmr+0xbc>)
 8012094:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012096:	4b2b      	ldr	r3, [pc, #172]	; (8012144 <tcp_fasttmr+0xc0>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801209c:	e048      	b.n	8012130 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	7f9a      	ldrb	r2, [r3, #30]
 80120a2:	4b27      	ldr	r3, [pc, #156]	; (8012140 <tcp_fasttmr+0xbc>)
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d03f      	beq.n	801212a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80120aa:	4b25      	ldr	r3, [pc, #148]	; (8012140 <tcp_fasttmr+0xbc>)
 80120ac:	781a      	ldrb	r2, [r3, #0]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	8b5b      	ldrh	r3, [r3, #26]
 80120b6:	f003 0301 	and.w	r3, r3, #1
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d010      	beq.n	80120e0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	8b5b      	ldrh	r3, [r3, #26]
 80120c2:	f043 0302 	orr.w	r3, r3, #2
 80120c6:	b29a      	uxth	r2, r3
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f003 facb 	bl	8015668 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	8b5b      	ldrh	r3, [r3, #26]
 80120d6:	f023 0303 	bic.w	r3, r3, #3
 80120da:	b29a      	uxth	r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	8b5b      	ldrh	r3, [r3, #26]
 80120e4:	f003 0308 	and.w	r3, r3, #8
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d009      	beq.n	8012100 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	8b5b      	ldrh	r3, [r3, #26]
 80120f0:	f023 0308 	bic.w	r3, r3, #8
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f7ff fa78 	bl	80115f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801210a:	2b00      	cmp	r3, #0
 801210c:	d00a      	beq.n	8012124 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801210e:	4b0e      	ldr	r3, [pc, #56]	; (8012148 <tcp_fasttmr+0xc4>)
 8012110:	2200      	movs	r2, #0
 8012112:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f000 f819 	bl	801214c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801211a:	4b0b      	ldr	r3, [pc, #44]	; (8012148 <tcp_fasttmr+0xc4>)
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d000      	beq.n	8012124 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012122:	e7b8      	b.n	8012096 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	607b      	str	r3, [r7, #4]
 8012128:	e002      	b.n	8012130 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d1b3      	bne.n	801209e <tcp_fasttmr+0x1a>
    }
  }
}
 8012136:	bf00      	nop
 8012138:	bf00      	nop
 801213a:	3708      	adds	r7, #8
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	2000afa6 	.word	0x2000afa6
 8012144:	200139f4 	.word	0x200139f4
 8012148:	200139f0 	.word	0x200139f0

0801214c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801214c:	b590      	push	{r4, r7, lr}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d109      	bne.n	801216e <tcp_process_refused_data+0x22>
 801215a:	4b37      	ldr	r3, [pc, #220]	; (8012238 <tcp_process_refused_data+0xec>)
 801215c:	f240 6209 	movw	r2, #1545	; 0x609
 8012160:	4936      	ldr	r1, [pc, #216]	; (801223c <tcp_process_refused_data+0xf0>)
 8012162:	4837      	ldr	r0, [pc, #220]	; (8012240 <tcp_process_refused_data+0xf4>)
 8012164:	f00a fdfc 	bl	801cd60 <iprintf>
 8012168:	f06f 030f 	mvn.w	r3, #15
 801216c:	e060      	b.n	8012230 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012172:	7b5b      	ldrb	r3, [r3, #13]
 8012174:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801217a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012188:	2b00      	cmp	r3, #0
 801218a:	d00b      	beq.n	80121a4 <tcp_process_refused_data+0x58>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6918      	ldr	r0, [r3, #16]
 8012196:	2300      	movs	r3, #0
 8012198:	68ba      	ldr	r2, [r7, #8]
 801219a:	6879      	ldr	r1, [r7, #4]
 801219c:	47a0      	blx	r4
 801219e:	4603      	mov	r3, r0
 80121a0:	73fb      	strb	r3, [r7, #15]
 80121a2:	e007      	b.n	80121b4 <tcp_process_refused_data+0x68>
 80121a4:	2300      	movs	r3, #0
 80121a6:	68ba      	ldr	r2, [r7, #8]
 80121a8:	6879      	ldr	r1, [r7, #4]
 80121aa:	2000      	movs	r0, #0
 80121ac:	f000 f8a4 	bl	80122f8 <tcp_recv_null>
 80121b0:	4603      	mov	r3, r0
 80121b2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80121b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d12a      	bne.n	8012212 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80121bc:	7bbb      	ldrb	r3, [r7, #14]
 80121be:	f003 0320 	and.w	r3, r3, #32
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d033      	beq.n	801222e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80121ce:	d005      	beq.n	80121dc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121d4:	3301      	adds	r3, #1
 80121d6:	b29a      	uxth	r2, r3
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d00b      	beq.n	80121fe <tcp_process_refused_data+0xb2>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6918      	ldr	r0, [r3, #16]
 80121f0:	2300      	movs	r3, #0
 80121f2:	2200      	movs	r2, #0
 80121f4:	6879      	ldr	r1, [r7, #4]
 80121f6:	47a0      	blx	r4
 80121f8:	4603      	mov	r3, r0
 80121fa:	73fb      	strb	r3, [r7, #15]
 80121fc:	e001      	b.n	8012202 <tcp_process_refused_data+0xb6>
 80121fe:	2300      	movs	r3, #0
 8012200:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012206:	f113 0f0d 	cmn.w	r3, #13
 801220a:	d110      	bne.n	801222e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801220c:	f06f 030c 	mvn.w	r3, #12
 8012210:	e00e      	b.n	8012230 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012216:	f113 0f0d 	cmn.w	r3, #13
 801221a:	d102      	bne.n	8012222 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801221c:	f06f 030c 	mvn.w	r3, #12
 8012220:	e006      	b.n	8012230 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	68ba      	ldr	r2, [r7, #8]
 8012226:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012228:	f06f 0304 	mvn.w	r3, #4
 801222c:	e000      	b.n	8012230 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801222e:	2300      	movs	r3, #0
}
 8012230:	4618      	mov	r0, r3
 8012232:	3714      	adds	r7, #20
 8012234:	46bd      	mov	sp, r7
 8012236:	bd90      	pop	{r4, r7, pc}
 8012238:	0801ecb0 	.word	0x0801ecb0
 801223c:	0801f1c0 	.word	0x0801f1c0
 8012240:	0801ecf4 	.word	0x0801ecf4

08012244 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801224c:	e007      	b.n	801225e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f000 f80a 	bl	801226e <tcp_seg_free>
    seg = next;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d1f4      	bne.n	801224e <tcp_segs_free+0xa>
  }
}
 8012264:	bf00      	nop
 8012266:	bf00      	nop
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}

0801226e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801226e:	b580      	push	{r7, lr}
 8012270:	b082      	sub	sp, #8
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d00c      	beq.n	8012296 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d004      	beq.n	801228e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	4618      	mov	r0, r3
 801228a:	f7fe fd61 	bl	8010d50 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801228e:	6879      	ldr	r1, [r7, #4]
 8012290:	2003      	movs	r0, #3
 8012292:	f7fd fead 	bl	800fff0 <memp_free>
  }
}
 8012296:	bf00      	nop
 8012298:	3708      	adds	r7, #8
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
	...

080122a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d106      	bne.n	80122bc <tcp_seg_copy+0x1c>
 80122ae:	4b0f      	ldr	r3, [pc, #60]	; (80122ec <tcp_seg_copy+0x4c>)
 80122b0:	f240 6282 	movw	r2, #1666	; 0x682
 80122b4:	490e      	ldr	r1, [pc, #56]	; (80122f0 <tcp_seg_copy+0x50>)
 80122b6:	480f      	ldr	r0, [pc, #60]	; (80122f4 <tcp_seg_copy+0x54>)
 80122b8:	f00a fd52 	bl	801cd60 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80122bc:	2003      	movs	r0, #3
 80122be:	f7fd fe45 	bl	800ff4c <memp_malloc>
 80122c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d101      	bne.n	80122ce <tcp_seg_copy+0x2e>
    return NULL;
 80122ca:	2300      	movs	r3, #0
 80122cc:	e00a      	b.n	80122e4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80122ce:	2210      	movs	r2, #16
 80122d0:	6879      	ldr	r1, [r7, #4]
 80122d2:	68f8      	ldr	r0, [r7, #12]
 80122d4:	f00a fcd3 	bl	801cc7e <memcpy>
  pbuf_ref(cseg->p);
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fe fddd 	bl	8010e9c <pbuf_ref>
  return cseg;
 80122e2:	68fb      	ldr	r3, [r7, #12]
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3710      	adds	r7, #16
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	0801ecb0 	.word	0x0801ecb0
 80122f0:	0801f204 	.word	0x0801f204
 80122f4:	0801ecf4 	.word	0x0801ecf4

080122f8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
 8012304:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d109      	bne.n	8012320 <tcp_recv_null+0x28>
 801230c:	4b12      	ldr	r3, [pc, #72]	; (8012358 <tcp_recv_null+0x60>)
 801230e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012312:	4912      	ldr	r1, [pc, #72]	; (801235c <tcp_recv_null+0x64>)
 8012314:	4812      	ldr	r0, [pc, #72]	; (8012360 <tcp_recv_null+0x68>)
 8012316:	f00a fd23 	bl	801cd60 <iprintf>
 801231a:	f06f 030f 	mvn.w	r3, #15
 801231e:	e016      	b.n	801234e <tcp_recv_null+0x56>

  if (p != NULL) {
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d009      	beq.n	801233a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	891b      	ldrh	r3, [r3, #8]
 801232a:	4619      	mov	r1, r3
 801232c:	68b8      	ldr	r0, [r7, #8]
 801232e:	f7ff fb19 	bl	8011964 <tcp_recved>
    pbuf_free(p);
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f7fe fd0c 	bl	8010d50 <pbuf_free>
 8012338:	e008      	b.n	801234c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801233a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d104      	bne.n	801234c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012342:	68b8      	ldr	r0, [r7, #8]
 8012344:	f7ff f9be 	bl	80116c4 <tcp_close>
 8012348:	4603      	mov	r3, r0
 801234a:	e000      	b.n	801234e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801234c:	2300      	movs	r3, #0
}
 801234e:	4618      	mov	r0, r3
 8012350:	3710      	adds	r7, #16
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	0801ecb0 	.word	0x0801ecb0
 801235c:	0801f220 	.word	0x0801f220
 8012360:	0801ecf4 	.word	0x0801ecf4

08012364 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b086      	sub	sp, #24
 8012368:	af00      	add	r7, sp, #0
 801236a:	4603      	mov	r3, r0
 801236c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012372:	2b00      	cmp	r3, #0
 8012374:	db01      	blt.n	801237a <tcp_kill_prio+0x16>
 8012376:	79fb      	ldrb	r3, [r7, #7]
 8012378:	e000      	b.n	801237c <tcp_kill_prio+0x18>
 801237a:	237f      	movs	r3, #127	; 0x7f
 801237c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801237e:	7afb      	ldrb	r3, [r7, #11]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d034      	beq.n	80123ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012384:	7afb      	ldrb	r3, [r7, #11]
 8012386:	3b01      	subs	r3, #1
 8012388:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801238a:	2300      	movs	r3, #0
 801238c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801238e:	2300      	movs	r3, #0
 8012390:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012392:	4b19      	ldr	r3, [pc, #100]	; (80123f8 <tcp_kill_prio+0x94>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	617b      	str	r3, [r7, #20]
 8012398:	e01f      	b.n	80123da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	7d5b      	ldrb	r3, [r3, #21]
 801239e:	7afa      	ldrb	r2, [r7, #11]
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d80c      	bhi.n	80123be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80123a8:	7afa      	ldrb	r2, [r7, #11]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d112      	bne.n	80123d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80123ae:	4b13      	ldr	r3, [pc, #76]	; (80123fc <tcp_kill_prio+0x98>)
 80123b0:	681a      	ldr	r2, [r3, #0]
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	6a1b      	ldr	r3, [r3, #32]
 80123b6:	1ad3      	subs	r3, r2, r3
 80123b8:	68fa      	ldr	r2, [r7, #12]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d80a      	bhi.n	80123d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80123be:	4b0f      	ldr	r3, [pc, #60]	; (80123fc <tcp_kill_prio+0x98>)
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	6a1b      	ldr	r3, [r3, #32]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	7d5b      	ldrb	r3, [r3, #21]
 80123d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	68db      	ldr	r3, [r3, #12]
 80123d8:	617b      	str	r3, [r7, #20]
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d1dc      	bne.n	801239a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d004      	beq.n	80123f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80123e6:	6938      	ldr	r0, [r7, #16]
 80123e8:	f7ff fa56 	bl	8011898 <tcp_abort>
 80123ec:	e000      	b.n	80123f0 <tcp_kill_prio+0x8c>
    return;
 80123ee:	bf00      	nop
  }
}
 80123f0:	3718      	adds	r7, #24
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	200139f4 	.word	0x200139f4
 80123fc:	200139f8 	.word	0x200139f8

08012400 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b086      	sub	sp, #24
 8012404:	af00      	add	r7, sp, #0
 8012406:	4603      	mov	r3, r0
 8012408:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801240a:	79fb      	ldrb	r3, [r7, #7]
 801240c:	2b08      	cmp	r3, #8
 801240e:	d009      	beq.n	8012424 <tcp_kill_state+0x24>
 8012410:	79fb      	ldrb	r3, [r7, #7]
 8012412:	2b09      	cmp	r3, #9
 8012414:	d006      	beq.n	8012424 <tcp_kill_state+0x24>
 8012416:	4b1a      	ldr	r3, [pc, #104]	; (8012480 <tcp_kill_state+0x80>)
 8012418:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801241c:	4919      	ldr	r1, [pc, #100]	; (8012484 <tcp_kill_state+0x84>)
 801241e:	481a      	ldr	r0, [pc, #104]	; (8012488 <tcp_kill_state+0x88>)
 8012420:	f00a fc9e 	bl	801cd60 <iprintf>

  inactivity = 0;
 8012424:	2300      	movs	r3, #0
 8012426:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012428:	2300      	movs	r3, #0
 801242a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801242c:	4b17      	ldr	r3, [pc, #92]	; (801248c <tcp_kill_state+0x8c>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	617b      	str	r3, [r7, #20]
 8012432:	e017      	b.n	8012464 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	7d1b      	ldrb	r3, [r3, #20]
 8012438:	79fa      	ldrb	r2, [r7, #7]
 801243a:	429a      	cmp	r2, r3
 801243c:	d10f      	bne.n	801245e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801243e:	4b14      	ldr	r3, [pc, #80]	; (8012490 <tcp_kill_state+0x90>)
 8012440:	681a      	ldr	r2, [r3, #0]
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	6a1b      	ldr	r3, [r3, #32]
 8012446:	1ad3      	subs	r3, r2, r3
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	429a      	cmp	r2, r3
 801244c:	d807      	bhi.n	801245e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801244e:	4b10      	ldr	r3, [pc, #64]	; (8012490 <tcp_kill_state+0x90>)
 8012450:	681a      	ldr	r2, [r3, #0]
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	6a1b      	ldr	r3, [r3, #32]
 8012456:	1ad3      	subs	r3, r2, r3
 8012458:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	617b      	str	r3, [r7, #20]
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1e4      	bne.n	8012434 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d003      	beq.n	8012478 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012470:	2100      	movs	r1, #0
 8012472:	6938      	ldr	r0, [r7, #16]
 8012474:	f7ff f952 	bl	801171c <tcp_abandon>
  }
}
 8012478:	bf00      	nop
 801247a:	3718      	adds	r7, #24
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}
 8012480:	0801ecb0 	.word	0x0801ecb0
 8012484:	0801f23c 	.word	0x0801f23c
 8012488:	0801ecf4 	.word	0x0801ecf4
 801248c:	200139f4 	.word	0x200139f4
 8012490:	200139f8 	.word	0x200139f8

08012494 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801249a:	2300      	movs	r3, #0
 801249c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801249e:	2300      	movs	r3, #0
 80124a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80124a2:	4b12      	ldr	r3, [pc, #72]	; (80124ec <tcp_kill_timewait+0x58>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	60fb      	str	r3, [r7, #12]
 80124a8:	e012      	b.n	80124d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80124aa:	4b11      	ldr	r3, [pc, #68]	; (80124f0 <tcp_kill_timewait+0x5c>)
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	6a1b      	ldr	r3, [r3, #32]
 80124b2:	1ad3      	subs	r3, r2, r3
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d807      	bhi.n	80124ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80124ba:	4b0d      	ldr	r3, [pc, #52]	; (80124f0 <tcp_kill_timewait+0x5c>)
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	6a1b      	ldr	r3, [r3, #32]
 80124c2:	1ad3      	subs	r3, r2, r3
 80124c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	68db      	ldr	r3, [r3, #12]
 80124ce:	60fb      	str	r3, [r7, #12]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d1e9      	bne.n	80124aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d002      	beq.n	80124e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80124dc:	68b8      	ldr	r0, [r7, #8]
 80124de:	f7ff f9db 	bl	8011898 <tcp_abort>
  }
}
 80124e2:	bf00      	nop
 80124e4:	3710      	adds	r7, #16
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	20013a04 	.word	0x20013a04
 80124f0:	200139f8 	.word	0x200139f8

080124f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80124fa:	4b10      	ldr	r3, [pc, #64]	; (801253c <tcp_handle_closepend+0x48>)
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012500:	e014      	b.n	801252c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	68db      	ldr	r3, [r3, #12]
 8012506:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	8b5b      	ldrh	r3, [r3, #26]
 801250c:	f003 0308 	and.w	r3, r3, #8
 8012510:	2b00      	cmp	r3, #0
 8012512:	d009      	beq.n	8012528 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	8b5b      	ldrh	r3, [r3, #26]
 8012518:	f023 0308 	bic.w	r3, r3, #8
 801251c:	b29a      	uxth	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f7ff f864 	bl	80115f0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1e7      	bne.n	8012502 <tcp_handle_closepend+0xe>
  }
}
 8012532:	bf00      	nop
 8012534:	bf00      	nop
 8012536:	3708      	adds	r7, #8
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	200139f4 	.word	0x200139f4

08012540 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b084      	sub	sp, #16
 8012544:	af00      	add	r7, sp, #0
 8012546:	4603      	mov	r3, r0
 8012548:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801254a:	2001      	movs	r0, #1
 801254c:	f7fd fcfe 	bl	800ff4c <memp_malloc>
 8012550:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d126      	bne.n	80125a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012558:	f7ff ffcc 	bl	80124f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801255c:	f7ff ff9a 	bl	8012494 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012560:	2001      	movs	r0, #1
 8012562:	f7fd fcf3 	bl	800ff4c <memp_malloc>
 8012566:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d11b      	bne.n	80125a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801256e:	2009      	movs	r0, #9
 8012570:	f7ff ff46 	bl	8012400 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012574:	2001      	movs	r0, #1
 8012576:	f7fd fce9 	bl	800ff4c <memp_malloc>
 801257a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d111      	bne.n	80125a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012582:	2008      	movs	r0, #8
 8012584:	f7ff ff3c 	bl	8012400 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012588:	2001      	movs	r0, #1
 801258a:	f7fd fcdf 	bl	800ff4c <memp_malloc>
 801258e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d107      	bne.n	80125a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012596:	79fb      	ldrb	r3, [r7, #7]
 8012598:	4618      	mov	r0, r3
 801259a:	f7ff fee3 	bl	8012364 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801259e:	2001      	movs	r0, #1
 80125a0:	f7fd fcd4 	bl	800ff4c <memp_malloc>
 80125a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d03f      	beq.n	801262c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80125ac:	229c      	movs	r2, #156	; 0x9c
 80125ae:	2100      	movs	r1, #0
 80125b0:	68f8      	ldr	r0, [r7, #12]
 80125b2:	f00a fb72 	bl	801cc9a <memset>
    pcb->prio = prio;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	79fa      	ldrb	r2, [r7, #7]
 80125ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80125c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80125cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	22ff      	movs	r2, #255	; 0xff
 80125da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	f44f 7206 	mov.w	r2, #536	; 0x218
 80125e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	2206      	movs	r2, #6
 80125e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2206      	movs	r2, #6
 80125f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	2201      	movs	r2, #1
 80125fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012602:	4b0d      	ldr	r3, [pc, #52]	; (8012638 <tcp_alloc+0xf8>)
 8012604:	681a      	ldr	r2, [r3, #0]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801260a:	4b0c      	ldr	r3, [pc, #48]	; (801263c <tcp_alloc+0xfc>)
 801260c:	781a      	ldrb	r2, [r3, #0]
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012618:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	4a08      	ldr	r2, [pc, #32]	; (8012640 <tcp_alloc+0x100>)
 8012620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	4a07      	ldr	r2, [pc, #28]	; (8012644 <tcp_alloc+0x104>)
 8012628:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801262c:	68fb      	ldr	r3, [r7, #12]
}
 801262e:	4618      	mov	r0, r3
 8012630:	3710      	adds	r7, #16
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	200139f8 	.word	0x200139f8
 801263c:	2000afa6 	.word	0x2000afa6
 8012640:	080122f9 	.word	0x080122f9
 8012644:	006ddd00 	.word	0x006ddd00

08012648 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d107      	bne.n	8012666 <tcp_pcb_purge+0x1e>
 8012656:	4b21      	ldr	r3, [pc, #132]	; (80126dc <tcp_pcb_purge+0x94>)
 8012658:	f640 0251 	movw	r2, #2129	; 0x851
 801265c:	4920      	ldr	r1, [pc, #128]	; (80126e0 <tcp_pcb_purge+0x98>)
 801265e:	4821      	ldr	r0, [pc, #132]	; (80126e4 <tcp_pcb_purge+0x9c>)
 8012660:	f00a fb7e 	bl	801cd60 <iprintf>
 8012664:	e037      	b.n	80126d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	7d1b      	ldrb	r3, [r3, #20]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d033      	beq.n	80126d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012672:	2b0a      	cmp	r3, #10
 8012674:	d02f      	beq.n	80126d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801267a:	2b01      	cmp	r3, #1
 801267c:	d02b      	beq.n	80126d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012682:	2b00      	cmp	r3, #0
 8012684:	d007      	beq.n	8012696 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801268a:	4618      	mov	r0, r3
 801268c:	f7fe fb60 	bl	8010d50 <pbuf_free>
      pcb->refused_data = NULL;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2200      	movs	r2, #0
 8012694:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801269a:	2b00      	cmp	r3, #0
 801269c:	d002      	beq.n	80126a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f000 f986 	bl	80129b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7ff fdc7 	bl	8012244 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7ff fdc2 	bl	8012244 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80126d6:	3708      	adds	r7, #8
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}
 80126dc:	0801ecb0 	.word	0x0801ecb0
 80126e0:	0801f2fc 	.word	0x0801f2fc
 80126e4:	0801ecf4 	.word	0x0801ecf4

080126e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b084      	sub	sp, #16
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d106      	bne.n	8012706 <tcp_pcb_remove+0x1e>
 80126f8:	4b3e      	ldr	r3, [pc, #248]	; (80127f4 <tcp_pcb_remove+0x10c>)
 80126fa:	f640 0283 	movw	r2, #2179	; 0x883
 80126fe:	493e      	ldr	r1, [pc, #248]	; (80127f8 <tcp_pcb_remove+0x110>)
 8012700:	483e      	ldr	r0, [pc, #248]	; (80127fc <tcp_pcb_remove+0x114>)
 8012702:	f00a fb2d 	bl	801cd60 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d106      	bne.n	801271a <tcp_pcb_remove+0x32>
 801270c:	4b39      	ldr	r3, [pc, #228]	; (80127f4 <tcp_pcb_remove+0x10c>)
 801270e:	f640 0284 	movw	r2, #2180	; 0x884
 8012712:	493b      	ldr	r1, [pc, #236]	; (8012800 <tcp_pcb_remove+0x118>)
 8012714:	4839      	ldr	r0, [pc, #228]	; (80127fc <tcp_pcb_remove+0x114>)
 8012716:	f00a fb23 	bl	801cd60 <iprintf>

  TCP_RMV(pcblist, pcb);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	683a      	ldr	r2, [r7, #0]
 8012720:	429a      	cmp	r2, r3
 8012722:	d105      	bne.n	8012730 <tcp_pcb_remove+0x48>
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	68da      	ldr	r2, [r3, #12]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	601a      	str	r2, [r3, #0]
 801272e:	e013      	b.n	8012758 <tcp_pcb_remove+0x70>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	60fb      	str	r3, [r7, #12]
 8012736:	e00c      	b.n	8012752 <tcp_pcb_remove+0x6a>
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	68db      	ldr	r3, [r3, #12]
 801273c:	683a      	ldr	r2, [r7, #0]
 801273e:	429a      	cmp	r2, r3
 8012740:	d104      	bne.n	801274c <tcp_pcb_remove+0x64>
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	68da      	ldr	r2, [r3, #12]
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	60da      	str	r2, [r3, #12]
 801274a:	e005      	b.n	8012758 <tcp_pcb_remove+0x70>
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	60fb      	str	r3, [r7, #12]
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1ef      	bne.n	8012738 <tcp_pcb_remove+0x50>
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	2200      	movs	r2, #0
 801275c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801275e:	6838      	ldr	r0, [r7, #0]
 8012760:	f7ff ff72 	bl	8012648 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	7d1b      	ldrb	r3, [r3, #20]
 8012768:	2b0a      	cmp	r3, #10
 801276a:	d013      	beq.n	8012794 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012770:	2b01      	cmp	r3, #1
 8012772:	d00f      	beq.n	8012794 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	8b5b      	ldrh	r3, [r3, #26]
 8012778:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801277c:	2b00      	cmp	r3, #0
 801277e:	d009      	beq.n	8012794 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	8b5b      	ldrh	r3, [r3, #26]
 8012784:	f043 0302 	orr.w	r3, r3, #2
 8012788:	b29a      	uxth	r2, r3
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801278e:	6838      	ldr	r0, [r7, #0]
 8012790:	f002 ff6a 	bl	8015668 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	7d1b      	ldrb	r3, [r3, #20]
 8012798:	2b01      	cmp	r3, #1
 801279a:	d020      	beq.n	80127de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d006      	beq.n	80127b2 <tcp_pcb_remove+0xca>
 80127a4:	4b13      	ldr	r3, [pc, #76]	; (80127f4 <tcp_pcb_remove+0x10c>)
 80127a6:	f640 0293 	movw	r2, #2195	; 0x893
 80127aa:	4916      	ldr	r1, [pc, #88]	; (8012804 <tcp_pcb_remove+0x11c>)
 80127ac:	4813      	ldr	r0, [pc, #76]	; (80127fc <tcp_pcb_remove+0x114>)
 80127ae:	f00a fad7 	bl	801cd60 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d006      	beq.n	80127c8 <tcp_pcb_remove+0xe0>
 80127ba:	4b0e      	ldr	r3, [pc, #56]	; (80127f4 <tcp_pcb_remove+0x10c>)
 80127bc:	f640 0294 	movw	r2, #2196	; 0x894
 80127c0:	4911      	ldr	r1, [pc, #68]	; (8012808 <tcp_pcb_remove+0x120>)
 80127c2:	480e      	ldr	r0, [pc, #56]	; (80127fc <tcp_pcb_remove+0x114>)
 80127c4:	f00a facc 	bl	801cd60 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d006      	beq.n	80127de <tcp_pcb_remove+0xf6>
 80127d0:	4b08      	ldr	r3, [pc, #32]	; (80127f4 <tcp_pcb_remove+0x10c>)
 80127d2:	f640 0296 	movw	r2, #2198	; 0x896
 80127d6:	490d      	ldr	r1, [pc, #52]	; (801280c <tcp_pcb_remove+0x124>)
 80127d8:	4808      	ldr	r0, [pc, #32]	; (80127fc <tcp_pcb_remove+0x114>)
 80127da:	f00a fac1 	bl	801cd60 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	2200      	movs	r2, #0
 80127e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	2200      	movs	r2, #0
 80127e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80127ea:	bf00      	nop
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	0801ecb0 	.word	0x0801ecb0
 80127f8:	0801f318 	.word	0x0801f318
 80127fc:	0801ecf4 	.word	0x0801ecf4
 8012800:	0801f334 	.word	0x0801f334
 8012804:	0801f354 	.word	0x0801f354
 8012808:	0801f36c 	.word	0x0801f36c
 801280c:	0801f388 	.word	0x0801f388

08012810 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d106      	bne.n	801282c <tcp_next_iss+0x1c>
 801281e:	4b0a      	ldr	r3, [pc, #40]	; (8012848 <tcp_next_iss+0x38>)
 8012820:	f640 02af 	movw	r2, #2223	; 0x8af
 8012824:	4909      	ldr	r1, [pc, #36]	; (801284c <tcp_next_iss+0x3c>)
 8012826:	480a      	ldr	r0, [pc, #40]	; (8012850 <tcp_next_iss+0x40>)
 8012828:	f00a fa9a 	bl	801cd60 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801282c:	4b09      	ldr	r3, [pc, #36]	; (8012854 <tcp_next_iss+0x44>)
 801282e:	681a      	ldr	r2, [r3, #0]
 8012830:	4b09      	ldr	r3, [pc, #36]	; (8012858 <tcp_next_iss+0x48>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	4413      	add	r3, r2
 8012836:	4a07      	ldr	r2, [pc, #28]	; (8012854 <tcp_next_iss+0x44>)
 8012838:	6013      	str	r3, [r2, #0]
  return iss;
 801283a:	4b06      	ldr	r3, [pc, #24]	; (8012854 <tcp_next_iss+0x44>)
 801283c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801283e:	4618      	mov	r0, r3
 8012840:	3708      	adds	r7, #8
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	0801ecb0 	.word	0x0801ecb0
 801284c:	0801f3a0 	.word	0x0801f3a0
 8012850:	0801ecf4 	.word	0x0801ecf4
 8012854:	200000e8 	.word	0x200000e8
 8012858:	200139f8 	.word	0x200139f8

0801285c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b086      	sub	sp, #24
 8012860:	af00      	add	r7, sp, #0
 8012862:	4603      	mov	r3, r0
 8012864:	60b9      	str	r1, [r7, #8]
 8012866:	607a      	str	r2, [r7, #4]
 8012868:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d106      	bne.n	801287e <tcp_eff_send_mss_netif+0x22>
 8012870:	4b14      	ldr	r3, [pc, #80]	; (80128c4 <tcp_eff_send_mss_netif+0x68>)
 8012872:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012876:	4914      	ldr	r1, [pc, #80]	; (80128c8 <tcp_eff_send_mss_netif+0x6c>)
 8012878:	4814      	ldr	r0, [pc, #80]	; (80128cc <tcp_eff_send_mss_netif+0x70>)
 801287a:	f00a fa71 	bl	801cd60 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d101      	bne.n	8012888 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012884:	89fb      	ldrh	r3, [r7, #14]
 8012886:	e019      	b.n	80128bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801288c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801288e:	8afb      	ldrh	r3, [r7, #22]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d012      	beq.n	80128ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012894:	2328      	movs	r3, #40	; 0x28
 8012896:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012898:	8afa      	ldrh	r2, [r7, #22]
 801289a:	8abb      	ldrh	r3, [r7, #20]
 801289c:	429a      	cmp	r2, r3
 801289e:	d904      	bls.n	80128aa <tcp_eff_send_mss_netif+0x4e>
 80128a0:	8afa      	ldrh	r2, [r7, #22]
 80128a2:	8abb      	ldrh	r3, [r7, #20]
 80128a4:	1ad3      	subs	r3, r2, r3
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	e000      	b.n	80128ac <tcp_eff_send_mss_netif+0x50>
 80128aa:	2300      	movs	r3, #0
 80128ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80128ae:	8a7a      	ldrh	r2, [r7, #18]
 80128b0:	89fb      	ldrh	r3, [r7, #14]
 80128b2:	4293      	cmp	r3, r2
 80128b4:	bf28      	it	cs
 80128b6:	4613      	movcs	r3, r2
 80128b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80128ba:	89fb      	ldrh	r3, [r7, #14]
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3718      	adds	r7, #24
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	0801ecb0 	.word	0x0801ecb0
 80128c8:	0801f3bc 	.word	0x0801f3bc
 80128cc:	0801ecf4 	.word	0x0801ecf4

080128d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d119      	bne.n	8012918 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80128e4:	4b10      	ldr	r3, [pc, #64]	; (8012928 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80128e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80128ea:	4910      	ldr	r1, [pc, #64]	; (801292c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80128ec:	4810      	ldr	r0, [pc, #64]	; (8012930 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80128ee:	f00a fa37 	bl	801cd60 <iprintf>

  while (pcb != NULL) {
 80128f2:	e011      	b.n	8012918 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d108      	bne.n	8012912 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	68db      	ldr	r3, [r3, #12]
 8012904:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012906:	68f8      	ldr	r0, [r7, #12]
 8012908:	f7fe ffc6 	bl	8011898 <tcp_abort>
      pcb = next;
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	60fb      	str	r3, [r7, #12]
 8012910:	e002      	b.n	8012918 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	68db      	ldr	r3, [r3, #12]
 8012916:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d1ea      	bne.n	80128f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801291e:	bf00      	nop
 8012920:	bf00      	nop
 8012922:	3710      	adds	r7, #16
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}
 8012928:	0801ecb0 	.word	0x0801ecb0
 801292c:	0801f3e4 	.word	0x0801f3e4
 8012930:	0801ecf4 	.word	0x0801ecf4

08012934 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d02a      	beq.n	801299a <tcp_netif_ip_addr_changed+0x66>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d026      	beq.n	801299a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801294c:	4b15      	ldr	r3, [pc, #84]	; (80129a4 <tcp_netif_ip_addr_changed+0x70>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4619      	mov	r1, r3
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7ff ffbc 	bl	80128d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012958:	4b13      	ldr	r3, [pc, #76]	; (80129a8 <tcp_netif_ip_addr_changed+0x74>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	4619      	mov	r1, r3
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7ff ffb6 	bl	80128d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d017      	beq.n	801299a <tcp_netif_ip_addr_changed+0x66>
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d013      	beq.n	801299a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012972:	4b0e      	ldr	r3, [pc, #56]	; (80129ac <tcp_netif_ip_addr_changed+0x78>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	60fb      	str	r3, [r7, #12]
 8012978:	e00c      	b.n	8012994 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	681a      	ldr	r2, [r3, #0]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	429a      	cmp	r2, r3
 8012984:	d103      	bne.n	801298e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	60fb      	str	r3, [r7, #12]
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d1ef      	bne.n	801297a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801299a:	bf00      	nop
 801299c:	3710      	adds	r7, #16
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	200139f4 	.word	0x200139f4
 80129a8:	20013a00 	.word	0x20013a00
 80129ac:	200139fc 	.word	0x200139fc

080129b0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d007      	beq.n	80129d0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7ff fc3d 	bl	8012244 <tcp_segs_free>
    pcb->ooseq = NULL;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2200      	movs	r2, #0
 80129ce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80129d0:	bf00      	nop
 80129d2:	3708      	adds	r7, #8
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80129d8:	b590      	push	{r4, r7, lr}
 80129da:	b08d      	sub	sp, #52	; 0x34
 80129dc:	af04      	add	r7, sp, #16
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d105      	bne.n	80129f4 <tcp_input+0x1c>
 80129e8:	4b9b      	ldr	r3, [pc, #620]	; (8012c58 <tcp_input+0x280>)
 80129ea:	2283      	movs	r2, #131	; 0x83
 80129ec:	499b      	ldr	r1, [pc, #620]	; (8012c5c <tcp_input+0x284>)
 80129ee:	489c      	ldr	r0, [pc, #624]	; (8012c60 <tcp_input+0x288>)
 80129f0:	f00a f9b6 	bl	801cd60 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	4a9a      	ldr	r2, [pc, #616]	; (8012c64 <tcp_input+0x28c>)
 80129fa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	895b      	ldrh	r3, [r3, #10]
 8012a00:	2b13      	cmp	r3, #19
 8012a02:	f240 83c4 	bls.w	801318e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012a06:	4b98      	ldr	r3, [pc, #608]	; (8012c68 <tcp_input+0x290>)
 8012a08:	695b      	ldr	r3, [r3, #20]
 8012a0a:	4a97      	ldr	r2, [pc, #604]	; (8012c68 <tcp_input+0x290>)
 8012a0c:	6812      	ldr	r2, [r2, #0]
 8012a0e:	4611      	mov	r1, r2
 8012a10:	4618      	mov	r0, r3
 8012a12:	f007 fdf9 	bl	801a608 <ip4_addr_isbroadcast_u32>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f040 83ba 	bne.w	8013192 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012a1e:	4b92      	ldr	r3, [pc, #584]	; (8012c68 <tcp_input+0x290>)
 8012a20:	695b      	ldr	r3, [r3, #20]
 8012a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012a26:	2be0      	cmp	r3, #224	; 0xe0
 8012a28:	f000 83b3 	beq.w	8013192 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012a2c:	4b8d      	ldr	r3, [pc, #564]	; (8012c64 <tcp_input+0x28c>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	899b      	ldrh	r3, [r3, #12]
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7fc fdd3 	bl	800f5e0 <lwip_htons>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	0b1b      	lsrs	r3, r3, #12
 8012a3e:	b29b      	uxth	r3, r3
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	009b      	lsls	r3, r3, #2
 8012a44:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012a46:	7cbb      	ldrb	r3, [r7, #18]
 8012a48:	2b13      	cmp	r3, #19
 8012a4a:	f240 83a4 	bls.w	8013196 <tcp_input+0x7be>
 8012a4e:	7cbb      	ldrb	r3, [r7, #18]
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	891b      	ldrh	r3, [r3, #8]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	f200 839d 	bhi.w	8013196 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012a5c:	7cbb      	ldrb	r3, [r7, #18]
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	3b14      	subs	r3, #20
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	4b81      	ldr	r3, [pc, #516]	; (8012c6c <tcp_input+0x294>)
 8012a66:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012a68:	4b81      	ldr	r3, [pc, #516]	; (8012c70 <tcp_input+0x298>)
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	895a      	ldrh	r2, [r3, #10]
 8012a72:	7cbb      	ldrb	r3, [r7, #18]
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d309      	bcc.n	8012a8e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012a7a:	4b7c      	ldr	r3, [pc, #496]	; (8012c6c <tcp_input+0x294>)
 8012a7c:	881a      	ldrh	r2, [r3, #0]
 8012a7e:	4b7d      	ldr	r3, [pc, #500]	; (8012c74 <tcp_input+0x29c>)
 8012a80:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012a82:	7cbb      	ldrb	r3, [r7, #18]
 8012a84:	4619      	mov	r1, r3
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f7fe f8dc 	bl	8010c44 <pbuf_remove_header>
 8012a8c:	e04e      	b.n	8012b2c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d105      	bne.n	8012aa2 <tcp_input+0xca>
 8012a96:	4b70      	ldr	r3, [pc, #448]	; (8012c58 <tcp_input+0x280>)
 8012a98:	22c2      	movs	r2, #194	; 0xc2
 8012a9a:	4977      	ldr	r1, [pc, #476]	; (8012c78 <tcp_input+0x2a0>)
 8012a9c:	4870      	ldr	r0, [pc, #448]	; (8012c60 <tcp_input+0x288>)
 8012a9e:	f00a f95f 	bl	801cd60 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012aa2:	2114      	movs	r1, #20
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f7fe f8cd 	bl	8010c44 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	895a      	ldrh	r2, [r3, #10]
 8012aae:	4b71      	ldr	r3, [pc, #452]	; (8012c74 <tcp_input+0x29c>)
 8012ab0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012ab2:	4b6e      	ldr	r3, [pc, #440]	; (8012c6c <tcp_input+0x294>)
 8012ab4:	881a      	ldrh	r2, [r3, #0]
 8012ab6:	4b6f      	ldr	r3, [pc, #444]	; (8012c74 <tcp_input+0x29c>)
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	1ad3      	subs	r3, r2, r3
 8012abc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012abe:	4b6d      	ldr	r3, [pc, #436]	; (8012c74 <tcp_input+0x29c>)
 8012ac0:	881b      	ldrh	r3, [r3, #0]
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f7fe f8bd 	bl	8010c44 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	895b      	ldrh	r3, [r3, #10]
 8012ad0:	8a3a      	ldrh	r2, [r7, #16]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	f200 8361 	bhi.w	801319a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	4a64      	ldr	r2, [pc, #400]	; (8012c70 <tcp_input+0x298>)
 8012ae0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	8a3a      	ldrh	r2, [r7, #16]
 8012ae8:	4611      	mov	r1, r2
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7fe f8aa 	bl	8010c44 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	891a      	ldrh	r2, [r3, #8]
 8012af4:	8a3b      	ldrh	r3, [r7, #16]
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	b29a      	uxth	r2, r3
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	895b      	ldrh	r3, [r3, #10]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d005      	beq.n	8012b12 <tcp_input+0x13a>
 8012b06:	4b54      	ldr	r3, [pc, #336]	; (8012c58 <tcp_input+0x280>)
 8012b08:	22df      	movs	r2, #223	; 0xdf
 8012b0a:	495c      	ldr	r1, [pc, #368]	; (8012c7c <tcp_input+0x2a4>)
 8012b0c:	4854      	ldr	r0, [pc, #336]	; (8012c60 <tcp_input+0x288>)
 8012b0e:	f00a f927 	bl	801cd60 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	891a      	ldrh	r2, [r3, #8]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	891b      	ldrh	r3, [r3, #8]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d005      	beq.n	8012b2c <tcp_input+0x154>
 8012b20:	4b4d      	ldr	r3, [pc, #308]	; (8012c58 <tcp_input+0x280>)
 8012b22:	22e0      	movs	r2, #224	; 0xe0
 8012b24:	4956      	ldr	r1, [pc, #344]	; (8012c80 <tcp_input+0x2a8>)
 8012b26:	484e      	ldr	r0, [pc, #312]	; (8012c60 <tcp_input+0x288>)
 8012b28:	f00a f91a 	bl	801cd60 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012b2c:	4b4d      	ldr	r3, [pc, #308]	; (8012c64 <tcp_input+0x28c>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	881b      	ldrh	r3, [r3, #0]
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	4a4b      	ldr	r2, [pc, #300]	; (8012c64 <tcp_input+0x28c>)
 8012b36:	6814      	ldr	r4, [r2, #0]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7fc fd51 	bl	800f5e0 <lwip_htons>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012b42:	4b48      	ldr	r3, [pc, #288]	; (8012c64 <tcp_input+0x28c>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	885b      	ldrh	r3, [r3, #2]
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	4a46      	ldr	r2, [pc, #280]	; (8012c64 <tcp_input+0x28c>)
 8012b4c:	6814      	ldr	r4, [r2, #0]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7fc fd46 	bl	800f5e0 <lwip_htons>
 8012b54:	4603      	mov	r3, r0
 8012b56:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012b58:	4b42      	ldr	r3, [pc, #264]	; (8012c64 <tcp_input+0x28c>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	4a41      	ldr	r2, [pc, #260]	; (8012c64 <tcp_input+0x28c>)
 8012b60:	6814      	ldr	r4, [r2, #0]
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7fc fd51 	bl	800f60a <lwip_htonl>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	6063      	str	r3, [r4, #4]
 8012b6c:	6863      	ldr	r3, [r4, #4]
 8012b6e:	4a45      	ldr	r2, [pc, #276]	; (8012c84 <tcp_input+0x2ac>)
 8012b70:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012b72:	4b3c      	ldr	r3, [pc, #240]	; (8012c64 <tcp_input+0x28c>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	689b      	ldr	r3, [r3, #8]
 8012b78:	4a3a      	ldr	r2, [pc, #232]	; (8012c64 <tcp_input+0x28c>)
 8012b7a:	6814      	ldr	r4, [r2, #0]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7fc fd44 	bl	800f60a <lwip_htonl>
 8012b82:	4603      	mov	r3, r0
 8012b84:	60a3      	str	r3, [r4, #8]
 8012b86:	68a3      	ldr	r3, [r4, #8]
 8012b88:	4a3f      	ldr	r2, [pc, #252]	; (8012c88 <tcp_input+0x2b0>)
 8012b8a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012b8c:	4b35      	ldr	r3, [pc, #212]	; (8012c64 <tcp_input+0x28c>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	89db      	ldrh	r3, [r3, #14]
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	4a33      	ldr	r2, [pc, #204]	; (8012c64 <tcp_input+0x28c>)
 8012b96:	6814      	ldr	r4, [r2, #0]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7fc fd21 	bl	800f5e0 <lwip_htons>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012ba2:	4b30      	ldr	r3, [pc, #192]	; (8012c64 <tcp_input+0x28c>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	899b      	ldrh	r3, [r3, #12]
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7fc fd18 	bl	800f5e0 <lwip_htons>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bb8:	b2da      	uxtb	r2, r3
 8012bba:	4b34      	ldr	r3, [pc, #208]	; (8012c8c <tcp_input+0x2b4>)
 8012bbc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	891a      	ldrh	r2, [r3, #8]
 8012bc2:	4b33      	ldr	r3, [pc, #204]	; (8012c90 <tcp_input+0x2b8>)
 8012bc4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012bc6:	4b31      	ldr	r3, [pc, #196]	; (8012c8c <tcp_input+0x2b4>)
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	f003 0303 	and.w	r3, r3, #3
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00c      	beq.n	8012bec <tcp_input+0x214>
    tcplen++;
 8012bd2:	4b2f      	ldr	r3, [pc, #188]	; (8012c90 <tcp_input+0x2b8>)
 8012bd4:	881b      	ldrh	r3, [r3, #0]
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	4b2d      	ldr	r3, [pc, #180]	; (8012c90 <tcp_input+0x2b8>)
 8012bdc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	891a      	ldrh	r2, [r3, #8]
 8012be2:	4b2b      	ldr	r3, [pc, #172]	; (8012c90 <tcp_input+0x2b8>)
 8012be4:	881b      	ldrh	r3, [r3, #0]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	f200 82d9 	bhi.w	801319e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012bec:	2300      	movs	r3, #0
 8012bee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bf0:	4b28      	ldr	r3, [pc, #160]	; (8012c94 <tcp_input+0x2bc>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	61fb      	str	r3, [r7, #28]
 8012bf6:	e09d      	b.n	8012d34 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	7d1b      	ldrb	r3, [r3, #20]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d105      	bne.n	8012c0c <tcp_input+0x234>
 8012c00:	4b15      	ldr	r3, [pc, #84]	; (8012c58 <tcp_input+0x280>)
 8012c02:	22fb      	movs	r2, #251	; 0xfb
 8012c04:	4924      	ldr	r1, [pc, #144]	; (8012c98 <tcp_input+0x2c0>)
 8012c06:	4816      	ldr	r0, [pc, #88]	; (8012c60 <tcp_input+0x288>)
 8012c08:	f00a f8aa 	bl	801cd60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012c0c:	69fb      	ldr	r3, [r7, #28]
 8012c0e:	7d1b      	ldrb	r3, [r3, #20]
 8012c10:	2b0a      	cmp	r3, #10
 8012c12:	d105      	bne.n	8012c20 <tcp_input+0x248>
 8012c14:	4b10      	ldr	r3, [pc, #64]	; (8012c58 <tcp_input+0x280>)
 8012c16:	22fc      	movs	r2, #252	; 0xfc
 8012c18:	4920      	ldr	r1, [pc, #128]	; (8012c9c <tcp_input+0x2c4>)
 8012c1a:	4811      	ldr	r0, [pc, #68]	; (8012c60 <tcp_input+0x288>)
 8012c1c:	f00a f8a0 	bl	801cd60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012c20:	69fb      	ldr	r3, [r7, #28]
 8012c22:	7d1b      	ldrb	r3, [r3, #20]
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	d105      	bne.n	8012c34 <tcp_input+0x25c>
 8012c28:	4b0b      	ldr	r3, [pc, #44]	; (8012c58 <tcp_input+0x280>)
 8012c2a:	22fd      	movs	r2, #253	; 0xfd
 8012c2c:	491c      	ldr	r1, [pc, #112]	; (8012ca0 <tcp_input+0x2c8>)
 8012c2e:	480c      	ldr	r0, [pc, #48]	; (8012c60 <tcp_input+0x288>)
 8012c30:	f00a f896 	bl	801cd60 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	7a1b      	ldrb	r3, [r3, #8]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d033      	beq.n	8012ca4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	7a1a      	ldrb	r2, [r3, #8]
 8012c40:	4b09      	ldr	r3, [pc, #36]	; (8012c68 <tcp_input+0x290>)
 8012c42:	685b      	ldr	r3, [r3, #4]
 8012c44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012c48:	3301      	adds	r3, #1
 8012c4a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d029      	beq.n	8012ca4 <tcp_input+0x2cc>
      prev = pcb;
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	61bb      	str	r3, [r7, #24]
      continue;
 8012c54:	e06b      	b.n	8012d2e <tcp_input+0x356>
 8012c56:	bf00      	nop
 8012c58:	0801f418 	.word	0x0801f418
 8012c5c:	0801f44c 	.word	0x0801f44c
 8012c60:	0801f464 	.word	0x0801f464
 8012c64:	2000afb8 	.word	0x2000afb8
 8012c68:	200102c0 	.word	0x200102c0
 8012c6c:	2000afbc 	.word	0x2000afbc
 8012c70:	2000afc0 	.word	0x2000afc0
 8012c74:	2000afbe 	.word	0x2000afbe
 8012c78:	0801f48c 	.word	0x0801f48c
 8012c7c:	0801f49c 	.word	0x0801f49c
 8012c80:	0801f4a8 	.word	0x0801f4a8
 8012c84:	2000afc8 	.word	0x2000afc8
 8012c88:	2000afcc 	.word	0x2000afcc
 8012c8c:	2000afd4 	.word	0x2000afd4
 8012c90:	2000afd2 	.word	0x2000afd2
 8012c94:	200139f4 	.word	0x200139f4
 8012c98:	0801f4c8 	.word	0x0801f4c8
 8012c9c:	0801f4f0 	.word	0x0801f4f0
 8012ca0:	0801f51c 	.word	0x0801f51c
    }

    if (pcb->remote_port == tcphdr->src &&
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	8b1a      	ldrh	r2, [r3, #24]
 8012ca8:	4b94      	ldr	r3, [pc, #592]	; (8012efc <tcp_input+0x524>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	881b      	ldrh	r3, [r3, #0]
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d13a      	bne.n	8012d2a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012cb4:	69fb      	ldr	r3, [r7, #28]
 8012cb6:	8ada      	ldrh	r2, [r3, #22]
 8012cb8:	4b90      	ldr	r3, [pc, #576]	; (8012efc <tcp_input+0x524>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	885b      	ldrh	r3, [r3, #2]
 8012cbe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d132      	bne.n	8012d2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	685a      	ldr	r2, [r3, #4]
 8012cc8:	4b8d      	ldr	r3, [pc, #564]	; (8012f00 <tcp_input+0x528>)
 8012cca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d12c      	bne.n	8012d2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	4b8a      	ldr	r3, [pc, #552]	; (8012f00 <tcp_input+0x528>)
 8012cd6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d126      	bne.n	8012d2a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	69fa      	ldr	r2, [r7, #28]
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d106      	bne.n	8012cf4 <tcp_input+0x31c>
 8012ce6:	4b87      	ldr	r3, [pc, #540]	; (8012f04 <tcp_input+0x52c>)
 8012ce8:	f240 120d 	movw	r2, #269	; 0x10d
 8012cec:	4986      	ldr	r1, [pc, #536]	; (8012f08 <tcp_input+0x530>)
 8012cee:	4887      	ldr	r0, [pc, #540]	; (8012f0c <tcp_input+0x534>)
 8012cf0:	f00a f836 	bl	801cd60 <iprintf>
      if (prev != NULL) {
 8012cf4:	69bb      	ldr	r3, [r7, #24]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d00a      	beq.n	8012d10 <tcp_input+0x338>
        prev->next = pcb->next;
 8012cfa:	69fb      	ldr	r3, [r7, #28]
 8012cfc:	68da      	ldr	r2, [r3, #12]
 8012cfe:	69bb      	ldr	r3, [r7, #24]
 8012d00:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012d02:	4b83      	ldr	r3, [pc, #524]	; (8012f10 <tcp_input+0x538>)
 8012d04:	681a      	ldr	r2, [r3, #0]
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012d0a:	4a81      	ldr	r2, [pc, #516]	; (8012f10 <tcp_input+0x538>)
 8012d0c:	69fb      	ldr	r3, [r7, #28]
 8012d0e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	68db      	ldr	r3, [r3, #12]
 8012d14:	69fa      	ldr	r2, [r7, #28]
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d111      	bne.n	8012d3e <tcp_input+0x366>
 8012d1a:	4b7a      	ldr	r3, [pc, #488]	; (8012f04 <tcp_input+0x52c>)
 8012d1c:	f240 1215 	movw	r2, #277	; 0x115
 8012d20:	497c      	ldr	r1, [pc, #496]	; (8012f14 <tcp_input+0x53c>)
 8012d22:	487a      	ldr	r0, [pc, #488]	; (8012f0c <tcp_input+0x534>)
 8012d24:	f00a f81c 	bl	801cd60 <iprintf>
      break;
 8012d28:	e009      	b.n	8012d3e <tcp_input+0x366>
    }
    prev = pcb;
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	61fb      	str	r3, [r7, #28]
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	f47f af5e 	bne.w	8012bf8 <tcp_input+0x220>
 8012d3c:	e000      	b.n	8012d40 <tcp_input+0x368>
      break;
 8012d3e:	bf00      	nop
  }

  if (pcb == NULL) {
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	f040 8095 	bne.w	8012e72 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d48:	4b73      	ldr	r3, [pc, #460]	; (8012f18 <tcp_input+0x540>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	61fb      	str	r3, [r7, #28]
 8012d4e:	e03f      	b.n	8012dd0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	7d1b      	ldrb	r3, [r3, #20]
 8012d54:	2b0a      	cmp	r3, #10
 8012d56:	d006      	beq.n	8012d66 <tcp_input+0x38e>
 8012d58:	4b6a      	ldr	r3, [pc, #424]	; (8012f04 <tcp_input+0x52c>)
 8012d5a:	f240 121f 	movw	r2, #287	; 0x11f
 8012d5e:	496f      	ldr	r1, [pc, #444]	; (8012f1c <tcp_input+0x544>)
 8012d60:	486a      	ldr	r0, [pc, #424]	; (8012f0c <tcp_input+0x534>)
 8012d62:	f009 fffd 	bl	801cd60 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d66:	69fb      	ldr	r3, [r7, #28]
 8012d68:	7a1b      	ldrb	r3, [r3, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d009      	beq.n	8012d82 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	7a1a      	ldrb	r2, [r3, #8]
 8012d72:	4b63      	ldr	r3, [pc, #396]	; (8012f00 <tcp_input+0x528>)
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d122      	bne.n	8012dc8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012d82:	69fb      	ldr	r3, [r7, #28]
 8012d84:	8b1a      	ldrh	r2, [r3, #24]
 8012d86:	4b5d      	ldr	r3, [pc, #372]	; (8012efc <tcp_input+0x524>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	881b      	ldrh	r3, [r3, #0]
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d11b      	bne.n	8012dca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012d92:	69fb      	ldr	r3, [r7, #28]
 8012d94:	8ada      	ldrh	r2, [r3, #22]
 8012d96:	4b59      	ldr	r3, [pc, #356]	; (8012efc <tcp_input+0x524>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	885b      	ldrh	r3, [r3, #2]
 8012d9c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d113      	bne.n	8012dca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	685a      	ldr	r2, [r3, #4]
 8012da6:	4b56      	ldr	r3, [pc, #344]	; (8012f00 <tcp_input+0x528>)
 8012da8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d10d      	bne.n	8012dca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012dae:	69fb      	ldr	r3, [r7, #28]
 8012db0:	681a      	ldr	r2, [r3, #0]
 8012db2:	4b53      	ldr	r3, [pc, #332]	; (8012f00 <tcp_input+0x528>)
 8012db4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d107      	bne.n	8012dca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012dba:	69f8      	ldr	r0, [r7, #28]
 8012dbc:	f000 fb54 	bl	8013468 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7fd ffc5 	bl	8010d50 <pbuf_free>
        return;
 8012dc6:	e1f0      	b.n	80131aa <tcp_input+0x7d2>
        continue;
 8012dc8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dca:	69fb      	ldr	r3, [r7, #28]
 8012dcc:	68db      	ldr	r3, [r3, #12]
 8012dce:	61fb      	str	r3, [r7, #28]
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d1bc      	bne.n	8012d50 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012dda:	4b51      	ldr	r3, [pc, #324]	; (8012f20 <tcp_input+0x548>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	617b      	str	r3, [r7, #20]
 8012de0:	e02a      	b.n	8012e38 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	7a1b      	ldrb	r3, [r3, #8]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d00c      	beq.n	8012e04 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	7a1a      	ldrb	r2, [r3, #8]
 8012dee:	4b44      	ldr	r3, [pc, #272]	; (8012f00 <tcp_input+0x528>)
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012df6:	3301      	adds	r3, #1
 8012df8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d002      	beq.n	8012e04 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	61bb      	str	r3, [r7, #24]
        continue;
 8012e02:	e016      	b.n	8012e32 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	8ada      	ldrh	r2, [r3, #22]
 8012e08:	4b3c      	ldr	r3, [pc, #240]	; (8012efc <tcp_input+0x524>)
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	885b      	ldrh	r3, [r3, #2]
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d10c      	bne.n	8012e2e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	4b39      	ldr	r3, [pc, #228]	; (8012f00 <tcp_input+0x528>)
 8012e1a:	695b      	ldr	r3, [r3, #20]
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d00f      	beq.n	8012e40 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d00d      	beq.n	8012e42 <tcp_input+0x46a>
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d009      	beq.n	8012e42 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	68db      	ldr	r3, [r3, #12]
 8012e36:	617b      	str	r3, [r7, #20]
 8012e38:	697b      	ldr	r3, [r7, #20]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d1d1      	bne.n	8012de2 <tcp_input+0x40a>
 8012e3e:	e000      	b.n	8012e42 <tcp_input+0x46a>
            break;
 8012e40:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d014      	beq.n	8012e72 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00a      	beq.n	8012e64 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	68da      	ldr	r2, [r3, #12]
 8012e52:	69bb      	ldr	r3, [r7, #24]
 8012e54:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012e56:	4b32      	ldr	r3, [pc, #200]	; (8012f20 <tcp_input+0x548>)
 8012e58:	681a      	ldr	r2, [r3, #0]
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012e5e:	4a30      	ldr	r2, [pc, #192]	; (8012f20 <tcp_input+0x548>)
 8012e60:	697b      	ldr	r3, [r7, #20]
 8012e62:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012e64:	6978      	ldr	r0, [r7, #20]
 8012e66:	f000 fa01 	bl	801326c <tcp_listen_input>
      }
      pbuf_free(p);
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f7fd ff70 	bl	8010d50 <pbuf_free>
      return;
 8012e70:	e19b      	b.n	80131aa <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	f000 8160 	beq.w	801313a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012e7a:	4b2a      	ldr	r3, [pc, #168]	; (8012f24 <tcp_input+0x54c>)
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	891a      	ldrh	r2, [r3, #8]
 8012e84:	4b27      	ldr	r3, [pc, #156]	; (8012f24 <tcp_input+0x54c>)
 8012e86:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012e88:	4a26      	ldr	r2, [pc, #152]	; (8012f24 <tcp_input+0x54c>)
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012e8e:	4b1b      	ldr	r3, [pc, #108]	; (8012efc <tcp_input+0x524>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	4a24      	ldr	r2, [pc, #144]	; (8012f24 <tcp_input+0x54c>)
 8012e94:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012e96:	4b24      	ldr	r3, [pc, #144]	; (8012f28 <tcp_input+0x550>)
 8012e98:	2200      	movs	r2, #0
 8012e9a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012e9c:	4b23      	ldr	r3, [pc, #140]	; (8012f2c <tcp_input+0x554>)
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012ea2:	4b23      	ldr	r3, [pc, #140]	; (8012f30 <tcp_input+0x558>)
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012ea8:	4b22      	ldr	r3, [pc, #136]	; (8012f34 <tcp_input+0x55c>)
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	f003 0308 	and.w	r3, r3, #8
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d006      	beq.n	8012ec2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	7b5b      	ldrb	r3, [r3, #13]
 8012eb8:	f043 0301 	orr.w	r3, r3, #1
 8012ebc:	b2da      	uxtb	r2, r3
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d038      	beq.n	8012f3c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012eca:	69f8      	ldr	r0, [r7, #28]
 8012ecc:	f7ff f93e 	bl	801214c <tcp_process_refused_data>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	f113 0f0d 	cmn.w	r3, #13
 8012ed6:	d007      	beq.n	8012ee8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ed8:	69fb      	ldr	r3, [r7, #28]
 8012eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d02d      	beq.n	8012f3c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ee0:	4b15      	ldr	r3, [pc, #84]	; (8012f38 <tcp_input+0x560>)
 8012ee2:	881b      	ldrh	r3, [r3, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d029      	beq.n	8012f3c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012ee8:	69fb      	ldr	r3, [r7, #28]
 8012eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f040 8104 	bne.w	80130fa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012ef2:	69f8      	ldr	r0, [r7, #28]
 8012ef4:	f003 f9be 	bl	8016274 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012ef8:	e0ff      	b.n	80130fa <tcp_input+0x722>
 8012efa:	bf00      	nop
 8012efc:	2000afb8 	.word	0x2000afb8
 8012f00:	200102c0 	.word	0x200102c0
 8012f04:	0801f418 	.word	0x0801f418
 8012f08:	0801f544 	.word	0x0801f544
 8012f0c:	0801f464 	.word	0x0801f464
 8012f10:	200139f4 	.word	0x200139f4
 8012f14:	0801f570 	.word	0x0801f570
 8012f18:	20013a04 	.word	0x20013a04
 8012f1c:	0801f59c 	.word	0x0801f59c
 8012f20:	200139fc 	.word	0x200139fc
 8012f24:	2000afa8 	.word	0x2000afa8
 8012f28:	2000afd8 	.word	0x2000afd8
 8012f2c:	2000afd5 	.word	0x2000afd5
 8012f30:	2000afd0 	.word	0x2000afd0
 8012f34:	2000afd4 	.word	0x2000afd4
 8012f38:	2000afd2 	.word	0x2000afd2
      }
    }
    tcp_input_pcb = pcb;
 8012f3c:	4a9c      	ldr	r2, [pc, #624]	; (80131b0 <tcp_input+0x7d8>)
 8012f3e:	69fb      	ldr	r3, [r7, #28]
 8012f40:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012f42:	69f8      	ldr	r0, [r7, #28]
 8012f44:	f000 fb0a 	bl	801355c <tcp_process>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012f4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f50:	f113 0f0d 	cmn.w	r3, #13
 8012f54:	f000 80d3 	beq.w	80130fe <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8012f58:	4b96      	ldr	r3, [pc, #600]	; (80131b4 <tcp_input+0x7dc>)
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	f003 0308 	and.w	r3, r3, #8
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d015      	beq.n	8012f90 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012f64:	69fb      	ldr	r3, [r7, #28]
 8012f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d008      	beq.n	8012f80 <tcp_input+0x5a8>
 8012f6e:	69fb      	ldr	r3, [r7, #28]
 8012f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f74:	69fa      	ldr	r2, [r7, #28]
 8012f76:	6912      	ldr	r2, [r2, #16]
 8012f78:	f06f 010d 	mvn.w	r1, #13
 8012f7c:	4610      	mov	r0, r2
 8012f7e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012f80:	69f9      	ldr	r1, [r7, #28]
 8012f82:	488d      	ldr	r0, [pc, #564]	; (80131b8 <tcp_input+0x7e0>)
 8012f84:	f7ff fbb0 	bl	80126e8 <tcp_pcb_remove>
        tcp_free(pcb);
 8012f88:	69f8      	ldr	r0, [r7, #28]
 8012f8a:	f7fe f99d 	bl	80112c8 <tcp_free>
 8012f8e:	e0c1      	b.n	8013114 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012f90:	2300      	movs	r3, #0
 8012f92:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012f94:	4b89      	ldr	r3, [pc, #548]	; (80131bc <tcp_input+0x7e4>)
 8012f96:	881b      	ldrh	r3, [r3, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d01d      	beq.n	8012fd8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012f9c:	4b87      	ldr	r3, [pc, #540]	; (80131bc <tcp_input+0x7e4>)
 8012f9e:	881b      	ldrh	r3, [r3, #0]
 8012fa0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012fa2:	69fb      	ldr	r3, [r7, #28]
 8012fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00a      	beq.n	8012fc2 <tcp_input+0x5ea>
 8012fac:	69fb      	ldr	r3, [r7, #28]
 8012fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fb2:	69fa      	ldr	r2, [r7, #28]
 8012fb4:	6910      	ldr	r0, [r2, #16]
 8012fb6:	89fa      	ldrh	r2, [r7, #14]
 8012fb8:	69f9      	ldr	r1, [r7, #28]
 8012fba:	4798      	blx	r3
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	74fb      	strb	r3, [r7, #19]
 8012fc0:	e001      	b.n	8012fc6 <tcp_input+0x5ee>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012fc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012fca:	f113 0f0d 	cmn.w	r3, #13
 8012fce:	f000 8098 	beq.w	8013102 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012fd2:	4b7a      	ldr	r3, [pc, #488]	; (80131bc <tcp_input+0x7e4>)
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012fd8:	69f8      	ldr	r0, [r7, #28]
 8012fda:	f000 f907 	bl	80131ec <tcp_input_delayed_close>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	f040 8090 	bne.w	8013106 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012fe6:	4b76      	ldr	r3, [pc, #472]	; (80131c0 <tcp_input+0x7e8>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d041      	beq.n	8013072 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012fee:	69fb      	ldr	r3, [r7, #28]
 8012ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d006      	beq.n	8013004 <tcp_input+0x62c>
 8012ff6:	4b73      	ldr	r3, [pc, #460]	; (80131c4 <tcp_input+0x7ec>)
 8012ff8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012ffc:	4972      	ldr	r1, [pc, #456]	; (80131c8 <tcp_input+0x7f0>)
 8012ffe:	4873      	ldr	r0, [pc, #460]	; (80131cc <tcp_input+0x7f4>)
 8013000:	f009 feae 	bl	801cd60 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	8b5b      	ldrh	r3, [r3, #26]
 8013008:	f003 0310 	and.w	r3, r3, #16
 801300c:	2b00      	cmp	r3, #0
 801300e:	d008      	beq.n	8013022 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013010:	4b6b      	ldr	r3, [pc, #428]	; (80131c0 <tcp_input+0x7e8>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	4618      	mov	r0, r3
 8013016:	f7fd fe9b 	bl	8010d50 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801301a:	69f8      	ldr	r0, [r7, #28]
 801301c:	f7fe fc3c 	bl	8011898 <tcp_abort>
            goto aborted;
 8013020:	e078      	b.n	8013114 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013028:	2b00      	cmp	r3, #0
 801302a:	d00c      	beq.n	8013046 <tcp_input+0x66e>
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	6918      	ldr	r0, [r3, #16]
 8013036:	4b62      	ldr	r3, [pc, #392]	; (80131c0 <tcp_input+0x7e8>)
 8013038:	681a      	ldr	r2, [r3, #0]
 801303a:	2300      	movs	r3, #0
 801303c:	69f9      	ldr	r1, [r7, #28]
 801303e:	47a0      	blx	r4
 8013040:	4603      	mov	r3, r0
 8013042:	74fb      	strb	r3, [r7, #19]
 8013044:	e008      	b.n	8013058 <tcp_input+0x680>
 8013046:	4b5e      	ldr	r3, [pc, #376]	; (80131c0 <tcp_input+0x7e8>)
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	2300      	movs	r3, #0
 801304c:	69f9      	ldr	r1, [r7, #28]
 801304e:	2000      	movs	r0, #0
 8013050:	f7ff f952 	bl	80122f8 <tcp_recv_null>
 8013054:	4603      	mov	r3, r0
 8013056:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013058:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801305c:	f113 0f0d 	cmn.w	r3, #13
 8013060:	d053      	beq.n	801310a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013062:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d003      	beq.n	8013072 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801306a:	4b55      	ldr	r3, [pc, #340]	; (80131c0 <tcp_input+0x7e8>)
 801306c:	681a      	ldr	r2, [r3, #0]
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013072:	4b50      	ldr	r3, [pc, #320]	; (80131b4 <tcp_input+0x7dc>)
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	f003 0320 	and.w	r3, r3, #32
 801307a:	2b00      	cmp	r3, #0
 801307c:	d030      	beq.n	80130e0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801307e:	69fb      	ldr	r3, [r7, #28]
 8013080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013082:	2b00      	cmp	r3, #0
 8013084:	d009      	beq.n	801309a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013086:	69fb      	ldr	r3, [r7, #28]
 8013088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801308a:	7b5a      	ldrb	r2, [r3, #13]
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013090:	f042 0220 	orr.w	r2, r2, #32
 8013094:	b2d2      	uxtb	r2, r2
 8013096:	735a      	strb	r2, [r3, #13]
 8013098:	e022      	b.n	80130e0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801309e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80130a2:	d005      	beq.n	80130b0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130a8:	3301      	adds	r3, #1
 80130aa:	b29a      	uxth	r2, r3
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80130b0:	69fb      	ldr	r3, [r7, #28]
 80130b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d00b      	beq.n	80130d2 <tcp_input+0x6fa>
 80130ba:	69fb      	ldr	r3, [r7, #28]
 80130bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	6918      	ldr	r0, [r3, #16]
 80130c4:	2300      	movs	r3, #0
 80130c6:	2200      	movs	r2, #0
 80130c8:	69f9      	ldr	r1, [r7, #28]
 80130ca:	47a0      	blx	r4
 80130cc:	4603      	mov	r3, r0
 80130ce:	74fb      	strb	r3, [r7, #19]
 80130d0:	e001      	b.n	80130d6 <tcp_input+0x6fe>
 80130d2:	2300      	movs	r3, #0
 80130d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80130d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80130da:	f113 0f0d 	cmn.w	r3, #13
 80130de:	d016      	beq.n	801310e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80130e0:	4b33      	ldr	r3, [pc, #204]	; (80131b0 <tcp_input+0x7d8>)
 80130e2:	2200      	movs	r2, #0
 80130e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80130e6:	69f8      	ldr	r0, [r7, #28]
 80130e8:	f000 f880 	bl	80131ec <tcp_input_delayed_close>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d10f      	bne.n	8013112 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80130f2:	69f8      	ldr	r0, [r7, #28]
 80130f4:	f002 fab8 	bl	8015668 <tcp_output>
 80130f8:	e00c      	b.n	8013114 <tcp_input+0x73c>
        goto aborted;
 80130fa:	bf00      	nop
 80130fc:	e00a      	b.n	8013114 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80130fe:	bf00      	nop
 8013100:	e008      	b.n	8013114 <tcp_input+0x73c>
              goto aborted;
 8013102:	bf00      	nop
 8013104:	e006      	b.n	8013114 <tcp_input+0x73c>
          goto aborted;
 8013106:	bf00      	nop
 8013108:	e004      	b.n	8013114 <tcp_input+0x73c>
            goto aborted;
 801310a:	bf00      	nop
 801310c:	e002      	b.n	8013114 <tcp_input+0x73c>
              goto aborted;
 801310e:	bf00      	nop
 8013110:	e000      	b.n	8013114 <tcp_input+0x73c>
          goto aborted;
 8013112:	bf00      	nop
    tcp_input_pcb = NULL;
 8013114:	4b26      	ldr	r3, [pc, #152]	; (80131b0 <tcp_input+0x7d8>)
 8013116:	2200      	movs	r2, #0
 8013118:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801311a:	4b29      	ldr	r3, [pc, #164]	; (80131c0 <tcp_input+0x7e8>)
 801311c:	2200      	movs	r2, #0
 801311e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013120:	4b2b      	ldr	r3, [pc, #172]	; (80131d0 <tcp_input+0x7f8>)
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d03f      	beq.n	80131a8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8013128:	4b29      	ldr	r3, [pc, #164]	; (80131d0 <tcp_input+0x7f8>)
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	4618      	mov	r0, r3
 801312e:	f7fd fe0f 	bl	8010d50 <pbuf_free>
      inseg.p = NULL;
 8013132:	4b27      	ldr	r3, [pc, #156]	; (80131d0 <tcp_input+0x7f8>)
 8013134:	2200      	movs	r2, #0
 8013136:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013138:	e036      	b.n	80131a8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801313a:	4b26      	ldr	r3, [pc, #152]	; (80131d4 <tcp_input+0x7fc>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	899b      	ldrh	r3, [r3, #12]
 8013140:	b29b      	uxth	r3, r3
 8013142:	4618      	mov	r0, r3
 8013144:	f7fc fa4c 	bl	800f5e0 <lwip_htons>
 8013148:	4603      	mov	r3, r0
 801314a:	b2db      	uxtb	r3, r3
 801314c:	f003 0304 	and.w	r3, r3, #4
 8013150:	2b00      	cmp	r3, #0
 8013152:	d118      	bne.n	8013186 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013154:	4b20      	ldr	r3, [pc, #128]	; (80131d8 <tcp_input+0x800>)
 8013156:	6819      	ldr	r1, [r3, #0]
 8013158:	4b20      	ldr	r3, [pc, #128]	; (80131dc <tcp_input+0x804>)
 801315a:	881b      	ldrh	r3, [r3, #0]
 801315c:	461a      	mov	r2, r3
 801315e:	4b20      	ldr	r3, [pc, #128]	; (80131e0 <tcp_input+0x808>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013164:	4b1b      	ldr	r3, [pc, #108]	; (80131d4 <tcp_input+0x7fc>)
 8013166:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013168:	885b      	ldrh	r3, [r3, #2]
 801316a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801316c:	4a19      	ldr	r2, [pc, #100]	; (80131d4 <tcp_input+0x7fc>)
 801316e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013170:	8812      	ldrh	r2, [r2, #0]
 8013172:	b292      	uxth	r2, r2
 8013174:	9202      	str	r2, [sp, #8]
 8013176:	9301      	str	r3, [sp, #4]
 8013178:	4b1a      	ldr	r3, [pc, #104]	; (80131e4 <tcp_input+0x80c>)
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	4b1a      	ldr	r3, [pc, #104]	; (80131e8 <tcp_input+0x810>)
 801317e:	4602      	mov	r2, r0
 8013180:	2000      	movs	r0, #0
 8013182:	f003 f825 	bl	80161d0 <tcp_rst>
    pbuf_free(p);
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7fd fde2 	bl	8010d50 <pbuf_free>
  return;
 801318c:	e00c      	b.n	80131a8 <tcp_input+0x7d0>
    goto dropped;
 801318e:	bf00      	nop
 8013190:	e006      	b.n	80131a0 <tcp_input+0x7c8>
    goto dropped;
 8013192:	bf00      	nop
 8013194:	e004      	b.n	80131a0 <tcp_input+0x7c8>
    goto dropped;
 8013196:	bf00      	nop
 8013198:	e002      	b.n	80131a0 <tcp_input+0x7c8>
      goto dropped;
 801319a:	bf00      	nop
 801319c:	e000      	b.n	80131a0 <tcp_input+0x7c8>
      goto dropped;
 801319e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f7fd fdd5 	bl	8010d50 <pbuf_free>
 80131a6:	e000      	b.n	80131aa <tcp_input+0x7d2>
  return;
 80131a8:	bf00      	nop
}
 80131aa:	3724      	adds	r7, #36	; 0x24
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd90      	pop	{r4, r7, pc}
 80131b0:	20013a08 	.word	0x20013a08
 80131b4:	2000afd5 	.word	0x2000afd5
 80131b8:	200139f4 	.word	0x200139f4
 80131bc:	2000afd0 	.word	0x2000afd0
 80131c0:	2000afd8 	.word	0x2000afd8
 80131c4:	0801f418 	.word	0x0801f418
 80131c8:	0801f5cc 	.word	0x0801f5cc
 80131cc:	0801f464 	.word	0x0801f464
 80131d0:	2000afa8 	.word	0x2000afa8
 80131d4:	2000afb8 	.word	0x2000afb8
 80131d8:	2000afcc 	.word	0x2000afcc
 80131dc:	2000afd2 	.word	0x2000afd2
 80131e0:	2000afc8 	.word	0x2000afc8
 80131e4:	200102d0 	.word	0x200102d0
 80131e8:	200102d4 	.word	0x200102d4

080131ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d106      	bne.n	8013208 <tcp_input_delayed_close+0x1c>
 80131fa:	4b17      	ldr	r3, [pc, #92]	; (8013258 <tcp_input_delayed_close+0x6c>)
 80131fc:	f240 225a 	movw	r2, #602	; 0x25a
 8013200:	4916      	ldr	r1, [pc, #88]	; (801325c <tcp_input_delayed_close+0x70>)
 8013202:	4817      	ldr	r0, [pc, #92]	; (8013260 <tcp_input_delayed_close+0x74>)
 8013204:	f009 fdac 	bl	801cd60 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013208:	4b16      	ldr	r3, [pc, #88]	; (8013264 <tcp_input_delayed_close+0x78>)
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	f003 0310 	and.w	r3, r3, #16
 8013210:	2b00      	cmp	r3, #0
 8013212:	d01c      	beq.n	801324e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	8b5b      	ldrh	r3, [r3, #26]
 8013218:	f003 0310 	and.w	r3, r3, #16
 801321c:	2b00      	cmp	r3, #0
 801321e:	d10d      	bne.n	801323c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013226:	2b00      	cmp	r3, #0
 8013228:	d008      	beq.n	801323c <tcp_input_delayed_close+0x50>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013230:	687a      	ldr	r2, [r7, #4]
 8013232:	6912      	ldr	r2, [r2, #16]
 8013234:	f06f 010e 	mvn.w	r1, #14
 8013238:	4610      	mov	r0, r2
 801323a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801323c:	6879      	ldr	r1, [r7, #4]
 801323e:	480a      	ldr	r0, [pc, #40]	; (8013268 <tcp_input_delayed_close+0x7c>)
 8013240:	f7ff fa52 	bl	80126e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7fe f83f 	bl	80112c8 <tcp_free>
    return 1;
 801324a:	2301      	movs	r3, #1
 801324c:	e000      	b.n	8013250 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801324e:	2300      	movs	r3, #0
}
 8013250:	4618      	mov	r0, r3
 8013252:	3708      	adds	r7, #8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}
 8013258:	0801f418 	.word	0x0801f418
 801325c:	0801f5e8 	.word	0x0801f5e8
 8013260:	0801f464 	.word	0x0801f464
 8013264:	2000afd5 	.word	0x2000afd5
 8013268:	200139f4 	.word	0x200139f4

0801326c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801326c:	b590      	push	{r4, r7, lr}
 801326e:	b08b      	sub	sp, #44	; 0x2c
 8013270:	af04      	add	r7, sp, #16
 8013272:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013274:	4b6f      	ldr	r3, [pc, #444]	; (8013434 <tcp_listen_input+0x1c8>)
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	f003 0304 	and.w	r3, r3, #4
 801327c:	2b00      	cmp	r3, #0
 801327e:	f040 80d2 	bne.w	8013426 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d106      	bne.n	8013296 <tcp_listen_input+0x2a>
 8013288:	4b6b      	ldr	r3, [pc, #428]	; (8013438 <tcp_listen_input+0x1cc>)
 801328a:	f240 2281 	movw	r2, #641	; 0x281
 801328e:	496b      	ldr	r1, [pc, #428]	; (801343c <tcp_listen_input+0x1d0>)
 8013290:	486b      	ldr	r0, [pc, #428]	; (8013440 <tcp_listen_input+0x1d4>)
 8013292:	f009 fd65 	bl	801cd60 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013296:	4b67      	ldr	r3, [pc, #412]	; (8013434 <tcp_listen_input+0x1c8>)
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	f003 0310 	and.w	r3, r3, #16
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d019      	beq.n	80132d6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132a2:	4b68      	ldr	r3, [pc, #416]	; (8013444 <tcp_listen_input+0x1d8>)
 80132a4:	6819      	ldr	r1, [r3, #0]
 80132a6:	4b68      	ldr	r3, [pc, #416]	; (8013448 <tcp_listen_input+0x1dc>)
 80132a8:	881b      	ldrh	r3, [r3, #0]
 80132aa:	461a      	mov	r2, r3
 80132ac:	4b67      	ldr	r3, [pc, #412]	; (801344c <tcp_listen_input+0x1e0>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132b2:	4b67      	ldr	r3, [pc, #412]	; (8013450 <tcp_listen_input+0x1e4>)
 80132b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132b6:	885b      	ldrh	r3, [r3, #2]
 80132b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132ba:	4a65      	ldr	r2, [pc, #404]	; (8013450 <tcp_listen_input+0x1e4>)
 80132bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132be:	8812      	ldrh	r2, [r2, #0]
 80132c0:	b292      	uxth	r2, r2
 80132c2:	9202      	str	r2, [sp, #8]
 80132c4:	9301      	str	r3, [sp, #4]
 80132c6:	4b63      	ldr	r3, [pc, #396]	; (8013454 <tcp_listen_input+0x1e8>)
 80132c8:	9300      	str	r3, [sp, #0]
 80132ca:	4b63      	ldr	r3, [pc, #396]	; (8013458 <tcp_listen_input+0x1ec>)
 80132cc:	4602      	mov	r2, r0
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f002 ff7e 	bl	80161d0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80132d4:	e0a9      	b.n	801342a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80132d6:	4b57      	ldr	r3, [pc, #348]	; (8013434 <tcp_listen_input+0x1c8>)
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	f003 0302 	and.w	r3, r3, #2
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f000 80a3 	beq.w	801342a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	7d5b      	ldrb	r3, [r3, #21]
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7ff f929 	bl	8012540 <tcp_alloc>
 80132ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d111      	bne.n	801331a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	699b      	ldr	r3, [r3, #24]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d00a      	beq.n	8013314 <tcp_listen_input+0xa8>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	699b      	ldr	r3, [r3, #24]
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	6910      	ldr	r0, [r2, #16]
 8013306:	f04f 32ff 	mov.w	r2, #4294967295
 801330a:	2100      	movs	r1, #0
 801330c:	4798      	blx	r3
 801330e:	4603      	mov	r3, r0
 8013310:	73bb      	strb	r3, [r7, #14]
      return;
 8013312:	e08b      	b.n	801342c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013314:	23f0      	movs	r3, #240	; 0xf0
 8013316:	73bb      	strb	r3, [r7, #14]
      return;
 8013318:	e088      	b.n	801342c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801331a:	4b50      	ldr	r3, [pc, #320]	; (801345c <tcp_listen_input+0x1f0>)
 801331c:	695a      	ldr	r2, [r3, #20]
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013322:	4b4e      	ldr	r3, [pc, #312]	; (801345c <tcp_listen_input+0x1f0>)
 8013324:	691a      	ldr	r2, [r3, #16]
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	8ada      	ldrh	r2, [r3, #22]
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013332:	4b47      	ldr	r3, [pc, #284]	; (8013450 <tcp_listen_input+0x1e4>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	881b      	ldrh	r3, [r3, #0]
 8013338:	b29a      	uxth	r2, r3
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	2203      	movs	r2, #3
 8013342:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013344:	4b41      	ldr	r3, [pc, #260]	; (801344c <tcp_listen_input+0x1e0>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	1c5a      	adds	r2, r3, #1
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013356:	6978      	ldr	r0, [r7, #20]
 8013358:	f7ff fa5a 	bl	8012810 <tcp_next_iss>
 801335c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	693a      	ldr	r2, [r7, #16]
 8013362:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	693a      	ldr	r2, [r7, #16]
 8013368:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	693a      	ldr	r2, [r7, #16]
 801336e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	693a      	ldr	r2, [r7, #16]
 8013374:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013376:	4b35      	ldr	r3, [pc, #212]	; (801344c <tcp_listen_input+0x1e0>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	1e5a      	subs	r2, r3, #1
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	691a      	ldr	r2, [r3, #16]
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	687a      	ldr	r2, [r7, #4]
 801338c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	7a5b      	ldrb	r3, [r3, #9]
 8013392:	f003 030c 	and.w	r3, r3, #12
 8013396:	b2da      	uxtb	r2, r3
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	7a1a      	ldrb	r2, [r3, #8]
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80133a4:	4b2e      	ldr	r3, [pc, #184]	; (8013460 <tcp_listen_input+0x1f4>)
 80133a6:	681a      	ldr	r2, [r3, #0]
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	60da      	str	r2, [r3, #12]
 80133ac:	4a2c      	ldr	r2, [pc, #176]	; (8013460 <tcp_listen_input+0x1f4>)
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	6013      	str	r3, [r2, #0]
 80133b2:	f003 f8cf 	bl	8016554 <tcp_timer_needed>
 80133b6:	4b2b      	ldr	r3, [pc, #172]	; (8013464 <tcp_listen_input+0x1f8>)
 80133b8:	2201      	movs	r2, #1
 80133ba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80133bc:	6978      	ldr	r0, [r7, #20]
 80133be:	f001 fd8d 	bl	8014edc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80133c2:	4b23      	ldr	r3, [pc, #140]	; (8013450 <tcp_listen_input+0x1e4>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	89db      	ldrh	r3, [r3, #14]
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	3304      	adds	r3, #4
 80133e4:	4618      	mov	r0, r3
 80133e6:	f006 fe5b 	bl	801a0a0 <ip4_route>
 80133ea:	4601      	mov	r1, r0
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	3304      	adds	r3, #4
 80133f0:	461a      	mov	r2, r3
 80133f2:	4620      	mov	r0, r4
 80133f4:	f7ff fa32 	bl	801285c <tcp_eff_send_mss_netif>
 80133f8:	4603      	mov	r3, r0
 80133fa:	461a      	mov	r2, r3
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013400:	2112      	movs	r1, #18
 8013402:	6978      	ldr	r0, [r7, #20]
 8013404:	f002 f842 	bl	801548c <tcp_enqueue_flags>
 8013408:	4603      	mov	r3, r0
 801340a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801340c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d004      	beq.n	801341e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013414:	2100      	movs	r1, #0
 8013416:	6978      	ldr	r0, [r7, #20]
 8013418:	f7fe f980 	bl	801171c <tcp_abandon>
      return;
 801341c:	e006      	b.n	801342c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801341e:	6978      	ldr	r0, [r7, #20]
 8013420:	f002 f922 	bl	8015668 <tcp_output>
  return;
 8013424:	e001      	b.n	801342a <tcp_listen_input+0x1be>
    return;
 8013426:	bf00      	nop
 8013428:	e000      	b.n	801342c <tcp_listen_input+0x1c0>
  return;
 801342a:	bf00      	nop
}
 801342c:	371c      	adds	r7, #28
 801342e:	46bd      	mov	sp, r7
 8013430:	bd90      	pop	{r4, r7, pc}
 8013432:	bf00      	nop
 8013434:	2000afd4 	.word	0x2000afd4
 8013438:	0801f418 	.word	0x0801f418
 801343c:	0801f610 	.word	0x0801f610
 8013440:	0801f464 	.word	0x0801f464
 8013444:	2000afcc 	.word	0x2000afcc
 8013448:	2000afd2 	.word	0x2000afd2
 801344c:	2000afc8 	.word	0x2000afc8
 8013450:	2000afb8 	.word	0x2000afb8
 8013454:	200102d0 	.word	0x200102d0
 8013458:	200102d4 	.word	0x200102d4
 801345c:	200102c0 	.word	0x200102c0
 8013460:	200139f4 	.word	0x200139f4
 8013464:	200139f0 	.word	0x200139f0

08013468 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b086      	sub	sp, #24
 801346c:	af04      	add	r7, sp, #16
 801346e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013470:	4b2f      	ldr	r3, [pc, #188]	; (8013530 <tcp_timewait_input+0xc8>)
 8013472:	781b      	ldrb	r3, [r3, #0]
 8013474:	f003 0304 	and.w	r3, r3, #4
 8013478:	2b00      	cmp	r3, #0
 801347a:	d153      	bne.n	8013524 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d106      	bne.n	8013490 <tcp_timewait_input+0x28>
 8013482:	4b2c      	ldr	r3, [pc, #176]	; (8013534 <tcp_timewait_input+0xcc>)
 8013484:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013488:	492b      	ldr	r1, [pc, #172]	; (8013538 <tcp_timewait_input+0xd0>)
 801348a:	482c      	ldr	r0, [pc, #176]	; (801353c <tcp_timewait_input+0xd4>)
 801348c:	f009 fc68 	bl	801cd60 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013490:	4b27      	ldr	r3, [pc, #156]	; (8013530 <tcp_timewait_input+0xc8>)
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	f003 0302 	and.w	r3, r3, #2
 8013498:	2b00      	cmp	r3, #0
 801349a:	d02a      	beq.n	80134f2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801349c:	4b28      	ldr	r3, [pc, #160]	; (8013540 <tcp_timewait_input+0xd8>)
 801349e:	681a      	ldr	r2, [r3, #0]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134a4:	1ad3      	subs	r3, r2, r3
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	db2d      	blt.n	8013506 <tcp_timewait_input+0x9e>
 80134aa:	4b25      	ldr	r3, [pc, #148]	; (8013540 <tcp_timewait_input+0xd8>)
 80134ac:	681a      	ldr	r2, [r3, #0]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b2:	6879      	ldr	r1, [r7, #4]
 80134b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80134b6:	440b      	add	r3, r1
 80134b8:	1ad3      	subs	r3, r2, r3
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	dc23      	bgt.n	8013506 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134be:	4b21      	ldr	r3, [pc, #132]	; (8013544 <tcp_timewait_input+0xdc>)
 80134c0:	6819      	ldr	r1, [r3, #0]
 80134c2:	4b21      	ldr	r3, [pc, #132]	; (8013548 <tcp_timewait_input+0xe0>)
 80134c4:	881b      	ldrh	r3, [r3, #0]
 80134c6:	461a      	mov	r2, r3
 80134c8:	4b1d      	ldr	r3, [pc, #116]	; (8013540 <tcp_timewait_input+0xd8>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134ce:	4b1f      	ldr	r3, [pc, #124]	; (801354c <tcp_timewait_input+0xe4>)
 80134d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134d2:	885b      	ldrh	r3, [r3, #2]
 80134d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134d6:	4a1d      	ldr	r2, [pc, #116]	; (801354c <tcp_timewait_input+0xe4>)
 80134d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134da:	8812      	ldrh	r2, [r2, #0]
 80134dc:	b292      	uxth	r2, r2
 80134de:	9202      	str	r2, [sp, #8]
 80134e0:	9301      	str	r3, [sp, #4]
 80134e2:	4b1b      	ldr	r3, [pc, #108]	; (8013550 <tcp_timewait_input+0xe8>)
 80134e4:	9300      	str	r3, [sp, #0]
 80134e6:	4b1b      	ldr	r3, [pc, #108]	; (8013554 <tcp_timewait_input+0xec>)
 80134e8:	4602      	mov	r2, r0
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f002 fe70 	bl	80161d0 <tcp_rst>
      return;
 80134f0:	e01b      	b.n	801352a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80134f2:	4b0f      	ldr	r3, [pc, #60]	; (8013530 <tcp_timewait_input+0xc8>)
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	f003 0301 	and.w	r3, r3, #1
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d003      	beq.n	8013506 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80134fe:	4b16      	ldr	r3, [pc, #88]	; (8013558 <tcp_timewait_input+0xf0>)
 8013500:	681a      	ldr	r2, [r3, #0]
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013506:	4b10      	ldr	r3, [pc, #64]	; (8013548 <tcp_timewait_input+0xe0>)
 8013508:	881b      	ldrh	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00c      	beq.n	8013528 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	8b5b      	ldrh	r3, [r3, #26]
 8013512:	f043 0302 	orr.w	r3, r3, #2
 8013516:	b29a      	uxth	r2, r3
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f002 f8a3 	bl	8015668 <tcp_output>
  }
  return;
 8013522:	e001      	b.n	8013528 <tcp_timewait_input+0xc0>
    return;
 8013524:	bf00      	nop
 8013526:	e000      	b.n	801352a <tcp_timewait_input+0xc2>
  return;
 8013528:	bf00      	nop
}
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	2000afd4 	.word	0x2000afd4
 8013534:	0801f418 	.word	0x0801f418
 8013538:	0801f630 	.word	0x0801f630
 801353c:	0801f464 	.word	0x0801f464
 8013540:	2000afc8 	.word	0x2000afc8
 8013544:	2000afcc 	.word	0x2000afcc
 8013548:	2000afd2 	.word	0x2000afd2
 801354c:	2000afb8 	.word	0x2000afb8
 8013550:	200102d0 	.word	0x200102d0
 8013554:	200102d4 	.word	0x200102d4
 8013558:	200139f8 	.word	0x200139f8

0801355c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801355c:	b590      	push	{r4, r7, lr}
 801355e:	b08d      	sub	sp, #52	; 0x34
 8013560:	af04      	add	r7, sp, #16
 8013562:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013564:	2300      	movs	r3, #0
 8013566:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013568:	2300      	movs	r3, #0
 801356a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d106      	bne.n	8013580 <tcp_process+0x24>
 8013572:	4ba5      	ldr	r3, [pc, #660]	; (8013808 <tcp_process+0x2ac>)
 8013574:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013578:	49a4      	ldr	r1, [pc, #656]	; (801380c <tcp_process+0x2b0>)
 801357a:	48a5      	ldr	r0, [pc, #660]	; (8013810 <tcp_process+0x2b4>)
 801357c:	f009 fbf0 	bl	801cd60 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013580:	4ba4      	ldr	r3, [pc, #656]	; (8013814 <tcp_process+0x2b8>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	f003 0304 	and.w	r3, r3, #4
 8013588:	2b00      	cmp	r3, #0
 801358a:	d04e      	beq.n	801362a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	7d1b      	ldrb	r3, [r3, #20]
 8013590:	2b02      	cmp	r3, #2
 8013592:	d108      	bne.n	80135a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013598:	4b9f      	ldr	r3, [pc, #636]	; (8013818 <tcp_process+0x2bc>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	429a      	cmp	r2, r3
 801359e:	d123      	bne.n	80135e8 <tcp_process+0x8c>
        acceptable = 1;
 80135a0:	2301      	movs	r3, #1
 80135a2:	76fb      	strb	r3, [r7, #27]
 80135a4:	e020      	b.n	80135e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135aa:	4b9c      	ldr	r3, [pc, #624]	; (801381c <tcp_process+0x2c0>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d102      	bne.n	80135b8 <tcp_process+0x5c>
        acceptable = 1;
 80135b2:	2301      	movs	r3, #1
 80135b4:	76fb      	strb	r3, [r7, #27]
 80135b6:	e017      	b.n	80135e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80135b8:	4b98      	ldr	r3, [pc, #608]	; (801381c <tcp_process+0x2c0>)
 80135ba:	681a      	ldr	r2, [r3, #0]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135c0:	1ad3      	subs	r3, r2, r3
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	db10      	blt.n	80135e8 <tcp_process+0x8c>
 80135c6:	4b95      	ldr	r3, [pc, #596]	; (801381c <tcp_process+0x2c0>)
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ce:	6879      	ldr	r1, [r7, #4]
 80135d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80135d2:	440b      	add	r3, r1
 80135d4:	1ad3      	subs	r3, r2, r3
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	dc06      	bgt.n	80135e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	8b5b      	ldrh	r3, [r3, #26]
 80135de:	f043 0302 	orr.w	r3, r3, #2
 80135e2:	b29a      	uxth	r2, r3
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80135e8:	7efb      	ldrb	r3, [r7, #27]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d01b      	beq.n	8013626 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	7d1b      	ldrb	r3, [r3, #20]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d106      	bne.n	8013604 <tcp_process+0xa8>
 80135f6:	4b84      	ldr	r3, [pc, #528]	; (8013808 <tcp_process+0x2ac>)
 80135f8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80135fc:	4988      	ldr	r1, [pc, #544]	; (8013820 <tcp_process+0x2c4>)
 80135fe:	4884      	ldr	r0, [pc, #528]	; (8013810 <tcp_process+0x2b4>)
 8013600:	f009 fbae 	bl	801cd60 <iprintf>
      recv_flags |= TF_RESET;
 8013604:	4b87      	ldr	r3, [pc, #540]	; (8013824 <tcp_process+0x2c8>)
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	f043 0308 	orr.w	r3, r3, #8
 801360c:	b2da      	uxtb	r2, r3
 801360e:	4b85      	ldr	r3, [pc, #532]	; (8013824 <tcp_process+0x2c8>)
 8013610:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	8b5b      	ldrh	r3, [r3, #26]
 8013616:	f023 0301 	bic.w	r3, r3, #1
 801361a:	b29a      	uxth	r2, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013620:	f06f 030d 	mvn.w	r3, #13
 8013624:	e37a      	b.n	8013d1c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013626:	2300      	movs	r3, #0
 8013628:	e378      	b.n	8013d1c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801362a:	4b7a      	ldr	r3, [pc, #488]	; (8013814 <tcp_process+0x2b8>)
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	f003 0302 	and.w	r3, r3, #2
 8013632:	2b00      	cmp	r3, #0
 8013634:	d010      	beq.n	8013658 <tcp_process+0xfc>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	7d1b      	ldrb	r3, [r3, #20]
 801363a:	2b02      	cmp	r3, #2
 801363c:	d00c      	beq.n	8013658 <tcp_process+0xfc>
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	7d1b      	ldrb	r3, [r3, #20]
 8013642:	2b03      	cmp	r3, #3
 8013644:	d008      	beq.n	8013658 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	8b5b      	ldrh	r3, [r3, #26]
 801364a:	f043 0302 	orr.w	r3, r3, #2
 801364e:	b29a      	uxth	r2, r3
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013654:	2300      	movs	r3, #0
 8013656:	e361      	b.n	8013d1c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	8b5b      	ldrh	r3, [r3, #26]
 801365c:	f003 0310 	and.w	r3, r3, #16
 8013660:	2b00      	cmp	r3, #0
 8013662:	d103      	bne.n	801366c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013664:	4b70      	ldr	r3, [pc, #448]	; (8013828 <tcp_process+0x2cc>)
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2200      	movs	r2, #0
 8013670:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2200      	movs	r2, #0
 8013678:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f001 fc2d 	bl	8014edc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	7d1b      	ldrb	r3, [r3, #20]
 8013686:	3b02      	subs	r3, #2
 8013688:	2b07      	cmp	r3, #7
 801368a:	f200 8337 	bhi.w	8013cfc <tcp_process+0x7a0>
 801368e:	a201      	add	r2, pc, #4	; (adr r2, 8013694 <tcp_process+0x138>)
 8013690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013694:	080136b5 	.word	0x080136b5
 8013698:	080138e5 	.word	0x080138e5
 801369c:	08013a5d 	.word	0x08013a5d
 80136a0:	08013a87 	.word	0x08013a87
 80136a4:	08013bab 	.word	0x08013bab
 80136a8:	08013a5d 	.word	0x08013a5d
 80136ac:	08013c37 	.word	0x08013c37
 80136b0:	08013cc7 	.word	0x08013cc7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80136b4:	4b57      	ldr	r3, [pc, #348]	; (8013814 <tcp_process+0x2b8>)
 80136b6:	781b      	ldrb	r3, [r3, #0]
 80136b8:	f003 0310 	and.w	r3, r3, #16
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f000 80e4 	beq.w	801388a <tcp_process+0x32e>
 80136c2:	4b54      	ldr	r3, [pc, #336]	; (8013814 <tcp_process+0x2b8>)
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	f003 0302 	and.w	r3, r3, #2
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	f000 80dd 	beq.w	801388a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136d4:	1c5a      	adds	r2, r3, #1
 80136d6:	4b50      	ldr	r3, [pc, #320]	; (8013818 <tcp_process+0x2bc>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	429a      	cmp	r2, r3
 80136dc:	f040 80d5 	bne.w	801388a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80136e0:	4b4e      	ldr	r3, [pc, #312]	; (801381c <tcp_process+0x2c0>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	1c5a      	adds	r2, r3, #1
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80136f2:	4b49      	ldr	r3, [pc, #292]	; (8013818 <tcp_process+0x2bc>)
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80136fa:	4b4c      	ldr	r3, [pc, #304]	; (801382c <tcp_process+0x2d0>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	89db      	ldrh	r3, [r3, #14]
 8013700:	b29a      	uxth	r2, r3
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013714:	4b41      	ldr	r3, [pc, #260]	; (801381c <tcp_process+0x2c0>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	1e5a      	subs	r2, r3, #1
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2204      	movs	r2, #4
 8013722:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	3304      	adds	r3, #4
 801372c:	4618      	mov	r0, r3
 801372e:	f006 fcb7 	bl	801a0a0 <ip4_route>
 8013732:	4601      	mov	r1, r0
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	3304      	adds	r3, #4
 8013738:	461a      	mov	r2, r3
 801373a:	4620      	mov	r0, r4
 801373c:	f7ff f88e 	bl	801285c <tcp_eff_send_mss_netif>
 8013740:	4603      	mov	r3, r0
 8013742:	461a      	mov	r2, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801374c:	009a      	lsls	r2, r3, #2
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013752:	005b      	lsls	r3, r3, #1
 8013754:	f241 111c 	movw	r1, #4380	; 0x111c
 8013758:	428b      	cmp	r3, r1
 801375a:	bf38      	it	cc
 801375c:	460b      	movcc	r3, r1
 801375e:	429a      	cmp	r2, r3
 8013760:	d204      	bcs.n	801376c <tcp_process+0x210>
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	b29b      	uxth	r3, r3
 801376a:	e00d      	b.n	8013788 <tcp_process+0x22c>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013770:	005b      	lsls	r3, r3, #1
 8013772:	f241 121c 	movw	r2, #4380	; 0x111c
 8013776:	4293      	cmp	r3, r2
 8013778:	d904      	bls.n	8013784 <tcp_process+0x228>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801377e:	005b      	lsls	r3, r3, #1
 8013780:	b29b      	uxth	r3, r3
 8013782:	e001      	b.n	8013788 <tcp_process+0x22c>
 8013784:	f241 131c 	movw	r3, #4380	; 0x111c
 8013788:	687a      	ldr	r2, [r7, #4]
 801378a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013794:	2b00      	cmp	r3, #0
 8013796:	d106      	bne.n	80137a6 <tcp_process+0x24a>
 8013798:	4b1b      	ldr	r3, [pc, #108]	; (8013808 <tcp_process+0x2ac>)
 801379a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801379e:	4924      	ldr	r1, [pc, #144]	; (8013830 <tcp_process+0x2d4>)
 80137a0:	481b      	ldr	r0, [pc, #108]	; (8013810 <tcp_process+0x2b4>)
 80137a2:	f009 fadd 	bl	801cd60 <iprintf>
        --pcb->snd_queuelen;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137ac:	3b01      	subs	r3, #1
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80137bc:	69fb      	ldr	r3, [r7, #28]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d111      	bne.n	80137e6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d106      	bne.n	80137dc <tcp_process+0x280>
 80137ce:	4b0e      	ldr	r3, [pc, #56]	; (8013808 <tcp_process+0x2ac>)
 80137d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80137d4:	4917      	ldr	r1, [pc, #92]	; (8013834 <tcp_process+0x2d8>)
 80137d6:	480e      	ldr	r0, [pc, #56]	; (8013810 <tcp_process+0x2b4>)
 80137d8:	f009 fac2 	bl	801cd60 <iprintf>
          pcb->unsent = rseg->next;
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80137e4:	e003      	b.n	80137ee <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80137e6:	69fb      	ldr	r3, [r7, #28]
 80137e8:	681a      	ldr	r2, [r3, #0]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80137ee:	69f8      	ldr	r0, [r7, #28]
 80137f0:	f7fe fd3d 	bl	801226e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d11d      	bne.n	8013838 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013802:	861a      	strh	r2, [r3, #48]	; 0x30
 8013804:	e01f      	b.n	8013846 <tcp_process+0x2ea>
 8013806:	bf00      	nop
 8013808:	0801f418 	.word	0x0801f418
 801380c:	0801f650 	.word	0x0801f650
 8013810:	0801f464 	.word	0x0801f464
 8013814:	2000afd4 	.word	0x2000afd4
 8013818:	2000afcc 	.word	0x2000afcc
 801381c:	2000afc8 	.word	0x2000afc8
 8013820:	0801f66c 	.word	0x0801f66c
 8013824:	2000afd5 	.word	0x2000afd5
 8013828:	200139f8 	.word	0x200139f8
 801382c:	2000afb8 	.word	0x2000afb8
 8013830:	0801f68c 	.word	0x0801f68c
 8013834:	0801f6a4 	.word	0x0801f6a4
        } else {
          pcb->rtime = 0;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2200      	movs	r2, #0
 801383c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2200      	movs	r2, #0
 8013842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00a      	beq.n	8013866 <tcp_process+0x30a>
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013856:	687a      	ldr	r2, [r7, #4]
 8013858:	6910      	ldr	r0, [r2, #16]
 801385a:	2200      	movs	r2, #0
 801385c:	6879      	ldr	r1, [r7, #4]
 801385e:	4798      	blx	r3
 8013860:	4603      	mov	r3, r0
 8013862:	76bb      	strb	r3, [r7, #26]
 8013864:	e001      	b.n	801386a <tcp_process+0x30e>
 8013866:	2300      	movs	r3, #0
 8013868:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801386a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801386e:	f113 0f0d 	cmn.w	r3, #13
 8013872:	d102      	bne.n	801387a <tcp_process+0x31e>
          return ERR_ABRT;
 8013874:	f06f 030c 	mvn.w	r3, #12
 8013878:	e250      	b.n	8013d1c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	8b5b      	ldrh	r3, [r3, #26]
 801387e:	f043 0302 	orr.w	r3, r3, #2
 8013882:	b29a      	uxth	r2, r3
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013888:	e23a      	b.n	8013d00 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801388a:	4b9d      	ldr	r3, [pc, #628]	; (8013b00 <tcp_process+0x5a4>)
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	f003 0310 	and.w	r3, r3, #16
 8013892:	2b00      	cmp	r3, #0
 8013894:	f000 8234 	beq.w	8013d00 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013898:	4b9a      	ldr	r3, [pc, #616]	; (8013b04 <tcp_process+0x5a8>)
 801389a:	6819      	ldr	r1, [r3, #0]
 801389c:	4b9a      	ldr	r3, [pc, #616]	; (8013b08 <tcp_process+0x5ac>)
 801389e:	881b      	ldrh	r3, [r3, #0]
 80138a0:	461a      	mov	r2, r3
 80138a2:	4b9a      	ldr	r3, [pc, #616]	; (8013b0c <tcp_process+0x5b0>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138a8:	4b99      	ldr	r3, [pc, #612]	; (8013b10 <tcp_process+0x5b4>)
 80138aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138ac:	885b      	ldrh	r3, [r3, #2]
 80138ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138b0:	4a97      	ldr	r2, [pc, #604]	; (8013b10 <tcp_process+0x5b4>)
 80138b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138b4:	8812      	ldrh	r2, [r2, #0]
 80138b6:	b292      	uxth	r2, r2
 80138b8:	9202      	str	r2, [sp, #8]
 80138ba:	9301      	str	r3, [sp, #4]
 80138bc:	4b95      	ldr	r3, [pc, #596]	; (8013b14 <tcp_process+0x5b8>)
 80138be:	9300      	str	r3, [sp, #0]
 80138c0:	4b95      	ldr	r3, [pc, #596]	; (8013b18 <tcp_process+0x5bc>)
 80138c2:	4602      	mov	r2, r0
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f002 fc83 	bl	80161d0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80138d0:	2b05      	cmp	r3, #5
 80138d2:	f200 8215 	bhi.w	8013d00 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2200      	movs	r2, #0
 80138da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f002 fa4d 	bl	8015d7c <tcp_rexmit_rto>
      break;
 80138e2:	e20d      	b.n	8013d00 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80138e4:	4b86      	ldr	r3, [pc, #536]	; (8013b00 <tcp_process+0x5a4>)
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	f003 0310 	and.w	r3, r3, #16
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	f000 80a1 	beq.w	8013a34 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80138f2:	4b84      	ldr	r3, [pc, #528]	; (8013b04 <tcp_process+0x5a8>)
 80138f4:	681a      	ldr	r2, [r3, #0]
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138fa:	1ad3      	subs	r3, r2, r3
 80138fc:	3b01      	subs	r3, #1
 80138fe:	2b00      	cmp	r3, #0
 8013900:	db7e      	blt.n	8013a00 <tcp_process+0x4a4>
 8013902:	4b80      	ldr	r3, [pc, #512]	; (8013b04 <tcp_process+0x5a8>)
 8013904:	681a      	ldr	r2, [r3, #0]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801390a:	1ad3      	subs	r3, r2, r3
 801390c:	2b00      	cmp	r3, #0
 801390e:	dc77      	bgt.n	8013a00 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2204      	movs	r2, #4
 8013914:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801391a:	2b00      	cmp	r3, #0
 801391c:	d102      	bne.n	8013924 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801391e:	23fa      	movs	r3, #250	; 0xfa
 8013920:	76bb      	strb	r3, [r7, #26]
 8013922:	e01d      	b.n	8013960 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013928:	699b      	ldr	r3, [r3, #24]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d106      	bne.n	801393c <tcp_process+0x3e0>
 801392e:	4b7b      	ldr	r3, [pc, #492]	; (8013b1c <tcp_process+0x5c0>)
 8013930:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013934:	497a      	ldr	r1, [pc, #488]	; (8013b20 <tcp_process+0x5c4>)
 8013936:	487b      	ldr	r0, [pc, #492]	; (8013b24 <tcp_process+0x5c8>)
 8013938:	f009 fa12 	bl	801cd60 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013940:	699b      	ldr	r3, [r3, #24]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d00a      	beq.n	801395c <tcp_process+0x400>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801394a:	699b      	ldr	r3, [r3, #24]
 801394c:	687a      	ldr	r2, [r7, #4]
 801394e:	6910      	ldr	r0, [r2, #16]
 8013950:	2200      	movs	r2, #0
 8013952:	6879      	ldr	r1, [r7, #4]
 8013954:	4798      	blx	r3
 8013956:	4603      	mov	r3, r0
 8013958:	76bb      	strb	r3, [r7, #26]
 801395a:	e001      	b.n	8013960 <tcp_process+0x404>
 801395c:	23f0      	movs	r3, #240	; 0xf0
 801395e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013960:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d00a      	beq.n	801397e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013968:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801396c:	f113 0f0d 	cmn.w	r3, #13
 8013970:	d002      	beq.n	8013978 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7fd ff90 	bl	8011898 <tcp_abort>
            }
            return ERR_ABRT;
 8013978:	f06f 030c 	mvn.w	r3, #12
 801397c:	e1ce      	b.n	8013d1c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f000 fae0 	bl	8013f44 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013984:	4b68      	ldr	r3, [pc, #416]	; (8013b28 <tcp_process+0x5cc>)
 8013986:	881b      	ldrh	r3, [r3, #0]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d005      	beq.n	8013998 <tcp_process+0x43c>
            recv_acked--;
 801398c:	4b66      	ldr	r3, [pc, #408]	; (8013b28 <tcp_process+0x5cc>)
 801398e:	881b      	ldrh	r3, [r3, #0]
 8013990:	3b01      	subs	r3, #1
 8013992:	b29a      	uxth	r2, r3
 8013994:	4b64      	ldr	r3, [pc, #400]	; (8013b28 <tcp_process+0x5cc>)
 8013996:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801399c:	009a      	lsls	r2, r3, #2
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139a2:	005b      	lsls	r3, r3, #1
 80139a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80139a8:	428b      	cmp	r3, r1
 80139aa:	bf38      	it	cc
 80139ac:	460b      	movcc	r3, r1
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d204      	bcs.n	80139bc <tcp_process+0x460>
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	e00d      	b.n	80139d8 <tcp_process+0x47c>
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139c0:	005b      	lsls	r3, r3, #1
 80139c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80139c6:	4293      	cmp	r3, r2
 80139c8:	d904      	bls.n	80139d4 <tcp_process+0x478>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	e001      	b.n	80139d8 <tcp_process+0x47c>
 80139d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80139de:	4b53      	ldr	r3, [pc, #332]	; (8013b2c <tcp_process+0x5d0>)
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	f003 0320 	and.w	r3, r3, #32
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d037      	beq.n	8013a5a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	8b5b      	ldrh	r3, [r3, #26]
 80139ee:	f043 0302 	orr.w	r3, r3, #2
 80139f2:	b29a      	uxth	r2, r3
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2207      	movs	r2, #7
 80139fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80139fe:	e02c      	b.n	8013a5a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a00:	4b40      	ldr	r3, [pc, #256]	; (8013b04 <tcp_process+0x5a8>)
 8013a02:	6819      	ldr	r1, [r3, #0]
 8013a04:	4b40      	ldr	r3, [pc, #256]	; (8013b08 <tcp_process+0x5ac>)
 8013a06:	881b      	ldrh	r3, [r3, #0]
 8013a08:	461a      	mov	r2, r3
 8013a0a:	4b40      	ldr	r3, [pc, #256]	; (8013b0c <tcp_process+0x5b0>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a10:	4b3f      	ldr	r3, [pc, #252]	; (8013b10 <tcp_process+0x5b4>)
 8013a12:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a14:	885b      	ldrh	r3, [r3, #2]
 8013a16:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a18:	4a3d      	ldr	r2, [pc, #244]	; (8013b10 <tcp_process+0x5b4>)
 8013a1a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a1c:	8812      	ldrh	r2, [r2, #0]
 8013a1e:	b292      	uxth	r2, r2
 8013a20:	9202      	str	r2, [sp, #8]
 8013a22:	9301      	str	r3, [sp, #4]
 8013a24:	4b3b      	ldr	r3, [pc, #236]	; (8013b14 <tcp_process+0x5b8>)
 8013a26:	9300      	str	r3, [sp, #0]
 8013a28:	4b3b      	ldr	r3, [pc, #236]	; (8013b18 <tcp_process+0x5bc>)
 8013a2a:	4602      	mov	r2, r0
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f002 fbcf 	bl	80161d0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013a32:	e167      	b.n	8013d04 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013a34:	4b32      	ldr	r3, [pc, #200]	; (8013b00 <tcp_process+0x5a4>)
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	f003 0302 	and.w	r3, r3, #2
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f000 8161 	beq.w	8013d04 <tcp_process+0x7a8>
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a46:	1e5a      	subs	r2, r3, #1
 8013a48:	4b30      	ldr	r3, [pc, #192]	; (8013b0c <tcp_process+0x5b0>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	f040 8159 	bne.w	8013d04 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f002 f9b4 	bl	8015dc0 <tcp_rexmit>
      break;
 8013a58:	e154      	b.n	8013d04 <tcp_process+0x7a8>
 8013a5a:	e153      	b.n	8013d04 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f000 fa71 	bl	8013f44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013a62:	4b32      	ldr	r3, [pc, #200]	; (8013b2c <tcp_process+0x5d0>)
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	f003 0320 	and.w	r3, r3, #32
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	f000 814c 	beq.w	8013d08 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	8b5b      	ldrh	r3, [r3, #26]
 8013a74:	f043 0302 	orr.w	r3, r3, #2
 8013a78:	b29a      	uxth	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2207      	movs	r2, #7
 8013a82:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a84:	e140      	b.n	8013d08 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f000 fa5c 	bl	8013f44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013a8c:	4b27      	ldr	r3, [pc, #156]	; (8013b2c <tcp_process+0x5d0>)
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	f003 0320 	and.w	r3, r3, #32
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d071      	beq.n	8013b7c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a98:	4b19      	ldr	r3, [pc, #100]	; (8013b00 <tcp_process+0x5a4>)
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	f003 0310 	and.w	r3, r3, #16
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d060      	beq.n	8013b66 <tcp_process+0x60a>
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013aa8:	4b16      	ldr	r3, [pc, #88]	; (8013b04 <tcp_process+0x5a8>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d15a      	bne.n	8013b66 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d156      	bne.n	8013b66 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	8b5b      	ldrh	r3, [r3, #26]
 8013abc:	f043 0302 	orr.w	r3, r3, #2
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f7fe fdbe 	bl	8012648 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013acc:	4b18      	ldr	r3, [pc, #96]	; (8013b30 <tcp_process+0x5d4>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d105      	bne.n	8013ae2 <tcp_process+0x586>
 8013ad6:	4b16      	ldr	r3, [pc, #88]	; (8013b30 <tcp_process+0x5d4>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	4a14      	ldr	r2, [pc, #80]	; (8013b30 <tcp_process+0x5d4>)
 8013ade:	6013      	str	r3, [r2, #0]
 8013ae0:	e02e      	b.n	8013b40 <tcp_process+0x5e4>
 8013ae2:	4b13      	ldr	r3, [pc, #76]	; (8013b30 <tcp_process+0x5d4>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	617b      	str	r3, [r7, #20]
 8013ae8:	e027      	b.n	8013b3a <tcp_process+0x5de>
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	687a      	ldr	r2, [r7, #4]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d11f      	bne.n	8013b34 <tcp_process+0x5d8>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	68da      	ldr	r2, [r3, #12]
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	60da      	str	r2, [r3, #12]
 8013afc:	e020      	b.n	8013b40 <tcp_process+0x5e4>
 8013afe:	bf00      	nop
 8013b00:	2000afd4 	.word	0x2000afd4
 8013b04:	2000afcc 	.word	0x2000afcc
 8013b08:	2000afd2 	.word	0x2000afd2
 8013b0c:	2000afc8 	.word	0x2000afc8
 8013b10:	2000afb8 	.word	0x2000afb8
 8013b14:	200102d0 	.word	0x200102d0
 8013b18:	200102d4 	.word	0x200102d4
 8013b1c:	0801f418 	.word	0x0801f418
 8013b20:	0801f6b8 	.word	0x0801f6b8
 8013b24:	0801f464 	.word	0x0801f464
 8013b28:	2000afd0 	.word	0x2000afd0
 8013b2c:	2000afd5 	.word	0x2000afd5
 8013b30:	200139f4 	.word	0x200139f4
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	617b      	str	r3, [r7, #20]
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d1d4      	bne.n	8013aea <tcp_process+0x58e>
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2200      	movs	r2, #0
 8013b44:	60da      	str	r2, [r3, #12]
 8013b46:	4b77      	ldr	r3, [pc, #476]	; (8013d24 <tcp_process+0x7c8>)
 8013b48:	2201      	movs	r2, #1
 8013b4a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	220a      	movs	r2, #10
 8013b50:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013b52:	4b75      	ldr	r3, [pc, #468]	; (8013d28 <tcp_process+0x7cc>)
 8013b54:	681a      	ldr	r2, [r3, #0]
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	60da      	str	r2, [r3, #12]
 8013b5a:	4a73      	ldr	r2, [pc, #460]	; (8013d28 <tcp_process+0x7cc>)
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6013      	str	r3, [r2, #0]
 8013b60:	f002 fcf8 	bl	8016554 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013b64:	e0d2      	b.n	8013d0c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	8b5b      	ldrh	r3, [r3, #26]
 8013b6a:	f043 0302 	orr.w	r3, r3, #2
 8013b6e:	b29a      	uxth	r2, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2208      	movs	r2, #8
 8013b78:	751a      	strb	r2, [r3, #20]
      break;
 8013b7a:	e0c7      	b.n	8013d0c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b7c:	4b6b      	ldr	r3, [pc, #428]	; (8013d2c <tcp_process+0x7d0>)
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	f003 0310 	and.w	r3, r3, #16
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	f000 80c1 	beq.w	8013d0c <tcp_process+0x7b0>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b8e:	4b68      	ldr	r3, [pc, #416]	; (8013d30 <tcp_process+0x7d4>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	f040 80ba 	bne.w	8013d0c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f040 80b5 	bne.w	8013d0c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2206      	movs	r2, #6
 8013ba6:	751a      	strb	r2, [r3, #20]
      break;
 8013ba8:	e0b0      	b.n	8013d0c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f000 f9ca 	bl	8013f44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013bb0:	4b60      	ldr	r3, [pc, #384]	; (8013d34 <tcp_process+0x7d8>)
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	f003 0320 	and.w	r3, r3, #32
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f000 80a9 	beq.w	8013d10 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	8b5b      	ldrh	r3, [r3, #26]
 8013bc2:	f043 0302 	orr.w	r3, r3, #2
 8013bc6:	b29a      	uxth	r2, r3
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f7fe fd3b 	bl	8012648 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013bd2:	4b59      	ldr	r3, [pc, #356]	; (8013d38 <tcp_process+0x7dc>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	687a      	ldr	r2, [r7, #4]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d105      	bne.n	8013be8 <tcp_process+0x68c>
 8013bdc:	4b56      	ldr	r3, [pc, #344]	; (8013d38 <tcp_process+0x7dc>)
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	4a55      	ldr	r2, [pc, #340]	; (8013d38 <tcp_process+0x7dc>)
 8013be4:	6013      	str	r3, [r2, #0]
 8013be6:	e013      	b.n	8013c10 <tcp_process+0x6b4>
 8013be8:	4b53      	ldr	r3, [pc, #332]	; (8013d38 <tcp_process+0x7dc>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	613b      	str	r3, [r7, #16]
 8013bee:	e00c      	b.n	8013c0a <tcp_process+0x6ae>
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	687a      	ldr	r2, [r7, #4]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d104      	bne.n	8013c04 <tcp_process+0x6a8>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	68da      	ldr	r2, [r3, #12]
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	60da      	str	r2, [r3, #12]
 8013c02:	e005      	b.n	8013c10 <tcp_process+0x6b4>
 8013c04:	693b      	ldr	r3, [r7, #16]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	613b      	str	r3, [r7, #16]
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d1ef      	bne.n	8013bf0 <tcp_process+0x694>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2200      	movs	r2, #0
 8013c14:	60da      	str	r2, [r3, #12]
 8013c16:	4b43      	ldr	r3, [pc, #268]	; (8013d24 <tcp_process+0x7c8>)
 8013c18:	2201      	movs	r2, #1
 8013c1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	220a      	movs	r2, #10
 8013c20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013c22:	4b41      	ldr	r3, [pc, #260]	; (8013d28 <tcp_process+0x7cc>)
 8013c24:	681a      	ldr	r2, [r3, #0]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	60da      	str	r2, [r3, #12]
 8013c2a:	4a3f      	ldr	r2, [pc, #252]	; (8013d28 <tcp_process+0x7cc>)
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6013      	str	r3, [r2, #0]
 8013c30:	f002 fc90 	bl	8016554 <tcp_timer_needed>
      }
      break;
 8013c34:	e06c      	b.n	8013d10 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f000 f984 	bl	8013f44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013c3c:	4b3b      	ldr	r3, [pc, #236]	; (8013d2c <tcp_process+0x7d0>)
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	f003 0310 	and.w	r3, r3, #16
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d065      	beq.n	8013d14 <tcp_process+0x7b8>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c4c:	4b38      	ldr	r3, [pc, #224]	; (8013d30 <tcp_process+0x7d4>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d15f      	bne.n	8013d14 <tcp_process+0x7b8>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d15b      	bne.n	8013d14 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f7fe fcf3 	bl	8012648 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013c62:	4b35      	ldr	r3, [pc, #212]	; (8013d38 <tcp_process+0x7dc>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d105      	bne.n	8013c78 <tcp_process+0x71c>
 8013c6c:	4b32      	ldr	r3, [pc, #200]	; (8013d38 <tcp_process+0x7dc>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	4a31      	ldr	r2, [pc, #196]	; (8013d38 <tcp_process+0x7dc>)
 8013c74:	6013      	str	r3, [r2, #0]
 8013c76:	e013      	b.n	8013ca0 <tcp_process+0x744>
 8013c78:	4b2f      	ldr	r3, [pc, #188]	; (8013d38 <tcp_process+0x7dc>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	60fb      	str	r3, [r7, #12]
 8013c7e:	e00c      	b.n	8013c9a <tcp_process+0x73e>
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	687a      	ldr	r2, [r7, #4]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d104      	bne.n	8013c94 <tcp_process+0x738>
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	68da      	ldr	r2, [r3, #12]
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	60da      	str	r2, [r3, #12]
 8013c92:	e005      	b.n	8013ca0 <tcp_process+0x744>
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	60fb      	str	r3, [r7, #12]
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d1ef      	bne.n	8013c80 <tcp_process+0x724>
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	60da      	str	r2, [r3, #12]
 8013ca6:	4b1f      	ldr	r3, [pc, #124]	; (8013d24 <tcp_process+0x7c8>)
 8013ca8:	2201      	movs	r2, #1
 8013caa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	220a      	movs	r2, #10
 8013cb0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013cb2:	4b1d      	ldr	r3, [pc, #116]	; (8013d28 <tcp_process+0x7cc>)
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	60da      	str	r2, [r3, #12]
 8013cba:	4a1b      	ldr	r2, [pc, #108]	; (8013d28 <tcp_process+0x7cc>)
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6013      	str	r3, [r2, #0]
 8013cc0:	f002 fc48 	bl	8016554 <tcp_timer_needed>
      }
      break;
 8013cc4:	e026      	b.n	8013d14 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f000 f93c 	bl	8013f44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013ccc:	4b17      	ldr	r3, [pc, #92]	; (8013d2c <tcp_process+0x7d0>)
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	f003 0310 	and.w	r3, r3, #16
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d01f      	beq.n	8013d18 <tcp_process+0x7bc>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013cdc:	4b14      	ldr	r3, [pc, #80]	; (8013d30 <tcp_process+0x7d4>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d119      	bne.n	8013d18 <tcp_process+0x7bc>
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d115      	bne.n	8013d18 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013cec:	4b11      	ldr	r3, [pc, #68]	; (8013d34 <tcp_process+0x7d8>)
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	f043 0310 	orr.w	r3, r3, #16
 8013cf4:	b2da      	uxtb	r2, r3
 8013cf6:	4b0f      	ldr	r3, [pc, #60]	; (8013d34 <tcp_process+0x7d8>)
 8013cf8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013cfa:	e00d      	b.n	8013d18 <tcp_process+0x7bc>
    default:
      break;
 8013cfc:	bf00      	nop
 8013cfe:	e00c      	b.n	8013d1a <tcp_process+0x7be>
      break;
 8013d00:	bf00      	nop
 8013d02:	e00a      	b.n	8013d1a <tcp_process+0x7be>
      break;
 8013d04:	bf00      	nop
 8013d06:	e008      	b.n	8013d1a <tcp_process+0x7be>
      break;
 8013d08:	bf00      	nop
 8013d0a:	e006      	b.n	8013d1a <tcp_process+0x7be>
      break;
 8013d0c:	bf00      	nop
 8013d0e:	e004      	b.n	8013d1a <tcp_process+0x7be>
      break;
 8013d10:	bf00      	nop
 8013d12:	e002      	b.n	8013d1a <tcp_process+0x7be>
      break;
 8013d14:	bf00      	nop
 8013d16:	e000      	b.n	8013d1a <tcp_process+0x7be>
      break;
 8013d18:	bf00      	nop
  }
  return ERR_OK;
 8013d1a:	2300      	movs	r3, #0
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3724      	adds	r7, #36	; 0x24
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd90      	pop	{r4, r7, pc}
 8013d24:	200139f0 	.word	0x200139f0
 8013d28:	20013a04 	.word	0x20013a04
 8013d2c:	2000afd4 	.word	0x2000afd4
 8013d30:	2000afcc 	.word	0x2000afcc
 8013d34:	2000afd5 	.word	0x2000afd5
 8013d38:	200139f4 	.word	0x200139f4

08013d3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013d3c:	b590      	push	{r4, r7, lr}
 8013d3e:	b085      	sub	sp, #20
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d106      	bne.n	8013d5a <tcp_oos_insert_segment+0x1e>
 8013d4c:	4b3b      	ldr	r3, [pc, #236]	; (8013e3c <tcp_oos_insert_segment+0x100>)
 8013d4e:	f240 421f 	movw	r2, #1055	; 0x41f
 8013d52:	493b      	ldr	r1, [pc, #236]	; (8013e40 <tcp_oos_insert_segment+0x104>)
 8013d54:	483b      	ldr	r0, [pc, #236]	; (8013e44 <tcp_oos_insert_segment+0x108>)
 8013d56:	f009 f803 	bl	801cd60 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	899b      	ldrh	r3, [r3, #12]
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7fb fc3c 	bl	800f5e0 <lwip_htons>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	b2db      	uxtb	r3, r3
 8013d6c:	f003 0301 	and.w	r3, r3, #1
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d028      	beq.n	8013dc6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013d74:	6838      	ldr	r0, [r7, #0]
 8013d76:	f7fe fa65 	bl	8012244 <tcp_segs_free>
    next = NULL;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	603b      	str	r3, [r7, #0]
 8013d7e:	e056      	b.n	8013e2e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013d80:	683b      	ldr	r3, [r7, #0]
 8013d82:	68db      	ldr	r3, [r3, #12]
 8013d84:	899b      	ldrh	r3, [r3, #12]
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7fb fc29 	bl	800f5e0 <lwip_htons>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	b2db      	uxtb	r3, r3
 8013d92:	f003 0301 	and.w	r3, r3, #1
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d00d      	beq.n	8013db6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	899b      	ldrh	r3, [r3, #12]
 8013da0:	b29c      	uxth	r4, r3
 8013da2:	2001      	movs	r0, #1
 8013da4:	f7fb fc1c 	bl	800f5e0 <lwip_htons>
 8013da8:	4603      	mov	r3, r0
 8013daa:	461a      	mov	r2, r3
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	4322      	orrs	r2, r4
 8013db2:	b292      	uxth	r2, r2
 8013db4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013dc0:	68f8      	ldr	r0, [r7, #12]
 8013dc2:	f7fe fa54 	bl	801226e <tcp_seg_free>
    while (next &&
 8013dc6:	683b      	ldr	r3, [r7, #0]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d00e      	beq.n	8013dea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	891b      	ldrh	r3, [r3, #8]
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	4b1d      	ldr	r3, [pc, #116]	; (8013e48 <tcp_oos_insert_segment+0x10c>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	441a      	add	r2, r3
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	68db      	ldr	r3, [r3, #12]
 8013ddc:	685b      	ldr	r3, [r3, #4]
 8013dde:	6839      	ldr	r1, [r7, #0]
 8013de0:	8909      	ldrh	r1, [r1, #8]
 8013de2:	440b      	add	r3, r1
 8013de4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	daca      	bge.n	8013d80 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d01e      	beq.n	8013e2e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	891b      	ldrh	r3, [r3, #8]
 8013df4:	461a      	mov	r2, r3
 8013df6:	4b14      	ldr	r3, [pc, #80]	; (8013e48 <tcp_oos_insert_segment+0x10c>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	441a      	add	r2, r3
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	68db      	ldr	r3, [r3, #12]
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	dd12      	ble.n	8013e2e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	68db      	ldr	r3, [r3, #12]
 8013e0c:	685b      	ldr	r3, [r3, #4]
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	4b0d      	ldr	r3, [pc, #52]	; (8013e48 <tcp_oos_insert_segment+0x10c>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	1ad3      	subs	r3, r2, r3
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	685a      	ldr	r2, [r3, #4]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	891b      	ldrh	r3, [r3, #8]
 8013e26:	4619      	mov	r1, r3
 8013e28:	4610      	mov	r0, r2
 8013e2a:	f7fc fe0b 	bl	8010a44 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	683a      	ldr	r2, [r7, #0]
 8013e32:	601a      	str	r2, [r3, #0]
}
 8013e34:	bf00      	nop
 8013e36:	3714      	adds	r7, #20
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd90      	pop	{r4, r7, pc}
 8013e3c:	0801f418 	.word	0x0801f418
 8013e40:	0801f6d8 	.word	0x0801f6d8
 8013e44:	0801f464 	.word	0x0801f464
 8013e48:	2000afc8 	.word	0x2000afc8

08013e4c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013e4c:	b5b0      	push	{r4, r5, r7, lr}
 8013e4e:	b086      	sub	sp, #24
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	60f8      	str	r0, [r7, #12]
 8013e54:	60b9      	str	r1, [r7, #8]
 8013e56:	607a      	str	r2, [r7, #4]
 8013e58:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013e5a:	e03e      	b.n	8013eda <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7fc fffe 	bl	8010e6c <pbuf_clen>
 8013e70:	4603      	mov	r3, r0
 8013e72:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e7a:	8a7a      	ldrh	r2, [r7, #18]
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d906      	bls.n	8013e8e <tcp_free_acked_segments+0x42>
 8013e80:	4b2a      	ldr	r3, [pc, #168]	; (8013f2c <tcp_free_acked_segments+0xe0>)
 8013e82:	f240 4257 	movw	r2, #1111	; 0x457
 8013e86:	492a      	ldr	r1, [pc, #168]	; (8013f30 <tcp_free_acked_segments+0xe4>)
 8013e88:	482a      	ldr	r0, [pc, #168]	; (8013f34 <tcp_free_acked_segments+0xe8>)
 8013e8a:	f008 ff69 	bl	801cd60 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013e94:	8a7b      	ldrh	r3, [r7, #18]
 8013e96:	1ad3      	subs	r3, r2, r3
 8013e98:	b29a      	uxth	r2, r3
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	891a      	ldrh	r2, [r3, #8]
 8013ea4:	4b24      	ldr	r3, [pc, #144]	; (8013f38 <tcp_free_acked_segments+0xec>)
 8013ea6:	881b      	ldrh	r3, [r3, #0]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	b29a      	uxth	r2, r3
 8013eac:	4b22      	ldr	r3, [pc, #136]	; (8013f38 <tcp_free_acked_segments+0xec>)
 8013eae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013eb0:	6978      	ldr	r0, [r7, #20]
 8013eb2:	f7fe f9dc 	bl	801226e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d00c      	beq.n	8013eda <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d109      	bne.n	8013eda <tcp_free_acked_segments+0x8e>
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d106      	bne.n	8013eda <tcp_free_acked_segments+0x8e>
 8013ecc:	4b17      	ldr	r3, [pc, #92]	; (8013f2c <tcp_free_acked_segments+0xe0>)
 8013ece:	f240 4261 	movw	r2, #1121	; 0x461
 8013ed2:	491a      	ldr	r1, [pc, #104]	; (8013f3c <tcp_free_acked_segments+0xf0>)
 8013ed4:	4817      	ldr	r0, [pc, #92]	; (8013f34 <tcp_free_acked_segments+0xe8>)
 8013ed6:	f008 ff43 	bl	801cd60 <iprintf>
  while (seg_list != NULL &&
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d020      	beq.n	8013f22 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	68db      	ldr	r3, [r3, #12]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fb fb8f 	bl	800f60a <lwip_htonl>
 8013eec:	4604      	mov	r4, r0
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	891b      	ldrh	r3, [r3, #8]
 8013ef2:	461d      	mov	r5, r3
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	899b      	ldrh	r3, [r3, #12]
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7fb fb6f 	bl	800f5e0 <lwip_htons>
 8013f02:	4603      	mov	r3, r0
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	f003 0303 	and.w	r3, r3, #3
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d001      	beq.n	8013f12 <tcp_free_acked_segments+0xc6>
 8013f0e:	2301      	movs	r3, #1
 8013f10:	e000      	b.n	8013f14 <tcp_free_acked_segments+0xc8>
 8013f12:	2300      	movs	r3, #0
 8013f14:	442b      	add	r3, r5
 8013f16:	18e2      	adds	r2, r4, r3
 8013f18:	4b09      	ldr	r3, [pc, #36]	; (8013f40 <tcp_free_acked_segments+0xf4>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	dd9c      	ble.n	8013e5c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013f22:	68bb      	ldr	r3, [r7, #8]
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3718      	adds	r7, #24
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8013f2c:	0801f418 	.word	0x0801f418
 8013f30:	0801f700 	.word	0x0801f700
 8013f34:	0801f464 	.word	0x0801f464
 8013f38:	2000afd0 	.word	0x2000afd0
 8013f3c:	0801f728 	.word	0x0801f728
 8013f40:	2000afcc 	.word	0x2000afcc

08013f44 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013f44:	b5b0      	push	{r4, r5, r7, lr}
 8013f46:	b094      	sub	sp, #80	; 0x50
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d106      	bne.n	8013f64 <tcp_receive+0x20>
 8013f56:	4ba6      	ldr	r3, [pc, #664]	; (80141f0 <tcp_receive+0x2ac>)
 8013f58:	f240 427b 	movw	r2, #1147	; 0x47b
 8013f5c:	49a5      	ldr	r1, [pc, #660]	; (80141f4 <tcp_receive+0x2b0>)
 8013f5e:	48a6      	ldr	r0, [pc, #664]	; (80141f8 <tcp_receive+0x2b4>)
 8013f60:	f008 fefe 	bl	801cd60 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	7d1b      	ldrb	r3, [r3, #20]
 8013f68:	2b03      	cmp	r3, #3
 8013f6a:	d806      	bhi.n	8013f7a <tcp_receive+0x36>
 8013f6c:	4ba0      	ldr	r3, [pc, #640]	; (80141f0 <tcp_receive+0x2ac>)
 8013f6e:	f240 427c 	movw	r2, #1148	; 0x47c
 8013f72:	49a2      	ldr	r1, [pc, #648]	; (80141fc <tcp_receive+0x2b8>)
 8013f74:	48a0      	ldr	r0, [pc, #640]	; (80141f8 <tcp_receive+0x2b4>)
 8013f76:	f008 fef3 	bl	801cd60 <iprintf>

  if (flags & TCP_ACK) {
 8013f7a:	4ba1      	ldr	r3, [pc, #644]	; (8014200 <tcp_receive+0x2bc>)
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	f003 0310 	and.w	r3, r3, #16
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	f000 8263 	beq.w	801444e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f8e:	461a      	mov	r2, r3
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f94:	4413      	add	r3, r2
 8013f96:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f9c:	4b99      	ldr	r3, [pc, #612]	; (8014204 <tcp_receive+0x2c0>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	1ad3      	subs	r3, r2, r3
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	db1b      	blt.n	8013fde <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013faa:	4b96      	ldr	r3, [pc, #600]	; (8014204 <tcp_receive+0x2c0>)
 8013fac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d106      	bne.n	8013fc0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013fb6:	4b94      	ldr	r3, [pc, #592]	; (8014208 <tcp_receive+0x2c4>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	db0e      	blt.n	8013fde <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013fc4:	4b90      	ldr	r3, [pc, #576]	; (8014208 <tcp_receive+0x2c4>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d125      	bne.n	8014018 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013fcc:	4b8f      	ldr	r3, [pc, #572]	; (801420c <tcp_receive+0x2c8>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	89db      	ldrh	r3, [r3, #14]
 8013fd2:	b29a      	uxth	r2, r3
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d91c      	bls.n	8014018 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013fde:	4b8b      	ldr	r3, [pc, #556]	; (801420c <tcp_receive+0x2c8>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	89db      	ldrh	r3, [r3, #14]
 8013fe4:	b29a      	uxth	r2, r3
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d205      	bcs.n	8014008 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014008:	4b7e      	ldr	r3, [pc, #504]	; (8014204 <tcp_receive+0x2c0>)
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014010:	4b7d      	ldr	r3, [pc, #500]	; (8014208 <tcp_receive+0x2c4>)
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014018:	4b7b      	ldr	r3, [pc, #492]	; (8014208 <tcp_receive+0x2c4>)
 801401a:	681a      	ldr	r2, [r3, #0]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014020:	1ad3      	subs	r3, r2, r3
 8014022:	2b00      	cmp	r3, #0
 8014024:	dc58      	bgt.n	80140d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014026:	4b7a      	ldr	r3, [pc, #488]	; (8014210 <tcp_receive+0x2cc>)
 8014028:	881b      	ldrh	r3, [r3, #0]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d14b      	bne.n	80140c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014038:	4413      	add	r3, r2
 801403a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801403c:	429a      	cmp	r2, r3
 801403e:	d142      	bne.n	80140c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014046:	2b00      	cmp	r3, #0
 8014048:	db3d      	blt.n	80140c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801404e:	4b6e      	ldr	r3, [pc, #440]	; (8014208 <tcp_receive+0x2c4>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	429a      	cmp	r2, r3
 8014054:	d137      	bne.n	80140c6 <tcp_receive+0x182>
              found_dupack = 1;
 8014056:	2301      	movs	r3, #1
 8014058:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014060:	2bff      	cmp	r3, #255	; 0xff
 8014062:	d007      	beq.n	8014074 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801406a:	3301      	adds	r3, #1
 801406c:	b2da      	uxtb	r2, r3
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801407a:	2b03      	cmp	r3, #3
 801407c:	d91b      	bls.n	80140b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014088:	4413      	add	r3, r2
 801408a:	b29a      	uxth	r2, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014092:	429a      	cmp	r2, r3
 8014094:	d30a      	bcc.n	80140ac <tcp_receive+0x168>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140a0:	4413      	add	r3, r2
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80140aa:	e004      	b.n	80140b6 <tcp_receive+0x172>
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80140bc:	2b02      	cmp	r3, #2
 80140be:	d902      	bls.n	80140c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f001 fee9 	bl	8015e98 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80140c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	f040 8160 	bne.w	801438e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2200      	movs	r2, #0
 80140d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80140d6:	e15a      	b.n	801438e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80140d8:	4b4b      	ldr	r3, [pc, #300]	; (8014208 <tcp_receive+0x2c4>)
 80140da:	681a      	ldr	r2, [r3, #0]
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140e0:	1ad3      	subs	r3, r2, r3
 80140e2:	3b01      	subs	r3, #1
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	f2c0 814d 	blt.w	8014384 <tcp_receive+0x440>
 80140ea:	4b47      	ldr	r3, [pc, #284]	; (8014208 <tcp_receive+0x2c4>)
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140f2:	1ad3      	subs	r3, r2, r3
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	f300 8145 	bgt.w	8014384 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	8b5b      	ldrh	r3, [r3, #26]
 80140fe:	f003 0304 	and.w	r3, r3, #4
 8014102:	2b00      	cmp	r3, #0
 8014104:	d010      	beq.n	8014128 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	8b5b      	ldrh	r3, [r3, #26]
 801410a:	f023 0304 	bic.w	r3, r3, #4
 801410e:	b29a      	uxth	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2200      	movs	r2, #0
 8014124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2200      	movs	r2, #0
 801412c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014136:	10db      	asrs	r3, r3, #3
 8014138:	b21b      	sxth	r3, r3
 801413a:	b29a      	uxth	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014142:	b29b      	uxth	r3, r3
 8014144:	4413      	add	r3, r2
 8014146:	b29b      	uxth	r3, r3
 8014148:	b21a      	sxth	r2, r3
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014150:	4b2d      	ldr	r3, [pc, #180]	; (8014208 <tcp_receive+0x2c4>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	b29a      	uxth	r2, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801415a:	b29b      	uxth	r3, r3
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	2200      	movs	r2, #0
 8014164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014168:	4b27      	ldr	r3, [pc, #156]	; (8014208 <tcp_receive+0x2c4>)
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	7d1b      	ldrb	r3, [r3, #20]
 8014174:	2b03      	cmp	r3, #3
 8014176:	f240 8096 	bls.w	80142a6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014186:	429a      	cmp	r2, r3
 8014188:	d244      	bcs.n	8014214 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	8b5b      	ldrh	r3, [r3, #26]
 801418e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014192:	2b00      	cmp	r3, #0
 8014194:	d001      	beq.n	801419a <tcp_receive+0x256>
 8014196:	2301      	movs	r3, #1
 8014198:	e000      	b.n	801419c <tcp_receive+0x258>
 801419a:	2302      	movs	r3, #2
 801419c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80141a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80141a4:	b29a      	uxth	r2, r3
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141aa:	fb12 f303 	smulbb	r3, r2, r3
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80141b2:	4293      	cmp	r3, r2
 80141b4:	bf28      	it	cs
 80141b6:	4613      	movcs	r3, r2
 80141b8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141c2:	4413      	add	r3, r2
 80141c4:	b29a      	uxth	r2, r3
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d309      	bcc.n	80141e4 <tcp_receive+0x2a0>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141d8:	4413      	add	r3, r2
 80141da:	b29a      	uxth	r2, r3
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80141e2:	e060      	b.n	80142a6 <tcp_receive+0x362>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80141ee:	e05a      	b.n	80142a6 <tcp_receive+0x362>
 80141f0:	0801f418 	.word	0x0801f418
 80141f4:	0801f748 	.word	0x0801f748
 80141f8:	0801f464 	.word	0x0801f464
 80141fc:	0801f764 	.word	0x0801f764
 8014200:	2000afd4 	.word	0x2000afd4
 8014204:	2000afc8 	.word	0x2000afc8
 8014208:	2000afcc 	.word	0x2000afcc
 801420c:	2000afb8 	.word	0x2000afb8
 8014210:	2000afd2 	.word	0x2000afd2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801421a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801421c:	4413      	add	r3, r2
 801421e:	b29a      	uxth	r2, r3
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014226:	429a      	cmp	r2, r3
 8014228:	d309      	bcc.n	801423e <tcp_receive+0x2fa>
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014230:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014232:	4413      	add	r3, r2
 8014234:	b29a      	uxth	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801423c:	e004      	b.n	8014248 <tcp_receive+0x304>
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014254:	429a      	cmp	r2, r3
 8014256:	d326      	bcc.n	80142a6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	b29a      	uxth	r2, r3
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014278:	4413      	add	r3, r2
 801427a:	b29a      	uxth	r2, r3
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014282:	429a      	cmp	r2, r3
 8014284:	d30a      	bcc.n	801429c <tcp_receive+0x358>
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014290:	4413      	add	r3, r2
 8014292:	b29a      	uxth	r2, r3
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801429a:	e004      	b.n	80142a6 <tcp_receive+0x362>
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142ae:	4a98      	ldr	r2, [pc, #608]	; (8014510 <tcp_receive+0x5cc>)
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7ff fdcb 	bl	8013e4c <tcp_free_acked_segments>
 80142b6:	4602      	mov	r2, r0
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142c4:	4a93      	ldr	r2, [pc, #588]	; (8014514 <tcp_receive+0x5d0>)
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f7ff fdc0 	bl	8013e4c <tcp_free_acked_segments>
 80142cc:	4602      	mov	r2, r0
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d104      	bne.n	80142e4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142e0:	861a      	strh	r2, [r3, #48]	; 0x30
 80142e2:	e002      	b.n	80142ea <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2200      	movs	r2, #0
 80142e8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2200      	movs	r2, #0
 80142ee:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d103      	bne.n	8014300 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2200      	movs	r2, #0
 80142fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014306:	4b84      	ldr	r3, [pc, #528]	; (8014518 <tcp_receive+0x5d4>)
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	4413      	add	r3, r2
 801430c:	b29a      	uxth	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	8b5b      	ldrh	r3, [r3, #26]
 8014318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801431c:	2b00      	cmp	r3, #0
 801431e:	d035      	beq.n	801438c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014324:	2b00      	cmp	r3, #0
 8014326:	d118      	bne.n	801435a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801432c:	2b00      	cmp	r3, #0
 801432e:	d00c      	beq.n	801434a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014338:	68db      	ldr	r3, [r3, #12]
 801433a:	685b      	ldr	r3, [r3, #4]
 801433c:	4618      	mov	r0, r3
 801433e:	f7fb f964 	bl	800f60a <lwip_htonl>
 8014342:	4603      	mov	r3, r0
 8014344:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014346:	2b00      	cmp	r3, #0
 8014348:	dc20      	bgt.n	801438c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	8b5b      	ldrh	r3, [r3, #26]
 801434e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014352:	b29a      	uxth	r2, r3
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014358:	e018      	b.n	801438c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	4618      	mov	r0, r3
 8014368:	f7fb f94f 	bl	800f60a <lwip_htonl>
 801436c:	4603      	mov	r3, r0
 801436e:	1ae3      	subs	r3, r4, r3
 8014370:	2b00      	cmp	r3, #0
 8014372:	dc0b      	bgt.n	801438c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	8b5b      	ldrh	r3, [r3, #26]
 8014378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801437c:	b29a      	uxth	r2, r3
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014382:	e003      	b.n	801438c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f001 ff75 	bl	8016274 <tcp_send_empty_ack>
 801438a:	e000      	b.n	801438e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801438c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014392:	2b00      	cmp	r3, #0
 8014394:	d05b      	beq.n	801444e <tcp_receive+0x50a>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801439a:	4b60      	ldr	r3, [pc, #384]	; (801451c <tcp_receive+0x5d8>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	1ad3      	subs	r3, r2, r3
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	da54      	bge.n	801444e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80143a4:	4b5e      	ldr	r3, [pc, #376]	; (8014520 <tcp_receive+0x5dc>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	b29a      	uxth	r2, r3
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143ae:	b29b      	uxth	r3, r3
 80143b0:	1ad3      	subs	r3, r2, r3
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80143b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143c2:	10db      	asrs	r3, r3, #3
 80143c4:	b21b      	sxth	r3, r3
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	1ad3      	subs	r3, r2, r3
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143d6:	b29a      	uxth	r2, r3
 80143d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80143dc:	4413      	add	r3, r2
 80143de:	b29b      	uxth	r3, r3
 80143e0:	b21a      	sxth	r2, r3
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80143e6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	da05      	bge.n	80143fa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80143ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80143f2:	425b      	negs	r3, r3
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80143fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014404:	109b      	asrs	r3, r3, #2
 8014406:	b21b      	sxth	r3, r3
 8014408:	b29b      	uxth	r3, r3
 801440a:	1ad3      	subs	r3, r2, r3
 801440c:	b29b      	uxth	r3, r3
 801440e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014418:	b29a      	uxth	r2, r3
 801441a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801441e:	4413      	add	r3, r2
 8014420:	b29b      	uxth	r3, r3
 8014422:	b21a      	sxth	r2, r3
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801442e:	10db      	asrs	r3, r3, #3
 8014430:	b21b      	sxth	r3, r3
 8014432:	b29a      	uxth	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801443a:	b29b      	uxth	r3, r3
 801443c:	4413      	add	r3, r2
 801443e:	b29b      	uxth	r3, r3
 8014440:	b21a      	sxth	r2, r3
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2200      	movs	r2, #0
 801444c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801444e:	4b35      	ldr	r3, [pc, #212]	; (8014524 <tcp_receive+0x5e0>)
 8014450:	881b      	ldrh	r3, [r3, #0]
 8014452:	2b00      	cmp	r3, #0
 8014454:	f000 84e1 	beq.w	8014e1a <tcp_receive+0xed6>
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	7d1b      	ldrb	r3, [r3, #20]
 801445c:	2b06      	cmp	r3, #6
 801445e:	f200 84dc 	bhi.w	8014e1a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014466:	4b30      	ldr	r3, [pc, #192]	; (8014528 <tcp_receive+0x5e4>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	3b01      	subs	r3, #1
 801446e:	2b00      	cmp	r3, #0
 8014470:	f2c0 808e 	blt.w	8014590 <tcp_receive+0x64c>
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014478:	4b2a      	ldr	r3, [pc, #168]	; (8014524 <tcp_receive+0x5e0>)
 801447a:	881b      	ldrh	r3, [r3, #0]
 801447c:	4619      	mov	r1, r3
 801447e:	4b2a      	ldr	r3, [pc, #168]	; (8014528 <tcp_receive+0x5e4>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	440b      	add	r3, r1
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	3301      	adds	r3, #1
 8014488:	2b00      	cmp	r3, #0
 801448a:	f300 8081 	bgt.w	8014590 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801448e:	4b27      	ldr	r3, [pc, #156]	; (801452c <tcp_receive+0x5e8>)
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014498:	4b23      	ldr	r3, [pc, #140]	; (8014528 <tcp_receive+0x5e4>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	1ad3      	subs	r3, r2, r3
 801449e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80144a0:	4b22      	ldr	r3, [pc, #136]	; (801452c <tcp_receive+0x5e8>)
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d106      	bne.n	80144b6 <tcp_receive+0x572>
 80144a8:	4b21      	ldr	r3, [pc, #132]	; (8014530 <tcp_receive+0x5ec>)
 80144aa:	f240 5294 	movw	r2, #1428	; 0x594
 80144ae:	4921      	ldr	r1, [pc, #132]	; (8014534 <tcp_receive+0x5f0>)
 80144b0:	4821      	ldr	r0, [pc, #132]	; (8014538 <tcp_receive+0x5f4>)
 80144b2:	f008 fc55 	bl	801cd60 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80144b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80144bc:	4293      	cmp	r3, r2
 80144be:	d906      	bls.n	80144ce <tcp_receive+0x58a>
 80144c0:	4b1b      	ldr	r3, [pc, #108]	; (8014530 <tcp_receive+0x5ec>)
 80144c2:	f240 5295 	movw	r2, #1429	; 0x595
 80144c6:	491d      	ldr	r1, [pc, #116]	; (801453c <tcp_receive+0x5f8>)
 80144c8:	481b      	ldr	r0, [pc, #108]	; (8014538 <tcp_receive+0x5f4>)
 80144ca:	f008 fc49 	bl	801cd60 <iprintf>
      off = (u16_t)off32;
 80144ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80144d4:	4b15      	ldr	r3, [pc, #84]	; (801452c <tcp_receive+0x5e8>)
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	891b      	ldrh	r3, [r3, #8]
 80144da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80144de:	429a      	cmp	r2, r3
 80144e0:	d906      	bls.n	80144f0 <tcp_receive+0x5ac>
 80144e2:	4b13      	ldr	r3, [pc, #76]	; (8014530 <tcp_receive+0x5ec>)
 80144e4:	f240 5297 	movw	r2, #1431	; 0x597
 80144e8:	4915      	ldr	r1, [pc, #84]	; (8014540 <tcp_receive+0x5fc>)
 80144ea:	4813      	ldr	r0, [pc, #76]	; (8014538 <tcp_receive+0x5f4>)
 80144ec:	f008 fc38 	bl	801cd60 <iprintf>
      inseg.len -= off;
 80144f0:	4b0e      	ldr	r3, [pc, #56]	; (801452c <tcp_receive+0x5e8>)
 80144f2:	891a      	ldrh	r2, [r3, #8]
 80144f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80144f8:	1ad3      	subs	r3, r2, r3
 80144fa:	b29a      	uxth	r2, r3
 80144fc:	4b0b      	ldr	r3, [pc, #44]	; (801452c <tcp_receive+0x5e8>)
 80144fe:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014500:	4b0a      	ldr	r3, [pc, #40]	; (801452c <tcp_receive+0x5e8>)
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	891a      	ldrh	r2, [r3, #8]
 8014506:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801450e:	e029      	b.n	8014564 <tcp_receive+0x620>
 8014510:	0801f780 	.word	0x0801f780
 8014514:	0801f788 	.word	0x0801f788
 8014518:	2000afd0 	.word	0x2000afd0
 801451c:	2000afcc 	.word	0x2000afcc
 8014520:	200139f8 	.word	0x200139f8
 8014524:	2000afd2 	.word	0x2000afd2
 8014528:	2000afc8 	.word	0x2000afc8
 801452c:	2000afa8 	.word	0x2000afa8
 8014530:	0801f418 	.word	0x0801f418
 8014534:	0801f790 	.word	0x0801f790
 8014538:	0801f464 	.word	0x0801f464
 801453c:	0801f7a0 	.word	0x0801f7a0
 8014540:	0801f7b0 	.word	0x0801f7b0
        off -= p->len;
 8014544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014546:	895b      	ldrh	r3, [r3, #10]
 8014548:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801454c:	1ad3      	subs	r3, r2, r3
 801454e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014554:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014556:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801455a:	2200      	movs	r2, #0
 801455c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801455e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014566:	895b      	ldrh	r3, [r3, #10]
 8014568:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801456c:	429a      	cmp	r2, r3
 801456e:	d8e9      	bhi.n	8014544 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014574:	4619      	mov	r1, r3
 8014576:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014578:	f7fc fb64 	bl	8010c44 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014580:	4a91      	ldr	r2, [pc, #580]	; (80147c8 <tcp_receive+0x884>)
 8014582:	6013      	str	r3, [r2, #0]
 8014584:	4b91      	ldr	r3, [pc, #580]	; (80147cc <tcp_receive+0x888>)
 8014586:	68db      	ldr	r3, [r3, #12]
 8014588:	4a8f      	ldr	r2, [pc, #572]	; (80147c8 <tcp_receive+0x884>)
 801458a:	6812      	ldr	r2, [r2, #0]
 801458c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801458e:	e00d      	b.n	80145ac <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014590:	4b8d      	ldr	r3, [pc, #564]	; (80147c8 <tcp_receive+0x884>)
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014598:	1ad3      	subs	r3, r2, r3
 801459a:	2b00      	cmp	r3, #0
 801459c:	da06      	bge.n	80145ac <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	8b5b      	ldrh	r3, [r3, #26]
 80145a2:	f043 0302 	orr.w	r3, r3, #2
 80145a6:	b29a      	uxth	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80145ac:	4b86      	ldr	r3, [pc, #536]	; (80147c8 <tcp_receive+0x884>)
 80145ae:	681a      	ldr	r2, [r3, #0]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b4:	1ad3      	subs	r3, r2, r3
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	f2c0 842a 	blt.w	8014e10 <tcp_receive+0xecc>
 80145bc:	4b82      	ldr	r3, [pc, #520]	; (80147c8 <tcp_receive+0x884>)
 80145be:	681a      	ldr	r2, [r3, #0]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145c4:	6879      	ldr	r1, [r7, #4]
 80145c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80145c8:	440b      	add	r3, r1
 80145ca:	1ad3      	subs	r3, r2, r3
 80145cc:	3301      	adds	r3, #1
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	f300 841e 	bgt.w	8014e10 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145d8:	4b7b      	ldr	r3, [pc, #492]	; (80147c8 <tcp_receive+0x884>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	429a      	cmp	r2, r3
 80145de:	f040 829a 	bne.w	8014b16 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80145e2:	4b7a      	ldr	r3, [pc, #488]	; (80147cc <tcp_receive+0x888>)
 80145e4:	891c      	ldrh	r4, [r3, #8]
 80145e6:	4b79      	ldr	r3, [pc, #484]	; (80147cc <tcp_receive+0x888>)
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	899b      	ldrh	r3, [r3, #12]
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7fa fff6 	bl	800f5e0 <lwip_htons>
 80145f4:	4603      	mov	r3, r0
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	f003 0303 	and.w	r3, r3, #3
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d001      	beq.n	8014604 <tcp_receive+0x6c0>
 8014600:	2301      	movs	r3, #1
 8014602:	e000      	b.n	8014606 <tcp_receive+0x6c2>
 8014604:	2300      	movs	r3, #0
 8014606:	4423      	add	r3, r4
 8014608:	b29a      	uxth	r2, r3
 801460a:	4b71      	ldr	r3, [pc, #452]	; (80147d0 <tcp_receive+0x88c>)
 801460c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014612:	4b6f      	ldr	r3, [pc, #444]	; (80147d0 <tcp_receive+0x88c>)
 8014614:	881b      	ldrh	r3, [r3, #0]
 8014616:	429a      	cmp	r2, r3
 8014618:	d275      	bcs.n	8014706 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801461a:	4b6c      	ldr	r3, [pc, #432]	; (80147cc <tcp_receive+0x888>)
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	899b      	ldrh	r3, [r3, #12]
 8014620:	b29b      	uxth	r3, r3
 8014622:	4618      	mov	r0, r3
 8014624:	f7fa ffdc 	bl	800f5e0 <lwip_htons>
 8014628:	4603      	mov	r3, r0
 801462a:	b2db      	uxtb	r3, r3
 801462c:	f003 0301 	and.w	r3, r3, #1
 8014630:	2b00      	cmp	r3, #0
 8014632:	d01f      	beq.n	8014674 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014634:	4b65      	ldr	r3, [pc, #404]	; (80147cc <tcp_receive+0x888>)
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	899b      	ldrh	r3, [r3, #12]
 801463a:	b29b      	uxth	r3, r3
 801463c:	b21b      	sxth	r3, r3
 801463e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014642:	b21c      	sxth	r4, r3
 8014644:	4b61      	ldr	r3, [pc, #388]	; (80147cc <tcp_receive+0x888>)
 8014646:	68db      	ldr	r3, [r3, #12]
 8014648:	899b      	ldrh	r3, [r3, #12]
 801464a:	b29b      	uxth	r3, r3
 801464c:	4618      	mov	r0, r3
 801464e:	f7fa ffc7 	bl	800f5e0 <lwip_htons>
 8014652:	4603      	mov	r3, r0
 8014654:	b2db      	uxtb	r3, r3
 8014656:	b29b      	uxth	r3, r3
 8014658:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801465c:	b29b      	uxth	r3, r3
 801465e:	4618      	mov	r0, r3
 8014660:	f7fa ffbe 	bl	800f5e0 <lwip_htons>
 8014664:	4603      	mov	r3, r0
 8014666:	b21b      	sxth	r3, r3
 8014668:	4323      	orrs	r3, r4
 801466a:	b21a      	sxth	r2, r3
 801466c:	4b57      	ldr	r3, [pc, #348]	; (80147cc <tcp_receive+0x888>)
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	b292      	uxth	r2, r2
 8014672:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014678:	4b54      	ldr	r3, [pc, #336]	; (80147cc <tcp_receive+0x888>)
 801467a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801467c:	4b53      	ldr	r3, [pc, #332]	; (80147cc <tcp_receive+0x888>)
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	899b      	ldrh	r3, [r3, #12]
 8014682:	b29b      	uxth	r3, r3
 8014684:	4618      	mov	r0, r3
 8014686:	f7fa ffab 	bl	800f5e0 <lwip_htons>
 801468a:	4603      	mov	r3, r0
 801468c:	b2db      	uxtb	r3, r3
 801468e:	f003 0302 	and.w	r3, r3, #2
 8014692:	2b00      	cmp	r3, #0
 8014694:	d005      	beq.n	80146a2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8014696:	4b4d      	ldr	r3, [pc, #308]	; (80147cc <tcp_receive+0x888>)
 8014698:	891b      	ldrh	r3, [r3, #8]
 801469a:	3b01      	subs	r3, #1
 801469c:	b29a      	uxth	r2, r3
 801469e:	4b4b      	ldr	r3, [pc, #300]	; (80147cc <tcp_receive+0x888>)
 80146a0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80146a2:	4b4a      	ldr	r3, [pc, #296]	; (80147cc <tcp_receive+0x888>)
 80146a4:	685b      	ldr	r3, [r3, #4]
 80146a6:	4a49      	ldr	r2, [pc, #292]	; (80147cc <tcp_receive+0x888>)
 80146a8:	8912      	ldrh	r2, [r2, #8]
 80146aa:	4611      	mov	r1, r2
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7fc f9c9 	bl	8010a44 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80146b2:	4b46      	ldr	r3, [pc, #280]	; (80147cc <tcp_receive+0x888>)
 80146b4:	891c      	ldrh	r4, [r3, #8]
 80146b6:	4b45      	ldr	r3, [pc, #276]	; (80147cc <tcp_receive+0x888>)
 80146b8:	68db      	ldr	r3, [r3, #12]
 80146ba:	899b      	ldrh	r3, [r3, #12]
 80146bc:	b29b      	uxth	r3, r3
 80146be:	4618      	mov	r0, r3
 80146c0:	f7fa ff8e 	bl	800f5e0 <lwip_htons>
 80146c4:	4603      	mov	r3, r0
 80146c6:	b2db      	uxtb	r3, r3
 80146c8:	f003 0303 	and.w	r3, r3, #3
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d001      	beq.n	80146d4 <tcp_receive+0x790>
 80146d0:	2301      	movs	r3, #1
 80146d2:	e000      	b.n	80146d6 <tcp_receive+0x792>
 80146d4:	2300      	movs	r3, #0
 80146d6:	4423      	add	r3, r4
 80146d8:	b29a      	uxth	r2, r3
 80146da:	4b3d      	ldr	r3, [pc, #244]	; (80147d0 <tcp_receive+0x88c>)
 80146dc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80146de:	4b3c      	ldr	r3, [pc, #240]	; (80147d0 <tcp_receive+0x88c>)
 80146e0:	881b      	ldrh	r3, [r3, #0]
 80146e2:	461a      	mov	r2, r3
 80146e4:	4b38      	ldr	r3, [pc, #224]	; (80147c8 <tcp_receive+0x884>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	441a      	add	r2, r3
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ee:	6879      	ldr	r1, [r7, #4]
 80146f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80146f2:	440b      	add	r3, r1
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d006      	beq.n	8014706 <tcp_receive+0x7c2>
 80146f8:	4b36      	ldr	r3, [pc, #216]	; (80147d4 <tcp_receive+0x890>)
 80146fa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80146fe:	4936      	ldr	r1, [pc, #216]	; (80147d8 <tcp_receive+0x894>)
 8014700:	4836      	ldr	r0, [pc, #216]	; (80147dc <tcp_receive+0x898>)
 8014702:	f008 fb2d 	bl	801cd60 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801470a:	2b00      	cmp	r3, #0
 801470c:	f000 80e7 	beq.w	80148de <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014710:	4b2e      	ldr	r3, [pc, #184]	; (80147cc <tcp_receive+0x888>)
 8014712:	68db      	ldr	r3, [r3, #12]
 8014714:	899b      	ldrh	r3, [r3, #12]
 8014716:	b29b      	uxth	r3, r3
 8014718:	4618      	mov	r0, r3
 801471a:	f7fa ff61 	bl	800f5e0 <lwip_htons>
 801471e:	4603      	mov	r3, r0
 8014720:	b2db      	uxtb	r3, r3
 8014722:	f003 0301 	and.w	r3, r3, #1
 8014726:	2b00      	cmp	r3, #0
 8014728:	d010      	beq.n	801474c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801472a:	e00a      	b.n	8014742 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014730:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801473c:	68f8      	ldr	r0, [r7, #12]
 801473e:	f7fd fd96 	bl	801226e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014746:	2b00      	cmp	r3, #0
 8014748:	d1f0      	bne.n	801472c <tcp_receive+0x7e8>
 801474a:	e0c8      	b.n	80148de <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014750:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014752:	e052      	b.n	80147fa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	899b      	ldrh	r3, [r3, #12]
 801475a:	b29b      	uxth	r3, r3
 801475c:	4618      	mov	r0, r3
 801475e:	f7fa ff3f 	bl	800f5e0 <lwip_htons>
 8014762:	4603      	mov	r3, r0
 8014764:	b2db      	uxtb	r3, r3
 8014766:	f003 0301 	and.w	r3, r3, #1
 801476a:	2b00      	cmp	r3, #0
 801476c:	d03d      	beq.n	80147ea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801476e:	4b17      	ldr	r3, [pc, #92]	; (80147cc <tcp_receive+0x888>)
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	899b      	ldrh	r3, [r3, #12]
 8014774:	b29b      	uxth	r3, r3
 8014776:	4618      	mov	r0, r3
 8014778:	f7fa ff32 	bl	800f5e0 <lwip_htons>
 801477c:	4603      	mov	r3, r0
 801477e:	b2db      	uxtb	r3, r3
 8014780:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014784:	2b00      	cmp	r3, #0
 8014786:	d130      	bne.n	80147ea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014788:	4b10      	ldr	r3, [pc, #64]	; (80147cc <tcp_receive+0x888>)
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	899b      	ldrh	r3, [r3, #12]
 801478e:	b29c      	uxth	r4, r3
 8014790:	2001      	movs	r0, #1
 8014792:	f7fa ff25 	bl	800f5e0 <lwip_htons>
 8014796:	4603      	mov	r3, r0
 8014798:	461a      	mov	r2, r3
 801479a:	4b0c      	ldr	r3, [pc, #48]	; (80147cc <tcp_receive+0x888>)
 801479c:	68db      	ldr	r3, [r3, #12]
 801479e:	4322      	orrs	r2, r4
 80147a0:	b292      	uxth	r2, r2
 80147a2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80147a4:	4b09      	ldr	r3, [pc, #36]	; (80147cc <tcp_receive+0x888>)
 80147a6:	891c      	ldrh	r4, [r3, #8]
 80147a8:	4b08      	ldr	r3, [pc, #32]	; (80147cc <tcp_receive+0x888>)
 80147aa:	68db      	ldr	r3, [r3, #12]
 80147ac:	899b      	ldrh	r3, [r3, #12]
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7fa ff15 	bl	800f5e0 <lwip_htons>
 80147b6:	4603      	mov	r3, r0
 80147b8:	b2db      	uxtb	r3, r3
 80147ba:	f003 0303 	and.w	r3, r3, #3
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d00e      	beq.n	80147e0 <tcp_receive+0x89c>
 80147c2:	2301      	movs	r3, #1
 80147c4:	e00d      	b.n	80147e2 <tcp_receive+0x89e>
 80147c6:	bf00      	nop
 80147c8:	2000afc8 	.word	0x2000afc8
 80147cc:	2000afa8 	.word	0x2000afa8
 80147d0:	2000afd2 	.word	0x2000afd2
 80147d4:	0801f418 	.word	0x0801f418
 80147d8:	0801f7c0 	.word	0x0801f7c0
 80147dc:	0801f464 	.word	0x0801f464
 80147e0:	2300      	movs	r3, #0
 80147e2:	4423      	add	r3, r4
 80147e4:	b29a      	uxth	r2, r3
 80147e6:	4b98      	ldr	r3, [pc, #608]	; (8014a48 <tcp_receive+0xb04>)
 80147e8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80147ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147ec:	613b      	str	r3, [r7, #16]
              next = next->next;
 80147ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80147f4:	6938      	ldr	r0, [r7, #16]
 80147f6:	f7fd fd3a 	bl	801226e <tcp_seg_free>
            while (next &&
 80147fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d00e      	beq.n	801481e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014800:	4b91      	ldr	r3, [pc, #580]	; (8014a48 <tcp_receive+0xb04>)
 8014802:	881b      	ldrh	r3, [r3, #0]
 8014804:	461a      	mov	r2, r3
 8014806:	4b91      	ldr	r3, [pc, #580]	; (8014a4c <tcp_receive+0xb08>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	441a      	add	r2, r3
 801480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801480e:	68db      	ldr	r3, [r3, #12]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014814:	8909      	ldrh	r1, [r1, #8]
 8014816:	440b      	add	r3, r1
 8014818:	1ad3      	subs	r3, r2, r3
            while (next &&
 801481a:	2b00      	cmp	r3, #0
 801481c:	da9a      	bge.n	8014754 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014820:	2b00      	cmp	r3, #0
 8014822:	d059      	beq.n	80148d8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8014824:	4b88      	ldr	r3, [pc, #544]	; (8014a48 <tcp_receive+0xb04>)
 8014826:	881b      	ldrh	r3, [r3, #0]
 8014828:	461a      	mov	r2, r3
 801482a:	4b88      	ldr	r3, [pc, #544]	; (8014a4c <tcp_receive+0xb08>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	441a      	add	r2, r3
 8014830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014838:	2b00      	cmp	r3, #0
 801483a:	dd4d      	ble.n	80148d8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	685b      	ldr	r3, [r3, #4]
 8014842:	b29a      	uxth	r2, r3
 8014844:	4b81      	ldr	r3, [pc, #516]	; (8014a4c <tcp_receive+0xb08>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	b29b      	uxth	r3, r3
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	b29a      	uxth	r2, r3
 801484e:	4b80      	ldr	r3, [pc, #512]	; (8014a50 <tcp_receive+0xb0c>)
 8014850:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014852:	4b7f      	ldr	r3, [pc, #508]	; (8014a50 <tcp_receive+0xb0c>)
 8014854:	68db      	ldr	r3, [r3, #12]
 8014856:	899b      	ldrh	r3, [r3, #12]
 8014858:	b29b      	uxth	r3, r3
 801485a:	4618      	mov	r0, r3
 801485c:	f7fa fec0 	bl	800f5e0 <lwip_htons>
 8014860:	4603      	mov	r3, r0
 8014862:	b2db      	uxtb	r3, r3
 8014864:	f003 0302 	and.w	r3, r3, #2
 8014868:	2b00      	cmp	r3, #0
 801486a:	d005      	beq.n	8014878 <tcp_receive+0x934>
                inseg.len -= 1;
 801486c:	4b78      	ldr	r3, [pc, #480]	; (8014a50 <tcp_receive+0xb0c>)
 801486e:	891b      	ldrh	r3, [r3, #8]
 8014870:	3b01      	subs	r3, #1
 8014872:	b29a      	uxth	r2, r3
 8014874:	4b76      	ldr	r3, [pc, #472]	; (8014a50 <tcp_receive+0xb0c>)
 8014876:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014878:	4b75      	ldr	r3, [pc, #468]	; (8014a50 <tcp_receive+0xb0c>)
 801487a:	685b      	ldr	r3, [r3, #4]
 801487c:	4a74      	ldr	r2, [pc, #464]	; (8014a50 <tcp_receive+0xb0c>)
 801487e:	8912      	ldrh	r2, [r2, #8]
 8014880:	4611      	mov	r1, r2
 8014882:	4618      	mov	r0, r3
 8014884:	f7fc f8de 	bl	8010a44 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014888:	4b71      	ldr	r3, [pc, #452]	; (8014a50 <tcp_receive+0xb0c>)
 801488a:	891c      	ldrh	r4, [r3, #8]
 801488c:	4b70      	ldr	r3, [pc, #448]	; (8014a50 <tcp_receive+0xb0c>)
 801488e:	68db      	ldr	r3, [r3, #12]
 8014890:	899b      	ldrh	r3, [r3, #12]
 8014892:	b29b      	uxth	r3, r3
 8014894:	4618      	mov	r0, r3
 8014896:	f7fa fea3 	bl	800f5e0 <lwip_htons>
 801489a:	4603      	mov	r3, r0
 801489c:	b2db      	uxtb	r3, r3
 801489e:	f003 0303 	and.w	r3, r3, #3
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d001      	beq.n	80148aa <tcp_receive+0x966>
 80148a6:	2301      	movs	r3, #1
 80148a8:	e000      	b.n	80148ac <tcp_receive+0x968>
 80148aa:	2300      	movs	r3, #0
 80148ac:	4423      	add	r3, r4
 80148ae:	b29a      	uxth	r2, r3
 80148b0:	4b65      	ldr	r3, [pc, #404]	; (8014a48 <tcp_receive+0xb04>)
 80148b2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80148b4:	4b64      	ldr	r3, [pc, #400]	; (8014a48 <tcp_receive+0xb04>)
 80148b6:	881b      	ldrh	r3, [r3, #0]
 80148b8:	461a      	mov	r2, r3
 80148ba:	4b64      	ldr	r3, [pc, #400]	; (8014a4c <tcp_receive+0xb08>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	441a      	add	r2, r3
 80148c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148c2:	68db      	ldr	r3, [r3, #12]
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d006      	beq.n	80148d8 <tcp_receive+0x994>
 80148ca:	4b62      	ldr	r3, [pc, #392]	; (8014a54 <tcp_receive+0xb10>)
 80148cc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80148d0:	4961      	ldr	r1, [pc, #388]	; (8014a58 <tcp_receive+0xb14>)
 80148d2:	4862      	ldr	r0, [pc, #392]	; (8014a5c <tcp_receive+0xb18>)
 80148d4:	f008 fa44 	bl	801cd60 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148dc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80148de:	4b5a      	ldr	r3, [pc, #360]	; (8014a48 <tcp_receive+0xb04>)
 80148e0:	881b      	ldrh	r3, [r3, #0]
 80148e2:	461a      	mov	r2, r3
 80148e4:	4b59      	ldr	r3, [pc, #356]	; (8014a4c <tcp_receive+0xb08>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	441a      	add	r2, r3
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148f2:	4b55      	ldr	r3, [pc, #340]	; (8014a48 <tcp_receive+0xb04>)
 80148f4:	881b      	ldrh	r3, [r3, #0]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d206      	bcs.n	8014908 <tcp_receive+0x9c4>
 80148fa:	4b56      	ldr	r3, [pc, #344]	; (8014a54 <tcp_receive+0xb10>)
 80148fc:	f240 6207 	movw	r2, #1543	; 0x607
 8014900:	4957      	ldr	r1, [pc, #348]	; (8014a60 <tcp_receive+0xb1c>)
 8014902:	4856      	ldr	r0, [pc, #344]	; (8014a5c <tcp_receive+0xb18>)
 8014904:	f008 fa2c 	bl	801cd60 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801490c:	4b4e      	ldr	r3, [pc, #312]	; (8014a48 <tcp_receive+0xb04>)
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	1ad3      	subs	r3, r2, r3
 8014912:	b29a      	uxth	r2, r3
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f7fc ffc9 	bl	80118b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801491e:	4b4c      	ldr	r3, [pc, #304]	; (8014a50 <tcp_receive+0xb0c>)
 8014920:	685b      	ldr	r3, [r3, #4]
 8014922:	891b      	ldrh	r3, [r3, #8]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d006      	beq.n	8014936 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8014928:	4b49      	ldr	r3, [pc, #292]	; (8014a50 <tcp_receive+0xb0c>)
 801492a:	685b      	ldr	r3, [r3, #4]
 801492c:	4a4d      	ldr	r2, [pc, #308]	; (8014a64 <tcp_receive+0xb20>)
 801492e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014930:	4b47      	ldr	r3, [pc, #284]	; (8014a50 <tcp_receive+0xb0c>)
 8014932:	2200      	movs	r2, #0
 8014934:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014936:	4b46      	ldr	r3, [pc, #280]	; (8014a50 <tcp_receive+0xb0c>)
 8014938:	68db      	ldr	r3, [r3, #12]
 801493a:	899b      	ldrh	r3, [r3, #12]
 801493c:	b29b      	uxth	r3, r3
 801493e:	4618      	mov	r0, r3
 8014940:	f7fa fe4e 	bl	800f5e0 <lwip_htons>
 8014944:	4603      	mov	r3, r0
 8014946:	b2db      	uxtb	r3, r3
 8014948:	f003 0301 	and.w	r3, r3, #1
 801494c:	2b00      	cmp	r3, #0
 801494e:	f000 80b8 	beq.w	8014ac2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014952:	4b45      	ldr	r3, [pc, #276]	; (8014a68 <tcp_receive+0xb24>)
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	f043 0320 	orr.w	r3, r3, #32
 801495a:	b2da      	uxtb	r2, r3
 801495c:	4b42      	ldr	r3, [pc, #264]	; (8014a68 <tcp_receive+0xb24>)
 801495e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014960:	e0af      	b.n	8014ac2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014966:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801496c:	68db      	ldr	r3, [r3, #12]
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	4a36      	ldr	r2, [pc, #216]	; (8014a4c <tcp_receive+0xb08>)
 8014972:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	891b      	ldrh	r3, [r3, #8]
 8014978:	461c      	mov	r4, r3
 801497a:	68bb      	ldr	r3, [r7, #8]
 801497c:	68db      	ldr	r3, [r3, #12]
 801497e:	899b      	ldrh	r3, [r3, #12]
 8014980:	b29b      	uxth	r3, r3
 8014982:	4618      	mov	r0, r3
 8014984:	f7fa fe2c 	bl	800f5e0 <lwip_htons>
 8014988:	4603      	mov	r3, r0
 801498a:	b2db      	uxtb	r3, r3
 801498c:	f003 0303 	and.w	r3, r3, #3
 8014990:	2b00      	cmp	r3, #0
 8014992:	d001      	beq.n	8014998 <tcp_receive+0xa54>
 8014994:	2301      	movs	r3, #1
 8014996:	e000      	b.n	801499a <tcp_receive+0xa56>
 8014998:	2300      	movs	r3, #0
 801499a:	191a      	adds	r2, r3, r4
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149a0:	441a      	add	r2, r3
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149aa:	461c      	mov	r4, r3
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	891b      	ldrh	r3, [r3, #8]
 80149b0:	461d      	mov	r5, r3
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	68db      	ldr	r3, [r3, #12]
 80149b6:	899b      	ldrh	r3, [r3, #12]
 80149b8:	b29b      	uxth	r3, r3
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7fa fe10 	bl	800f5e0 <lwip_htons>
 80149c0:	4603      	mov	r3, r0
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	f003 0303 	and.w	r3, r3, #3
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d001      	beq.n	80149d0 <tcp_receive+0xa8c>
 80149cc:	2301      	movs	r3, #1
 80149ce:	e000      	b.n	80149d2 <tcp_receive+0xa8e>
 80149d0:	2300      	movs	r3, #0
 80149d2:	442b      	add	r3, r5
 80149d4:	429c      	cmp	r4, r3
 80149d6:	d206      	bcs.n	80149e6 <tcp_receive+0xaa2>
 80149d8:	4b1e      	ldr	r3, [pc, #120]	; (8014a54 <tcp_receive+0xb10>)
 80149da:	f240 622b 	movw	r2, #1579	; 0x62b
 80149de:	4923      	ldr	r1, [pc, #140]	; (8014a6c <tcp_receive+0xb28>)
 80149e0:	481e      	ldr	r0, [pc, #120]	; (8014a5c <tcp_receive+0xb18>)
 80149e2:	f008 f9bd 	bl	801cd60 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	891b      	ldrh	r3, [r3, #8]
 80149ea:	461c      	mov	r4, r3
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	68db      	ldr	r3, [r3, #12]
 80149f0:	899b      	ldrh	r3, [r3, #12]
 80149f2:	b29b      	uxth	r3, r3
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7fa fdf3 	bl	800f5e0 <lwip_htons>
 80149fa:	4603      	mov	r3, r0
 80149fc:	b2db      	uxtb	r3, r3
 80149fe:	f003 0303 	and.w	r3, r3, #3
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d001      	beq.n	8014a0a <tcp_receive+0xac6>
 8014a06:	2301      	movs	r3, #1
 8014a08:	e000      	b.n	8014a0c <tcp_receive+0xac8>
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	1919      	adds	r1, r3, r4
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a12:	b28b      	uxth	r3, r1
 8014a14:	1ad3      	subs	r3, r2, r3
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f7fc ff47 	bl	80118b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	685b      	ldr	r3, [r3, #4]
 8014a26:	891b      	ldrh	r3, [r3, #8]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d028      	beq.n	8014a7e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014a2c:	4b0d      	ldr	r3, [pc, #52]	; (8014a64 <tcp_receive+0xb20>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d01d      	beq.n	8014a70 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014a34:	4b0b      	ldr	r3, [pc, #44]	; (8014a64 <tcp_receive+0xb20>)
 8014a36:	681a      	ldr	r2, [r3, #0]
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	685b      	ldr	r3, [r3, #4]
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	4610      	mov	r0, r2
 8014a40:	f7fc fa54 	bl	8010eec <pbuf_cat>
 8014a44:	e018      	b.n	8014a78 <tcp_receive+0xb34>
 8014a46:	bf00      	nop
 8014a48:	2000afd2 	.word	0x2000afd2
 8014a4c:	2000afc8 	.word	0x2000afc8
 8014a50:	2000afa8 	.word	0x2000afa8
 8014a54:	0801f418 	.word	0x0801f418
 8014a58:	0801f7f8 	.word	0x0801f7f8
 8014a5c:	0801f464 	.word	0x0801f464
 8014a60:	0801f834 	.word	0x0801f834
 8014a64:	2000afd8 	.word	0x2000afd8
 8014a68:	2000afd5 	.word	0x2000afd5
 8014a6c:	0801f854 	.word	0x0801f854
            } else {
              recv_data = cseg->p;
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	685b      	ldr	r3, [r3, #4]
 8014a74:	4a70      	ldr	r2, [pc, #448]	; (8014c38 <tcp_receive+0xcf4>)
 8014a76:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	68db      	ldr	r3, [r3, #12]
 8014a82:	899b      	ldrh	r3, [r3, #12]
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7fa fdaa 	bl	800f5e0 <lwip_htons>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	f003 0301 	and.w	r3, r3, #1
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d00d      	beq.n	8014ab4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014a98:	4b68      	ldr	r3, [pc, #416]	; (8014c3c <tcp_receive+0xcf8>)
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	f043 0320 	orr.w	r3, r3, #32
 8014aa0:	b2da      	uxtb	r2, r3
 8014aa2:	4b66      	ldr	r3, [pc, #408]	; (8014c3c <tcp_receive+0xcf8>)
 8014aa4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	7d1b      	ldrb	r3, [r3, #20]
 8014aaa:	2b04      	cmp	r3, #4
 8014aac:	d102      	bne.n	8014ab4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2207      	movs	r2, #7
 8014ab2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	681a      	ldr	r2, [r3, #0]
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014abc:	68b8      	ldr	r0, [r7, #8]
 8014abe:	f7fd fbd6 	bl	801226e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d008      	beq.n	8014adc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ace:	68db      	ldr	r3, [r3, #12]
 8014ad0:	685a      	ldr	r2, [r3, #4]
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	f43f af43 	beq.w	8014962 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	8b5b      	ldrh	r3, [r3, #26]
 8014ae0:	f003 0301 	and.w	r3, r3, #1
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d00e      	beq.n	8014b06 <tcp_receive+0xbc2>
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	8b5b      	ldrh	r3, [r3, #26]
 8014aec:	f023 0301 	bic.w	r3, r3, #1
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	835a      	strh	r2, [r3, #26]
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	8b5b      	ldrh	r3, [r3, #26]
 8014afa:	f043 0302 	orr.w	r3, r3, #2
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014b04:	e188      	b.n	8014e18 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	8b5b      	ldrh	r3, [r3, #26]
 8014b0a:	f043 0301 	orr.w	r3, r3, #1
 8014b0e:	b29a      	uxth	r2, r3
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014b14:	e180      	b.n	8014e18 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d106      	bne.n	8014b2c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014b1e:	4848      	ldr	r0, [pc, #288]	; (8014c40 <tcp_receive+0xcfc>)
 8014b20:	f7fd fbbe 	bl	80122a0 <tcp_seg_copy>
 8014b24:	4602      	mov	r2, r0
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	675a      	str	r2, [r3, #116]	; 0x74
 8014b2a:	e16d      	b.n	8014e08 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b34:	63bb      	str	r3, [r7, #56]	; 0x38
 8014b36:	e157      	b.n	8014de8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8014b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b3a:	68db      	ldr	r3, [r3, #12]
 8014b3c:	685a      	ldr	r2, [r3, #4]
 8014b3e:	4b41      	ldr	r3, [pc, #260]	; (8014c44 <tcp_receive+0xd00>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	429a      	cmp	r2, r3
 8014b44:	d11d      	bne.n	8014b82 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014b46:	4b3e      	ldr	r3, [pc, #248]	; (8014c40 <tcp_receive+0xcfc>)
 8014b48:	891a      	ldrh	r2, [r3, #8]
 8014b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b4c:	891b      	ldrh	r3, [r3, #8]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	f240 814f 	bls.w	8014df2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b54:	483a      	ldr	r0, [pc, #232]	; (8014c40 <tcp_receive+0xcfc>)
 8014b56:	f7fd fba3 	bl	80122a0 <tcp_seg_copy>
 8014b5a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	f000 8149 	beq.w	8014df6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8014b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d003      	beq.n	8014b72 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b6c:	697a      	ldr	r2, [r7, #20]
 8014b6e:	601a      	str	r2, [r3, #0]
 8014b70:	e002      	b.n	8014b78 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	697a      	ldr	r2, [r7, #20]
 8014b76:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014b7a:	6978      	ldr	r0, [r7, #20]
 8014b7c:	f7ff f8de 	bl	8013d3c <tcp_oos_insert_segment>
                }
                break;
 8014b80:	e139      	b.n	8014df6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d117      	bne.n	8014bb8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014b88:	4b2e      	ldr	r3, [pc, #184]	; (8014c44 <tcp_receive+0xd00>)
 8014b8a:	681a      	ldr	r2, [r3, #0]
 8014b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b8e:	68db      	ldr	r3, [r3, #12]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	da57      	bge.n	8014c48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b98:	4829      	ldr	r0, [pc, #164]	; (8014c40 <tcp_receive+0xcfc>)
 8014b9a:	f7fd fb81 	bl	80122a0 <tcp_seg_copy>
 8014b9e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014ba0:	69bb      	ldr	r3, [r7, #24]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	f000 8129 	beq.w	8014dfa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	69ba      	ldr	r2, [r7, #24]
 8014bac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014bae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014bb0:	69b8      	ldr	r0, [r7, #24]
 8014bb2:	f7ff f8c3 	bl	8013d3c <tcp_oos_insert_segment>
                  }
                  break;
 8014bb6:	e120      	b.n	8014dfa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014bb8:	4b22      	ldr	r3, [pc, #136]	; (8014c44 <tcp_receive+0xd00>)
 8014bba:	681a      	ldr	r2, [r3, #0]
 8014bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bbe:	68db      	ldr	r3, [r3, #12]
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	1ad3      	subs	r3, r2, r3
 8014bc4:	3b01      	subs	r3, #1
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	db3e      	blt.n	8014c48 <tcp_receive+0xd04>
 8014bca:	4b1e      	ldr	r3, [pc, #120]	; (8014c44 <tcp_receive+0xd00>)
 8014bcc:	681a      	ldr	r2, [r3, #0]
 8014bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bd0:	68db      	ldr	r3, [r3, #12]
 8014bd2:	685b      	ldr	r3, [r3, #4]
 8014bd4:	1ad3      	subs	r3, r2, r3
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	dc35      	bgt.n	8014c48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014bdc:	4818      	ldr	r0, [pc, #96]	; (8014c40 <tcp_receive+0xcfc>)
 8014bde:	f7fd fb5f 	bl	80122a0 <tcp_seg_copy>
 8014be2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014be4:	69fb      	ldr	r3, [r7, #28]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	f000 8109 	beq.w	8014dfe <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014bf4:	8912      	ldrh	r2, [r2, #8]
 8014bf6:	441a      	add	r2, r3
 8014bf8:	4b12      	ldr	r3, [pc, #72]	; (8014c44 <tcp_receive+0xd00>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	1ad3      	subs	r3, r2, r3
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	dd12      	ble.n	8014c28 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014c02:	4b10      	ldr	r3, [pc, #64]	; (8014c44 <tcp_receive+0xd00>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	b29a      	uxth	r2, r3
 8014c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c0a:	68db      	ldr	r3, [r3, #12]
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	b29b      	uxth	r3, r3
 8014c10:	1ad3      	subs	r3, r2, r3
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c16:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c1a:	685a      	ldr	r2, [r3, #4]
 8014c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c1e:	891b      	ldrh	r3, [r3, #8]
 8014c20:	4619      	mov	r1, r3
 8014c22:	4610      	mov	r0, r2
 8014c24:	f7fb ff0e 	bl	8010a44 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c2a:	69fa      	ldr	r2, [r7, #28]
 8014c2c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014c2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c30:	69f8      	ldr	r0, [r7, #28]
 8014c32:	f7ff f883 	bl	8013d3c <tcp_oos_insert_segment>
                  }
                  break;
 8014c36:	e0e2      	b.n	8014dfe <tcp_receive+0xeba>
 8014c38:	2000afd8 	.word	0x2000afd8
 8014c3c:	2000afd5 	.word	0x2000afd5
 8014c40:	2000afa8 	.word	0x2000afa8
 8014c44:	2000afc8 	.word	0x2000afc8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c4a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	f040 80c6 	bne.w	8014de2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014c56:	4b80      	ldr	r3, [pc, #512]	; (8014e58 <tcp_receive+0xf14>)
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c5c:	68db      	ldr	r3, [r3, #12]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	f340 80bd 	ble.w	8014de2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c6a:	68db      	ldr	r3, [r3, #12]
 8014c6c:	899b      	ldrh	r3, [r3, #12]
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	4618      	mov	r0, r3
 8014c72:	f7fa fcb5 	bl	800f5e0 <lwip_htons>
 8014c76:	4603      	mov	r3, r0
 8014c78:	b2db      	uxtb	r3, r3
 8014c7a:	f003 0301 	and.w	r3, r3, #1
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	f040 80bf 	bne.w	8014e02 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014c84:	4875      	ldr	r0, [pc, #468]	; (8014e5c <tcp_receive+0xf18>)
 8014c86:	f7fd fb0b 	bl	80122a0 <tcp_seg_copy>
 8014c8a:	4602      	mov	r2, r0
 8014c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c8e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	f000 80b6 	beq.w	8014e06 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c9c:	68db      	ldr	r3, [r3, #12]
 8014c9e:	685b      	ldr	r3, [r3, #4]
 8014ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ca2:	8912      	ldrh	r2, [r2, #8]
 8014ca4:	441a      	add	r2, r3
 8014ca6:	4b6c      	ldr	r3, [pc, #432]	; (8014e58 <tcp_receive+0xf14>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	1ad3      	subs	r3, r2, r3
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	dd12      	ble.n	8014cd6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014cb0:	4b69      	ldr	r3, [pc, #420]	; (8014e58 <tcp_receive+0xf14>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	b29a      	uxth	r2, r3
 8014cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	685b      	ldr	r3, [r3, #4]
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	b29a      	uxth	r2, r3
 8014cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc8:	685a      	ldr	r2, [r3, #4]
 8014cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ccc:	891b      	ldrh	r3, [r3, #8]
 8014cce:	4619      	mov	r1, r3
 8014cd0:	4610      	mov	r0, r2
 8014cd2:	f7fb feb7 	bl	8010a44 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014cd6:	4b62      	ldr	r3, [pc, #392]	; (8014e60 <tcp_receive+0xf1c>)
 8014cd8:	881b      	ldrh	r3, [r3, #0]
 8014cda:	461a      	mov	r2, r3
 8014cdc:	4b5e      	ldr	r3, [pc, #376]	; (8014e58 <tcp_receive+0xf14>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	441a      	add	r2, r3
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ce6:	6879      	ldr	r1, [r7, #4]
 8014ce8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014cea:	440b      	add	r3, r1
 8014cec:	1ad3      	subs	r3, r2, r3
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	f340 8089 	ble.w	8014e06 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	899b      	ldrh	r3, [r3, #12]
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7fa fc6e 	bl	800f5e0 <lwip_htons>
 8014d04:	4603      	mov	r3, r0
 8014d06:	b2db      	uxtb	r3, r3
 8014d08:	f003 0301 	and.w	r3, r3, #1
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d022      	beq.n	8014d56 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	68db      	ldr	r3, [r3, #12]
 8014d16:	899b      	ldrh	r3, [r3, #12]
 8014d18:	b29b      	uxth	r3, r3
 8014d1a:	b21b      	sxth	r3, r3
 8014d1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014d20:	b21c      	sxth	r4, r3
 8014d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	899b      	ldrh	r3, [r3, #12]
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7fa fc57 	bl	800f5e0 <lwip_htons>
 8014d32:	4603      	mov	r3, r0
 8014d34:	b2db      	uxtb	r3, r3
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7fa fc4e 	bl	800f5e0 <lwip_htons>
 8014d44:	4603      	mov	r3, r0
 8014d46:	b21b      	sxth	r3, r3
 8014d48:	4323      	orrs	r3, r4
 8014d4a:	b21a      	sxth	r2, r3
 8014d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	68db      	ldr	r3, [r3, #12]
 8014d52:	b292      	uxth	r2, r2
 8014d54:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d5a:	b29a      	uxth	r2, r3
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d60:	4413      	add	r3, r2
 8014d62:	b299      	uxth	r1, r3
 8014d64:	4b3c      	ldr	r3, [pc, #240]	; (8014e58 <tcp_receive+0xf14>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	b29a      	uxth	r2, r3
 8014d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	1a8a      	subs	r2, r1, r2
 8014d70:	b292      	uxth	r2, r2
 8014d72:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	685a      	ldr	r2, [r3, #4]
 8014d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	891b      	ldrh	r3, [r3, #8]
 8014d80:	4619      	mov	r1, r3
 8014d82:	4610      	mov	r0, r2
 8014d84:	f7fb fe5e 	bl	8010a44 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	891c      	ldrh	r4, [r3, #8]
 8014d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	68db      	ldr	r3, [r3, #12]
 8014d94:	899b      	ldrh	r3, [r3, #12]
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7fa fc21 	bl	800f5e0 <lwip_htons>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	b2db      	uxtb	r3, r3
 8014da2:	f003 0303 	and.w	r3, r3, #3
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d001      	beq.n	8014dae <tcp_receive+0xe6a>
 8014daa:	2301      	movs	r3, #1
 8014dac:	e000      	b.n	8014db0 <tcp_receive+0xe6c>
 8014dae:	2300      	movs	r3, #0
 8014db0:	4423      	add	r3, r4
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	4b2a      	ldr	r3, [pc, #168]	; (8014e60 <tcp_receive+0xf1c>)
 8014db6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014db8:	4b29      	ldr	r3, [pc, #164]	; (8014e60 <tcp_receive+0xf1c>)
 8014dba:	881b      	ldrh	r3, [r3, #0]
 8014dbc:	461a      	mov	r2, r3
 8014dbe:	4b26      	ldr	r3, [pc, #152]	; (8014e58 <tcp_receive+0xf14>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	441a      	add	r2, r3
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dc8:	6879      	ldr	r1, [r7, #4]
 8014dca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014dcc:	440b      	add	r3, r1
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d019      	beq.n	8014e06 <tcp_receive+0xec2>
 8014dd2:	4b24      	ldr	r3, [pc, #144]	; (8014e64 <tcp_receive+0xf20>)
 8014dd4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014dd8:	4923      	ldr	r1, [pc, #140]	; (8014e68 <tcp_receive+0xf24>)
 8014dda:	4824      	ldr	r0, [pc, #144]	; (8014e6c <tcp_receive+0xf28>)
 8014ddc:	f007 ffc0 	bl	801cd60 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014de0:	e011      	b.n	8014e06 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8014de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	f47f aea4 	bne.w	8014b38 <tcp_receive+0xbf4>
 8014df0:	e00a      	b.n	8014e08 <tcp_receive+0xec4>
                break;
 8014df2:	bf00      	nop
 8014df4:	e008      	b.n	8014e08 <tcp_receive+0xec4>
                break;
 8014df6:	bf00      	nop
 8014df8:	e006      	b.n	8014e08 <tcp_receive+0xec4>
                  break;
 8014dfa:	bf00      	nop
 8014dfc:	e004      	b.n	8014e08 <tcp_receive+0xec4>
                  break;
 8014dfe:	bf00      	nop
 8014e00:	e002      	b.n	8014e08 <tcp_receive+0xec4>
                  break;
 8014e02:	bf00      	nop
 8014e04:	e000      	b.n	8014e08 <tcp_receive+0xec4>
                break;
 8014e06:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f001 fa33 	bl	8016274 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014e0e:	e003      	b.n	8014e18 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	f001 fa2f 	bl	8016274 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014e16:	e01a      	b.n	8014e4e <tcp_receive+0xf0a>
 8014e18:	e019      	b.n	8014e4e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014e1a:	4b0f      	ldr	r3, [pc, #60]	; (8014e58 <tcp_receive+0xf14>)
 8014e1c:	681a      	ldr	r2, [r3, #0]
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e22:	1ad3      	subs	r3, r2, r3
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	db0a      	blt.n	8014e3e <tcp_receive+0xefa>
 8014e28:	4b0b      	ldr	r3, [pc, #44]	; (8014e58 <tcp_receive+0xf14>)
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e30:	6879      	ldr	r1, [r7, #4]
 8014e32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014e34:	440b      	add	r3, r1
 8014e36:	1ad3      	subs	r3, r2, r3
 8014e38:	3301      	adds	r3, #1
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	dd07      	ble.n	8014e4e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	8b5b      	ldrh	r3, [r3, #26]
 8014e42:	f043 0302 	orr.w	r3, r3, #2
 8014e46:	b29a      	uxth	r2, r3
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014e4c:	e7ff      	b.n	8014e4e <tcp_receive+0xf0a>
 8014e4e:	bf00      	nop
 8014e50:	3750      	adds	r7, #80	; 0x50
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bdb0      	pop	{r4, r5, r7, pc}
 8014e56:	bf00      	nop
 8014e58:	2000afc8 	.word	0x2000afc8
 8014e5c:	2000afa8 	.word	0x2000afa8
 8014e60:	2000afd2 	.word	0x2000afd2
 8014e64:	0801f418 	.word	0x0801f418
 8014e68:	0801f7c0 	.word	0x0801f7c0
 8014e6c:	0801f464 	.word	0x0801f464

08014e70 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014e70:	b480      	push	{r7}
 8014e72:	b083      	sub	sp, #12
 8014e74:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014e76:	4b15      	ldr	r3, [pc, #84]	; (8014ecc <tcp_get_next_optbyte+0x5c>)
 8014e78:	881b      	ldrh	r3, [r3, #0]
 8014e7a:	1c5a      	adds	r2, r3, #1
 8014e7c:	b291      	uxth	r1, r2
 8014e7e:	4a13      	ldr	r2, [pc, #76]	; (8014ecc <tcp_get_next_optbyte+0x5c>)
 8014e80:	8011      	strh	r1, [r2, #0]
 8014e82:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014e84:	4b12      	ldr	r3, [pc, #72]	; (8014ed0 <tcp_get_next_optbyte+0x60>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d004      	beq.n	8014e96 <tcp_get_next_optbyte+0x26>
 8014e8c:	4b11      	ldr	r3, [pc, #68]	; (8014ed4 <tcp_get_next_optbyte+0x64>)
 8014e8e:	881b      	ldrh	r3, [r3, #0]
 8014e90:	88fa      	ldrh	r2, [r7, #6]
 8014e92:	429a      	cmp	r2, r3
 8014e94:	d208      	bcs.n	8014ea8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014e96:	4b10      	ldr	r3, [pc, #64]	; (8014ed8 <tcp_get_next_optbyte+0x68>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	3314      	adds	r3, #20
 8014e9c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014e9e:	88fb      	ldrh	r3, [r7, #6]
 8014ea0:	683a      	ldr	r2, [r7, #0]
 8014ea2:	4413      	add	r3, r2
 8014ea4:	781b      	ldrb	r3, [r3, #0]
 8014ea6:	e00b      	b.n	8014ec0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014ea8:	88fb      	ldrh	r3, [r7, #6]
 8014eaa:	b2da      	uxtb	r2, r3
 8014eac:	4b09      	ldr	r3, [pc, #36]	; (8014ed4 <tcp_get_next_optbyte+0x64>)
 8014eae:	881b      	ldrh	r3, [r3, #0]
 8014eb0:	b2db      	uxtb	r3, r3
 8014eb2:	1ad3      	subs	r3, r2, r3
 8014eb4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014eb6:	4b06      	ldr	r3, [pc, #24]	; (8014ed0 <tcp_get_next_optbyte+0x60>)
 8014eb8:	681a      	ldr	r2, [r3, #0]
 8014eba:	797b      	ldrb	r3, [r7, #5]
 8014ebc:	4413      	add	r3, r2
 8014ebe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr
 8014ecc:	2000afc4 	.word	0x2000afc4
 8014ed0:	2000afc0 	.word	0x2000afc0
 8014ed4:	2000afbe 	.word	0x2000afbe
 8014ed8:	2000afb8 	.word	0x2000afb8

08014edc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b084      	sub	sp, #16
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d106      	bne.n	8014ef8 <tcp_parseopt+0x1c>
 8014eea:	4b32      	ldr	r3, [pc, #200]	; (8014fb4 <tcp_parseopt+0xd8>)
 8014eec:	f240 727d 	movw	r2, #1917	; 0x77d
 8014ef0:	4931      	ldr	r1, [pc, #196]	; (8014fb8 <tcp_parseopt+0xdc>)
 8014ef2:	4832      	ldr	r0, [pc, #200]	; (8014fbc <tcp_parseopt+0xe0>)
 8014ef4:	f007 ff34 	bl	801cd60 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014ef8:	4b31      	ldr	r3, [pc, #196]	; (8014fc0 <tcp_parseopt+0xe4>)
 8014efa:	881b      	ldrh	r3, [r3, #0]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d055      	beq.n	8014fac <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014f00:	4b30      	ldr	r3, [pc, #192]	; (8014fc4 <tcp_parseopt+0xe8>)
 8014f02:	2200      	movs	r2, #0
 8014f04:	801a      	strh	r2, [r3, #0]
 8014f06:	e045      	b.n	8014f94 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014f08:	f7ff ffb2 	bl	8014e70 <tcp_get_next_optbyte>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014f10:	7bfb      	ldrb	r3, [r7, #15]
 8014f12:	2b02      	cmp	r3, #2
 8014f14:	d006      	beq.n	8014f24 <tcp_parseopt+0x48>
 8014f16:	2b02      	cmp	r3, #2
 8014f18:	dc2b      	bgt.n	8014f72 <tcp_parseopt+0x96>
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d041      	beq.n	8014fa2 <tcp_parseopt+0xc6>
 8014f1e:	2b01      	cmp	r3, #1
 8014f20:	d127      	bne.n	8014f72 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014f22:	e037      	b.n	8014f94 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014f24:	f7ff ffa4 	bl	8014e70 <tcp_get_next_optbyte>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	2b04      	cmp	r3, #4
 8014f2c:	d13b      	bne.n	8014fa6 <tcp_parseopt+0xca>
 8014f2e:	4b25      	ldr	r3, [pc, #148]	; (8014fc4 <tcp_parseopt+0xe8>)
 8014f30:	881b      	ldrh	r3, [r3, #0]
 8014f32:	3301      	adds	r3, #1
 8014f34:	4a22      	ldr	r2, [pc, #136]	; (8014fc0 <tcp_parseopt+0xe4>)
 8014f36:	8812      	ldrh	r2, [r2, #0]
 8014f38:	4293      	cmp	r3, r2
 8014f3a:	da34      	bge.n	8014fa6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014f3c:	f7ff ff98 	bl	8014e70 <tcp_get_next_optbyte>
 8014f40:	4603      	mov	r3, r0
 8014f42:	b29b      	uxth	r3, r3
 8014f44:	021b      	lsls	r3, r3, #8
 8014f46:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014f48:	f7ff ff92 	bl	8014e70 <tcp_get_next_optbyte>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	b29a      	uxth	r2, r3
 8014f50:	89bb      	ldrh	r3, [r7, #12]
 8014f52:	4313      	orrs	r3, r2
 8014f54:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014f56:	89bb      	ldrh	r3, [r7, #12]
 8014f58:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014f5c:	d804      	bhi.n	8014f68 <tcp_parseopt+0x8c>
 8014f5e:	89bb      	ldrh	r3, [r7, #12]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d001      	beq.n	8014f68 <tcp_parseopt+0x8c>
 8014f64:	89ba      	ldrh	r2, [r7, #12]
 8014f66:	e001      	b.n	8014f6c <tcp_parseopt+0x90>
 8014f68:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014f70:	e010      	b.n	8014f94 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014f72:	f7ff ff7d 	bl	8014e70 <tcp_get_next_optbyte>
 8014f76:	4603      	mov	r3, r0
 8014f78:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014f7a:	7afb      	ldrb	r3, [r7, #11]
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d914      	bls.n	8014faa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014f80:	7afb      	ldrb	r3, [r7, #11]
 8014f82:	b29a      	uxth	r2, r3
 8014f84:	4b0f      	ldr	r3, [pc, #60]	; (8014fc4 <tcp_parseopt+0xe8>)
 8014f86:	881b      	ldrh	r3, [r3, #0]
 8014f88:	4413      	add	r3, r2
 8014f8a:	b29b      	uxth	r3, r3
 8014f8c:	3b02      	subs	r3, #2
 8014f8e:	b29a      	uxth	r2, r3
 8014f90:	4b0c      	ldr	r3, [pc, #48]	; (8014fc4 <tcp_parseopt+0xe8>)
 8014f92:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014f94:	4b0b      	ldr	r3, [pc, #44]	; (8014fc4 <tcp_parseopt+0xe8>)
 8014f96:	881a      	ldrh	r2, [r3, #0]
 8014f98:	4b09      	ldr	r3, [pc, #36]	; (8014fc0 <tcp_parseopt+0xe4>)
 8014f9a:	881b      	ldrh	r3, [r3, #0]
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d3b3      	bcc.n	8014f08 <tcp_parseopt+0x2c>
 8014fa0:	e004      	b.n	8014fac <tcp_parseopt+0xd0>
          return;
 8014fa2:	bf00      	nop
 8014fa4:	e002      	b.n	8014fac <tcp_parseopt+0xd0>
            return;
 8014fa6:	bf00      	nop
 8014fa8:	e000      	b.n	8014fac <tcp_parseopt+0xd0>
            return;
 8014faa:	bf00      	nop
      }
    }
  }
}
 8014fac:	3710      	adds	r7, #16
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}
 8014fb2:	bf00      	nop
 8014fb4:	0801f418 	.word	0x0801f418
 8014fb8:	0801f87c 	.word	0x0801f87c
 8014fbc:	0801f464 	.word	0x0801f464
 8014fc0:	2000afbc 	.word	0x2000afbc
 8014fc4:	2000afc4 	.word	0x2000afc4

08014fc8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014fc8:	b480      	push	{r7}
 8014fca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014fcc:	4b05      	ldr	r3, [pc, #20]	; (8014fe4 <tcp_trigger_input_pcb_close+0x1c>)
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	f043 0310 	orr.w	r3, r3, #16
 8014fd4:	b2da      	uxtb	r2, r3
 8014fd6:	4b03      	ldr	r3, [pc, #12]	; (8014fe4 <tcp_trigger_input_pcb_close+0x1c>)
 8014fd8:	701a      	strb	r2, [r3, #0]
}
 8014fda:	bf00      	nop
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe2:	4770      	bx	lr
 8014fe4:	2000afd5 	.word	0x2000afd5

08014fe8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d00a      	beq.n	8015010 <tcp_route+0x28>
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	7a1b      	ldrb	r3, [r3, #8]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d006      	beq.n	8015010 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	7a1b      	ldrb	r3, [r3, #8]
 8015006:	4618      	mov	r0, r3
 8015008:	f7fb fb14 	bl	8010634 <netif_get_by_index>
 801500c:	4603      	mov	r3, r0
 801500e:	e003      	b.n	8015018 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f005 f845 	bl	801a0a0 <ip4_route>
 8015016:	4603      	mov	r3, r0
  }
}
 8015018:	4618      	mov	r0, r3
 801501a:	3710      	adds	r7, #16
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}

08015020 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015020:	b590      	push	{r4, r7, lr}
 8015022:	b087      	sub	sp, #28
 8015024:	af00      	add	r7, sp, #0
 8015026:	60f8      	str	r0, [r7, #12]
 8015028:	60b9      	str	r1, [r7, #8]
 801502a:	603b      	str	r3, [r7, #0]
 801502c:	4613      	mov	r3, r2
 801502e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d105      	bne.n	8015042 <tcp_create_segment+0x22>
 8015036:	4b44      	ldr	r3, [pc, #272]	; (8015148 <tcp_create_segment+0x128>)
 8015038:	22a3      	movs	r2, #163	; 0xa3
 801503a:	4944      	ldr	r1, [pc, #272]	; (801514c <tcp_create_segment+0x12c>)
 801503c:	4844      	ldr	r0, [pc, #272]	; (8015150 <tcp_create_segment+0x130>)
 801503e:	f007 fe8f 	bl	801cd60 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d105      	bne.n	8015054 <tcp_create_segment+0x34>
 8015048:	4b3f      	ldr	r3, [pc, #252]	; (8015148 <tcp_create_segment+0x128>)
 801504a:	22a4      	movs	r2, #164	; 0xa4
 801504c:	4941      	ldr	r1, [pc, #260]	; (8015154 <tcp_create_segment+0x134>)
 801504e:	4840      	ldr	r0, [pc, #256]	; (8015150 <tcp_create_segment+0x130>)
 8015050:	f007 fe86 	bl	801cd60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015054:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015058:	009b      	lsls	r3, r3, #2
 801505a:	b2db      	uxtb	r3, r3
 801505c:	f003 0304 	and.w	r3, r3, #4
 8015060:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015062:	2003      	movs	r0, #3
 8015064:	f7fa ff72 	bl	800ff4c <memp_malloc>
 8015068:	6138      	str	r0, [r7, #16]
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d104      	bne.n	801507a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015070:	68b8      	ldr	r0, [r7, #8]
 8015072:	f7fb fe6d 	bl	8010d50 <pbuf_free>
    return NULL;
 8015076:	2300      	movs	r3, #0
 8015078:	e061      	b.n	801513e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015080:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	2200      	movs	r2, #0
 8015086:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	68ba      	ldr	r2, [r7, #8]
 801508c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	891a      	ldrh	r2, [r3, #8]
 8015092:	7dfb      	ldrb	r3, [r7, #23]
 8015094:	b29b      	uxth	r3, r3
 8015096:	429a      	cmp	r2, r3
 8015098:	d205      	bcs.n	80150a6 <tcp_create_segment+0x86>
 801509a:	4b2b      	ldr	r3, [pc, #172]	; (8015148 <tcp_create_segment+0x128>)
 801509c:	22b0      	movs	r2, #176	; 0xb0
 801509e:	492e      	ldr	r1, [pc, #184]	; (8015158 <tcp_create_segment+0x138>)
 80150a0:	482b      	ldr	r0, [pc, #172]	; (8015150 <tcp_create_segment+0x130>)
 80150a2:	f007 fe5d 	bl	801cd60 <iprintf>
  seg->len = p->tot_len - optlen;
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	891a      	ldrh	r2, [r3, #8]
 80150aa:	7dfb      	ldrb	r3, [r7, #23]
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	1ad3      	subs	r3, r2, r3
 80150b0:	b29a      	uxth	r2, r3
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80150b6:	2114      	movs	r1, #20
 80150b8:	68b8      	ldr	r0, [r7, #8]
 80150ba:	f7fb fdb3 	bl	8010c24 <pbuf_add_header>
 80150be:	4603      	mov	r3, r0
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d004      	beq.n	80150ce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80150c4:	6938      	ldr	r0, [r7, #16]
 80150c6:	f7fd f8d2 	bl	801226e <tcp_seg_free>
    return NULL;
 80150ca:	2300      	movs	r3, #0
 80150cc:	e037      	b.n	801513e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80150ce:	693b      	ldr	r3, [r7, #16]
 80150d0:	685b      	ldr	r3, [r3, #4]
 80150d2:	685a      	ldr	r2, [r3, #4]
 80150d4:	693b      	ldr	r3, [r7, #16]
 80150d6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	8ada      	ldrh	r2, [r3, #22]
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	68dc      	ldr	r4, [r3, #12]
 80150e0:	4610      	mov	r0, r2
 80150e2:	f7fa fa7d 	bl	800f5e0 <lwip_htons>
 80150e6:	4603      	mov	r3, r0
 80150e8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	8b1a      	ldrh	r2, [r3, #24]
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	68dc      	ldr	r4, [r3, #12]
 80150f2:	4610      	mov	r0, r2
 80150f4:	f7fa fa74 	bl	800f5e0 <lwip_htons>
 80150f8:	4603      	mov	r3, r0
 80150fa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	68dc      	ldr	r4, [r3, #12]
 8015100:	6838      	ldr	r0, [r7, #0]
 8015102:	f7fa fa82 	bl	800f60a <lwip_htonl>
 8015106:	4603      	mov	r3, r0
 8015108:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801510a:	7dfb      	ldrb	r3, [r7, #23]
 801510c:	089b      	lsrs	r3, r3, #2
 801510e:	b2db      	uxtb	r3, r3
 8015110:	b29b      	uxth	r3, r3
 8015112:	3305      	adds	r3, #5
 8015114:	b29b      	uxth	r3, r3
 8015116:	031b      	lsls	r3, r3, #12
 8015118:	b29a      	uxth	r2, r3
 801511a:	79fb      	ldrb	r3, [r7, #7]
 801511c:	b29b      	uxth	r3, r3
 801511e:	4313      	orrs	r3, r2
 8015120:	b29a      	uxth	r2, r3
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	68dc      	ldr	r4, [r3, #12]
 8015126:	4610      	mov	r0, r2
 8015128:	f7fa fa5a 	bl	800f5e0 <lwip_htons>
 801512c:	4603      	mov	r3, r0
 801512e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	68db      	ldr	r3, [r3, #12]
 8015134:	2200      	movs	r2, #0
 8015136:	749a      	strb	r2, [r3, #18]
 8015138:	2200      	movs	r2, #0
 801513a:	74da      	strb	r2, [r3, #19]
  return seg;
 801513c:	693b      	ldr	r3, [r7, #16]
}
 801513e:	4618      	mov	r0, r3
 8015140:	371c      	adds	r7, #28
 8015142:	46bd      	mov	sp, r7
 8015144:	bd90      	pop	{r4, r7, pc}
 8015146:	bf00      	nop
 8015148:	0801f898 	.word	0x0801f898
 801514c:	0801f8cc 	.word	0x0801f8cc
 8015150:	0801f8ec 	.word	0x0801f8ec
 8015154:	0801f914 	.word	0x0801f914
 8015158:	0801f938 	.word	0x0801f938

0801515c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801515c:	b590      	push	{r4, r7, lr}
 801515e:	b08b      	sub	sp, #44	; 0x2c
 8015160:	af02      	add	r7, sp, #8
 8015162:	6078      	str	r0, [r7, #4]
 8015164:	460b      	mov	r3, r1
 8015166:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015168:	2300      	movs	r3, #0
 801516a:	61fb      	str	r3, [r7, #28]
 801516c:	2300      	movs	r3, #0
 801516e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015170:	2300      	movs	r3, #0
 8015172:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d106      	bne.n	8015188 <tcp_split_unsent_seg+0x2c>
 801517a:	4b95      	ldr	r3, [pc, #596]	; (80153d0 <tcp_split_unsent_seg+0x274>)
 801517c:	f240 324b 	movw	r2, #843	; 0x34b
 8015180:	4994      	ldr	r1, [pc, #592]	; (80153d4 <tcp_split_unsent_seg+0x278>)
 8015182:	4895      	ldr	r0, [pc, #596]	; (80153d8 <tcp_split_unsent_seg+0x27c>)
 8015184:	f007 fdec 	bl	801cd60 <iprintf>

  useg = pcb->unsent;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801518c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d102      	bne.n	801519a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015194:	f04f 33ff 	mov.w	r3, #4294967295
 8015198:	e116      	b.n	80153c8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801519a:	887b      	ldrh	r3, [r7, #2]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d109      	bne.n	80151b4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80151a0:	4b8b      	ldr	r3, [pc, #556]	; (80153d0 <tcp_split_unsent_seg+0x274>)
 80151a2:	f240 3253 	movw	r2, #851	; 0x353
 80151a6:	498d      	ldr	r1, [pc, #564]	; (80153dc <tcp_split_unsent_seg+0x280>)
 80151a8:	488b      	ldr	r0, [pc, #556]	; (80153d8 <tcp_split_unsent_seg+0x27c>)
 80151aa:	f007 fdd9 	bl	801cd60 <iprintf>
    return ERR_VAL;
 80151ae:	f06f 0305 	mvn.w	r3, #5
 80151b2:	e109      	b.n	80153c8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80151b4:	697b      	ldr	r3, [r7, #20]
 80151b6:	891b      	ldrh	r3, [r3, #8]
 80151b8:	887a      	ldrh	r2, [r7, #2]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d301      	bcc.n	80151c2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80151be:	2300      	movs	r3, #0
 80151c0:	e102      	b.n	80153c8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151c6:	887a      	ldrh	r2, [r7, #2]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d906      	bls.n	80151da <tcp_split_unsent_seg+0x7e>
 80151cc:	4b80      	ldr	r3, [pc, #512]	; (80153d0 <tcp_split_unsent_seg+0x274>)
 80151ce:	f240 325b 	movw	r2, #859	; 0x35b
 80151d2:	4983      	ldr	r1, [pc, #524]	; (80153e0 <tcp_split_unsent_seg+0x284>)
 80151d4:	4880      	ldr	r0, [pc, #512]	; (80153d8 <tcp_split_unsent_seg+0x27c>)
 80151d6:	f007 fdc3 	bl	801cd60 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80151da:	697b      	ldr	r3, [r7, #20]
 80151dc:	891b      	ldrh	r3, [r3, #8]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d106      	bne.n	80151f0 <tcp_split_unsent_seg+0x94>
 80151e2:	4b7b      	ldr	r3, [pc, #492]	; (80153d0 <tcp_split_unsent_seg+0x274>)
 80151e4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80151e8:	497e      	ldr	r1, [pc, #504]	; (80153e4 <tcp_split_unsent_seg+0x288>)
 80151ea:	487b      	ldr	r0, [pc, #492]	; (80153d8 <tcp_split_unsent_seg+0x27c>)
 80151ec:	f007 fdb8 	bl	801cd60 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80151f0:	697b      	ldr	r3, [r7, #20]
 80151f2:	7a9b      	ldrb	r3, [r3, #10]
 80151f4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80151f6:	7bfb      	ldrb	r3, [r7, #15]
 80151f8:	009b      	lsls	r3, r3, #2
 80151fa:	b2db      	uxtb	r3, r3
 80151fc:	f003 0304 	and.w	r3, r3, #4
 8015200:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	891a      	ldrh	r2, [r3, #8]
 8015206:	887b      	ldrh	r3, [r7, #2]
 8015208:	1ad3      	subs	r3, r2, r3
 801520a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801520c:	7bbb      	ldrb	r3, [r7, #14]
 801520e:	b29a      	uxth	r2, r3
 8015210:	89bb      	ldrh	r3, [r7, #12]
 8015212:	4413      	add	r3, r2
 8015214:	b29b      	uxth	r3, r3
 8015216:	f44f 7220 	mov.w	r2, #640	; 0x280
 801521a:	4619      	mov	r1, r3
 801521c:	2036      	movs	r0, #54	; 0x36
 801521e:	f7fb fab3 	bl	8010788 <pbuf_alloc>
 8015222:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	2b00      	cmp	r3, #0
 8015228:	f000 80b7 	beq.w	801539a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	891a      	ldrh	r2, [r3, #8]
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	891b      	ldrh	r3, [r3, #8]
 8015236:	1ad3      	subs	r3, r2, r3
 8015238:	b29a      	uxth	r2, r3
 801523a:	887b      	ldrh	r3, [r7, #2]
 801523c:	4413      	add	r3, r2
 801523e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	6858      	ldr	r0, [r3, #4]
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	685a      	ldr	r2, [r3, #4]
 8015248:	7bbb      	ldrb	r3, [r7, #14]
 801524a:	18d1      	adds	r1, r2, r3
 801524c:	897b      	ldrh	r3, [r7, #10]
 801524e:	89ba      	ldrh	r2, [r7, #12]
 8015250:	f7fb ff84 	bl	801115c <pbuf_copy_partial>
 8015254:	4603      	mov	r3, r0
 8015256:	461a      	mov	r2, r3
 8015258:	89bb      	ldrh	r3, [r7, #12]
 801525a:	4293      	cmp	r3, r2
 801525c:	f040 809f 	bne.w	801539e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	68db      	ldr	r3, [r3, #12]
 8015264:	899b      	ldrh	r3, [r3, #12]
 8015266:	b29b      	uxth	r3, r3
 8015268:	4618      	mov	r0, r3
 801526a:	f7fa f9b9 	bl	800f5e0 <lwip_htons>
 801526e:	4603      	mov	r3, r0
 8015270:	b2db      	uxtb	r3, r3
 8015272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015276:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015278:	2300      	movs	r3, #0
 801527a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801527c:	7efb      	ldrb	r3, [r7, #27]
 801527e:	f003 0308 	and.w	r3, r3, #8
 8015282:	2b00      	cmp	r3, #0
 8015284:	d007      	beq.n	8015296 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015286:	7efb      	ldrb	r3, [r7, #27]
 8015288:	f023 0308 	bic.w	r3, r3, #8
 801528c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801528e:	7ebb      	ldrb	r3, [r7, #26]
 8015290:	f043 0308 	orr.w	r3, r3, #8
 8015294:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015296:	7efb      	ldrb	r3, [r7, #27]
 8015298:	f003 0301 	and.w	r3, r3, #1
 801529c:	2b00      	cmp	r3, #0
 801529e:	d007      	beq.n	80152b0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80152a0:	7efb      	ldrb	r3, [r7, #27]
 80152a2:	f023 0301 	bic.w	r3, r3, #1
 80152a6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80152a8:	7ebb      	ldrb	r3, [r7, #26]
 80152aa:	f043 0301 	orr.w	r3, r3, #1
 80152ae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	68db      	ldr	r3, [r3, #12]
 80152b4:	685b      	ldr	r3, [r3, #4]
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7fa f9a7 	bl	800f60a <lwip_htonl>
 80152bc:	4602      	mov	r2, r0
 80152be:	887b      	ldrh	r3, [r7, #2]
 80152c0:	18d1      	adds	r1, r2, r3
 80152c2:	7eba      	ldrb	r2, [r7, #26]
 80152c4:	7bfb      	ldrb	r3, [r7, #15]
 80152c6:	9300      	str	r3, [sp, #0]
 80152c8:	460b      	mov	r3, r1
 80152ca:	6939      	ldr	r1, [r7, #16]
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f7ff fea7 	bl	8015020 <tcp_create_segment>
 80152d2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80152d4:	69fb      	ldr	r3, [r7, #28]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d063      	beq.n	80153a2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	4618      	mov	r0, r3
 80152e0:	f7fb fdc4 	bl	8010e6c <pbuf_clen>
 80152e4:	4603      	mov	r3, r0
 80152e6:	461a      	mov	r2, r3
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152ee:	1a9b      	subs	r3, r3, r2
 80152f0:	b29a      	uxth	r2, r3
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	6858      	ldr	r0, [r3, #4]
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	891a      	ldrh	r2, [r3, #8]
 8015302:	89bb      	ldrh	r3, [r7, #12]
 8015304:	1ad3      	subs	r3, r2, r3
 8015306:	b29b      	uxth	r3, r3
 8015308:	4619      	mov	r1, r3
 801530a:	f7fb fb9b 	bl	8010a44 <pbuf_realloc>
  useg->len -= remainder;
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	891a      	ldrh	r2, [r3, #8]
 8015312:	89bb      	ldrh	r3, [r7, #12]
 8015314:	1ad3      	subs	r3, r2, r3
 8015316:	b29a      	uxth	r2, r3
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801531c:	697b      	ldr	r3, [r7, #20]
 801531e:	68db      	ldr	r3, [r3, #12]
 8015320:	899b      	ldrh	r3, [r3, #12]
 8015322:	b29c      	uxth	r4, r3
 8015324:	7efb      	ldrb	r3, [r7, #27]
 8015326:	b29b      	uxth	r3, r3
 8015328:	4618      	mov	r0, r3
 801532a:	f7fa f959 	bl	800f5e0 <lwip_htons>
 801532e:	4603      	mov	r3, r0
 8015330:	461a      	mov	r2, r3
 8015332:	697b      	ldr	r3, [r7, #20]
 8015334:	68db      	ldr	r3, [r3, #12]
 8015336:	4322      	orrs	r2, r4
 8015338:	b292      	uxth	r2, r2
 801533a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	4618      	mov	r0, r3
 8015342:	f7fb fd93 	bl	8010e6c <pbuf_clen>
 8015346:	4603      	mov	r3, r0
 8015348:	461a      	mov	r2, r3
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015350:	4413      	add	r3, r2
 8015352:	b29a      	uxth	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801535a:	69fb      	ldr	r3, [r7, #28]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	4618      	mov	r0, r3
 8015360:	f7fb fd84 	bl	8010e6c <pbuf_clen>
 8015364:	4603      	mov	r3, r0
 8015366:	461a      	mov	r2, r3
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801536e:	4413      	add	r3, r2
 8015370:	b29a      	uxth	r2, r3
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	681a      	ldr	r2, [r3, #0]
 801537c:	69fb      	ldr	r3, [r7, #28]
 801537e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015380:	697b      	ldr	r3, [r7, #20]
 8015382:	69fa      	ldr	r2, [r7, #28]
 8015384:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015386:	69fb      	ldr	r3, [r7, #28]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d103      	bne.n	8015396 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2200      	movs	r2, #0
 8015392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015396:	2300      	movs	r3, #0
 8015398:	e016      	b.n	80153c8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801539a:	bf00      	nop
 801539c:	e002      	b.n	80153a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801539e:	bf00      	nop
 80153a0:	e000      	b.n	80153a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80153a2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80153a4:	69fb      	ldr	r3, [r7, #28]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d006      	beq.n	80153b8 <tcp_split_unsent_seg+0x25c>
 80153aa:	4b09      	ldr	r3, [pc, #36]	; (80153d0 <tcp_split_unsent_seg+0x274>)
 80153ac:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80153b0:	490d      	ldr	r1, [pc, #52]	; (80153e8 <tcp_split_unsent_seg+0x28c>)
 80153b2:	4809      	ldr	r0, [pc, #36]	; (80153d8 <tcp_split_unsent_seg+0x27c>)
 80153b4:	f007 fcd4 	bl	801cd60 <iprintf>
  if (p != NULL) {
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d002      	beq.n	80153c4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80153be:	6938      	ldr	r0, [r7, #16]
 80153c0:	f7fb fcc6 	bl	8010d50 <pbuf_free>
  }

  return ERR_MEM;
 80153c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3724      	adds	r7, #36	; 0x24
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd90      	pop	{r4, r7, pc}
 80153d0:	0801f898 	.word	0x0801f898
 80153d4:	0801fc2c 	.word	0x0801fc2c
 80153d8:	0801f8ec 	.word	0x0801f8ec
 80153dc:	0801fc50 	.word	0x0801fc50
 80153e0:	0801fc74 	.word	0x0801fc74
 80153e4:	0801fc84 	.word	0x0801fc84
 80153e8:	0801fc94 	.word	0x0801fc94

080153ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80153ec:	b590      	push	{r4, r7, lr}
 80153ee:	b085      	sub	sp, #20
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d106      	bne.n	8015408 <tcp_send_fin+0x1c>
 80153fa:	4b21      	ldr	r3, [pc, #132]	; (8015480 <tcp_send_fin+0x94>)
 80153fc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015400:	4920      	ldr	r1, [pc, #128]	; (8015484 <tcp_send_fin+0x98>)
 8015402:	4821      	ldr	r0, [pc, #132]	; (8015488 <tcp_send_fin+0x9c>)
 8015404:	f007 fcac 	bl	801cd60 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801540c:	2b00      	cmp	r3, #0
 801540e:	d02e      	beq.n	801546e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015414:	60fb      	str	r3, [r7, #12]
 8015416:	e002      	b.n	801541e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d1f8      	bne.n	8015418 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	68db      	ldr	r3, [r3, #12]
 801542a:	899b      	ldrh	r3, [r3, #12]
 801542c:	b29b      	uxth	r3, r3
 801542e:	4618      	mov	r0, r3
 8015430:	f7fa f8d6 	bl	800f5e0 <lwip_htons>
 8015434:	4603      	mov	r3, r0
 8015436:	b2db      	uxtb	r3, r3
 8015438:	f003 0307 	and.w	r3, r3, #7
 801543c:	2b00      	cmp	r3, #0
 801543e:	d116      	bne.n	801546e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	899b      	ldrh	r3, [r3, #12]
 8015446:	b29c      	uxth	r4, r3
 8015448:	2001      	movs	r0, #1
 801544a:	f7fa f8c9 	bl	800f5e0 <lwip_htons>
 801544e:	4603      	mov	r3, r0
 8015450:	461a      	mov	r2, r3
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	68db      	ldr	r3, [r3, #12]
 8015456:	4322      	orrs	r2, r4
 8015458:	b292      	uxth	r2, r2
 801545a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	8b5b      	ldrh	r3, [r3, #26]
 8015460:	f043 0320 	orr.w	r3, r3, #32
 8015464:	b29a      	uxth	r2, r3
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801546a:	2300      	movs	r3, #0
 801546c:	e004      	b.n	8015478 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801546e:	2101      	movs	r1, #1
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f000 f80b 	bl	801548c <tcp_enqueue_flags>
 8015476:	4603      	mov	r3, r0
}
 8015478:	4618      	mov	r0, r3
 801547a:	3714      	adds	r7, #20
 801547c:	46bd      	mov	sp, r7
 801547e:	bd90      	pop	{r4, r7, pc}
 8015480:	0801f898 	.word	0x0801f898
 8015484:	0801fca0 	.word	0x0801fca0
 8015488:	0801f8ec 	.word	0x0801f8ec

0801548c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b08a      	sub	sp, #40	; 0x28
 8015490:	af02      	add	r7, sp, #8
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	460b      	mov	r3, r1
 8015496:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015498:	2300      	movs	r3, #0
 801549a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801549c:	2300      	movs	r3, #0
 801549e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80154a0:	78fb      	ldrb	r3, [r7, #3]
 80154a2:	f003 0303 	and.w	r3, r3, #3
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d106      	bne.n	80154b8 <tcp_enqueue_flags+0x2c>
 80154aa:	4b67      	ldr	r3, [pc, #412]	; (8015648 <tcp_enqueue_flags+0x1bc>)
 80154ac:	f240 4211 	movw	r2, #1041	; 0x411
 80154b0:	4966      	ldr	r1, [pc, #408]	; (801564c <tcp_enqueue_flags+0x1c0>)
 80154b2:	4867      	ldr	r0, [pc, #412]	; (8015650 <tcp_enqueue_flags+0x1c4>)
 80154b4:	f007 fc54 	bl	801cd60 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d106      	bne.n	80154cc <tcp_enqueue_flags+0x40>
 80154be:	4b62      	ldr	r3, [pc, #392]	; (8015648 <tcp_enqueue_flags+0x1bc>)
 80154c0:	f240 4213 	movw	r2, #1043	; 0x413
 80154c4:	4963      	ldr	r1, [pc, #396]	; (8015654 <tcp_enqueue_flags+0x1c8>)
 80154c6:	4862      	ldr	r0, [pc, #392]	; (8015650 <tcp_enqueue_flags+0x1c4>)
 80154c8:	f007 fc4a 	bl	801cd60 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80154cc:	78fb      	ldrb	r3, [r7, #3]
 80154ce:	f003 0302 	and.w	r3, r3, #2
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d001      	beq.n	80154da <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80154d6:	2301      	movs	r3, #1
 80154d8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80154da:	7ffb      	ldrb	r3, [r7, #31]
 80154dc:	009b      	lsls	r3, r3, #2
 80154de:	b2db      	uxtb	r3, r3
 80154e0:	f003 0304 	and.w	r3, r3, #4
 80154e4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80154e6:	7dfb      	ldrb	r3, [r7, #23]
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154ee:	4619      	mov	r1, r3
 80154f0:	2036      	movs	r0, #54	; 0x36
 80154f2:	f7fb f949 	bl	8010788 <pbuf_alloc>
 80154f6:	6138      	str	r0, [r7, #16]
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d109      	bne.n	8015512 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	8b5b      	ldrh	r3, [r3, #26]
 8015502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015506:	b29a      	uxth	r2, r3
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801550c:	f04f 33ff 	mov.w	r3, #4294967295
 8015510:	e095      	b.n	801563e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	895a      	ldrh	r2, [r3, #10]
 8015516:	7dfb      	ldrb	r3, [r7, #23]
 8015518:	b29b      	uxth	r3, r3
 801551a:	429a      	cmp	r2, r3
 801551c:	d206      	bcs.n	801552c <tcp_enqueue_flags+0xa0>
 801551e:	4b4a      	ldr	r3, [pc, #296]	; (8015648 <tcp_enqueue_flags+0x1bc>)
 8015520:	f240 4239 	movw	r2, #1081	; 0x439
 8015524:	494c      	ldr	r1, [pc, #304]	; (8015658 <tcp_enqueue_flags+0x1cc>)
 8015526:	484a      	ldr	r0, [pc, #296]	; (8015650 <tcp_enqueue_flags+0x1c4>)
 8015528:	f007 fc1a 	bl	801cd60 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015530:	78fa      	ldrb	r2, [r7, #3]
 8015532:	7ffb      	ldrb	r3, [r7, #31]
 8015534:	9300      	str	r3, [sp, #0]
 8015536:	460b      	mov	r3, r1
 8015538:	6939      	ldr	r1, [r7, #16]
 801553a:	6878      	ldr	r0, [r7, #4]
 801553c:	f7ff fd70 	bl	8015020 <tcp_create_segment>
 8015540:	60f8      	str	r0, [r7, #12]
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d109      	bne.n	801555c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	8b5b      	ldrh	r3, [r3, #26]
 801554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015550:	b29a      	uxth	r2, r3
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015556:	f04f 33ff 	mov.w	r3, #4294967295
 801555a:	e070      	b.n	801563e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	68db      	ldr	r3, [r3, #12]
 8015560:	f003 0303 	and.w	r3, r3, #3
 8015564:	2b00      	cmp	r3, #0
 8015566:	d006      	beq.n	8015576 <tcp_enqueue_flags+0xea>
 8015568:	4b37      	ldr	r3, [pc, #220]	; (8015648 <tcp_enqueue_flags+0x1bc>)
 801556a:	f240 4242 	movw	r2, #1090	; 0x442
 801556e:	493b      	ldr	r1, [pc, #236]	; (801565c <tcp_enqueue_flags+0x1d0>)
 8015570:	4837      	ldr	r0, [pc, #220]	; (8015650 <tcp_enqueue_flags+0x1c4>)
 8015572:	f007 fbf5 	bl	801cd60 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	891b      	ldrh	r3, [r3, #8]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d006      	beq.n	801558c <tcp_enqueue_flags+0x100>
 801557e:	4b32      	ldr	r3, [pc, #200]	; (8015648 <tcp_enqueue_flags+0x1bc>)
 8015580:	f240 4243 	movw	r2, #1091	; 0x443
 8015584:	4936      	ldr	r1, [pc, #216]	; (8015660 <tcp_enqueue_flags+0x1d4>)
 8015586:	4832      	ldr	r0, [pc, #200]	; (8015650 <tcp_enqueue_flags+0x1c4>)
 8015588:	f007 fbea 	bl	801cd60 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015590:	2b00      	cmp	r3, #0
 8015592:	d103      	bne.n	801559c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	68fa      	ldr	r2, [r7, #12]
 8015598:	66da      	str	r2, [r3, #108]	; 0x6c
 801559a:	e00d      	b.n	80155b8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155a0:	61bb      	str	r3, [r7, #24]
 80155a2:	e002      	b.n	80155aa <tcp_enqueue_flags+0x11e>
 80155a4:	69bb      	ldr	r3, [r7, #24]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	61bb      	str	r3, [r7, #24]
 80155aa:	69bb      	ldr	r3, [r7, #24]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d1f8      	bne.n	80155a4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80155b2:	69bb      	ldr	r3, [r7, #24]
 80155b4:	68fa      	ldr	r2, [r7, #12]
 80155b6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	2200      	movs	r2, #0
 80155bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80155c0:	78fb      	ldrb	r3, [r7, #3]
 80155c2:	f003 0302 	and.w	r3, r3, #2
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d104      	bne.n	80155d4 <tcp_enqueue_flags+0x148>
 80155ca:	78fb      	ldrb	r3, [r7, #3]
 80155cc:	f003 0301 	and.w	r3, r3, #1
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d004      	beq.n	80155de <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155d8:	1c5a      	adds	r2, r3, #1
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80155de:	78fb      	ldrb	r3, [r7, #3]
 80155e0:	f003 0301 	and.w	r3, r3, #1
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d006      	beq.n	80155f6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	8b5b      	ldrh	r3, [r3, #26]
 80155ec:	f043 0320 	orr.w	r3, r3, #32
 80155f0:	b29a      	uxth	r2, r3
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	685b      	ldr	r3, [r3, #4]
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7fb fc36 	bl	8010e6c <pbuf_clen>
 8015600:	4603      	mov	r3, r0
 8015602:	461a      	mov	r2, r3
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801560a:	4413      	add	r3, r2
 801560c:	b29a      	uxth	r2, r3
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801561a:	2b00      	cmp	r3, #0
 801561c:	d00e      	beq.n	801563c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015622:	2b00      	cmp	r3, #0
 8015624:	d10a      	bne.n	801563c <tcp_enqueue_flags+0x1b0>
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801562a:	2b00      	cmp	r3, #0
 801562c:	d106      	bne.n	801563c <tcp_enqueue_flags+0x1b0>
 801562e:	4b06      	ldr	r3, [pc, #24]	; (8015648 <tcp_enqueue_flags+0x1bc>)
 8015630:	f240 4265 	movw	r2, #1125	; 0x465
 8015634:	490b      	ldr	r1, [pc, #44]	; (8015664 <tcp_enqueue_flags+0x1d8>)
 8015636:	4806      	ldr	r0, [pc, #24]	; (8015650 <tcp_enqueue_flags+0x1c4>)
 8015638:	f007 fb92 	bl	801cd60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801563c:	2300      	movs	r3, #0
}
 801563e:	4618      	mov	r0, r3
 8015640:	3720      	adds	r7, #32
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop
 8015648:	0801f898 	.word	0x0801f898
 801564c:	0801fcbc 	.word	0x0801fcbc
 8015650:	0801f8ec 	.word	0x0801f8ec
 8015654:	0801fd14 	.word	0x0801fd14
 8015658:	0801fd34 	.word	0x0801fd34
 801565c:	0801fd70 	.word	0x0801fd70
 8015660:	0801fd88 	.word	0x0801fd88
 8015664:	0801fdb4 	.word	0x0801fdb4

08015668 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015668:	b5b0      	push	{r4, r5, r7, lr}
 801566a:	b08a      	sub	sp, #40	; 0x28
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d106      	bne.n	8015684 <tcp_output+0x1c>
 8015676:	4b9e      	ldr	r3, [pc, #632]	; (80158f0 <tcp_output+0x288>)
 8015678:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801567c:	499d      	ldr	r1, [pc, #628]	; (80158f4 <tcp_output+0x28c>)
 801567e:	489e      	ldr	r0, [pc, #632]	; (80158f8 <tcp_output+0x290>)
 8015680:	f007 fb6e 	bl	801cd60 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	7d1b      	ldrb	r3, [r3, #20]
 8015688:	2b01      	cmp	r3, #1
 801568a:	d106      	bne.n	801569a <tcp_output+0x32>
 801568c:	4b98      	ldr	r3, [pc, #608]	; (80158f0 <tcp_output+0x288>)
 801568e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015692:	499a      	ldr	r1, [pc, #616]	; (80158fc <tcp_output+0x294>)
 8015694:	4898      	ldr	r0, [pc, #608]	; (80158f8 <tcp_output+0x290>)
 8015696:	f007 fb63 	bl	801cd60 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801569a:	4b99      	ldr	r3, [pc, #612]	; (8015900 <tcp_output+0x298>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d101      	bne.n	80156a8 <tcp_output+0x40>
    return ERR_OK;
 80156a4:	2300      	movs	r3, #0
 80156a6:	e1ce      	b.n	8015a46 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80156b4:	4293      	cmp	r3, r2
 80156b6:	bf28      	it	cs
 80156b8:	4613      	movcs	r3, r2
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80156c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d10b      	bne.n	80156e2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	8b5b      	ldrh	r3, [r3, #26]
 80156ce:	f003 0302 	and.w	r3, r3, #2
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	f000 81aa 	beq.w	8015a2c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f000 fdcb 	bl	8016274 <tcp_send_empty_ack>
 80156de:	4603      	mov	r3, r0
 80156e0:	e1b1      	b.n	8015a46 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80156e2:	6879      	ldr	r1, [r7, #4]
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	3304      	adds	r3, #4
 80156e8:	461a      	mov	r2, r3
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f7ff fc7c 	bl	8014fe8 <tcp_route>
 80156f0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d102      	bne.n	80156fe <tcp_output+0x96>
    return ERR_RTE;
 80156f8:	f06f 0303 	mvn.w	r3, #3
 80156fc:	e1a3      	b.n	8015a46 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d003      	beq.n	801570c <tcp_output+0xa4>
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d111      	bne.n	8015730 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d002      	beq.n	8015718 <tcp_output+0xb0>
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	3304      	adds	r3, #4
 8015716:	e000      	b.n	801571a <tcp_output+0xb2>
 8015718:	2300      	movs	r3, #0
 801571a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801571c:	693b      	ldr	r3, [r7, #16]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d102      	bne.n	8015728 <tcp_output+0xc0>
      return ERR_RTE;
 8015722:	f06f 0303 	mvn.w	r3, #3
 8015726:	e18e      	b.n	8015a46 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015728:	693b      	ldr	r3, [r7, #16]
 801572a:	681a      	ldr	r2, [r3, #0]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015732:	68db      	ldr	r3, [r3, #12]
 8015734:	685b      	ldr	r3, [r3, #4]
 8015736:	4618      	mov	r0, r3
 8015738:	f7f9 ff67 	bl	800f60a <lwip_htonl>
 801573c:	4602      	mov	r2, r0
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015742:	1ad3      	subs	r3, r2, r3
 8015744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015746:	8912      	ldrh	r2, [r2, #8]
 8015748:	4413      	add	r3, r2
 801574a:	69ba      	ldr	r2, [r7, #24]
 801574c:	429a      	cmp	r2, r3
 801574e:	d227      	bcs.n	80157a0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015756:	461a      	mov	r2, r3
 8015758:	69bb      	ldr	r3, [r7, #24]
 801575a:	4293      	cmp	r3, r2
 801575c:	d114      	bne.n	8015788 <tcp_output+0x120>
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015762:	2b00      	cmp	r3, #0
 8015764:	d110      	bne.n	8015788 <tcp_output+0x120>
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801576c:	2b00      	cmp	r3, #0
 801576e:	d10b      	bne.n	8015788 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2200      	movs	r2, #0
 8015774:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2201      	movs	r2, #1
 801577c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2200      	movs	r2, #0
 8015784:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	8b5b      	ldrh	r3, [r3, #26]
 801578c:	f003 0302 	and.w	r3, r3, #2
 8015790:	2b00      	cmp	r3, #0
 8015792:	f000 814d 	beq.w	8015a30 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	f000 fd6c 	bl	8016274 <tcp_send_empty_ack>
 801579c:	4603      	mov	r3, r0
 801579e:	e152      	b.n	8015a46 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2200      	movs	r2, #0
 80157a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157ac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80157ae:	6a3b      	ldr	r3, [r7, #32]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	f000 811c 	beq.w	80159ee <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80157b6:	e002      	b.n	80157be <tcp_output+0x156>
 80157b8:	6a3b      	ldr	r3, [r7, #32]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	623b      	str	r3, [r7, #32]
 80157be:	6a3b      	ldr	r3, [r7, #32]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d1f8      	bne.n	80157b8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80157c6:	e112      	b.n	80159ee <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80157c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	899b      	ldrh	r3, [r3, #12]
 80157ce:	b29b      	uxth	r3, r3
 80157d0:	4618      	mov	r0, r3
 80157d2:	f7f9 ff05 	bl	800f5e0 <lwip_htons>
 80157d6:	4603      	mov	r3, r0
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	f003 0304 	and.w	r3, r3, #4
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d006      	beq.n	80157f0 <tcp_output+0x188>
 80157e2:	4b43      	ldr	r3, [pc, #268]	; (80158f0 <tcp_output+0x288>)
 80157e4:	f240 5236 	movw	r2, #1334	; 0x536
 80157e8:	4946      	ldr	r1, [pc, #280]	; (8015904 <tcp_output+0x29c>)
 80157ea:	4843      	ldr	r0, [pc, #268]	; (80158f8 <tcp_output+0x290>)
 80157ec:	f007 fab8 	bl	801cd60 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d01f      	beq.n	8015838 <tcp_output+0x1d0>
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	8b5b      	ldrh	r3, [r3, #26]
 80157fc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015800:	2b00      	cmp	r3, #0
 8015802:	d119      	bne.n	8015838 <tcp_output+0x1d0>
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015808:	2b00      	cmp	r3, #0
 801580a:	d00b      	beq.n	8015824 <tcp_output+0x1bc>
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d110      	bne.n	8015838 <tcp_output+0x1d0>
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801581a:	891a      	ldrh	r2, [r3, #8]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015820:	429a      	cmp	r2, r3
 8015822:	d209      	bcs.n	8015838 <tcp_output+0x1d0>
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801582a:	2b00      	cmp	r3, #0
 801582c:	d004      	beq.n	8015838 <tcp_output+0x1d0>
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015834:	2b08      	cmp	r3, #8
 8015836:	d901      	bls.n	801583c <tcp_output+0x1d4>
 8015838:	2301      	movs	r3, #1
 801583a:	e000      	b.n	801583e <tcp_output+0x1d6>
 801583c:	2300      	movs	r3, #0
 801583e:	2b00      	cmp	r3, #0
 8015840:	d106      	bne.n	8015850 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	8b5b      	ldrh	r3, [r3, #26]
 8015846:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801584a:	2b00      	cmp	r3, #0
 801584c:	f000 80e4 	beq.w	8015a18 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	7d1b      	ldrb	r3, [r3, #20]
 8015854:	2b02      	cmp	r3, #2
 8015856:	d00d      	beq.n	8015874 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585a:	68db      	ldr	r3, [r3, #12]
 801585c:	899b      	ldrh	r3, [r3, #12]
 801585e:	b29c      	uxth	r4, r3
 8015860:	2010      	movs	r0, #16
 8015862:	f7f9 febd 	bl	800f5e0 <lwip_htons>
 8015866:	4603      	mov	r3, r0
 8015868:	461a      	mov	r2, r3
 801586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801586c:	68db      	ldr	r3, [r3, #12]
 801586e:	4322      	orrs	r2, r4
 8015870:	b292      	uxth	r2, r2
 8015872:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015874:	697a      	ldr	r2, [r7, #20]
 8015876:	6879      	ldr	r1, [r7, #4]
 8015878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801587a:	f000 f909 	bl	8015a90 <tcp_output_segment>
 801587e:	4603      	mov	r3, r0
 8015880:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d009      	beq.n	801589e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	8b5b      	ldrh	r3, [r3, #26]
 801588e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015892:	b29a      	uxth	r2, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	835a      	strh	r2, [r3, #26]
      return err;
 8015898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801589c:	e0d3      	b.n	8015a46 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a0:	681a      	ldr	r2, [r3, #0]
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	7d1b      	ldrb	r3, [r3, #20]
 80158aa:	2b02      	cmp	r3, #2
 80158ac:	d006      	beq.n	80158bc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	8b5b      	ldrh	r3, [r3, #26]
 80158b2:	f023 0303 	bic.w	r3, r3, #3
 80158b6:	b29a      	uxth	r2, r3
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80158bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158be:	68db      	ldr	r3, [r3, #12]
 80158c0:	685b      	ldr	r3, [r3, #4]
 80158c2:	4618      	mov	r0, r3
 80158c4:	f7f9 fea1 	bl	800f60a <lwip_htonl>
 80158c8:	4604      	mov	r4, r0
 80158ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158cc:	891b      	ldrh	r3, [r3, #8]
 80158ce:	461d      	mov	r5, r3
 80158d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d2:	68db      	ldr	r3, [r3, #12]
 80158d4:	899b      	ldrh	r3, [r3, #12]
 80158d6:	b29b      	uxth	r3, r3
 80158d8:	4618      	mov	r0, r3
 80158da:	f7f9 fe81 	bl	800f5e0 <lwip_htons>
 80158de:	4603      	mov	r3, r0
 80158e0:	b2db      	uxtb	r3, r3
 80158e2:	f003 0303 	and.w	r3, r3, #3
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d00e      	beq.n	8015908 <tcp_output+0x2a0>
 80158ea:	2301      	movs	r3, #1
 80158ec:	e00d      	b.n	801590a <tcp_output+0x2a2>
 80158ee:	bf00      	nop
 80158f0:	0801f898 	.word	0x0801f898
 80158f4:	0801fddc 	.word	0x0801fddc
 80158f8:	0801f8ec 	.word	0x0801f8ec
 80158fc:	0801fdf4 	.word	0x0801fdf4
 8015900:	20013a08 	.word	0x20013a08
 8015904:	0801fe1c 	.word	0x0801fe1c
 8015908:	2300      	movs	r3, #0
 801590a:	442b      	add	r3, r5
 801590c:	4423      	add	r3, r4
 801590e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	1ad3      	subs	r3, r2, r3
 8015918:	2b00      	cmp	r3, #0
 801591a:	da02      	bge.n	8015922 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	68ba      	ldr	r2, [r7, #8]
 8015920:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015924:	891b      	ldrh	r3, [r3, #8]
 8015926:	461c      	mov	r4, r3
 8015928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	899b      	ldrh	r3, [r3, #12]
 801592e:	b29b      	uxth	r3, r3
 8015930:	4618      	mov	r0, r3
 8015932:	f7f9 fe55 	bl	800f5e0 <lwip_htons>
 8015936:	4603      	mov	r3, r0
 8015938:	b2db      	uxtb	r3, r3
 801593a:	f003 0303 	and.w	r3, r3, #3
 801593e:	2b00      	cmp	r3, #0
 8015940:	d001      	beq.n	8015946 <tcp_output+0x2de>
 8015942:	2301      	movs	r3, #1
 8015944:	e000      	b.n	8015948 <tcp_output+0x2e0>
 8015946:	2300      	movs	r3, #0
 8015948:	4423      	add	r3, r4
 801594a:	2b00      	cmp	r3, #0
 801594c:	d049      	beq.n	80159e2 <tcp_output+0x37a>
      seg->next = NULL;
 801594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015950:	2200      	movs	r2, #0
 8015952:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015958:	2b00      	cmp	r3, #0
 801595a:	d105      	bne.n	8015968 <tcp_output+0x300>
        pcb->unacked = seg;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015960:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015964:	623b      	str	r3, [r7, #32]
 8015966:	e03f      	b.n	80159e8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801596a:	68db      	ldr	r3, [r3, #12]
 801596c:	685b      	ldr	r3, [r3, #4]
 801596e:	4618      	mov	r0, r3
 8015970:	f7f9 fe4b 	bl	800f60a <lwip_htonl>
 8015974:	4604      	mov	r4, r0
 8015976:	6a3b      	ldr	r3, [r7, #32]
 8015978:	68db      	ldr	r3, [r3, #12]
 801597a:	685b      	ldr	r3, [r3, #4]
 801597c:	4618      	mov	r0, r3
 801597e:	f7f9 fe44 	bl	800f60a <lwip_htonl>
 8015982:	4603      	mov	r3, r0
 8015984:	1ae3      	subs	r3, r4, r3
 8015986:	2b00      	cmp	r3, #0
 8015988:	da24      	bge.n	80159d4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	3370      	adds	r3, #112	; 0x70
 801598e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015990:	e002      	b.n	8015998 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015992:	69fb      	ldr	r3, [r7, #28]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d011      	beq.n	80159c4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80159a0:	69fb      	ldr	r3, [r7, #28]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	4618      	mov	r0, r3
 80159aa:	f7f9 fe2e 	bl	800f60a <lwip_htonl>
 80159ae:	4604      	mov	r4, r0
 80159b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b2:	68db      	ldr	r3, [r3, #12]
 80159b4:	685b      	ldr	r3, [r3, #4]
 80159b6:	4618      	mov	r0, r3
 80159b8:	f7f9 fe27 	bl	800f60a <lwip_htonl>
 80159bc:	4603      	mov	r3, r0
 80159be:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	dbe6      	blt.n	8015992 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80159c4:	69fb      	ldr	r3, [r7, #28]
 80159c6:	681a      	ldr	r2, [r3, #0]
 80159c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80159cc:	69fb      	ldr	r3, [r7, #28]
 80159ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159d0:	601a      	str	r2, [r3, #0]
 80159d2:	e009      	b.n	80159e8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80159d4:	6a3b      	ldr	r3, [r7, #32]
 80159d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159d8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80159da:	6a3b      	ldr	r3, [r7, #32]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	623b      	str	r3, [r7, #32]
 80159e0:	e002      	b.n	80159e8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80159e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159e4:	f7fc fc43 	bl	801226e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80159ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d012      	beq.n	8015a1a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80159f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f6:	68db      	ldr	r3, [r3, #12]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7f9 fe05 	bl	800f60a <lwip_htonl>
 8015a00:	4602      	mov	r2, r0
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a0a:	8912      	ldrh	r2, [r2, #8]
 8015a0c:	4413      	add	r3, r2
  while (seg != NULL &&
 8015a0e:	69ba      	ldr	r2, [r7, #24]
 8015a10:	429a      	cmp	r2, r3
 8015a12:	f4bf aed9 	bcs.w	80157c8 <tcp_output+0x160>
 8015a16:	e000      	b.n	8015a1a <tcp_output+0x3b2>
      break;
 8015a18:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d108      	bne.n	8015a34 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	2200      	movs	r2, #0
 8015a26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015a2a:	e004      	b.n	8015a36 <tcp_output+0x3ce>
    goto output_done;
 8015a2c:	bf00      	nop
 8015a2e:	e002      	b.n	8015a36 <tcp_output+0x3ce>
    goto output_done;
 8015a30:	bf00      	nop
 8015a32:	e000      	b.n	8015a36 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015a34:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	8b5b      	ldrh	r3, [r3, #26]
 8015a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015a3e:	b29a      	uxth	r2, r3
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015a44:	2300      	movs	r3, #0
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3728      	adds	r7, #40	; 0x28
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a4e:	bf00      	nop

08015a50 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b082      	sub	sp, #8
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d106      	bne.n	8015a6c <tcp_output_segment_busy+0x1c>
 8015a5e:	4b09      	ldr	r3, [pc, #36]	; (8015a84 <tcp_output_segment_busy+0x34>)
 8015a60:	f240 529a 	movw	r2, #1434	; 0x59a
 8015a64:	4908      	ldr	r1, [pc, #32]	; (8015a88 <tcp_output_segment_busy+0x38>)
 8015a66:	4809      	ldr	r0, [pc, #36]	; (8015a8c <tcp_output_segment_busy+0x3c>)
 8015a68:	f007 f97a 	bl	801cd60 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	685b      	ldr	r3, [r3, #4]
 8015a70:	7b9b      	ldrb	r3, [r3, #14]
 8015a72:	2b01      	cmp	r3, #1
 8015a74:	d001      	beq.n	8015a7a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015a76:	2301      	movs	r3, #1
 8015a78:	e000      	b.n	8015a7c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015a7a:	2300      	movs	r3, #0
}
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3708      	adds	r7, #8
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	0801f898 	.word	0x0801f898
 8015a88:	0801fe34 	.word	0x0801fe34
 8015a8c:	0801f8ec 	.word	0x0801f8ec

08015a90 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015a90:	b5b0      	push	{r4, r5, r7, lr}
 8015a92:	b08c      	sub	sp, #48	; 0x30
 8015a94:	af04      	add	r7, sp, #16
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d106      	bne.n	8015ab0 <tcp_output_segment+0x20>
 8015aa2:	4b63      	ldr	r3, [pc, #396]	; (8015c30 <tcp_output_segment+0x1a0>)
 8015aa4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015aa8:	4962      	ldr	r1, [pc, #392]	; (8015c34 <tcp_output_segment+0x1a4>)
 8015aaa:	4863      	ldr	r0, [pc, #396]	; (8015c38 <tcp_output_segment+0x1a8>)
 8015aac:	f007 f958 	bl	801cd60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d106      	bne.n	8015ac4 <tcp_output_segment+0x34>
 8015ab6:	4b5e      	ldr	r3, [pc, #376]	; (8015c30 <tcp_output_segment+0x1a0>)
 8015ab8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015abc:	495f      	ldr	r1, [pc, #380]	; (8015c3c <tcp_output_segment+0x1ac>)
 8015abe:	485e      	ldr	r0, [pc, #376]	; (8015c38 <tcp_output_segment+0x1a8>)
 8015ac0:	f007 f94e 	bl	801cd60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d106      	bne.n	8015ad8 <tcp_output_segment+0x48>
 8015aca:	4b59      	ldr	r3, [pc, #356]	; (8015c30 <tcp_output_segment+0x1a0>)
 8015acc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015ad0:	495b      	ldr	r1, [pc, #364]	; (8015c40 <tcp_output_segment+0x1b0>)
 8015ad2:	4859      	ldr	r0, [pc, #356]	; (8015c38 <tcp_output_segment+0x1a8>)
 8015ad4:	f007 f944 	bl	801cd60 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015ad8:	68f8      	ldr	r0, [r7, #12]
 8015ada:	f7ff ffb9 	bl	8015a50 <tcp_output_segment_busy>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d001      	beq.n	8015ae8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	e09f      	b.n	8015c28 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	68dc      	ldr	r4, [r3, #12]
 8015af0:	4610      	mov	r0, r2
 8015af2:	f7f9 fd8a 	bl	800f60a <lwip_htonl>
 8015af6:	4603      	mov	r3, r0
 8015af8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	68dc      	ldr	r4, [r3, #12]
 8015b02:	4610      	mov	r0, r2
 8015b04:	f7f9 fd6c 	bl	800f5e0 <lwip_htons>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b10:	68ba      	ldr	r2, [r7, #8]
 8015b12:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015b14:	441a      	add	r2, r3
 8015b16:	68bb      	ldr	r3, [r7, #8]
 8015b18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	68db      	ldr	r3, [r3, #12]
 8015b1e:	3314      	adds	r3, #20
 8015b20:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	7a9b      	ldrb	r3, [r3, #10]
 8015b26:	f003 0301 	and.w	r3, r3, #1
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d015      	beq.n	8015b5a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	3304      	adds	r3, #4
 8015b32:	461a      	mov	r2, r3
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015b3a:	f7fc fe8f 	bl	801285c <tcp_eff_send_mss_netif>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015b42:	8b7b      	ldrh	r3, [r7, #26]
 8015b44:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7f9 fd5e 	bl	800f60a <lwip_htonl>
 8015b4e:	4602      	mov	r2, r0
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015b54:	69fb      	ldr	r3, [r7, #28]
 8015b56:	3304      	adds	r3, #4
 8015b58:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	da02      	bge.n	8015b6a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	2200      	movs	r2, #0
 8015b68:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015b6a:	68bb      	ldr	r3, [r7, #8]
 8015b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d10c      	bne.n	8015b8c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015b72:	4b34      	ldr	r3, [pc, #208]	; (8015c44 <tcp_output_segment+0x1b4>)
 8015b74:	681a      	ldr	r2, [r3, #0]
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	68db      	ldr	r3, [r3, #12]
 8015b7e:	685b      	ldr	r3, [r3, #4]
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7f9 fd42 	bl	800f60a <lwip_htonl>
 8015b86:	4602      	mov	r2, r0
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	68da      	ldr	r2, [r3, #12]
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	685b      	ldr	r3, [r3, #4]
 8015b94:	685b      	ldr	r3, [r3, #4]
 8015b96:	1ad3      	subs	r3, r2, r3
 8015b98:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	8959      	ldrh	r1, [r3, #10]
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	685b      	ldr	r3, [r3, #4]
 8015ba4:	8b3a      	ldrh	r2, [r7, #24]
 8015ba6:	1a8a      	subs	r2, r1, r2
 8015ba8:	b292      	uxth	r2, r2
 8015baa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	8919      	ldrh	r1, [r3, #8]
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	685b      	ldr	r3, [r3, #4]
 8015bb6:	8b3a      	ldrh	r2, [r7, #24]
 8015bb8:	1a8a      	subs	r2, r1, r2
 8015bba:	b292      	uxth	r2, r2
 8015bbc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	68fa      	ldr	r2, [r7, #12]
 8015bc4:	68d2      	ldr	r2, [r2, #12]
 8015bc6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	68db      	ldr	r3, [r3, #12]
 8015bcc:	2200      	movs	r2, #0
 8015bce:	741a      	strb	r2, [r3, #16]
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	68db      	ldr	r3, [r3, #12]
 8015bd8:	f103 0214 	add.w	r2, r3, #20
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	7a9b      	ldrb	r3, [r3, #10]
 8015be0:	009b      	lsls	r3, r3, #2
 8015be2:	f003 0304 	and.w	r3, r3, #4
 8015be6:	4413      	add	r3, r2
 8015be8:	69fa      	ldr	r2, [r7, #28]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d006      	beq.n	8015bfc <tcp_output_segment+0x16c>
 8015bee:	4b10      	ldr	r3, [pc, #64]	; (8015c30 <tcp_output_segment+0x1a0>)
 8015bf0:	f240 621c 	movw	r2, #1564	; 0x61c
 8015bf4:	4914      	ldr	r1, [pc, #80]	; (8015c48 <tcp_output_segment+0x1b8>)
 8015bf6:	4810      	ldr	r0, [pc, #64]	; (8015c38 <tcp_output_segment+0x1a8>)
 8015bf8:	f007 f8b2 	bl	801cd60 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	6858      	ldr	r0, [r3, #4]
 8015c00:	68b9      	ldr	r1, [r7, #8]
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	1d1c      	adds	r4, r3, #4
 8015c06:	68bb      	ldr	r3, [r7, #8]
 8015c08:	7add      	ldrb	r5, [r3, #11]
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	7a9b      	ldrb	r3, [r3, #10]
 8015c0e:	687a      	ldr	r2, [r7, #4]
 8015c10:	9202      	str	r2, [sp, #8]
 8015c12:	2206      	movs	r2, #6
 8015c14:	9201      	str	r2, [sp, #4]
 8015c16:	9300      	str	r3, [sp, #0]
 8015c18:	462b      	mov	r3, r5
 8015c1a:	4622      	mov	r2, r4
 8015c1c:	f004 fc1c 	bl	801a458 <ip4_output_if>
 8015c20:	4603      	mov	r3, r0
 8015c22:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c28:	4618      	mov	r0, r3
 8015c2a:	3720      	adds	r7, #32
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8015c30:	0801f898 	.word	0x0801f898
 8015c34:	0801fe5c 	.word	0x0801fe5c
 8015c38:	0801f8ec 	.word	0x0801f8ec
 8015c3c:	0801fe7c 	.word	0x0801fe7c
 8015c40:	0801fe9c 	.word	0x0801fe9c
 8015c44:	200139f8 	.word	0x200139f8
 8015c48:	0801fec0 	.word	0x0801fec0

08015c4c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015c4c:	b5b0      	push	{r4, r5, r7, lr}
 8015c4e:	b084      	sub	sp, #16
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d106      	bne.n	8015c68 <tcp_rexmit_rto_prepare+0x1c>
 8015c5a:	4b31      	ldr	r3, [pc, #196]	; (8015d20 <tcp_rexmit_rto_prepare+0xd4>)
 8015c5c:	f240 6263 	movw	r2, #1635	; 0x663
 8015c60:	4930      	ldr	r1, [pc, #192]	; (8015d24 <tcp_rexmit_rto_prepare+0xd8>)
 8015c62:	4831      	ldr	r0, [pc, #196]	; (8015d28 <tcp_rexmit_rto_prepare+0xdc>)
 8015c64:	f007 f87c 	bl	801cd60 <iprintf>

  if (pcb->unacked == NULL) {
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d102      	bne.n	8015c76 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015c70:	f06f 0305 	mvn.w	r3, #5
 8015c74:	e050      	b.n	8015d18 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c7a:	60fb      	str	r3, [r7, #12]
 8015c7c:	e00b      	b.n	8015c96 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015c7e:	68f8      	ldr	r0, [r7, #12]
 8015c80:	f7ff fee6 	bl	8015a50 <tcp_output_segment_busy>
 8015c84:	4603      	mov	r3, r0
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d002      	beq.n	8015c90 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015c8a:	f06f 0305 	mvn.w	r3, #5
 8015c8e:	e043      	b.n	8015d18 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	60fb      	str	r3, [r7, #12]
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d1ef      	bne.n	8015c7e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015c9e:	68f8      	ldr	r0, [r7, #12]
 8015ca0:	f7ff fed6 	bl	8015a50 <tcp_output_segment_busy>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d002      	beq.n	8015cb0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015caa:	f06f 0305 	mvn.w	r3, #5
 8015cae:	e033      	b.n	8015d18 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	8b5b      	ldrh	r3, [r3, #26]
 8015cca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015cce:	b29a      	uxth	r2, r3
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	68db      	ldr	r3, [r3, #12]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7f9 fc95 	bl	800f60a <lwip_htonl>
 8015ce0:	4604      	mov	r4, r0
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	891b      	ldrh	r3, [r3, #8]
 8015ce6:	461d      	mov	r5, r3
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	68db      	ldr	r3, [r3, #12]
 8015cec:	899b      	ldrh	r3, [r3, #12]
 8015cee:	b29b      	uxth	r3, r3
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7f9 fc75 	bl	800f5e0 <lwip_htons>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	b2db      	uxtb	r3, r3
 8015cfa:	f003 0303 	and.w	r3, r3, #3
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d001      	beq.n	8015d06 <tcp_rexmit_rto_prepare+0xba>
 8015d02:	2301      	movs	r3, #1
 8015d04:	e000      	b.n	8015d08 <tcp_rexmit_rto_prepare+0xbc>
 8015d06:	2300      	movs	r3, #0
 8015d08:	442b      	add	r3, r5
 8015d0a:	18e2      	adds	r2, r4, r3
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2200      	movs	r2, #0
 8015d14:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015d16:	2300      	movs	r3, #0
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	3710      	adds	r7, #16
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8015d20:	0801f898 	.word	0x0801f898
 8015d24:	0801fed4 	.word	0x0801fed4
 8015d28:	0801f8ec 	.word	0x0801f8ec

08015d2c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b082      	sub	sp, #8
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d106      	bne.n	8015d48 <tcp_rexmit_rto_commit+0x1c>
 8015d3a:	4b0d      	ldr	r3, [pc, #52]	; (8015d70 <tcp_rexmit_rto_commit+0x44>)
 8015d3c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015d40:	490c      	ldr	r1, [pc, #48]	; (8015d74 <tcp_rexmit_rto_commit+0x48>)
 8015d42:	480d      	ldr	r0, [pc, #52]	; (8015d78 <tcp_rexmit_rto_commit+0x4c>)
 8015d44:	f007 f80c 	bl	801cd60 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d4e:	2bff      	cmp	r3, #255	; 0xff
 8015d50:	d007      	beq.n	8015d62 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d58:	3301      	adds	r3, #1
 8015d5a:	b2da      	uxtb	r2, r3
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f7ff fc80 	bl	8015668 <tcp_output>
}
 8015d68:	bf00      	nop
 8015d6a:	3708      	adds	r7, #8
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}
 8015d70:	0801f898 	.word	0x0801f898
 8015d74:	0801fef8 	.word	0x0801fef8
 8015d78:	0801f8ec 	.word	0x0801f8ec

08015d7c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b082      	sub	sp, #8
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d106      	bne.n	8015d98 <tcp_rexmit_rto+0x1c>
 8015d8a:	4b0a      	ldr	r3, [pc, #40]	; (8015db4 <tcp_rexmit_rto+0x38>)
 8015d8c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015d90:	4909      	ldr	r1, [pc, #36]	; (8015db8 <tcp_rexmit_rto+0x3c>)
 8015d92:	480a      	ldr	r0, [pc, #40]	; (8015dbc <tcp_rexmit_rto+0x40>)
 8015d94:	f006 ffe4 	bl	801cd60 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f7ff ff57 	bl	8015c4c <tcp_rexmit_rto_prepare>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d102      	bne.n	8015daa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f7ff ffc1 	bl	8015d2c <tcp_rexmit_rto_commit>
  }
}
 8015daa:	bf00      	nop
 8015dac:	3708      	adds	r7, #8
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}
 8015db2:	bf00      	nop
 8015db4:	0801f898 	.word	0x0801f898
 8015db8:	0801ff1c 	.word	0x0801ff1c
 8015dbc:	0801f8ec 	.word	0x0801f8ec

08015dc0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015dc0:	b590      	push	{r4, r7, lr}
 8015dc2:	b085      	sub	sp, #20
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d106      	bne.n	8015ddc <tcp_rexmit+0x1c>
 8015dce:	4b2f      	ldr	r3, [pc, #188]	; (8015e8c <tcp_rexmit+0xcc>)
 8015dd0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015dd4:	492e      	ldr	r1, [pc, #184]	; (8015e90 <tcp_rexmit+0xd0>)
 8015dd6:	482f      	ldr	r0, [pc, #188]	; (8015e94 <tcp_rexmit+0xd4>)
 8015dd8:	f006 ffc2 	bl	801cd60 <iprintf>

  if (pcb->unacked == NULL) {
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d102      	bne.n	8015dea <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015de4:	f06f 0305 	mvn.w	r3, #5
 8015de8:	e04c      	b.n	8015e84 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015df0:	68b8      	ldr	r0, [r7, #8]
 8015df2:	f7ff fe2d 	bl	8015a50 <tcp_output_segment_busy>
 8015df6:	4603      	mov	r3, r0
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d002      	beq.n	8015e02 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015dfc:	f06f 0305 	mvn.w	r3, #5
 8015e00:	e040      	b.n	8015e84 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	681a      	ldr	r2, [r3, #0]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	336c      	adds	r3, #108	; 0x6c
 8015e0e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015e10:	e002      	b.n	8015e18 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d011      	beq.n	8015e44 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	68db      	ldr	r3, [r3, #12]
 8015e26:	685b      	ldr	r3, [r3, #4]
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7f9 fbee 	bl	800f60a <lwip_htonl>
 8015e2e:	4604      	mov	r4, r0
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	68db      	ldr	r3, [r3, #12]
 8015e34:	685b      	ldr	r3, [r3, #4]
 8015e36:	4618      	mov	r0, r3
 8015e38:	f7f9 fbe7 	bl	800f60a <lwip_htonl>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	dbe6      	blt.n	8015e12 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681a      	ldr	r2, [r3, #0]
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	68ba      	ldr	r2, [r7, #8]
 8015e50:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015e52:	68bb      	ldr	r3, [r7, #8]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d103      	bne.n	8015e62 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e68:	2bff      	cmp	r3, #255	; 0xff
 8015e6a:	d007      	beq.n	8015e7c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e72:	3301      	adds	r3, #1
 8015e74:	b2da      	uxtb	r2, r3
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015e82:	2300      	movs	r3, #0
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3714      	adds	r7, #20
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd90      	pop	{r4, r7, pc}
 8015e8c:	0801f898 	.word	0x0801f898
 8015e90:	0801ff38 	.word	0x0801ff38
 8015e94:	0801f8ec 	.word	0x0801f8ec

08015e98 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b082      	sub	sp, #8
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d106      	bne.n	8015eb4 <tcp_rexmit_fast+0x1c>
 8015ea6:	4b2a      	ldr	r3, [pc, #168]	; (8015f50 <tcp_rexmit_fast+0xb8>)
 8015ea8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015eac:	4929      	ldr	r1, [pc, #164]	; (8015f54 <tcp_rexmit_fast+0xbc>)
 8015eae:	482a      	ldr	r0, [pc, #168]	; (8015f58 <tcp_rexmit_fast+0xc0>)
 8015eb0:	f006 ff56 	bl	801cd60 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d044      	beq.n	8015f46 <tcp_rexmit_fast+0xae>
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	8b5b      	ldrh	r3, [r3, #26]
 8015ec0:	f003 0304 	and.w	r3, r3, #4
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d13e      	bne.n	8015f46 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	f7ff ff79 	bl	8015dc0 <tcp_rexmit>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d138      	bne.n	8015f46 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015ee0:	4293      	cmp	r3, r2
 8015ee2:	bf28      	it	cs
 8015ee4:	4613      	movcs	r3, r2
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	0fda      	lsrs	r2, r3, #31
 8015eea:	4413      	add	r3, r2
 8015eec:	105b      	asrs	r3, r3, #1
 8015eee:	b29a      	uxth	r2, r3
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015efc:	461a      	mov	r2, r3
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f02:	005b      	lsls	r3, r3, #1
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d206      	bcs.n	8015f16 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f0c:	005b      	lsls	r3, r3, #1
 8015f0e:	b29a      	uxth	r2, r3
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f20:	4619      	mov	r1, r3
 8015f22:	0049      	lsls	r1, r1, #1
 8015f24:	440b      	add	r3, r1
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	4413      	add	r3, r2
 8015f2a:	b29a      	uxth	r2, r3
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	8b5b      	ldrh	r3, [r3, #26]
 8015f36:	f043 0304 	orr.w	r3, r3, #4
 8015f3a:	b29a      	uxth	r2, r3
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	2200      	movs	r2, #0
 8015f44:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015f46:	bf00      	nop
 8015f48:	3708      	adds	r7, #8
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	bf00      	nop
 8015f50:	0801f898 	.word	0x0801f898
 8015f54:	0801ff50 	.word	0x0801ff50
 8015f58:	0801f8ec 	.word	0x0801f8ec

08015f5c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b086      	sub	sp, #24
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	607b      	str	r3, [r7, #4]
 8015f66:	460b      	mov	r3, r1
 8015f68:	817b      	strh	r3, [r7, #10]
 8015f6a:	4613      	mov	r3, r2
 8015f6c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015f6e:	897a      	ldrh	r2, [r7, #10]
 8015f70:	893b      	ldrh	r3, [r7, #8]
 8015f72:	4413      	add	r3, r2
 8015f74:	b29b      	uxth	r3, r3
 8015f76:	3314      	adds	r3, #20
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f7e:	4619      	mov	r1, r3
 8015f80:	2022      	movs	r0, #34	; 0x22
 8015f82:	f7fa fc01 	bl	8010788 <pbuf_alloc>
 8015f86:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d04d      	beq.n	801602a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015f8e:	897b      	ldrh	r3, [r7, #10]
 8015f90:	3313      	adds	r3, #19
 8015f92:	697a      	ldr	r2, [r7, #20]
 8015f94:	8952      	ldrh	r2, [r2, #10]
 8015f96:	4293      	cmp	r3, r2
 8015f98:	db06      	blt.n	8015fa8 <tcp_output_alloc_header_common+0x4c>
 8015f9a:	4b26      	ldr	r3, [pc, #152]	; (8016034 <tcp_output_alloc_header_common+0xd8>)
 8015f9c:	f240 7223 	movw	r2, #1827	; 0x723
 8015fa0:	4925      	ldr	r1, [pc, #148]	; (8016038 <tcp_output_alloc_header_common+0xdc>)
 8015fa2:	4826      	ldr	r0, [pc, #152]	; (801603c <tcp_output_alloc_header_common+0xe0>)
 8015fa4:	f006 fedc 	bl	801cd60 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	685b      	ldr	r3, [r3, #4]
 8015fac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015fae:	8c3b      	ldrh	r3, [r7, #32]
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7f9 fb15 	bl	800f5e0 <lwip_htons>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	461a      	mov	r2, r3
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f7f9 fb0d 	bl	800f5e0 <lwip_htons>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	461a      	mov	r2, r3
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	687a      	ldr	r2, [r7, #4]
 8015fd2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015fd4:	68f8      	ldr	r0, [r7, #12]
 8015fd6:	f7f9 fb18 	bl	800f60a <lwip_htonl>
 8015fda:	4602      	mov	r2, r0
 8015fdc:	693b      	ldr	r3, [r7, #16]
 8015fde:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015fe0:	897b      	ldrh	r3, [r7, #10]
 8015fe2:	089b      	lsrs	r3, r3, #2
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	3305      	adds	r3, #5
 8015fe8:	b29b      	uxth	r3, r3
 8015fea:	031b      	lsls	r3, r3, #12
 8015fec:	b29a      	uxth	r2, r3
 8015fee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015ff2:	b29b      	uxth	r3, r3
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	b29b      	uxth	r3, r3
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7f9 faf1 	bl	800f5e0 <lwip_htons>
 8015ffe:	4603      	mov	r3, r0
 8016000:	461a      	mov	r2, r3
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016006:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016008:	4618      	mov	r0, r3
 801600a:	f7f9 fae9 	bl	800f5e0 <lwip_htons>
 801600e:	4603      	mov	r3, r0
 8016010:	461a      	mov	r2, r3
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	2200      	movs	r2, #0
 801601a:	741a      	strb	r2, [r3, #16]
 801601c:	2200      	movs	r2, #0
 801601e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	2200      	movs	r2, #0
 8016024:	749a      	strb	r2, [r3, #18]
 8016026:	2200      	movs	r2, #0
 8016028:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801602a:	697b      	ldr	r3, [r7, #20]
}
 801602c:	4618      	mov	r0, r3
 801602e:	3718      	adds	r7, #24
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	0801f898 	.word	0x0801f898
 8016038:	0801ff70 	.word	0x0801ff70
 801603c:	0801f8ec 	.word	0x0801f8ec

08016040 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016040:	b5b0      	push	{r4, r5, r7, lr}
 8016042:	b08a      	sub	sp, #40	; 0x28
 8016044:	af04      	add	r7, sp, #16
 8016046:	60f8      	str	r0, [r7, #12]
 8016048:	607b      	str	r3, [r7, #4]
 801604a:	460b      	mov	r3, r1
 801604c:	817b      	strh	r3, [r7, #10]
 801604e:	4613      	mov	r3, r2
 8016050:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d106      	bne.n	8016066 <tcp_output_alloc_header+0x26>
 8016058:	4b15      	ldr	r3, [pc, #84]	; (80160b0 <tcp_output_alloc_header+0x70>)
 801605a:	f240 7242 	movw	r2, #1858	; 0x742
 801605e:	4915      	ldr	r1, [pc, #84]	; (80160b4 <tcp_output_alloc_header+0x74>)
 8016060:	4815      	ldr	r0, [pc, #84]	; (80160b8 <tcp_output_alloc_header+0x78>)
 8016062:	f006 fe7d 	bl	801cd60 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	8adb      	ldrh	r3, [r3, #22]
 801606e:	68fa      	ldr	r2, [r7, #12]
 8016070:	8b12      	ldrh	r2, [r2, #24]
 8016072:	68f9      	ldr	r1, [r7, #12]
 8016074:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8016076:	893d      	ldrh	r5, [r7, #8]
 8016078:	897c      	ldrh	r4, [r7, #10]
 801607a:	9103      	str	r1, [sp, #12]
 801607c:	2110      	movs	r1, #16
 801607e:	9102      	str	r1, [sp, #8]
 8016080:	9201      	str	r2, [sp, #4]
 8016082:	9300      	str	r3, [sp, #0]
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	462a      	mov	r2, r5
 8016088:	4621      	mov	r1, r4
 801608a:	f7ff ff67 	bl	8015f5c <tcp_output_alloc_header_common>
 801608e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016090:	697b      	ldr	r3, [r7, #20]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d006      	beq.n	80160a4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801609a:	68fa      	ldr	r2, [r7, #12]
 801609c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801609e:	441a      	add	r2, r3
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80160a4:	697b      	ldr	r3, [r7, #20]
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3718      	adds	r7, #24
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bdb0      	pop	{r4, r5, r7, pc}
 80160ae:	bf00      	nop
 80160b0:	0801f898 	.word	0x0801f898
 80160b4:	0801ffa0 	.word	0x0801ffa0
 80160b8:	0801f8ec 	.word	0x0801f8ec

080160bc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b088      	sub	sp, #32
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	4611      	mov	r1, r2
 80160c8:	461a      	mov	r2, r3
 80160ca:	460b      	mov	r3, r1
 80160cc:	71fb      	strb	r3, [r7, #7]
 80160ce:	4613      	mov	r3, r2
 80160d0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80160d2:	2300      	movs	r3, #0
 80160d4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80160d6:	68bb      	ldr	r3, [r7, #8]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d106      	bne.n	80160ea <tcp_output_fill_options+0x2e>
 80160dc:	4b13      	ldr	r3, [pc, #76]	; (801612c <tcp_output_fill_options+0x70>)
 80160de:	f240 7256 	movw	r2, #1878	; 0x756
 80160e2:	4913      	ldr	r1, [pc, #76]	; (8016130 <tcp_output_fill_options+0x74>)
 80160e4:	4813      	ldr	r0, [pc, #76]	; (8016134 <tcp_output_fill_options+0x78>)
 80160e6:	f006 fe3b 	bl	801cd60 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	685b      	ldr	r3, [r3, #4]
 80160ee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80160f0:	69bb      	ldr	r3, [r7, #24]
 80160f2:	3314      	adds	r3, #20
 80160f4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80160f6:	69bb      	ldr	r3, [r7, #24]
 80160f8:	f103 0214 	add.w	r2, r3, #20
 80160fc:	8bfb      	ldrh	r3, [r7, #30]
 80160fe:	009b      	lsls	r3, r3, #2
 8016100:	4619      	mov	r1, r3
 8016102:	79fb      	ldrb	r3, [r7, #7]
 8016104:	009b      	lsls	r3, r3, #2
 8016106:	f003 0304 	and.w	r3, r3, #4
 801610a:	440b      	add	r3, r1
 801610c:	4413      	add	r3, r2
 801610e:	697a      	ldr	r2, [r7, #20]
 8016110:	429a      	cmp	r2, r3
 8016112:	d006      	beq.n	8016122 <tcp_output_fill_options+0x66>
 8016114:	4b05      	ldr	r3, [pc, #20]	; (801612c <tcp_output_fill_options+0x70>)
 8016116:	f240 7275 	movw	r2, #1909	; 0x775
 801611a:	4907      	ldr	r1, [pc, #28]	; (8016138 <tcp_output_fill_options+0x7c>)
 801611c:	4805      	ldr	r0, [pc, #20]	; (8016134 <tcp_output_fill_options+0x78>)
 801611e:	f006 fe1f 	bl	801cd60 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016122:	bf00      	nop
 8016124:	3720      	adds	r7, #32
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	0801f898 	.word	0x0801f898
 8016130:	0801ffc8 	.word	0x0801ffc8
 8016134:	0801f8ec 	.word	0x0801f8ec
 8016138:	0801fec0 	.word	0x0801fec0

0801613c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b08a      	sub	sp, #40	; 0x28
 8016140:	af04      	add	r7, sp, #16
 8016142:	60f8      	str	r0, [r7, #12]
 8016144:	60b9      	str	r1, [r7, #8]
 8016146:	607a      	str	r2, [r7, #4]
 8016148:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d106      	bne.n	801615e <tcp_output_control_segment+0x22>
 8016150:	4b1c      	ldr	r3, [pc, #112]	; (80161c4 <tcp_output_control_segment+0x88>)
 8016152:	f240 7287 	movw	r2, #1927	; 0x787
 8016156:	491c      	ldr	r1, [pc, #112]	; (80161c8 <tcp_output_control_segment+0x8c>)
 8016158:	481c      	ldr	r0, [pc, #112]	; (80161cc <tcp_output_control_segment+0x90>)
 801615a:	f006 fe01 	bl	801cd60 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801615e:	683a      	ldr	r2, [r7, #0]
 8016160:	6879      	ldr	r1, [r7, #4]
 8016162:	68f8      	ldr	r0, [r7, #12]
 8016164:	f7fe ff40 	bl	8014fe8 <tcp_route>
 8016168:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d102      	bne.n	8016176 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016170:	23fc      	movs	r3, #252	; 0xfc
 8016172:	75fb      	strb	r3, [r7, #23]
 8016174:	e01c      	b.n	80161b0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d006      	beq.n	801618a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	7adb      	ldrb	r3, [r3, #11]
 8016180:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	7a9b      	ldrb	r3, [r3, #10]
 8016186:	757b      	strb	r3, [r7, #21]
 8016188:	e003      	b.n	8016192 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801618a:	23ff      	movs	r3, #255	; 0xff
 801618c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801618e:	2300      	movs	r3, #0
 8016190:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016192:	7dba      	ldrb	r2, [r7, #22]
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	9302      	str	r3, [sp, #8]
 8016198:	2306      	movs	r3, #6
 801619a:	9301      	str	r3, [sp, #4]
 801619c:	7d7b      	ldrb	r3, [r7, #21]
 801619e:	9300      	str	r3, [sp, #0]
 80161a0:	4613      	mov	r3, r2
 80161a2:	683a      	ldr	r2, [r7, #0]
 80161a4:	6879      	ldr	r1, [r7, #4]
 80161a6:	68b8      	ldr	r0, [r7, #8]
 80161a8:	f004 f956 	bl	801a458 <ip4_output_if>
 80161ac:	4603      	mov	r3, r0
 80161ae:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80161b0:	68b8      	ldr	r0, [r7, #8]
 80161b2:	f7fa fdcd 	bl	8010d50 <pbuf_free>
  return err;
 80161b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161ba:	4618      	mov	r0, r3
 80161bc:	3718      	adds	r7, #24
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd80      	pop	{r7, pc}
 80161c2:	bf00      	nop
 80161c4:	0801f898 	.word	0x0801f898
 80161c8:	0801fff0 	.word	0x0801fff0
 80161cc:	0801f8ec 	.word	0x0801f8ec

080161d0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80161d0:	b590      	push	{r4, r7, lr}
 80161d2:	b08b      	sub	sp, #44	; 0x2c
 80161d4:	af04      	add	r7, sp, #16
 80161d6:	60f8      	str	r0, [r7, #12]
 80161d8:	60b9      	str	r1, [r7, #8]
 80161da:	607a      	str	r2, [r7, #4]
 80161dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d106      	bne.n	80161f2 <tcp_rst+0x22>
 80161e4:	4b1f      	ldr	r3, [pc, #124]	; (8016264 <tcp_rst+0x94>)
 80161e6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80161ea:	491f      	ldr	r1, [pc, #124]	; (8016268 <tcp_rst+0x98>)
 80161ec:	481f      	ldr	r0, [pc, #124]	; (801626c <tcp_rst+0x9c>)
 80161ee:	f006 fdb7 	bl	801cd60 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80161f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d106      	bne.n	8016206 <tcp_rst+0x36>
 80161f8:	4b1a      	ldr	r3, [pc, #104]	; (8016264 <tcp_rst+0x94>)
 80161fa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80161fe:	491c      	ldr	r1, [pc, #112]	; (8016270 <tcp_rst+0xa0>)
 8016200:	481a      	ldr	r0, [pc, #104]	; (801626c <tcp_rst+0x9c>)
 8016202:	f006 fdad 	bl	801cd60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016206:	2300      	movs	r3, #0
 8016208:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801620a:	f246 0308 	movw	r3, #24584	; 0x6008
 801620e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016210:	7dfb      	ldrb	r3, [r7, #23]
 8016212:	b29c      	uxth	r4, r3
 8016214:	68b8      	ldr	r0, [r7, #8]
 8016216:	f7f9 f9f8 	bl	800f60a <lwip_htonl>
 801621a:	4602      	mov	r2, r0
 801621c:	8abb      	ldrh	r3, [r7, #20]
 801621e:	9303      	str	r3, [sp, #12]
 8016220:	2314      	movs	r3, #20
 8016222:	9302      	str	r3, [sp, #8]
 8016224:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016226:	9301      	str	r3, [sp, #4]
 8016228:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	4613      	mov	r3, r2
 801622e:	2200      	movs	r2, #0
 8016230:	4621      	mov	r1, r4
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f7ff fe92 	bl	8015f5c <tcp_output_alloc_header_common>
 8016238:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d00c      	beq.n	801625a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016240:	7dfb      	ldrb	r3, [r7, #23]
 8016242:	2200      	movs	r2, #0
 8016244:	6939      	ldr	r1, [r7, #16]
 8016246:	68f8      	ldr	r0, [r7, #12]
 8016248:	f7ff ff38 	bl	80160bc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801624e:	683a      	ldr	r2, [r7, #0]
 8016250:	6939      	ldr	r1, [r7, #16]
 8016252:	68f8      	ldr	r0, [r7, #12]
 8016254:	f7ff ff72 	bl	801613c <tcp_output_control_segment>
 8016258:	e000      	b.n	801625c <tcp_rst+0x8c>
    return;
 801625a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801625c:	371c      	adds	r7, #28
 801625e:	46bd      	mov	sp, r7
 8016260:	bd90      	pop	{r4, r7, pc}
 8016262:	bf00      	nop
 8016264:	0801f898 	.word	0x0801f898
 8016268:	0802001c 	.word	0x0802001c
 801626c:	0801f8ec 	.word	0x0801f8ec
 8016270:	08020038 	.word	0x08020038

08016274 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016274:	b590      	push	{r4, r7, lr}
 8016276:	b087      	sub	sp, #28
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801627c:	2300      	movs	r3, #0
 801627e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016280:	2300      	movs	r3, #0
 8016282:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d106      	bne.n	8016298 <tcp_send_empty_ack+0x24>
 801628a:	4b28      	ldr	r3, [pc, #160]	; (801632c <tcp_send_empty_ack+0xb8>)
 801628c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016290:	4927      	ldr	r1, [pc, #156]	; (8016330 <tcp_send_empty_ack+0xbc>)
 8016292:	4828      	ldr	r0, [pc, #160]	; (8016334 <tcp_send_empty_ack+0xc0>)
 8016294:	f006 fd64 	bl	801cd60 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016298:	7dfb      	ldrb	r3, [r7, #23]
 801629a:	009b      	lsls	r3, r3, #2
 801629c:	b2db      	uxtb	r3, r3
 801629e:	f003 0304 	and.w	r3, r3, #4
 80162a2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80162a4:	7d7b      	ldrb	r3, [r7, #21]
 80162a6:	b29c      	uxth	r4, r3
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7f9 f9ac 	bl	800f60a <lwip_htonl>
 80162b2:	4603      	mov	r3, r0
 80162b4:	2200      	movs	r2, #0
 80162b6:	4621      	mov	r1, r4
 80162b8:	6878      	ldr	r0, [r7, #4]
 80162ba:	f7ff fec1 	bl	8016040 <tcp_output_alloc_header>
 80162be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d109      	bne.n	80162da <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	8b5b      	ldrh	r3, [r3, #26]
 80162ca:	f043 0303 	orr.w	r3, r3, #3
 80162ce:	b29a      	uxth	r2, r3
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80162d4:	f06f 0301 	mvn.w	r3, #1
 80162d8:	e023      	b.n	8016322 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80162da:	7dbb      	ldrb	r3, [r7, #22]
 80162dc:	7dfa      	ldrb	r2, [r7, #23]
 80162de:	6939      	ldr	r1, [r7, #16]
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f7ff feeb 	bl	80160bc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80162e6:	687a      	ldr	r2, [r7, #4]
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	3304      	adds	r3, #4
 80162ec:	6939      	ldr	r1, [r7, #16]
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f7ff ff24 	bl	801613c <tcp_output_control_segment>
 80162f4:	4603      	mov	r3, r0
 80162f6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80162f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d007      	beq.n	8016310 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	8b5b      	ldrh	r3, [r3, #26]
 8016304:	f043 0303 	orr.w	r3, r3, #3
 8016308:	b29a      	uxth	r2, r3
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	835a      	strh	r2, [r3, #26]
 801630e:	e006      	b.n	801631e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	8b5b      	ldrh	r3, [r3, #26]
 8016314:	f023 0303 	bic.w	r3, r3, #3
 8016318:	b29a      	uxth	r2, r3
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801631e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016322:	4618      	mov	r0, r3
 8016324:	371c      	adds	r7, #28
 8016326:	46bd      	mov	sp, r7
 8016328:	bd90      	pop	{r4, r7, pc}
 801632a:	bf00      	nop
 801632c:	0801f898 	.word	0x0801f898
 8016330:	08020054 	.word	0x08020054
 8016334:	0801f8ec 	.word	0x0801f8ec

08016338 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016338:	b590      	push	{r4, r7, lr}
 801633a:	b087      	sub	sp, #28
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016340:	2300      	movs	r3, #0
 8016342:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d106      	bne.n	8016358 <tcp_keepalive+0x20>
 801634a:	4b18      	ldr	r3, [pc, #96]	; (80163ac <tcp_keepalive+0x74>)
 801634c:	f640 0224 	movw	r2, #2084	; 0x824
 8016350:	4917      	ldr	r1, [pc, #92]	; (80163b0 <tcp_keepalive+0x78>)
 8016352:	4818      	ldr	r0, [pc, #96]	; (80163b4 <tcp_keepalive+0x7c>)
 8016354:	f006 fd04 	bl	801cd60 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016358:	7dfb      	ldrb	r3, [r7, #23]
 801635a:	b29c      	uxth	r4, r3
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016360:	3b01      	subs	r3, #1
 8016362:	4618      	mov	r0, r3
 8016364:	f7f9 f951 	bl	800f60a <lwip_htonl>
 8016368:	4603      	mov	r3, r0
 801636a:	2200      	movs	r2, #0
 801636c:	4621      	mov	r1, r4
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f7ff fe66 	bl	8016040 <tcp_output_alloc_header>
 8016374:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016376:	693b      	ldr	r3, [r7, #16]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d102      	bne.n	8016382 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801637c:	f04f 33ff 	mov.w	r3, #4294967295
 8016380:	e010      	b.n	80163a4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016382:	7dfb      	ldrb	r3, [r7, #23]
 8016384:	2200      	movs	r2, #0
 8016386:	6939      	ldr	r1, [r7, #16]
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f7ff fe97 	bl	80160bc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	3304      	adds	r3, #4
 8016394:	6939      	ldr	r1, [r7, #16]
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f7ff fed0 	bl	801613c <tcp_output_control_segment>
 801639c:	4603      	mov	r3, r0
 801639e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80163a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	371c      	adds	r7, #28
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd90      	pop	{r4, r7, pc}
 80163ac:	0801f898 	.word	0x0801f898
 80163b0:	08020074 	.word	0x08020074
 80163b4:	0801f8ec 	.word	0x0801f8ec

080163b8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80163b8:	b590      	push	{r4, r7, lr}
 80163ba:	b08b      	sub	sp, #44	; 0x2c
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80163c0:	2300      	movs	r3, #0
 80163c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d106      	bne.n	80163da <tcp_zero_window_probe+0x22>
 80163cc:	4b4c      	ldr	r3, [pc, #304]	; (8016500 <tcp_zero_window_probe+0x148>)
 80163ce:	f640 024f 	movw	r2, #2127	; 0x84f
 80163d2:	494c      	ldr	r1, [pc, #304]	; (8016504 <tcp_zero_window_probe+0x14c>)
 80163d4:	484c      	ldr	r0, [pc, #304]	; (8016508 <tcp_zero_window_probe+0x150>)
 80163d6:	f006 fcc3 	bl	801cd60 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163de:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80163e0:	6a3b      	ldr	r3, [r7, #32]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d101      	bne.n	80163ea <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80163e6:	2300      	movs	r3, #0
 80163e8:	e086      	b.n	80164f8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80163f0:	2bff      	cmp	r3, #255	; 0xff
 80163f2:	d007      	beq.n	8016404 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80163fa:	3301      	adds	r3, #1
 80163fc:	b2da      	uxtb	r2, r3
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016404:	6a3b      	ldr	r3, [r7, #32]
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	899b      	ldrh	r3, [r3, #12]
 801640a:	b29b      	uxth	r3, r3
 801640c:	4618      	mov	r0, r3
 801640e:	f7f9 f8e7 	bl	800f5e0 <lwip_htons>
 8016412:	4603      	mov	r3, r0
 8016414:	b2db      	uxtb	r3, r3
 8016416:	f003 0301 	and.w	r3, r3, #1
 801641a:	2b00      	cmp	r3, #0
 801641c:	d005      	beq.n	801642a <tcp_zero_window_probe+0x72>
 801641e:	6a3b      	ldr	r3, [r7, #32]
 8016420:	891b      	ldrh	r3, [r3, #8]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d101      	bne.n	801642a <tcp_zero_window_probe+0x72>
 8016426:	2301      	movs	r3, #1
 8016428:	e000      	b.n	801642c <tcp_zero_window_probe+0x74>
 801642a:	2300      	movs	r3, #0
 801642c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801642e:	7ffb      	ldrb	r3, [r7, #31]
 8016430:	2b00      	cmp	r3, #0
 8016432:	bf0c      	ite	eq
 8016434:	2301      	moveq	r3, #1
 8016436:	2300      	movne	r3, #0
 8016438:	b2db      	uxtb	r3, r3
 801643a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801643c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016440:	b299      	uxth	r1, r3
 8016442:	6a3b      	ldr	r3, [r7, #32]
 8016444:	68db      	ldr	r3, [r3, #12]
 8016446:	685b      	ldr	r3, [r3, #4]
 8016448:	8bba      	ldrh	r2, [r7, #28]
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f7ff fdf8 	bl	8016040 <tcp_output_alloc_header>
 8016450:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016452:	69bb      	ldr	r3, [r7, #24]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d102      	bne.n	801645e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016458:	f04f 33ff 	mov.w	r3, #4294967295
 801645c:	e04c      	b.n	80164f8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801645e:	69bb      	ldr	r3, [r7, #24]
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016464:	7ffb      	ldrb	r3, [r7, #31]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d011      	beq.n	801648e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801646a:	697b      	ldr	r3, [r7, #20]
 801646c:	899b      	ldrh	r3, [r3, #12]
 801646e:	b29b      	uxth	r3, r3
 8016470:	b21b      	sxth	r3, r3
 8016472:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016476:	b21c      	sxth	r4, r3
 8016478:	2011      	movs	r0, #17
 801647a:	f7f9 f8b1 	bl	800f5e0 <lwip_htons>
 801647e:	4603      	mov	r3, r0
 8016480:	b21b      	sxth	r3, r3
 8016482:	4323      	orrs	r3, r4
 8016484:	b21b      	sxth	r3, r3
 8016486:	b29a      	uxth	r2, r3
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	819a      	strh	r2, [r3, #12]
 801648c:	e010      	b.n	80164b0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801648e:	69bb      	ldr	r3, [r7, #24]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	3314      	adds	r3, #20
 8016494:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016496:	6a3b      	ldr	r3, [r7, #32]
 8016498:	6858      	ldr	r0, [r3, #4]
 801649a:	6a3b      	ldr	r3, [r7, #32]
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	891a      	ldrh	r2, [r3, #8]
 80164a0:	6a3b      	ldr	r3, [r7, #32]
 80164a2:	891b      	ldrh	r3, [r3, #8]
 80164a4:	1ad3      	subs	r3, r2, r3
 80164a6:	b29b      	uxth	r3, r3
 80164a8:	2201      	movs	r2, #1
 80164aa:	6939      	ldr	r1, [r7, #16]
 80164ac:	f7fa fe56 	bl	801115c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80164b0:	6a3b      	ldr	r3, [r7, #32]
 80164b2:	68db      	ldr	r3, [r3, #12]
 80164b4:	685b      	ldr	r3, [r3, #4]
 80164b6:	4618      	mov	r0, r3
 80164b8:	f7f9 f8a7 	bl	800f60a <lwip_htonl>
 80164bc:	4603      	mov	r3, r0
 80164be:	3301      	adds	r3, #1
 80164c0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	1ad3      	subs	r3, r2, r3
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	da02      	bge.n	80164d4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	68fa      	ldr	r2, [r7, #12]
 80164d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80164d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164d8:	2200      	movs	r2, #0
 80164da:	69b9      	ldr	r1, [r7, #24]
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f7ff fded 	bl	80160bc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	3304      	adds	r3, #4
 80164e8:	69b9      	ldr	r1, [r7, #24]
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	f7ff fe26 	bl	801613c <tcp_output_control_segment>
 80164f0:	4603      	mov	r3, r0
 80164f2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80164f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	372c      	adds	r7, #44	; 0x2c
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd90      	pop	{r4, r7, pc}
 8016500:	0801f898 	.word	0x0801f898
 8016504:	08020090 	.word	0x08020090
 8016508:	0801f8ec 	.word	0x0801f8ec

0801650c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b082      	sub	sp, #8
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016514:	f7fa ff10 	bl	8011338 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016518:	4b0a      	ldr	r3, [pc, #40]	; (8016544 <tcpip_tcp_timer+0x38>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d103      	bne.n	8016528 <tcpip_tcp_timer+0x1c>
 8016520:	4b09      	ldr	r3, [pc, #36]	; (8016548 <tcpip_tcp_timer+0x3c>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d005      	beq.n	8016534 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016528:	2200      	movs	r2, #0
 801652a:	4908      	ldr	r1, [pc, #32]	; (801654c <tcpip_tcp_timer+0x40>)
 801652c:	20fa      	movs	r0, #250	; 0xfa
 801652e:	f000 f8f3 	bl	8016718 <sys_timeout>
 8016532:	e003      	b.n	801653c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016534:	4b06      	ldr	r3, [pc, #24]	; (8016550 <tcpip_tcp_timer+0x44>)
 8016536:	2200      	movs	r2, #0
 8016538:	601a      	str	r2, [r3, #0]
  }
}
 801653a:	bf00      	nop
 801653c:	bf00      	nop
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}
 8016544:	200139f4 	.word	0x200139f4
 8016548:	20013a04 	.word	0x20013a04
 801654c:	0801650d 	.word	0x0801650d
 8016550:	2000afe4 	.word	0x2000afe4

08016554 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016558:	4b0a      	ldr	r3, [pc, #40]	; (8016584 <tcp_timer_needed+0x30>)
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d10f      	bne.n	8016580 <tcp_timer_needed+0x2c>
 8016560:	4b09      	ldr	r3, [pc, #36]	; (8016588 <tcp_timer_needed+0x34>)
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d103      	bne.n	8016570 <tcp_timer_needed+0x1c>
 8016568:	4b08      	ldr	r3, [pc, #32]	; (801658c <tcp_timer_needed+0x38>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d007      	beq.n	8016580 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016570:	4b04      	ldr	r3, [pc, #16]	; (8016584 <tcp_timer_needed+0x30>)
 8016572:	2201      	movs	r2, #1
 8016574:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016576:	2200      	movs	r2, #0
 8016578:	4905      	ldr	r1, [pc, #20]	; (8016590 <tcp_timer_needed+0x3c>)
 801657a:	20fa      	movs	r0, #250	; 0xfa
 801657c:	f000 f8cc 	bl	8016718 <sys_timeout>
  }
}
 8016580:	bf00      	nop
 8016582:	bd80      	pop	{r7, pc}
 8016584:	2000afe4 	.word	0x2000afe4
 8016588:	200139f4 	.word	0x200139f4
 801658c:	20013a04 	.word	0x20013a04
 8016590:	0801650d 	.word	0x0801650d

08016594 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b086      	sub	sp, #24
 8016598:	af00      	add	r7, sp, #0
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	60b9      	str	r1, [r7, #8]
 801659e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80165a0:	200a      	movs	r0, #10
 80165a2:	f7f9 fcd3 	bl	800ff4c <memp_malloc>
 80165a6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80165a8:	693b      	ldr	r3, [r7, #16]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d109      	bne.n	80165c2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80165ae:	693b      	ldr	r3, [r7, #16]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d151      	bne.n	8016658 <sys_timeout_abs+0xc4>
 80165b4:	4b2a      	ldr	r3, [pc, #168]	; (8016660 <sys_timeout_abs+0xcc>)
 80165b6:	22be      	movs	r2, #190	; 0xbe
 80165b8:	492a      	ldr	r1, [pc, #168]	; (8016664 <sys_timeout_abs+0xd0>)
 80165ba:	482b      	ldr	r0, [pc, #172]	; (8016668 <sys_timeout_abs+0xd4>)
 80165bc:	f006 fbd0 	bl	801cd60 <iprintf>
    return;
 80165c0:	e04a      	b.n	8016658 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80165c2:	693b      	ldr	r3, [r7, #16]
 80165c4:	2200      	movs	r2, #0
 80165c6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80165c8:	693b      	ldr	r3, [r7, #16]
 80165ca:	68ba      	ldr	r2, [r7, #8]
 80165cc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80165ce:	693b      	ldr	r3, [r7, #16]
 80165d0:	687a      	ldr	r2, [r7, #4]
 80165d2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80165d4:	693b      	ldr	r3, [r7, #16]
 80165d6:	68fa      	ldr	r2, [r7, #12]
 80165d8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80165da:	4b24      	ldr	r3, [pc, #144]	; (801666c <sys_timeout_abs+0xd8>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d103      	bne.n	80165ea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80165e2:	4a22      	ldr	r2, [pc, #136]	; (801666c <sys_timeout_abs+0xd8>)
 80165e4:	693b      	ldr	r3, [r7, #16]
 80165e6:	6013      	str	r3, [r2, #0]
    return;
 80165e8:	e037      	b.n	801665a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80165ea:	693b      	ldr	r3, [r7, #16]
 80165ec:	685a      	ldr	r2, [r3, #4]
 80165ee:	4b1f      	ldr	r3, [pc, #124]	; (801666c <sys_timeout_abs+0xd8>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	685b      	ldr	r3, [r3, #4]
 80165f4:	1ad3      	subs	r3, r2, r3
 80165f6:	0fdb      	lsrs	r3, r3, #31
 80165f8:	f003 0301 	and.w	r3, r3, #1
 80165fc:	b2db      	uxtb	r3, r3
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d007      	beq.n	8016612 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016602:	4b1a      	ldr	r3, [pc, #104]	; (801666c <sys_timeout_abs+0xd8>)
 8016604:	681a      	ldr	r2, [r3, #0]
 8016606:	693b      	ldr	r3, [r7, #16]
 8016608:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801660a:	4a18      	ldr	r2, [pc, #96]	; (801666c <sys_timeout_abs+0xd8>)
 801660c:	693b      	ldr	r3, [r7, #16]
 801660e:	6013      	str	r3, [r2, #0]
 8016610:	e023      	b.n	801665a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016612:	4b16      	ldr	r3, [pc, #88]	; (801666c <sys_timeout_abs+0xd8>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	617b      	str	r3, [r7, #20]
 8016618:	e01a      	b.n	8016650 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801661a:	697b      	ldr	r3, [r7, #20]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d00b      	beq.n	801663a <sys_timeout_abs+0xa6>
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	685a      	ldr	r2, [r3, #4]
 8016626:	697b      	ldr	r3, [r7, #20]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	685b      	ldr	r3, [r3, #4]
 801662c:	1ad3      	subs	r3, r2, r3
 801662e:	0fdb      	lsrs	r3, r3, #31
 8016630:	f003 0301 	and.w	r3, r3, #1
 8016634:	b2db      	uxtb	r3, r3
 8016636:	2b00      	cmp	r3, #0
 8016638:	d007      	beq.n	801664a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	681a      	ldr	r2, [r3, #0]
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	693a      	ldr	r2, [r7, #16]
 8016646:	601a      	str	r2, [r3, #0]
        break;
 8016648:	e007      	b.n	801665a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801664a:	697b      	ldr	r3, [r7, #20]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	617b      	str	r3, [r7, #20]
 8016650:	697b      	ldr	r3, [r7, #20]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d1e1      	bne.n	801661a <sys_timeout_abs+0x86>
 8016656:	e000      	b.n	801665a <sys_timeout_abs+0xc6>
    return;
 8016658:	bf00      	nop
      }
    }
  }
}
 801665a:	3718      	adds	r7, #24
 801665c:	46bd      	mov	sp, r7
 801665e:	bd80      	pop	{r7, pc}
 8016660:	080200b4 	.word	0x080200b4
 8016664:	080200e8 	.word	0x080200e8
 8016668:	08020128 	.word	0x08020128
 801666c:	2000afdc 	.word	0x2000afdc

08016670 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b086      	sub	sp, #24
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801667c:	697b      	ldr	r3, [r7, #20]
 801667e:	685b      	ldr	r3, [r3, #4]
 8016680:	4798      	blx	r3

  now = sys_now();
 8016682:	f7f4 fd9f 	bl	800b1c4 <sys_now>
 8016686:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016688:	697b      	ldr	r3, [r7, #20]
 801668a:	681a      	ldr	r2, [r3, #0]
 801668c:	4b0f      	ldr	r3, [pc, #60]	; (80166cc <lwip_cyclic_timer+0x5c>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	4413      	add	r3, r2
 8016692:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016694:	68fa      	ldr	r2, [r7, #12]
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	1ad3      	subs	r3, r2, r3
 801669a:	0fdb      	lsrs	r3, r3, #31
 801669c:	f003 0301 	and.w	r3, r3, #1
 80166a0:	b2db      	uxtb	r3, r3
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d009      	beq.n	80166ba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80166a6:	697b      	ldr	r3, [r7, #20]
 80166a8:	681a      	ldr	r2, [r3, #0]
 80166aa:	693b      	ldr	r3, [r7, #16]
 80166ac:	4413      	add	r3, r2
 80166ae:	687a      	ldr	r2, [r7, #4]
 80166b0:	4907      	ldr	r1, [pc, #28]	; (80166d0 <lwip_cyclic_timer+0x60>)
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7ff ff6e 	bl	8016594 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80166b8:	e004      	b.n	80166c4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80166ba:	687a      	ldr	r2, [r7, #4]
 80166bc:	4904      	ldr	r1, [pc, #16]	; (80166d0 <lwip_cyclic_timer+0x60>)
 80166be:	68f8      	ldr	r0, [r7, #12]
 80166c0:	f7ff ff68 	bl	8016594 <sys_timeout_abs>
}
 80166c4:	bf00      	nop
 80166c6:	3718      	adds	r7, #24
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	2000afe0 	.word	0x2000afe0
 80166d0:	08016671 	.word	0x08016671

080166d4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80166da:	2301      	movs	r3, #1
 80166dc:	607b      	str	r3, [r7, #4]
 80166de:	e00e      	b.n	80166fe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80166e0:	4a0b      	ldr	r2, [pc, #44]	; (8016710 <sys_timeouts_init+0x3c>)
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	00db      	lsls	r3, r3, #3
 80166ec:	4a08      	ldr	r2, [pc, #32]	; (8016710 <sys_timeouts_init+0x3c>)
 80166ee:	4413      	add	r3, r2
 80166f0:	461a      	mov	r2, r3
 80166f2:	4908      	ldr	r1, [pc, #32]	; (8016714 <sys_timeouts_init+0x40>)
 80166f4:	f000 f810 	bl	8016718 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	3301      	adds	r3, #1
 80166fc:	607b      	str	r3, [r7, #4]
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	2b04      	cmp	r3, #4
 8016702:	d9ed      	bls.n	80166e0 <sys_timeouts_init+0xc>
  }
}
 8016704:	bf00      	nop
 8016706:	bf00      	nop
 8016708:	3708      	adds	r7, #8
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}
 801670e:	bf00      	nop
 8016710:	080211c0 	.word	0x080211c0
 8016714:	08016671 	.word	0x08016671

08016718 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b086      	sub	sp, #24
 801671c:	af00      	add	r7, sp, #0
 801671e:	60f8      	str	r0, [r7, #12]
 8016720:	60b9      	str	r1, [r7, #8]
 8016722:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801672a:	d306      	bcc.n	801673a <sys_timeout+0x22>
 801672c:	4b0a      	ldr	r3, [pc, #40]	; (8016758 <sys_timeout+0x40>)
 801672e:	f240 1229 	movw	r2, #297	; 0x129
 8016732:	490a      	ldr	r1, [pc, #40]	; (801675c <sys_timeout+0x44>)
 8016734:	480a      	ldr	r0, [pc, #40]	; (8016760 <sys_timeout+0x48>)
 8016736:	f006 fb13 	bl	801cd60 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801673a:	f7f4 fd43 	bl	800b1c4 <sys_now>
 801673e:	4602      	mov	r2, r0
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	4413      	add	r3, r2
 8016744:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016746:	687a      	ldr	r2, [r7, #4]
 8016748:	68b9      	ldr	r1, [r7, #8]
 801674a:	6978      	ldr	r0, [r7, #20]
 801674c:	f7ff ff22 	bl	8016594 <sys_timeout_abs>
#endif
}
 8016750:	bf00      	nop
 8016752:	3718      	adds	r7, #24
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}
 8016758:	080200b4 	.word	0x080200b4
 801675c:	08020150 	.word	0x08020150
 8016760:	08020128 	.word	0x08020128

08016764 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b084      	sub	sp, #16
 8016768:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801676a:	f7f4 fd2b 	bl	800b1c4 <sys_now>
 801676e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016770:	4b17      	ldr	r3, [pc, #92]	; (80167d0 <sys_check_timeouts+0x6c>)
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016776:	68bb      	ldr	r3, [r7, #8]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d022      	beq.n	80167c2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801677c:	68bb      	ldr	r3, [r7, #8]
 801677e:	685b      	ldr	r3, [r3, #4]
 8016780:	68fa      	ldr	r2, [r7, #12]
 8016782:	1ad3      	subs	r3, r2, r3
 8016784:	0fdb      	lsrs	r3, r3, #31
 8016786:	f003 0301 	and.w	r3, r3, #1
 801678a:	b2db      	uxtb	r3, r3
 801678c:	2b00      	cmp	r3, #0
 801678e:	d11a      	bne.n	80167c6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016790:	68bb      	ldr	r3, [r7, #8]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	4a0e      	ldr	r2, [pc, #56]	; (80167d0 <sys_check_timeouts+0x6c>)
 8016796:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	689b      	ldr	r3, [r3, #8]
 801679c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	68db      	ldr	r3, [r3, #12]
 80167a2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	685b      	ldr	r3, [r3, #4]
 80167a8:	4a0a      	ldr	r2, [pc, #40]	; (80167d4 <sys_check_timeouts+0x70>)
 80167aa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80167ac:	68b9      	ldr	r1, [r7, #8]
 80167ae:	200a      	movs	r0, #10
 80167b0:	f7f9 fc1e 	bl	800fff0 <memp_free>
    if (handler != NULL) {
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d0da      	beq.n	8016770 <sys_check_timeouts+0xc>
      handler(arg);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	6838      	ldr	r0, [r7, #0]
 80167be:	4798      	blx	r3
  do {
 80167c0:	e7d6      	b.n	8016770 <sys_check_timeouts+0xc>
      return;
 80167c2:	bf00      	nop
 80167c4:	e000      	b.n	80167c8 <sys_check_timeouts+0x64>
      return;
 80167c6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80167c8:	3710      	adds	r7, #16
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	bf00      	nop
 80167d0:	2000afdc 	.word	0x2000afdc
 80167d4:	2000afe0 	.word	0x2000afe0

080167d8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b082      	sub	sp, #8
 80167dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80167de:	4b16      	ldr	r3, [pc, #88]	; (8016838 <sys_timeouts_sleeptime+0x60>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d102      	bne.n	80167ec <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80167e6:	f04f 33ff 	mov.w	r3, #4294967295
 80167ea:	e020      	b.n	801682e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80167ec:	f7f4 fcea 	bl	800b1c4 <sys_now>
 80167f0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80167f2:	4b11      	ldr	r3, [pc, #68]	; (8016838 <sys_timeouts_sleeptime+0x60>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	685a      	ldr	r2, [r3, #4]
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	1ad3      	subs	r3, r2, r3
 80167fc:	0fdb      	lsrs	r3, r3, #31
 80167fe:	f003 0301 	and.w	r3, r3, #1
 8016802:	b2db      	uxtb	r3, r3
 8016804:	2b00      	cmp	r3, #0
 8016806:	d001      	beq.n	801680c <sys_timeouts_sleeptime+0x34>
    return 0;
 8016808:	2300      	movs	r3, #0
 801680a:	e010      	b.n	801682e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801680c:	4b0a      	ldr	r3, [pc, #40]	; (8016838 <sys_timeouts_sleeptime+0x60>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	685a      	ldr	r2, [r3, #4]
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	1ad3      	subs	r3, r2, r3
 8016816:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	2b00      	cmp	r3, #0
 801681c:	da06      	bge.n	801682c <sys_timeouts_sleeptime+0x54>
 801681e:	4b07      	ldr	r3, [pc, #28]	; (801683c <sys_timeouts_sleeptime+0x64>)
 8016820:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016824:	4906      	ldr	r1, [pc, #24]	; (8016840 <sys_timeouts_sleeptime+0x68>)
 8016826:	4807      	ldr	r0, [pc, #28]	; (8016844 <sys_timeouts_sleeptime+0x6c>)
 8016828:	f006 fa9a 	bl	801cd60 <iprintf>
    return ret;
 801682c:	683b      	ldr	r3, [r7, #0]
  }
}
 801682e:	4618      	mov	r0, r3
 8016830:	3708      	adds	r7, #8
 8016832:	46bd      	mov	sp, r7
 8016834:	bd80      	pop	{r7, pc}
 8016836:	bf00      	nop
 8016838:	2000afdc 	.word	0x2000afdc
 801683c:	080200b4 	.word	0x080200b4
 8016840:	08020188 	.word	0x08020188
 8016844:	08020128 	.word	0x08020128

08016848 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801684c:	f006 faa0 	bl	801cd90 <rand>
 8016850:	4603      	mov	r3, r0
 8016852:	b29b      	uxth	r3, r3
 8016854:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016858:	b29b      	uxth	r3, r3
 801685a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801685e:	b29a      	uxth	r2, r3
 8016860:	4b01      	ldr	r3, [pc, #4]	; (8016868 <udp_init+0x20>)
 8016862:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016864:	bf00      	nop
 8016866:	bd80      	pop	{r7, pc}
 8016868:	200000ec 	.word	0x200000ec

0801686c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801686c:	b480      	push	{r7}
 801686e:	b083      	sub	sp, #12
 8016870:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016872:	2300      	movs	r3, #0
 8016874:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016876:	4b17      	ldr	r3, [pc, #92]	; (80168d4 <udp_new_port+0x68>)
 8016878:	881b      	ldrh	r3, [r3, #0]
 801687a:	1c5a      	adds	r2, r3, #1
 801687c:	b291      	uxth	r1, r2
 801687e:	4a15      	ldr	r2, [pc, #84]	; (80168d4 <udp_new_port+0x68>)
 8016880:	8011      	strh	r1, [r2, #0]
 8016882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016886:	4293      	cmp	r3, r2
 8016888:	d103      	bne.n	8016892 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801688a:	4b12      	ldr	r3, [pc, #72]	; (80168d4 <udp_new_port+0x68>)
 801688c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016890:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016892:	4b11      	ldr	r3, [pc, #68]	; (80168d8 <udp_new_port+0x6c>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	603b      	str	r3, [r7, #0]
 8016898:	e011      	b.n	80168be <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	8a5a      	ldrh	r2, [r3, #18]
 801689e:	4b0d      	ldr	r3, [pc, #52]	; (80168d4 <udp_new_port+0x68>)
 80168a0:	881b      	ldrh	r3, [r3, #0]
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d108      	bne.n	80168b8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80168a6:	88fb      	ldrh	r3, [r7, #6]
 80168a8:	3301      	adds	r3, #1
 80168aa:	80fb      	strh	r3, [r7, #6]
 80168ac:	88fb      	ldrh	r3, [r7, #6]
 80168ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80168b2:	d3e0      	bcc.n	8016876 <udp_new_port+0xa>
        return 0;
 80168b4:	2300      	movs	r3, #0
 80168b6:	e007      	b.n	80168c8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	68db      	ldr	r3, [r3, #12]
 80168bc:	603b      	str	r3, [r7, #0]
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d1ea      	bne.n	801689a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80168c4:	4b03      	ldr	r3, [pc, #12]	; (80168d4 <udp_new_port+0x68>)
 80168c6:	881b      	ldrh	r3, [r3, #0]
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	370c      	adds	r7, #12
 80168cc:	46bd      	mov	sp, r7
 80168ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d2:	4770      	bx	lr
 80168d4:	200000ec 	.word	0x200000ec
 80168d8:	20013a0c 	.word	0x20013a0c

080168dc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b084      	sub	sp, #16
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	60f8      	str	r0, [r7, #12]
 80168e4:	60b9      	str	r1, [r7, #8]
 80168e6:	4613      	mov	r3, r2
 80168e8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d105      	bne.n	80168fc <udp_input_local_match+0x20>
 80168f0:	4b27      	ldr	r3, [pc, #156]	; (8016990 <udp_input_local_match+0xb4>)
 80168f2:	2287      	movs	r2, #135	; 0x87
 80168f4:	4927      	ldr	r1, [pc, #156]	; (8016994 <udp_input_local_match+0xb8>)
 80168f6:	4828      	ldr	r0, [pc, #160]	; (8016998 <udp_input_local_match+0xbc>)
 80168f8:	f006 fa32 	bl	801cd60 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d105      	bne.n	801690e <udp_input_local_match+0x32>
 8016902:	4b23      	ldr	r3, [pc, #140]	; (8016990 <udp_input_local_match+0xb4>)
 8016904:	2288      	movs	r2, #136	; 0x88
 8016906:	4925      	ldr	r1, [pc, #148]	; (801699c <udp_input_local_match+0xc0>)
 8016908:	4823      	ldr	r0, [pc, #140]	; (8016998 <udp_input_local_match+0xbc>)
 801690a:	f006 fa29 	bl	801cd60 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	7a1b      	ldrb	r3, [r3, #8]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d00b      	beq.n	801692e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	7a1a      	ldrb	r2, [r3, #8]
 801691a:	4b21      	ldr	r3, [pc, #132]	; (80169a0 <udp_input_local_match+0xc4>)
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016922:	3301      	adds	r3, #1
 8016924:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016926:	429a      	cmp	r2, r3
 8016928:	d001      	beq.n	801692e <udp_input_local_match+0x52>
    return 0;
 801692a:	2300      	movs	r3, #0
 801692c:	e02b      	b.n	8016986 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801692e:	79fb      	ldrb	r3, [r7, #7]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d018      	beq.n	8016966 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d013      	beq.n	8016962 <udp_input_local_match+0x86>
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d00f      	beq.n	8016962 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016942:	4b17      	ldr	r3, [pc, #92]	; (80169a0 <udp_input_local_match+0xc4>)
 8016944:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801694a:	d00a      	beq.n	8016962 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	681a      	ldr	r2, [r3, #0]
 8016950:	4b13      	ldr	r3, [pc, #76]	; (80169a0 <udp_input_local_match+0xc4>)
 8016952:	695b      	ldr	r3, [r3, #20]
 8016954:	405a      	eors	r2, r3
 8016956:	68bb      	ldr	r3, [r7, #8]
 8016958:	3308      	adds	r3, #8
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801695e:	2b00      	cmp	r3, #0
 8016960:	d110      	bne.n	8016984 <udp_input_local_match+0xa8>
          return 1;
 8016962:	2301      	movs	r3, #1
 8016964:	e00f      	b.n	8016986 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d009      	beq.n	8016980 <udp_input_local_match+0xa4>
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d005      	beq.n	8016980 <udp_input_local_match+0xa4>
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	681a      	ldr	r2, [r3, #0]
 8016978:	4b09      	ldr	r3, [pc, #36]	; (80169a0 <udp_input_local_match+0xc4>)
 801697a:	695b      	ldr	r3, [r3, #20]
 801697c:	429a      	cmp	r2, r3
 801697e:	d101      	bne.n	8016984 <udp_input_local_match+0xa8>
        return 1;
 8016980:	2301      	movs	r3, #1
 8016982:	e000      	b.n	8016986 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016984:	2300      	movs	r3, #0
}
 8016986:	4618      	mov	r0, r3
 8016988:	3710      	adds	r7, #16
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	0802019c 	.word	0x0802019c
 8016994:	080201cc 	.word	0x080201cc
 8016998:	080201f0 	.word	0x080201f0
 801699c:	08020218 	.word	0x08020218
 80169a0:	200102c0 	.word	0x200102c0

080169a4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80169a4:	b590      	push	{r4, r7, lr}
 80169a6:	b08d      	sub	sp, #52	; 0x34
 80169a8:	af02      	add	r7, sp, #8
 80169aa:	6078      	str	r0, [r7, #4]
 80169ac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80169ae:	2300      	movs	r3, #0
 80169b0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d105      	bne.n	80169c4 <udp_input+0x20>
 80169b8:	4b7c      	ldr	r3, [pc, #496]	; (8016bac <udp_input+0x208>)
 80169ba:	22cf      	movs	r2, #207	; 0xcf
 80169bc:	497c      	ldr	r1, [pc, #496]	; (8016bb0 <udp_input+0x20c>)
 80169be:	487d      	ldr	r0, [pc, #500]	; (8016bb4 <udp_input+0x210>)
 80169c0:	f006 f9ce 	bl	801cd60 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d105      	bne.n	80169d6 <udp_input+0x32>
 80169ca:	4b78      	ldr	r3, [pc, #480]	; (8016bac <udp_input+0x208>)
 80169cc:	22d0      	movs	r2, #208	; 0xd0
 80169ce:	497a      	ldr	r1, [pc, #488]	; (8016bb8 <udp_input+0x214>)
 80169d0:	4878      	ldr	r0, [pc, #480]	; (8016bb4 <udp_input+0x210>)
 80169d2:	f006 f9c5 	bl	801cd60 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	895b      	ldrh	r3, [r3, #10]
 80169da:	2b07      	cmp	r3, #7
 80169dc:	d803      	bhi.n	80169e6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80169de:	6878      	ldr	r0, [r7, #4]
 80169e0:	f7fa f9b6 	bl	8010d50 <pbuf_free>
    goto end;
 80169e4:	e0de      	b.n	8016ba4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	685b      	ldr	r3, [r3, #4]
 80169ea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80169ec:	4b73      	ldr	r3, [pc, #460]	; (8016bbc <udp_input+0x218>)
 80169ee:	695b      	ldr	r3, [r3, #20]
 80169f0:	4a72      	ldr	r2, [pc, #456]	; (8016bbc <udp_input+0x218>)
 80169f2:	6812      	ldr	r2, [r2, #0]
 80169f4:	4611      	mov	r1, r2
 80169f6:	4618      	mov	r0, r3
 80169f8:	f003 fe06 	bl	801a608 <ip4_addr_isbroadcast_u32>
 80169fc:	4603      	mov	r3, r0
 80169fe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	881b      	ldrh	r3, [r3, #0]
 8016a04:	b29b      	uxth	r3, r3
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7f8 fdea 	bl	800f5e0 <lwip_htons>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016a10:	697b      	ldr	r3, [r7, #20]
 8016a12:	885b      	ldrh	r3, [r3, #2]
 8016a14:	b29b      	uxth	r3, r3
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7f8 fde2 	bl	800f5e0 <lwip_htons>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016a20:	2300      	movs	r3, #0
 8016a22:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016a24:	2300      	movs	r3, #0
 8016a26:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016a28:	2300      	movs	r3, #0
 8016a2a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a2c:	4b64      	ldr	r3, [pc, #400]	; (8016bc0 <udp_input+0x21c>)
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	627b      	str	r3, [r7, #36]	; 0x24
 8016a32:	e054      	b.n	8016ade <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a36:	8a5b      	ldrh	r3, [r3, #18]
 8016a38:	89fa      	ldrh	r2, [r7, #14]
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	d14a      	bne.n	8016ad4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016a3e:	7cfb      	ldrb	r3, [r7, #19]
 8016a40:	461a      	mov	r2, r3
 8016a42:	6839      	ldr	r1, [r7, #0]
 8016a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a46:	f7ff ff49 	bl	80168dc <udp_input_local_match>
 8016a4a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d041      	beq.n	8016ad4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a52:	7c1b      	ldrb	r3, [r3, #16]
 8016a54:	f003 0304 	and.w	r3, r3, #4
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d11d      	bne.n	8016a98 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016a5c:	69fb      	ldr	r3, [r7, #28]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d102      	bne.n	8016a68 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a64:	61fb      	str	r3, [r7, #28]
 8016a66:	e017      	b.n	8016a98 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016a68:	7cfb      	ldrb	r3, [r7, #19]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d014      	beq.n	8016a98 <udp_input+0xf4>
 8016a6e:	4b53      	ldr	r3, [pc, #332]	; (8016bbc <udp_input+0x218>)
 8016a70:	695b      	ldr	r3, [r3, #20]
 8016a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a76:	d10f      	bne.n	8016a98 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016a78:	69fb      	ldr	r3, [r7, #28]
 8016a7a:	681a      	ldr	r2, [r3, #0]
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	3304      	adds	r3, #4
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d008      	beq.n	8016a98 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a88:	681a      	ldr	r2, [r3, #0]
 8016a8a:	683b      	ldr	r3, [r7, #0]
 8016a8c:	3304      	adds	r3, #4
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	429a      	cmp	r2, r3
 8016a92:	d101      	bne.n	8016a98 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a96:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a9a:	8a9b      	ldrh	r3, [r3, #20]
 8016a9c:	8a3a      	ldrh	r2, [r7, #16]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d118      	bne.n	8016ad4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d005      	beq.n	8016ab6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aac:	685a      	ldr	r2, [r3, #4]
 8016aae:	4b43      	ldr	r3, [pc, #268]	; (8016bbc <udp_input+0x218>)
 8016ab0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d10e      	bne.n	8016ad4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016ab6:	6a3b      	ldr	r3, [r7, #32]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d014      	beq.n	8016ae6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016abe:	68da      	ldr	r2, [r3, #12]
 8016ac0:	6a3b      	ldr	r3, [r7, #32]
 8016ac2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016ac4:	4b3e      	ldr	r3, [pc, #248]	; (8016bc0 <udp_input+0x21c>)
 8016ac6:	681a      	ldr	r2, [r3, #0]
 8016ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016acc:	4a3c      	ldr	r2, [pc, #240]	; (8016bc0 <udp_input+0x21c>)
 8016ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016ad2:	e008      	b.n	8016ae6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8016ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ada:	68db      	ldr	r3, [r3, #12]
 8016adc:	627b      	str	r3, [r7, #36]	; 0x24
 8016ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d1a7      	bne.n	8016a34 <udp_input+0x90>
 8016ae4:	e000      	b.n	8016ae8 <udp_input+0x144>
        break;
 8016ae6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d101      	bne.n	8016af2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016aee:	69fb      	ldr	r3, [r7, #28]
 8016af0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d002      	beq.n	8016afe <udp_input+0x15a>
    for_us = 1;
 8016af8:	2301      	movs	r3, #1
 8016afa:	76fb      	strb	r3, [r7, #27]
 8016afc:	e00a      	b.n	8016b14 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	3304      	adds	r3, #4
 8016b02:	681a      	ldr	r2, [r3, #0]
 8016b04:	4b2d      	ldr	r3, [pc, #180]	; (8016bbc <udp_input+0x218>)
 8016b06:	695b      	ldr	r3, [r3, #20]
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	bf0c      	ite	eq
 8016b0c:	2301      	moveq	r3, #1
 8016b0e:	2300      	movne	r3, #0
 8016b10:	b2db      	uxtb	r3, r3
 8016b12:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016b14:	7efb      	ldrb	r3, [r7, #27]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d041      	beq.n	8016b9e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016b1a:	2108      	movs	r1, #8
 8016b1c:	6878      	ldr	r0, [r7, #4]
 8016b1e:	f7fa f891 	bl	8010c44 <pbuf_remove_header>
 8016b22:	4603      	mov	r3, r0
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d00a      	beq.n	8016b3e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016b28:	4b20      	ldr	r3, [pc, #128]	; (8016bac <udp_input+0x208>)
 8016b2a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016b2e:	4925      	ldr	r1, [pc, #148]	; (8016bc4 <udp_input+0x220>)
 8016b30:	4820      	ldr	r0, [pc, #128]	; (8016bb4 <udp_input+0x210>)
 8016b32:	f006 f915 	bl	801cd60 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016b36:	6878      	ldr	r0, [r7, #4]
 8016b38:	f7fa f90a 	bl	8010d50 <pbuf_free>
      goto end;
 8016b3c:	e032      	b.n	8016ba4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d012      	beq.n	8016b6a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b46:	699b      	ldr	r3, [r3, #24]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d00a      	beq.n	8016b62 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b4e:	699c      	ldr	r4, [r3, #24]
 8016b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b52:	69d8      	ldr	r0, [r3, #28]
 8016b54:	8a3b      	ldrh	r3, [r7, #16]
 8016b56:	9300      	str	r3, [sp, #0]
 8016b58:	4b1b      	ldr	r3, [pc, #108]	; (8016bc8 <udp_input+0x224>)
 8016b5a:	687a      	ldr	r2, [r7, #4]
 8016b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b5e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016b60:	e021      	b.n	8016ba6 <udp_input+0x202>
        pbuf_free(p);
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f7fa f8f4 	bl	8010d50 <pbuf_free>
        goto end;
 8016b68:	e01c      	b.n	8016ba4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016b6a:	7cfb      	ldrb	r3, [r7, #19]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d112      	bne.n	8016b96 <udp_input+0x1f2>
 8016b70:	4b12      	ldr	r3, [pc, #72]	; (8016bbc <udp_input+0x218>)
 8016b72:	695b      	ldr	r3, [r3, #20]
 8016b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016b78:	2be0      	cmp	r3, #224	; 0xe0
 8016b7a:	d00c      	beq.n	8016b96 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016b7c:	4b0f      	ldr	r3, [pc, #60]	; (8016bbc <udp_input+0x218>)
 8016b7e:	899b      	ldrh	r3, [r3, #12]
 8016b80:	3308      	adds	r3, #8
 8016b82:	b29b      	uxth	r3, r3
 8016b84:	b21b      	sxth	r3, r3
 8016b86:	4619      	mov	r1, r3
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f7fa f8ce 	bl	8010d2a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016b8e:	2103      	movs	r1, #3
 8016b90:	6878      	ldr	r0, [r7, #4]
 8016b92:	f003 f9fb 	bl	8019f8c <icmp_dest_unreach>
      pbuf_free(p);
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f7fa f8da 	bl	8010d50 <pbuf_free>
  return;
 8016b9c:	e003      	b.n	8016ba6 <udp_input+0x202>
    pbuf_free(p);
 8016b9e:	6878      	ldr	r0, [r7, #4]
 8016ba0:	f7fa f8d6 	bl	8010d50 <pbuf_free>
  return;
 8016ba4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016ba6:	372c      	adds	r7, #44	; 0x2c
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd90      	pop	{r4, r7, pc}
 8016bac:	0802019c 	.word	0x0802019c
 8016bb0:	08020240 	.word	0x08020240
 8016bb4:	080201f0 	.word	0x080201f0
 8016bb8:	08020258 	.word	0x08020258
 8016bbc:	200102c0 	.word	0x200102c0
 8016bc0:	20013a0c 	.word	0x20013a0c
 8016bc4:	08020274 	.word	0x08020274
 8016bc8:	200102d0 	.word	0x200102d0

08016bcc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b088      	sub	sp, #32
 8016bd0:	af02      	add	r7, sp, #8
 8016bd2:	60f8      	str	r0, [r7, #12]
 8016bd4:	60b9      	str	r1, [r7, #8]
 8016bd6:	607a      	str	r2, [r7, #4]
 8016bd8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d109      	bne.n	8016bf4 <udp_sendto_if+0x28>
 8016be0:	4b2e      	ldr	r3, [pc, #184]	; (8016c9c <udp_sendto_if+0xd0>)
 8016be2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016be6:	492e      	ldr	r1, [pc, #184]	; (8016ca0 <udp_sendto_if+0xd4>)
 8016be8:	482e      	ldr	r0, [pc, #184]	; (8016ca4 <udp_sendto_if+0xd8>)
 8016bea:	f006 f8b9 	bl	801cd60 <iprintf>
 8016bee:	f06f 030f 	mvn.w	r3, #15
 8016bf2:	e04f      	b.n	8016c94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016bf4:	68bb      	ldr	r3, [r7, #8]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d109      	bne.n	8016c0e <udp_sendto_if+0x42>
 8016bfa:	4b28      	ldr	r3, [pc, #160]	; (8016c9c <udp_sendto_if+0xd0>)
 8016bfc:	f240 2281 	movw	r2, #641	; 0x281
 8016c00:	4929      	ldr	r1, [pc, #164]	; (8016ca8 <udp_sendto_if+0xdc>)
 8016c02:	4828      	ldr	r0, [pc, #160]	; (8016ca4 <udp_sendto_if+0xd8>)
 8016c04:	f006 f8ac 	bl	801cd60 <iprintf>
 8016c08:	f06f 030f 	mvn.w	r3, #15
 8016c0c:	e042      	b.n	8016c94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d109      	bne.n	8016c28 <udp_sendto_if+0x5c>
 8016c14:	4b21      	ldr	r3, [pc, #132]	; (8016c9c <udp_sendto_if+0xd0>)
 8016c16:	f240 2282 	movw	r2, #642	; 0x282
 8016c1a:	4924      	ldr	r1, [pc, #144]	; (8016cac <udp_sendto_if+0xe0>)
 8016c1c:	4821      	ldr	r0, [pc, #132]	; (8016ca4 <udp_sendto_if+0xd8>)
 8016c1e:	f006 f89f 	bl	801cd60 <iprintf>
 8016c22:	f06f 030f 	mvn.w	r3, #15
 8016c26:	e035      	b.n	8016c94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016c28:	6a3b      	ldr	r3, [r7, #32]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d109      	bne.n	8016c42 <udp_sendto_if+0x76>
 8016c2e:	4b1b      	ldr	r3, [pc, #108]	; (8016c9c <udp_sendto_if+0xd0>)
 8016c30:	f240 2283 	movw	r2, #643	; 0x283
 8016c34:	491e      	ldr	r1, [pc, #120]	; (8016cb0 <udp_sendto_if+0xe4>)
 8016c36:	481b      	ldr	r0, [pc, #108]	; (8016ca4 <udp_sendto_if+0xd8>)
 8016c38:	f006 f892 	bl	801cd60 <iprintf>
 8016c3c:	f06f 030f 	mvn.w	r3, #15
 8016c40:	e028      	b.n	8016c94 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d009      	beq.n	8016c5c <udp_sendto_if+0x90>
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d005      	beq.n	8016c5c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016c58:	2be0      	cmp	r3, #224	; 0xe0
 8016c5a:	d103      	bne.n	8016c64 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016c5c:	6a3b      	ldr	r3, [r7, #32]
 8016c5e:	3304      	adds	r3, #4
 8016c60:	617b      	str	r3, [r7, #20]
 8016c62:	e00b      	b.n	8016c7c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	681a      	ldr	r2, [r3, #0]
 8016c68:	6a3b      	ldr	r3, [r7, #32]
 8016c6a:	3304      	adds	r3, #4
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d002      	beq.n	8016c78 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016c72:	f06f 0303 	mvn.w	r3, #3
 8016c76:	e00d      	b.n	8016c94 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016c7c:	887a      	ldrh	r2, [r7, #2]
 8016c7e:	697b      	ldr	r3, [r7, #20]
 8016c80:	9301      	str	r3, [sp, #4]
 8016c82:	6a3b      	ldr	r3, [r7, #32]
 8016c84:	9300      	str	r3, [sp, #0]
 8016c86:	4613      	mov	r3, r2
 8016c88:	687a      	ldr	r2, [r7, #4]
 8016c8a:	68b9      	ldr	r1, [r7, #8]
 8016c8c:	68f8      	ldr	r0, [r7, #12]
 8016c8e:	f000 f811 	bl	8016cb4 <udp_sendto_if_src>
 8016c92:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3718      	adds	r7, #24
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bd80      	pop	{r7, pc}
 8016c9c:	0802019c 	.word	0x0802019c
 8016ca0:	08020310 	.word	0x08020310
 8016ca4:	080201f0 	.word	0x080201f0
 8016ca8:	0802032c 	.word	0x0802032c
 8016cac:	08020348 	.word	0x08020348
 8016cb0:	08020368 	.word	0x08020368

08016cb4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b08c      	sub	sp, #48	; 0x30
 8016cb8:	af04      	add	r7, sp, #16
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	607a      	str	r2, [r7, #4]
 8016cc0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d109      	bne.n	8016cdc <udp_sendto_if_src+0x28>
 8016cc8:	4b65      	ldr	r3, [pc, #404]	; (8016e60 <udp_sendto_if_src+0x1ac>)
 8016cca:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016cce:	4965      	ldr	r1, [pc, #404]	; (8016e64 <udp_sendto_if_src+0x1b0>)
 8016cd0:	4865      	ldr	r0, [pc, #404]	; (8016e68 <udp_sendto_if_src+0x1b4>)
 8016cd2:	f006 f845 	bl	801cd60 <iprintf>
 8016cd6:	f06f 030f 	mvn.w	r3, #15
 8016cda:	e0bc      	b.n	8016e56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016cdc:	68bb      	ldr	r3, [r7, #8]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d109      	bne.n	8016cf6 <udp_sendto_if_src+0x42>
 8016ce2:	4b5f      	ldr	r3, [pc, #380]	; (8016e60 <udp_sendto_if_src+0x1ac>)
 8016ce4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016ce8:	4960      	ldr	r1, [pc, #384]	; (8016e6c <udp_sendto_if_src+0x1b8>)
 8016cea:	485f      	ldr	r0, [pc, #380]	; (8016e68 <udp_sendto_if_src+0x1b4>)
 8016cec:	f006 f838 	bl	801cd60 <iprintf>
 8016cf0:	f06f 030f 	mvn.w	r3, #15
 8016cf4:	e0af      	b.n	8016e56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d109      	bne.n	8016d10 <udp_sendto_if_src+0x5c>
 8016cfc:	4b58      	ldr	r3, [pc, #352]	; (8016e60 <udp_sendto_if_src+0x1ac>)
 8016cfe:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016d02:	495b      	ldr	r1, [pc, #364]	; (8016e70 <udp_sendto_if_src+0x1bc>)
 8016d04:	4858      	ldr	r0, [pc, #352]	; (8016e68 <udp_sendto_if_src+0x1b4>)
 8016d06:	f006 f82b 	bl	801cd60 <iprintf>
 8016d0a:	f06f 030f 	mvn.w	r3, #15
 8016d0e:	e0a2      	b.n	8016e56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d109      	bne.n	8016d2a <udp_sendto_if_src+0x76>
 8016d16:	4b52      	ldr	r3, [pc, #328]	; (8016e60 <udp_sendto_if_src+0x1ac>)
 8016d18:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016d1c:	4955      	ldr	r1, [pc, #340]	; (8016e74 <udp_sendto_if_src+0x1c0>)
 8016d1e:	4852      	ldr	r0, [pc, #328]	; (8016e68 <udp_sendto_if_src+0x1b4>)
 8016d20:	f006 f81e 	bl	801cd60 <iprintf>
 8016d24:	f06f 030f 	mvn.w	r3, #15
 8016d28:	e095      	b.n	8016e56 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d109      	bne.n	8016d44 <udp_sendto_if_src+0x90>
 8016d30:	4b4b      	ldr	r3, [pc, #300]	; (8016e60 <udp_sendto_if_src+0x1ac>)
 8016d32:	f240 22d5 	movw	r2, #725	; 0x2d5
 8016d36:	4950      	ldr	r1, [pc, #320]	; (8016e78 <udp_sendto_if_src+0x1c4>)
 8016d38:	484b      	ldr	r0, [pc, #300]	; (8016e68 <udp_sendto_if_src+0x1b4>)
 8016d3a:	f006 f811 	bl	801cd60 <iprintf>
 8016d3e:	f06f 030f 	mvn.w	r3, #15
 8016d42:	e088      	b.n	8016e56 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	8a5b      	ldrh	r3, [r3, #18]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d10f      	bne.n	8016d6c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016d4c:	68f9      	ldr	r1, [r7, #12]
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	8a5b      	ldrh	r3, [r3, #18]
 8016d52:	461a      	mov	r2, r3
 8016d54:	68f8      	ldr	r0, [r7, #12]
 8016d56:	f000 f893 	bl	8016e80 <udp_bind>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016d5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d002      	beq.n	8016d6c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016d66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016d6a:	e074      	b.n	8016e56 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	891b      	ldrh	r3, [r3, #8]
 8016d70:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016d74:	4293      	cmp	r3, r2
 8016d76:	d902      	bls.n	8016d7e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016d78:	f04f 33ff 	mov.w	r3, #4294967295
 8016d7c:	e06b      	b.n	8016e56 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016d7e:	2108      	movs	r1, #8
 8016d80:	68b8      	ldr	r0, [r7, #8]
 8016d82:	f7f9 ff4f 	bl	8010c24 <pbuf_add_header>
 8016d86:	4603      	mov	r3, r0
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d015      	beq.n	8016db8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016d8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d90:	2108      	movs	r1, #8
 8016d92:	2022      	movs	r0, #34	; 0x22
 8016d94:	f7f9 fcf8 	bl	8010788 <pbuf_alloc>
 8016d98:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016d9a:	69fb      	ldr	r3, [r7, #28]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d102      	bne.n	8016da6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016da0:	f04f 33ff 	mov.w	r3, #4294967295
 8016da4:	e057      	b.n	8016e56 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	891b      	ldrh	r3, [r3, #8]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d006      	beq.n	8016dbc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016dae:	68b9      	ldr	r1, [r7, #8]
 8016db0:	69f8      	ldr	r0, [r7, #28]
 8016db2:	f7fa f8f1 	bl	8010f98 <pbuf_chain>
 8016db6:	e001      	b.n	8016dbc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016dbc:	69fb      	ldr	r3, [r7, #28]
 8016dbe:	895b      	ldrh	r3, [r3, #10]
 8016dc0:	2b07      	cmp	r3, #7
 8016dc2:	d806      	bhi.n	8016dd2 <udp_sendto_if_src+0x11e>
 8016dc4:	4b26      	ldr	r3, [pc, #152]	; (8016e60 <udp_sendto_if_src+0x1ac>)
 8016dc6:	f240 320d 	movw	r2, #781	; 0x30d
 8016dca:	492c      	ldr	r1, [pc, #176]	; (8016e7c <udp_sendto_if_src+0x1c8>)
 8016dcc:	4826      	ldr	r0, [pc, #152]	; (8016e68 <udp_sendto_if_src+0x1b4>)
 8016dce:	f005 ffc7 	bl	801cd60 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016dd2:	69fb      	ldr	r3, [r7, #28]
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	8a5b      	ldrh	r3, [r3, #18]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7f8 fbff 	bl	800f5e0 <lwip_htons>
 8016de2:	4603      	mov	r3, r0
 8016de4:	461a      	mov	r2, r3
 8016de6:	697b      	ldr	r3, [r7, #20]
 8016de8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016dea:	887b      	ldrh	r3, [r7, #2]
 8016dec:	4618      	mov	r0, r3
 8016dee:	f7f8 fbf7 	bl	800f5e0 <lwip_htons>
 8016df2:	4603      	mov	r3, r0
 8016df4:	461a      	mov	r2, r3
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	719a      	strb	r2, [r3, #6]
 8016e00:	2200      	movs	r2, #0
 8016e02:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016e04:	69fb      	ldr	r3, [r7, #28]
 8016e06:	891b      	ldrh	r3, [r3, #8]
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7f8 fbe9 	bl	800f5e0 <lwip_htons>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	461a      	mov	r2, r3
 8016e12:	697b      	ldr	r3, [r7, #20]
 8016e14:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016e16:	2311      	movs	r3, #17
 8016e18:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	7adb      	ldrb	r3, [r3, #11]
 8016e1e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	7a9b      	ldrb	r3, [r3, #10]
 8016e24:	7cb9      	ldrb	r1, [r7, #18]
 8016e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e28:	9202      	str	r2, [sp, #8]
 8016e2a:	7cfa      	ldrb	r2, [r7, #19]
 8016e2c:	9201      	str	r2, [sp, #4]
 8016e2e:	9300      	str	r3, [sp, #0]
 8016e30:	460b      	mov	r3, r1
 8016e32:	687a      	ldr	r2, [r7, #4]
 8016e34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e36:	69f8      	ldr	r0, [r7, #28]
 8016e38:	f003 fb38 	bl	801a4ac <ip4_output_if_src>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016e40:	69fa      	ldr	r2, [r7, #28]
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	429a      	cmp	r2, r3
 8016e46:	d004      	beq.n	8016e52 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016e48:	69f8      	ldr	r0, [r7, #28]
 8016e4a:	f7f9 ff81 	bl	8010d50 <pbuf_free>
    q = NULL;
 8016e4e:	2300      	movs	r3, #0
 8016e50:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016e52:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3720      	adds	r7, #32
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	0802019c 	.word	0x0802019c
 8016e64:	08020388 	.word	0x08020388
 8016e68:	080201f0 	.word	0x080201f0
 8016e6c:	080203a8 	.word	0x080203a8
 8016e70:	080203c8 	.word	0x080203c8
 8016e74:	080203ec 	.word	0x080203ec
 8016e78:	08020410 	.word	0x08020410
 8016e7c:	08020434 	.word	0x08020434

08016e80 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b086      	sub	sp, #24
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	60f8      	str	r0, [r7, #12]
 8016e88:	60b9      	str	r1, [r7, #8]
 8016e8a:	4613      	mov	r3, r2
 8016e8c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d101      	bne.n	8016e98 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016e94:	4b39      	ldr	r3, [pc, #228]	; (8016f7c <udp_bind+0xfc>)
 8016e96:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d109      	bne.n	8016eb2 <udp_bind+0x32>
 8016e9e:	4b38      	ldr	r3, [pc, #224]	; (8016f80 <udp_bind+0x100>)
 8016ea0:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016ea4:	4937      	ldr	r1, [pc, #220]	; (8016f84 <udp_bind+0x104>)
 8016ea6:	4838      	ldr	r0, [pc, #224]	; (8016f88 <udp_bind+0x108>)
 8016ea8:	f005 ff5a 	bl	801cd60 <iprintf>
 8016eac:	f06f 030f 	mvn.w	r3, #15
 8016eb0:	e060      	b.n	8016f74 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016eb6:	4b35      	ldr	r3, [pc, #212]	; (8016f8c <udp_bind+0x10c>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	617b      	str	r3, [r7, #20]
 8016ebc:	e009      	b.n	8016ed2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016ebe:	68fa      	ldr	r2, [r7, #12]
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	d102      	bne.n	8016ecc <udp_bind+0x4c>
      rebind = 1;
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8016eca:	e005      	b.n	8016ed8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016ecc:	697b      	ldr	r3, [r7, #20]
 8016ece:	68db      	ldr	r3, [r3, #12]
 8016ed0:	617b      	str	r3, [r7, #20]
 8016ed2:	697b      	ldr	r3, [r7, #20]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d1f2      	bne.n	8016ebe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016ed8:	88fb      	ldrh	r3, [r7, #6]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d109      	bne.n	8016ef2 <udp_bind+0x72>
    port = udp_new_port();
 8016ede:	f7ff fcc5 	bl	801686c <udp_new_port>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016ee6:	88fb      	ldrh	r3, [r7, #6]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d12c      	bne.n	8016f46 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016eec:	f06f 0307 	mvn.w	r3, #7
 8016ef0:	e040      	b.n	8016f74 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016ef2:	4b26      	ldr	r3, [pc, #152]	; (8016f8c <udp_bind+0x10c>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	617b      	str	r3, [r7, #20]
 8016ef8:	e022      	b.n	8016f40 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016efa:	68fa      	ldr	r2, [r7, #12]
 8016efc:	697b      	ldr	r3, [r7, #20]
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d01b      	beq.n	8016f3a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016f02:	697b      	ldr	r3, [r7, #20]
 8016f04:	8a5b      	ldrh	r3, [r3, #18]
 8016f06:	88fa      	ldrh	r2, [r7, #6]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d116      	bne.n	8016f3a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016f0c:	697b      	ldr	r3, [r7, #20]
 8016f0e:	681a      	ldr	r2, [r3, #0]
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016f14:	429a      	cmp	r2, r3
 8016f16:	d00d      	beq.n	8016f34 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d00a      	beq.n	8016f34 <udp_bind+0xb4>
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d006      	beq.n	8016f34 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016f26:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d003      	beq.n	8016f34 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d102      	bne.n	8016f3a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016f34:	f06f 0307 	mvn.w	r3, #7
 8016f38:	e01c      	b.n	8016f74 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	68db      	ldr	r3, [r3, #12]
 8016f3e:	617b      	str	r3, [r7, #20]
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d1d9      	bne.n	8016efa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d002      	beq.n	8016f52 <udp_bind+0xd2>
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	e000      	b.n	8016f54 <udp_bind+0xd4>
 8016f52:	2300      	movs	r3, #0
 8016f54:	68fa      	ldr	r2, [r7, #12]
 8016f56:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	88fa      	ldrh	r2, [r7, #6]
 8016f5c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016f5e:	7cfb      	ldrb	r3, [r7, #19]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d106      	bne.n	8016f72 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016f64:	4b09      	ldr	r3, [pc, #36]	; (8016f8c <udp_bind+0x10c>)
 8016f66:	681a      	ldr	r2, [r3, #0]
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016f6c:	4a07      	ldr	r2, [pc, #28]	; (8016f8c <udp_bind+0x10c>)
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016f72:	2300      	movs	r3, #0
}
 8016f74:	4618      	mov	r0, r3
 8016f76:	3718      	adds	r7, #24
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}
 8016f7c:	080211e8 	.word	0x080211e8
 8016f80:	0802019c 	.word	0x0802019c
 8016f84:	08020464 	.word	0x08020464
 8016f88:	080201f0 	.word	0x080201f0
 8016f8c:	20013a0c 	.word	0x20013a0c

08016f90 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b086      	sub	sp, #24
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	60f8      	str	r0, [r7, #12]
 8016f98:	60b9      	str	r1, [r7, #8]
 8016f9a:	4613      	mov	r3, r2
 8016f9c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d109      	bne.n	8016fb8 <udp_connect+0x28>
 8016fa4:	4b2c      	ldr	r3, [pc, #176]	; (8017058 <udp_connect+0xc8>)
 8016fa6:	f240 4235 	movw	r2, #1077	; 0x435
 8016faa:	492c      	ldr	r1, [pc, #176]	; (801705c <udp_connect+0xcc>)
 8016fac:	482c      	ldr	r0, [pc, #176]	; (8017060 <udp_connect+0xd0>)
 8016fae:	f005 fed7 	bl	801cd60 <iprintf>
 8016fb2:	f06f 030f 	mvn.w	r3, #15
 8016fb6:	e04b      	b.n	8017050 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016fb8:	68bb      	ldr	r3, [r7, #8]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d109      	bne.n	8016fd2 <udp_connect+0x42>
 8016fbe:	4b26      	ldr	r3, [pc, #152]	; (8017058 <udp_connect+0xc8>)
 8016fc0:	f240 4236 	movw	r2, #1078	; 0x436
 8016fc4:	4927      	ldr	r1, [pc, #156]	; (8017064 <udp_connect+0xd4>)
 8016fc6:	4826      	ldr	r0, [pc, #152]	; (8017060 <udp_connect+0xd0>)
 8016fc8:	f005 feca 	bl	801cd60 <iprintf>
 8016fcc:	f06f 030f 	mvn.w	r3, #15
 8016fd0:	e03e      	b.n	8017050 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	8a5b      	ldrh	r3, [r3, #18]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d10f      	bne.n	8016ffa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016fda:	68f9      	ldr	r1, [r7, #12]
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	8a5b      	ldrh	r3, [r3, #18]
 8016fe0:	461a      	mov	r2, r3
 8016fe2:	68f8      	ldr	r0, [r7, #12]
 8016fe4:	f7ff ff4c 	bl	8016e80 <udp_bind>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016fec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d002      	beq.n	8016ffa <udp_connect+0x6a>
      return err;
 8016ff4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ff8:	e02a      	b.n	8017050 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8016ffa:	68bb      	ldr	r3, [r7, #8]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d002      	beq.n	8017006 <udp_connect+0x76>
 8017000:	68bb      	ldr	r3, [r7, #8]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	e000      	b.n	8017008 <udp_connect+0x78>
 8017006:	2300      	movs	r3, #0
 8017008:	68fa      	ldr	r2, [r7, #12]
 801700a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	88fa      	ldrh	r2, [r7, #6]
 8017010:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	7c1b      	ldrb	r3, [r3, #16]
 8017016:	f043 0304 	orr.w	r3, r3, #4
 801701a:	b2da      	uxtb	r2, r3
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017020:	4b11      	ldr	r3, [pc, #68]	; (8017068 <udp_connect+0xd8>)
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	617b      	str	r3, [r7, #20]
 8017026:	e008      	b.n	801703a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017028:	68fa      	ldr	r2, [r7, #12]
 801702a:	697b      	ldr	r3, [r7, #20]
 801702c:	429a      	cmp	r2, r3
 801702e:	d101      	bne.n	8017034 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017030:	2300      	movs	r3, #0
 8017032:	e00d      	b.n	8017050 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	68db      	ldr	r3, [r3, #12]
 8017038:	617b      	str	r3, [r7, #20]
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d1f3      	bne.n	8017028 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017040:	4b09      	ldr	r3, [pc, #36]	; (8017068 <udp_connect+0xd8>)
 8017042:	681a      	ldr	r2, [r3, #0]
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017048:	4a07      	ldr	r2, [pc, #28]	; (8017068 <udp_connect+0xd8>)
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801704e:	2300      	movs	r3, #0
}
 8017050:	4618      	mov	r0, r3
 8017052:	3718      	adds	r7, #24
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}
 8017058:	0802019c 	.word	0x0802019c
 801705c:	0802047c 	.word	0x0802047c
 8017060:	080201f0 	.word	0x080201f0
 8017064:	08020498 	.word	0x08020498
 8017068:	20013a0c 	.word	0x20013a0c

0801706c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b084      	sub	sp, #16
 8017070:	af00      	add	r7, sp, #0
 8017072:	60f8      	str	r0, [r7, #12]
 8017074:	60b9      	str	r1, [r7, #8]
 8017076:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d107      	bne.n	801708e <udp_recv+0x22>
 801707e:	4b08      	ldr	r3, [pc, #32]	; (80170a0 <udp_recv+0x34>)
 8017080:	f240 428a 	movw	r2, #1162	; 0x48a
 8017084:	4907      	ldr	r1, [pc, #28]	; (80170a4 <udp_recv+0x38>)
 8017086:	4808      	ldr	r0, [pc, #32]	; (80170a8 <udp_recv+0x3c>)
 8017088:	f005 fe6a 	bl	801cd60 <iprintf>
 801708c:	e005      	b.n	801709a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	68ba      	ldr	r2, [r7, #8]
 8017092:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	687a      	ldr	r2, [r7, #4]
 8017098:	61da      	str	r2, [r3, #28]
}
 801709a:	3710      	adds	r7, #16
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	0802019c 	.word	0x0802019c
 80170a4:	080204d0 	.word	0x080204d0
 80170a8:	080201f0 	.word	0x080201f0

080170ac <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b084      	sub	sp, #16
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d107      	bne.n	80170ca <udp_remove+0x1e>
 80170ba:	4b19      	ldr	r3, [pc, #100]	; (8017120 <udp_remove+0x74>)
 80170bc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80170c0:	4918      	ldr	r1, [pc, #96]	; (8017124 <udp_remove+0x78>)
 80170c2:	4819      	ldr	r0, [pc, #100]	; (8017128 <udp_remove+0x7c>)
 80170c4:	f005 fe4c 	bl	801cd60 <iprintf>
 80170c8:	e026      	b.n	8017118 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80170ca:	4b18      	ldr	r3, [pc, #96]	; (801712c <udp_remove+0x80>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	687a      	ldr	r2, [r7, #4]
 80170d0:	429a      	cmp	r2, r3
 80170d2:	d105      	bne.n	80170e0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80170d4:	4b15      	ldr	r3, [pc, #84]	; (801712c <udp_remove+0x80>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	68db      	ldr	r3, [r3, #12]
 80170da:	4a14      	ldr	r2, [pc, #80]	; (801712c <udp_remove+0x80>)
 80170dc:	6013      	str	r3, [r2, #0]
 80170de:	e017      	b.n	8017110 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80170e0:	4b12      	ldr	r3, [pc, #72]	; (801712c <udp_remove+0x80>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	60fb      	str	r3, [r7, #12]
 80170e6:	e010      	b.n	801710a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	68db      	ldr	r3, [r3, #12]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d009      	beq.n	8017104 <udp_remove+0x58>
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	68db      	ldr	r3, [r3, #12]
 80170f4:	687a      	ldr	r2, [r7, #4]
 80170f6:	429a      	cmp	r2, r3
 80170f8:	d104      	bne.n	8017104 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	68da      	ldr	r2, [r3, #12]
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	60da      	str	r2, [r3, #12]
        break;
 8017102:	e005      	b.n	8017110 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	68db      	ldr	r3, [r3, #12]
 8017108:	60fb      	str	r3, [r7, #12]
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d1eb      	bne.n	80170e8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017110:	6879      	ldr	r1, [r7, #4]
 8017112:	2000      	movs	r0, #0
 8017114:	f7f8 ff6c 	bl	800fff0 <memp_free>
}
 8017118:	3710      	adds	r7, #16
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	0802019c 	.word	0x0802019c
 8017124:	080204e8 	.word	0x080204e8
 8017128:	080201f0 	.word	0x080201f0
 801712c:	20013a0c 	.word	0x20013a0c

08017130 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b082      	sub	sp, #8
 8017134:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017136:	2000      	movs	r0, #0
 8017138:	f7f8 ff08 	bl	800ff4c <memp_malloc>
 801713c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d007      	beq.n	8017154 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017144:	2220      	movs	r2, #32
 8017146:	2100      	movs	r1, #0
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	f005 fda6 	bl	801cc9a <memset>
    pcb->ttl = UDP_TTL;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	22ff      	movs	r2, #255	; 0xff
 8017152:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017154:	687b      	ldr	r3, [r7, #4]
}
 8017156:	4618      	mov	r0, r3
 8017158:	3708      	adds	r7, #8
 801715a:	46bd      	mov	sp, r7
 801715c:	bd80      	pop	{r7, pc}
	...

08017160 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017160:	b480      	push	{r7}
 8017162:	b085      	sub	sp, #20
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d01e      	beq.n	80171ae <udp_netif_ip_addr_changed+0x4e>
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d01a      	beq.n	80171ae <udp_netif_ip_addr_changed+0x4e>
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d017      	beq.n	80171ae <udp_netif_ip_addr_changed+0x4e>
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d013      	beq.n	80171ae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017186:	4b0d      	ldr	r3, [pc, #52]	; (80171bc <udp_netif_ip_addr_changed+0x5c>)
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	60fb      	str	r3, [r7, #12]
 801718c:	e00c      	b.n	80171a8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681a      	ldr	r2, [r3, #0]
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	429a      	cmp	r2, r3
 8017198:	d103      	bne.n	80171a2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	68db      	ldr	r3, [r3, #12]
 80171a6:	60fb      	str	r3, [r7, #12]
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d1ef      	bne.n	801718e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80171ae:	bf00      	nop
 80171b0:	3714      	adds	r7, #20
 80171b2:	46bd      	mov	sp, r7
 80171b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b8:	4770      	bx	lr
 80171ba:	bf00      	nop
 80171bc:	20013a0c 	.word	0x20013a0c

080171c0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80171c4:	4b20      	ldr	r3, [pc, #128]	; (8017248 <dhcp_inc_pcb_refcount+0x88>)
 80171c6:	781b      	ldrb	r3, [r3, #0]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d133      	bne.n	8017234 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80171cc:	4b1f      	ldr	r3, [pc, #124]	; (801724c <dhcp_inc_pcb_refcount+0x8c>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d005      	beq.n	80171e0 <dhcp_inc_pcb_refcount+0x20>
 80171d4:	4b1e      	ldr	r3, [pc, #120]	; (8017250 <dhcp_inc_pcb_refcount+0x90>)
 80171d6:	22e5      	movs	r2, #229	; 0xe5
 80171d8:	491e      	ldr	r1, [pc, #120]	; (8017254 <dhcp_inc_pcb_refcount+0x94>)
 80171da:	481f      	ldr	r0, [pc, #124]	; (8017258 <dhcp_inc_pcb_refcount+0x98>)
 80171dc:	f005 fdc0 	bl	801cd60 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80171e0:	f7ff ffa6 	bl	8017130 <udp_new>
 80171e4:	4603      	mov	r3, r0
 80171e6:	4a19      	ldr	r2, [pc, #100]	; (801724c <dhcp_inc_pcb_refcount+0x8c>)
 80171e8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80171ea:	4b18      	ldr	r3, [pc, #96]	; (801724c <dhcp_inc_pcb_refcount+0x8c>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d102      	bne.n	80171f8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80171f2:	f04f 33ff 	mov.w	r3, #4294967295
 80171f6:	e024      	b.n	8017242 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80171f8:	4b14      	ldr	r3, [pc, #80]	; (801724c <dhcp_inc_pcb_refcount+0x8c>)
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	7a5a      	ldrb	r2, [r3, #9]
 80171fe:	4b13      	ldr	r3, [pc, #76]	; (801724c <dhcp_inc_pcb_refcount+0x8c>)
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	f042 0220 	orr.w	r2, r2, #32
 8017206:	b2d2      	uxtb	r2, r2
 8017208:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801720a:	4b10      	ldr	r3, [pc, #64]	; (801724c <dhcp_inc_pcb_refcount+0x8c>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	2244      	movs	r2, #68	; 0x44
 8017210:	4912      	ldr	r1, [pc, #72]	; (801725c <dhcp_inc_pcb_refcount+0x9c>)
 8017212:	4618      	mov	r0, r3
 8017214:	f7ff fe34 	bl	8016e80 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8017218:	4b0c      	ldr	r3, [pc, #48]	; (801724c <dhcp_inc_pcb_refcount+0x8c>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	2243      	movs	r2, #67	; 0x43
 801721e:	490f      	ldr	r1, [pc, #60]	; (801725c <dhcp_inc_pcb_refcount+0x9c>)
 8017220:	4618      	mov	r0, r3
 8017222:	f7ff feb5 	bl	8016f90 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8017226:	4b09      	ldr	r3, [pc, #36]	; (801724c <dhcp_inc_pcb_refcount+0x8c>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	2200      	movs	r2, #0
 801722c:	490c      	ldr	r1, [pc, #48]	; (8017260 <dhcp_inc_pcb_refcount+0xa0>)
 801722e:	4618      	mov	r0, r3
 8017230:	f7ff ff1c 	bl	801706c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8017234:	4b04      	ldr	r3, [pc, #16]	; (8017248 <dhcp_inc_pcb_refcount+0x88>)
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	3301      	adds	r3, #1
 801723a:	b2da      	uxtb	r2, r3
 801723c:	4b02      	ldr	r3, [pc, #8]	; (8017248 <dhcp_inc_pcb_refcount+0x88>)
 801723e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8017240:	2300      	movs	r3, #0
}
 8017242:	4618      	mov	r0, r3
 8017244:	bd80      	pop	{r7, pc}
 8017246:	bf00      	nop
 8017248:	2000afec 	.word	0x2000afec
 801724c:	2000afe8 	.word	0x2000afe8
 8017250:	08020500 	.word	0x08020500
 8017254:	08020538 	.word	0x08020538
 8017258:	08020560 	.word	0x08020560
 801725c:	080211e8 	.word	0x080211e8
 8017260:	08018af5 	.word	0x08018af5

08017264 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8017268:	4b0e      	ldr	r3, [pc, #56]	; (80172a4 <dhcp_dec_pcb_refcount+0x40>)
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d105      	bne.n	801727c <dhcp_dec_pcb_refcount+0x18>
 8017270:	4b0d      	ldr	r3, [pc, #52]	; (80172a8 <dhcp_dec_pcb_refcount+0x44>)
 8017272:	22ff      	movs	r2, #255	; 0xff
 8017274:	490d      	ldr	r1, [pc, #52]	; (80172ac <dhcp_dec_pcb_refcount+0x48>)
 8017276:	480e      	ldr	r0, [pc, #56]	; (80172b0 <dhcp_dec_pcb_refcount+0x4c>)
 8017278:	f005 fd72 	bl	801cd60 <iprintf>
  dhcp_pcb_refcount--;
 801727c:	4b09      	ldr	r3, [pc, #36]	; (80172a4 <dhcp_dec_pcb_refcount+0x40>)
 801727e:	781b      	ldrb	r3, [r3, #0]
 8017280:	3b01      	subs	r3, #1
 8017282:	b2da      	uxtb	r2, r3
 8017284:	4b07      	ldr	r3, [pc, #28]	; (80172a4 <dhcp_dec_pcb_refcount+0x40>)
 8017286:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8017288:	4b06      	ldr	r3, [pc, #24]	; (80172a4 <dhcp_dec_pcb_refcount+0x40>)
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d107      	bne.n	80172a0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8017290:	4b08      	ldr	r3, [pc, #32]	; (80172b4 <dhcp_dec_pcb_refcount+0x50>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	4618      	mov	r0, r3
 8017296:	f7ff ff09 	bl	80170ac <udp_remove>
    dhcp_pcb = NULL;
 801729a:	4b06      	ldr	r3, [pc, #24]	; (80172b4 <dhcp_dec_pcb_refcount+0x50>)
 801729c:	2200      	movs	r2, #0
 801729e:	601a      	str	r2, [r3, #0]
  }
}
 80172a0:	bf00      	nop
 80172a2:	bd80      	pop	{r7, pc}
 80172a4:	2000afec 	.word	0x2000afec
 80172a8:	08020500 	.word	0x08020500
 80172ac:	08020588 	.word	0x08020588
 80172b0:	08020560 	.word	0x08020560
 80172b4:	2000afe8 	.word	0x2000afe8

080172b8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b084      	sub	sp, #16
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172c4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80172c6:	210c      	movs	r1, #12
 80172c8:	68f8      	ldr	r0, [r7, #12]
 80172ca:	f001 f855 	bl	8018378 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80172ce:	4b06      	ldr	r3, [pc, #24]	; (80172e8 <dhcp_handle_nak+0x30>)
 80172d0:	4a05      	ldr	r2, [pc, #20]	; (80172e8 <dhcp_handle_nak+0x30>)
 80172d2:	4905      	ldr	r1, [pc, #20]	; (80172e8 <dhcp_handle_nak+0x30>)
 80172d4:	6878      	ldr	r0, [r7, #4]
 80172d6:	f7f9 f82d 	bl	8010334 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80172da:	6878      	ldr	r0, [r7, #4]
 80172dc:	f000 fc48 	bl	8017b70 <dhcp_discover>
}
 80172e0:	bf00      	nop
 80172e2:	3710      	adds	r7, #16
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	080211e8 	.word	0x080211e8

080172ec <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b084      	sub	sp, #16
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172f8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80172fa:	2108      	movs	r1, #8
 80172fc:	68f8      	ldr	r0, [r7, #12]
 80172fe:	f001 f83b 	bl	8018378 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	331c      	adds	r3, #28
 8017306:	2200      	movs	r2, #0
 8017308:	4619      	mov	r1, r3
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	f002 fb3c 	bl	8019988 <etharp_query>
 8017310:	4603      	mov	r3, r0
 8017312:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	799b      	ldrb	r3, [r3, #6]
 8017318:	2bff      	cmp	r3, #255	; 0xff
 801731a:	d005      	beq.n	8017328 <dhcp_check+0x3c>
    dhcp->tries++;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	799b      	ldrb	r3, [r3, #6]
 8017320:	3301      	adds	r3, #1
 8017322:	b2da      	uxtb	r2, r3
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8017328:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801732c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801732e:	893b      	ldrh	r3, [r7, #8]
 8017330:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017334:	4a06      	ldr	r2, [pc, #24]	; (8017350 <dhcp_check+0x64>)
 8017336:	fb82 1203 	smull	r1, r2, r2, r3
 801733a:	1152      	asrs	r2, r2, #5
 801733c:	17db      	asrs	r3, r3, #31
 801733e:	1ad3      	subs	r3, r2, r3
 8017340:	b29a      	uxth	r2, r3
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8017346:	bf00      	nop
 8017348:	3710      	adds	r7, #16
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}
 801734e:	bf00      	nop
 8017350:	10624dd3 	.word	0x10624dd3

08017354 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b084      	sub	sp, #16
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017362:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8017364:	4b0c      	ldr	r3, [pc, #48]	; (8017398 <dhcp_handle_offer+0x44>)
 8017366:	789b      	ldrb	r3, [r3, #2]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d011      	beq.n	8017390 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	2200      	movs	r2, #0
 8017370:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8017372:	4b0a      	ldr	r3, [pc, #40]	; (801739c <dhcp_handle_offer+0x48>)
 8017374:	689b      	ldr	r3, [r3, #8]
 8017376:	4618      	mov	r0, r3
 8017378:	f7f8 f947 	bl	800f60a <lwip_htonl>
 801737c:	4602      	mov	r2, r0
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	691a      	ldr	r2, [r3, #16]
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f000 f808 	bl	80173a0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8017390:	bf00      	nop
 8017392:	3710      	adds	r7, #16
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}
 8017398:	20013a10 	.word	0x20013a10
 801739c:	20013a18 	.word	0x20013a18

080173a0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80173a0:	b5b0      	push	{r4, r5, r7, lr}
 80173a2:	b08a      	sub	sp, #40	; 0x28
 80173a4:	af02      	add	r7, sp, #8
 80173a6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d109      	bne.n	80173c2 <dhcp_select+0x22>
 80173ae:	4b71      	ldr	r3, [pc, #452]	; (8017574 <dhcp_select+0x1d4>)
 80173b0:	f240 1277 	movw	r2, #375	; 0x177
 80173b4:	4970      	ldr	r1, [pc, #448]	; (8017578 <dhcp_select+0x1d8>)
 80173b6:	4871      	ldr	r0, [pc, #452]	; (801757c <dhcp_select+0x1dc>)
 80173b8:	f005 fcd2 	bl	801cd60 <iprintf>
 80173bc:	f06f 030f 	mvn.w	r3, #15
 80173c0:	e0d3      	b.n	801756a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173c6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80173c8:	69bb      	ldr	r3, [r7, #24]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d109      	bne.n	80173e2 <dhcp_select+0x42>
 80173ce:	4b69      	ldr	r3, [pc, #420]	; (8017574 <dhcp_select+0x1d4>)
 80173d0:	f240 1279 	movw	r2, #377	; 0x179
 80173d4:	496a      	ldr	r1, [pc, #424]	; (8017580 <dhcp_select+0x1e0>)
 80173d6:	4869      	ldr	r0, [pc, #420]	; (801757c <dhcp_select+0x1dc>)
 80173d8:	f005 fcc2 	bl	801cd60 <iprintf>
 80173dc:	f06f 0305 	mvn.w	r3, #5
 80173e0:	e0c3      	b.n	801756a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80173e2:	2101      	movs	r1, #1
 80173e4:	69b8      	ldr	r0, [r7, #24]
 80173e6:	f000 ffc7 	bl	8018378 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80173ea:	f107 030c 	add.w	r3, r7, #12
 80173ee:	2203      	movs	r2, #3
 80173f0:	69b9      	ldr	r1, [r7, #24]
 80173f2:	6878      	ldr	r0, [r7, #4]
 80173f4:	f001 fc4c 	bl	8018c90 <dhcp_create_msg>
 80173f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	f000 8085 	beq.w	801750c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	685b      	ldr	r3, [r3, #4]
 8017406:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017408:	89b8      	ldrh	r0, [r7, #12]
 801740a:	693b      	ldr	r3, [r7, #16]
 801740c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017410:	2302      	movs	r3, #2
 8017412:	2239      	movs	r2, #57	; 0x39
 8017414:	f000 ffca 	bl	80183ac <dhcp_option>
 8017418:	4603      	mov	r3, r0
 801741a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801741c:	89b8      	ldrh	r0, [r7, #12]
 801741e:	693b      	ldr	r3, [r7, #16]
 8017420:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017428:	461a      	mov	r2, r3
 801742a:	f001 f819 	bl	8018460 <dhcp_option_short>
 801742e:	4603      	mov	r3, r0
 8017430:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017432:	89b8      	ldrh	r0, [r7, #12]
 8017434:	693b      	ldr	r3, [r7, #16]
 8017436:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801743a:	2304      	movs	r3, #4
 801743c:	2232      	movs	r2, #50	; 0x32
 801743e:	f000 ffb5 	bl	80183ac <dhcp_option>
 8017442:	4603      	mov	r3, r0
 8017444:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017446:	89bc      	ldrh	r4, [r7, #12]
 8017448:	693b      	ldr	r3, [r7, #16]
 801744a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801744e:	69bb      	ldr	r3, [r7, #24]
 8017450:	69db      	ldr	r3, [r3, #28]
 8017452:	4618      	mov	r0, r3
 8017454:	f7f8 f8d9 	bl	800f60a <lwip_htonl>
 8017458:	4603      	mov	r3, r0
 801745a:	461a      	mov	r2, r3
 801745c:	4629      	mov	r1, r5
 801745e:	4620      	mov	r0, r4
 8017460:	f001 f830 	bl	80184c4 <dhcp_option_long>
 8017464:	4603      	mov	r3, r0
 8017466:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8017468:	89b8      	ldrh	r0, [r7, #12]
 801746a:	693b      	ldr	r3, [r7, #16]
 801746c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017470:	2304      	movs	r3, #4
 8017472:	2236      	movs	r2, #54	; 0x36
 8017474:	f000 ff9a 	bl	80183ac <dhcp_option>
 8017478:	4603      	mov	r3, r0
 801747a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801747c:	89bc      	ldrh	r4, [r7, #12]
 801747e:	693b      	ldr	r3, [r7, #16]
 8017480:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017484:	69bb      	ldr	r3, [r7, #24]
 8017486:	699b      	ldr	r3, [r3, #24]
 8017488:	4618      	mov	r0, r3
 801748a:	f7f8 f8be 	bl	800f60a <lwip_htonl>
 801748e:	4603      	mov	r3, r0
 8017490:	461a      	mov	r2, r3
 8017492:	4629      	mov	r1, r5
 8017494:	4620      	mov	r0, r4
 8017496:	f001 f815 	bl	80184c4 <dhcp_option_long>
 801749a:	4603      	mov	r3, r0
 801749c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801749e:	89b8      	ldrh	r0, [r7, #12]
 80174a0:	693b      	ldr	r3, [r7, #16]
 80174a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174a6:	2303      	movs	r3, #3
 80174a8:	2237      	movs	r2, #55	; 0x37
 80174aa:	f000 ff7f 	bl	80183ac <dhcp_option>
 80174ae:	4603      	mov	r3, r0
 80174b0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80174b2:	2300      	movs	r3, #0
 80174b4:	77bb      	strb	r3, [r7, #30]
 80174b6:	e00e      	b.n	80174d6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80174b8:	89b8      	ldrh	r0, [r7, #12]
 80174ba:	693b      	ldr	r3, [r7, #16]
 80174bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174c0:	7fbb      	ldrb	r3, [r7, #30]
 80174c2:	4a30      	ldr	r2, [pc, #192]	; (8017584 <dhcp_select+0x1e4>)
 80174c4:	5cd3      	ldrb	r3, [r2, r3]
 80174c6:	461a      	mov	r2, r3
 80174c8:	f000 ffa4 	bl	8018414 <dhcp_option_byte>
 80174cc:	4603      	mov	r3, r0
 80174ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80174d0:	7fbb      	ldrb	r3, [r7, #30]
 80174d2:	3301      	adds	r3, #1
 80174d4:	77bb      	strb	r3, [r7, #30]
 80174d6:	7fbb      	ldrb	r3, [r7, #30]
 80174d8:	2b02      	cmp	r3, #2
 80174da:	d9ed      	bls.n	80174b8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80174dc:	89b8      	ldrh	r0, [r7, #12]
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	33f0      	adds	r3, #240	; 0xf0
 80174e2:	697a      	ldr	r2, [r7, #20]
 80174e4:	4619      	mov	r1, r3
 80174e6:	f001 fca9 	bl	8018e3c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80174ea:	4b27      	ldr	r3, [pc, #156]	; (8017588 <dhcp_select+0x1e8>)
 80174ec:	6818      	ldr	r0, [r3, #0]
 80174ee:	4b27      	ldr	r3, [pc, #156]	; (801758c <dhcp_select+0x1ec>)
 80174f0:	9301      	str	r3, [sp, #4]
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	9300      	str	r3, [sp, #0]
 80174f6:	2343      	movs	r3, #67	; 0x43
 80174f8:	4a25      	ldr	r2, [pc, #148]	; (8017590 <dhcp_select+0x1f0>)
 80174fa:	6979      	ldr	r1, [r7, #20]
 80174fc:	f7ff fbda 	bl	8016cb4 <udp_sendto_if_src>
 8017500:	4603      	mov	r3, r0
 8017502:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017504:	6978      	ldr	r0, [r7, #20]
 8017506:	f7f9 fc23 	bl	8010d50 <pbuf_free>
 801750a:	e001      	b.n	8017510 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801750c:	23ff      	movs	r3, #255	; 0xff
 801750e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017510:	69bb      	ldr	r3, [r7, #24]
 8017512:	799b      	ldrb	r3, [r3, #6]
 8017514:	2bff      	cmp	r3, #255	; 0xff
 8017516:	d005      	beq.n	8017524 <dhcp_select+0x184>
    dhcp->tries++;
 8017518:	69bb      	ldr	r3, [r7, #24]
 801751a:	799b      	ldrb	r3, [r3, #6]
 801751c:	3301      	adds	r3, #1
 801751e:	b2da      	uxtb	r2, r3
 8017520:	69bb      	ldr	r3, [r7, #24]
 8017522:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017524:	69bb      	ldr	r3, [r7, #24]
 8017526:	799b      	ldrb	r3, [r3, #6]
 8017528:	2b05      	cmp	r3, #5
 801752a:	d80d      	bhi.n	8017548 <dhcp_select+0x1a8>
 801752c:	69bb      	ldr	r3, [r7, #24]
 801752e:	799b      	ldrb	r3, [r3, #6]
 8017530:	461a      	mov	r2, r3
 8017532:	2301      	movs	r3, #1
 8017534:	4093      	lsls	r3, r2
 8017536:	b29b      	uxth	r3, r3
 8017538:	461a      	mov	r2, r3
 801753a:	0152      	lsls	r2, r2, #5
 801753c:	1ad2      	subs	r2, r2, r3
 801753e:	0092      	lsls	r2, r2, #2
 8017540:	4413      	add	r3, r2
 8017542:	00db      	lsls	r3, r3, #3
 8017544:	b29b      	uxth	r3, r3
 8017546:	e001      	b.n	801754c <dhcp_select+0x1ac>
 8017548:	f64e 2360 	movw	r3, #60000	; 0xea60
 801754c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801754e:	89fb      	ldrh	r3, [r7, #14]
 8017550:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017554:	4a0f      	ldr	r2, [pc, #60]	; (8017594 <dhcp_select+0x1f4>)
 8017556:	fb82 1203 	smull	r1, r2, r2, r3
 801755a:	1152      	asrs	r2, r2, #5
 801755c:	17db      	asrs	r3, r3, #31
 801755e:	1ad3      	subs	r3, r2, r3
 8017560:	b29a      	uxth	r2, r3
 8017562:	69bb      	ldr	r3, [r7, #24]
 8017564:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017566:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801756a:	4618      	mov	r0, r3
 801756c:	3720      	adds	r7, #32
 801756e:	46bd      	mov	sp, r7
 8017570:	bdb0      	pop	{r4, r5, r7, pc}
 8017572:	bf00      	nop
 8017574:	08020500 	.word	0x08020500
 8017578:	080205ac 	.word	0x080205ac
 801757c:	08020560 	.word	0x08020560
 8017580:	080205c8 	.word	0x080205c8
 8017584:	200000f0 	.word	0x200000f0
 8017588:	2000afe8 	.word	0x2000afe8
 801758c:	080211e8 	.word	0x080211e8
 8017590:	080211ec 	.word	0x080211ec
 8017594:	10624dd3 	.word	0x10624dd3

08017598 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801759e:	4b27      	ldr	r3, [pc, #156]	; (801763c <dhcp_coarse_tmr+0xa4>)
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	607b      	str	r3, [r7, #4]
 80175a4:	e042      	b.n	801762c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175aa:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d039      	beq.n	8017626 <dhcp_coarse_tmr+0x8e>
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	795b      	ldrb	r3, [r3, #5]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d035      	beq.n	8017626 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	8a9b      	ldrh	r3, [r3, #20]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d012      	beq.n	80175e8 <dhcp_coarse_tmr+0x50>
 80175c2:	683b      	ldr	r3, [r7, #0]
 80175c4:	8a5b      	ldrh	r3, [r3, #18]
 80175c6:	3301      	adds	r3, #1
 80175c8:	b29a      	uxth	r2, r3
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	825a      	strh	r2, [r3, #18]
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	8a5a      	ldrh	r2, [r3, #18]
 80175d2:	683b      	ldr	r3, [r7, #0]
 80175d4:	8a9b      	ldrh	r3, [r3, #20]
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d106      	bne.n	80175e8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f000 fe32 	bl	8018244 <dhcp_release_and_stop>
        dhcp_start(netif);
 80175e0:	6878      	ldr	r0, [r7, #4]
 80175e2:	f000 f969 	bl	80178b8 <dhcp_start>
 80175e6:	e01e      	b.n	8017626 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80175e8:	683b      	ldr	r3, [r7, #0]
 80175ea:	8a1b      	ldrh	r3, [r3, #16]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d00b      	beq.n	8017608 <dhcp_coarse_tmr+0x70>
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	8a1b      	ldrh	r3, [r3, #16]
 80175f4:	1e5a      	subs	r2, r3, #1
 80175f6:	b291      	uxth	r1, r2
 80175f8:	683a      	ldr	r2, [r7, #0]
 80175fa:	8211      	strh	r1, [r2, #16]
 80175fc:	2b01      	cmp	r3, #1
 80175fe:	d103      	bne.n	8017608 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8017600:	6878      	ldr	r0, [r7, #4]
 8017602:	f000 f8c6 	bl	8017792 <dhcp_t2_timeout>
 8017606:	e00e      	b.n	8017626 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	89db      	ldrh	r3, [r3, #14]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d00a      	beq.n	8017626 <dhcp_coarse_tmr+0x8e>
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	89db      	ldrh	r3, [r3, #14]
 8017614:	1e5a      	subs	r2, r3, #1
 8017616:	b291      	uxth	r1, r2
 8017618:	683a      	ldr	r2, [r7, #0]
 801761a:	81d1      	strh	r1, [r2, #14]
 801761c:	2b01      	cmp	r3, #1
 801761e:	d102      	bne.n	8017626 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f000 f888 	bl	8017736 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	607b      	str	r3, [r7, #4]
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d1b9      	bne.n	80175a6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8017632:	bf00      	nop
 8017634:	bf00      	nop
 8017636:	3708      	adds	r7, #8
 8017638:	46bd      	mov	sp, r7
 801763a:	bd80      	pop	{r7, pc}
 801763c:	200139e4 	.word	0x200139e4

08017640 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b082      	sub	sp, #8
 8017644:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8017646:	4b16      	ldr	r3, [pc, #88]	; (80176a0 <dhcp_fine_tmr+0x60>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	607b      	str	r3, [r7, #4]
 801764c:	e020      	b.n	8017690 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017652:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d017      	beq.n	801768a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	891b      	ldrh	r3, [r3, #8]
 801765e:	2b01      	cmp	r3, #1
 8017660:	d906      	bls.n	8017670 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8017662:	683b      	ldr	r3, [r7, #0]
 8017664:	891b      	ldrh	r3, [r3, #8]
 8017666:	3b01      	subs	r3, #1
 8017668:	b29a      	uxth	r2, r3
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	811a      	strh	r2, [r3, #8]
 801766e:	e00c      	b.n	801768a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8017670:	683b      	ldr	r3, [r7, #0]
 8017672:	891b      	ldrh	r3, [r3, #8]
 8017674:	2b01      	cmp	r3, #1
 8017676:	d108      	bne.n	801768a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8017678:	683b      	ldr	r3, [r7, #0]
 801767a:	891b      	ldrh	r3, [r3, #8]
 801767c:	3b01      	subs	r3, #1
 801767e:	b29a      	uxth	r2, r3
 8017680:	683b      	ldr	r3, [r7, #0]
 8017682:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f000 f80d 	bl	80176a4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	607b      	str	r3, [r7, #4]
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d1db      	bne.n	801764e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8017696:	bf00      	nop
 8017698:	bf00      	nop
 801769a:	3708      	adds	r7, #8
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}
 80176a0:	200139e4 	.word	0x200139e4

080176a4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b084      	sub	sp, #16
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176b0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	795b      	ldrb	r3, [r3, #5]
 80176b6:	2b0c      	cmp	r3, #12
 80176b8:	d003      	beq.n	80176c2 <dhcp_timeout+0x1e>
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	795b      	ldrb	r3, [r3, #5]
 80176be:	2b06      	cmp	r3, #6
 80176c0:	d103      	bne.n	80176ca <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f000 fa54 	bl	8017b70 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80176c8:	e031      	b.n	801772e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	795b      	ldrb	r3, [r3, #5]
 80176ce:	2b01      	cmp	r3, #1
 80176d0:	d10e      	bne.n	80176f0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	799b      	ldrb	r3, [r3, #6]
 80176d6:	2b05      	cmp	r3, #5
 80176d8:	d803      	bhi.n	80176e2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80176da:	6878      	ldr	r0, [r7, #4]
 80176dc:	f7ff fe60 	bl	80173a0 <dhcp_select>
}
 80176e0:	e025      	b.n	801772e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80176e2:	6878      	ldr	r0, [r7, #4]
 80176e4:	f000 fdae 	bl	8018244 <dhcp_release_and_stop>
      dhcp_start(netif);
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f000 f8e5 	bl	80178b8 <dhcp_start>
}
 80176ee:	e01e      	b.n	801772e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	795b      	ldrb	r3, [r3, #5]
 80176f4:	2b08      	cmp	r3, #8
 80176f6:	d10b      	bne.n	8017710 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	799b      	ldrb	r3, [r3, #6]
 80176fc:	2b01      	cmp	r3, #1
 80176fe:	d803      	bhi.n	8017708 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f7ff fdf3 	bl	80172ec <dhcp_check>
}
 8017706:	e012      	b.n	801772e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f000 fad3 	bl	8017cb4 <dhcp_bind>
}
 801770e:	e00e      	b.n	801772e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	795b      	ldrb	r3, [r3, #5]
 8017714:	2b03      	cmp	r3, #3
 8017716:	d10a      	bne.n	801772e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	799b      	ldrb	r3, [r3, #6]
 801771c:	2b01      	cmp	r3, #1
 801771e:	d803      	bhi.n	8017728 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f000 fcd9 	bl	80180d8 <dhcp_reboot>
}
 8017726:	e002      	b.n	801772e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8017728:	6878      	ldr	r0, [r7, #4]
 801772a:	f000 fa21 	bl	8017b70 <dhcp_discover>
}
 801772e:	bf00      	nop
 8017730:	3710      	adds	r7, #16
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}

08017736 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8017736:	b580      	push	{r7, lr}
 8017738:	b084      	sub	sp, #16
 801773a:	af00      	add	r7, sp, #0
 801773c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017742:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	795b      	ldrb	r3, [r3, #5]
 8017748:	2b01      	cmp	r3, #1
 801774a:	d007      	beq.n	801775c <dhcp_t1_timeout+0x26>
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	795b      	ldrb	r3, [r3, #5]
 8017750:	2b0a      	cmp	r3, #10
 8017752:	d003      	beq.n	801775c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017758:	2b05      	cmp	r3, #5
 801775a:	d116      	bne.n	801778a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801775c:	6878      	ldr	r0, [r7, #4]
 801775e:	f000 fb83 	bl	8017e68 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	899b      	ldrh	r3, [r3, #12]
 8017766:	461a      	mov	r2, r3
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	8a5b      	ldrh	r3, [r3, #18]
 801776c:	1ad3      	subs	r3, r2, r3
 801776e:	2b01      	cmp	r3, #1
 8017770:	dd0b      	ble.n	801778a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	899b      	ldrh	r3, [r3, #12]
 8017776:	461a      	mov	r2, r3
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	8a5b      	ldrh	r3, [r3, #18]
 801777c:	1ad3      	subs	r3, r2, r3
 801777e:	0fda      	lsrs	r2, r3, #31
 8017780:	4413      	add	r3, r2
 8017782:	105b      	asrs	r3, r3, #1
 8017784:	b29a      	uxth	r2, r3
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801778a:	bf00      	nop
 801778c:	3710      	adds	r7, #16
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}

08017792 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8017792:	b580      	push	{r7, lr}
 8017794:	b084      	sub	sp, #16
 8017796:	af00      	add	r7, sp, #0
 8017798:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801779e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	795b      	ldrb	r3, [r3, #5]
 80177a4:	2b01      	cmp	r3, #1
 80177a6:	d00b      	beq.n	80177c0 <dhcp_t2_timeout+0x2e>
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	795b      	ldrb	r3, [r3, #5]
 80177ac:	2b0a      	cmp	r3, #10
 80177ae:	d007      	beq.n	80177c0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80177b4:	2b05      	cmp	r3, #5
 80177b6:	d003      	beq.n	80177c0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	795b      	ldrb	r3, [r3, #5]
 80177bc:	2b04      	cmp	r3, #4
 80177be:	d116      	bne.n	80177ee <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80177c0:	6878      	ldr	r0, [r7, #4]
 80177c2:	f000 fbed 	bl	8017fa0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	8a9b      	ldrh	r3, [r3, #20]
 80177ca:	461a      	mov	r2, r3
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	8a5b      	ldrh	r3, [r3, #18]
 80177d0:	1ad3      	subs	r3, r2, r3
 80177d2:	2b01      	cmp	r3, #1
 80177d4:	dd0b      	ble.n	80177ee <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	8a9b      	ldrh	r3, [r3, #20]
 80177da:	461a      	mov	r2, r3
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	8a5b      	ldrh	r3, [r3, #18]
 80177e0:	1ad3      	subs	r3, r2, r3
 80177e2:	0fda      	lsrs	r2, r3, #31
 80177e4:	4413      	add	r3, r2
 80177e6:	105b      	asrs	r3, r3, #1
 80177e8:	b29a      	uxth	r2, r3
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80177ee:	bf00      	nop
 80177f0:	3710      	adds	r7, #16
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}
	...

080177f8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b084      	sub	sp, #16
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
 8017800:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017806:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2200      	movs	r2, #0
 801780c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	2200      	movs	r2, #0
 8017812:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8017814:	4b26      	ldr	r3, [pc, #152]	; (80178b0 <dhcp_handle_ack+0xb8>)
 8017816:	78db      	ldrb	r3, [r3, #3]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d003      	beq.n	8017824 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801781c:	4b25      	ldr	r3, [pc, #148]	; (80178b4 <dhcp_handle_ack+0xbc>)
 801781e:	68da      	ldr	r2, [r3, #12]
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8017824:	4b22      	ldr	r3, [pc, #136]	; (80178b0 <dhcp_handle_ack+0xb8>)
 8017826:	791b      	ldrb	r3, [r3, #4]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d004      	beq.n	8017836 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801782c:	4b21      	ldr	r3, [pc, #132]	; (80178b4 <dhcp_handle_ack+0xbc>)
 801782e:	691a      	ldr	r2, [r3, #16]
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	62da      	str	r2, [r3, #44]	; 0x2c
 8017834:	e004      	b.n	8017840 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801783a:	085a      	lsrs	r2, r3, #1
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8017840:	4b1b      	ldr	r3, [pc, #108]	; (80178b0 <dhcp_handle_ack+0xb8>)
 8017842:	795b      	ldrb	r3, [r3, #5]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d004      	beq.n	8017852 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8017848:	4b1a      	ldr	r3, [pc, #104]	; (80178b4 <dhcp_handle_ack+0xbc>)
 801784a:	695a      	ldr	r2, [r3, #20]
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	631a      	str	r2, [r3, #48]	; 0x30
 8017850:	e007      	b.n	8017862 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017856:	4613      	mov	r3, r2
 8017858:	00db      	lsls	r3, r3, #3
 801785a:	1a9b      	subs	r3, r3, r2
 801785c:	08da      	lsrs	r2, r3, #3
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8017862:	683b      	ldr	r3, [r7, #0]
 8017864:	691a      	ldr	r2, [r3, #16]
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801786a:	4b11      	ldr	r3, [pc, #68]	; (80178b0 <dhcp_handle_ack+0xb8>)
 801786c:	799b      	ldrb	r3, [r3, #6]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d00b      	beq.n	801788a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8017872:	4b10      	ldr	r3, [pc, #64]	; (80178b4 <dhcp_handle_ack+0xbc>)
 8017874:	699b      	ldr	r3, [r3, #24]
 8017876:	4618      	mov	r0, r3
 8017878:	f7f7 fec7 	bl	800f60a <lwip_htonl>
 801787c:	4602      	mov	r2, r0
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	2201      	movs	r2, #1
 8017886:	71da      	strb	r2, [r3, #7]
 8017888:	e002      	b.n	8017890 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	2200      	movs	r2, #0
 801788e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8017890:	4b07      	ldr	r3, [pc, #28]	; (80178b0 <dhcp_handle_ack+0xb8>)
 8017892:	79db      	ldrb	r3, [r3, #7]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d007      	beq.n	80178a8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8017898:	4b06      	ldr	r3, [pc, #24]	; (80178b4 <dhcp_handle_ack+0xbc>)
 801789a:	69db      	ldr	r3, [r3, #28]
 801789c:	4618      	mov	r0, r3
 801789e:	f7f7 feb4 	bl	800f60a <lwip_htonl>
 80178a2:	4602      	mov	r2, r0
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80178a8:	bf00      	nop
 80178aa:	3710      	adds	r7, #16
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}
 80178b0:	20013a10 	.word	0x20013a10
 80178b4:	20013a18 	.word	0x20013a18

080178b8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b084      	sub	sp, #16
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d109      	bne.n	80178da <dhcp_start+0x22>
 80178c6:	4b37      	ldr	r3, [pc, #220]	; (80179a4 <dhcp_start+0xec>)
 80178c8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80178cc:	4936      	ldr	r1, [pc, #216]	; (80179a8 <dhcp_start+0xf0>)
 80178ce:	4837      	ldr	r0, [pc, #220]	; (80179ac <dhcp_start+0xf4>)
 80178d0:	f005 fa46 	bl	801cd60 <iprintf>
 80178d4:	f06f 030f 	mvn.w	r3, #15
 80178d8:	e060      	b.n	801799c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80178e0:	f003 0301 	and.w	r3, r3, #1
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d109      	bne.n	80178fc <dhcp_start+0x44>
 80178e8:	4b2e      	ldr	r3, [pc, #184]	; (80179a4 <dhcp_start+0xec>)
 80178ea:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80178ee:	4930      	ldr	r1, [pc, #192]	; (80179b0 <dhcp_start+0xf8>)
 80178f0:	482e      	ldr	r0, [pc, #184]	; (80179ac <dhcp_start+0xf4>)
 80178f2:	f005 fa35 	bl	801cd60 <iprintf>
 80178f6:	f06f 030f 	mvn.w	r3, #15
 80178fa:	e04f      	b.n	801799c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017900:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017906:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801790a:	d202      	bcs.n	8017912 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801790c:	f04f 33ff 	mov.w	r3, #4294967295
 8017910:	e044      	b.n	801799c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d10d      	bne.n	8017934 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8017918:	2034      	movs	r0, #52	; 0x34
 801791a:	f7f8 f995 	bl	800fc48 <mem_malloc>
 801791e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d102      	bne.n	801792c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8017926:	f04f 33ff 	mov.w	r3, #4294967295
 801792a:	e037      	b.n	801799c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	68fa      	ldr	r2, [r7, #12]
 8017930:	625a      	str	r2, [r3, #36]	; 0x24
 8017932:	e005      	b.n	8017940 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	791b      	ldrb	r3, [r3, #4]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d001      	beq.n	8017940 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801793c:	f7ff fc92 	bl	8017264 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8017940:	2234      	movs	r2, #52	; 0x34
 8017942:	2100      	movs	r1, #0
 8017944:	68f8      	ldr	r0, [r7, #12]
 8017946:	f005 f9a8 	bl	801cc9a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801794a:	f7ff fc39 	bl	80171c0 <dhcp_inc_pcb_refcount>
 801794e:	4603      	mov	r3, r0
 8017950:	2b00      	cmp	r3, #0
 8017952:	d002      	beq.n	801795a <dhcp_start+0xa2>
    return ERR_MEM;
 8017954:	f04f 33ff 	mov.w	r3, #4294967295
 8017958:	e020      	b.n	801799c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	2201      	movs	r2, #1
 801795e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017966:	f003 0304 	and.w	r3, r3, #4
 801796a:	2b00      	cmp	r3, #0
 801796c:	d105      	bne.n	801797a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801796e:	2102      	movs	r1, #2
 8017970:	68f8      	ldr	r0, [r7, #12]
 8017972:	f000 fd01 	bl	8018378 <dhcp_set_state>
    return ERR_OK;
 8017976:	2300      	movs	r3, #0
 8017978:	e010      	b.n	801799c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f000 f8f8 	bl	8017b70 <dhcp_discover>
 8017980:	4603      	mov	r3, r0
 8017982:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8017984:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d005      	beq.n	8017998 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f000 fc59 	bl	8018244 <dhcp_release_and_stop>
    return ERR_MEM;
 8017992:	f04f 33ff 	mov.w	r3, #4294967295
 8017996:	e001      	b.n	801799c <dhcp_start+0xe4>
  }
  return result;
 8017998:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801799c:	4618      	mov	r0, r3
 801799e:	3710      	adds	r7, #16
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	08020500 	.word	0x08020500
 80179a8:	080205e4 	.word	0x080205e4
 80179ac:	08020560 	.word	0x08020560
 80179b0:	08020628 	.word	0x08020628

080179b4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b084      	sub	sp, #16
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179c0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d025      	beq.n	8017a14 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	795b      	ldrb	r3, [r3, #5]
 80179cc:	2b0a      	cmp	r3, #10
 80179ce:	d008      	beq.n	80179e2 <dhcp_network_changed+0x2e>
 80179d0:	2b0a      	cmp	r3, #10
 80179d2:	dc0d      	bgt.n	80179f0 <dhcp_network_changed+0x3c>
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d01f      	beq.n	8017a18 <dhcp_network_changed+0x64>
 80179d8:	2b00      	cmp	r3, #0
 80179da:	db09      	blt.n	80179f0 <dhcp_network_changed+0x3c>
 80179dc:	3b03      	subs	r3, #3
 80179de:	2b02      	cmp	r3, #2
 80179e0:	d806      	bhi.n	80179f0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	2200      	movs	r2, #0
 80179e6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80179e8:	6878      	ldr	r0, [r7, #4]
 80179ea:	f000 fb75 	bl	80180d8 <dhcp_reboot>
      break;
 80179ee:	e014      	b.n	8017a1a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	795b      	ldrb	r3, [r3, #5]
 80179f4:	2b0c      	cmp	r3, #12
 80179f6:	d906      	bls.n	8017a06 <dhcp_network_changed+0x52>
 80179f8:	4b09      	ldr	r3, [pc, #36]	; (8017a20 <dhcp_network_changed+0x6c>)
 80179fa:	f240 326d 	movw	r2, #877	; 0x36d
 80179fe:	4909      	ldr	r1, [pc, #36]	; (8017a24 <dhcp_network_changed+0x70>)
 8017a00:	4809      	ldr	r0, [pc, #36]	; (8017a28 <dhcp_network_changed+0x74>)
 8017a02:	f005 f9ad 	bl	801cd60 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	2200      	movs	r2, #0
 8017a0a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8017a0c:	6878      	ldr	r0, [r7, #4]
 8017a0e:	f000 f8af 	bl	8017b70 <dhcp_discover>
      break;
 8017a12:	e002      	b.n	8017a1a <dhcp_network_changed+0x66>
    return;
 8017a14:	bf00      	nop
 8017a16:	e000      	b.n	8017a1a <dhcp_network_changed+0x66>
      break;
 8017a18:	bf00      	nop
  }
}
 8017a1a:	3710      	adds	r7, #16
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	08020500 	.word	0x08020500
 8017a24:	0802064c 	.word	0x0802064c
 8017a28:	08020560 	.word	0x08020560

08017a2c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b084      	sub	sp, #16
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
 8017a34:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d107      	bne.n	8017a4c <dhcp_arp_reply+0x20>
 8017a3c:	4b0e      	ldr	r3, [pc, #56]	; (8017a78 <dhcp_arp_reply+0x4c>)
 8017a3e:	f240 328b 	movw	r2, #907	; 0x38b
 8017a42:	490e      	ldr	r1, [pc, #56]	; (8017a7c <dhcp_arp_reply+0x50>)
 8017a44:	480e      	ldr	r0, [pc, #56]	; (8017a80 <dhcp_arp_reply+0x54>)
 8017a46:	f005 f98b 	bl	801cd60 <iprintf>
 8017a4a:	e012      	b.n	8017a72 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a50:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d00c      	beq.n	8017a72 <dhcp_arp_reply+0x46>
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	795b      	ldrb	r3, [r3, #5]
 8017a5c:	2b08      	cmp	r3, #8
 8017a5e:	d108      	bne.n	8017a72 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	681a      	ldr	r2, [r3, #0]
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	69db      	ldr	r3, [r3, #28]
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	d102      	bne.n	8017a72 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f000 f809 	bl	8017a84 <dhcp_decline>
    }
  }
}
 8017a72:	3710      	adds	r7, #16
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	08020500 	.word	0x08020500
 8017a7c:	080205e4 	.word	0x080205e4
 8017a80:	08020560 	.word	0x08020560

08017a84 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8017a84:	b5b0      	push	{r4, r5, r7, lr}
 8017a86:	b08a      	sub	sp, #40	; 0x28
 8017a88:	af02      	add	r7, sp, #8
 8017a8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a90:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8017a92:	210c      	movs	r1, #12
 8017a94:	69b8      	ldr	r0, [r7, #24]
 8017a96:	f000 fc6f 	bl	8018378 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8017a9a:	f107 030c 	add.w	r3, r7, #12
 8017a9e:	2204      	movs	r2, #4
 8017aa0:	69b9      	ldr	r1, [r7, #24]
 8017aa2:	6878      	ldr	r0, [r7, #4]
 8017aa4:	f001 f8f4 	bl	8018c90 <dhcp_create_msg>
 8017aa8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017aaa:	697b      	ldr	r3, [r7, #20]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d035      	beq.n	8017b1c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017ab0:	697b      	ldr	r3, [r7, #20]
 8017ab2:	685b      	ldr	r3, [r3, #4]
 8017ab4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017ab6:	89b8      	ldrh	r0, [r7, #12]
 8017ab8:	693b      	ldr	r3, [r7, #16]
 8017aba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017abe:	2304      	movs	r3, #4
 8017ac0:	2232      	movs	r2, #50	; 0x32
 8017ac2:	f000 fc73 	bl	80183ac <dhcp_option>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017aca:	89bc      	ldrh	r4, [r7, #12]
 8017acc:	693b      	ldr	r3, [r7, #16]
 8017ace:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017ad2:	69bb      	ldr	r3, [r7, #24]
 8017ad4:	69db      	ldr	r3, [r3, #28]
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7f7 fd97 	bl	800f60a <lwip_htonl>
 8017adc:	4603      	mov	r3, r0
 8017ade:	461a      	mov	r2, r3
 8017ae0:	4629      	mov	r1, r5
 8017ae2:	4620      	mov	r0, r4
 8017ae4:	f000 fcee 	bl	80184c4 <dhcp_option_long>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017aec:	89b8      	ldrh	r0, [r7, #12]
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	33f0      	adds	r3, #240	; 0xf0
 8017af2:	697a      	ldr	r2, [r7, #20]
 8017af4:	4619      	mov	r1, r3
 8017af6:	f001 f9a1 	bl	8018e3c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017afa:	4b19      	ldr	r3, [pc, #100]	; (8017b60 <dhcp_decline+0xdc>)
 8017afc:	6818      	ldr	r0, [r3, #0]
 8017afe:	4b19      	ldr	r3, [pc, #100]	; (8017b64 <dhcp_decline+0xe0>)
 8017b00:	9301      	str	r3, [sp, #4]
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	9300      	str	r3, [sp, #0]
 8017b06:	2343      	movs	r3, #67	; 0x43
 8017b08:	4a17      	ldr	r2, [pc, #92]	; (8017b68 <dhcp_decline+0xe4>)
 8017b0a:	6979      	ldr	r1, [r7, #20]
 8017b0c:	f7ff f8d2 	bl	8016cb4 <udp_sendto_if_src>
 8017b10:	4603      	mov	r3, r0
 8017b12:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017b14:	6978      	ldr	r0, [r7, #20]
 8017b16:	f7f9 f91b 	bl	8010d50 <pbuf_free>
 8017b1a:	e001      	b.n	8017b20 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017b1c:	23ff      	movs	r3, #255	; 0xff
 8017b1e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017b20:	69bb      	ldr	r3, [r7, #24]
 8017b22:	799b      	ldrb	r3, [r3, #6]
 8017b24:	2bff      	cmp	r3, #255	; 0xff
 8017b26:	d005      	beq.n	8017b34 <dhcp_decline+0xb0>
    dhcp->tries++;
 8017b28:	69bb      	ldr	r3, [r7, #24]
 8017b2a:	799b      	ldrb	r3, [r3, #6]
 8017b2c:	3301      	adds	r3, #1
 8017b2e:	b2da      	uxtb	r2, r3
 8017b30:	69bb      	ldr	r3, [r7, #24]
 8017b32:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8017b34:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b38:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017b3a:	89fb      	ldrh	r3, [r7, #14]
 8017b3c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017b40:	4a0a      	ldr	r2, [pc, #40]	; (8017b6c <dhcp_decline+0xe8>)
 8017b42:	fb82 1203 	smull	r1, r2, r2, r3
 8017b46:	1152      	asrs	r2, r2, #5
 8017b48:	17db      	asrs	r3, r3, #31
 8017b4a:	1ad3      	subs	r3, r2, r3
 8017b4c:	b29a      	uxth	r2, r3
 8017b4e:	69bb      	ldr	r3, [r7, #24]
 8017b50:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017b52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	3720      	adds	r7, #32
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8017b5e:	bf00      	nop
 8017b60:	2000afe8 	.word	0x2000afe8
 8017b64:	080211e8 	.word	0x080211e8
 8017b68:	080211ec 	.word	0x080211ec
 8017b6c:	10624dd3 	.word	0x10624dd3

08017b70 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b08a      	sub	sp, #40	; 0x28
 8017b74:	af02      	add	r7, sp, #8
 8017b76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b7c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8017b82:	69bb      	ldr	r3, [r7, #24]
 8017b84:	2200      	movs	r2, #0
 8017b86:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8017b88:	2106      	movs	r1, #6
 8017b8a:	69b8      	ldr	r0, [r7, #24]
 8017b8c:	f000 fbf4 	bl	8018378 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8017b90:	f107 0308 	add.w	r3, r7, #8
 8017b94:	2201      	movs	r2, #1
 8017b96:	69b9      	ldr	r1, [r7, #24]
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f001 f879 	bl	8018c90 <dhcp_create_msg>
 8017b9e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8017ba0:	693b      	ldr	r3, [r7, #16]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d04b      	beq.n	8017c3e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017ba6:	693b      	ldr	r3, [r7, #16]
 8017ba8:	685b      	ldr	r3, [r3, #4]
 8017baa:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017bac:	8938      	ldrh	r0, [r7, #8]
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017bb4:	2302      	movs	r3, #2
 8017bb6:	2239      	movs	r2, #57	; 0x39
 8017bb8:	f000 fbf8 	bl	80183ac <dhcp_option>
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017bc0:	8938      	ldrh	r0, [r7, #8]
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bcc:	461a      	mov	r2, r3
 8017bce:	f000 fc47 	bl	8018460 <dhcp_option_short>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017bd6:	8938      	ldrh	r0, [r7, #8]
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017bde:	2303      	movs	r3, #3
 8017be0:	2237      	movs	r2, #55	; 0x37
 8017be2:	f000 fbe3 	bl	80183ac <dhcp_option>
 8017be6:	4603      	mov	r3, r0
 8017be8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017bea:	2300      	movs	r3, #0
 8017bec:	77fb      	strb	r3, [r7, #31]
 8017bee:	e00e      	b.n	8017c0e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017bf0:	8938      	ldrh	r0, [r7, #8]
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017bf8:	7ffb      	ldrb	r3, [r7, #31]
 8017bfa:	4a29      	ldr	r2, [pc, #164]	; (8017ca0 <dhcp_discover+0x130>)
 8017bfc:	5cd3      	ldrb	r3, [r2, r3]
 8017bfe:	461a      	mov	r2, r3
 8017c00:	f000 fc08 	bl	8018414 <dhcp_option_byte>
 8017c04:	4603      	mov	r3, r0
 8017c06:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017c08:	7ffb      	ldrb	r3, [r7, #31]
 8017c0a:	3301      	adds	r3, #1
 8017c0c:	77fb      	strb	r3, [r7, #31]
 8017c0e:	7ffb      	ldrb	r3, [r7, #31]
 8017c10:	2b02      	cmp	r3, #2
 8017c12:	d9ed      	bls.n	8017bf0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017c14:	8938      	ldrh	r0, [r7, #8]
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	33f0      	adds	r3, #240	; 0xf0
 8017c1a:	693a      	ldr	r2, [r7, #16]
 8017c1c:	4619      	mov	r1, r3
 8017c1e:	f001 f90d 	bl	8018e3c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017c22:	4b20      	ldr	r3, [pc, #128]	; (8017ca4 <dhcp_discover+0x134>)
 8017c24:	6818      	ldr	r0, [r3, #0]
 8017c26:	4b20      	ldr	r3, [pc, #128]	; (8017ca8 <dhcp_discover+0x138>)
 8017c28:	9301      	str	r3, [sp, #4]
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	9300      	str	r3, [sp, #0]
 8017c2e:	2343      	movs	r3, #67	; 0x43
 8017c30:	4a1e      	ldr	r2, [pc, #120]	; (8017cac <dhcp_discover+0x13c>)
 8017c32:	6939      	ldr	r1, [r7, #16]
 8017c34:	f7ff f83e 	bl	8016cb4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8017c38:	6938      	ldr	r0, [r7, #16]
 8017c3a:	f7f9 f889 	bl	8010d50 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017c3e:	69bb      	ldr	r3, [r7, #24]
 8017c40:	799b      	ldrb	r3, [r3, #6]
 8017c42:	2bff      	cmp	r3, #255	; 0xff
 8017c44:	d005      	beq.n	8017c52 <dhcp_discover+0xe2>
    dhcp->tries++;
 8017c46:	69bb      	ldr	r3, [r7, #24]
 8017c48:	799b      	ldrb	r3, [r3, #6]
 8017c4a:	3301      	adds	r3, #1
 8017c4c:	b2da      	uxtb	r2, r3
 8017c4e:	69bb      	ldr	r3, [r7, #24]
 8017c50:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017c52:	69bb      	ldr	r3, [r7, #24]
 8017c54:	799b      	ldrb	r3, [r3, #6]
 8017c56:	2b05      	cmp	r3, #5
 8017c58:	d80d      	bhi.n	8017c76 <dhcp_discover+0x106>
 8017c5a:	69bb      	ldr	r3, [r7, #24]
 8017c5c:	799b      	ldrb	r3, [r3, #6]
 8017c5e:	461a      	mov	r2, r3
 8017c60:	2301      	movs	r3, #1
 8017c62:	4093      	lsls	r3, r2
 8017c64:	b29b      	uxth	r3, r3
 8017c66:	461a      	mov	r2, r3
 8017c68:	0152      	lsls	r2, r2, #5
 8017c6a:	1ad2      	subs	r2, r2, r3
 8017c6c:	0092      	lsls	r2, r2, #2
 8017c6e:	4413      	add	r3, r2
 8017c70:	00db      	lsls	r3, r3, #3
 8017c72:	b29b      	uxth	r3, r3
 8017c74:	e001      	b.n	8017c7a <dhcp_discover+0x10a>
 8017c76:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017c7a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017c7c:	897b      	ldrh	r3, [r7, #10]
 8017c7e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017c82:	4a0b      	ldr	r2, [pc, #44]	; (8017cb0 <dhcp_discover+0x140>)
 8017c84:	fb82 1203 	smull	r1, r2, r2, r3
 8017c88:	1152      	asrs	r2, r2, #5
 8017c8a:	17db      	asrs	r3, r3, #31
 8017c8c:	1ad3      	subs	r3, r2, r3
 8017c8e:	b29a      	uxth	r2, r3
 8017c90:	69bb      	ldr	r3, [r7, #24]
 8017c92:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	3720      	adds	r7, #32
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}
 8017ca0:	200000f0 	.word	0x200000f0
 8017ca4:	2000afe8 	.word	0x2000afe8
 8017ca8:	080211e8 	.word	0x080211e8
 8017cac:	080211ec 	.word	0x080211ec
 8017cb0:	10624dd3 	.word	0x10624dd3

08017cb4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b088      	sub	sp, #32
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d107      	bne.n	8017cd2 <dhcp_bind+0x1e>
 8017cc2:	4b64      	ldr	r3, [pc, #400]	; (8017e54 <dhcp_bind+0x1a0>)
 8017cc4:	f240 4215 	movw	r2, #1045	; 0x415
 8017cc8:	4963      	ldr	r1, [pc, #396]	; (8017e58 <dhcp_bind+0x1a4>)
 8017cca:	4864      	ldr	r0, [pc, #400]	; (8017e5c <dhcp_bind+0x1a8>)
 8017ccc:	f005 f848 	bl	801cd60 <iprintf>
 8017cd0:	e0bc      	b.n	8017e4c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cd6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017cd8:	69bb      	ldr	r3, [r7, #24]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d107      	bne.n	8017cee <dhcp_bind+0x3a>
 8017cde:	4b5d      	ldr	r3, [pc, #372]	; (8017e54 <dhcp_bind+0x1a0>)
 8017ce0:	f240 4217 	movw	r2, #1047	; 0x417
 8017ce4:	495e      	ldr	r1, [pc, #376]	; (8017e60 <dhcp_bind+0x1ac>)
 8017ce6:	485d      	ldr	r0, [pc, #372]	; (8017e5c <dhcp_bind+0x1a8>)
 8017ce8:	f005 f83a 	bl	801cd60 <iprintf>
 8017cec:	e0ae      	b.n	8017e4c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8017cee:	69bb      	ldr	r3, [r7, #24]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017cf4:	69bb      	ldr	r3, [r7, #24]
 8017cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cfc:	d019      	beq.n	8017d32 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017cfe:	69bb      	ldr	r3, [r7, #24]
 8017d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d02:	331e      	adds	r3, #30
 8017d04:	4a57      	ldr	r2, [pc, #348]	; (8017e64 <dhcp_bind+0x1b0>)
 8017d06:	fba2 2303 	umull	r2, r3, r2, r3
 8017d0a:	095b      	lsrs	r3, r3, #5
 8017d0c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017d0e:	69fb      	ldr	r3, [r7, #28]
 8017d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d14:	d302      	bcc.n	8017d1c <dhcp_bind+0x68>
      timeout = 0xffff;
 8017d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d1a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8017d1c:	69fb      	ldr	r3, [r7, #28]
 8017d1e:	b29a      	uxth	r2, r3
 8017d20:	69bb      	ldr	r3, [r7, #24]
 8017d22:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8017d24:	69bb      	ldr	r3, [r7, #24]
 8017d26:	8a9b      	ldrh	r3, [r3, #20]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d102      	bne.n	8017d32 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8017d2c:	69bb      	ldr	r3, [r7, #24]
 8017d2e:	2201      	movs	r2, #1
 8017d30:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8017d32:	69bb      	ldr	r3, [r7, #24]
 8017d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d3a:	d01d      	beq.n	8017d78 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017d3c:	69bb      	ldr	r3, [r7, #24]
 8017d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d40:	331e      	adds	r3, #30
 8017d42:	4a48      	ldr	r2, [pc, #288]	; (8017e64 <dhcp_bind+0x1b0>)
 8017d44:	fba2 2303 	umull	r2, r3, r2, r3
 8017d48:	095b      	lsrs	r3, r3, #5
 8017d4a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017d4c:	69fb      	ldr	r3, [r7, #28]
 8017d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d52:	d302      	bcc.n	8017d5a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d58:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8017d5a:	69fb      	ldr	r3, [r7, #28]
 8017d5c:	b29a      	uxth	r2, r3
 8017d5e:	69bb      	ldr	r3, [r7, #24]
 8017d60:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8017d62:	69bb      	ldr	r3, [r7, #24]
 8017d64:	895b      	ldrh	r3, [r3, #10]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d102      	bne.n	8017d70 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8017d6a:	69bb      	ldr	r3, [r7, #24]
 8017d6c:	2201      	movs	r2, #1
 8017d6e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8017d70:	69bb      	ldr	r3, [r7, #24]
 8017d72:	895a      	ldrh	r2, [r3, #10]
 8017d74:	69bb      	ldr	r3, [r7, #24]
 8017d76:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8017d78:	69bb      	ldr	r3, [r7, #24]
 8017d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d80:	d01d      	beq.n	8017dbe <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017d82:	69bb      	ldr	r3, [r7, #24]
 8017d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d86:	331e      	adds	r3, #30
 8017d88:	4a36      	ldr	r2, [pc, #216]	; (8017e64 <dhcp_bind+0x1b0>)
 8017d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8017d8e:	095b      	lsrs	r3, r3, #5
 8017d90:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017d92:	69fb      	ldr	r3, [r7, #28]
 8017d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d98:	d302      	bcc.n	8017da0 <dhcp_bind+0xec>
      timeout = 0xffff;
 8017d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d9e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8017da0:	69fb      	ldr	r3, [r7, #28]
 8017da2:	b29a      	uxth	r2, r3
 8017da4:	69bb      	ldr	r3, [r7, #24]
 8017da6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017da8:	69bb      	ldr	r3, [r7, #24]
 8017daa:	899b      	ldrh	r3, [r3, #12]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d102      	bne.n	8017db6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8017db0:	69bb      	ldr	r3, [r7, #24]
 8017db2:	2201      	movs	r2, #1
 8017db4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8017db6:	69bb      	ldr	r3, [r7, #24]
 8017db8:	899a      	ldrh	r2, [r3, #12]
 8017dba:	69bb      	ldr	r3, [r7, #24]
 8017dbc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8017dbe:	69bb      	ldr	r3, [r7, #24]
 8017dc0:	895a      	ldrh	r2, [r3, #10]
 8017dc2:	69bb      	ldr	r3, [r7, #24]
 8017dc4:	899b      	ldrh	r3, [r3, #12]
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d306      	bcc.n	8017dd8 <dhcp_bind+0x124>
 8017dca:	69bb      	ldr	r3, [r7, #24]
 8017dcc:	899b      	ldrh	r3, [r3, #12]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d002      	beq.n	8017dd8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8017dd2:	69bb      	ldr	r3, [r7, #24]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017dd8:	69bb      	ldr	r3, [r7, #24]
 8017dda:	79db      	ldrb	r3, [r3, #7]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d003      	beq.n	8017de8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8017de0:	69bb      	ldr	r3, [r7, #24]
 8017de2:	6a1b      	ldr	r3, [r3, #32]
 8017de4:	613b      	str	r3, [r7, #16]
 8017de6:	e014      	b.n	8017e12 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017de8:	69bb      	ldr	r3, [r7, #24]
 8017dea:	331c      	adds	r3, #28
 8017dec:	781b      	ldrb	r3, [r3, #0]
 8017dee:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	db02      	blt.n	8017dfe <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017df8:	23ff      	movs	r3, #255	; 0xff
 8017dfa:	613b      	str	r3, [r7, #16]
 8017dfc:	e009      	b.n	8017e12 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8017dfe:	7dfb      	ldrb	r3, [r7, #23]
 8017e00:	2bbf      	cmp	r3, #191	; 0xbf
 8017e02:	d903      	bls.n	8017e0c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017e04:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017e08:	613b      	str	r3, [r7, #16]
 8017e0a:	e002      	b.n	8017e12 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8017e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e10:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8017e12:	69bb      	ldr	r3, [r7, #24]
 8017e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e16:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d108      	bne.n	8017e30 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8017e1e:	69bb      	ldr	r3, [r7, #24]
 8017e20:	69da      	ldr	r2, [r3, #28]
 8017e22:	693b      	ldr	r3, [r7, #16]
 8017e24:	4013      	ands	r3, r2
 8017e26:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017e2e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017e30:	210a      	movs	r1, #10
 8017e32:	69b8      	ldr	r0, [r7, #24]
 8017e34:	f000 faa0 	bl	8018378 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8017e38:	69bb      	ldr	r3, [r7, #24]
 8017e3a:	f103 011c 	add.w	r1, r3, #28
 8017e3e:	f107 030c 	add.w	r3, r7, #12
 8017e42:	f107 0210 	add.w	r2, r7, #16
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f7f8 fa74 	bl	8010334 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8017e4c:	3720      	adds	r7, #32
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	bd80      	pop	{r7, pc}
 8017e52:	bf00      	nop
 8017e54:	08020500 	.word	0x08020500
 8017e58:	08020660 	.word	0x08020660
 8017e5c:	08020560 	.word	0x08020560
 8017e60:	0802067c 	.word	0x0802067c
 8017e64:	88888889 	.word	0x88888889

08017e68 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b08a      	sub	sp, #40	; 0x28
 8017e6c:	af02      	add	r7, sp, #8
 8017e6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e74:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8017e76:	2105      	movs	r1, #5
 8017e78:	69b8      	ldr	r0, [r7, #24]
 8017e7a:	f000 fa7d 	bl	8018378 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017e7e:	f107 030c 	add.w	r3, r7, #12
 8017e82:	2203      	movs	r2, #3
 8017e84:	69b9      	ldr	r1, [r7, #24]
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f000 ff02 	bl	8018c90 <dhcp_create_msg>
 8017e8c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d04e      	beq.n	8017f32 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	685b      	ldr	r3, [r3, #4]
 8017e98:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017e9a:	89b8      	ldrh	r0, [r7, #12]
 8017e9c:	693b      	ldr	r3, [r7, #16]
 8017e9e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017ea2:	2302      	movs	r3, #2
 8017ea4:	2239      	movs	r2, #57	; 0x39
 8017ea6:	f000 fa81 	bl	80183ac <dhcp_option>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017eae:	89b8      	ldrh	r0, [r7, #12]
 8017eb0:	693b      	ldr	r3, [r7, #16]
 8017eb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017eba:	461a      	mov	r2, r3
 8017ebc:	f000 fad0 	bl	8018460 <dhcp_option_short>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017ec4:	89b8      	ldrh	r0, [r7, #12]
 8017ec6:	693b      	ldr	r3, [r7, #16]
 8017ec8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017ecc:	2303      	movs	r3, #3
 8017ece:	2237      	movs	r2, #55	; 0x37
 8017ed0:	f000 fa6c 	bl	80183ac <dhcp_option>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017ed8:	2300      	movs	r3, #0
 8017eda:	77bb      	strb	r3, [r7, #30]
 8017edc:	e00e      	b.n	8017efc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017ede:	89b8      	ldrh	r0, [r7, #12]
 8017ee0:	693b      	ldr	r3, [r7, #16]
 8017ee2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017ee6:	7fbb      	ldrb	r3, [r7, #30]
 8017ee8:	4a2a      	ldr	r2, [pc, #168]	; (8017f94 <dhcp_renew+0x12c>)
 8017eea:	5cd3      	ldrb	r3, [r2, r3]
 8017eec:	461a      	mov	r2, r3
 8017eee:	f000 fa91 	bl	8018414 <dhcp_option_byte>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017ef6:	7fbb      	ldrb	r3, [r7, #30]
 8017ef8:	3301      	adds	r3, #1
 8017efa:	77bb      	strb	r3, [r7, #30]
 8017efc:	7fbb      	ldrb	r3, [r7, #30]
 8017efe:	2b02      	cmp	r3, #2
 8017f00:	d9ed      	bls.n	8017ede <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017f02:	89b8      	ldrh	r0, [r7, #12]
 8017f04:	693b      	ldr	r3, [r7, #16]
 8017f06:	33f0      	adds	r3, #240	; 0xf0
 8017f08:	697a      	ldr	r2, [r7, #20]
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	f000 ff96 	bl	8018e3c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017f10:	4b21      	ldr	r3, [pc, #132]	; (8017f98 <dhcp_renew+0x130>)
 8017f12:	6818      	ldr	r0, [r3, #0]
 8017f14:	69bb      	ldr	r3, [r7, #24]
 8017f16:	f103 0218 	add.w	r2, r3, #24
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	9300      	str	r3, [sp, #0]
 8017f1e:	2343      	movs	r3, #67	; 0x43
 8017f20:	6979      	ldr	r1, [r7, #20]
 8017f22:	f7fe fe53 	bl	8016bcc <udp_sendto_if>
 8017f26:	4603      	mov	r3, r0
 8017f28:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017f2a:	6978      	ldr	r0, [r7, #20]
 8017f2c:	f7f8 ff10 	bl	8010d50 <pbuf_free>
 8017f30:	e001      	b.n	8017f36 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017f32:	23ff      	movs	r3, #255	; 0xff
 8017f34:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017f36:	69bb      	ldr	r3, [r7, #24]
 8017f38:	799b      	ldrb	r3, [r3, #6]
 8017f3a:	2bff      	cmp	r3, #255	; 0xff
 8017f3c:	d005      	beq.n	8017f4a <dhcp_renew+0xe2>
    dhcp->tries++;
 8017f3e:	69bb      	ldr	r3, [r7, #24]
 8017f40:	799b      	ldrb	r3, [r3, #6]
 8017f42:	3301      	adds	r3, #1
 8017f44:	b2da      	uxtb	r2, r3
 8017f46:	69bb      	ldr	r3, [r7, #24]
 8017f48:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8017f4a:	69bb      	ldr	r3, [r7, #24]
 8017f4c:	799b      	ldrb	r3, [r3, #6]
 8017f4e:	2b09      	cmp	r3, #9
 8017f50:	d80a      	bhi.n	8017f68 <dhcp_renew+0x100>
 8017f52:	69bb      	ldr	r3, [r7, #24]
 8017f54:	799b      	ldrb	r3, [r3, #6]
 8017f56:	b29b      	uxth	r3, r3
 8017f58:	461a      	mov	r2, r3
 8017f5a:	0152      	lsls	r2, r2, #5
 8017f5c:	1ad2      	subs	r2, r2, r3
 8017f5e:	0092      	lsls	r2, r2, #2
 8017f60:	4413      	add	r3, r2
 8017f62:	011b      	lsls	r3, r3, #4
 8017f64:	b29b      	uxth	r3, r3
 8017f66:	e001      	b.n	8017f6c <dhcp_renew+0x104>
 8017f68:	f644 6320 	movw	r3, #20000	; 0x4e20
 8017f6c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017f6e:	89fb      	ldrh	r3, [r7, #14]
 8017f70:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017f74:	4a09      	ldr	r2, [pc, #36]	; (8017f9c <dhcp_renew+0x134>)
 8017f76:	fb82 1203 	smull	r1, r2, r2, r3
 8017f7a:	1152      	asrs	r2, r2, #5
 8017f7c:	17db      	asrs	r3, r3, #31
 8017f7e:	1ad3      	subs	r3, r2, r3
 8017f80:	b29a      	uxth	r2, r3
 8017f82:	69bb      	ldr	r3, [r7, #24]
 8017f84:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017f86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	3720      	adds	r7, #32
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	bd80      	pop	{r7, pc}
 8017f92:	bf00      	nop
 8017f94:	200000f0 	.word	0x200000f0
 8017f98:	2000afe8 	.word	0x2000afe8
 8017f9c:	10624dd3 	.word	0x10624dd3

08017fa0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b08a      	sub	sp, #40	; 0x28
 8017fa4:	af02      	add	r7, sp, #8
 8017fa6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fac:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8017fae:	2104      	movs	r1, #4
 8017fb0:	69b8      	ldr	r0, [r7, #24]
 8017fb2:	f000 f9e1 	bl	8018378 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017fb6:	f107 030c 	add.w	r3, r7, #12
 8017fba:	2203      	movs	r2, #3
 8017fbc:	69b9      	ldr	r1, [r7, #24]
 8017fbe:	6878      	ldr	r0, [r7, #4]
 8017fc0:	f000 fe66 	bl	8018c90 <dhcp_create_msg>
 8017fc4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017fc6:	697b      	ldr	r3, [r7, #20]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d04c      	beq.n	8018066 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017fd2:	89b8      	ldrh	r0, [r7, #12]
 8017fd4:	693b      	ldr	r3, [r7, #16]
 8017fd6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017fda:	2302      	movs	r3, #2
 8017fdc:	2239      	movs	r2, #57	; 0x39
 8017fde:	f000 f9e5 	bl	80183ac <dhcp_option>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017fe6:	89b8      	ldrh	r0, [r7, #12]
 8017fe8:	693b      	ldr	r3, [r7, #16]
 8017fea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	f000 fa34 	bl	8018460 <dhcp_option_short>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017ffc:	89b8      	ldrh	r0, [r7, #12]
 8017ffe:	693b      	ldr	r3, [r7, #16]
 8018000:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018004:	2303      	movs	r3, #3
 8018006:	2237      	movs	r2, #55	; 0x37
 8018008:	f000 f9d0 	bl	80183ac <dhcp_option>
 801800c:	4603      	mov	r3, r0
 801800e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018010:	2300      	movs	r3, #0
 8018012:	77bb      	strb	r3, [r7, #30]
 8018014:	e00e      	b.n	8018034 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018016:	89b8      	ldrh	r0, [r7, #12]
 8018018:	693b      	ldr	r3, [r7, #16]
 801801a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801801e:	7fbb      	ldrb	r3, [r7, #30]
 8018020:	4a29      	ldr	r2, [pc, #164]	; (80180c8 <dhcp_rebind+0x128>)
 8018022:	5cd3      	ldrb	r3, [r2, r3]
 8018024:	461a      	mov	r2, r3
 8018026:	f000 f9f5 	bl	8018414 <dhcp_option_byte>
 801802a:	4603      	mov	r3, r0
 801802c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801802e:	7fbb      	ldrb	r3, [r7, #30]
 8018030:	3301      	adds	r3, #1
 8018032:	77bb      	strb	r3, [r7, #30]
 8018034:	7fbb      	ldrb	r3, [r7, #30]
 8018036:	2b02      	cmp	r3, #2
 8018038:	d9ed      	bls.n	8018016 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801803a:	89b8      	ldrh	r0, [r7, #12]
 801803c:	693b      	ldr	r3, [r7, #16]
 801803e:	33f0      	adds	r3, #240	; 0xf0
 8018040:	697a      	ldr	r2, [r7, #20]
 8018042:	4619      	mov	r1, r3
 8018044:	f000 fefa 	bl	8018e3c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018048:	4b20      	ldr	r3, [pc, #128]	; (80180cc <dhcp_rebind+0x12c>)
 801804a:	6818      	ldr	r0, [r3, #0]
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	9300      	str	r3, [sp, #0]
 8018050:	2343      	movs	r3, #67	; 0x43
 8018052:	4a1f      	ldr	r2, [pc, #124]	; (80180d0 <dhcp_rebind+0x130>)
 8018054:	6979      	ldr	r1, [r7, #20]
 8018056:	f7fe fdb9 	bl	8016bcc <udp_sendto_if>
 801805a:	4603      	mov	r3, r0
 801805c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801805e:	6978      	ldr	r0, [r7, #20]
 8018060:	f7f8 fe76 	bl	8010d50 <pbuf_free>
 8018064:	e001      	b.n	801806a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018066:	23ff      	movs	r3, #255	; 0xff
 8018068:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801806a:	69bb      	ldr	r3, [r7, #24]
 801806c:	799b      	ldrb	r3, [r3, #6]
 801806e:	2bff      	cmp	r3, #255	; 0xff
 8018070:	d005      	beq.n	801807e <dhcp_rebind+0xde>
    dhcp->tries++;
 8018072:	69bb      	ldr	r3, [r7, #24]
 8018074:	799b      	ldrb	r3, [r3, #6]
 8018076:	3301      	adds	r3, #1
 8018078:	b2da      	uxtb	r2, r3
 801807a:	69bb      	ldr	r3, [r7, #24]
 801807c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801807e:	69bb      	ldr	r3, [r7, #24]
 8018080:	799b      	ldrb	r3, [r3, #6]
 8018082:	2b09      	cmp	r3, #9
 8018084:	d80a      	bhi.n	801809c <dhcp_rebind+0xfc>
 8018086:	69bb      	ldr	r3, [r7, #24]
 8018088:	799b      	ldrb	r3, [r3, #6]
 801808a:	b29b      	uxth	r3, r3
 801808c:	461a      	mov	r2, r3
 801808e:	0152      	lsls	r2, r2, #5
 8018090:	1ad2      	subs	r2, r2, r3
 8018092:	0092      	lsls	r2, r2, #2
 8018094:	4413      	add	r3, r2
 8018096:	00db      	lsls	r3, r3, #3
 8018098:	b29b      	uxth	r3, r3
 801809a:	e001      	b.n	80180a0 <dhcp_rebind+0x100>
 801809c:	f242 7310 	movw	r3, #10000	; 0x2710
 80180a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80180a2:	89fb      	ldrh	r3, [r7, #14]
 80180a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80180a8:	4a0a      	ldr	r2, [pc, #40]	; (80180d4 <dhcp_rebind+0x134>)
 80180aa:	fb82 1203 	smull	r1, r2, r2, r3
 80180ae:	1152      	asrs	r2, r2, #5
 80180b0:	17db      	asrs	r3, r3, #31
 80180b2:	1ad3      	subs	r3, r2, r3
 80180b4:	b29a      	uxth	r2, r3
 80180b6:	69bb      	ldr	r3, [r7, #24]
 80180b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80180ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80180be:	4618      	mov	r0, r3
 80180c0:	3720      	adds	r7, #32
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}
 80180c6:	bf00      	nop
 80180c8:	200000f0 	.word	0x200000f0
 80180cc:	2000afe8 	.word	0x2000afe8
 80180d0:	080211ec 	.word	0x080211ec
 80180d4:	10624dd3 	.word	0x10624dd3

080180d8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80180d8:	b5b0      	push	{r4, r5, r7, lr}
 80180da:	b08a      	sub	sp, #40	; 0x28
 80180dc:	af02      	add	r7, sp, #8
 80180de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180e4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80180e6:	2103      	movs	r1, #3
 80180e8:	69b8      	ldr	r0, [r7, #24]
 80180ea:	f000 f945 	bl	8018378 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80180ee:	f107 030c 	add.w	r3, r7, #12
 80180f2:	2203      	movs	r2, #3
 80180f4:	69b9      	ldr	r1, [r7, #24]
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	f000 fdca 	bl	8018c90 <dhcp_create_msg>
 80180fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80180fe:	697b      	ldr	r3, [r7, #20]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d066      	beq.n	80181d2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	685b      	ldr	r3, [r3, #4]
 8018108:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801810a:	89b8      	ldrh	r0, [r7, #12]
 801810c:	693b      	ldr	r3, [r7, #16]
 801810e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018112:	2302      	movs	r3, #2
 8018114:	2239      	movs	r2, #57	; 0x39
 8018116:	f000 f949 	bl	80183ac <dhcp_option>
 801811a:	4603      	mov	r3, r0
 801811c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801811e:	89b8      	ldrh	r0, [r7, #12]
 8018120:	693b      	ldr	r3, [r7, #16]
 8018122:	33f0      	adds	r3, #240	; 0xf0
 8018124:	f44f 7210 	mov.w	r2, #576	; 0x240
 8018128:	4619      	mov	r1, r3
 801812a:	f000 f999 	bl	8018460 <dhcp_option_short>
 801812e:	4603      	mov	r3, r0
 8018130:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018132:	89b8      	ldrh	r0, [r7, #12]
 8018134:	693b      	ldr	r3, [r7, #16]
 8018136:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801813a:	2304      	movs	r3, #4
 801813c:	2232      	movs	r2, #50	; 0x32
 801813e:	f000 f935 	bl	80183ac <dhcp_option>
 8018142:	4603      	mov	r3, r0
 8018144:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018146:	89bc      	ldrh	r4, [r7, #12]
 8018148:	693b      	ldr	r3, [r7, #16]
 801814a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801814e:	69bb      	ldr	r3, [r7, #24]
 8018150:	69db      	ldr	r3, [r3, #28]
 8018152:	4618      	mov	r0, r3
 8018154:	f7f7 fa59 	bl	800f60a <lwip_htonl>
 8018158:	4603      	mov	r3, r0
 801815a:	461a      	mov	r2, r3
 801815c:	4629      	mov	r1, r5
 801815e:	4620      	mov	r0, r4
 8018160:	f000 f9b0 	bl	80184c4 <dhcp_option_long>
 8018164:	4603      	mov	r3, r0
 8018166:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018168:	89b8      	ldrh	r0, [r7, #12]
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018170:	2303      	movs	r3, #3
 8018172:	2237      	movs	r2, #55	; 0x37
 8018174:	f000 f91a 	bl	80183ac <dhcp_option>
 8018178:	4603      	mov	r3, r0
 801817a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801817c:	2300      	movs	r3, #0
 801817e:	77bb      	strb	r3, [r7, #30]
 8018180:	e00e      	b.n	80181a0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018182:	89b8      	ldrh	r0, [r7, #12]
 8018184:	693b      	ldr	r3, [r7, #16]
 8018186:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801818a:	7fbb      	ldrb	r3, [r7, #30]
 801818c:	4a29      	ldr	r2, [pc, #164]	; (8018234 <dhcp_reboot+0x15c>)
 801818e:	5cd3      	ldrb	r3, [r2, r3]
 8018190:	461a      	mov	r2, r3
 8018192:	f000 f93f 	bl	8018414 <dhcp_option_byte>
 8018196:	4603      	mov	r3, r0
 8018198:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801819a:	7fbb      	ldrb	r3, [r7, #30]
 801819c:	3301      	adds	r3, #1
 801819e:	77bb      	strb	r3, [r7, #30]
 80181a0:	7fbb      	ldrb	r3, [r7, #30]
 80181a2:	2b02      	cmp	r3, #2
 80181a4:	d9ed      	bls.n	8018182 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80181a6:	89b8      	ldrh	r0, [r7, #12]
 80181a8:	693b      	ldr	r3, [r7, #16]
 80181aa:	33f0      	adds	r3, #240	; 0xf0
 80181ac:	697a      	ldr	r2, [r7, #20]
 80181ae:	4619      	mov	r1, r3
 80181b0:	f000 fe44 	bl	8018e3c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80181b4:	4b20      	ldr	r3, [pc, #128]	; (8018238 <dhcp_reboot+0x160>)
 80181b6:	6818      	ldr	r0, [r3, #0]
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	9300      	str	r3, [sp, #0]
 80181bc:	2343      	movs	r3, #67	; 0x43
 80181be:	4a1f      	ldr	r2, [pc, #124]	; (801823c <dhcp_reboot+0x164>)
 80181c0:	6979      	ldr	r1, [r7, #20]
 80181c2:	f7fe fd03 	bl	8016bcc <udp_sendto_if>
 80181c6:	4603      	mov	r3, r0
 80181c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80181ca:	6978      	ldr	r0, [r7, #20]
 80181cc:	f7f8 fdc0 	bl	8010d50 <pbuf_free>
 80181d0:	e001      	b.n	80181d6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80181d2:	23ff      	movs	r3, #255	; 0xff
 80181d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	799b      	ldrb	r3, [r3, #6]
 80181da:	2bff      	cmp	r3, #255	; 0xff
 80181dc:	d005      	beq.n	80181ea <dhcp_reboot+0x112>
    dhcp->tries++;
 80181de:	69bb      	ldr	r3, [r7, #24]
 80181e0:	799b      	ldrb	r3, [r3, #6]
 80181e2:	3301      	adds	r3, #1
 80181e4:	b2da      	uxtb	r2, r3
 80181e6:	69bb      	ldr	r3, [r7, #24]
 80181e8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80181ea:	69bb      	ldr	r3, [r7, #24]
 80181ec:	799b      	ldrb	r3, [r3, #6]
 80181ee:	2b09      	cmp	r3, #9
 80181f0:	d80a      	bhi.n	8018208 <dhcp_reboot+0x130>
 80181f2:	69bb      	ldr	r3, [r7, #24]
 80181f4:	799b      	ldrb	r3, [r3, #6]
 80181f6:	b29b      	uxth	r3, r3
 80181f8:	461a      	mov	r2, r3
 80181fa:	0152      	lsls	r2, r2, #5
 80181fc:	1ad2      	subs	r2, r2, r3
 80181fe:	0092      	lsls	r2, r2, #2
 8018200:	4413      	add	r3, r2
 8018202:	00db      	lsls	r3, r3, #3
 8018204:	b29b      	uxth	r3, r3
 8018206:	e001      	b.n	801820c <dhcp_reboot+0x134>
 8018208:	f242 7310 	movw	r3, #10000	; 0x2710
 801820c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801820e:	89fb      	ldrh	r3, [r7, #14]
 8018210:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018214:	4a0a      	ldr	r2, [pc, #40]	; (8018240 <dhcp_reboot+0x168>)
 8018216:	fb82 1203 	smull	r1, r2, r2, r3
 801821a:	1152      	asrs	r2, r2, #5
 801821c:	17db      	asrs	r3, r3, #31
 801821e:	1ad3      	subs	r3, r2, r3
 8018220:	b29a      	uxth	r2, r3
 8018222:	69bb      	ldr	r3, [r7, #24]
 8018224:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018226:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801822a:	4618      	mov	r0, r3
 801822c:	3720      	adds	r7, #32
 801822e:	46bd      	mov	sp, r7
 8018230:	bdb0      	pop	{r4, r5, r7, pc}
 8018232:	bf00      	nop
 8018234:	200000f0 	.word	0x200000f0
 8018238:	2000afe8 	.word	0x2000afe8
 801823c:	080211ec 	.word	0x080211ec
 8018240:	10624dd3 	.word	0x10624dd3

08018244 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8018244:	b5b0      	push	{r4, r5, r7, lr}
 8018246:	b08a      	sub	sp, #40	; 0x28
 8018248:	af02      	add	r7, sp, #8
 801824a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018250:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8018252:	69fb      	ldr	r3, [r7, #28]
 8018254:	2b00      	cmp	r3, #0
 8018256:	f000 8084 	beq.w	8018362 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801825a:	69fb      	ldr	r3, [r7, #28]
 801825c:	795b      	ldrb	r3, [r3, #5]
 801825e:	2b00      	cmp	r3, #0
 8018260:	f000 8081 	beq.w	8018366 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8018264:	69fb      	ldr	r3, [r7, #28]
 8018266:	699b      	ldr	r3, [r3, #24]
 8018268:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801826a:	69fb      	ldr	r3, [r7, #28]
 801826c:	2200      	movs	r2, #0
 801826e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	2200      	movs	r2, #0
 8018274:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8018276:	69fb      	ldr	r3, [r7, #28]
 8018278:	2200      	movs	r2, #0
 801827a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801827c:	69fb      	ldr	r3, [r7, #28]
 801827e:	2200      	movs	r2, #0
 8018280:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8018282:	69fb      	ldr	r3, [r7, #28]
 8018284:	2200      	movs	r2, #0
 8018286:	631a      	str	r2, [r3, #48]	; 0x30
 8018288:	69fb      	ldr	r3, [r7, #28]
 801828a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801828c:	69fb      	ldr	r3, [r7, #28]
 801828e:	62da      	str	r2, [r3, #44]	; 0x2c
 8018290:	69fb      	ldr	r3, [r7, #28]
 8018292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018294:	69fb      	ldr	r3, [r7, #28]
 8018296:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8018298:	69fb      	ldr	r3, [r7, #28]
 801829a:	2200      	movs	r2, #0
 801829c:	829a      	strh	r2, [r3, #20]
 801829e:	69fb      	ldr	r3, [r7, #28]
 80182a0:	8a9a      	ldrh	r2, [r3, #20]
 80182a2:	69fb      	ldr	r3, [r7, #28]
 80182a4:	825a      	strh	r2, [r3, #18]
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	8a5a      	ldrh	r2, [r3, #18]
 80182aa:	69fb      	ldr	r3, [r7, #28]
 80182ac:	821a      	strh	r2, [r3, #16]
 80182ae:	69fb      	ldr	r3, [r7, #28]
 80182b0:	8a1a      	ldrh	r2, [r3, #16]
 80182b2:	69fb      	ldr	r3, [r7, #28]
 80182b4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80182b6:	6878      	ldr	r0, [r7, #4]
 80182b8:	f000 fdee 	bl	8018e98 <dhcp_supplied_address>
 80182bc:	4603      	mov	r3, r0
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d03b      	beq.n	801833a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80182c2:	f107 030e 	add.w	r3, r7, #14
 80182c6:	2207      	movs	r2, #7
 80182c8:	69f9      	ldr	r1, [r7, #28]
 80182ca:	6878      	ldr	r0, [r7, #4]
 80182cc:	f000 fce0 	bl	8018c90 <dhcp_create_msg>
 80182d0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80182d2:	69bb      	ldr	r3, [r7, #24]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d030      	beq.n	801833a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80182d8:	69bb      	ldr	r3, [r7, #24]
 80182da:	685b      	ldr	r3, [r3, #4]
 80182dc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80182de:	89f8      	ldrh	r0, [r7, #14]
 80182e0:	697b      	ldr	r3, [r7, #20]
 80182e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80182e6:	2304      	movs	r3, #4
 80182e8:	2236      	movs	r2, #54	; 0x36
 80182ea:	f000 f85f 	bl	80183ac <dhcp_option>
 80182ee:	4603      	mov	r3, r0
 80182f0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80182f2:	89fc      	ldrh	r4, [r7, #14]
 80182f4:	697b      	ldr	r3, [r7, #20]
 80182f6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80182fa:	693b      	ldr	r3, [r7, #16]
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7f7 f984 	bl	800f60a <lwip_htonl>
 8018302:	4603      	mov	r3, r0
 8018304:	461a      	mov	r2, r3
 8018306:	4629      	mov	r1, r5
 8018308:	4620      	mov	r0, r4
 801830a:	f000 f8db 	bl	80184c4 <dhcp_option_long>
 801830e:	4603      	mov	r3, r0
 8018310:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018312:	89f8      	ldrh	r0, [r7, #14]
 8018314:	697b      	ldr	r3, [r7, #20]
 8018316:	33f0      	adds	r3, #240	; 0xf0
 8018318:	69ba      	ldr	r2, [r7, #24]
 801831a:	4619      	mov	r1, r3
 801831c:	f000 fd8e 	bl	8018e3c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018320:	4b13      	ldr	r3, [pc, #76]	; (8018370 <dhcp_release_and_stop+0x12c>)
 8018322:	6818      	ldr	r0, [r3, #0]
 8018324:	f107 0210 	add.w	r2, r7, #16
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	9300      	str	r3, [sp, #0]
 801832c:	2343      	movs	r3, #67	; 0x43
 801832e:	69b9      	ldr	r1, [r7, #24]
 8018330:	f7fe fc4c 	bl	8016bcc <udp_sendto_if>
      pbuf_free(p_out);
 8018334:	69b8      	ldr	r0, [r7, #24]
 8018336:	f7f8 fd0b 	bl	8010d50 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801833a:	4b0e      	ldr	r3, [pc, #56]	; (8018374 <dhcp_release_and_stop+0x130>)
 801833c:	4a0d      	ldr	r2, [pc, #52]	; (8018374 <dhcp_release_and_stop+0x130>)
 801833e:	490d      	ldr	r1, [pc, #52]	; (8018374 <dhcp_release_and_stop+0x130>)
 8018340:	6878      	ldr	r0, [r7, #4]
 8018342:	f7f7 fff7 	bl	8010334 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8018346:	2100      	movs	r1, #0
 8018348:	69f8      	ldr	r0, [r7, #28]
 801834a:	f000 f815 	bl	8018378 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801834e:	69fb      	ldr	r3, [r7, #28]
 8018350:	791b      	ldrb	r3, [r3, #4]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d008      	beq.n	8018368 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8018356:	f7fe ff85 	bl	8017264 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801835a:	69fb      	ldr	r3, [r7, #28]
 801835c:	2200      	movs	r2, #0
 801835e:	711a      	strb	r2, [r3, #4]
 8018360:	e002      	b.n	8018368 <dhcp_release_and_stop+0x124>
    return;
 8018362:	bf00      	nop
 8018364:	e000      	b.n	8018368 <dhcp_release_and_stop+0x124>
    return;
 8018366:	bf00      	nop
  }
}
 8018368:	3720      	adds	r7, #32
 801836a:	46bd      	mov	sp, r7
 801836c:	bdb0      	pop	{r4, r5, r7, pc}
 801836e:	bf00      	nop
 8018370:	2000afe8 	.word	0x2000afe8
 8018374:	080211e8 	.word	0x080211e8

08018378 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8018378:	b480      	push	{r7}
 801837a:	b083      	sub	sp, #12
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
 8018380:	460b      	mov	r3, r1
 8018382:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	795b      	ldrb	r3, [r3, #5]
 8018388:	78fa      	ldrb	r2, [r7, #3]
 801838a:	429a      	cmp	r2, r3
 801838c:	d008      	beq.n	80183a0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	78fa      	ldrb	r2, [r7, #3]
 8018392:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	2200      	movs	r2, #0
 8018398:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2200      	movs	r2, #0
 801839e:	811a      	strh	r2, [r3, #8]
  }
}
 80183a0:	bf00      	nop
 80183a2:	370c      	adds	r7, #12
 80183a4:	46bd      	mov	sp, r7
 80183a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183aa:	4770      	bx	lr

080183ac <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b082      	sub	sp, #8
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6039      	str	r1, [r7, #0]
 80183b4:	4611      	mov	r1, r2
 80183b6:	461a      	mov	r2, r3
 80183b8:	4603      	mov	r3, r0
 80183ba:	80fb      	strh	r3, [r7, #6]
 80183bc:	460b      	mov	r3, r1
 80183be:	717b      	strb	r3, [r7, #5]
 80183c0:	4613      	mov	r3, r2
 80183c2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80183c4:	88fa      	ldrh	r2, [r7, #6]
 80183c6:	793b      	ldrb	r3, [r7, #4]
 80183c8:	4413      	add	r3, r2
 80183ca:	3302      	adds	r3, #2
 80183cc:	2b44      	cmp	r3, #68	; 0x44
 80183ce:	d906      	bls.n	80183de <dhcp_option+0x32>
 80183d0:	4b0d      	ldr	r3, [pc, #52]	; (8018408 <dhcp_option+0x5c>)
 80183d2:	f240 529a 	movw	r2, #1434	; 0x59a
 80183d6:	490d      	ldr	r1, [pc, #52]	; (801840c <dhcp_option+0x60>)
 80183d8:	480d      	ldr	r0, [pc, #52]	; (8018410 <dhcp_option+0x64>)
 80183da:	f004 fcc1 	bl	801cd60 <iprintf>
  options[options_out_len++] = option_type;
 80183de:	88fb      	ldrh	r3, [r7, #6]
 80183e0:	1c5a      	adds	r2, r3, #1
 80183e2:	80fa      	strh	r2, [r7, #6]
 80183e4:	461a      	mov	r2, r3
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	4413      	add	r3, r2
 80183ea:	797a      	ldrb	r2, [r7, #5]
 80183ec:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80183ee:	88fb      	ldrh	r3, [r7, #6]
 80183f0:	1c5a      	adds	r2, r3, #1
 80183f2:	80fa      	strh	r2, [r7, #6]
 80183f4:	461a      	mov	r2, r3
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	4413      	add	r3, r2
 80183fa:	793a      	ldrb	r2, [r7, #4]
 80183fc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80183fe:	88fb      	ldrh	r3, [r7, #6]
}
 8018400:	4618      	mov	r0, r3
 8018402:	3708      	adds	r7, #8
 8018404:	46bd      	mov	sp, r7
 8018406:	bd80      	pop	{r7, pc}
 8018408:	08020500 	.word	0x08020500
 801840c:	08020694 	.word	0x08020694
 8018410:	08020560 	.word	0x08020560

08018414 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b082      	sub	sp, #8
 8018418:	af00      	add	r7, sp, #0
 801841a:	4603      	mov	r3, r0
 801841c:	6039      	str	r1, [r7, #0]
 801841e:	80fb      	strh	r3, [r7, #6]
 8018420:	4613      	mov	r3, r2
 8018422:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8018424:	88fb      	ldrh	r3, [r7, #6]
 8018426:	2b43      	cmp	r3, #67	; 0x43
 8018428:	d906      	bls.n	8018438 <dhcp_option_byte+0x24>
 801842a:	4b0a      	ldr	r3, [pc, #40]	; (8018454 <dhcp_option_byte+0x40>)
 801842c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8018430:	4909      	ldr	r1, [pc, #36]	; (8018458 <dhcp_option_byte+0x44>)
 8018432:	480a      	ldr	r0, [pc, #40]	; (801845c <dhcp_option_byte+0x48>)
 8018434:	f004 fc94 	bl	801cd60 <iprintf>
  options[options_out_len++] = value;
 8018438:	88fb      	ldrh	r3, [r7, #6]
 801843a:	1c5a      	adds	r2, r3, #1
 801843c:	80fa      	strh	r2, [r7, #6]
 801843e:	461a      	mov	r2, r3
 8018440:	683b      	ldr	r3, [r7, #0]
 8018442:	4413      	add	r3, r2
 8018444:	797a      	ldrb	r2, [r7, #5]
 8018446:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8018448:	88fb      	ldrh	r3, [r7, #6]
}
 801844a:	4618      	mov	r0, r3
 801844c:	3708      	adds	r7, #8
 801844e:	46bd      	mov	sp, r7
 8018450:	bd80      	pop	{r7, pc}
 8018452:	bf00      	nop
 8018454:	08020500 	.word	0x08020500
 8018458:	080206d8 	.word	0x080206d8
 801845c:	08020560 	.word	0x08020560

08018460 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b082      	sub	sp, #8
 8018464:	af00      	add	r7, sp, #0
 8018466:	4603      	mov	r3, r0
 8018468:	6039      	str	r1, [r7, #0]
 801846a:	80fb      	strh	r3, [r7, #6]
 801846c:	4613      	mov	r3, r2
 801846e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8018470:	88fb      	ldrh	r3, [r7, #6]
 8018472:	3302      	adds	r3, #2
 8018474:	2b44      	cmp	r3, #68	; 0x44
 8018476:	d906      	bls.n	8018486 <dhcp_option_short+0x26>
 8018478:	4b0f      	ldr	r3, [pc, #60]	; (80184b8 <dhcp_option_short+0x58>)
 801847a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801847e:	490f      	ldr	r1, [pc, #60]	; (80184bc <dhcp_option_short+0x5c>)
 8018480:	480f      	ldr	r0, [pc, #60]	; (80184c0 <dhcp_option_short+0x60>)
 8018482:	f004 fc6d 	bl	801cd60 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8018486:	88bb      	ldrh	r3, [r7, #4]
 8018488:	0a1b      	lsrs	r3, r3, #8
 801848a:	b29a      	uxth	r2, r3
 801848c:	88fb      	ldrh	r3, [r7, #6]
 801848e:	1c59      	adds	r1, r3, #1
 8018490:	80f9      	strh	r1, [r7, #6]
 8018492:	4619      	mov	r1, r3
 8018494:	683b      	ldr	r3, [r7, #0]
 8018496:	440b      	add	r3, r1
 8018498:	b2d2      	uxtb	r2, r2
 801849a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801849c:	88fb      	ldrh	r3, [r7, #6]
 801849e:	1c5a      	adds	r2, r3, #1
 80184a0:	80fa      	strh	r2, [r7, #6]
 80184a2:	461a      	mov	r2, r3
 80184a4:	683b      	ldr	r3, [r7, #0]
 80184a6:	4413      	add	r3, r2
 80184a8:	88ba      	ldrh	r2, [r7, #4]
 80184aa:	b2d2      	uxtb	r2, r2
 80184ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80184ae:	88fb      	ldrh	r3, [r7, #6]
}
 80184b0:	4618      	mov	r0, r3
 80184b2:	3708      	adds	r7, #8
 80184b4:	46bd      	mov	sp, r7
 80184b6:	bd80      	pop	{r7, pc}
 80184b8:	08020500 	.word	0x08020500
 80184bc:	08020710 	.word	0x08020710
 80184c0:	08020560 	.word	0x08020560

080184c4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b084      	sub	sp, #16
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	4603      	mov	r3, r0
 80184cc:	60b9      	str	r1, [r7, #8]
 80184ce:	607a      	str	r2, [r7, #4]
 80184d0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80184d2:	89fb      	ldrh	r3, [r7, #14]
 80184d4:	3304      	adds	r3, #4
 80184d6:	2b44      	cmp	r3, #68	; 0x44
 80184d8:	d906      	bls.n	80184e8 <dhcp_option_long+0x24>
 80184da:	4b19      	ldr	r3, [pc, #100]	; (8018540 <dhcp_option_long+0x7c>)
 80184dc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80184e0:	4918      	ldr	r1, [pc, #96]	; (8018544 <dhcp_option_long+0x80>)
 80184e2:	4819      	ldr	r0, [pc, #100]	; (8018548 <dhcp_option_long+0x84>)
 80184e4:	f004 fc3c 	bl	801cd60 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	0e1a      	lsrs	r2, r3, #24
 80184ec:	89fb      	ldrh	r3, [r7, #14]
 80184ee:	1c59      	adds	r1, r3, #1
 80184f0:	81f9      	strh	r1, [r7, #14]
 80184f2:	4619      	mov	r1, r3
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	440b      	add	r3, r1
 80184f8:	b2d2      	uxtb	r2, r2
 80184fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	0c1a      	lsrs	r2, r3, #16
 8018500:	89fb      	ldrh	r3, [r7, #14]
 8018502:	1c59      	adds	r1, r3, #1
 8018504:	81f9      	strh	r1, [r7, #14]
 8018506:	4619      	mov	r1, r3
 8018508:	68bb      	ldr	r3, [r7, #8]
 801850a:	440b      	add	r3, r1
 801850c:	b2d2      	uxtb	r2, r2
 801850e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	0a1a      	lsrs	r2, r3, #8
 8018514:	89fb      	ldrh	r3, [r7, #14]
 8018516:	1c59      	adds	r1, r3, #1
 8018518:	81f9      	strh	r1, [r7, #14]
 801851a:	4619      	mov	r1, r3
 801851c:	68bb      	ldr	r3, [r7, #8]
 801851e:	440b      	add	r3, r1
 8018520:	b2d2      	uxtb	r2, r2
 8018522:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8018524:	89fb      	ldrh	r3, [r7, #14]
 8018526:	1c5a      	adds	r2, r3, #1
 8018528:	81fa      	strh	r2, [r7, #14]
 801852a:	461a      	mov	r2, r3
 801852c:	68bb      	ldr	r3, [r7, #8]
 801852e:	4413      	add	r3, r2
 8018530:	687a      	ldr	r2, [r7, #4]
 8018532:	b2d2      	uxtb	r2, r2
 8018534:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8018536:	89fb      	ldrh	r3, [r7, #14]
}
 8018538:	4618      	mov	r0, r3
 801853a:	3710      	adds	r7, #16
 801853c:	46bd      	mov	sp, r7
 801853e:	bd80      	pop	{r7, pc}
 8018540:	08020500 	.word	0x08020500
 8018544:	0802074c 	.word	0x0802074c
 8018548:	08020560 	.word	0x08020560

0801854c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801854c:	b580      	push	{r7, lr}
 801854e:	b090      	sub	sp, #64	; 0x40
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
 8018554:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8018556:	2300      	movs	r3, #0
 8018558:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801855a:	2300      	movs	r3, #0
 801855c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801855e:	2208      	movs	r2, #8
 8018560:	2100      	movs	r1, #0
 8018562:	48be      	ldr	r0, [pc, #760]	; (801885c <dhcp_parse_reply+0x310>)
 8018564:	f004 fb99 	bl	801cc9a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	895b      	ldrh	r3, [r3, #10]
 801856c:	2b2b      	cmp	r3, #43	; 0x2b
 801856e:	d802      	bhi.n	8018576 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8018570:	f06f 0301 	mvn.w	r3, #1
 8018574:	e2a8      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	685b      	ldr	r3, [r3, #4]
 801857a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801857c:	23f0      	movs	r3, #240	; 0xf0
 801857e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	891b      	ldrh	r3, [r3, #8]
 8018584:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801858a:	e00c      	b.n	80185a6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801858e:	895b      	ldrh	r3, [r3, #10]
 8018590:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018592:	1ad3      	subs	r3, r2, r3
 8018594:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8018596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018598:	895b      	ldrh	r3, [r3, #10]
 801859a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801859c:	1ad3      	subs	r3, r2, r3
 801859e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80185a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80185a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d004      	beq.n	80185b6 <dhcp_parse_reply+0x6a>
 80185ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ae:	895b      	ldrh	r3, [r3, #10]
 80185b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d2ea      	bcs.n	801858c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80185b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d102      	bne.n	80185c2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80185bc:	f06f 0301 	mvn.w	r3, #1
 80185c0:	e282      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80185c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80185c4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80185c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80185c8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80185ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185cc:	685b      	ldr	r3, [r3, #4]
 80185ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80185d0:	e23a      	b.n	8018a48 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80185d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80185d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80185d6:	4413      	add	r3, r2
 80185d8:	781b      	ldrb	r3, [r3, #0]
 80185da:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80185dc:	2300      	movs	r3, #0
 80185de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80185e2:	f04f 33ff 	mov.w	r3, #4294967295
 80185e6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80185e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80185ea:	3302      	adds	r3, #2
 80185ec:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80185ee:	8bfa      	ldrh	r2, [r7, #30]
 80185f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80185f2:	429a      	cmp	r2, r3
 80185f4:	d202      	bcs.n	80185fc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80185f6:	f06f 0301 	mvn.w	r3, #1
 80185fa:	e265      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80185fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80185fe:	3301      	adds	r3, #1
 8018600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018602:	8952      	ldrh	r2, [r2, #10]
 8018604:	4293      	cmp	r3, r2
 8018606:	da07      	bge.n	8018618 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8018608:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801860a:	3301      	adds	r3, #1
 801860c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801860e:	4413      	add	r3, r2
 8018610:	781b      	ldrb	r3, [r3, #0]
 8018612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018616:	e00b      	b.n	8018630 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8018618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d004      	beq.n	801862a <dhcp_parse_reply+0xde>
 8018620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	685b      	ldr	r3, [r3, #4]
 8018626:	781b      	ldrb	r3, [r3, #0]
 8018628:	e000      	b.n	801862c <dhcp_parse_reply+0xe0>
 801862a:	2300      	movs	r3, #0
 801862c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8018630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8018638:	7dfb      	ldrb	r3, [r7, #23]
 801863a:	2b3b      	cmp	r3, #59	; 0x3b
 801863c:	f200 812d 	bhi.w	801889a <dhcp_parse_reply+0x34e>
 8018640:	a201      	add	r2, pc, #4	; (adr r2, 8018648 <dhcp_parse_reply+0xfc>)
 8018642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018646:	bf00      	nop
 8018648:	08018739 	.word	0x08018739
 801864c:	08018749 	.word	0x08018749
 8018650:	0801889b 	.word	0x0801889b
 8018654:	0801876b 	.word	0x0801876b
 8018658:	0801889b 	.word	0x0801889b
 801865c:	0801889b 	.word	0x0801889b
 8018660:	0801889b 	.word	0x0801889b
 8018664:	0801889b 	.word	0x0801889b
 8018668:	0801889b 	.word	0x0801889b
 801866c:	0801889b 	.word	0x0801889b
 8018670:	0801889b 	.word	0x0801889b
 8018674:	0801889b 	.word	0x0801889b
 8018678:	0801889b 	.word	0x0801889b
 801867c:	0801889b 	.word	0x0801889b
 8018680:	0801889b 	.word	0x0801889b
 8018684:	0801889b 	.word	0x0801889b
 8018688:	0801889b 	.word	0x0801889b
 801868c:	0801889b 	.word	0x0801889b
 8018690:	0801889b 	.word	0x0801889b
 8018694:	0801889b 	.word	0x0801889b
 8018698:	0801889b 	.word	0x0801889b
 801869c:	0801889b 	.word	0x0801889b
 80186a0:	0801889b 	.word	0x0801889b
 80186a4:	0801889b 	.word	0x0801889b
 80186a8:	0801889b 	.word	0x0801889b
 80186ac:	0801889b 	.word	0x0801889b
 80186b0:	0801889b 	.word	0x0801889b
 80186b4:	0801889b 	.word	0x0801889b
 80186b8:	0801889b 	.word	0x0801889b
 80186bc:	0801889b 	.word	0x0801889b
 80186c0:	0801889b 	.word	0x0801889b
 80186c4:	0801889b 	.word	0x0801889b
 80186c8:	0801889b 	.word	0x0801889b
 80186cc:	0801889b 	.word	0x0801889b
 80186d0:	0801889b 	.word	0x0801889b
 80186d4:	0801889b 	.word	0x0801889b
 80186d8:	0801889b 	.word	0x0801889b
 80186dc:	0801889b 	.word	0x0801889b
 80186e0:	0801889b 	.word	0x0801889b
 80186e4:	0801889b 	.word	0x0801889b
 80186e8:	0801889b 	.word	0x0801889b
 80186ec:	0801889b 	.word	0x0801889b
 80186f0:	0801889b 	.word	0x0801889b
 80186f4:	0801889b 	.word	0x0801889b
 80186f8:	0801889b 	.word	0x0801889b
 80186fc:	0801889b 	.word	0x0801889b
 8018700:	0801889b 	.word	0x0801889b
 8018704:	0801889b 	.word	0x0801889b
 8018708:	0801889b 	.word	0x0801889b
 801870c:	0801889b 	.word	0x0801889b
 8018710:	0801889b 	.word	0x0801889b
 8018714:	08018797 	.word	0x08018797
 8018718:	080187b9 	.word	0x080187b9
 801871c:	080187f5 	.word	0x080187f5
 8018720:	08018817 	.word	0x08018817
 8018724:	0801889b 	.word	0x0801889b
 8018728:	0801889b 	.word	0x0801889b
 801872c:	0801889b 	.word	0x0801889b
 8018730:	08018839 	.word	0x08018839
 8018734:	08018879 	.word	0x08018879
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8018738:	2300      	movs	r3, #0
 801873a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801873e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018742:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8018746:	e0ac      	b.n	80188a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801874c:	2b04      	cmp	r3, #4
 801874e:	d009      	beq.n	8018764 <dhcp_parse_reply+0x218>
 8018750:	4b43      	ldr	r3, [pc, #268]	; (8018860 <dhcp_parse_reply+0x314>)
 8018752:	f240 622e 	movw	r2, #1582	; 0x62e
 8018756:	4943      	ldr	r1, [pc, #268]	; (8018864 <dhcp_parse_reply+0x318>)
 8018758:	4843      	ldr	r0, [pc, #268]	; (8018868 <dhcp_parse_reply+0x31c>)
 801875a:	f004 fb01 	bl	801cd60 <iprintf>
 801875e:	f06f 0305 	mvn.w	r3, #5
 8018762:	e1b1      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8018764:	2306      	movs	r3, #6
 8018766:	623b      	str	r3, [r7, #32]
        break;
 8018768:	e09b      	b.n	80188a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801876a:	2304      	movs	r3, #4
 801876c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8018770:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018778:	429a      	cmp	r2, r3
 801877a:	d209      	bcs.n	8018790 <dhcp_parse_reply+0x244>
 801877c:	4b38      	ldr	r3, [pc, #224]	; (8018860 <dhcp_parse_reply+0x314>)
 801877e:	f240 6233 	movw	r2, #1587	; 0x633
 8018782:	493a      	ldr	r1, [pc, #232]	; (801886c <dhcp_parse_reply+0x320>)
 8018784:	4838      	ldr	r0, [pc, #224]	; (8018868 <dhcp_parse_reply+0x31c>)
 8018786:	f004 faeb 	bl	801cd60 <iprintf>
 801878a:	f06f 0305 	mvn.w	r3, #5
 801878e:	e19b      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8018790:	2307      	movs	r3, #7
 8018792:	623b      	str	r3, [r7, #32]
        break;
 8018794:	e085      	b.n	80188a2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801879a:	2b04      	cmp	r3, #4
 801879c:	d009      	beq.n	80187b2 <dhcp_parse_reply+0x266>
 801879e:	4b30      	ldr	r3, [pc, #192]	; (8018860 <dhcp_parse_reply+0x314>)
 80187a0:	f240 6241 	movw	r2, #1601	; 0x641
 80187a4:	492f      	ldr	r1, [pc, #188]	; (8018864 <dhcp_parse_reply+0x318>)
 80187a6:	4830      	ldr	r0, [pc, #192]	; (8018868 <dhcp_parse_reply+0x31c>)
 80187a8:	f004 fada 	bl	801cd60 <iprintf>
 80187ac:	f06f 0305 	mvn.w	r3, #5
 80187b0:	e18a      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80187b2:	2303      	movs	r3, #3
 80187b4:	623b      	str	r3, [r7, #32]
        break;
 80187b6:	e074      	b.n	80188a2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80187b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187bc:	2b01      	cmp	r3, #1
 80187be:	d009      	beq.n	80187d4 <dhcp_parse_reply+0x288>
 80187c0:	4b27      	ldr	r3, [pc, #156]	; (8018860 <dhcp_parse_reply+0x314>)
 80187c2:	f240 624f 	movw	r2, #1615	; 0x64f
 80187c6:	492a      	ldr	r1, [pc, #168]	; (8018870 <dhcp_parse_reply+0x324>)
 80187c8:	4827      	ldr	r0, [pc, #156]	; (8018868 <dhcp_parse_reply+0x31c>)
 80187ca:	f004 fac9 	bl	801cd60 <iprintf>
 80187ce:	f06f 0305 	mvn.w	r3, #5
 80187d2:	e179      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80187d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80187d6:	2bf0      	cmp	r3, #240	; 0xf0
 80187d8:	d009      	beq.n	80187ee <dhcp_parse_reply+0x2a2>
 80187da:	4b21      	ldr	r3, [pc, #132]	; (8018860 <dhcp_parse_reply+0x314>)
 80187dc:	f240 6251 	movw	r2, #1617	; 0x651
 80187e0:	4924      	ldr	r1, [pc, #144]	; (8018874 <dhcp_parse_reply+0x328>)
 80187e2:	4821      	ldr	r0, [pc, #132]	; (8018868 <dhcp_parse_reply+0x31c>)
 80187e4:	f004 fabc 	bl	801cd60 <iprintf>
 80187e8:	f06f 0305 	mvn.w	r3, #5
 80187ec:	e16c      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80187ee:	2300      	movs	r3, #0
 80187f0:	623b      	str	r3, [r7, #32]
        break;
 80187f2:	e056      	b.n	80188a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80187f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80187f8:	2b01      	cmp	r3, #1
 80187fa:	d009      	beq.n	8018810 <dhcp_parse_reply+0x2c4>
 80187fc:	4b18      	ldr	r3, [pc, #96]	; (8018860 <dhcp_parse_reply+0x314>)
 80187fe:	f240 6255 	movw	r2, #1621	; 0x655
 8018802:	491b      	ldr	r1, [pc, #108]	; (8018870 <dhcp_parse_reply+0x324>)
 8018804:	4818      	ldr	r0, [pc, #96]	; (8018868 <dhcp_parse_reply+0x31c>)
 8018806:	f004 faab 	bl	801cd60 <iprintf>
 801880a:	f06f 0305 	mvn.w	r3, #5
 801880e:	e15b      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8018810:	2301      	movs	r3, #1
 8018812:	623b      	str	r3, [r7, #32]
        break;
 8018814:	e045      	b.n	80188a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801881a:	2b04      	cmp	r3, #4
 801881c:	d009      	beq.n	8018832 <dhcp_parse_reply+0x2e6>
 801881e:	4b10      	ldr	r3, [pc, #64]	; (8018860 <dhcp_parse_reply+0x314>)
 8018820:	f240 6259 	movw	r2, #1625	; 0x659
 8018824:	490f      	ldr	r1, [pc, #60]	; (8018864 <dhcp_parse_reply+0x318>)
 8018826:	4810      	ldr	r0, [pc, #64]	; (8018868 <dhcp_parse_reply+0x31c>)
 8018828:	f004 fa9a 	bl	801cd60 <iprintf>
 801882c:	f06f 0305 	mvn.w	r3, #5
 8018830:	e14a      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8018832:	2302      	movs	r3, #2
 8018834:	623b      	str	r3, [r7, #32]
        break;
 8018836:	e034      	b.n	80188a2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801883c:	2b04      	cmp	r3, #4
 801883e:	d009      	beq.n	8018854 <dhcp_parse_reply+0x308>
 8018840:	4b07      	ldr	r3, [pc, #28]	; (8018860 <dhcp_parse_reply+0x314>)
 8018842:	f240 625d 	movw	r2, #1629	; 0x65d
 8018846:	4907      	ldr	r1, [pc, #28]	; (8018864 <dhcp_parse_reply+0x318>)
 8018848:	4807      	ldr	r0, [pc, #28]	; (8018868 <dhcp_parse_reply+0x31c>)
 801884a:	f004 fa89 	bl	801cd60 <iprintf>
 801884e:	f06f 0305 	mvn.w	r3, #5
 8018852:	e139      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8018854:	2304      	movs	r3, #4
 8018856:	623b      	str	r3, [r7, #32]
        break;
 8018858:	e023      	b.n	80188a2 <dhcp_parse_reply+0x356>
 801885a:	bf00      	nop
 801885c:	20013a10 	.word	0x20013a10
 8018860:	08020500 	.word	0x08020500
 8018864:	08020788 	.word	0x08020788
 8018868:	08020560 	.word	0x08020560
 801886c:	08020794 	.word	0x08020794
 8018870:	080207a8 	.word	0x080207a8
 8018874:	080207b4 	.word	0x080207b4
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801887c:	2b04      	cmp	r3, #4
 801887e:	d009      	beq.n	8018894 <dhcp_parse_reply+0x348>
 8018880:	4b93      	ldr	r3, [pc, #588]	; (8018ad0 <dhcp_parse_reply+0x584>)
 8018882:	f240 6261 	movw	r2, #1633	; 0x661
 8018886:	4993      	ldr	r1, [pc, #588]	; (8018ad4 <dhcp_parse_reply+0x588>)
 8018888:	4893      	ldr	r0, [pc, #588]	; (8018ad8 <dhcp_parse_reply+0x58c>)
 801888a:	f004 fa69 	bl	801cd60 <iprintf>
 801888e:	f06f 0305 	mvn.w	r3, #5
 8018892:	e119      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8018894:	2305      	movs	r3, #5
 8018896:	623b      	str	r3, [r7, #32]
        break;
 8018898:	e003      	b.n	80188a2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801889a:	2300      	movs	r3, #0
 801889c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80188a0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80188a2:	7dfb      	ldrb	r3, [r7, #23]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d103      	bne.n	80188b0 <dhcp_parse_reply+0x364>
      offset++;
 80188a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80188aa:	3301      	adds	r3, #1
 80188ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80188ae:	e0a1      	b.n	80189f4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80188b0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80188b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188b6:	4413      	add	r3, r2
 80188b8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80188bc:	4293      	cmp	r3, r2
 80188be:	dd02      	ble.n	80188c6 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80188c0:	f06f 0301 	mvn.w	r3, #1
 80188c4:	e100      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80188c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188ca:	b29a      	uxth	r2, r3
 80188cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80188ce:	4413      	add	r3, r2
 80188d0:	b29b      	uxth	r3, r3
 80188d2:	3302      	adds	r3, #2
 80188d4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80188d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80188da:	2b00      	cmp	r3, #0
 80188dc:	f000 808a 	beq.w	80189f4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80188e0:	2300      	movs	r3, #0
 80188e2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80188e4:	6a3b      	ldr	r3, [r7, #32]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	db02      	blt.n	80188f0 <dhcp_parse_reply+0x3a4>
 80188ea:	6a3b      	ldr	r3, [r7, #32]
 80188ec:	2b07      	cmp	r3, #7
 80188ee:	dd06      	ble.n	80188fe <dhcp_parse_reply+0x3b2>
 80188f0:	4b77      	ldr	r3, [pc, #476]	; (8018ad0 <dhcp_parse_reply+0x584>)
 80188f2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80188f6:	4979      	ldr	r1, [pc, #484]	; (8018adc <dhcp_parse_reply+0x590>)
 80188f8:	4877      	ldr	r0, [pc, #476]	; (8018ad8 <dhcp_parse_reply+0x58c>)
 80188fa:	f004 fa31 	bl	801cd60 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80188fe:	4a78      	ldr	r2, [pc, #480]	; (8018ae0 <dhcp_parse_reply+0x594>)
 8018900:	6a3b      	ldr	r3, [r7, #32]
 8018902:	4413      	add	r3, r2
 8018904:	781b      	ldrb	r3, [r3, #0]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d174      	bne.n	80189f4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801890a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801890e:	2b04      	cmp	r3, #4
 8018910:	bf28      	it	cs
 8018912:	2304      	movcs	r3, #4
 8018914:	b2db      	uxtb	r3, r3
 8018916:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8018918:	8bfb      	ldrh	r3, [r7, #30]
 801891a:	8aba      	ldrh	r2, [r7, #20]
 801891c:	f107 0108 	add.w	r1, r7, #8
 8018920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018922:	f7f8 fc1b 	bl	801115c <pbuf_copy_partial>
 8018926:	4603      	mov	r3, r0
 8018928:	461a      	mov	r2, r3
 801892a:	8abb      	ldrh	r3, [r7, #20]
 801892c:	4293      	cmp	r3, r2
 801892e:	d002      	beq.n	8018936 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8018930:	f06f 0301 	mvn.w	r3, #1
 8018934:	e0c8      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8018936:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801893a:	2b04      	cmp	r3, #4
 801893c:	d933      	bls.n	80189a6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801893e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018942:	f003 0303 	and.w	r3, r3, #3
 8018946:	b2db      	uxtb	r3, r3
 8018948:	2b00      	cmp	r3, #0
 801894a:	d009      	beq.n	8018960 <dhcp_parse_reply+0x414>
 801894c:	4b60      	ldr	r3, [pc, #384]	; (8018ad0 <dhcp_parse_reply+0x584>)
 801894e:	f240 6281 	movw	r2, #1665	; 0x681
 8018952:	4964      	ldr	r1, [pc, #400]	; (8018ae4 <dhcp_parse_reply+0x598>)
 8018954:	4860      	ldr	r0, [pc, #384]	; (8018ad8 <dhcp_parse_reply+0x58c>)
 8018956:	f004 fa03 	bl	801cd60 <iprintf>
 801895a:	f06f 0305 	mvn.w	r3, #5
 801895e:	e0b3      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8018960:	4a5f      	ldr	r2, [pc, #380]	; (8018ae0 <dhcp_parse_reply+0x594>)
 8018962:	6a3b      	ldr	r3, [r7, #32]
 8018964:	4413      	add	r3, r2
 8018966:	2201      	movs	r2, #1
 8018968:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801896a:	68bb      	ldr	r3, [r7, #8]
 801896c:	4618      	mov	r0, r3
 801896e:	f7f6 fe4c 	bl	800f60a <lwip_htonl>
 8018972:	4602      	mov	r2, r0
 8018974:	495c      	ldr	r1, [pc, #368]	; (8018ae8 <dhcp_parse_reply+0x59c>)
 8018976:	6a3b      	ldr	r3, [r7, #32]
 8018978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801897c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018980:	3b04      	subs	r3, #4
 8018982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8018986:	8bfb      	ldrh	r3, [r7, #30]
 8018988:	3304      	adds	r3, #4
 801898a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801898c:	8a7a      	ldrh	r2, [r7, #18]
 801898e:	8bfb      	ldrh	r3, [r7, #30]
 8018990:	429a      	cmp	r2, r3
 8018992:	d202      	bcs.n	801899a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8018994:	f06f 0301 	mvn.w	r3, #1
 8018998:	e096      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801899a:	8a7b      	ldrh	r3, [r7, #18]
 801899c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801899e:	6a3b      	ldr	r3, [r7, #32]
 80189a0:	3301      	adds	r3, #1
 80189a2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80189a4:	e79e      	b.n	80188e4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80189a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189aa:	2b04      	cmp	r3, #4
 80189ac:	d106      	bne.n	80189bc <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80189ae:	68bb      	ldr	r3, [r7, #8]
 80189b0:	4618      	mov	r0, r3
 80189b2:	f7f6 fe2a 	bl	800f60a <lwip_htonl>
 80189b6:	4603      	mov	r3, r0
 80189b8:	60bb      	str	r3, [r7, #8]
 80189ba:	e011      	b.n	80189e0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80189bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189c0:	2b01      	cmp	r3, #1
 80189c2:	d009      	beq.n	80189d8 <dhcp_parse_reply+0x48c>
 80189c4:	4b42      	ldr	r3, [pc, #264]	; (8018ad0 <dhcp_parse_reply+0x584>)
 80189c6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80189ca:	4948      	ldr	r1, [pc, #288]	; (8018aec <dhcp_parse_reply+0x5a0>)
 80189cc:	4842      	ldr	r0, [pc, #264]	; (8018ad8 <dhcp_parse_reply+0x58c>)
 80189ce:	f004 f9c7 	bl	801cd60 <iprintf>
 80189d2:	f06f 0305 	mvn.w	r3, #5
 80189d6:	e077      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80189d8:	f107 0308 	add.w	r3, r7, #8
 80189dc:	781b      	ldrb	r3, [r3, #0]
 80189de:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80189e0:	4a3f      	ldr	r2, [pc, #252]	; (8018ae0 <dhcp_parse_reply+0x594>)
 80189e2:	6a3b      	ldr	r3, [r7, #32]
 80189e4:	4413      	add	r3, r2
 80189e6:	2201      	movs	r2, #1
 80189e8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80189ea:	68ba      	ldr	r2, [r7, #8]
 80189ec:	493e      	ldr	r1, [pc, #248]	; (8018ae8 <dhcp_parse_reply+0x59c>)
 80189ee:	6a3b      	ldr	r3, [r7, #32]
 80189f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80189f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f6:	895b      	ldrh	r3, [r3, #10]
 80189f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80189fa:	429a      	cmp	r2, r3
 80189fc:	d324      	bcc.n	8018a48 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80189fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a00:	895b      	ldrh	r3, [r3, #10]
 8018a02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a04:	1ad3      	subs	r3, r2, r3
 8018a06:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8018a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a0a:	895b      	ldrh	r3, [r3, #10]
 8018a0c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8018a0e:	1ad3      	subs	r3, r2, r3
 8018a10:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8018a12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d213      	bcs.n	8018a42 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8018a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8018a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d109      	bne.n	8018a3a <dhcp_parse_reply+0x4ee>
 8018a26:	4b2a      	ldr	r3, [pc, #168]	; (8018ad0 <dhcp_parse_reply+0x584>)
 8018a28:	f240 629d 	movw	r2, #1693	; 0x69d
 8018a2c:	4930      	ldr	r1, [pc, #192]	; (8018af0 <dhcp_parse_reply+0x5a4>)
 8018a2e:	482a      	ldr	r0, [pc, #168]	; (8018ad8 <dhcp_parse_reply+0x58c>)
 8018a30:	f004 f996 	bl	801cd60 <iprintf>
 8018a34:	f06f 0305 	mvn.w	r3, #5
 8018a38:	e046      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8018a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a3c:	685b      	ldr	r3, [r3, #4]
 8018a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018a40:	e002      	b.n	8018a48 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8018a42:	f06f 0301 	mvn.w	r3, #1
 8018a46:	e03f      	b.n	8018ac8 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d00a      	beq.n	8018a64 <dhcp_parse_reply+0x518>
 8018a4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018a50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018a52:	429a      	cmp	r2, r3
 8018a54:	d206      	bcs.n	8018a64 <dhcp_parse_reply+0x518>
 8018a56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018a5a:	4413      	add	r3, r2
 8018a5c:	781b      	ldrb	r3, [r3, #0]
 8018a5e:	2bff      	cmp	r3, #255	; 0xff
 8018a60:	f47f adb7 	bne.w	80185d2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8018a64:	4b1e      	ldr	r3, [pc, #120]	; (8018ae0 <dhcp_parse_reply+0x594>)
 8018a66:	781b      	ldrb	r3, [r3, #0]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d018      	beq.n	8018a9e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018a6c:	4b1e      	ldr	r3, [pc, #120]	; (8018ae8 <dhcp_parse_reply+0x59c>)
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018a72:	4b1b      	ldr	r3, [pc, #108]	; (8018ae0 <dhcp_parse_reply+0x594>)
 8018a74:	2200      	movs	r2, #0
 8018a76:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	2b01      	cmp	r3, #1
 8018a7c:	d102      	bne.n	8018a84 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8018a7e:	2301      	movs	r3, #1
 8018a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a82:	e00c      	b.n	8018a9e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	2b02      	cmp	r3, #2
 8018a88:	d102      	bne.n	8018a90 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a8e:	e006      	b.n	8018a9e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	2b03      	cmp	r3, #3
 8018a94:	d103      	bne.n	8018a9e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8018a96:	2301      	movs	r3, #1
 8018a98:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8018a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d006      	beq.n	8018ab2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8018aa8:	236c      	movs	r3, #108	; 0x6c
 8018aaa:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8018aac:	23ec      	movs	r3, #236	; 0xec
 8018aae:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8018ab0:	e569      	b.n	8018586 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8018ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d006      	beq.n	8018ac6 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8018ab8:	2300      	movs	r3, #0
 8018aba:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8018abc:	232c      	movs	r3, #44	; 0x2c
 8018abe:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8018ac0:	236c      	movs	r3, #108	; 0x6c
 8018ac2:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8018ac4:	e55f      	b.n	8018586 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8018ac6:	2300      	movs	r3, #0
}
 8018ac8:	4618      	mov	r0, r3
 8018aca:	3740      	adds	r7, #64	; 0x40
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}
 8018ad0:	08020500 	.word	0x08020500
 8018ad4:	08020788 	.word	0x08020788
 8018ad8:	08020560 	.word	0x08020560
 8018adc:	080207cc 	.word	0x080207cc
 8018ae0:	20013a10 	.word	0x20013a10
 8018ae4:	080207e0 	.word	0x080207e0
 8018ae8:	20013a18 	.word	0x20013a18
 8018aec:	080207f8 	.word	0x080207f8
 8018af0:	0802080c 	.word	0x0802080c

08018af4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b08a      	sub	sp, #40	; 0x28
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	60f8      	str	r0, [r7, #12]
 8018afc:	60b9      	str	r1, [r7, #8]
 8018afe:	607a      	str	r2, [r7, #4]
 8018b00:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8018b02:	4b60      	ldr	r3, [pc, #384]	; (8018c84 <dhcp_recv+0x190>)
 8018b04:	685b      	ldr	r3, [r3, #4]
 8018b06:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018b08:	6a3b      	ldr	r3, [r7, #32]
 8018b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b0c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	685b      	ldr	r3, [r3, #4]
 8018b12:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8018b14:	69fb      	ldr	r3, [r7, #28]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	f000 809d 	beq.w	8018c56 <dhcp_recv+0x162>
 8018b1c:	69fb      	ldr	r3, [r7, #28]
 8018b1e:	791b      	ldrb	r3, [r3, #4]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	f000 8098 	beq.w	8018c56 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	895b      	ldrh	r3, [r3, #10]
 8018b2a:	2b2b      	cmp	r3, #43	; 0x2b
 8018b2c:	f240 8095 	bls.w	8018c5a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8018b30:	69bb      	ldr	r3, [r7, #24]
 8018b32:	781b      	ldrb	r3, [r3, #0]
 8018b34:	2b02      	cmp	r3, #2
 8018b36:	f040 8092 	bne.w	8018c5e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018b40:	e012      	b.n	8018b68 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8018b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b46:	6a3a      	ldr	r2, [r7, #32]
 8018b48:	4413      	add	r3, r2
 8018b4a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b52:	69b9      	ldr	r1, [r7, #24]
 8018b54:	440b      	add	r3, r1
 8018b56:	7f1b      	ldrb	r3, [r3, #28]
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	f040 8082 	bne.w	8018c62 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b62:	3301      	adds	r3, #1
 8018b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018b68:	6a3b      	ldr	r3, [r7, #32]
 8018b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018b6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d203      	bcs.n	8018b7e <dhcp_recv+0x8a>
 8018b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b7a:	2b05      	cmp	r3, #5
 8018b7c:	d9e1      	bls.n	8018b42 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8018b7e:	69bb      	ldr	r3, [r7, #24]
 8018b80:	685b      	ldr	r3, [r3, #4]
 8018b82:	4618      	mov	r0, r3
 8018b84:	f7f6 fd41 	bl	800f60a <lwip_htonl>
 8018b88:	4602      	mov	r2, r0
 8018b8a:	69fb      	ldr	r3, [r7, #28]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	429a      	cmp	r2, r3
 8018b90:	d169      	bne.n	8018c66 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8018b92:	69f9      	ldr	r1, [r7, #28]
 8018b94:	6878      	ldr	r0, [r7, #4]
 8018b96:	f7ff fcd9 	bl	801854c <dhcp_parse_reply>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d164      	bne.n	8018c6a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8018ba0:	4b39      	ldr	r3, [pc, #228]	; (8018c88 <dhcp_recv+0x194>)
 8018ba2:	785b      	ldrb	r3, [r3, #1]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d062      	beq.n	8018c6e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	685b      	ldr	r3, [r3, #4]
 8018bac:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8018bae:	4b37      	ldr	r3, [pc, #220]	; (8018c8c <dhcp_recv+0x198>)
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8018bb4:	7cfb      	ldrb	r3, [r7, #19]
 8018bb6:	2b05      	cmp	r3, #5
 8018bb8:	d12a      	bne.n	8018c10 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018bba:	69fb      	ldr	r3, [r7, #28]
 8018bbc:	795b      	ldrb	r3, [r3, #5]
 8018bbe:	2b01      	cmp	r3, #1
 8018bc0:	d112      	bne.n	8018be8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8018bc2:	6979      	ldr	r1, [r7, #20]
 8018bc4:	6a38      	ldr	r0, [r7, #32]
 8018bc6:	f7fe fe17 	bl	80177f8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8018bca:	6a3b      	ldr	r3, [r7, #32]
 8018bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018bd0:	f003 0308 	and.w	r3, r3, #8
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d003      	beq.n	8018be0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8018bd8:	6a38      	ldr	r0, [r7, #32]
 8018bda:	f7fe fb87 	bl	80172ec <dhcp_check>
 8018bde:	e049      	b.n	8018c74 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8018be0:	6a38      	ldr	r0, [r7, #32]
 8018be2:	f7ff f867 	bl	8017cb4 <dhcp_bind>
 8018be6:	e045      	b.n	8018c74 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018be8:	69fb      	ldr	r3, [r7, #28]
 8018bea:	795b      	ldrb	r3, [r3, #5]
 8018bec:	2b03      	cmp	r3, #3
 8018bee:	d007      	beq.n	8018c00 <dhcp_recv+0x10c>
 8018bf0:	69fb      	ldr	r3, [r7, #28]
 8018bf2:	795b      	ldrb	r3, [r3, #5]
 8018bf4:	2b04      	cmp	r3, #4
 8018bf6:	d003      	beq.n	8018c00 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8018bf8:	69fb      	ldr	r3, [r7, #28]
 8018bfa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018bfc:	2b05      	cmp	r3, #5
 8018bfe:	d139      	bne.n	8018c74 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8018c00:	6979      	ldr	r1, [r7, #20]
 8018c02:	6a38      	ldr	r0, [r7, #32]
 8018c04:	f7fe fdf8 	bl	80177f8 <dhcp_handle_ack>
      dhcp_bind(netif);
 8018c08:	6a38      	ldr	r0, [r7, #32]
 8018c0a:	f7ff f853 	bl	8017cb4 <dhcp_bind>
 8018c0e:	e031      	b.n	8018c74 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8018c10:	7cfb      	ldrb	r3, [r7, #19]
 8018c12:	2b06      	cmp	r3, #6
 8018c14:	d113      	bne.n	8018c3e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018c16:	69fb      	ldr	r3, [r7, #28]
 8018c18:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8018c1a:	2b03      	cmp	r3, #3
 8018c1c:	d00b      	beq.n	8018c36 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018c1e:	69fb      	ldr	r3, [r7, #28]
 8018c20:	795b      	ldrb	r3, [r3, #5]
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	d007      	beq.n	8018c36 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018c26:	69fb      	ldr	r3, [r7, #28]
 8018c28:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018c2a:	2b04      	cmp	r3, #4
 8018c2c:	d003      	beq.n	8018c36 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018c2e:	69fb      	ldr	r3, [r7, #28]
 8018c30:	795b      	ldrb	r3, [r3, #5]
 8018c32:	2b05      	cmp	r3, #5
 8018c34:	d103      	bne.n	8018c3e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8018c36:	6a38      	ldr	r0, [r7, #32]
 8018c38:	f7fe fb3e 	bl	80172b8 <dhcp_handle_nak>
 8018c3c:	e01a      	b.n	8018c74 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8018c3e:	7cfb      	ldrb	r3, [r7, #19]
 8018c40:	2b02      	cmp	r3, #2
 8018c42:	d116      	bne.n	8018c72 <dhcp_recv+0x17e>
 8018c44:	69fb      	ldr	r3, [r7, #28]
 8018c46:	795b      	ldrb	r3, [r3, #5]
 8018c48:	2b06      	cmp	r3, #6
 8018c4a:	d112      	bne.n	8018c72 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8018c4c:	6979      	ldr	r1, [r7, #20]
 8018c4e:	6a38      	ldr	r0, [r7, #32]
 8018c50:	f7fe fb80 	bl	8017354 <dhcp_handle_offer>
 8018c54:	e00e      	b.n	8018c74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018c56:	bf00      	nop
 8018c58:	e00c      	b.n	8018c74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018c5a:	bf00      	nop
 8018c5c:	e00a      	b.n	8018c74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018c5e:	bf00      	nop
 8018c60:	e008      	b.n	8018c74 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8018c62:	bf00      	nop
 8018c64:	e006      	b.n	8018c74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018c66:	bf00      	nop
 8018c68:	e004      	b.n	8018c74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018c6a:	bf00      	nop
 8018c6c:	e002      	b.n	8018c74 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018c6e:	bf00      	nop
 8018c70:	e000      	b.n	8018c74 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8018c72:	bf00      	nop
  pbuf_free(p);
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	f7f8 f86b 	bl	8010d50 <pbuf_free>
}
 8018c7a:	bf00      	nop
 8018c7c:	3728      	adds	r7, #40	; 0x28
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}
 8018c82:	bf00      	nop
 8018c84:	200102c0 	.word	0x200102c0
 8018c88:	20013a10 	.word	0x20013a10
 8018c8c:	20013a18 	.word	0x20013a18

08018c90 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b088      	sub	sp, #32
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	60f8      	str	r0, [r7, #12]
 8018c98:	60b9      	str	r1, [r7, #8]
 8018c9a:	603b      	str	r3, [r7, #0]
 8018c9c:	4613      	mov	r3, r2
 8018c9e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d108      	bne.n	8018cb8 <dhcp_create_msg+0x28>
 8018ca6:	4b5f      	ldr	r3, [pc, #380]	; (8018e24 <dhcp_create_msg+0x194>)
 8018ca8:	f240 7269 	movw	r2, #1897	; 0x769
 8018cac:	495e      	ldr	r1, [pc, #376]	; (8018e28 <dhcp_create_msg+0x198>)
 8018cae:	485f      	ldr	r0, [pc, #380]	; (8018e2c <dhcp_create_msg+0x19c>)
 8018cb0:	f004 f856 	bl	801cd60 <iprintf>
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	e0b1      	b.n	8018e1c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018cb8:	68bb      	ldr	r3, [r7, #8]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d108      	bne.n	8018cd0 <dhcp_create_msg+0x40>
 8018cbe:	4b59      	ldr	r3, [pc, #356]	; (8018e24 <dhcp_create_msg+0x194>)
 8018cc0:	f240 726a 	movw	r2, #1898	; 0x76a
 8018cc4:	495a      	ldr	r1, [pc, #360]	; (8018e30 <dhcp_create_msg+0x1a0>)
 8018cc6:	4859      	ldr	r0, [pc, #356]	; (8018e2c <dhcp_create_msg+0x19c>)
 8018cc8:	f004 f84a 	bl	801cd60 <iprintf>
 8018ccc:	2300      	movs	r3, #0
 8018cce:	e0a5      	b.n	8018e1c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018cd0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018cd4:	f44f 719a 	mov.w	r1, #308	; 0x134
 8018cd8:	2036      	movs	r0, #54	; 0x36
 8018cda:	f7f7 fd55 	bl	8010788 <pbuf_alloc>
 8018cde:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8018ce0:	69bb      	ldr	r3, [r7, #24]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d101      	bne.n	8018cea <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	e098      	b.n	8018e1c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8018cea:	69bb      	ldr	r3, [r7, #24]
 8018cec:	895b      	ldrh	r3, [r3, #10]
 8018cee:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8018cf2:	d206      	bcs.n	8018d02 <dhcp_create_msg+0x72>
 8018cf4:	4b4b      	ldr	r3, [pc, #300]	; (8018e24 <dhcp_create_msg+0x194>)
 8018cf6:	f240 7271 	movw	r2, #1905	; 0x771
 8018cfa:	494e      	ldr	r1, [pc, #312]	; (8018e34 <dhcp_create_msg+0x1a4>)
 8018cfc:	484b      	ldr	r0, [pc, #300]	; (8018e2c <dhcp_create_msg+0x19c>)
 8018cfe:	f004 f82f 	bl	801cd60 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8018d02:	79fb      	ldrb	r3, [r7, #7]
 8018d04:	2b03      	cmp	r3, #3
 8018d06:	d103      	bne.n	8018d10 <dhcp_create_msg+0x80>
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	795b      	ldrb	r3, [r3, #5]
 8018d0c:	2b03      	cmp	r3, #3
 8018d0e:	d10d      	bne.n	8018d2c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8018d10:	68bb      	ldr	r3, [r7, #8]
 8018d12:	799b      	ldrb	r3, [r3, #6]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d105      	bne.n	8018d24 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8018d18:	f004 f83a 	bl	801cd90 <rand>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	461a      	mov	r2, r3
 8018d20:	4b45      	ldr	r3, [pc, #276]	; (8018e38 <dhcp_create_msg+0x1a8>)
 8018d22:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8018d24:	4b44      	ldr	r3, [pc, #272]	; (8018e38 <dhcp_create_msg+0x1a8>)
 8018d26:	681a      	ldr	r2, [r3, #0]
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8018d2c:	69bb      	ldr	r3, [r7, #24]
 8018d2e:	685b      	ldr	r3, [r3, #4]
 8018d30:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8018d32:	f44f 729a 	mov.w	r2, #308	; 0x134
 8018d36:	2100      	movs	r1, #0
 8018d38:	6978      	ldr	r0, [r7, #20]
 8018d3a:	f003 ffae 	bl	801cc9a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8018d3e:	697b      	ldr	r3, [r7, #20]
 8018d40:	2201      	movs	r2, #1
 8018d42:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8018d44:	697b      	ldr	r3, [r7, #20]
 8018d46:	2201      	movs	r2, #1
 8018d48:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018d50:	697b      	ldr	r3, [r7, #20]
 8018d52:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018d54:	68bb      	ldr	r3, [r7, #8]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	4618      	mov	r0, r3
 8018d5a:	f7f6 fc56 	bl	800f60a <lwip_htonl>
 8018d5e:	4602      	mov	r2, r0
 8018d60:	697b      	ldr	r3, [r7, #20]
 8018d62:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018d64:	79fb      	ldrb	r3, [r7, #7]
 8018d66:	2b08      	cmp	r3, #8
 8018d68:	d010      	beq.n	8018d8c <dhcp_create_msg+0xfc>
 8018d6a:	79fb      	ldrb	r3, [r7, #7]
 8018d6c:	2b04      	cmp	r3, #4
 8018d6e:	d00d      	beq.n	8018d8c <dhcp_create_msg+0xfc>
 8018d70:	79fb      	ldrb	r3, [r7, #7]
 8018d72:	2b07      	cmp	r3, #7
 8018d74:	d00a      	beq.n	8018d8c <dhcp_create_msg+0xfc>
 8018d76:	79fb      	ldrb	r3, [r7, #7]
 8018d78:	2b03      	cmp	r3, #3
 8018d7a:	d10c      	bne.n	8018d96 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018d7c:	68bb      	ldr	r3, [r7, #8]
 8018d7e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018d80:	2b05      	cmp	r3, #5
 8018d82:	d003      	beq.n	8018d8c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	795b      	ldrb	r3, [r3, #5]
 8018d88:	2b04      	cmp	r3, #4
 8018d8a:	d104      	bne.n	8018d96 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	3304      	adds	r3, #4
 8018d90:	681a      	ldr	r2, [r3, #0]
 8018d92:	697b      	ldr	r3, [r7, #20]
 8018d94:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018d96:	2300      	movs	r3, #0
 8018d98:	83fb      	strh	r3, [r7, #30]
 8018d9a:	e00c      	b.n	8018db6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018d9c:	8bfa      	ldrh	r2, [r7, #30]
 8018d9e:	8bfb      	ldrh	r3, [r7, #30]
 8018da0:	68f9      	ldr	r1, [r7, #12]
 8018da2:	440a      	add	r2, r1
 8018da4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8018da8:	697a      	ldr	r2, [r7, #20]
 8018daa:	4413      	add	r3, r2
 8018dac:	460a      	mov	r2, r1
 8018dae:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018db0:	8bfb      	ldrh	r3, [r7, #30]
 8018db2:	3301      	adds	r3, #1
 8018db4:	83fb      	strh	r3, [r7, #30]
 8018db6:	8bfb      	ldrh	r3, [r7, #30]
 8018db8:	2b05      	cmp	r3, #5
 8018dba:	d9ef      	bls.n	8018d9c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018dbc:	697b      	ldr	r3, [r7, #20]
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018dc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8018dc8:	2200      	movs	r2, #0
 8018dca:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8018dce:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8018dd8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8018ddc:	2200      	movs	r2, #0
 8018dde:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018de2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8018de6:	697b      	ldr	r3, [r7, #20]
 8018de8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018dec:	2301      	movs	r3, #1
 8018dee:	2235      	movs	r2, #53	; 0x35
 8018df0:	2000      	movs	r0, #0
 8018df2:	f7ff fadb 	bl	80183ac <dhcp_option>
 8018df6:	4603      	mov	r3, r0
 8018df8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8018dfa:	697b      	ldr	r3, [r7, #20]
 8018dfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018e00:	79fa      	ldrb	r2, [r7, #7]
 8018e02:	8a7b      	ldrh	r3, [r7, #18]
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7ff fb05 	bl	8018414 <dhcp_option_byte>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8018e0e:	683b      	ldr	r3, [r7, #0]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d002      	beq.n	8018e1a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8018e14:	683b      	ldr	r3, [r7, #0]
 8018e16:	8a7a      	ldrh	r2, [r7, #18]
 8018e18:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8018e1a:	69bb      	ldr	r3, [r7, #24]
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	3720      	adds	r7, #32
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bd80      	pop	{r7, pc}
 8018e24:	08020500 	.word	0x08020500
 8018e28:	08020820 	.word	0x08020820
 8018e2c:	08020560 	.word	0x08020560
 8018e30:	08020840 	.word	0x08020840
 8018e34:	08020860 	.word	0x08020860
 8018e38:	2000aff0 	.word	0x2000aff0

08018e3c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b084      	sub	sp, #16
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	4603      	mov	r3, r0
 8018e44:	60b9      	str	r1, [r7, #8]
 8018e46:	607a      	str	r2, [r7, #4]
 8018e48:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8018e4a:	89fb      	ldrh	r3, [r7, #14]
 8018e4c:	1c5a      	adds	r2, r3, #1
 8018e4e:	81fa      	strh	r2, [r7, #14]
 8018e50:	461a      	mov	r2, r3
 8018e52:	68bb      	ldr	r3, [r7, #8]
 8018e54:	4413      	add	r3, r2
 8018e56:	22ff      	movs	r2, #255	; 0xff
 8018e58:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018e5a:	e007      	b.n	8018e6c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8018e5c:	89fb      	ldrh	r3, [r7, #14]
 8018e5e:	1c5a      	adds	r2, r3, #1
 8018e60:	81fa      	strh	r2, [r7, #14]
 8018e62:	461a      	mov	r2, r3
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	4413      	add	r3, r2
 8018e68:	2200      	movs	r2, #0
 8018e6a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018e6c:	89fb      	ldrh	r3, [r7, #14]
 8018e6e:	2b43      	cmp	r3, #67	; 0x43
 8018e70:	d904      	bls.n	8018e7c <dhcp_option_trailer+0x40>
 8018e72:	89fb      	ldrh	r3, [r7, #14]
 8018e74:	f003 0303 	and.w	r3, r3, #3
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d002      	beq.n	8018e82 <dhcp_option_trailer+0x46>
 8018e7c:	89fb      	ldrh	r3, [r7, #14]
 8018e7e:	2b43      	cmp	r3, #67	; 0x43
 8018e80:	d9ec      	bls.n	8018e5c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8018e82:	89fb      	ldrh	r3, [r7, #14]
 8018e84:	33f0      	adds	r3, #240	; 0xf0
 8018e86:	b29b      	uxth	r3, r3
 8018e88:	4619      	mov	r1, r3
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f7f7 fdda 	bl	8010a44 <pbuf_realloc>
}
 8018e90:	bf00      	nop
 8018e92:	3710      	adds	r7, #16
 8018e94:	46bd      	mov	sp, r7
 8018e96:	bd80      	pop	{r7, pc}

08018e98 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8018e98:	b480      	push	{r7}
 8018e9a:	b085      	sub	sp, #20
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d017      	beq.n	8018ed6 <dhcp_supplied_address+0x3e>
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d013      	beq.n	8018ed6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	795b      	ldrb	r3, [r3, #5]
 8018eb8:	2b0a      	cmp	r3, #10
 8018eba:	d007      	beq.n	8018ecc <dhcp_supplied_address+0x34>
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	795b      	ldrb	r3, [r3, #5]
 8018ec0:	2b05      	cmp	r3, #5
 8018ec2:	d003      	beq.n	8018ecc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018ec8:	2b04      	cmp	r3, #4
 8018eca:	d101      	bne.n	8018ed0 <dhcp_supplied_address+0x38>
 8018ecc:	2301      	movs	r3, #1
 8018ece:	e000      	b.n	8018ed2 <dhcp_supplied_address+0x3a>
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	b2db      	uxtb	r3, r3
 8018ed4:	e000      	b.n	8018ed8 <dhcp_supplied_address+0x40>
  }
  return 0;
 8018ed6:	2300      	movs	r3, #0
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3714      	adds	r7, #20
 8018edc:	46bd      	mov	sp, r7
 8018ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee2:	4770      	bx	lr

08018ee4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b082      	sub	sp, #8
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018eec:	4915      	ldr	r1, [pc, #84]	; (8018f44 <etharp_free_entry+0x60>)
 8018eee:	687a      	ldr	r2, [r7, #4]
 8018ef0:	4613      	mov	r3, r2
 8018ef2:	005b      	lsls	r3, r3, #1
 8018ef4:	4413      	add	r3, r2
 8018ef6:	00db      	lsls	r3, r3, #3
 8018ef8:	440b      	add	r3, r1
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d013      	beq.n	8018f28 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018f00:	4910      	ldr	r1, [pc, #64]	; (8018f44 <etharp_free_entry+0x60>)
 8018f02:	687a      	ldr	r2, [r7, #4]
 8018f04:	4613      	mov	r3, r2
 8018f06:	005b      	lsls	r3, r3, #1
 8018f08:	4413      	add	r3, r2
 8018f0a:	00db      	lsls	r3, r3, #3
 8018f0c:	440b      	add	r3, r1
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	4618      	mov	r0, r3
 8018f12:	f7f7 ff1d 	bl	8010d50 <pbuf_free>
    arp_table[i].q = NULL;
 8018f16:	490b      	ldr	r1, [pc, #44]	; (8018f44 <etharp_free_entry+0x60>)
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	4613      	mov	r3, r2
 8018f1c:	005b      	lsls	r3, r3, #1
 8018f1e:	4413      	add	r3, r2
 8018f20:	00db      	lsls	r3, r3, #3
 8018f22:	440b      	add	r3, r1
 8018f24:	2200      	movs	r2, #0
 8018f26:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018f28:	4906      	ldr	r1, [pc, #24]	; (8018f44 <etharp_free_entry+0x60>)
 8018f2a:	687a      	ldr	r2, [r7, #4]
 8018f2c:	4613      	mov	r3, r2
 8018f2e:	005b      	lsls	r3, r3, #1
 8018f30:	4413      	add	r3, r2
 8018f32:	00db      	lsls	r3, r3, #3
 8018f34:	440b      	add	r3, r1
 8018f36:	3314      	adds	r3, #20
 8018f38:	2200      	movs	r2, #0
 8018f3a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018f3c:	bf00      	nop
 8018f3e:	3708      	adds	r7, #8
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}
 8018f44:	2000aff4 	.word	0x2000aff4

08018f48 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018f4e:	2300      	movs	r3, #0
 8018f50:	607b      	str	r3, [r7, #4]
 8018f52:	e096      	b.n	8019082 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018f54:	494f      	ldr	r1, [pc, #316]	; (8019094 <etharp_tmr+0x14c>)
 8018f56:	687a      	ldr	r2, [r7, #4]
 8018f58:	4613      	mov	r3, r2
 8018f5a:	005b      	lsls	r3, r3, #1
 8018f5c:	4413      	add	r3, r2
 8018f5e:	00db      	lsls	r3, r3, #3
 8018f60:	440b      	add	r3, r1
 8018f62:	3314      	adds	r3, #20
 8018f64:	781b      	ldrb	r3, [r3, #0]
 8018f66:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018f68:	78fb      	ldrb	r3, [r7, #3]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f000 8086 	beq.w	801907c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018f70:	4948      	ldr	r1, [pc, #288]	; (8019094 <etharp_tmr+0x14c>)
 8018f72:	687a      	ldr	r2, [r7, #4]
 8018f74:	4613      	mov	r3, r2
 8018f76:	005b      	lsls	r3, r3, #1
 8018f78:	4413      	add	r3, r2
 8018f7a:	00db      	lsls	r3, r3, #3
 8018f7c:	440b      	add	r3, r1
 8018f7e:	3312      	adds	r3, #18
 8018f80:	881b      	ldrh	r3, [r3, #0]
 8018f82:	3301      	adds	r3, #1
 8018f84:	b298      	uxth	r0, r3
 8018f86:	4943      	ldr	r1, [pc, #268]	; (8019094 <etharp_tmr+0x14c>)
 8018f88:	687a      	ldr	r2, [r7, #4]
 8018f8a:	4613      	mov	r3, r2
 8018f8c:	005b      	lsls	r3, r3, #1
 8018f8e:	4413      	add	r3, r2
 8018f90:	00db      	lsls	r3, r3, #3
 8018f92:	440b      	add	r3, r1
 8018f94:	3312      	adds	r3, #18
 8018f96:	4602      	mov	r2, r0
 8018f98:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018f9a:	493e      	ldr	r1, [pc, #248]	; (8019094 <etharp_tmr+0x14c>)
 8018f9c:	687a      	ldr	r2, [r7, #4]
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	005b      	lsls	r3, r3, #1
 8018fa2:	4413      	add	r3, r2
 8018fa4:	00db      	lsls	r3, r3, #3
 8018fa6:	440b      	add	r3, r1
 8018fa8:	3312      	adds	r3, #18
 8018faa:	881b      	ldrh	r3, [r3, #0]
 8018fac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018fb0:	d215      	bcs.n	8018fde <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018fb2:	4938      	ldr	r1, [pc, #224]	; (8019094 <etharp_tmr+0x14c>)
 8018fb4:	687a      	ldr	r2, [r7, #4]
 8018fb6:	4613      	mov	r3, r2
 8018fb8:	005b      	lsls	r3, r3, #1
 8018fba:	4413      	add	r3, r2
 8018fbc:	00db      	lsls	r3, r3, #3
 8018fbe:	440b      	add	r3, r1
 8018fc0:	3314      	adds	r3, #20
 8018fc2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018fc4:	2b01      	cmp	r3, #1
 8018fc6:	d10e      	bne.n	8018fe6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018fc8:	4932      	ldr	r1, [pc, #200]	; (8019094 <etharp_tmr+0x14c>)
 8018fca:	687a      	ldr	r2, [r7, #4]
 8018fcc:	4613      	mov	r3, r2
 8018fce:	005b      	lsls	r3, r3, #1
 8018fd0:	4413      	add	r3, r2
 8018fd2:	00db      	lsls	r3, r3, #3
 8018fd4:	440b      	add	r3, r1
 8018fd6:	3312      	adds	r3, #18
 8018fd8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018fda:	2b04      	cmp	r3, #4
 8018fdc:	d903      	bls.n	8018fe6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018fde:	6878      	ldr	r0, [r7, #4]
 8018fe0:	f7ff ff80 	bl	8018ee4 <etharp_free_entry>
 8018fe4:	e04a      	b.n	801907c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018fe6:	492b      	ldr	r1, [pc, #172]	; (8019094 <etharp_tmr+0x14c>)
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	4613      	mov	r3, r2
 8018fec:	005b      	lsls	r3, r3, #1
 8018fee:	4413      	add	r3, r2
 8018ff0:	00db      	lsls	r3, r3, #3
 8018ff2:	440b      	add	r3, r1
 8018ff4:	3314      	adds	r3, #20
 8018ff6:	781b      	ldrb	r3, [r3, #0]
 8018ff8:	2b03      	cmp	r3, #3
 8018ffa:	d10a      	bne.n	8019012 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018ffc:	4925      	ldr	r1, [pc, #148]	; (8019094 <etharp_tmr+0x14c>)
 8018ffe:	687a      	ldr	r2, [r7, #4]
 8019000:	4613      	mov	r3, r2
 8019002:	005b      	lsls	r3, r3, #1
 8019004:	4413      	add	r3, r2
 8019006:	00db      	lsls	r3, r3, #3
 8019008:	440b      	add	r3, r1
 801900a:	3314      	adds	r3, #20
 801900c:	2204      	movs	r2, #4
 801900e:	701a      	strb	r2, [r3, #0]
 8019010:	e034      	b.n	801907c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019012:	4920      	ldr	r1, [pc, #128]	; (8019094 <etharp_tmr+0x14c>)
 8019014:	687a      	ldr	r2, [r7, #4]
 8019016:	4613      	mov	r3, r2
 8019018:	005b      	lsls	r3, r3, #1
 801901a:	4413      	add	r3, r2
 801901c:	00db      	lsls	r3, r3, #3
 801901e:	440b      	add	r3, r1
 8019020:	3314      	adds	r3, #20
 8019022:	781b      	ldrb	r3, [r3, #0]
 8019024:	2b04      	cmp	r3, #4
 8019026:	d10a      	bne.n	801903e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019028:	491a      	ldr	r1, [pc, #104]	; (8019094 <etharp_tmr+0x14c>)
 801902a:	687a      	ldr	r2, [r7, #4]
 801902c:	4613      	mov	r3, r2
 801902e:	005b      	lsls	r3, r3, #1
 8019030:	4413      	add	r3, r2
 8019032:	00db      	lsls	r3, r3, #3
 8019034:	440b      	add	r3, r1
 8019036:	3314      	adds	r3, #20
 8019038:	2202      	movs	r2, #2
 801903a:	701a      	strb	r2, [r3, #0]
 801903c:	e01e      	b.n	801907c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801903e:	4915      	ldr	r1, [pc, #84]	; (8019094 <etharp_tmr+0x14c>)
 8019040:	687a      	ldr	r2, [r7, #4]
 8019042:	4613      	mov	r3, r2
 8019044:	005b      	lsls	r3, r3, #1
 8019046:	4413      	add	r3, r2
 8019048:	00db      	lsls	r3, r3, #3
 801904a:	440b      	add	r3, r1
 801904c:	3314      	adds	r3, #20
 801904e:	781b      	ldrb	r3, [r3, #0]
 8019050:	2b01      	cmp	r3, #1
 8019052:	d113      	bne.n	801907c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019054:	490f      	ldr	r1, [pc, #60]	; (8019094 <etharp_tmr+0x14c>)
 8019056:	687a      	ldr	r2, [r7, #4]
 8019058:	4613      	mov	r3, r2
 801905a:	005b      	lsls	r3, r3, #1
 801905c:	4413      	add	r3, r2
 801905e:	00db      	lsls	r3, r3, #3
 8019060:	440b      	add	r3, r1
 8019062:	3308      	adds	r3, #8
 8019064:	6818      	ldr	r0, [r3, #0]
 8019066:	687a      	ldr	r2, [r7, #4]
 8019068:	4613      	mov	r3, r2
 801906a:	005b      	lsls	r3, r3, #1
 801906c:	4413      	add	r3, r2
 801906e:	00db      	lsls	r3, r3, #3
 8019070:	4a08      	ldr	r2, [pc, #32]	; (8019094 <etharp_tmr+0x14c>)
 8019072:	4413      	add	r3, r2
 8019074:	3304      	adds	r3, #4
 8019076:	4619      	mov	r1, r3
 8019078:	f000 fe72 	bl	8019d60 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	3301      	adds	r3, #1
 8019080:	607b      	str	r3, [r7, #4]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	2b09      	cmp	r3, #9
 8019086:	f77f af65 	ble.w	8018f54 <etharp_tmr+0xc>
      }
    }
  }
}
 801908a:	bf00      	nop
 801908c:	bf00      	nop
 801908e:	3708      	adds	r7, #8
 8019090:	46bd      	mov	sp, r7
 8019092:	bd80      	pop	{r7, pc}
 8019094:	2000aff4 	.word	0x2000aff4

08019098 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b08a      	sub	sp, #40	; 0x28
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	460b      	mov	r3, r1
 80190a2:	607a      	str	r2, [r7, #4]
 80190a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80190a6:	230a      	movs	r3, #10
 80190a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80190aa:	230a      	movs	r3, #10
 80190ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80190ae:	230a      	movs	r3, #10
 80190b0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80190b2:	2300      	movs	r3, #0
 80190b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80190b6:	230a      	movs	r3, #10
 80190b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80190ba:	2300      	movs	r3, #0
 80190bc:	83bb      	strh	r3, [r7, #28]
 80190be:	2300      	movs	r3, #0
 80190c0:	837b      	strh	r3, [r7, #26]
 80190c2:	2300      	movs	r3, #0
 80190c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80190c6:	2300      	movs	r3, #0
 80190c8:	843b      	strh	r3, [r7, #32]
 80190ca:	e0ae      	b.n	801922a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80190cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80190d0:	49a6      	ldr	r1, [pc, #664]	; (801936c <etharp_find_entry+0x2d4>)
 80190d2:	4613      	mov	r3, r2
 80190d4:	005b      	lsls	r3, r3, #1
 80190d6:	4413      	add	r3, r2
 80190d8:	00db      	lsls	r3, r3, #3
 80190da:	440b      	add	r3, r1
 80190dc:	3314      	adds	r3, #20
 80190de:	781b      	ldrb	r3, [r3, #0]
 80190e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80190e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80190e6:	2b0a      	cmp	r3, #10
 80190e8:	d105      	bne.n	80190f6 <etharp_find_entry+0x5e>
 80190ea:	7dfb      	ldrb	r3, [r7, #23]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d102      	bne.n	80190f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80190f0:	8c3b      	ldrh	r3, [r7, #32]
 80190f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80190f4:	e095      	b.n	8019222 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80190f6:	7dfb      	ldrb	r3, [r7, #23]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	f000 8092 	beq.w	8019222 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80190fe:	7dfb      	ldrb	r3, [r7, #23]
 8019100:	2b01      	cmp	r3, #1
 8019102:	d009      	beq.n	8019118 <etharp_find_entry+0x80>
 8019104:	7dfb      	ldrb	r3, [r7, #23]
 8019106:	2b01      	cmp	r3, #1
 8019108:	d806      	bhi.n	8019118 <etharp_find_entry+0x80>
 801910a:	4b99      	ldr	r3, [pc, #612]	; (8019370 <etharp_find_entry+0x2d8>)
 801910c:	f240 1223 	movw	r2, #291	; 0x123
 8019110:	4998      	ldr	r1, [pc, #608]	; (8019374 <etharp_find_entry+0x2dc>)
 8019112:	4899      	ldr	r0, [pc, #612]	; (8019378 <etharp_find_entry+0x2e0>)
 8019114:	f003 fe24 	bl	801cd60 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d020      	beq.n	8019160 <etharp_find_entry+0xc8>
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	6819      	ldr	r1, [r3, #0]
 8019122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019126:	4891      	ldr	r0, [pc, #580]	; (801936c <etharp_find_entry+0x2d4>)
 8019128:	4613      	mov	r3, r2
 801912a:	005b      	lsls	r3, r3, #1
 801912c:	4413      	add	r3, r2
 801912e:	00db      	lsls	r3, r3, #3
 8019130:	4403      	add	r3, r0
 8019132:	3304      	adds	r3, #4
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	4299      	cmp	r1, r3
 8019138:	d112      	bne.n	8019160 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d00c      	beq.n	801915a <etharp_find_entry+0xc2>
 8019140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019144:	4989      	ldr	r1, [pc, #548]	; (801936c <etharp_find_entry+0x2d4>)
 8019146:	4613      	mov	r3, r2
 8019148:	005b      	lsls	r3, r3, #1
 801914a:	4413      	add	r3, r2
 801914c:	00db      	lsls	r3, r3, #3
 801914e:	440b      	add	r3, r1
 8019150:	3308      	adds	r3, #8
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	687a      	ldr	r2, [r7, #4]
 8019156:	429a      	cmp	r2, r3
 8019158:	d102      	bne.n	8019160 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801915a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801915e:	e100      	b.n	8019362 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019160:	7dfb      	ldrb	r3, [r7, #23]
 8019162:	2b01      	cmp	r3, #1
 8019164:	d140      	bne.n	80191e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801916a:	4980      	ldr	r1, [pc, #512]	; (801936c <etharp_find_entry+0x2d4>)
 801916c:	4613      	mov	r3, r2
 801916e:	005b      	lsls	r3, r3, #1
 8019170:	4413      	add	r3, r2
 8019172:	00db      	lsls	r3, r3, #3
 8019174:	440b      	add	r3, r1
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d01a      	beq.n	80191b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801917c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019180:	497a      	ldr	r1, [pc, #488]	; (801936c <etharp_find_entry+0x2d4>)
 8019182:	4613      	mov	r3, r2
 8019184:	005b      	lsls	r3, r3, #1
 8019186:	4413      	add	r3, r2
 8019188:	00db      	lsls	r3, r3, #3
 801918a:	440b      	add	r3, r1
 801918c:	3312      	adds	r3, #18
 801918e:	881b      	ldrh	r3, [r3, #0]
 8019190:	8bba      	ldrh	r2, [r7, #28]
 8019192:	429a      	cmp	r2, r3
 8019194:	d845      	bhi.n	8019222 <etharp_find_entry+0x18a>
            old_queue = i;
 8019196:	8c3b      	ldrh	r3, [r7, #32]
 8019198:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801919a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801919e:	4973      	ldr	r1, [pc, #460]	; (801936c <etharp_find_entry+0x2d4>)
 80191a0:	4613      	mov	r3, r2
 80191a2:	005b      	lsls	r3, r3, #1
 80191a4:	4413      	add	r3, r2
 80191a6:	00db      	lsls	r3, r3, #3
 80191a8:	440b      	add	r3, r1
 80191aa:	3312      	adds	r3, #18
 80191ac:	881b      	ldrh	r3, [r3, #0]
 80191ae:	83bb      	strh	r3, [r7, #28]
 80191b0:	e037      	b.n	8019222 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80191b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191b6:	496d      	ldr	r1, [pc, #436]	; (801936c <etharp_find_entry+0x2d4>)
 80191b8:	4613      	mov	r3, r2
 80191ba:	005b      	lsls	r3, r3, #1
 80191bc:	4413      	add	r3, r2
 80191be:	00db      	lsls	r3, r3, #3
 80191c0:	440b      	add	r3, r1
 80191c2:	3312      	adds	r3, #18
 80191c4:	881b      	ldrh	r3, [r3, #0]
 80191c6:	8b7a      	ldrh	r2, [r7, #26]
 80191c8:	429a      	cmp	r2, r3
 80191ca:	d82a      	bhi.n	8019222 <etharp_find_entry+0x18a>
            old_pending = i;
 80191cc:	8c3b      	ldrh	r3, [r7, #32]
 80191ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80191d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191d4:	4965      	ldr	r1, [pc, #404]	; (801936c <etharp_find_entry+0x2d4>)
 80191d6:	4613      	mov	r3, r2
 80191d8:	005b      	lsls	r3, r3, #1
 80191da:	4413      	add	r3, r2
 80191dc:	00db      	lsls	r3, r3, #3
 80191de:	440b      	add	r3, r1
 80191e0:	3312      	adds	r3, #18
 80191e2:	881b      	ldrh	r3, [r3, #0]
 80191e4:	837b      	strh	r3, [r7, #26]
 80191e6:	e01c      	b.n	8019222 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80191e8:	7dfb      	ldrb	r3, [r7, #23]
 80191ea:	2b01      	cmp	r3, #1
 80191ec:	d919      	bls.n	8019222 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80191ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191f2:	495e      	ldr	r1, [pc, #376]	; (801936c <etharp_find_entry+0x2d4>)
 80191f4:	4613      	mov	r3, r2
 80191f6:	005b      	lsls	r3, r3, #1
 80191f8:	4413      	add	r3, r2
 80191fa:	00db      	lsls	r3, r3, #3
 80191fc:	440b      	add	r3, r1
 80191fe:	3312      	adds	r3, #18
 8019200:	881b      	ldrh	r3, [r3, #0]
 8019202:	8b3a      	ldrh	r2, [r7, #24]
 8019204:	429a      	cmp	r2, r3
 8019206:	d80c      	bhi.n	8019222 <etharp_find_entry+0x18a>
            old_stable = i;
 8019208:	8c3b      	ldrh	r3, [r7, #32]
 801920a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801920c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019210:	4956      	ldr	r1, [pc, #344]	; (801936c <etharp_find_entry+0x2d4>)
 8019212:	4613      	mov	r3, r2
 8019214:	005b      	lsls	r3, r3, #1
 8019216:	4413      	add	r3, r2
 8019218:	00db      	lsls	r3, r3, #3
 801921a:	440b      	add	r3, r1
 801921c:	3312      	adds	r3, #18
 801921e:	881b      	ldrh	r3, [r3, #0]
 8019220:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019222:	8c3b      	ldrh	r3, [r7, #32]
 8019224:	3301      	adds	r3, #1
 8019226:	b29b      	uxth	r3, r3
 8019228:	843b      	strh	r3, [r7, #32]
 801922a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801922e:	2b09      	cmp	r3, #9
 8019230:	f77f af4c 	ble.w	80190cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019234:	7afb      	ldrb	r3, [r7, #11]
 8019236:	f003 0302 	and.w	r3, r3, #2
 801923a:	2b00      	cmp	r3, #0
 801923c:	d108      	bne.n	8019250 <etharp_find_entry+0x1b8>
 801923e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019242:	2b0a      	cmp	r3, #10
 8019244:	d107      	bne.n	8019256 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019246:	7afb      	ldrb	r3, [r7, #11]
 8019248:	f003 0301 	and.w	r3, r3, #1
 801924c:	2b00      	cmp	r3, #0
 801924e:	d102      	bne.n	8019256 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019250:	f04f 33ff 	mov.w	r3, #4294967295
 8019254:	e085      	b.n	8019362 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019256:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801925a:	2b09      	cmp	r3, #9
 801925c:	dc02      	bgt.n	8019264 <etharp_find_entry+0x1cc>
    i = empty;
 801925e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019260:	843b      	strh	r3, [r7, #32]
 8019262:	e039      	b.n	80192d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019264:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019268:	2b09      	cmp	r3, #9
 801926a:	dc14      	bgt.n	8019296 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801926c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801926e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019274:	493d      	ldr	r1, [pc, #244]	; (801936c <etharp_find_entry+0x2d4>)
 8019276:	4613      	mov	r3, r2
 8019278:	005b      	lsls	r3, r3, #1
 801927a:	4413      	add	r3, r2
 801927c:	00db      	lsls	r3, r3, #3
 801927e:	440b      	add	r3, r1
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d018      	beq.n	80192b8 <etharp_find_entry+0x220>
 8019286:	4b3a      	ldr	r3, [pc, #232]	; (8019370 <etharp_find_entry+0x2d8>)
 8019288:	f240 126d 	movw	r2, #365	; 0x16d
 801928c:	493b      	ldr	r1, [pc, #236]	; (801937c <etharp_find_entry+0x2e4>)
 801928e:	483a      	ldr	r0, [pc, #232]	; (8019378 <etharp_find_entry+0x2e0>)
 8019290:	f003 fd66 	bl	801cd60 <iprintf>
 8019294:	e010      	b.n	80192b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019296:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801929a:	2b09      	cmp	r3, #9
 801929c:	dc02      	bgt.n	80192a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801929e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80192a0:	843b      	strh	r3, [r7, #32]
 80192a2:	e009      	b.n	80192b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80192a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80192a8:	2b09      	cmp	r3, #9
 80192aa:	dc02      	bgt.n	80192b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80192ac:	8bfb      	ldrh	r3, [r7, #30]
 80192ae:	843b      	strh	r3, [r7, #32]
 80192b0:	e002      	b.n	80192b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80192b2:	f04f 33ff 	mov.w	r3, #4294967295
 80192b6:	e054      	b.n	8019362 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80192b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80192bc:	2b09      	cmp	r3, #9
 80192be:	dd06      	ble.n	80192ce <etharp_find_entry+0x236>
 80192c0:	4b2b      	ldr	r3, [pc, #172]	; (8019370 <etharp_find_entry+0x2d8>)
 80192c2:	f240 127f 	movw	r2, #383	; 0x17f
 80192c6:	492e      	ldr	r1, [pc, #184]	; (8019380 <etharp_find_entry+0x2e8>)
 80192c8:	482b      	ldr	r0, [pc, #172]	; (8019378 <etharp_find_entry+0x2e0>)
 80192ca:	f003 fd49 	bl	801cd60 <iprintf>
    etharp_free_entry(i);
 80192ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80192d2:	4618      	mov	r0, r3
 80192d4:	f7ff fe06 	bl	8018ee4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80192d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80192dc:	2b09      	cmp	r3, #9
 80192de:	dd06      	ble.n	80192ee <etharp_find_entry+0x256>
 80192e0:	4b23      	ldr	r3, [pc, #140]	; (8019370 <etharp_find_entry+0x2d8>)
 80192e2:	f240 1283 	movw	r2, #387	; 0x183
 80192e6:	4926      	ldr	r1, [pc, #152]	; (8019380 <etharp_find_entry+0x2e8>)
 80192e8:	4823      	ldr	r0, [pc, #140]	; (8019378 <etharp_find_entry+0x2e0>)
 80192ea:	f003 fd39 	bl	801cd60 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80192ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192f2:	491e      	ldr	r1, [pc, #120]	; (801936c <etharp_find_entry+0x2d4>)
 80192f4:	4613      	mov	r3, r2
 80192f6:	005b      	lsls	r3, r3, #1
 80192f8:	4413      	add	r3, r2
 80192fa:	00db      	lsls	r3, r3, #3
 80192fc:	440b      	add	r3, r1
 80192fe:	3314      	adds	r3, #20
 8019300:	781b      	ldrb	r3, [r3, #0]
 8019302:	2b00      	cmp	r3, #0
 8019304:	d006      	beq.n	8019314 <etharp_find_entry+0x27c>
 8019306:	4b1a      	ldr	r3, [pc, #104]	; (8019370 <etharp_find_entry+0x2d8>)
 8019308:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801930c:	491d      	ldr	r1, [pc, #116]	; (8019384 <etharp_find_entry+0x2ec>)
 801930e:	481a      	ldr	r0, [pc, #104]	; (8019378 <etharp_find_entry+0x2e0>)
 8019310:	f003 fd26 	bl	801cd60 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d00b      	beq.n	8019332 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801931a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	6819      	ldr	r1, [r3, #0]
 8019322:	4812      	ldr	r0, [pc, #72]	; (801936c <etharp_find_entry+0x2d4>)
 8019324:	4613      	mov	r3, r2
 8019326:	005b      	lsls	r3, r3, #1
 8019328:	4413      	add	r3, r2
 801932a:	00db      	lsls	r3, r3, #3
 801932c:	4403      	add	r3, r0
 801932e:	3304      	adds	r3, #4
 8019330:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019332:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019336:	490d      	ldr	r1, [pc, #52]	; (801936c <etharp_find_entry+0x2d4>)
 8019338:	4613      	mov	r3, r2
 801933a:	005b      	lsls	r3, r3, #1
 801933c:	4413      	add	r3, r2
 801933e:	00db      	lsls	r3, r3, #3
 8019340:	440b      	add	r3, r1
 8019342:	3312      	adds	r3, #18
 8019344:	2200      	movs	r2, #0
 8019346:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019348:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801934c:	4907      	ldr	r1, [pc, #28]	; (801936c <etharp_find_entry+0x2d4>)
 801934e:	4613      	mov	r3, r2
 8019350:	005b      	lsls	r3, r3, #1
 8019352:	4413      	add	r3, r2
 8019354:	00db      	lsls	r3, r3, #3
 8019356:	440b      	add	r3, r1
 8019358:	3308      	adds	r3, #8
 801935a:	687a      	ldr	r2, [r7, #4]
 801935c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801935e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019362:	4618      	mov	r0, r3
 8019364:	3728      	adds	r7, #40	; 0x28
 8019366:	46bd      	mov	sp, r7
 8019368:	bd80      	pop	{r7, pc}
 801936a:	bf00      	nop
 801936c:	2000aff4 	.word	0x2000aff4
 8019370:	080208a0 	.word	0x080208a0
 8019374:	080208d8 	.word	0x080208d8
 8019378:	08020918 	.word	0x08020918
 801937c:	08020940 	.word	0x08020940
 8019380:	08020958 	.word	0x08020958
 8019384:	0802096c 	.word	0x0802096c

08019388 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b088      	sub	sp, #32
 801938c:	af02      	add	r7, sp, #8
 801938e:	60f8      	str	r0, [r7, #12]
 8019390:	60b9      	str	r1, [r7, #8]
 8019392:	607a      	str	r2, [r7, #4]
 8019394:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801939c:	2b06      	cmp	r3, #6
 801939e:	d006      	beq.n	80193ae <etharp_update_arp_entry+0x26>
 80193a0:	4b48      	ldr	r3, [pc, #288]	; (80194c4 <etharp_update_arp_entry+0x13c>)
 80193a2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80193a6:	4948      	ldr	r1, [pc, #288]	; (80194c8 <etharp_update_arp_entry+0x140>)
 80193a8:	4848      	ldr	r0, [pc, #288]	; (80194cc <etharp_update_arp_entry+0x144>)
 80193aa:	f003 fcd9 	bl	801cd60 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80193ae:	68bb      	ldr	r3, [r7, #8]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d012      	beq.n	80193da <etharp_update_arp_entry+0x52>
 80193b4:	68bb      	ldr	r3, [r7, #8]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d00e      	beq.n	80193da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	68f9      	ldr	r1, [r7, #12]
 80193c2:	4618      	mov	r0, r3
 80193c4:	f001 f920 	bl	801a608 <ip4_addr_isbroadcast_u32>
 80193c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d105      	bne.n	80193da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80193ce:	68bb      	ldr	r3, [r7, #8]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80193d6:	2be0      	cmp	r3, #224	; 0xe0
 80193d8:	d102      	bne.n	80193e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80193da:	f06f 030f 	mvn.w	r3, #15
 80193de:	e06c      	b.n	80194ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80193e0:	78fb      	ldrb	r3, [r7, #3]
 80193e2:	68fa      	ldr	r2, [r7, #12]
 80193e4:	4619      	mov	r1, r3
 80193e6:	68b8      	ldr	r0, [r7, #8]
 80193e8:	f7ff fe56 	bl	8019098 <etharp_find_entry>
 80193ec:	4603      	mov	r3, r0
 80193ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80193f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	da02      	bge.n	80193fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80193f8:	8afb      	ldrh	r3, [r7, #22]
 80193fa:	b25b      	sxtb	r3, r3
 80193fc:	e05d      	b.n	80194ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80193fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019402:	4933      	ldr	r1, [pc, #204]	; (80194d0 <etharp_update_arp_entry+0x148>)
 8019404:	4613      	mov	r3, r2
 8019406:	005b      	lsls	r3, r3, #1
 8019408:	4413      	add	r3, r2
 801940a:	00db      	lsls	r3, r3, #3
 801940c:	440b      	add	r3, r1
 801940e:	3314      	adds	r3, #20
 8019410:	2202      	movs	r2, #2
 8019412:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019414:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019418:	492d      	ldr	r1, [pc, #180]	; (80194d0 <etharp_update_arp_entry+0x148>)
 801941a:	4613      	mov	r3, r2
 801941c:	005b      	lsls	r3, r3, #1
 801941e:	4413      	add	r3, r2
 8019420:	00db      	lsls	r3, r3, #3
 8019422:	440b      	add	r3, r1
 8019424:	3308      	adds	r3, #8
 8019426:	68fa      	ldr	r2, [r7, #12]
 8019428:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801942a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801942e:	4613      	mov	r3, r2
 8019430:	005b      	lsls	r3, r3, #1
 8019432:	4413      	add	r3, r2
 8019434:	00db      	lsls	r3, r3, #3
 8019436:	3308      	adds	r3, #8
 8019438:	4a25      	ldr	r2, [pc, #148]	; (80194d0 <etharp_update_arp_entry+0x148>)
 801943a:	4413      	add	r3, r2
 801943c:	3304      	adds	r3, #4
 801943e:	2206      	movs	r2, #6
 8019440:	6879      	ldr	r1, [r7, #4]
 8019442:	4618      	mov	r0, r3
 8019444:	f003 fc1b 	bl	801cc7e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019448:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801944c:	4920      	ldr	r1, [pc, #128]	; (80194d0 <etharp_update_arp_entry+0x148>)
 801944e:	4613      	mov	r3, r2
 8019450:	005b      	lsls	r3, r3, #1
 8019452:	4413      	add	r3, r2
 8019454:	00db      	lsls	r3, r3, #3
 8019456:	440b      	add	r3, r1
 8019458:	3312      	adds	r3, #18
 801945a:	2200      	movs	r2, #0
 801945c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801945e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019462:	491b      	ldr	r1, [pc, #108]	; (80194d0 <etharp_update_arp_entry+0x148>)
 8019464:	4613      	mov	r3, r2
 8019466:	005b      	lsls	r3, r3, #1
 8019468:	4413      	add	r3, r2
 801946a:	00db      	lsls	r3, r3, #3
 801946c:	440b      	add	r3, r1
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d021      	beq.n	80194b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019474:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019478:	4915      	ldr	r1, [pc, #84]	; (80194d0 <etharp_update_arp_entry+0x148>)
 801947a:	4613      	mov	r3, r2
 801947c:	005b      	lsls	r3, r3, #1
 801947e:	4413      	add	r3, r2
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	440b      	add	r3, r1
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019488:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801948c:	4910      	ldr	r1, [pc, #64]	; (80194d0 <etharp_update_arp_entry+0x148>)
 801948e:	4613      	mov	r3, r2
 8019490:	005b      	lsls	r3, r3, #1
 8019492:	4413      	add	r3, r2
 8019494:	00db      	lsls	r3, r3, #3
 8019496:	440b      	add	r3, r1
 8019498:	2200      	movs	r2, #0
 801949a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80194a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80194a6:	9300      	str	r3, [sp, #0]
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	6939      	ldr	r1, [r7, #16]
 80194ac:	68f8      	ldr	r0, [r7, #12]
 80194ae:	f001 ffb3 	bl	801b418 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80194b2:	6938      	ldr	r0, [r7, #16]
 80194b4:	f7f7 fc4c 	bl	8010d50 <pbuf_free>
  }
  return ERR_OK;
 80194b8:	2300      	movs	r3, #0
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	3718      	adds	r7, #24
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}
 80194c2:	bf00      	nop
 80194c4:	080208a0 	.word	0x080208a0
 80194c8:	08020998 	.word	0x08020998
 80194cc:	08020918 	.word	0x08020918
 80194d0:	2000aff4 	.word	0x2000aff4

080194d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b084      	sub	sp, #16
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80194dc:	2300      	movs	r3, #0
 80194de:	60fb      	str	r3, [r7, #12]
 80194e0:	e01e      	b.n	8019520 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80194e2:	4913      	ldr	r1, [pc, #76]	; (8019530 <etharp_cleanup_netif+0x5c>)
 80194e4:	68fa      	ldr	r2, [r7, #12]
 80194e6:	4613      	mov	r3, r2
 80194e8:	005b      	lsls	r3, r3, #1
 80194ea:	4413      	add	r3, r2
 80194ec:	00db      	lsls	r3, r3, #3
 80194ee:	440b      	add	r3, r1
 80194f0:	3314      	adds	r3, #20
 80194f2:	781b      	ldrb	r3, [r3, #0]
 80194f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80194f6:	7afb      	ldrb	r3, [r7, #11]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d00e      	beq.n	801951a <etharp_cleanup_netif+0x46>
 80194fc:	490c      	ldr	r1, [pc, #48]	; (8019530 <etharp_cleanup_netif+0x5c>)
 80194fe:	68fa      	ldr	r2, [r7, #12]
 8019500:	4613      	mov	r3, r2
 8019502:	005b      	lsls	r3, r3, #1
 8019504:	4413      	add	r3, r2
 8019506:	00db      	lsls	r3, r3, #3
 8019508:	440b      	add	r3, r1
 801950a:	3308      	adds	r3, #8
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	687a      	ldr	r2, [r7, #4]
 8019510:	429a      	cmp	r2, r3
 8019512:	d102      	bne.n	801951a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019514:	68f8      	ldr	r0, [r7, #12]
 8019516:	f7ff fce5 	bl	8018ee4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	3301      	adds	r3, #1
 801951e:	60fb      	str	r3, [r7, #12]
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	2b09      	cmp	r3, #9
 8019524:	dddd      	ble.n	80194e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8019526:	bf00      	nop
 8019528:	bf00      	nop
 801952a:	3710      	adds	r7, #16
 801952c:	46bd      	mov	sp, r7
 801952e:	bd80      	pop	{r7, pc}
 8019530:	2000aff4 	.word	0x2000aff4

08019534 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019534:	b5b0      	push	{r4, r5, r7, lr}
 8019536:	b08a      	sub	sp, #40	; 0x28
 8019538:	af04      	add	r7, sp, #16
 801953a:	6078      	str	r0, [r7, #4]
 801953c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801953e:	683b      	ldr	r3, [r7, #0]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d107      	bne.n	8019554 <etharp_input+0x20>
 8019544:	4b3f      	ldr	r3, [pc, #252]	; (8019644 <etharp_input+0x110>)
 8019546:	f240 228a 	movw	r2, #650	; 0x28a
 801954a:	493f      	ldr	r1, [pc, #252]	; (8019648 <etharp_input+0x114>)
 801954c:	483f      	ldr	r0, [pc, #252]	; (801964c <etharp_input+0x118>)
 801954e:	f003 fc07 	bl	801cd60 <iprintf>
 8019552:	e074      	b.n	801963e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	685b      	ldr	r3, [r3, #4]
 8019558:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801955a:	693b      	ldr	r3, [r7, #16]
 801955c:	881b      	ldrh	r3, [r3, #0]
 801955e:	b29b      	uxth	r3, r3
 8019560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019564:	d10c      	bne.n	8019580 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019566:	693b      	ldr	r3, [r7, #16]
 8019568:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801956a:	2b06      	cmp	r3, #6
 801956c:	d108      	bne.n	8019580 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801956e:	693b      	ldr	r3, [r7, #16]
 8019570:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019572:	2b04      	cmp	r3, #4
 8019574:	d104      	bne.n	8019580 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019576:	693b      	ldr	r3, [r7, #16]
 8019578:	885b      	ldrh	r3, [r3, #2]
 801957a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801957c:	2b08      	cmp	r3, #8
 801957e:	d003      	beq.n	8019588 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019580:	6878      	ldr	r0, [r7, #4]
 8019582:	f7f7 fbe5 	bl	8010d50 <pbuf_free>
    return;
 8019586:	e05a      	b.n	801963e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019588:	693b      	ldr	r3, [r7, #16]
 801958a:	330e      	adds	r3, #14
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019590:	693b      	ldr	r3, [r7, #16]
 8019592:	3318      	adds	r3, #24
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019598:	683b      	ldr	r3, [r7, #0]
 801959a:	3304      	adds	r3, #4
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d102      	bne.n	80195a8 <etharp_input+0x74>
    for_us = 0;
 80195a2:	2300      	movs	r3, #0
 80195a4:	75fb      	strb	r3, [r7, #23]
 80195a6:	e009      	b.n	80195bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80195a8:	68ba      	ldr	r2, [r7, #8]
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	3304      	adds	r3, #4
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	429a      	cmp	r2, r3
 80195b2:	bf0c      	ite	eq
 80195b4:	2301      	moveq	r3, #1
 80195b6:	2300      	movne	r3, #0
 80195b8:	b2db      	uxtb	r3, r3
 80195ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80195bc:	693b      	ldr	r3, [r7, #16]
 80195be:	f103 0208 	add.w	r2, r3, #8
 80195c2:	7dfb      	ldrb	r3, [r7, #23]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d001      	beq.n	80195cc <etharp_input+0x98>
 80195c8:	2301      	movs	r3, #1
 80195ca:	e000      	b.n	80195ce <etharp_input+0x9a>
 80195cc:	2302      	movs	r3, #2
 80195ce:	f107 010c 	add.w	r1, r7, #12
 80195d2:	6838      	ldr	r0, [r7, #0]
 80195d4:	f7ff fed8 	bl	8019388 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80195d8:	693b      	ldr	r3, [r7, #16]
 80195da:	88db      	ldrh	r3, [r3, #6]
 80195dc:	b29b      	uxth	r3, r3
 80195de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80195e2:	d003      	beq.n	80195ec <etharp_input+0xb8>
 80195e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80195e8:	d01e      	beq.n	8019628 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80195ea:	e025      	b.n	8019638 <etharp_input+0x104>
      if (for_us) {
 80195ec:	7dfb      	ldrb	r3, [r7, #23]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d021      	beq.n	8019636 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80195f2:	683b      	ldr	r3, [r7, #0]
 80195f4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80195f8:	693b      	ldr	r3, [r7, #16]
 80195fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80195fe:	683b      	ldr	r3, [r7, #0]
 8019600:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019608:	693a      	ldr	r2, [r7, #16]
 801960a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801960c:	2102      	movs	r1, #2
 801960e:	9103      	str	r1, [sp, #12]
 8019610:	f107 010c 	add.w	r1, r7, #12
 8019614:	9102      	str	r1, [sp, #8]
 8019616:	9201      	str	r2, [sp, #4]
 8019618:	9300      	str	r3, [sp, #0]
 801961a:	462b      	mov	r3, r5
 801961c:	4622      	mov	r2, r4
 801961e:	4601      	mov	r1, r0
 8019620:	6838      	ldr	r0, [r7, #0]
 8019622:	f000 faef 	bl	8019c04 <etharp_raw>
      break;
 8019626:	e006      	b.n	8019636 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8019628:	f107 030c 	add.w	r3, r7, #12
 801962c:	4619      	mov	r1, r3
 801962e:	6838      	ldr	r0, [r7, #0]
 8019630:	f7fe f9fc 	bl	8017a2c <dhcp_arp_reply>
      break;
 8019634:	e000      	b.n	8019638 <etharp_input+0x104>
      break;
 8019636:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f7f7 fb89 	bl	8010d50 <pbuf_free>
}
 801963e:	3718      	adds	r7, #24
 8019640:	46bd      	mov	sp, r7
 8019642:	bdb0      	pop	{r4, r5, r7, pc}
 8019644:	080208a0 	.word	0x080208a0
 8019648:	080209f0 	.word	0x080209f0
 801964c:	08020918 	.word	0x08020918

08019650 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b086      	sub	sp, #24
 8019654:	af02      	add	r7, sp, #8
 8019656:	60f8      	str	r0, [r7, #12]
 8019658:	60b9      	str	r1, [r7, #8]
 801965a:	4613      	mov	r3, r2
 801965c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801965e:	79fa      	ldrb	r2, [r7, #7]
 8019660:	4944      	ldr	r1, [pc, #272]	; (8019774 <etharp_output_to_arp_index+0x124>)
 8019662:	4613      	mov	r3, r2
 8019664:	005b      	lsls	r3, r3, #1
 8019666:	4413      	add	r3, r2
 8019668:	00db      	lsls	r3, r3, #3
 801966a:	440b      	add	r3, r1
 801966c:	3314      	adds	r3, #20
 801966e:	781b      	ldrb	r3, [r3, #0]
 8019670:	2b01      	cmp	r3, #1
 8019672:	d806      	bhi.n	8019682 <etharp_output_to_arp_index+0x32>
 8019674:	4b40      	ldr	r3, [pc, #256]	; (8019778 <etharp_output_to_arp_index+0x128>)
 8019676:	f240 22ee 	movw	r2, #750	; 0x2ee
 801967a:	4940      	ldr	r1, [pc, #256]	; (801977c <etharp_output_to_arp_index+0x12c>)
 801967c:	4840      	ldr	r0, [pc, #256]	; (8019780 <etharp_output_to_arp_index+0x130>)
 801967e:	f003 fb6f 	bl	801cd60 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019682:	79fa      	ldrb	r2, [r7, #7]
 8019684:	493b      	ldr	r1, [pc, #236]	; (8019774 <etharp_output_to_arp_index+0x124>)
 8019686:	4613      	mov	r3, r2
 8019688:	005b      	lsls	r3, r3, #1
 801968a:	4413      	add	r3, r2
 801968c:	00db      	lsls	r3, r3, #3
 801968e:	440b      	add	r3, r1
 8019690:	3314      	adds	r3, #20
 8019692:	781b      	ldrb	r3, [r3, #0]
 8019694:	2b02      	cmp	r3, #2
 8019696:	d153      	bne.n	8019740 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019698:	79fa      	ldrb	r2, [r7, #7]
 801969a:	4936      	ldr	r1, [pc, #216]	; (8019774 <etharp_output_to_arp_index+0x124>)
 801969c:	4613      	mov	r3, r2
 801969e:	005b      	lsls	r3, r3, #1
 80196a0:	4413      	add	r3, r2
 80196a2:	00db      	lsls	r3, r3, #3
 80196a4:	440b      	add	r3, r1
 80196a6:	3312      	adds	r3, #18
 80196a8:	881b      	ldrh	r3, [r3, #0]
 80196aa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80196ae:	d919      	bls.n	80196e4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80196b0:	79fa      	ldrb	r2, [r7, #7]
 80196b2:	4613      	mov	r3, r2
 80196b4:	005b      	lsls	r3, r3, #1
 80196b6:	4413      	add	r3, r2
 80196b8:	00db      	lsls	r3, r3, #3
 80196ba:	4a2e      	ldr	r2, [pc, #184]	; (8019774 <etharp_output_to_arp_index+0x124>)
 80196bc:	4413      	add	r3, r2
 80196be:	3304      	adds	r3, #4
 80196c0:	4619      	mov	r1, r3
 80196c2:	68f8      	ldr	r0, [r7, #12]
 80196c4:	f000 fb4c 	bl	8019d60 <etharp_request>
 80196c8:	4603      	mov	r3, r0
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d138      	bne.n	8019740 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80196ce:	79fa      	ldrb	r2, [r7, #7]
 80196d0:	4928      	ldr	r1, [pc, #160]	; (8019774 <etharp_output_to_arp_index+0x124>)
 80196d2:	4613      	mov	r3, r2
 80196d4:	005b      	lsls	r3, r3, #1
 80196d6:	4413      	add	r3, r2
 80196d8:	00db      	lsls	r3, r3, #3
 80196da:	440b      	add	r3, r1
 80196dc:	3314      	adds	r3, #20
 80196de:	2203      	movs	r2, #3
 80196e0:	701a      	strb	r2, [r3, #0]
 80196e2:	e02d      	b.n	8019740 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80196e4:	79fa      	ldrb	r2, [r7, #7]
 80196e6:	4923      	ldr	r1, [pc, #140]	; (8019774 <etharp_output_to_arp_index+0x124>)
 80196e8:	4613      	mov	r3, r2
 80196ea:	005b      	lsls	r3, r3, #1
 80196ec:	4413      	add	r3, r2
 80196ee:	00db      	lsls	r3, r3, #3
 80196f0:	440b      	add	r3, r1
 80196f2:	3312      	adds	r3, #18
 80196f4:	881b      	ldrh	r3, [r3, #0]
 80196f6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80196fa:	d321      	bcc.n	8019740 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80196fc:	79fa      	ldrb	r2, [r7, #7]
 80196fe:	4613      	mov	r3, r2
 8019700:	005b      	lsls	r3, r3, #1
 8019702:	4413      	add	r3, r2
 8019704:	00db      	lsls	r3, r3, #3
 8019706:	4a1b      	ldr	r2, [pc, #108]	; (8019774 <etharp_output_to_arp_index+0x124>)
 8019708:	4413      	add	r3, r2
 801970a:	1d19      	adds	r1, r3, #4
 801970c:	79fa      	ldrb	r2, [r7, #7]
 801970e:	4613      	mov	r3, r2
 8019710:	005b      	lsls	r3, r3, #1
 8019712:	4413      	add	r3, r2
 8019714:	00db      	lsls	r3, r3, #3
 8019716:	3308      	adds	r3, #8
 8019718:	4a16      	ldr	r2, [pc, #88]	; (8019774 <etharp_output_to_arp_index+0x124>)
 801971a:	4413      	add	r3, r2
 801971c:	3304      	adds	r3, #4
 801971e:	461a      	mov	r2, r3
 8019720:	68f8      	ldr	r0, [r7, #12]
 8019722:	f000 fafb 	bl	8019d1c <etharp_request_dst>
 8019726:	4603      	mov	r3, r0
 8019728:	2b00      	cmp	r3, #0
 801972a:	d109      	bne.n	8019740 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801972c:	79fa      	ldrb	r2, [r7, #7]
 801972e:	4911      	ldr	r1, [pc, #68]	; (8019774 <etharp_output_to_arp_index+0x124>)
 8019730:	4613      	mov	r3, r2
 8019732:	005b      	lsls	r3, r3, #1
 8019734:	4413      	add	r3, r2
 8019736:	00db      	lsls	r3, r3, #3
 8019738:	440b      	add	r3, r1
 801973a:	3314      	adds	r3, #20
 801973c:	2203      	movs	r2, #3
 801973e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8019746:	79fa      	ldrb	r2, [r7, #7]
 8019748:	4613      	mov	r3, r2
 801974a:	005b      	lsls	r3, r3, #1
 801974c:	4413      	add	r3, r2
 801974e:	00db      	lsls	r3, r3, #3
 8019750:	3308      	adds	r3, #8
 8019752:	4a08      	ldr	r2, [pc, #32]	; (8019774 <etharp_output_to_arp_index+0x124>)
 8019754:	4413      	add	r3, r2
 8019756:	3304      	adds	r3, #4
 8019758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801975c:	9200      	str	r2, [sp, #0]
 801975e:	460a      	mov	r2, r1
 8019760:	68b9      	ldr	r1, [r7, #8]
 8019762:	68f8      	ldr	r0, [r7, #12]
 8019764:	f001 fe58 	bl	801b418 <ethernet_output>
 8019768:	4603      	mov	r3, r0
}
 801976a:	4618      	mov	r0, r3
 801976c:	3710      	adds	r7, #16
 801976e:	46bd      	mov	sp, r7
 8019770:	bd80      	pop	{r7, pc}
 8019772:	bf00      	nop
 8019774:	2000aff4 	.word	0x2000aff4
 8019778:	080208a0 	.word	0x080208a0
 801977c:	08020a10 	.word	0x08020a10
 8019780:	08020918 	.word	0x08020918

08019784 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019784:	b580      	push	{r7, lr}
 8019786:	b08a      	sub	sp, #40	; 0x28
 8019788:	af02      	add	r7, sp, #8
 801978a:	60f8      	str	r0, [r7, #12]
 801978c:	60b9      	str	r1, [r7, #8]
 801978e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d106      	bne.n	80197a8 <etharp_output+0x24>
 801979a:	4b73      	ldr	r3, [pc, #460]	; (8019968 <etharp_output+0x1e4>)
 801979c:	f240 321e 	movw	r2, #798	; 0x31e
 80197a0:	4972      	ldr	r1, [pc, #456]	; (801996c <etharp_output+0x1e8>)
 80197a2:	4873      	ldr	r0, [pc, #460]	; (8019970 <etharp_output+0x1ec>)
 80197a4:	f003 fadc 	bl	801cd60 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80197a8:	68bb      	ldr	r3, [r7, #8]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d106      	bne.n	80197bc <etharp_output+0x38>
 80197ae:	4b6e      	ldr	r3, [pc, #440]	; (8019968 <etharp_output+0x1e4>)
 80197b0:	f240 321f 	movw	r2, #799	; 0x31f
 80197b4:	496f      	ldr	r1, [pc, #444]	; (8019974 <etharp_output+0x1f0>)
 80197b6:	486e      	ldr	r0, [pc, #440]	; (8019970 <etharp_output+0x1ec>)
 80197b8:	f003 fad2 	bl	801cd60 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d106      	bne.n	80197d0 <etharp_output+0x4c>
 80197c2:	4b69      	ldr	r3, [pc, #420]	; (8019968 <etharp_output+0x1e4>)
 80197c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80197c8:	496b      	ldr	r1, [pc, #428]	; (8019978 <etharp_output+0x1f4>)
 80197ca:	4869      	ldr	r0, [pc, #420]	; (8019970 <etharp_output+0x1ec>)
 80197cc:	f003 fac8 	bl	801cd60 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	68f9      	ldr	r1, [r7, #12]
 80197d6:	4618      	mov	r0, r3
 80197d8:	f000 ff16 	bl	801a608 <ip4_addr_isbroadcast_u32>
 80197dc:	4603      	mov	r3, r0
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d002      	beq.n	80197e8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80197e2:	4b66      	ldr	r3, [pc, #408]	; (801997c <etharp_output+0x1f8>)
 80197e4:	61fb      	str	r3, [r7, #28]
 80197e6:	e0af      	b.n	8019948 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80197f0:	2be0      	cmp	r3, #224	; 0xe0
 80197f2:	d118      	bne.n	8019826 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80197f4:	2301      	movs	r3, #1
 80197f6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80197f8:	2300      	movs	r3, #0
 80197fa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80197fc:	235e      	movs	r3, #94	; 0x5e
 80197fe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	3301      	adds	r3, #1
 8019804:	781b      	ldrb	r3, [r3, #0]
 8019806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801980a:	b2db      	uxtb	r3, r3
 801980c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	3302      	adds	r3, #2
 8019812:	781b      	ldrb	r3, [r3, #0]
 8019814:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	3303      	adds	r3, #3
 801981a:	781b      	ldrb	r3, [r3, #0]
 801981c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801981e:	f107 0310 	add.w	r3, r7, #16
 8019822:	61fb      	str	r3, [r7, #28]
 8019824:	e090      	b.n	8019948 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	681a      	ldr	r2, [r3, #0]
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	3304      	adds	r3, #4
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	405a      	eors	r2, r3
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	3308      	adds	r3, #8
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	4013      	ands	r3, r2
 801983a:	2b00      	cmp	r3, #0
 801983c:	d012      	beq.n	8019864 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019844:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019848:	4293      	cmp	r3, r2
 801984a:	d00b      	beq.n	8019864 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	330c      	adds	r3, #12
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d003      	beq.n	801985e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	330c      	adds	r3, #12
 801985a:	61bb      	str	r3, [r7, #24]
 801985c:	e002      	b.n	8019864 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801985e:	f06f 0303 	mvn.w	r3, #3
 8019862:	e07d      	b.n	8019960 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019864:	4b46      	ldr	r3, [pc, #280]	; (8019980 <etharp_output+0x1fc>)
 8019866:	781b      	ldrb	r3, [r3, #0]
 8019868:	4619      	mov	r1, r3
 801986a:	4a46      	ldr	r2, [pc, #280]	; (8019984 <etharp_output+0x200>)
 801986c:	460b      	mov	r3, r1
 801986e:	005b      	lsls	r3, r3, #1
 8019870:	440b      	add	r3, r1
 8019872:	00db      	lsls	r3, r3, #3
 8019874:	4413      	add	r3, r2
 8019876:	3314      	adds	r3, #20
 8019878:	781b      	ldrb	r3, [r3, #0]
 801987a:	2b01      	cmp	r3, #1
 801987c:	d925      	bls.n	80198ca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801987e:	4b40      	ldr	r3, [pc, #256]	; (8019980 <etharp_output+0x1fc>)
 8019880:	781b      	ldrb	r3, [r3, #0]
 8019882:	4619      	mov	r1, r3
 8019884:	4a3f      	ldr	r2, [pc, #252]	; (8019984 <etharp_output+0x200>)
 8019886:	460b      	mov	r3, r1
 8019888:	005b      	lsls	r3, r3, #1
 801988a:	440b      	add	r3, r1
 801988c:	00db      	lsls	r3, r3, #3
 801988e:	4413      	add	r3, r2
 8019890:	3308      	adds	r3, #8
 8019892:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019894:	68fa      	ldr	r2, [r7, #12]
 8019896:	429a      	cmp	r2, r3
 8019898:	d117      	bne.n	80198ca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801989a:	69bb      	ldr	r3, [r7, #24]
 801989c:	681a      	ldr	r2, [r3, #0]
 801989e:	4b38      	ldr	r3, [pc, #224]	; (8019980 <etharp_output+0x1fc>)
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	4618      	mov	r0, r3
 80198a4:	4937      	ldr	r1, [pc, #220]	; (8019984 <etharp_output+0x200>)
 80198a6:	4603      	mov	r3, r0
 80198a8:	005b      	lsls	r3, r3, #1
 80198aa:	4403      	add	r3, r0
 80198ac:	00db      	lsls	r3, r3, #3
 80198ae:	440b      	add	r3, r1
 80198b0:	3304      	adds	r3, #4
 80198b2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80198b4:	429a      	cmp	r2, r3
 80198b6:	d108      	bne.n	80198ca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80198b8:	4b31      	ldr	r3, [pc, #196]	; (8019980 <etharp_output+0x1fc>)
 80198ba:	781b      	ldrb	r3, [r3, #0]
 80198bc:	461a      	mov	r2, r3
 80198be:	68b9      	ldr	r1, [r7, #8]
 80198c0:	68f8      	ldr	r0, [r7, #12]
 80198c2:	f7ff fec5 	bl	8019650 <etharp_output_to_arp_index>
 80198c6:	4603      	mov	r3, r0
 80198c8:	e04a      	b.n	8019960 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80198ca:	2300      	movs	r3, #0
 80198cc:	75fb      	strb	r3, [r7, #23]
 80198ce:	e031      	b.n	8019934 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80198d0:	7dfa      	ldrb	r2, [r7, #23]
 80198d2:	492c      	ldr	r1, [pc, #176]	; (8019984 <etharp_output+0x200>)
 80198d4:	4613      	mov	r3, r2
 80198d6:	005b      	lsls	r3, r3, #1
 80198d8:	4413      	add	r3, r2
 80198da:	00db      	lsls	r3, r3, #3
 80198dc:	440b      	add	r3, r1
 80198de:	3314      	adds	r3, #20
 80198e0:	781b      	ldrb	r3, [r3, #0]
 80198e2:	2b01      	cmp	r3, #1
 80198e4:	d923      	bls.n	801992e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80198e6:	7dfa      	ldrb	r2, [r7, #23]
 80198e8:	4926      	ldr	r1, [pc, #152]	; (8019984 <etharp_output+0x200>)
 80198ea:	4613      	mov	r3, r2
 80198ec:	005b      	lsls	r3, r3, #1
 80198ee:	4413      	add	r3, r2
 80198f0:	00db      	lsls	r3, r3, #3
 80198f2:	440b      	add	r3, r1
 80198f4:	3308      	adds	r3, #8
 80198f6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80198f8:	68fa      	ldr	r2, [r7, #12]
 80198fa:	429a      	cmp	r2, r3
 80198fc:	d117      	bne.n	801992e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80198fe:	69bb      	ldr	r3, [r7, #24]
 8019900:	6819      	ldr	r1, [r3, #0]
 8019902:	7dfa      	ldrb	r2, [r7, #23]
 8019904:	481f      	ldr	r0, [pc, #124]	; (8019984 <etharp_output+0x200>)
 8019906:	4613      	mov	r3, r2
 8019908:	005b      	lsls	r3, r3, #1
 801990a:	4413      	add	r3, r2
 801990c:	00db      	lsls	r3, r3, #3
 801990e:	4403      	add	r3, r0
 8019910:	3304      	adds	r3, #4
 8019912:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019914:	4299      	cmp	r1, r3
 8019916:	d10a      	bne.n	801992e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019918:	4a19      	ldr	r2, [pc, #100]	; (8019980 <etharp_output+0x1fc>)
 801991a:	7dfb      	ldrb	r3, [r7, #23]
 801991c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801991e:	7dfb      	ldrb	r3, [r7, #23]
 8019920:	461a      	mov	r2, r3
 8019922:	68b9      	ldr	r1, [r7, #8]
 8019924:	68f8      	ldr	r0, [r7, #12]
 8019926:	f7ff fe93 	bl	8019650 <etharp_output_to_arp_index>
 801992a:	4603      	mov	r3, r0
 801992c:	e018      	b.n	8019960 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801992e:	7dfb      	ldrb	r3, [r7, #23]
 8019930:	3301      	adds	r3, #1
 8019932:	75fb      	strb	r3, [r7, #23]
 8019934:	7dfb      	ldrb	r3, [r7, #23]
 8019936:	2b09      	cmp	r3, #9
 8019938:	d9ca      	bls.n	80198d0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801993a:	68ba      	ldr	r2, [r7, #8]
 801993c:	69b9      	ldr	r1, [r7, #24]
 801993e:	68f8      	ldr	r0, [r7, #12]
 8019940:	f000 f822 	bl	8019988 <etharp_query>
 8019944:	4603      	mov	r3, r0
 8019946:	e00b      	b.n	8019960 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801994e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019952:	9300      	str	r3, [sp, #0]
 8019954:	69fb      	ldr	r3, [r7, #28]
 8019956:	68b9      	ldr	r1, [r7, #8]
 8019958:	68f8      	ldr	r0, [r7, #12]
 801995a:	f001 fd5d 	bl	801b418 <ethernet_output>
 801995e:	4603      	mov	r3, r0
}
 8019960:	4618      	mov	r0, r3
 8019962:	3720      	adds	r7, #32
 8019964:	46bd      	mov	sp, r7
 8019966:	bd80      	pop	{r7, pc}
 8019968:	080208a0 	.word	0x080208a0
 801996c:	080209f0 	.word	0x080209f0
 8019970:	08020918 	.word	0x08020918
 8019974:	08020a40 	.word	0x08020a40
 8019978:	080209e0 	.word	0x080209e0
 801997c:	080211f0 	.word	0x080211f0
 8019980:	2000b0e4 	.word	0x2000b0e4
 8019984:	2000aff4 	.word	0x2000aff4

08019988 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019988:	b580      	push	{r7, lr}
 801998a:	b08c      	sub	sp, #48	; 0x30
 801998c:	af02      	add	r7, sp, #8
 801998e:	60f8      	str	r0, [r7, #12]
 8019990:	60b9      	str	r1, [r7, #8]
 8019992:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	332a      	adds	r3, #42	; 0x2a
 8019998:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801999a:	23ff      	movs	r3, #255	; 0xff
 801999c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80199a0:	2300      	movs	r3, #0
 80199a2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	68f9      	ldr	r1, [r7, #12]
 80199aa:	4618      	mov	r0, r3
 80199ac:	f000 fe2c 	bl	801a608 <ip4_addr_isbroadcast_u32>
 80199b0:	4603      	mov	r3, r0
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d10c      	bne.n	80199d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80199be:	2be0      	cmp	r3, #224	; 0xe0
 80199c0:	d006      	beq.n	80199d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80199c2:	68bb      	ldr	r3, [r7, #8]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d003      	beq.n	80199d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80199c8:	68bb      	ldr	r3, [r7, #8]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d102      	bne.n	80199d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80199d0:	f06f 030f 	mvn.w	r3, #15
 80199d4:	e101      	b.n	8019bda <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80199d6:	68fa      	ldr	r2, [r7, #12]
 80199d8:	2101      	movs	r1, #1
 80199da:	68b8      	ldr	r0, [r7, #8]
 80199dc:	f7ff fb5c 	bl	8019098 <etharp_find_entry>
 80199e0:	4603      	mov	r3, r0
 80199e2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80199e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	da02      	bge.n	80199f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80199ec:	8a7b      	ldrh	r3, [r7, #18]
 80199ee:	b25b      	sxtb	r3, r3
 80199f0:	e0f3      	b.n	8019bda <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80199f2:	8a7b      	ldrh	r3, [r7, #18]
 80199f4:	2b7e      	cmp	r3, #126	; 0x7e
 80199f6:	d906      	bls.n	8019a06 <etharp_query+0x7e>
 80199f8:	4b7a      	ldr	r3, [pc, #488]	; (8019be4 <etharp_query+0x25c>)
 80199fa:	f240 32c1 	movw	r2, #961	; 0x3c1
 80199fe:	497a      	ldr	r1, [pc, #488]	; (8019be8 <etharp_query+0x260>)
 8019a00:	487a      	ldr	r0, [pc, #488]	; (8019bec <etharp_query+0x264>)
 8019a02:	f003 f9ad 	bl	801cd60 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019a06:	8a7b      	ldrh	r3, [r7, #18]
 8019a08:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019a0a:	7c7a      	ldrb	r2, [r7, #17]
 8019a0c:	4978      	ldr	r1, [pc, #480]	; (8019bf0 <etharp_query+0x268>)
 8019a0e:	4613      	mov	r3, r2
 8019a10:	005b      	lsls	r3, r3, #1
 8019a12:	4413      	add	r3, r2
 8019a14:	00db      	lsls	r3, r3, #3
 8019a16:	440b      	add	r3, r1
 8019a18:	3314      	adds	r3, #20
 8019a1a:	781b      	ldrb	r3, [r3, #0]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d115      	bne.n	8019a4c <etharp_query+0xc4>
    is_new_entry = 1;
 8019a20:	2301      	movs	r3, #1
 8019a22:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019a24:	7c7a      	ldrb	r2, [r7, #17]
 8019a26:	4972      	ldr	r1, [pc, #456]	; (8019bf0 <etharp_query+0x268>)
 8019a28:	4613      	mov	r3, r2
 8019a2a:	005b      	lsls	r3, r3, #1
 8019a2c:	4413      	add	r3, r2
 8019a2e:	00db      	lsls	r3, r3, #3
 8019a30:	440b      	add	r3, r1
 8019a32:	3314      	adds	r3, #20
 8019a34:	2201      	movs	r2, #1
 8019a36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019a38:	7c7a      	ldrb	r2, [r7, #17]
 8019a3a:	496d      	ldr	r1, [pc, #436]	; (8019bf0 <etharp_query+0x268>)
 8019a3c:	4613      	mov	r3, r2
 8019a3e:	005b      	lsls	r3, r3, #1
 8019a40:	4413      	add	r3, r2
 8019a42:	00db      	lsls	r3, r3, #3
 8019a44:	440b      	add	r3, r1
 8019a46:	3308      	adds	r3, #8
 8019a48:	68fa      	ldr	r2, [r7, #12]
 8019a4a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019a4c:	7c7a      	ldrb	r2, [r7, #17]
 8019a4e:	4968      	ldr	r1, [pc, #416]	; (8019bf0 <etharp_query+0x268>)
 8019a50:	4613      	mov	r3, r2
 8019a52:	005b      	lsls	r3, r3, #1
 8019a54:	4413      	add	r3, r2
 8019a56:	00db      	lsls	r3, r3, #3
 8019a58:	440b      	add	r3, r1
 8019a5a:	3314      	adds	r3, #20
 8019a5c:	781b      	ldrb	r3, [r3, #0]
 8019a5e:	2b01      	cmp	r3, #1
 8019a60:	d011      	beq.n	8019a86 <etharp_query+0xfe>
 8019a62:	7c7a      	ldrb	r2, [r7, #17]
 8019a64:	4962      	ldr	r1, [pc, #392]	; (8019bf0 <etharp_query+0x268>)
 8019a66:	4613      	mov	r3, r2
 8019a68:	005b      	lsls	r3, r3, #1
 8019a6a:	4413      	add	r3, r2
 8019a6c:	00db      	lsls	r3, r3, #3
 8019a6e:	440b      	add	r3, r1
 8019a70:	3314      	adds	r3, #20
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	2b01      	cmp	r3, #1
 8019a76:	d806      	bhi.n	8019a86 <etharp_query+0xfe>
 8019a78:	4b5a      	ldr	r3, [pc, #360]	; (8019be4 <etharp_query+0x25c>)
 8019a7a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8019a7e:	495d      	ldr	r1, [pc, #372]	; (8019bf4 <etharp_query+0x26c>)
 8019a80:	485a      	ldr	r0, [pc, #360]	; (8019bec <etharp_query+0x264>)
 8019a82:	f003 f96d 	bl	801cd60 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019a86:	6a3b      	ldr	r3, [r7, #32]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d102      	bne.n	8019a92 <etharp_query+0x10a>
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d10c      	bne.n	8019aac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019a92:	68b9      	ldr	r1, [r7, #8]
 8019a94:	68f8      	ldr	r0, [r7, #12]
 8019a96:	f000 f963 	bl	8019d60 <etharp_request>
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d102      	bne.n	8019aac <etharp_query+0x124>
      return result;
 8019aa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019aaa:	e096      	b.n	8019bda <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d106      	bne.n	8019ac0 <etharp_query+0x138>
 8019ab2:	4b4c      	ldr	r3, [pc, #304]	; (8019be4 <etharp_query+0x25c>)
 8019ab4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019ab8:	494f      	ldr	r1, [pc, #316]	; (8019bf8 <etharp_query+0x270>)
 8019aba:	484c      	ldr	r0, [pc, #304]	; (8019bec <etharp_query+0x264>)
 8019abc:	f003 f950 	bl	801cd60 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019ac0:	7c7a      	ldrb	r2, [r7, #17]
 8019ac2:	494b      	ldr	r1, [pc, #300]	; (8019bf0 <etharp_query+0x268>)
 8019ac4:	4613      	mov	r3, r2
 8019ac6:	005b      	lsls	r3, r3, #1
 8019ac8:	4413      	add	r3, r2
 8019aca:	00db      	lsls	r3, r3, #3
 8019acc:	440b      	add	r3, r1
 8019ace:	3314      	adds	r3, #20
 8019ad0:	781b      	ldrb	r3, [r3, #0]
 8019ad2:	2b01      	cmp	r3, #1
 8019ad4:	d917      	bls.n	8019b06 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019ad6:	4a49      	ldr	r2, [pc, #292]	; (8019bfc <etharp_query+0x274>)
 8019ad8:	7c7b      	ldrb	r3, [r7, #17]
 8019ada:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019adc:	7c7a      	ldrb	r2, [r7, #17]
 8019ade:	4613      	mov	r3, r2
 8019ae0:	005b      	lsls	r3, r3, #1
 8019ae2:	4413      	add	r3, r2
 8019ae4:	00db      	lsls	r3, r3, #3
 8019ae6:	3308      	adds	r3, #8
 8019ae8:	4a41      	ldr	r2, [pc, #260]	; (8019bf0 <etharp_query+0x268>)
 8019aea:	4413      	add	r3, r2
 8019aec:	3304      	adds	r3, #4
 8019aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019af2:	9200      	str	r2, [sp, #0]
 8019af4:	697a      	ldr	r2, [r7, #20]
 8019af6:	6879      	ldr	r1, [r7, #4]
 8019af8:	68f8      	ldr	r0, [r7, #12]
 8019afa:	f001 fc8d 	bl	801b418 <ethernet_output>
 8019afe:	4603      	mov	r3, r0
 8019b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019b04:	e067      	b.n	8019bd6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019b06:	7c7a      	ldrb	r2, [r7, #17]
 8019b08:	4939      	ldr	r1, [pc, #228]	; (8019bf0 <etharp_query+0x268>)
 8019b0a:	4613      	mov	r3, r2
 8019b0c:	005b      	lsls	r3, r3, #1
 8019b0e:	4413      	add	r3, r2
 8019b10:	00db      	lsls	r3, r3, #3
 8019b12:	440b      	add	r3, r1
 8019b14:	3314      	adds	r3, #20
 8019b16:	781b      	ldrb	r3, [r3, #0]
 8019b18:	2b01      	cmp	r3, #1
 8019b1a:	d15c      	bne.n	8019bd6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019b24:	e01c      	b.n	8019b60 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019b26:	69fb      	ldr	r3, [r7, #28]
 8019b28:	895a      	ldrh	r2, [r3, #10]
 8019b2a:	69fb      	ldr	r3, [r7, #28]
 8019b2c:	891b      	ldrh	r3, [r3, #8]
 8019b2e:	429a      	cmp	r2, r3
 8019b30:	d10a      	bne.n	8019b48 <etharp_query+0x1c0>
 8019b32:	69fb      	ldr	r3, [r7, #28]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d006      	beq.n	8019b48 <etharp_query+0x1c0>
 8019b3a:	4b2a      	ldr	r3, [pc, #168]	; (8019be4 <etharp_query+0x25c>)
 8019b3c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019b40:	492f      	ldr	r1, [pc, #188]	; (8019c00 <etharp_query+0x278>)
 8019b42:	482a      	ldr	r0, [pc, #168]	; (8019bec <etharp_query+0x264>)
 8019b44:	f003 f90c 	bl	801cd60 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019b48:	69fb      	ldr	r3, [r7, #28]
 8019b4a:	7b1b      	ldrb	r3, [r3, #12]
 8019b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d002      	beq.n	8019b5a <etharp_query+0x1d2>
        copy_needed = 1;
 8019b54:	2301      	movs	r3, #1
 8019b56:	61bb      	str	r3, [r7, #24]
        break;
 8019b58:	e005      	b.n	8019b66 <etharp_query+0x1de>
      }
      p = p->next;
 8019b5a:	69fb      	ldr	r3, [r7, #28]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019b60:	69fb      	ldr	r3, [r7, #28]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d1df      	bne.n	8019b26 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019b66:	69bb      	ldr	r3, [r7, #24]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d007      	beq.n	8019b7c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019b6c:	687a      	ldr	r2, [r7, #4]
 8019b6e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019b72:	200e      	movs	r0, #14
 8019b74:	f7f7 fb64 	bl	8011240 <pbuf_clone>
 8019b78:	61f8      	str	r0, [r7, #28]
 8019b7a:	e004      	b.n	8019b86 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019b80:	69f8      	ldr	r0, [r7, #28]
 8019b82:	f7f7 f98b 	bl	8010e9c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019b86:	69fb      	ldr	r3, [r7, #28]
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d021      	beq.n	8019bd0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019b8c:	7c7a      	ldrb	r2, [r7, #17]
 8019b8e:	4918      	ldr	r1, [pc, #96]	; (8019bf0 <etharp_query+0x268>)
 8019b90:	4613      	mov	r3, r2
 8019b92:	005b      	lsls	r3, r3, #1
 8019b94:	4413      	add	r3, r2
 8019b96:	00db      	lsls	r3, r3, #3
 8019b98:	440b      	add	r3, r1
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d00a      	beq.n	8019bb6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019ba0:	7c7a      	ldrb	r2, [r7, #17]
 8019ba2:	4913      	ldr	r1, [pc, #76]	; (8019bf0 <etharp_query+0x268>)
 8019ba4:	4613      	mov	r3, r2
 8019ba6:	005b      	lsls	r3, r3, #1
 8019ba8:	4413      	add	r3, r2
 8019baa:	00db      	lsls	r3, r3, #3
 8019bac:	440b      	add	r3, r1
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	f7f7 f8cd 	bl	8010d50 <pbuf_free>
      }
      arp_table[i].q = p;
 8019bb6:	7c7a      	ldrb	r2, [r7, #17]
 8019bb8:	490d      	ldr	r1, [pc, #52]	; (8019bf0 <etharp_query+0x268>)
 8019bba:	4613      	mov	r3, r2
 8019bbc:	005b      	lsls	r3, r3, #1
 8019bbe:	4413      	add	r3, r2
 8019bc0:	00db      	lsls	r3, r3, #3
 8019bc2:	440b      	add	r3, r1
 8019bc4:	69fa      	ldr	r2, [r7, #28]
 8019bc6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019bc8:	2300      	movs	r3, #0
 8019bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019bce:	e002      	b.n	8019bd6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019bd0:	23ff      	movs	r3, #255	; 0xff
 8019bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019bd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019bda:	4618      	mov	r0, r3
 8019bdc:	3728      	adds	r7, #40	; 0x28
 8019bde:	46bd      	mov	sp, r7
 8019be0:	bd80      	pop	{r7, pc}
 8019be2:	bf00      	nop
 8019be4:	080208a0 	.word	0x080208a0
 8019be8:	08020a4c 	.word	0x08020a4c
 8019bec:	08020918 	.word	0x08020918
 8019bf0:	2000aff4 	.word	0x2000aff4
 8019bf4:	08020a5c 	.word	0x08020a5c
 8019bf8:	08020a40 	.word	0x08020a40
 8019bfc:	2000b0e4 	.word	0x2000b0e4
 8019c00:	08020a84 	.word	0x08020a84

08019c04 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019c04:	b580      	push	{r7, lr}
 8019c06:	b08a      	sub	sp, #40	; 0x28
 8019c08:	af02      	add	r7, sp, #8
 8019c0a:	60f8      	str	r0, [r7, #12]
 8019c0c:	60b9      	str	r1, [r7, #8]
 8019c0e:	607a      	str	r2, [r7, #4]
 8019c10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019c12:	2300      	movs	r3, #0
 8019c14:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d106      	bne.n	8019c2a <etharp_raw+0x26>
 8019c1c:	4b3a      	ldr	r3, [pc, #232]	; (8019d08 <etharp_raw+0x104>)
 8019c1e:	f240 4257 	movw	r2, #1111	; 0x457
 8019c22:	493a      	ldr	r1, [pc, #232]	; (8019d0c <etharp_raw+0x108>)
 8019c24:	483a      	ldr	r0, [pc, #232]	; (8019d10 <etharp_raw+0x10c>)
 8019c26:	f003 f89b 	bl	801cd60 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019c2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019c2e:	211c      	movs	r1, #28
 8019c30:	200e      	movs	r0, #14
 8019c32:	f7f6 fda9 	bl	8010788 <pbuf_alloc>
 8019c36:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019c38:	69bb      	ldr	r3, [r7, #24]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d102      	bne.n	8019c44 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8019c42:	e05d      	b.n	8019d00 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019c44:	69bb      	ldr	r3, [r7, #24]
 8019c46:	895b      	ldrh	r3, [r3, #10]
 8019c48:	2b1b      	cmp	r3, #27
 8019c4a:	d806      	bhi.n	8019c5a <etharp_raw+0x56>
 8019c4c:	4b2e      	ldr	r3, [pc, #184]	; (8019d08 <etharp_raw+0x104>)
 8019c4e:	f240 4262 	movw	r2, #1122	; 0x462
 8019c52:	4930      	ldr	r1, [pc, #192]	; (8019d14 <etharp_raw+0x110>)
 8019c54:	482e      	ldr	r0, [pc, #184]	; (8019d10 <etharp_raw+0x10c>)
 8019c56:	f003 f883 	bl	801cd60 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019c5a:	69bb      	ldr	r3, [r7, #24]
 8019c5c:	685b      	ldr	r3, [r3, #4]
 8019c5e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019c60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019c62:	4618      	mov	r0, r3
 8019c64:	f7f5 fcbc 	bl	800f5e0 <lwip_htons>
 8019c68:	4603      	mov	r3, r0
 8019c6a:	461a      	mov	r2, r3
 8019c6c:	697b      	ldr	r3, [r7, #20]
 8019c6e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019c76:	2b06      	cmp	r3, #6
 8019c78:	d006      	beq.n	8019c88 <etharp_raw+0x84>
 8019c7a:	4b23      	ldr	r3, [pc, #140]	; (8019d08 <etharp_raw+0x104>)
 8019c7c:	f240 4269 	movw	r2, #1129	; 0x469
 8019c80:	4925      	ldr	r1, [pc, #148]	; (8019d18 <etharp_raw+0x114>)
 8019c82:	4823      	ldr	r0, [pc, #140]	; (8019d10 <etharp_raw+0x10c>)
 8019c84:	f003 f86c 	bl	801cd60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019c88:	697b      	ldr	r3, [r7, #20]
 8019c8a:	3308      	adds	r3, #8
 8019c8c:	2206      	movs	r2, #6
 8019c8e:	6839      	ldr	r1, [r7, #0]
 8019c90:	4618      	mov	r0, r3
 8019c92:	f002 fff4 	bl	801cc7e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019c96:	697b      	ldr	r3, [r7, #20]
 8019c98:	3312      	adds	r3, #18
 8019c9a:	2206      	movs	r2, #6
 8019c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f002 ffed 	bl	801cc7e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019ca4:	697b      	ldr	r3, [r7, #20]
 8019ca6:	330e      	adds	r3, #14
 8019ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019caa:	6812      	ldr	r2, [r2, #0]
 8019cac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019cae:	697b      	ldr	r3, [r7, #20]
 8019cb0:	3318      	adds	r3, #24
 8019cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019cb4:	6812      	ldr	r2, [r2, #0]
 8019cb6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019cb8:	697b      	ldr	r3, [r7, #20]
 8019cba:	2200      	movs	r2, #0
 8019cbc:	701a      	strb	r2, [r3, #0]
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	f042 0201 	orr.w	r2, r2, #1
 8019cc4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019cc6:	697b      	ldr	r3, [r7, #20]
 8019cc8:	2200      	movs	r2, #0
 8019cca:	f042 0208 	orr.w	r2, r2, #8
 8019cce:	709a      	strb	r2, [r3, #2]
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019cd4:	697b      	ldr	r3, [r7, #20]
 8019cd6:	2206      	movs	r2, #6
 8019cd8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019cda:	697b      	ldr	r3, [r7, #20]
 8019cdc:	2204      	movs	r2, #4
 8019cde:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019ce0:	f640 0306 	movw	r3, #2054	; 0x806
 8019ce4:	9300      	str	r3, [sp, #0]
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	68ba      	ldr	r2, [r7, #8]
 8019cea:	69b9      	ldr	r1, [r7, #24]
 8019cec:	68f8      	ldr	r0, [r7, #12]
 8019cee:	f001 fb93 	bl	801b418 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019cf2:	69b8      	ldr	r0, [r7, #24]
 8019cf4:	f7f7 f82c 	bl	8010d50 <pbuf_free>
  p = NULL;
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019cfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019d00:	4618      	mov	r0, r3
 8019d02:	3720      	adds	r7, #32
 8019d04:	46bd      	mov	sp, r7
 8019d06:	bd80      	pop	{r7, pc}
 8019d08:	080208a0 	.word	0x080208a0
 8019d0c:	080209f0 	.word	0x080209f0
 8019d10:	08020918 	.word	0x08020918
 8019d14:	08020aa0 	.word	0x08020aa0
 8019d18:	08020ad4 	.word	0x08020ad4

08019d1c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b088      	sub	sp, #32
 8019d20:	af04      	add	r7, sp, #16
 8019d22:	60f8      	str	r0, [r7, #12]
 8019d24:	60b9      	str	r1, [r7, #8]
 8019d26:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019d38:	2201      	movs	r2, #1
 8019d3a:	9203      	str	r2, [sp, #12]
 8019d3c:	68ba      	ldr	r2, [r7, #8]
 8019d3e:	9202      	str	r2, [sp, #8]
 8019d40:	4a06      	ldr	r2, [pc, #24]	; (8019d5c <etharp_request_dst+0x40>)
 8019d42:	9201      	str	r2, [sp, #4]
 8019d44:	9300      	str	r3, [sp, #0]
 8019d46:	4603      	mov	r3, r0
 8019d48:	687a      	ldr	r2, [r7, #4]
 8019d4a:	68f8      	ldr	r0, [r7, #12]
 8019d4c:	f7ff ff5a 	bl	8019c04 <etharp_raw>
 8019d50:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019d52:	4618      	mov	r0, r3
 8019d54:	3710      	adds	r7, #16
 8019d56:	46bd      	mov	sp, r7
 8019d58:	bd80      	pop	{r7, pc}
 8019d5a:	bf00      	nop
 8019d5c:	080211f8 	.word	0x080211f8

08019d60 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b082      	sub	sp, #8
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
 8019d68:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019d6a:	4a05      	ldr	r2, [pc, #20]	; (8019d80 <etharp_request+0x20>)
 8019d6c:	6839      	ldr	r1, [r7, #0]
 8019d6e:	6878      	ldr	r0, [r7, #4]
 8019d70:	f7ff ffd4 	bl	8019d1c <etharp_request_dst>
 8019d74:	4603      	mov	r3, r0
}
 8019d76:	4618      	mov	r0, r3
 8019d78:	3708      	adds	r7, #8
 8019d7a:	46bd      	mov	sp, r7
 8019d7c:	bd80      	pop	{r7, pc}
 8019d7e:	bf00      	nop
 8019d80:	080211f0 	.word	0x080211f0

08019d84 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019d84:	b580      	push	{r7, lr}
 8019d86:	b08e      	sub	sp, #56	; 0x38
 8019d88:	af04      	add	r7, sp, #16
 8019d8a:	6078      	str	r0, [r7, #4]
 8019d8c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019d8e:	4b79      	ldr	r3, [pc, #484]	; (8019f74 <icmp_input+0x1f0>)
 8019d90:	689b      	ldr	r3, [r3, #8]
 8019d92:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d96:	781b      	ldrb	r3, [r3, #0]
 8019d98:	f003 030f 	and.w	r3, r3, #15
 8019d9c:	b2db      	uxtb	r3, r3
 8019d9e:	009b      	lsls	r3, r3, #2
 8019da0:	b2db      	uxtb	r3, r3
 8019da2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019da4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019da6:	2b13      	cmp	r3, #19
 8019da8:	f240 80cd 	bls.w	8019f46 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	895b      	ldrh	r3, [r3, #10]
 8019db0:	2b03      	cmp	r3, #3
 8019db2:	f240 80ca 	bls.w	8019f4a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	685b      	ldr	r3, [r3, #4]
 8019dba:	781b      	ldrb	r3, [r3, #0]
 8019dbc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019dc0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	f000 80b7 	beq.w	8019f38 <icmp_input+0x1b4>
 8019dca:	2b08      	cmp	r3, #8
 8019dcc:	f040 80b7 	bne.w	8019f3e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019dd0:	4b69      	ldr	r3, [pc, #420]	; (8019f78 <icmp_input+0x1f4>)
 8019dd2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019dd4:	4b67      	ldr	r3, [pc, #412]	; (8019f74 <icmp_input+0x1f0>)
 8019dd6:	695b      	ldr	r3, [r3, #20]
 8019dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019ddc:	2be0      	cmp	r3, #224	; 0xe0
 8019dde:	f000 80bb 	beq.w	8019f58 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019de2:	4b64      	ldr	r3, [pc, #400]	; (8019f74 <icmp_input+0x1f0>)
 8019de4:	695b      	ldr	r3, [r3, #20]
 8019de6:	4a63      	ldr	r2, [pc, #396]	; (8019f74 <icmp_input+0x1f0>)
 8019de8:	6812      	ldr	r2, [r2, #0]
 8019dea:	4611      	mov	r1, r2
 8019dec:	4618      	mov	r0, r3
 8019dee:	f000 fc0b 	bl	801a608 <ip4_addr_isbroadcast_u32>
 8019df2:	4603      	mov	r3, r0
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	f040 80b1 	bne.w	8019f5c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	891b      	ldrh	r3, [r3, #8]
 8019dfe:	2b07      	cmp	r3, #7
 8019e00:	f240 80a5 	bls.w	8019f4e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e06:	330e      	adds	r3, #14
 8019e08:	4619      	mov	r1, r3
 8019e0a:	6878      	ldr	r0, [r7, #4]
 8019e0c:	f7f6 ff0a 	bl	8010c24 <pbuf_add_header>
 8019e10:	4603      	mov	r3, r0
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d04b      	beq.n	8019eae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	891a      	ldrh	r2, [r3, #8]
 8019e1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e1c:	4413      	add	r3, r2
 8019e1e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	891b      	ldrh	r3, [r3, #8]
 8019e24:	8b7a      	ldrh	r2, [r7, #26]
 8019e26:	429a      	cmp	r2, r3
 8019e28:	f0c0 809a 	bcc.w	8019f60 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019e2c:	8b7b      	ldrh	r3, [r7, #26]
 8019e2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019e32:	4619      	mov	r1, r3
 8019e34:	200e      	movs	r0, #14
 8019e36:	f7f6 fca7 	bl	8010788 <pbuf_alloc>
 8019e3a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019e3c:	697b      	ldr	r3, [r7, #20]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	f000 8090 	beq.w	8019f64 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019e44:	697b      	ldr	r3, [r7, #20]
 8019e46:	895b      	ldrh	r3, [r3, #10]
 8019e48:	461a      	mov	r2, r3
 8019e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e4c:	3308      	adds	r3, #8
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	d203      	bcs.n	8019e5a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019e52:	6978      	ldr	r0, [r7, #20]
 8019e54:	f7f6 ff7c 	bl	8010d50 <pbuf_free>
          goto icmperr;
 8019e58:	e085      	b.n	8019f66 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019e5a:	697b      	ldr	r3, [r7, #20]
 8019e5c:	685b      	ldr	r3, [r3, #4]
 8019e5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019e62:	4618      	mov	r0, r3
 8019e64:	f002 ff0b 	bl	801cc7e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e6a:	4619      	mov	r1, r3
 8019e6c:	6978      	ldr	r0, [r7, #20]
 8019e6e:	f7f6 fee9 	bl	8010c44 <pbuf_remove_header>
 8019e72:	4603      	mov	r3, r0
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d009      	beq.n	8019e8c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019e78:	4b40      	ldr	r3, [pc, #256]	; (8019f7c <icmp_input+0x1f8>)
 8019e7a:	22b6      	movs	r2, #182	; 0xb6
 8019e7c:	4940      	ldr	r1, [pc, #256]	; (8019f80 <icmp_input+0x1fc>)
 8019e7e:	4841      	ldr	r0, [pc, #260]	; (8019f84 <icmp_input+0x200>)
 8019e80:	f002 ff6e 	bl	801cd60 <iprintf>
          pbuf_free(r);
 8019e84:	6978      	ldr	r0, [r7, #20]
 8019e86:	f7f6 ff63 	bl	8010d50 <pbuf_free>
          goto icmperr;
 8019e8a:	e06c      	b.n	8019f66 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019e8c:	6879      	ldr	r1, [r7, #4]
 8019e8e:	6978      	ldr	r0, [r7, #20]
 8019e90:	f7f7 f892 	bl	8010fb8 <pbuf_copy>
 8019e94:	4603      	mov	r3, r0
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d003      	beq.n	8019ea2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019e9a:	6978      	ldr	r0, [r7, #20]
 8019e9c:	f7f6 ff58 	bl	8010d50 <pbuf_free>
          goto icmperr;
 8019ea0:	e061      	b.n	8019f66 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8019ea2:	6878      	ldr	r0, [r7, #4]
 8019ea4:	f7f6 ff54 	bl	8010d50 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019ea8:	697b      	ldr	r3, [r7, #20]
 8019eaa:	607b      	str	r3, [r7, #4]
 8019eac:	e00f      	b.n	8019ece <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019eae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019eb0:	330e      	adds	r3, #14
 8019eb2:	4619      	mov	r1, r3
 8019eb4:	6878      	ldr	r0, [r7, #4]
 8019eb6:	f7f6 fec5 	bl	8010c44 <pbuf_remove_header>
 8019eba:	4603      	mov	r3, r0
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d006      	beq.n	8019ece <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019ec0:	4b2e      	ldr	r3, [pc, #184]	; (8019f7c <icmp_input+0x1f8>)
 8019ec2:	22c7      	movs	r2, #199	; 0xc7
 8019ec4:	4930      	ldr	r1, [pc, #192]	; (8019f88 <icmp_input+0x204>)
 8019ec6:	482f      	ldr	r0, [pc, #188]	; (8019f84 <icmp_input+0x200>)
 8019ec8:	f002 ff4a 	bl	801cd60 <iprintf>
          goto icmperr;
 8019ecc:	e04b      	b.n	8019f66 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	685b      	ldr	r3, [r3, #4]
 8019ed2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019ed4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ed6:	4619      	mov	r1, r3
 8019ed8:	6878      	ldr	r0, [r7, #4]
 8019eda:	f7f6 fea3 	bl	8010c24 <pbuf_add_header>
 8019ede:	4603      	mov	r3, r0
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d12b      	bne.n	8019f3c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	685b      	ldr	r3, [r3, #4]
 8019ee8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019eea:	69fb      	ldr	r3, [r7, #28]
 8019eec:	681a      	ldr	r2, [r3, #0]
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019ef2:	4b20      	ldr	r3, [pc, #128]	; (8019f74 <icmp_input+0x1f0>)
 8019ef4:	691a      	ldr	r2, [r3, #16]
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019efa:	693b      	ldr	r3, [r7, #16]
 8019efc:	2200      	movs	r2, #0
 8019efe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019f00:	693b      	ldr	r3, [r7, #16]
 8019f02:	2200      	movs	r2, #0
 8019f04:	709a      	strb	r2, [r3, #2]
 8019f06:	2200      	movs	r2, #0
 8019f08:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	22ff      	movs	r2, #255	; 0xff
 8019f0e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	2200      	movs	r2, #0
 8019f14:	729a      	strb	r2, [r3, #10]
 8019f16:	2200      	movs	r2, #0
 8019f18:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019f1a:	683b      	ldr	r3, [r7, #0]
 8019f1c:	9302      	str	r3, [sp, #8]
 8019f1e:	2301      	movs	r3, #1
 8019f20:	9301      	str	r3, [sp, #4]
 8019f22:	2300      	movs	r3, #0
 8019f24:	9300      	str	r3, [sp, #0]
 8019f26:	23ff      	movs	r3, #255	; 0xff
 8019f28:	2200      	movs	r2, #0
 8019f2a:	69f9      	ldr	r1, [r7, #28]
 8019f2c:	6878      	ldr	r0, [r7, #4]
 8019f2e:	f000 fa93 	bl	801a458 <ip4_output_if>
 8019f32:	4603      	mov	r3, r0
 8019f34:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019f36:	e001      	b.n	8019f3c <icmp_input+0x1b8>
      break;
 8019f38:	bf00      	nop
 8019f3a:	e000      	b.n	8019f3e <icmp_input+0x1ba>
      break;
 8019f3c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019f3e:	6878      	ldr	r0, [r7, #4]
 8019f40:	f7f6 ff06 	bl	8010d50 <pbuf_free>
  return;
 8019f44:	e013      	b.n	8019f6e <icmp_input+0x1ea>
    goto lenerr;
 8019f46:	bf00      	nop
 8019f48:	e002      	b.n	8019f50 <icmp_input+0x1cc>
    goto lenerr;
 8019f4a:	bf00      	nop
 8019f4c:	e000      	b.n	8019f50 <icmp_input+0x1cc>
        goto lenerr;
 8019f4e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019f50:	6878      	ldr	r0, [r7, #4]
 8019f52:	f7f6 fefd 	bl	8010d50 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019f56:	e00a      	b.n	8019f6e <icmp_input+0x1ea>
        goto icmperr;
 8019f58:	bf00      	nop
 8019f5a:	e004      	b.n	8019f66 <icmp_input+0x1e2>
        goto icmperr;
 8019f5c:	bf00      	nop
 8019f5e:	e002      	b.n	8019f66 <icmp_input+0x1e2>
          goto icmperr;
 8019f60:	bf00      	nop
 8019f62:	e000      	b.n	8019f66 <icmp_input+0x1e2>
          goto icmperr;
 8019f64:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	f7f6 fef2 	bl	8010d50 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019f6c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019f6e:	3728      	adds	r7, #40	; 0x28
 8019f70:	46bd      	mov	sp, r7
 8019f72:	bd80      	pop	{r7, pc}
 8019f74:	200102c0 	.word	0x200102c0
 8019f78:	200102d4 	.word	0x200102d4
 8019f7c:	08020b18 	.word	0x08020b18
 8019f80:	08020b50 	.word	0x08020b50
 8019f84:	08020b88 	.word	0x08020b88
 8019f88:	08020bb0 	.word	0x08020bb0

08019f8c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019f8c:	b580      	push	{r7, lr}
 8019f8e:	b082      	sub	sp, #8
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	460b      	mov	r3, r1
 8019f96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019f98:	78fb      	ldrb	r3, [r7, #3]
 8019f9a:	461a      	mov	r2, r3
 8019f9c:	2103      	movs	r1, #3
 8019f9e:	6878      	ldr	r0, [r7, #4]
 8019fa0:	f000 f814 	bl	8019fcc <icmp_send_response>
}
 8019fa4:	bf00      	nop
 8019fa6:	3708      	adds	r7, #8
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	bd80      	pop	{r7, pc}

08019fac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b082      	sub	sp, #8
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	6078      	str	r0, [r7, #4]
 8019fb4:	460b      	mov	r3, r1
 8019fb6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019fb8:	78fb      	ldrb	r3, [r7, #3]
 8019fba:	461a      	mov	r2, r3
 8019fbc:	210b      	movs	r1, #11
 8019fbe:	6878      	ldr	r0, [r7, #4]
 8019fc0:	f000 f804 	bl	8019fcc <icmp_send_response>
}
 8019fc4:	bf00      	nop
 8019fc6:	3708      	adds	r7, #8
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	bd80      	pop	{r7, pc}

08019fcc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b08c      	sub	sp, #48	; 0x30
 8019fd0:	af04      	add	r7, sp, #16
 8019fd2:	6078      	str	r0, [r7, #4]
 8019fd4:	460b      	mov	r3, r1
 8019fd6:	70fb      	strb	r3, [r7, #3]
 8019fd8:	4613      	mov	r3, r2
 8019fda:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019fdc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019fe0:	2124      	movs	r1, #36	; 0x24
 8019fe2:	2022      	movs	r0, #34	; 0x22
 8019fe4:	f7f6 fbd0 	bl	8010788 <pbuf_alloc>
 8019fe8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019fea:	69fb      	ldr	r3, [r7, #28]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d04c      	beq.n	801a08a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019ff0:	69fb      	ldr	r3, [r7, #28]
 8019ff2:	895b      	ldrh	r3, [r3, #10]
 8019ff4:	2b23      	cmp	r3, #35	; 0x23
 8019ff6:	d806      	bhi.n	801a006 <icmp_send_response+0x3a>
 8019ff8:	4b26      	ldr	r3, [pc, #152]	; (801a094 <icmp_send_response+0xc8>)
 8019ffa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019ffe:	4926      	ldr	r1, [pc, #152]	; (801a098 <icmp_send_response+0xcc>)
 801a000:	4826      	ldr	r0, [pc, #152]	; (801a09c <icmp_send_response+0xd0>)
 801a002:	f002 fead 	bl	801cd60 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	685b      	ldr	r3, [r3, #4]
 801a00a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a00c:	69fb      	ldr	r3, [r7, #28]
 801a00e:	685b      	ldr	r3, [r3, #4]
 801a010:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a012:	697b      	ldr	r3, [r7, #20]
 801a014:	78fa      	ldrb	r2, [r7, #3]
 801a016:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a018:	697b      	ldr	r3, [r7, #20]
 801a01a:	78ba      	ldrb	r2, [r7, #2]
 801a01c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a01e:	697b      	ldr	r3, [r7, #20]
 801a020:	2200      	movs	r2, #0
 801a022:	711a      	strb	r2, [r3, #4]
 801a024:	2200      	movs	r2, #0
 801a026:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a028:	697b      	ldr	r3, [r7, #20]
 801a02a:	2200      	movs	r2, #0
 801a02c:	719a      	strb	r2, [r3, #6]
 801a02e:	2200      	movs	r2, #0
 801a030:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a032:	69fb      	ldr	r3, [r7, #28]
 801a034:	685b      	ldr	r3, [r3, #4]
 801a036:	f103 0008 	add.w	r0, r3, #8
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	685b      	ldr	r3, [r3, #4]
 801a03e:	221c      	movs	r2, #28
 801a040:	4619      	mov	r1, r3
 801a042:	f002 fe1c 	bl	801cc7e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a046:	69bb      	ldr	r3, [r7, #24]
 801a048:	68db      	ldr	r3, [r3, #12]
 801a04a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a04c:	f107 030c 	add.w	r3, r7, #12
 801a050:	4618      	mov	r0, r3
 801a052:	f000 f825 	bl	801a0a0 <ip4_route>
 801a056:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a058:	693b      	ldr	r3, [r7, #16]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d011      	beq.n	801a082 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a05e:	697b      	ldr	r3, [r7, #20]
 801a060:	2200      	movs	r2, #0
 801a062:	709a      	strb	r2, [r3, #2]
 801a064:	2200      	movs	r2, #0
 801a066:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a068:	f107 020c 	add.w	r2, r7, #12
 801a06c:	693b      	ldr	r3, [r7, #16]
 801a06e:	9302      	str	r3, [sp, #8]
 801a070:	2301      	movs	r3, #1
 801a072:	9301      	str	r3, [sp, #4]
 801a074:	2300      	movs	r3, #0
 801a076:	9300      	str	r3, [sp, #0]
 801a078:	23ff      	movs	r3, #255	; 0xff
 801a07a:	2100      	movs	r1, #0
 801a07c:	69f8      	ldr	r0, [r7, #28]
 801a07e:	f000 f9eb 	bl	801a458 <ip4_output_if>
  }
  pbuf_free(q);
 801a082:	69f8      	ldr	r0, [r7, #28]
 801a084:	f7f6 fe64 	bl	8010d50 <pbuf_free>
 801a088:	e000      	b.n	801a08c <icmp_send_response+0xc0>
    return;
 801a08a:	bf00      	nop
}
 801a08c:	3720      	adds	r7, #32
 801a08e:	46bd      	mov	sp, r7
 801a090:	bd80      	pop	{r7, pc}
 801a092:	bf00      	nop
 801a094:	08020b18 	.word	0x08020b18
 801a098:	08020be4 	.word	0x08020be4
 801a09c:	08020b88 	.word	0x08020b88

0801a0a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a0a0:	b480      	push	{r7}
 801a0a2:	b085      	sub	sp, #20
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a0a8:	4b33      	ldr	r3, [pc, #204]	; (801a178 <ip4_route+0xd8>)
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	60fb      	str	r3, [r7, #12]
 801a0ae:	e036      	b.n	801a11e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a0b6:	f003 0301 	and.w	r3, r3, #1
 801a0ba:	b2db      	uxtb	r3, r3
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d02b      	beq.n	801a118 <ip4_route+0x78>
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a0c6:	089b      	lsrs	r3, r3, #2
 801a0c8:	f003 0301 	and.w	r3, r3, #1
 801a0cc:	b2db      	uxtb	r3, r3
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d022      	beq.n	801a118 <ip4_route+0x78>
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	3304      	adds	r3, #4
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d01d      	beq.n	801a118 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681a      	ldr	r2, [r3, #0]
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	3304      	adds	r3, #4
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	405a      	eors	r2, r3
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	3308      	adds	r3, #8
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	4013      	ands	r3, r2
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d101      	bne.n	801a0f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	e038      	b.n	801a16a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a0fe:	f003 0302 	and.w	r3, r3, #2
 801a102:	2b00      	cmp	r3, #0
 801a104:	d108      	bne.n	801a118 <ip4_route+0x78>
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	681a      	ldr	r2, [r3, #0]
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	330c      	adds	r3, #12
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	429a      	cmp	r2, r3
 801a112:	d101      	bne.n	801a118 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	e028      	b.n	801a16a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	60fb      	str	r3, [r7, #12]
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d1c5      	bne.n	801a0b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a124:	4b15      	ldr	r3, [pc, #84]	; (801a17c <ip4_route+0xdc>)
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d01a      	beq.n	801a162 <ip4_route+0xc2>
 801a12c:	4b13      	ldr	r3, [pc, #76]	; (801a17c <ip4_route+0xdc>)
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a134:	f003 0301 	and.w	r3, r3, #1
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d012      	beq.n	801a162 <ip4_route+0xc2>
 801a13c:	4b0f      	ldr	r3, [pc, #60]	; (801a17c <ip4_route+0xdc>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a144:	f003 0304 	and.w	r3, r3, #4
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d00a      	beq.n	801a162 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a14c:	4b0b      	ldr	r3, [pc, #44]	; (801a17c <ip4_route+0xdc>)
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	3304      	adds	r3, #4
 801a152:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a154:	2b00      	cmp	r3, #0
 801a156:	d004      	beq.n	801a162 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	b2db      	uxtb	r3, r3
 801a15e:	2b7f      	cmp	r3, #127	; 0x7f
 801a160:	d101      	bne.n	801a166 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a162:	2300      	movs	r3, #0
 801a164:	e001      	b.n	801a16a <ip4_route+0xca>
  }

  return netif_default;
 801a166:	4b05      	ldr	r3, [pc, #20]	; (801a17c <ip4_route+0xdc>)
 801a168:	681b      	ldr	r3, [r3, #0]
}
 801a16a:	4618      	mov	r0, r3
 801a16c:	3714      	adds	r7, #20
 801a16e:	46bd      	mov	sp, r7
 801a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a174:	4770      	bx	lr
 801a176:	bf00      	nop
 801a178:	200139e4 	.word	0x200139e4
 801a17c:	200139e8 	.word	0x200139e8

0801a180 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b082      	sub	sp, #8
 801a184:	af00      	add	r7, sp, #0
 801a186:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a18e:	f003 0301 	and.w	r3, r3, #1
 801a192:	b2db      	uxtb	r3, r3
 801a194:	2b00      	cmp	r3, #0
 801a196:	d016      	beq.n	801a1c6 <ip4_input_accept+0x46>
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	3304      	adds	r3, #4
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d011      	beq.n	801a1c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a1a2:	4b0b      	ldr	r3, [pc, #44]	; (801a1d0 <ip4_input_accept+0x50>)
 801a1a4:	695a      	ldr	r2, [r3, #20]
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	3304      	adds	r3, #4
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	d008      	beq.n	801a1c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a1b0:	4b07      	ldr	r3, [pc, #28]	; (801a1d0 <ip4_input_accept+0x50>)
 801a1b2:	695b      	ldr	r3, [r3, #20]
 801a1b4:	6879      	ldr	r1, [r7, #4]
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	f000 fa26 	bl	801a608 <ip4_addr_isbroadcast_u32>
 801a1bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d001      	beq.n	801a1c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a1c2:	2301      	movs	r3, #1
 801a1c4:	e000      	b.n	801a1c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a1c6:	2300      	movs	r3, #0
}
 801a1c8:	4618      	mov	r0, r3
 801a1ca:	3708      	adds	r7, #8
 801a1cc:	46bd      	mov	sp, r7
 801a1ce:	bd80      	pop	{r7, pc}
 801a1d0:	200102c0 	.word	0x200102c0

0801a1d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b088      	sub	sp, #32
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]
 801a1dc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801a1de:	2301      	movs	r3, #1
 801a1e0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	685b      	ldr	r3, [r3, #4]
 801a1e6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801a1e8:	69fb      	ldr	r3, [r7, #28]
 801a1ea:	781b      	ldrb	r3, [r3, #0]
 801a1ec:	091b      	lsrs	r3, r3, #4
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	2b04      	cmp	r3, #4
 801a1f2:	d004      	beq.n	801a1fe <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a1f4:	6878      	ldr	r0, [r7, #4]
 801a1f6:	f7f6 fdab 	bl	8010d50 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	e123      	b.n	801a446 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a1fe:	69fb      	ldr	r3, [r7, #28]
 801a200:	781b      	ldrb	r3, [r3, #0]
 801a202:	f003 030f 	and.w	r3, r3, #15
 801a206:	b2db      	uxtb	r3, r3
 801a208:	009b      	lsls	r3, r3, #2
 801a20a:	b2db      	uxtb	r3, r3
 801a20c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a20e:	69fb      	ldr	r3, [r7, #28]
 801a210:	885b      	ldrh	r3, [r3, #2]
 801a212:	b29b      	uxth	r3, r3
 801a214:	4618      	mov	r0, r3
 801a216:	f7f5 f9e3 	bl	800f5e0 <lwip_htons>
 801a21a:	4603      	mov	r3, r0
 801a21c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	891b      	ldrh	r3, [r3, #8]
 801a222:	8a3a      	ldrh	r2, [r7, #16]
 801a224:	429a      	cmp	r2, r3
 801a226:	d204      	bcs.n	801a232 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801a228:	8a3b      	ldrh	r3, [r7, #16]
 801a22a:	4619      	mov	r1, r3
 801a22c:	6878      	ldr	r0, [r7, #4]
 801a22e:	f7f6 fc09 	bl	8010a44 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	895b      	ldrh	r3, [r3, #10]
 801a236:	8a7a      	ldrh	r2, [r7, #18]
 801a238:	429a      	cmp	r2, r3
 801a23a:	d807      	bhi.n	801a24c <ip4_input+0x78>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	891b      	ldrh	r3, [r3, #8]
 801a240:	8a3a      	ldrh	r2, [r7, #16]
 801a242:	429a      	cmp	r2, r3
 801a244:	d802      	bhi.n	801a24c <ip4_input+0x78>
 801a246:	8a7b      	ldrh	r3, [r7, #18]
 801a248:	2b13      	cmp	r3, #19
 801a24a:	d804      	bhi.n	801a256 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a24c:	6878      	ldr	r0, [r7, #4]
 801a24e:	f7f6 fd7f 	bl	8010d50 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a252:	2300      	movs	r3, #0
 801a254:	e0f7      	b.n	801a446 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a256:	69fb      	ldr	r3, [r7, #28]
 801a258:	691b      	ldr	r3, [r3, #16]
 801a25a:	4a7d      	ldr	r2, [pc, #500]	; (801a450 <ip4_input+0x27c>)
 801a25c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a25e:	69fb      	ldr	r3, [r7, #28]
 801a260:	68db      	ldr	r3, [r3, #12]
 801a262:	4a7b      	ldr	r2, [pc, #492]	; (801a450 <ip4_input+0x27c>)
 801a264:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a266:	4b7a      	ldr	r3, [pc, #488]	; (801a450 <ip4_input+0x27c>)
 801a268:	695b      	ldr	r3, [r3, #20]
 801a26a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a26e:	2be0      	cmp	r3, #224	; 0xe0
 801a270:	d112      	bne.n	801a298 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a272:	683b      	ldr	r3, [r7, #0]
 801a274:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a278:	f003 0301 	and.w	r3, r3, #1
 801a27c:	b2db      	uxtb	r3, r3
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d007      	beq.n	801a292 <ip4_input+0xbe>
 801a282:	683b      	ldr	r3, [r7, #0]
 801a284:	3304      	adds	r3, #4
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d002      	beq.n	801a292 <ip4_input+0xbe>
      netif = inp;
 801a28c:	683b      	ldr	r3, [r7, #0]
 801a28e:	61bb      	str	r3, [r7, #24]
 801a290:	e02a      	b.n	801a2e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801a292:	2300      	movs	r3, #0
 801a294:	61bb      	str	r3, [r7, #24]
 801a296:	e027      	b.n	801a2e8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a298:	6838      	ldr	r0, [r7, #0]
 801a29a:	f7ff ff71 	bl	801a180 <ip4_input_accept>
 801a29e:	4603      	mov	r3, r0
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d002      	beq.n	801a2aa <ip4_input+0xd6>
      netif = inp;
 801a2a4:	683b      	ldr	r3, [r7, #0]
 801a2a6:	61bb      	str	r3, [r7, #24]
 801a2a8:	e01e      	b.n	801a2e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a2ae:	4b68      	ldr	r3, [pc, #416]	; (801a450 <ip4_input+0x27c>)
 801a2b0:	695b      	ldr	r3, [r3, #20]
 801a2b2:	b2db      	uxtb	r3, r3
 801a2b4:	2b7f      	cmp	r3, #127	; 0x7f
 801a2b6:	d017      	beq.n	801a2e8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a2b8:	4b66      	ldr	r3, [pc, #408]	; (801a454 <ip4_input+0x280>)
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	61bb      	str	r3, [r7, #24]
 801a2be:	e00e      	b.n	801a2de <ip4_input+0x10a>
          if (netif == inp) {
 801a2c0:	69ba      	ldr	r2, [r7, #24]
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	429a      	cmp	r2, r3
 801a2c6:	d006      	beq.n	801a2d6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a2c8:	69b8      	ldr	r0, [r7, #24]
 801a2ca:	f7ff ff59 	bl	801a180 <ip4_input_accept>
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d108      	bne.n	801a2e6 <ip4_input+0x112>
 801a2d4:	e000      	b.n	801a2d8 <ip4_input+0x104>
            continue;
 801a2d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a2d8:	69bb      	ldr	r3, [r7, #24]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	61bb      	str	r3, [r7, #24]
 801a2de:	69bb      	ldr	r3, [r7, #24]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d1ed      	bne.n	801a2c0 <ip4_input+0xec>
 801a2e4:	e000      	b.n	801a2e8 <ip4_input+0x114>
            break;
 801a2e6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801a2e8:	69bb      	ldr	r3, [r7, #24]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d111      	bne.n	801a312 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801a2ee:	69fb      	ldr	r3, [r7, #28]
 801a2f0:	7a5b      	ldrb	r3, [r3, #9]
 801a2f2:	2b11      	cmp	r3, #17
 801a2f4:	d10d      	bne.n	801a312 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801a2f6:	8a7b      	ldrh	r3, [r7, #18]
 801a2f8:	69fa      	ldr	r2, [r7, #28]
 801a2fa:	4413      	add	r3, r2
 801a2fc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	885b      	ldrh	r3, [r3, #2]
 801a302:	b29b      	uxth	r3, r3
 801a304:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801a308:	d103      	bne.n	801a312 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801a30a:	683b      	ldr	r3, [r7, #0]
 801a30c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801a30e:	2300      	movs	r3, #0
 801a310:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801a312:	697b      	ldr	r3, [r7, #20]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d017      	beq.n	801a348 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801a318:	4b4d      	ldr	r3, [pc, #308]	; (801a450 <ip4_input+0x27c>)
 801a31a:	691b      	ldr	r3, [r3, #16]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d013      	beq.n	801a348 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a320:	4b4b      	ldr	r3, [pc, #300]	; (801a450 <ip4_input+0x27c>)
 801a322:	691b      	ldr	r3, [r3, #16]
 801a324:	6839      	ldr	r1, [r7, #0]
 801a326:	4618      	mov	r0, r3
 801a328:	f000 f96e 	bl	801a608 <ip4_addr_isbroadcast_u32>
 801a32c:	4603      	mov	r3, r0
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d105      	bne.n	801a33e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a332:	4b47      	ldr	r3, [pc, #284]	; (801a450 <ip4_input+0x27c>)
 801a334:	691b      	ldr	r3, [r3, #16]
 801a336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a33a:	2be0      	cmp	r3, #224	; 0xe0
 801a33c:	d104      	bne.n	801a348 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a33e:	6878      	ldr	r0, [r7, #4]
 801a340:	f7f6 fd06 	bl	8010d50 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a344:	2300      	movs	r3, #0
 801a346:	e07e      	b.n	801a446 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a348:	69bb      	ldr	r3, [r7, #24]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d104      	bne.n	801a358 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a34e:	6878      	ldr	r0, [r7, #4]
 801a350:	f7f6 fcfe 	bl	8010d50 <pbuf_free>
    return ERR_OK;
 801a354:	2300      	movs	r3, #0
 801a356:	e076      	b.n	801a446 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a358:	69fb      	ldr	r3, [r7, #28]
 801a35a:	88db      	ldrh	r3, [r3, #6]
 801a35c:	b29b      	uxth	r3, r3
 801a35e:	461a      	mov	r2, r3
 801a360:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a364:	4013      	ands	r3, r2
 801a366:	2b00      	cmp	r3, #0
 801a368:	d00b      	beq.n	801a382 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a36a:	6878      	ldr	r0, [r7, #4]
 801a36c:	f000 fc92 	bl	801ac94 <ip4_reass>
 801a370:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d101      	bne.n	801a37c <ip4_input+0x1a8>
      return ERR_OK;
 801a378:	2300      	movs	r3, #0
 801a37a:	e064      	b.n	801a446 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	685b      	ldr	r3, [r3, #4]
 801a380:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a382:	4a33      	ldr	r2, [pc, #204]	; (801a450 <ip4_input+0x27c>)
 801a384:	69bb      	ldr	r3, [r7, #24]
 801a386:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a388:	4a31      	ldr	r2, [pc, #196]	; (801a450 <ip4_input+0x27c>)
 801a38a:	683b      	ldr	r3, [r7, #0]
 801a38c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a38e:	4a30      	ldr	r2, [pc, #192]	; (801a450 <ip4_input+0x27c>)
 801a390:	69fb      	ldr	r3, [r7, #28]
 801a392:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a394:	69fb      	ldr	r3, [r7, #28]
 801a396:	781b      	ldrb	r3, [r3, #0]
 801a398:	f003 030f 	and.w	r3, r3, #15
 801a39c:	b2db      	uxtb	r3, r3
 801a39e:	009b      	lsls	r3, r3, #2
 801a3a0:	b2db      	uxtb	r3, r3
 801a3a2:	b29a      	uxth	r2, r3
 801a3a4:	4b2a      	ldr	r3, [pc, #168]	; (801a450 <ip4_input+0x27c>)
 801a3a6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a3a8:	8a7b      	ldrh	r3, [r7, #18]
 801a3aa:	4619      	mov	r1, r3
 801a3ac:	6878      	ldr	r0, [r7, #4]
 801a3ae:	f7f6 fc49 	bl	8010c44 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a3b2:	69fb      	ldr	r3, [r7, #28]
 801a3b4:	7a5b      	ldrb	r3, [r3, #9]
 801a3b6:	2b11      	cmp	r3, #17
 801a3b8:	d006      	beq.n	801a3c8 <ip4_input+0x1f4>
 801a3ba:	2b11      	cmp	r3, #17
 801a3bc:	dc13      	bgt.n	801a3e6 <ip4_input+0x212>
 801a3be:	2b01      	cmp	r3, #1
 801a3c0:	d00c      	beq.n	801a3dc <ip4_input+0x208>
 801a3c2:	2b06      	cmp	r3, #6
 801a3c4:	d005      	beq.n	801a3d2 <ip4_input+0x1fe>
 801a3c6:	e00e      	b.n	801a3e6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a3c8:	6839      	ldr	r1, [r7, #0]
 801a3ca:	6878      	ldr	r0, [r7, #4]
 801a3cc:	f7fc faea 	bl	80169a4 <udp_input>
        break;
 801a3d0:	e026      	b.n	801a420 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a3d2:	6839      	ldr	r1, [r7, #0]
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	f7f8 faff 	bl	80129d8 <tcp_input>
        break;
 801a3da:	e021      	b.n	801a420 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a3dc:	6839      	ldr	r1, [r7, #0]
 801a3de:	6878      	ldr	r0, [r7, #4]
 801a3e0:	f7ff fcd0 	bl	8019d84 <icmp_input>
        break;
 801a3e4:	e01c      	b.n	801a420 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a3e6:	4b1a      	ldr	r3, [pc, #104]	; (801a450 <ip4_input+0x27c>)
 801a3e8:	695b      	ldr	r3, [r3, #20]
 801a3ea:	69b9      	ldr	r1, [r7, #24]
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	f000 f90b 	bl	801a608 <ip4_addr_isbroadcast_u32>
 801a3f2:	4603      	mov	r3, r0
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d10f      	bne.n	801a418 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a3f8:	4b15      	ldr	r3, [pc, #84]	; (801a450 <ip4_input+0x27c>)
 801a3fa:	695b      	ldr	r3, [r3, #20]
 801a3fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a400:	2be0      	cmp	r3, #224	; 0xe0
 801a402:	d009      	beq.n	801a418 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a404:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a408:	4619      	mov	r1, r3
 801a40a:	6878      	ldr	r0, [r7, #4]
 801a40c:	f7f6 fc8d 	bl	8010d2a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a410:	2102      	movs	r1, #2
 801a412:	6878      	ldr	r0, [r7, #4]
 801a414:	f7ff fdba 	bl	8019f8c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a418:	6878      	ldr	r0, [r7, #4]
 801a41a:	f7f6 fc99 	bl	8010d50 <pbuf_free>
        break;
 801a41e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a420:	4b0b      	ldr	r3, [pc, #44]	; (801a450 <ip4_input+0x27c>)
 801a422:	2200      	movs	r2, #0
 801a424:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a426:	4b0a      	ldr	r3, [pc, #40]	; (801a450 <ip4_input+0x27c>)
 801a428:	2200      	movs	r2, #0
 801a42a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a42c:	4b08      	ldr	r3, [pc, #32]	; (801a450 <ip4_input+0x27c>)
 801a42e:	2200      	movs	r2, #0
 801a430:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a432:	4b07      	ldr	r3, [pc, #28]	; (801a450 <ip4_input+0x27c>)
 801a434:	2200      	movs	r2, #0
 801a436:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a438:	4b05      	ldr	r3, [pc, #20]	; (801a450 <ip4_input+0x27c>)
 801a43a:	2200      	movs	r2, #0
 801a43c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a43e:	4b04      	ldr	r3, [pc, #16]	; (801a450 <ip4_input+0x27c>)
 801a440:	2200      	movs	r2, #0
 801a442:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a444:	2300      	movs	r3, #0
}
 801a446:	4618      	mov	r0, r3
 801a448:	3720      	adds	r7, #32
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}
 801a44e:	bf00      	nop
 801a450:	200102c0 	.word	0x200102c0
 801a454:	200139e4 	.word	0x200139e4

0801a458 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a458:	b580      	push	{r7, lr}
 801a45a:	b08a      	sub	sp, #40	; 0x28
 801a45c:	af04      	add	r7, sp, #16
 801a45e:	60f8      	str	r0, [r7, #12]
 801a460:	60b9      	str	r1, [r7, #8]
 801a462:	607a      	str	r2, [r7, #4]
 801a464:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a466:	68bb      	ldr	r3, [r7, #8]
 801a468:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d009      	beq.n	801a484 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a470:	68bb      	ldr	r3, [r7, #8]
 801a472:	2b00      	cmp	r3, #0
 801a474:	d003      	beq.n	801a47e <ip4_output_if+0x26>
 801a476:	68bb      	ldr	r3, [r7, #8]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d102      	bne.n	801a484 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a480:	3304      	adds	r3, #4
 801a482:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a484:	78fa      	ldrb	r2, [r7, #3]
 801a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a488:	9302      	str	r3, [sp, #8]
 801a48a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a48e:	9301      	str	r3, [sp, #4]
 801a490:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a494:	9300      	str	r3, [sp, #0]
 801a496:	4613      	mov	r3, r2
 801a498:	687a      	ldr	r2, [r7, #4]
 801a49a:	6979      	ldr	r1, [r7, #20]
 801a49c:	68f8      	ldr	r0, [r7, #12]
 801a49e:	f000 f805 	bl	801a4ac <ip4_output_if_src>
 801a4a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	3718      	adds	r7, #24
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	bd80      	pop	{r7, pc}

0801a4ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b088      	sub	sp, #32
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	60f8      	str	r0, [r7, #12]
 801a4b4:	60b9      	str	r1, [r7, #8]
 801a4b6:	607a      	str	r2, [r7, #4]
 801a4b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	7b9b      	ldrb	r3, [r3, #14]
 801a4be:	2b01      	cmp	r3, #1
 801a4c0:	d006      	beq.n	801a4d0 <ip4_output_if_src+0x24>
 801a4c2:	4b4b      	ldr	r3, [pc, #300]	; (801a5f0 <ip4_output_if_src+0x144>)
 801a4c4:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a4c8:	494a      	ldr	r1, [pc, #296]	; (801a5f4 <ip4_output_if_src+0x148>)
 801a4ca:	484b      	ldr	r0, [pc, #300]	; (801a5f8 <ip4_output_if_src+0x14c>)
 801a4cc:	f002 fc48 	bl	801cd60 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d060      	beq.n	801a598 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a4d6:	2314      	movs	r3, #20
 801a4d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a4da:	2114      	movs	r1, #20
 801a4dc:	68f8      	ldr	r0, [r7, #12]
 801a4de:	f7f6 fba1 	bl	8010c24 <pbuf_add_header>
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d002      	beq.n	801a4ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a4e8:	f06f 0301 	mvn.w	r3, #1
 801a4ec:	e07c      	b.n	801a5e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	685b      	ldr	r3, [r3, #4]
 801a4f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	895b      	ldrh	r3, [r3, #10]
 801a4f8:	2b13      	cmp	r3, #19
 801a4fa:	d806      	bhi.n	801a50a <ip4_output_if_src+0x5e>
 801a4fc:	4b3c      	ldr	r3, [pc, #240]	; (801a5f0 <ip4_output_if_src+0x144>)
 801a4fe:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a502:	493e      	ldr	r1, [pc, #248]	; (801a5fc <ip4_output_if_src+0x150>)
 801a504:	483c      	ldr	r0, [pc, #240]	; (801a5f8 <ip4_output_if_src+0x14c>)
 801a506:	f002 fc2b 	bl	801cd60 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a50a:	69fb      	ldr	r3, [r7, #28]
 801a50c:	78fa      	ldrb	r2, [r7, #3]
 801a50e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a510:	69fb      	ldr	r3, [r7, #28]
 801a512:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a516:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681a      	ldr	r2, [r3, #0]
 801a51c:	69fb      	ldr	r3, [r7, #28]
 801a51e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a520:	8b7b      	ldrh	r3, [r7, #26]
 801a522:	089b      	lsrs	r3, r3, #2
 801a524:	b29b      	uxth	r3, r3
 801a526:	b2db      	uxtb	r3, r3
 801a528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a52c:	b2da      	uxtb	r2, r3
 801a52e:	69fb      	ldr	r3, [r7, #28]
 801a530:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a532:	69fb      	ldr	r3, [r7, #28]
 801a534:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a538:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	891b      	ldrh	r3, [r3, #8]
 801a53e:	4618      	mov	r0, r3
 801a540:	f7f5 f84e 	bl	800f5e0 <lwip_htons>
 801a544:	4603      	mov	r3, r0
 801a546:	461a      	mov	r2, r3
 801a548:	69fb      	ldr	r3, [r7, #28]
 801a54a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a54c:	69fb      	ldr	r3, [r7, #28]
 801a54e:	2200      	movs	r2, #0
 801a550:	719a      	strb	r2, [r3, #6]
 801a552:	2200      	movs	r2, #0
 801a554:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a556:	4b2a      	ldr	r3, [pc, #168]	; (801a600 <ip4_output_if_src+0x154>)
 801a558:	881b      	ldrh	r3, [r3, #0]
 801a55a:	4618      	mov	r0, r3
 801a55c:	f7f5 f840 	bl	800f5e0 <lwip_htons>
 801a560:	4603      	mov	r3, r0
 801a562:	461a      	mov	r2, r3
 801a564:	69fb      	ldr	r3, [r7, #28]
 801a566:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a568:	4b25      	ldr	r3, [pc, #148]	; (801a600 <ip4_output_if_src+0x154>)
 801a56a:	881b      	ldrh	r3, [r3, #0]
 801a56c:	3301      	adds	r3, #1
 801a56e:	b29a      	uxth	r2, r3
 801a570:	4b23      	ldr	r3, [pc, #140]	; (801a600 <ip4_output_if_src+0x154>)
 801a572:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a574:	68bb      	ldr	r3, [r7, #8]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d104      	bne.n	801a584 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a57a:	4b22      	ldr	r3, [pc, #136]	; (801a604 <ip4_output_if_src+0x158>)
 801a57c:	681a      	ldr	r2, [r3, #0]
 801a57e:	69fb      	ldr	r3, [r7, #28]
 801a580:	60da      	str	r2, [r3, #12]
 801a582:	e003      	b.n	801a58c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a584:	68bb      	ldr	r3, [r7, #8]
 801a586:	681a      	ldr	r2, [r3, #0]
 801a588:	69fb      	ldr	r3, [r7, #28]
 801a58a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a58c:	69fb      	ldr	r3, [r7, #28]
 801a58e:	2200      	movs	r2, #0
 801a590:	729a      	strb	r2, [r3, #10]
 801a592:	2200      	movs	r2, #0
 801a594:	72da      	strb	r2, [r3, #11]
 801a596:	e00f      	b.n	801a5b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	895b      	ldrh	r3, [r3, #10]
 801a59c:	2b13      	cmp	r3, #19
 801a59e:	d802      	bhi.n	801a5a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a5a0:	f06f 0301 	mvn.w	r3, #1
 801a5a4:	e020      	b.n	801a5e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	685b      	ldr	r3, [r3, #4]
 801a5aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a5ac:	69fb      	ldr	r3, [r7, #28]
 801a5ae:	691b      	ldr	r3, [r3, #16]
 801a5b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a5b2:	f107 0314 	add.w	r3, r7, #20
 801a5b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d00c      	beq.n	801a5da <ip4_output_if_src+0x12e>
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	891a      	ldrh	r2, [r3, #8]
 801a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a5c8:	429a      	cmp	r2, r3
 801a5ca:	d906      	bls.n	801a5da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a5cc:	687a      	ldr	r2, [r7, #4]
 801a5ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a5d0:	68f8      	ldr	r0, [r7, #12]
 801a5d2:	f000 fd4d 	bl	801b070 <ip4_frag>
 801a5d6:	4603      	mov	r3, r0
 801a5d8:	e006      	b.n	801a5e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5dc:	695b      	ldr	r3, [r3, #20]
 801a5de:	687a      	ldr	r2, [r7, #4]
 801a5e0:	68f9      	ldr	r1, [r7, #12]
 801a5e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5e4:	4798      	blx	r3
 801a5e6:	4603      	mov	r3, r0
}
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	3720      	adds	r7, #32
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bd80      	pop	{r7, pc}
 801a5f0:	08020c10 	.word	0x08020c10
 801a5f4:	08020c44 	.word	0x08020c44
 801a5f8:	08020c50 	.word	0x08020c50
 801a5fc:	08020c78 	.word	0x08020c78
 801a600:	2000b0e6 	.word	0x2000b0e6
 801a604:	080211e8 	.word	0x080211e8

0801a608 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a608:	b480      	push	{r7}
 801a60a:	b085      	sub	sp, #20
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	6078      	str	r0, [r7, #4]
 801a610:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a61c:	d002      	beq.n	801a624 <ip4_addr_isbroadcast_u32+0x1c>
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d101      	bne.n	801a628 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a624:	2301      	movs	r3, #1
 801a626:	e02a      	b.n	801a67e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a62e:	f003 0302 	and.w	r3, r3, #2
 801a632:	2b00      	cmp	r3, #0
 801a634:	d101      	bne.n	801a63a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a636:	2300      	movs	r3, #0
 801a638:	e021      	b.n	801a67e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a63a:	683b      	ldr	r3, [r7, #0]
 801a63c:	3304      	adds	r3, #4
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	687a      	ldr	r2, [r7, #4]
 801a642:	429a      	cmp	r2, r3
 801a644:	d101      	bne.n	801a64a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a646:	2300      	movs	r3, #0
 801a648:	e019      	b.n	801a67e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a64a:	68fa      	ldr	r2, [r7, #12]
 801a64c:	683b      	ldr	r3, [r7, #0]
 801a64e:	3304      	adds	r3, #4
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	405a      	eors	r2, r3
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	3308      	adds	r3, #8
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	4013      	ands	r3, r2
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d10d      	bne.n	801a67c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a660:	683b      	ldr	r3, [r7, #0]
 801a662:	3308      	adds	r3, #8
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	43da      	mvns	r2, r3
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a66c:	683b      	ldr	r3, [r7, #0]
 801a66e:	3308      	adds	r3, #8
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a674:	429a      	cmp	r2, r3
 801a676:	d101      	bne.n	801a67c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a678:	2301      	movs	r3, #1
 801a67a:	e000      	b.n	801a67e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a67c:	2300      	movs	r3, #0
  }
}
 801a67e:	4618      	mov	r0, r3
 801a680:	3714      	adds	r7, #20
 801a682:	46bd      	mov	sp, r7
 801a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a688:	4770      	bx	lr
	...

0801a68c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b084      	sub	sp, #16
 801a690:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a692:	2300      	movs	r3, #0
 801a694:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a696:	4b12      	ldr	r3, [pc, #72]	; (801a6e0 <ip_reass_tmr+0x54>)
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a69c:	e018      	b.n	801a6d0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	7fdb      	ldrb	r3, [r3, #31]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d00b      	beq.n	801a6be <ip_reass_tmr+0x32>
      r->timer--;
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	7fdb      	ldrb	r3, [r3, #31]
 801a6aa:	3b01      	subs	r3, #1
 801a6ac:	b2da      	uxtb	r2, r3
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	60fb      	str	r3, [r7, #12]
 801a6bc:	e008      	b.n	801a6d0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a6c8:	68b9      	ldr	r1, [r7, #8]
 801a6ca:	6878      	ldr	r0, [r7, #4]
 801a6cc:	f000 f80a 	bl	801a6e4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d1e3      	bne.n	801a69e <ip_reass_tmr+0x12>
    }
  }
}
 801a6d6:	bf00      	nop
 801a6d8:	bf00      	nop
 801a6da:	3710      	adds	r7, #16
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	bd80      	pop	{r7, pc}
 801a6e0:	2000b0e8 	.word	0x2000b0e8

0801a6e4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a6e4:	b580      	push	{r7, lr}
 801a6e6:	b088      	sub	sp, #32
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
 801a6ec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a6f2:	683a      	ldr	r2, [r7, #0]
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	429a      	cmp	r2, r3
 801a6f8:	d105      	bne.n	801a706 <ip_reass_free_complete_datagram+0x22>
 801a6fa:	4b45      	ldr	r3, [pc, #276]	; (801a810 <ip_reass_free_complete_datagram+0x12c>)
 801a6fc:	22ab      	movs	r2, #171	; 0xab
 801a6fe:	4945      	ldr	r1, [pc, #276]	; (801a814 <ip_reass_free_complete_datagram+0x130>)
 801a700:	4845      	ldr	r0, [pc, #276]	; (801a818 <ip_reass_free_complete_datagram+0x134>)
 801a702:	f002 fb2d 	bl	801cd60 <iprintf>
  if (prev != NULL) {
 801a706:	683b      	ldr	r3, [r7, #0]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d00a      	beq.n	801a722 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a70c:	683b      	ldr	r3, [r7, #0]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	687a      	ldr	r2, [r7, #4]
 801a712:	429a      	cmp	r2, r3
 801a714:	d005      	beq.n	801a722 <ip_reass_free_complete_datagram+0x3e>
 801a716:	4b3e      	ldr	r3, [pc, #248]	; (801a810 <ip_reass_free_complete_datagram+0x12c>)
 801a718:	22ad      	movs	r2, #173	; 0xad
 801a71a:	4940      	ldr	r1, [pc, #256]	; (801a81c <ip_reass_free_complete_datagram+0x138>)
 801a71c:	483e      	ldr	r0, [pc, #248]	; (801a818 <ip_reass_free_complete_datagram+0x134>)
 801a71e:	f002 fb1f 	bl	801cd60 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	685b      	ldr	r3, [r3, #4]
 801a728:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a72a:	697b      	ldr	r3, [r7, #20]
 801a72c:	889b      	ldrh	r3, [r3, #4]
 801a72e:	b29b      	uxth	r3, r3
 801a730:	2b00      	cmp	r3, #0
 801a732:	d12a      	bne.n	801a78a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	685b      	ldr	r3, [r3, #4]
 801a738:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a73a:	697b      	ldr	r3, [r7, #20]
 801a73c:	681a      	ldr	r2, [r3, #0]
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a742:	69bb      	ldr	r3, [r7, #24]
 801a744:	6858      	ldr	r0, [r3, #4]
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	3308      	adds	r3, #8
 801a74a:	2214      	movs	r2, #20
 801a74c:	4619      	mov	r1, r3
 801a74e:	f002 fa96 	bl	801cc7e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a752:	2101      	movs	r1, #1
 801a754:	69b8      	ldr	r0, [r7, #24]
 801a756:	f7ff fc29 	bl	8019fac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a75a:	69b8      	ldr	r0, [r7, #24]
 801a75c:	f7f6 fb86 	bl	8010e6c <pbuf_clen>
 801a760:	4603      	mov	r3, r0
 801a762:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a764:	8bfa      	ldrh	r2, [r7, #30]
 801a766:	8a7b      	ldrh	r3, [r7, #18]
 801a768:	4413      	add	r3, r2
 801a76a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a76e:	db05      	blt.n	801a77c <ip_reass_free_complete_datagram+0x98>
 801a770:	4b27      	ldr	r3, [pc, #156]	; (801a810 <ip_reass_free_complete_datagram+0x12c>)
 801a772:	22bc      	movs	r2, #188	; 0xbc
 801a774:	492a      	ldr	r1, [pc, #168]	; (801a820 <ip_reass_free_complete_datagram+0x13c>)
 801a776:	4828      	ldr	r0, [pc, #160]	; (801a818 <ip_reass_free_complete_datagram+0x134>)
 801a778:	f002 faf2 	bl	801cd60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a77c:	8bfa      	ldrh	r2, [r7, #30]
 801a77e:	8a7b      	ldrh	r3, [r7, #18]
 801a780:	4413      	add	r3, r2
 801a782:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a784:	69b8      	ldr	r0, [r7, #24]
 801a786:	f7f6 fae3 	bl	8010d50 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	685b      	ldr	r3, [r3, #4]
 801a78e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a790:	e01f      	b.n	801a7d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a792:	69bb      	ldr	r3, [r7, #24]
 801a794:	685b      	ldr	r3, [r3, #4]
 801a796:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a798:	69bb      	ldr	r3, [r7, #24]
 801a79a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a79c:	697b      	ldr	r3, [r7, #20]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a7a2:	68f8      	ldr	r0, [r7, #12]
 801a7a4:	f7f6 fb62 	bl	8010e6c <pbuf_clen>
 801a7a8:	4603      	mov	r3, r0
 801a7aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a7ac:	8bfa      	ldrh	r2, [r7, #30]
 801a7ae:	8a7b      	ldrh	r3, [r7, #18]
 801a7b0:	4413      	add	r3, r2
 801a7b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a7b6:	db05      	blt.n	801a7c4 <ip_reass_free_complete_datagram+0xe0>
 801a7b8:	4b15      	ldr	r3, [pc, #84]	; (801a810 <ip_reass_free_complete_datagram+0x12c>)
 801a7ba:	22cc      	movs	r2, #204	; 0xcc
 801a7bc:	4918      	ldr	r1, [pc, #96]	; (801a820 <ip_reass_free_complete_datagram+0x13c>)
 801a7be:	4816      	ldr	r0, [pc, #88]	; (801a818 <ip_reass_free_complete_datagram+0x134>)
 801a7c0:	f002 face 	bl	801cd60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a7c4:	8bfa      	ldrh	r2, [r7, #30]
 801a7c6:	8a7b      	ldrh	r3, [r7, #18]
 801a7c8:	4413      	add	r3, r2
 801a7ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a7cc:	68f8      	ldr	r0, [r7, #12]
 801a7ce:	f7f6 fabf 	bl	8010d50 <pbuf_free>
  while (p != NULL) {
 801a7d2:	69bb      	ldr	r3, [r7, #24]
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d1dc      	bne.n	801a792 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a7d8:	6839      	ldr	r1, [r7, #0]
 801a7da:	6878      	ldr	r0, [r7, #4]
 801a7dc:	f000 f8c2 	bl	801a964 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a7e0:	4b10      	ldr	r3, [pc, #64]	; (801a824 <ip_reass_free_complete_datagram+0x140>)
 801a7e2:	881b      	ldrh	r3, [r3, #0]
 801a7e4:	8bfa      	ldrh	r2, [r7, #30]
 801a7e6:	429a      	cmp	r2, r3
 801a7e8:	d905      	bls.n	801a7f6 <ip_reass_free_complete_datagram+0x112>
 801a7ea:	4b09      	ldr	r3, [pc, #36]	; (801a810 <ip_reass_free_complete_datagram+0x12c>)
 801a7ec:	22d2      	movs	r2, #210	; 0xd2
 801a7ee:	490e      	ldr	r1, [pc, #56]	; (801a828 <ip_reass_free_complete_datagram+0x144>)
 801a7f0:	4809      	ldr	r0, [pc, #36]	; (801a818 <ip_reass_free_complete_datagram+0x134>)
 801a7f2:	f002 fab5 	bl	801cd60 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a7f6:	4b0b      	ldr	r3, [pc, #44]	; (801a824 <ip_reass_free_complete_datagram+0x140>)
 801a7f8:	881a      	ldrh	r2, [r3, #0]
 801a7fa:	8bfb      	ldrh	r3, [r7, #30]
 801a7fc:	1ad3      	subs	r3, r2, r3
 801a7fe:	b29a      	uxth	r2, r3
 801a800:	4b08      	ldr	r3, [pc, #32]	; (801a824 <ip_reass_free_complete_datagram+0x140>)
 801a802:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a804:	8bfb      	ldrh	r3, [r7, #30]
}
 801a806:	4618      	mov	r0, r3
 801a808:	3720      	adds	r7, #32
 801a80a:	46bd      	mov	sp, r7
 801a80c:	bd80      	pop	{r7, pc}
 801a80e:	bf00      	nop
 801a810:	08020ca8 	.word	0x08020ca8
 801a814:	08020ce4 	.word	0x08020ce4
 801a818:	08020cf0 	.word	0x08020cf0
 801a81c:	08020d18 	.word	0x08020d18
 801a820:	08020d2c 	.word	0x08020d2c
 801a824:	2000b0ec 	.word	0x2000b0ec
 801a828:	08020d4c 	.word	0x08020d4c

0801a82c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b08a      	sub	sp, #40	; 0x28
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
 801a834:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a836:	2300      	movs	r3, #0
 801a838:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a83a:	2300      	movs	r3, #0
 801a83c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a83e:	2300      	movs	r3, #0
 801a840:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a842:	2300      	movs	r3, #0
 801a844:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a846:	2300      	movs	r3, #0
 801a848:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a84a:	4b28      	ldr	r3, [pc, #160]	; (801a8ec <ip_reass_remove_oldest_datagram+0xc0>)
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a850:	e030      	b.n	801a8b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a854:	695a      	ldr	r2, [r3, #20]
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	68db      	ldr	r3, [r3, #12]
 801a85a:	429a      	cmp	r2, r3
 801a85c:	d10c      	bne.n	801a878 <ip_reass_remove_oldest_datagram+0x4c>
 801a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a860:	699a      	ldr	r2, [r3, #24]
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	691b      	ldr	r3, [r3, #16]
 801a866:	429a      	cmp	r2, r3
 801a868:	d106      	bne.n	801a878 <ip_reass_remove_oldest_datagram+0x4c>
 801a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a86c:	899a      	ldrh	r2, [r3, #12]
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	889b      	ldrh	r3, [r3, #4]
 801a872:	b29b      	uxth	r3, r3
 801a874:	429a      	cmp	r2, r3
 801a876:	d014      	beq.n	801a8a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a878:	693b      	ldr	r3, [r7, #16]
 801a87a:	3301      	adds	r3, #1
 801a87c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a87e:	6a3b      	ldr	r3, [r7, #32]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d104      	bne.n	801a88e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a886:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a888:	69fb      	ldr	r3, [r7, #28]
 801a88a:	61bb      	str	r3, [r7, #24]
 801a88c:	e009      	b.n	801a8a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a890:	7fda      	ldrb	r2, [r3, #31]
 801a892:	6a3b      	ldr	r3, [r7, #32]
 801a894:	7fdb      	ldrb	r3, [r3, #31]
 801a896:	429a      	cmp	r2, r3
 801a898:	d803      	bhi.n	801a8a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a89c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a89e:	69fb      	ldr	r3, [r7, #28]
 801a8a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d001      	beq.n	801a8ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d1cb      	bne.n	801a852 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a8ba:	6a3b      	ldr	r3, [r7, #32]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d008      	beq.n	801a8d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a8c0:	69b9      	ldr	r1, [r7, #24]
 801a8c2:	6a38      	ldr	r0, [r7, #32]
 801a8c4:	f7ff ff0e 	bl	801a6e4 <ip_reass_free_complete_datagram>
 801a8c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a8ca:	697a      	ldr	r2, [r7, #20]
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	4413      	add	r3, r2
 801a8d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a8d2:	697a      	ldr	r2, [r7, #20]
 801a8d4:	683b      	ldr	r3, [r7, #0]
 801a8d6:	429a      	cmp	r2, r3
 801a8d8:	da02      	bge.n	801a8e0 <ip_reass_remove_oldest_datagram+0xb4>
 801a8da:	693b      	ldr	r3, [r7, #16]
 801a8dc:	2b01      	cmp	r3, #1
 801a8de:	dcac      	bgt.n	801a83a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a8e0:	697b      	ldr	r3, [r7, #20]
}
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	3728      	adds	r7, #40	; 0x28
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	bd80      	pop	{r7, pc}
 801a8ea:	bf00      	nop
 801a8ec:	2000b0e8 	.word	0x2000b0e8

0801a8f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b084      	sub	sp, #16
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
 801a8f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a8fa:	2004      	movs	r0, #4
 801a8fc:	f7f5 fb26 	bl	800ff4c <memp_malloc>
 801a900:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	2b00      	cmp	r3, #0
 801a906:	d110      	bne.n	801a92a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a908:	6839      	ldr	r1, [r7, #0]
 801a90a:	6878      	ldr	r0, [r7, #4]
 801a90c:	f7ff ff8e 	bl	801a82c <ip_reass_remove_oldest_datagram>
 801a910:	4602      	mov	r2, r0
 801a912:	683b      	ldr	r3, [r7, #0]
 801a914:	4293      	cmp	r3, r2
 801a916:	dc03      	bgt.n	801a920 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a918:	2004      	movs	r0, #4
 801a91a:	f7f5 fb17 	bl	800ff4c <memp_malloc>
 801a91e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	2b00      	cmp	r3, #0
 801a924:	d101      	bne.n	801a92a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a926:	2300      	movs	r3, #0
 801a928:	e016      	b.n	801a958 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a92a:	2220      	movs	r2, #32
 801a92c:	2100      	movs	r1, #0
 801a92e:	68f8      	ldr	r0, [r7, #12]
 801a930:	f002 f9b3 	bl	801cc9a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	220f      	movs	r2, #15
 801a938:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a93a:	4b09      	ldr	r3, [pc, #36]	; (801a960 <ip_reass_enqueue_new_datagram+0x70>)
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a942:	4a07      	ldr	r2, [pc, #28]	; (801a960 <ip_reass_enqueue_new_datagram+0x70>)
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	3308      	adds	r3, #8
 801a94c:	2214      	movs	r2, #20
 801a94e:	6879      	ldr	r1, [r7, #4]
 801a950:	4618      	mov	r0, r3
 801a952:	f002 f994 	bl	801cc7e <memcpy>
  return ipr;
 801a956:	68fb      	ldr	r3, [r7, #12]
}
 801a958:	4618      	mov	r0, r3
 801a95a:	3710      	adds	r7, #16
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	2000b0e8 	.word	0x2000b0e8

0801a964 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b082      	sub	sp, #8
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
 801a96c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a96e:	4b10      	ldr	r3, [pc, #64]	; (801a9b0 <ip_reass_dequeue_datagram+0x4c>)
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	687a      	ldr	r2, [r7, #4]
 801a974:	429a      	cmp	r2, r3
 801a976:	d104      	bne.n	801a982 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	4a0c      	ldr	r2, [pc, #48]	; (801a9b0 <ip_reass_dequeue_datagram+0x4c>)
 801a97e:	6013      	str	r3, [r2, #0]
 801a980:	e00d      	b.n	801a99e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a982:	683b      	ldr	r3, [r7, #0]
 801a984:	2b00      	cmp	r3, #0
 801a986:	d106      	bne.n	801a996 <ip_reass_dequeue_datagram+0x32>
 801a988:	4b0a      	ldr	r3, [pc, #40]	; (801a9b4 <ip_reass_dequeue_datagram+0x50>)
 801a98a:	f240 1245 	movw	r2, #325	; 0x145
 801a98e:	490a      	ldr	r1, [pc, #40]	; (801a9b8 <ip_reass_dequeue_datagram+0x54>)
 801a990:	480a      	ldr	r0, [pc, #40]	; (801a9bc <ip_reass_dequeue_datagram+0x58>)
 801a992:	f002 f9e5 	bl	801cd60 <iprintf>
    prev->next = ipr->next;
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	681a      	ldr	r2, [r3, #0]
 801a99a:	683b      	ldr	r3, [r7, #0]
 801a99c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a99e:	6879      	ldr	r1, [r7, #4]
 801a9a0:	2004      	movs	r0, #4
 801a9a2:	f7f5 fb25 	bl	800fff0 <memp_free>
}
 801a9a6:	bf00      	nop
 801a9a8:	3708      	adds	r7, #8
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	bd80      	pop	{r7, pc}
 801a9ae:	bf00      	nop
 801a9b0:	2000b0e8 	.word	0x2000b0e8
 801a9b4:	08020ca8 	.word	0x08020ca8
 801a9b8:	08020d70 	.word	0x08020d70
 801a9bc:	08020cf0 	.word	0x08020cf0

0801a9c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b08c      	sub	sp, #48	; 0x30
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	60f8      	str	r0, [r7, #12]
 801a9c8:	60b9      	str	r1, [r7, #8]
 801a9ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a9d0:	2301      	movs	r3, #1
 801a9d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	685b      	ldr	r3, [r3, #4]
 801a9d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a9da:	69fb      	ldr	r3, [r7, #28]
 801a9dc:	885b      	ldrh	r3, [r3, #2]
 801a9de:	b29b      	uxth	r3, r3
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f7f4 fdfd 	bl	800f5e0 <lwip_htons>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a9ea:	69fb      	ldr	r3, [r7, #28]
 801a9ec:	781b      	ldrb	r3, [r3, #0]
 801a9ee:	f003 030f 	and.w	r3, r3, #15
 801a9f2:	b2db      	uxtb	r3, r3
 801a9f4:	009b      	lsls	r3, r3, #2
 801a9f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a9f8:	7e7b      	ldrb	r3, [r7, #25]
 801a9fa:	b29b      	uxth	r3, r3
 801a9fc:	8b7a      	ldrh	r2, [r7, #26]
 801a9fe:	429a      	cmp	r2, r3
 801aa00:	d202      	bcs.n	801aa08 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa02:	f04f 33ff 	mov.w	r3, #4294967295
 801aa06:	e135      	b.n	801ac74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801aa08:	7e7b      	ldrb	r3, [r7, #25]
 801aa0a:	b29b      	uxth	r3, r3
 801aa0c:	8b7a      	ldrh	r2, [r7, #26]
 801aa0e:	1ad3      	subs	r3, r2, r3
 801aa10:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801aa12:	69fb      	ldr	r3, [r7, #28]
 801aa14:	88db      	ldrh	r3, [r3, #6]
 801aa16:	b29b      	uxth	r3, r3
 801aa18:	4618      	mov	r0, r3
 801aa1a:	f7f4 fde1 	bl	800f5e0 <lwip_htons>
 801aa1e:	4603      	mov	r3, r0
 801aa20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aa24:	b29b      	uxth	r3, r3
 801aa26:	00db      	lsls	r3, r3, #3
 801aa28:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801aa2a:	68bb      	ldr	r3, [r7, #8]
 801aa2c:	685b      	ldr	r3, [r3, #4]
 801aa2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801aa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa32:	2200      	movs	r2, #0
 801aa34:	701a      	strb	r2, [r3, #0]
 801aa36:	2200      	movs	r2, #0
 801aa38:	705a      	strb	r2, [r3, #1]
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	709a      	strb	r2, [r3, #2]
 801aa3e:	2200      	movs	r2, #0
 801aa40:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa44:	8afa      	ldrh	r2, [r7, #22]
 801aa46:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801aa48:	8afa      	ldrh	r2, [r7, #22]
 801aa4a:	8b7b      	ldrh	r3, [r7, #26]
 801aa4c:	4413      	add	r3, r2
 801aa4e:	b29a      	uxth	r2, r3
 801aa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa52:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801aa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa56:	88db      	ldrh	r3, [r3, #6]
 801aa58:	b29b      	uxth	r3, r3
 801aa5a:	8afa      	ldrh	r2, [r7, #22]
 801aa5c:	429a      	cmp	r2, r3
 801aa5e:	d902      	bls.n	801aa66 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa60:	f04f 33ff 	mov.w	r3, #4294967295
 801aa64:	e106      	b.n	801ac74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	685b      	ldr	r3, [r3, #4]
 801aa6a:	627b      	str	r3, [r7, #36]	; 0x24
 801aa6c:	e068      	b.n	801ab40 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa70:	685b      	ldr	r3, [r3, #4]
 801aa72:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa76:	889b      	ldrh	r3, [r3, #4]
 801aa78:	b29a      	uxth	r2, r3
 801aa7a:	693b      	ldr	r3, [r7, #16]
 801aa7c:	889b      	ldrh	r3, [r3, #4]
 801aa7e:	b29b      	uxth	r3, r3
 801aa80:	429a      	cmp	r2, r3
 801aa82:	d235      	bcs.n	801aaf0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa88:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d020      	beq.n	801aad2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa92:	889b      	ldrh	r3, [r3, #4]
 801aa94:	b29a      	uxth	r2, r3
 801aa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa98:	88db      	ldrh	r3, [r3, #6]
 801aa9a:	b29b      	uxth	r3, r3
 801aa9c:	429a      	cmp	r2, r3
 801aa9e:	d307      	bcc.n	801aab0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaa2:	88db      	ldrh	r3, [r3, #6]
 801aaa4:	b29a      	uxth	r2, r3
 801aaa6:	693b      	ldr	r3, [r7, #16]
 801aaa8:	889b      	ldrh	r3, [r3, #4]
 801aaaa:	b29b      	uxth	r3, r3
 801aaac:	429a      	cmp	r2, r3
 801aaae:	d902      	bls.n	801aab6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aab0:	f04f 33ff 	mov.w	r3, #4294967295
 801aab4:	e0de      	b.n	801ac74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aab8:	68ba      	ldr	r2, [r7, #8]
 801aaba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aabe:	88db      	ldrh	r3, [r3, #6]
 801aac0:	b29a      	uxth	r2, r3
 801aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aac4:	889b      	ldrh	r3, [r3, #4]
 801aac6:	b29b      	uxth	r3, r3
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d03d      	beq.n	801ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801aacc:	2300      	movs	r3, #0
 801aace:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801aad0:	e03a      	b.n	801ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aad4:	88db      	ldrh	r3, [r3, #6]
 801aad6:	b29a      	uxth	r2, r3
 801aad8:	693b      	ldr	r3, [r7, #16]
 801aada:	889b      	ldrh	r3, [r3, #4]
 801aadc:	b29b      	uxth	r3, r3
 801aade:	429a      	cmp	r2, r3
 801aae0:	d902      	bls.n	801aae8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aae2:	f04f 33ff 	mov.w	r3, #4294967295
 801aae6:	e0c5      	b.n	801ac74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	68ba      	ldr	r2, [r7, #8]
 801aaec:	605a      	str	r2, [r3, #4]
      break;
 801aaee:	e02b      	b.n	801ab48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaf2:	889b      	ldrh	r3, [r3, #4]
 801aaf4:	b29a      	uxth	r2, r3
 801aaf6:	693b      	ldr	r3, [r7, #16]
 801aaf8:	889b      	ldrh	r3, [r3, #4]
 801aafa:	b29b      	uxth	r3, r3
 801aafc:	429a      	cmp	r2, r3
 801aafe:	d102      	bne.n	801ab06 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab00:	f04f 33ff 	mov.w	r3, #4294967295
 801ab04:	e0b6      	b.n	801ac74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ab06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab08:	889b      	ldrh	r3, [r3, #4]
 801ab0a:	b29a      	uxth	r2, r3
 801ab0c:	693b      	ldr	r3, [r7, #16]
 801ab0e:	88db      	ldrh	r3, [r3, #6]
 801ab10:	b29b      	uxth	r3, r3
 801ab12:	429a      	cmp	r2, r3
 801ab14:	d202      	bcs.n	801ab1c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab16:	f04f 33ff 	mov.w	r3, #4294967295
 801ab1a:	e0ab      	b.n	801ac74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d009      	beq.n	801ab36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab24:	88db      	ldrh	r3, [r3, #6]
 801ab26:	b29a      	uxth	r2, r3
 801ab28:	693b      	ldr	r3, [r7, #16]
 801ab2a:	889b      	ldrh	r3, [r3, #4]
 801ab2c:	b29b      	uxth	r3, r3
 801ab2e:	429a      	cmp	r2, r3
 801ab30:	d001      	beq.n	801ab36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ab32:	2300      	movs	r3, #0
 801ab34:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ab36:	693b      	ldr	r3, [r7, #16]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ab3c:	693b      	ldr	r3, [r7, #16]
 801ab3e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d193      	bne.n	801aa6e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ab46:	e000      	b.n	801ab4a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ab48:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d12d      	bne.n	801abac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d01c      	beq.n	801ab90 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab58:	88db      	ldrh	r3, [r3, #6]
 801ab5a:	b29a      	uxth	r2, r3
 801ab5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab5e:	889b      	ldrh	r3, [r3, #4]
 801ab60:	b29b      	uxth	r3, r3
 801ab62:	429a      	cmp	r2, r3
 801ab64:	d906      	bls.n	801ab74 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801ab66:	4b45      	ldr	r3, [pc, #276]	; (801ac7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab68:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801ab6c:	4944      	ldr	r1, [pc, #272]	; (801ac80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ab6e:	4845      	ldr	r0, [pc, #276]	; (801ac84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ab70:	f002 f8f6 	bl	801cd60 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab76:	68ba      	ldr	r2, [r7, #8]
 801ab78:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab7c:	88db      	ldrh	r3, [r3, #6]
 801ab7e:	b29a      	uxth	r2, r3
 801ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab82:	889b      	ldrh	r3, [r3, #4]
 801ab84:	b29b      	uxth	r3, r3
 801ab86:	429a      	cmp	r2, r3
 801ab88:	d010      	beq.n	801abac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	623b      	str	r3, [r7, #32]
 801ab8e:	e00d      	b.n	801abac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	685b      	ldr	r3, [r3, #4]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d006      	beq.n	801aba6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801ab98:	4b38      	ldr	r3, [pc, #224]	; (801ac7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab9a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801ab9e:	493a      	ldr	r1, [pc, #232]	; (801ac88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801aba0:	4838      	ldr	r0, [pc, #224]	; (801ac84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aba2:	f002 f8dd 	bl	801cd60 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	68ba      	ldr	r2, [r7, #8]
 801abaa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d105      	bne.n	801abbe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	7f9b      	ldrb	r3, [r3, #30]
 801abb6:	f003 0301 	and.w	r3, r3, #1
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d059      	beq.n	801ac72 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801abbe:	6a3b      	ldr	r3, [r7, #32]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d04f      	beq.n	801ac64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	685b      	ldr	r3, [r3, #4]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d006      	beq.n	801abda <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	685b      	ldr	r3, [r3, #4]
 801abd0:	685b      	ldr	r3, [r3, #4]
 801abd2:	889b      	ldrh	r3, [r3, #4]
 801abd4:	b29b      	uxth	r3, r3
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d002      	beq.n	801abe0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801abda:	2300      	movs	r3, #0
 801abdc:	623b      	str	r3, [r7, #32]
 801abde:	e041      	b.n	801ac64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abe2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801abe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801abea:	e012      	b.n	801ac12 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abee:	685b      	ldr	r3, [r3, #4]
 801abf0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abf4:	88db      	ldrh	r3, [r3, #6]
 801abf6:	b29a      	uxth	r2, r3
 801abf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abfa:	889b      	ldrh	r3, [r3, #4]
 801abfc:	b29b      	uxth	r3, r3
 801abfe:	429a      	cmp	r2, r3
 801ac00:	d002      	beq.n	801ac08 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ac02:	2300      	movs	r3, #0
 801ac04:	623b      	str	r3, [r7, #32]
            break;
 801ac06:	e007      	b.n	801ac18 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ac08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac0a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ac12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d1e9      	bne.n	801abec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ac18:	6a3b      	ldr	r3, [r7, #32]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d022      	beq.n	801ac64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	685b      	ldr	r3, [r3, #4]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d106      	bne.n	801ac34 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ac26:	4b15      	ldr	r3, [pc, #84]	; (801ac7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac28:	f240 12df 	movw	r2, #479	; 0x1df
 801ac2c:	4917      	ldr	r1, [pc, #92]	; (801ac8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ac2e:	4815      	ldr	r0, [pc, #84]	; (801ac84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ac30:	f002 f896 	bl	801cd60 <iprintf>
          LWIP_ASSERT("sanity check",
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	685b      	ldr	r3, [r3, #4]
 801ac38:	685b      	ldr	r3, [r3, #4]
 801ac3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ac3c:	429a      	cmp	r2, r3
 801ac3e:	d106      	bne.n	801ac4e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ac40:	4b0e      	ldr	r3, [pc, #56]	; (801ac7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ac46:	4911      	ldr	r1, [pc, #68]	; (801ac8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ac48:	480e      	ldr	r0, [pc, #56]	; (801ac84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ac4a:	f002 f889 	bl	801cd60 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ac4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d006      	beq.n	801ac64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ac56:	4b09      	ldr	r3, [pc, #36]	; (801ac7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac58:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801ac5c:	490c      	ldr	r1, [pc, #48]	; (801ac90 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ac5e:	4809      	ldr	r0, [pc, #36]	; (801ac84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ac60:	f002 f87e 	bl	801cd60 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ac64:	6a3b      	ldr	r3, [r7, #32]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	bf14      	ite	ne
 801ac6a:	2301      	movne	r3, #1
 801ac6c:	2300      	moveq	r3, #0
 801ac6e:	b2db      	uxtb	r3, r3
 801ac70:	e000      	b.n	801ac74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ac72:	2300      	movs	r3, #0
}
 801ac74:	4618      	mov	r0, r3
 801ac76:	3730      	adds	r7, #48	; 0x30
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	bd80      	pop	{r7, pc}
 801ac7c:	08020ca8 	.word	0x08020ca8
 801ac80:	08020d8c 	.word	0x08020d8c
 801ac84:	08020cf0 	.word	0x08020cf0
 801ac88:	08020dac 	.word	0x08020dac
 801ac8c:	08020de4 	.word	0x08020de4
 801ac90:	08020df4 	.word	0x08020df4

0801ac94 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ac94:	b580      	push	{r7, lr}
 801ac96:	b08e      	sub	sp, #56	; 0x38
 801ac98:	af00      	add	r7, sp, #0
 801ac9a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	685b      	ldr	r3, [r3, #4]
 801aca0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aca4:	781b      	ldrb	r3, [r3, #0]
 801aca6:	f003 030f 	and.w	r3, r3, #15
 801acaa:	b2db      	uxtb	r3, r3
 801acac:	009b      	lsls	r3, r3, #2
 801acae:	b2db      	uxtb	r3, r3
 801acb0:	2b14      	cmp	r3, #20
 801acb2:	f040 8167 	bne.w	801af84 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acb8:	88db      	ldrh	r3, [r3, #6]
 801acba:	b29b      	uxth	r3, r3
 801acbc:	4618      	mov	r0, r3
 801acbe:	f7f4 fc8f 	bl	800f5e0 <lwip_htons>
 801acc2:	4603      	mov	r3, r0
 801acc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801acc8:	b29b      	uxth	r3, r3
 801acca:	00db      	lsls	r3, r3, #3
 801accc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acd0:	885b      	ldrh	r3, [r3, #2]
 801acd2:	b29b      	uxth	r3, r3
 801acd4:	4618      	mov	r0, r3
 801acd6:	f7f4 fc83 	bl	800f5e0 <lwip_htons>
 801acda:	4603      	mov	r3, r0
 801acdc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ace0:	781b      	ldrb	r3, [r3, #0]
 801ace2:	f003 030f 	and.w	r3, r3, #15
 801ace6:	b2db      	uxtb	r3, r3
 801ace8:	009b      	lsls	r3, r3, #2
 801acea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801acee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801acf2:	b29b      	uxth	r3, r3
 801acf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801acf6:	429a      	cmp	r2, r3
 801acf8:	f0c0 8146 	bcc.w	801af88 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801acfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ad00:	b29b      	uxth	r3, r3
 801ad02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ad04:	1ad3      	subs	r3, r2, r3
 801ad06:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ad08:	6878      	ldr	r0, [r7, #4]
 801ad0a:	f7f6 f8af 	bl	8010e6c <pbuf_clen>
 801ad0e:	4603      	mov	r3, r0
 801ad10:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ad12:	4b9f      	ldr	r3, [pc, #636]	; (801af90 <ip4_reass+0x2fc>)
 801ad14:	881b      	ldrh	r3, [r3, #0]
 801ad16:	461a      	mov	r2, r3
 801ad18:	8c3b      	ldrh	r3, [r7, #32]
 801ad1a:	4413      	add	r3, r2
 801ad1c:	2b0a      	cmp	r3, #10
 801ad1e:	dd10      	ble.n	801ad42 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ad20:	8c3b      	ldrh	r3, [r7, #32]
 801ad22:	4619      	mov	r1, r3
 801ad24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ad26:	f7ff fd81 	bl	801a82c <ip_reass_remove_oldest_datagram>
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	f000 812d 	beq.w	801af8c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ad32:	4b97      	ldr	r3, [pc, #604]	; (801af90 <ip4_reass+0x2fc>)
 801ad34:	881b      	ldrh	r3, [r3, #0]
 801ad36:	461a      	mov	r2, r3
 801ad38:	8c3b      	ldrh	r3, [r7, #32]
 801ad3a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ad3c:	2b0a      	cmp	r3, #10
 801ad3e:	f300 8125 	bgt.w	801af8c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ad42:	4b94      	ldr	r3, [pc, #592]	; (801af94 <ip4_reass+0x300>)
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	633b      	str	r3, [r7, #48]	; 0x30
 801ad48:	e015      	b.n	801ad76 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad4c:	695a      	ldr	r2, [r3, #20]
 801ad4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad50:	68db      	ldr	r3, [r3, #12]
 801ad52:	429a      	cmp	r2, r3
 801ad54:	d10c      	bne.n	801ad70 <ip4_reass+0xdc>
 801ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad58:	699a      	ldr	r2, [r3, #24]
 801ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad5c:	691b      	ldr	r3, [r3, #16]
 801ad5e:	429a      	cmp	r2, r3
 801ad60:	d106      	bne.n	801ad70 <ip4_reass+0xdc>
 801ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad64:	899a      	ldrh	r2, [r3, #12]
 801ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad68:	889b      	ldrh	r3, [r3, #4]
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	429a      	cmp	r2, r3
 801ad6e:	d006      	beq.n	801ad7e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	633b      	str	r3, [r7, #48]	; 0x30
 801ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d1e6      	bne.n	801ad4a <ip4_reass+0xb6>
 801ad7c:	e000      	b.n	801ad80 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801ad7e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d109      	bne.n	801ad9a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ad86:	8c3b      	ldrh	r3, [r7, #32]
 801ad88:	4619      	mov	r1, r3
 801ad8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ad8c:	f7ff fdb0 	bl	801a8f0 <ip_reass_enqueue_new_datagram>
 801ad90:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d11c      	bne.n	801add2 <ip4_reass+0x13e>
      goto nullreturn;
 801ad98:	e109      	b.n	801afae <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ad9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad9c:	88db      	ldrh	r3, [r3, #6]
 801ad9e:	b29b      	uxth	r3, r3
 801ada0:	4618      	mov	r0, r3
 801ada2:	f7f4 fc1d 	bl	800f5e0 <lwip_htons>
 801ada6:	4603      	mov	r3, r0
 801ada8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801adac:	2b00      	cmp	r3, #0
 801adae:	d110      	bne.n	801add2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adb2:	89db      	ldrh	r3, [r3, #14]
 801adb4:	4618      	mov	r0, r3
 801adb6:	f7f4 fc13 	bl	800f5e0 <lwip_htons>
 801adba:	4603      	mov	r3, r0
 801adbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d006      	beq.n	801add2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adc6:	3308      	adds	r3, #8
 801adc8:	2214      	movs	r2, #20
 801adca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801adcc:	4618      	mov	r0, r3
 801adce:	f001 ff56 	bl	801cc7e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801add4:	88db      	ldrh	r3, [r3, #6]
 801add6:	b29b      	uxth	r3, r3
 801add8:	f003 0320 	and.w	r3, r3, #32
 801addc:	2b00      	cmp	r3, #0
 801adde:	bf0c      	ite	eq
 801ade0:	2301      	moveq	r3, #1
 801ade2:	2300      	movne	r3, #0
 801ade4:	b2db      	uxtb	r3, r3
 801ade6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ade8:	69fb      	ldr	r3, [r7, #28]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d00e      	beq.n	801ae0c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801adee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801adf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801adf2:	4413      	add	r3, r2
 801adf4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801adf6:	8b7a      	ldrh	r2, [r7, #26]
 801adf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801adfa:	429a      	cmp	r2, r3
 801adfc:	f0c0 80a0 	bcc.w	801af40 <ip4_reass+0x2ac>
 801ae00:	8b7b      	ldrh	r3, [r7, #26]
 801ae02:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ae06:	4293      	cmp	r3, r2
 801ae08:	f200 809a 	bhi.w	801af40 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ae0c:	69fa      	ldr	r2, [r7, #28]
 801ae0e:	6879      	ldr	r1, [r7, #4]
 801ae10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae12:	f7ff fdd5 	bl	801a9c0 <ip_reass_chain_frag_into_datagram_and_validate>
 801ae16:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ae18:	697b      	ldr	r3, [r7, #20]
 801ae1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae1e:	f000 8091 	beq.w	801af44 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ae22:	4b5b      	ldr	r3, [pc, #364]	; (801af90 <ip4_reass+0x2fc>)
 801ae24:	881a      	ldrh	r2, [r3, #0]
 801ae26:	8c3b      	ldrh	r3, [r7, #32]
 801ae28:	4413      	add	r3, r2
 801ae2a:	b29a      	uxth	r2, r3
 801ae2c:	4b58      	ldr	r3, [pc, #352]	; (801af90 <ip4_reass+0x2fc>)
 801ae2e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ae30:	69fb      	ldr	r3, [r7, #28]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d00d      	beq.n	801ae52 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ae36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ae38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae3a:	4413      	add	r3, r2
 801ae3c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae40:	8a7a      	ldrh	r2, [r7, #18]
 801ae42:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae46:	7f9b      	ldrb	r3, [r3, #30]
 801ae48:	f043 0301 	orr.w	r3, r3, #1
 801ae4c:	b2da      	uxtb	r2, r3
 801ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae50:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ae52:	697b      	ldr	r3, [r7, #20]
 801ae54:	2b01      	cmp	r3, #1
 801ae56:	d171      	bne.n	801af3c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae5a:	8b9b      	ldrh	r3, [r3, #28]
 801ae5c:	3314      	adds	r3, #20
 801ae5e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae62:	685b      	ldr	r3, [r3, #4]
 801ae64:	685b      	ldr	r3, [r3, #4]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae6c:	685b      	ldr	r3, [r3, #4]
 801ae6e:	685b      	ldr	r3, [r3, #4]
 801ae70:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae74:	3308      	adds	r3, #8
 801ae76:	2214      	movs	r2, #20
 801ae78:	4619      	mov	r1, r3
 801ae7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ae7c:	f001 feff 	bl	801cc7e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ae80:	8a3b      	ldrh	r3, [r7, #16]
 801ae82:	4618      	mov	r0, r3
 801ae84:	f7f4 fbac 	bl	800f5e0 <lwip_htons>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	461a      	mov	r2, r3
 801ae8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae8e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae92:	2200      	movs	r2, #0
 801ae94:	719a      	strb	r2, [r3, #6]
 801ae96:	2200      	movs	r2, #0
 801ae98:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae9c:	2200      	movs	r2, #0
 801ae9e:	729a      	strb	r2, [r3, #10]
 801aea0:	2200      	movs	r2, #0
 801aea2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aea6:	685b      	ldr	r3, [r3, #4]
 801aea8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801aeaa:	e00d      	b.n	801aec8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801aeac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aeae:	685b      	ldr	r3, [r3, #4]
 801aeb0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801aeb2:	2114      	movs	r1, #20
 801aeb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801aeb6:	f7f5 fec5 	bl	8010c44 <pbuf_remove_header>
      pbuf_cat(p, r);
 801aeba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801aebc:	6878      	ldr	r0, [r7, #4]
 801aebe:	f7f6 f815 	bl	8010eec <pbuf_cat>
      r = iprh->next_pbuf;
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801aec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d1ee      	bne.n	801aeac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801aece:	4b31      	ldr	r3, [pc, #196]	; (801af94 <ip4_reass+0x300>)
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aed4:	429a      	cmp	r2, r3
 801aed6:	d102      	bne.n	801aede <ip4_reass+0x24a>
      ipr_prev = NULL;
 801aed8:	2300      	movs	r3, #0
 801aeda:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aedc:	e010      	b.n	801af00 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801aede:	4b2d      	ldr	r3, [pc, #180]	; (801af94 <ip4_reass+0x300>)
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aee4:	e007      	b.n	801aef6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aeec:	429a      	cmp	r2, r3
 801aeee:	d006      	beq.n	801aefe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801aef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d1f4      	bne.n	801aee6 <ip4_reass+0x252>
 801aefc:	e000      	b.n	801af00 <ip4_reass+0x26c>
          break;
 801aefe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801af00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801af02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af04:	f7ff fd2e 	bl	801a964 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801af08:	6878      	ldr	r0, [r7, #4]
 801af0a:	f7f5 ffaf 	bl	8010e6c <pbuf_clen>
 801af0e:	4603      	mov	r3, r0
 801af10:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801af12:	4b1f      	ldr	r3, [pc, #124]	; (801af90 <ip4_reass+0x2fc>)
 801af14:	881b      	ldrh	r3, [r3, #0]
 801af16:	8c3a      	ldrh	r2, [r7, #32]
 801af18:	429a      	cmp	r2, r3
 801af1a:	d906      	bls.n	801af2a <ip4_reass+0x296>
 801af1c:	4b1e      	ldr	r3, [pc, #120]	; (801af98 <ip4_reass+0x304>)
 801af1e:	f240 229b 	movw	r2, #667	; 0x29b
 801af22:	491e      	ldr	r1, [pc, #120]	; (801af9c <ip4_reass+0x308>)
 801af24:	481e      	ldr	r0, [pc, #120]	; (801afa0 <ip4_reass+0x30c>)
 801af26:	f001 ff1b 	bl	801cd60 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801af2a:	4b19      	ldr	r3, [pc, #100]	; (801af90 <ip4_reass+0x2fc>)
 801af2c:	881a      	ldrh	r2, [r3, #0]
 801af2e:	8c3b      	ldrh	r3, [r7, #32]
 801af30:	1ad3      	subs	r3, r2, r3
 801af32:	b29a      	uxth	r2, r3
 801af34:	4b16      	ldr	r3, [pc, #88]	; (801af90 <ip4_reass+0x2fc>)
 801af36:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	e03c      	b.n	801afb6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801af3c:	2300      	movs	r3, #0
 801af3e:	e03a      	b.n	801afb6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801af40:	bf00      	nop
 801af42:	e000      	b.n	801af46 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801af44:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d106      	bne.n	801af5a <ip4_reass+0x2c6>
 801af4c:	4b12      	ldr	r3, [pc, #72]	; (801af98 <ip4_reass+0x304>)
 801af4e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801af52:	4914      	ldr	r1, [pc, #80]	; (801afa4 <ip4_reass+0x310>)
 801af54:	4812      	ldr	r0, [pc, #72]	; (801afa0 <ip4_reass+0x30c>)
 801af56:	f001 ff03 	bl	801cd60 <iprintf>
  if (ipr->p == NULL) {
 801af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af5c:	685b      	ldr	r3, [r3, #4]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d124      	bne.n	801afac <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801af62:	4b0c      	ldr	r3, [pc, #48]	; (801af94 <ip4_reass+0x300>)
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af68:	429a      	cmp	r2, r3
 801af6a:	d006      	beq.n	801af7a <ip4_reass+0x2e6>
 801af6c:	4b0a      	ldr	r3, [pc, #40]	; (801af98 <ip4_reass+0x304>)
 801af6e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801af72:	490d      	ldr	r1, [pc, #52]	; (801afa8 <ip4_reass+0x314>)
 801af74:	480a      	ldr	r0, [pc, #40]	; (801afa0 <ip4_reass+0x30c>)
 801af76:	f001 fef3 	bl	801cd60 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801af7a:	2100      	movs	r1, #0
 801af7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af7e:	f7ff fcf1 	bl	801a964 <ip_reass_dequeue_datagram>
 801af82:	e014      	b.n	801afae <ip4_reass+0x31a>
    goto nullreturn;
 801af84:	bf00      	nop
 801af86:	e012      	b.n	801afae <ip4_reass+0x31a>
    goto nullreturn;
 801af88:	bf00      	nop
 801af8a:	e010      	b.n	801afae <ip4_reass+0x31a>
      goto nullreturn;
 801af8c:	bf00      	nop
 801af8e:	e00e      	b.n	801afae <ip4_reass+0x31a>
 801af90:	2000b0ec 	.word	0x2000b0ec
 801af94:	2000b0e8 	.word	0x2000b0e8
 801af98:	08020ca8 	.word	0x08020ca8
 801af9c:	08020e18 	.word	0x08020e18
 801afa0:	08020cf0 	.word	0x08020cf0
 801afa4:	08020e34 	.word	0x08020e34
 801afa8:	08020e40 	.word	0x08020e40
  }

nullreturn:
 801afac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801afae:	6878      	ldr	r0, [r7, #4]
 801afb0:	f7f5 fece 	bl	8010d50 <pbuf_free>
  return NULL;
 801afb4:	2300      	movs	r3, #0
}
 801afb6:	4618      	mov	r0, r3
 801afb8:	3738      	adds	r7, #56	; 0x38
 801afba:	46bd      	mov	sp, r7
 801afbc:	bd80      	pop	{r7, pc}
 801afbe:	bf00      	nop

0801afc0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801afc4:	2005      	movs	r0, #5
 801afc6:	f7f4 ffc1 	bl	800ff4c <memp_malloc>
 801afca:	4603      	mov	r3, r0
}
 801afcc:	4618      	mov	r0, r3
 801afce:	bd80      	pop	{r7, pc}

0801afd0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b082      	sub	sp, #8
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d106      	bne.n	801afec <ip_frag_free_pbuf_custom_ref+0x1c>
 801afde:	4b07      	ldr	r3, [pc, #28]	; (801affc <ip_frag_free_pbuf_custom_ref+0x2c>)
 801afe0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801afe4:	4906      	ldr	r1, [pc, #24]	; (801b000 <ip_frag_free_pbuf_custom_ref+0x30>)
 801afe6:	4807      	ldr	r0, [pc, #28]	; (801b004 <ip_frag_free_pbuf_custom_ref+0x34>)
 801afe8:	f001 feba 	bl	801cd60 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801afec:	6879      	ldr	r1, [r7, #4]
 801afee:	2005      	movs	r0, #5
 801aff0:	f7f4 fffe 	bl	800fff0 <memp_free>
}
 801aff4:	bf00      	nop
 801aff6:	3708      	adds	r7, #8
 801aff8:	46bd      	mov	sp, r7
 801affa:	bd80      	pop	{r7, pc}
 801affc:	08020ca8 	.word	0x08020ca8
 801b000:	08020e60 	.word	0x08020e60
 801b004:	08020cf0 	.word	0x08020cf0

0801b008 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	b084      	sub	sp, #16
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d106      	bne.n	801b028 <ipfrag_free_pbuf_custom+0x20>
 801b01a:	4b11      	ldr	r3, [pc, #68]	; (801b060 <ipfrag_free_pbuf_custom+0x58>)
 801b01c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b020:	4910      	ldr	r1, [pc, #64]	; (801b064 <ipfrag_free_pbuf_custom+0x5c>)
 801b022:	4811      	ldr	r0, [pc, #68]	; (801b068 <ipfrag_free_pbuf_custom+0x60>)
 801b024:	f001 fe9c 	bl	801cd60 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b028:	68fa      	ldr	r2, [r7, #12]
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	429a      	cmp	r2, r3
 801b02e:	d006      	beq.n	801b03e <ipfrag_free_pbuf_custom+0x36>
 801b030:	4b0b      	ldr	r3, [pc, #44]	; (801b060 <ipfrag_free_pbuf_custom+0x58>)
 801b032:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b036:	490d      	ldr	r1, [pc, #52]	; (801b06c <ipfrag_free_pbuf_custom+0x64>)
 801b038:	480b      	ldr	r0, [pc, #44]	; (801b068 <ipfrag_free_pbuf_custom+0x60>)
 801b03a:	f001 fe91 	bl	801cd60 <iprintf>
  if (pcr->original != NULL) {
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	695b      	ldr	r3, [r3, #20]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d004      	beq.n	801b050 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	695b      	ldr	r3, [r3, #20]
 801b04a:	4618      	mov	r0, r3
 801b04c:	f7f5 fe80 	bl	8010d50 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b050:	68f8      	ldr	r0, [r7, #12]
 801b052:	f7ff ffbd 	bl	801afd0 <ip_frag_free_pbuf_custom_ref>
}
 801b056:	bf00      	nop
 801b058:	3710      	adds	r7, #16
 801b05a:	46bd      	mov	sp, r7
 801b05c:	bd80      	pop	{r7, pc}
 801b05e:	bf00      	nop
 801b060:	08020ca8 	.word	0x08020ca8
 801b064:	08020e6c 	.word	0x08020e6c
 801b068:	08020cf0 	.word	0x08020cf0
 801b06c:	08020e78 	.word	0x08020e78

0801b070 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b094      	sub	sp, #80	; 0x50
 801b074:	af02      	add	r7, sp, #8
 801b076:	60f8      	str	r0, [r7, #12]
 801b078:	60b9      	str	r1, [r7, #8]
 801b07a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b07c:	2300      	movs	r3, #0
 801b07e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b082:	68bb      	ldr	r3, [r7, #8]
 801b084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b086:	3b14      	subs	r3, #20
 801b088:	2b00      	cmp	r3, #0
 801b08a:	da00      	bge.n	801b08e <ip4_frag+0x1e>
 801b08c:	3307      	adds	r3, #7
 801b08e:	10db      	asrs	r3, r3, #3
 801b090:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b092:	2314      	movs	r3, #20
 801b094:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b09e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0a2:	781b      	ldrb	r3, [r3, #0]
 801b0a4:	f003 030f 	and.w	r3, r3, #15
 801b0a8:	b2db      	uxtb	r3, r3
 801b0aa:	009b      	lsls	r3, r3, #2
 801b0ac:	b2db      	uxtb	r3, r3
 801b0ae:	2b14      	cmp	r3, #20
 801b0b0:	d002      	beq.n	801b0b8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b0b2:	f06f 0305 	mvn.w	r3, #5
 801b0b6:	e110      	b.n	801b2da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	895b      	ldrh	r3, [r3, #10]
 801b0bc:	2b13      	cmp	r3, #19
 801b0be:	d809      	bhi.n	801b0d4 <ip4_frag+0x64>
 801b0c0:	4b88      	ldr	r3, [pc, #544]	; (801b2e4 <ip4_frag+0x274>)
 801b0c2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b0c6:	4988      	ldr	r1, [pc, #544]	; (801b2e8 <ip4_frag+0x278>)
 801b0c8:	4888      	ldr	r0, [pc, #544]	; (801b2ec <ip4_frag+0x27c>)
 801b0ca:	f001 fe49 	bl	801cd60 <iprintf>
 801b0ce:	f06f 0305 	mvn.w	r3, #5
 801b0d2:	e102      	b.n	801b2da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0d6:	88db      	ldrh	r3, [r3, #6]
 801b0d8:	b29b      	uxth	r3, r3
 801b0da:	4618      	mov	r0, r3
 801b0dc:	f7f4 fa80 	bl	800f5e0 <lwip_htons>
 801b0e0:	4603      	mov	r3, r0
 801b0e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b0e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b0ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b0ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b0f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	891b      	ldrh	r3, [r3, #8]
 801b0fa:	3b14      	subs	r3, #20
 801b0fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b100:	e0e1      	b.n	801b2c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b102:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b104:	00db      	lsls	r3, r3, #3
 801b106:	b29b      	uxth	r3, r3
 801b108:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b10c:	4293      	cmp	r3, r2
 801b10e:	bf28      	it	cs
 801b110:	4613      	movcs	r3, r2
 801b112:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b114:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b118:	2114      	movs	r1, #20
 801b11a:	200e      	movs	r0, #14
 801b11c:	f7f5 fb34 	bl	8010788 <pbuf_alloc>
 801b120:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b124:	2b00      	cmp	r3, #0
 801b126:	f000 80d5 	beq.w	801b2d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b12c:	895b      	ldrh	r3, [r3, #10]
 801b12e:	2b13      	cmp	r3, #19
 801b130:	d806      	bhi.n	801b140 <ip4_frag+0xd0>
 801b132:	4b6c      	ldr	r3, [pc, #432]	; (801b2e4 <ip4_frag+0x274>)
 801b134:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b138:	496d      	ldr	r1, [pc, #436]	; (801b2f0 <ip4_frag+0x280>)
 801b13a:	486c      	ldr	r0, [pc, #432]	; (801b2ec <ip4_frag+0x27c>)
 801b13c:	f001 fe10 	bl	801cd60 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b142:	685b      	ldr	r3, [r3, #4]
 801b144:	2214      	movs	r2, #20
 801b146:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b148:	4618      	mov	r0, r3
 801b14a:	f001 fd98 	bl	801cc7e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b150:	685b      	ldr	r3, [r3, #4]
 801b152:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b154:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b156:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b15a:	e064      	b.n	801b226 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	895a      	ldrh	r2, [r3, #10]
 801b160:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b162:	1ad3      	subs	r3, r2, r3
 801b164:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	895b      	ldrh	r3, [r3, #10]
 801b16a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b16c:	429a      	cmp	r2, r3
 801b16e:	d906      	bls.n	801b17e <ip4_frag+0x10e>
 801b170:	4b5c      	ldr	r3, [pc, #368]	; (801b2e4 <ip4_frag+0x274>)
 801b172:	f240 322d 	movw	r2, #813	; 0x32d
 801b176:	495f      	ldr	r1, [pc, #380]	; (801b2f4 <ip4_frag+0x284>)
 801b178:	485c      	ldr	r0, [pc, #368]	; (801b2ec <ip4_frag+0x27c>)
 801b17a:	f001 fdf1 	bl	801cd60 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b17e:	8bfa      	ldrh	r2, [r7, #30]
 801b180:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b184:	4293      	cmp	r3, r2
 801b186:	bf28      	it	cs
 801b188:	4613      	movcs	r3, r2
 801b18a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b18e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b192:	2b00      	cmp	r3, #0
 801b194:	d105      	bne.n	801b1a2 <ip4_frag+0x132>
        poff = 0;
 801b196:	2300      	movs	r3, #0
 801b198:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	60fb      	str	r3, [r7, #12]
        continue;
 801b1a0:	e041      	b.n	801b226 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b1a2:	f7ff ff0d 	bl	801afc0 <ip_frag_alloc_pbuf_custom_ref>
 801b1a6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b1a8:	69bb      	ldr	r3, [r7, #24]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d103      	bne.n	801b1b6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b1ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b1b0:	f7f5 fdce 	bl	8010d50 <pbuf_free>
        goto memerr;
 801b1b4:	e08f      	b.n	801b2d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b1b6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b1bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b1be:	4413      	add	r3, r2
 801b1c0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b1c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b1c8:	9201      	str	r2, [sp, #4]
 801b1ca:	9300      	str	r3, [sp, #0]
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	2241      	movs	r2, #65	; 0x41
 801b1d0:	2000      	movs	r0, #0
 801b1d2:	f7f5 fc03 	bl	80109dc <pbuf_alloced_custom>
 801b1d6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b1d8:	697b      	ldr	r3, [r7, #20]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d106      	bne.n	801b1ec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b1de:	69b8      	ldr	r0, [r7, #24]
 801b1e0:	f7ff fef6 	bl	801afd0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b1e6:	f7f5 fdb3 	bl	8010d50 <pbuf_free>
        goto memerr;
 801b1ea:	e074      	b.n	801b2d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b1ec:	68f8      	ldr	r0, [r7, #12]
 801b1ee:	f7f5 fe55 	bl	8010e9c <pbuf_ref>
      pcr->original = p;
 801b1f2:	69bb      	ldr	r3, [r7, #24]
 801b1f4:	68fa      	ldr	r2, [r7, #12]
 801b1f6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b1f8:	69bb      	ldr	r3, [r7, #24]
 801b1fa:	4a3f      	ldr	r2, [pc, #252]	; (801b2f8 <ip4_frag+0x288>)
 801b1fc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b1fe:	6979      	ldr	r1, [r7, #20]
 801b200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b202:	f7f5 fe73 	bl	8010eec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b206:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b20a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b20e:	1ad3      	subs	r3, r2, r3
 801b210:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b214:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d004      	beq.n	801b226 <ip4_frag+0x1b6>
        poff = 0;
 801b21c:	2300      	movs	r3, #0
 801b21e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b226:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d196      	bne.n	801b15c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b22e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b230:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b234:	4413      	add	r3, r2
 801b236:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b238:	68bb      	ldr	r3, [r7, #8]
 801b23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b23c:	f1a3 0213 	sub.w	r2, r3, #19
 801b240:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b244:	429a      	cmp	r2, r3
 801b246:	bfcc      	ite	gt
 801b248:	2301      	movgt	r3, #1
 801b24a:	2300      	movle	r3, #0
 801b24c:	b2db      	uxtb	r3, r3
 801b24e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b250:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b258:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b25a:	6a3b      	ldr	r3, [r7, #32]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d002      	beq.n	801b266 <ip4_frag+0x1f6>
 801b260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b262:	2b00      	cmp	r3, #0
 801b264:	d003      	beq.n	801b26e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b266:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b268:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b26c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b26e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b270:	4618      	mov	r0, r3
 801b272:	f7f4 f9b5 	bl	800f5e0 <lwip_htons>
 801b276:	4603      	mov	r3, r0
 801b278:	461a      	mov	r2, r3
 801b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b27c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b27e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b280:	3314      	adds	r3, #20
 801b282:	b29b      	uxth	r3, r3
 801b284:	4618      	mov	r0, r3
 801b286:	f7f4 f9ab 	bl	800f5e0 <lwip_htons>
 801b28a:	4603      	mov	r3, r0
 801b28c:	461a      	mov	r2, r3
 801b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b290:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b294:	2200      	movs	r2, #0
 801b296:	729a      	strb	r2, [r3, #10]
 801b298:	2200      	movs	r2, #0
 801b29a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b29c:	68bb      	ldr	r3, [r7, #8]
 801b29e:	695b      	ldr	r3, [r3, #20]
 801b2a0:	687a      	ldr	r2, [r7, #4]
 801b2a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b2a4:	68b8      	ldr	r0, [r7, #8]
 801b2a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b2a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b2aa:	f7f5 fd51 	bl	8010d50 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b2ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b2b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b2b4:	1ad3      	subs	r3, r2, r3
 801b2b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b2ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b2be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b2c0:	4413      	add	r3, r2
 801b2c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b2c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	f47f af19 	bne.w	801b102 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b2d0:	2300      	movs	r3, #0
 801b2d2:	e002      	b.n	801b2da <ip4_frag+0x26a>
      goto memerr;
 801b2d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b2d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b2da:	4618      	mov	r0, r3
 801b2dc:	3748      	adds	r7, #72	; 0x48
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	bd80      	pop	{r7, pc}
 801b2e2:	bf00      	nop
 801b2e4:	08020ca8 	.word	0x08020ca8
 801b2e8:	08020e84 	.word	0x08020e84
 801b2ec:	08020cf0 	.word	0x08020cf0
 801b2f0:	08020ea0 	.word	0x08020ea0
 801b2f4:	08020ec0 	.word	0x08020ec0
 801b2f8:	0801b009 	.word	0x0801b009

0801b2fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b086      	sub	sp, #24
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
 801b304:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b306:	230e      	movs	r3, #14
 801b308:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	895b      	ldrh	r3, [r3, #10]
 801b30e:	2b0e      	cmp	r3, #14
 801b310:	d96e      	bls.n	801b3f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	7bdb      	ldrb	r3, [r3, #15]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d106      	bne.n	801b328 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b31a:	683b      	ldr	r3, [r7, #0]
 801b31c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b320:	3301      	adds	r3, #1
 801b322:	b2da      	uxtb	r2, r3
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	685b      	ldr	r3, [r3, #4]
 801b32c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b32e:	693b      	ldr	r3, [r7, #16]
 801b330:	7b1a      	ldrb	r2, [r3, #12]
 801b332:	7b5b      	ldrb	r3, [r3, #13]
 801b334:	021b      	lsls	r3, r3, #8
 801b336:	4313      	orrs	r3, r2
 801b338:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b33a:	693b      	ldr	r3, [r7, #16]
 801b33c:	781b      	ldrb	r3, [r3, #0]
 801b33e:	f003 0301 	and.w	r3, r3, #1
 801b342:	2b00      	cmp	r3, #0
 801b344:	d023      	beq.n	801b38e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b346:	693b      	ldr	r3, [r7, #16]
 801b348:	781b      	ldrb	r3, [r3, #0]
 801b34a:	2b01      	cmp	r3, #1
 801b34c:	d10f      	bne.n	801b36e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b34e:	693b      	ldr	r3, [r7, #16]
 801b350:	785b      	ldrb	r3, [r3, #1]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d11b      	bne.n	801b38e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b356:	693b      	ldr	r3, [r7, #16]
 801b358:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b35a:	2b5e      	cmp	r3, #94	; 0x5e
 801b35c:	d117      	bne.n	801b38e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	7b5b      	ldrb	r3, [r3, #13]
 801b362:	f043 0310 	orr.w	r3, r3, #16
 801b366:	b2da      	uxtb	r2, r3
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	735a      	strb	r2, [r3, #13]
 801b36c:	e00f      	b.n	801b38e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b36e:	693b      	ldr	r3, [r7, #16]
 801b370:	2206      	movs	r2, #6
 801b372:	4928      	ldr	r1, [pc, #160]	; (801b414 <ethernet_input+0x118>)
 801b374:	4618      	mov	r0, r3
 801b376:	f001 fc74 	bl	801cc62 <memcmp>
 801b37a:	4603      	mov	r3, r0
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d106      	bne.n	801b38e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	7b5b      	ldrb	r3, [r3, #13]
 801b384:	f043 0308 	orr.w	r3, r3, #8
 801b388:	b2da      	uxtb	r2, r3
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b38e:	89fb      	ldrh	r3, [r7, #14]
 801b390:	2b08      	cmp	r3, #8
 801b392:	d003      	beq.n	801b39c <ethernet_input+0xa0>
 801b394:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b398:	d014      	beq.n	801b3c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b39a:	e032      	b.n	801b402 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b39c:	683b      	ldr	r3, [r7, #0]
 801b39e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b3a2:	f003 0308 	and.w	r3, r3, #8
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d024      	beq.n	801b3f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b3aa:	8afb      	ldrh	r3, [r7, #22]
 801b3ac:	4619      	mov	r1, r3
 801b3ae:	6878      	ldr	r0, [r7, #4]
 801b3b0:	f7f5 fc48 	bl	8010c44 <pbuf_remove_header>
 801b3b4:	4603      	mov	r3, r0
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d11e      	bne.n	801b3f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b3ba:	6839      	ldr	r1, [r7, #0]
 801b3bc:	6878      	ldr	r0, [r7, #4]
 801b3be:	f7fe ff09 	bl	801a1d4 <ip4_input>
      break;
 801b3c2:	e013      	b.n	801b3ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b3c4:	683b      	ldr	r3, [r7, #0]
 801b3c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b3ca:	f003 0308 	and.w	r3, r3, #8
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d014      	beq.n	801b3fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b3d2:	8afb      	ldrh	r3, [r7, #22]
 801b3d4:	4619      	mov	r1, r3
 801b3d6:	6878      	ldr	r0, [r7, #4]
 801b3d8:	f7f5 fc34 	bl	8010c44 <pbuf_remove_header>
 801b3dc:	4603      	mov	r3, r0
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d10e      	bne.n	801b400 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b3e2:	6839      	ldr	r1, [r7, #0]
 801b3e4:	6878      	ldr	r0, [r7, #4]
 801b3e6:	f7fe f8a5 	bl	8019534 <etharp_input>
      break;
 801b3ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	e00c      	b.n	801b40a <ethernet_input+0x10e>
    goto free_and_return;
 801b3f0:	bf00      	nop
 801b3f2:	e006      	b.n	801b402 <ethernet_input+0x106>
        goto free_and_return;
 801b3f4:	bf00      	nop
 801b3f6:	e004      	b.n	801b402 <ethernet_input+0x106>
        goto free_and_return;
 801b3f8:	bf00      	nop
 801b3fa:	e002      	b.n	801b402 <ethernet_input+0x106>
        goto free_and_return;
 801b3fc:	bf00      	nop
 801b3fe:	e000      	b.n	801b402 <ethernet_input+0x106>
        goto free_and_return;
 801b400:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b402:	6878      	ldr	r0, [r7, #4]
 801b404:	f7f5 fca4 	bl	8010d50 <pbuf_free>
  return ERR_OK;
 801b408:	2300      	movs	r3, #0
}
 801b40a:	4618      	mov	r0, r3
 801b40c:	3718      	adds	r7, #24
 801b40e:	46bd      	mov	sp, r7
 801b410:	bd80      	pop	{r7, pc}
 801b412:	bf00      	nop
 801b414:	080211f0 	.word	0x080211f0

0801b418 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b418:	b580      	push	{r7, lr}
 801b41a:	b086      	sub	sp, #24
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	60f8      	str	r0, [r7, #12]
 801b420:	60b9      	str	r1, [r7, #8]
 801b422:	607a      	str	r2, [r7, #4]
 801b424:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b426:	8c3b      	ldrh	r3, [r7, #32]
 801b428:	4618      	mov	r0, r3
 801b42a:	f7f4 f8d9 	bl	800f5e0 <lwip_htons>
 801b42e:	4603      	mov	r3, r0
 801b430:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b432:	210e      	movs	r1, #14
 801b434:	68b8      	ldr	r0, [r7, #8]
 801b436:	f7f5 fbf5 	bl	8010c24 <pbuf_add_header>
 801b43a:	4603      	mov	r3, r0
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d125      	bne.n	801b48c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	685b      	ldr	r3, [r3, #4]
 801b444:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b446:	693b      	ldr	r3, [r7, #16]
 801b448:	8afa      	ldrh	r2, [r7, #22]
 801b44a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b44c:	693b      	ldr	r3, [r7, #16]
 801b44e:	2206      	movs	r2, #6
 801b450:	6839      	ldr	r1, [r7, #0]
 801b452:	4618      	mov	r0, r3
 801b454:	f001 fc13 	bl	801cc7e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b458:	693b      	ldr	r3, [r7, #16]
 801b45a:	3306      	adds	r3, #6
 801b45c:	2206      	movs	r2, #6
 801b45e:	6879      	ldr	r1, [r7, #4]
 801b460:	4618      	mov	r0, r3
 801b462:	f001 fc0c 	bl	801cc7e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b466:	68fb      	ldr	r3, [r7, #12]
 801b468:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b46c:	2b06      	cmp	r3, #6
 801b46e:	d006      	beq.n	801b47e <ethernet_output+0x66>
 801b470:	4b0a      	ldr	r3, [pc, #40]	; (801b49c <ethernet_output+0x84>)
 801b472:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b476:	490a      	ldr	r1, [pc, #40]	; (801b4a0 <ethernet_output+0x88>)
 801b478:	480a      	ldr	r0, [pc, #40]	; (801b4a4 <ethernet_output+0x8c>)
 801b47a:	f001 fc71 	bl	801cd60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	699b      	ldr	r3, [r3, #24]
 801b482:	68b9      	ldr	r1, [r7, #8]
 801b484:	68f8      	ldr	r0, [r7, #12]
 801b486:	4798      	blx	r3
 801b488:	4603      	mov	r3, r0
 801b48a:	e002      	b.n	801b492 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b48c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b48e:	f06f 0301 	mvn.w	r3, #1
}
 801b492:	4618      	mov	r0, r3
 801b494:	3718      	adds	r7, #24
 801b496:	46bd      	mov	sp, r7
 801b498:	bd80      	pop	{r7, pc}
 801b49a:	bf00      	nop
 801b49c:	08020ed0 	.word	0x08020ed0
 801b4a0:	08020f08 	.word	0x08020f08
 801b4a4:	08020f3c 	.word	0x08020f3c

0801b4a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b4a8:	b580      	push	{r7, lr}
 801b4aa:	b082      	sub	sp, #8
 801b4ac:	af00      	add	r7, sp, #0
 801b4ae:	6078      	str	r0, [r7, #4]
 801b4b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	2200      	movs	r2, #0
 801b4b6:	2104      	movs	r1, #4
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	f7f0 fb8b 	bl	800bbd4 <osMessageQueueNew>
 801b4be:	4602      	mov	r2, r0
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d102      	bne.n	801b4d2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801b4cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b4d0:	e000      	b.n	801b4d4 <sys_mbox_new+0x2c>

  return ERR_OK;
 801b4d2:	2300      	movs	r3, #0
}
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	3708      	adds	r7, #8
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	bd80      	pop	{r7, pc}

0801b4dc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b084      	sub	sp, #16
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
 801b4e4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	6818      	ldr	r0, [r3, #0]
 801b4ea:	4639      	mov	r1, r7
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	f7f0 fbe4 	bl	800bcbc <osMessageQueuePut>
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d102      	bne.n	801b500 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	73fb      	strb	r3, [r7, #15]
 801b4fe:	e001      	b.n	801b504 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b500:	23ff      	movs	r3, #255	; 0xff
 801b502:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b508:	4618      	mov	r0, r3
 801b50a:	3710      	adds	r7, #16
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bd80      	pop	{r7, pc}

0801b510 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b510:	b580      	push	{r7, lr}
 801b512:	b086      	sub	sp, #24
 801b514:	af00      	add	r7, sp, #0
 801b516:	60f8      	str	r0, [r7, #12]
 801b518:	60b9      	str	r1, [r7, #8]
 801b51a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801b51c:	f7ef ffaa 	bl	800b474 <osKernelGetTickCount>
 801b520:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	2b00      	cmp	r3, #0
 801b526:	d013      	beq.n	801b550 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	6818      	ldr	r0, [r3, #0]
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	2200      	movs	r2, #0
 801b530:	68b9      	ldr	r1, [r7, #8]
 801b532:	f7f0 fc23 	bl	800bd7c <osMessageQueueGet>
 801b536:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801b538:	693b      	ldr	r3, [r7, #16]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d105      	bne.n	801b54a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801b53e:	f7ef ff99 	bl	800b474 <osKernelGetTickCount>
 801b542:	4602      	mov	r2, r0
 801b544:	697b      	ldr	r3, [r7, #20]
 801b546:	1ad3      	subs	r3, r2, r3
 801b548:	e00f      	b.n	801b56a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b54a:	f04f 33ff 	mov.w	r3, #4294967295
 801b54e:	e00c      	b.n	801b56a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	6818      	ldr	r0, [r3, #0]
 801b554:	f04f 33ff 	mov.w	r3, #4294967295
 801b558:	2200      	movs	r2, #0
 801b55a:	68b9      	ldr	r1, [r7, #8]
 801b55c:	f7f0 fc0e 	bl	800bd7c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801b560:	f7ef ff88 	bl	800b474 <osKernelGetTickCount>
 801b564:	4602      	mov	r2, r0
 801b566:	697b      	ldr	r3, [r7, #20]
 801b568:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b56a:	4618      	mov	r0, r3
 801b56c:	3718      	adds	r7, #24
 801b56e:	46bd      	mov	sp, r7
 801b570:	bd80      	pop	{r7, pc}

0801b572 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b572:	b480      	push	{r7}
 801b574:	b083      	sub	sp, #12
 801b576:	af00      	add	r7, sp, #0
 801b578:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d101      	bne.n	801b586 <sys_mbox_valid+0x14>
    return 0;
 801b582:	2300      	movs	r3, #0
 801b584:	e000      	b.n	801b588 <sys_mbox_valid+0x16>
  else
    return 1;
 801b586:	2301      	movs	r3, #1
}
 801b588:	4618      	mov	r0, r3
 801b58a:	370c      	adds	r7, #12
 801b58c:	46bd      	mov	sp, r7
 801b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b592:	4770      	bx	lr

0801b594 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b594:	b580      	push	{r7, lr}
 801b596:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801b598:	2000      	movs	r0, #0
 801b59a:	f7f0 f8ed 	bl	800b778 <osMutexNew>
 801b59e:	4603      	mov	r3, r0
 801b5a0:	4a01      	ldr	r2, [pc, #4]	; (801b5a8 <sys_init+0x14>)
 801b5a2:	6013      	str	r3, [r2, #0]
#endif
}
 801b5a4:	bf00      	nop
 801b5a6:	bd80      	pop	{r7, pc}
 801b5a8:	20013a3c 	.word	0x20013a3c

0801b5ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b5ac:	b580      	push	{r7, lr}
 801b5ae:	b082      	sub	sp, #8
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801b5b4:	2000      	movs	r0, #0
 801b5b6:	f7f0 f8df 	bl	800b778 <osMutexNew>
 801b5ba:	4602      	mov	r2, r0
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d102      	bne.n	801b5ce <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b5c8:	f04f 33ff 	mov.w	r3, #4294967295
 801b5cc:	e000      	b.n	801b5d0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b5ce:	2300      	movs	r3, #0
}
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	3708      	adds	r7, #8
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	bd80      	pop	{r7, pc}

0801b5d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b5d8:	b580      	push	{r7, lr}
 801b5da:	b082      	sub	sp, #8
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	f04f 31ff 	mov.w	r1, #4294967295
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	f7f0 f94b 	bl	800b884 <osMutexAcquire>
#endif
}
 801b5ee:	bf00      	nop
 801b5f0:	3708      	adds	r7, #8
 801b5f2:	46bd      	mov	sp, r7
 801b5f4:	bd80      	pop	{r7, pc}

0801b5f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b5f6:	b580      	push	{r7, lr}
 801b5f8:	b082      	sub	sp, #8
 801b5fa:	af00      	add	r7, sp, #0
 801b5fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	4618      	mov	r0, r3
 801b604:	f7f0 f989 	bl	800b91a <osMutexRelease>
}
 801b608:	bf00      	nop
 801b60a:	3708      	adds	r7, #8
 801b60c:	46bd      	mov	sp, r7
 801b60e:	bd80      	pop	{r7, pc}

0801b610 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b610:	b580      	push	{r7, lr}
 801b612:	b08e      	sub	sp, #56	; 0x38
 801b614:	af00      	add	r7, sp, #0
 801b616:	60f8      	str	r0, [r7, #12]
 801b618:	60b9      	str	r1, [r7, #8]
 801b61a:	607a      	str	r2, [r7, #4]
 801b61c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b61e:	f107 0314 	add.w	r3, r7, #20
 801b622:	2224      	movs	r2, #36	; 0x24
 801b624:	2100      	movs	r1, #0
 801b626:	4618      	mov	r0, r3
 801b628:	f001 fb37 	bl	801cc9a <memset>
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	617b      	str	r3, [r7, #20]
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	62bb      	str	r3, [r7, #40]	; 0x28
 801b634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b636:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b638:	f107 0314 	add.w	r3, r7, #20
 801b63c:	461a      	mov	r2, r3
 801b63e:	6879      	ldr	r1, [r7, #4]
 801b640:	68b8      	ldr	r0, [r7, #8]
 801b642:	f7ef ff2c 	bl	800b49e <osThreadNew>
 801b646:	4603      	mov	r3, r0
#endif
}
 801b648:	4618      	mov	r0, r3
 801b64a:	3738      	adds	r7, #56	; 0x38
 801b64c:	46bd      	mov	sp, r7
 801b64e:	bd80      	pop	{r7, pc}

0801b650 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b650:	b580      	push	{r7, lr}
 801b652:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b654:	4b04      	ldr	r3, [pc, #16]	; (801b668 <sys_arch_protect+0x18>)
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	f04f 31ff 	mov.w	r1, #4294967295
 801b65c:	4618      	mov	r0, r3
 801b65e:	f7f0 f911 	bl	800b884 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b662:	2301      	movs	r3, #1
}
 801b664:	4618      	mov	r0, r3
 801b666:	bd80      	pop	{r7, pc}
 801b668:	20013a3c 	.word	0x20013a3c

0801b66c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b082      	sub	sp, #8
 801b670:	af00      	add	r7, sp, #0
 801b672:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b674:	4b04      	ldr	r3, [pc, #16]	; (801b688 <sys_arch_unprotect+0x1c>)
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	4618      	mov	r0, r3
 801b67a:	f7f0 f94e 	bl	800b91a <osMutexRelease>
}
 801b67e:	bf00      	nop
 801b680:	3708      	adds	r7, #8
 801b682:	46bd      	mov	sp, r7
 801b684:	bd80      	pop	{r7, pc}
 801b686:	bf00      	nop
 801b688:	20013a3c 	.word	0x20013a3c

0801b68c <master_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void master_crc16(modbus_master *master, uint8_t *buffer)
{
 801b68c:	b480      	push	{r7}
 801b68e:	b083      	sub	sp, #12
 801b690:	af00      	add	r7, sp, #0
 801b692:	6078      	str	r0, [r7, #4]
 801b694:	6039      	str	r1, [r7, #0]
    master->crc_hi = 0xFF;
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	22ff      	movs	r2, #255	; 0xff
 801b69a:	719a      	strb	r2, [r3, #6]
    master->crc_lo = 0xFF;
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	22ff      	movs	r2, #255	; 0xff
 801b6a0:	71da      	strb	r2, [r3, #7]
    while (master->buff_len--)
 801b6a2:	e01c      	b.n	801b6de <master_crc16+0x52>
    {
        master->buff_index = master->crc_hi ^ *buffer++;
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	799a      	ldrb	r2, [r3, #6]
 801b6a8:	683b      	ldr	r3, [r7, #0]
 801b6aa:	1c59      	adds	r1, r3, #1
 801b6ac:	6039      	str	r1, [r7, #0]
 801b6ae:	781b      	ldrb	r3, [r3, #0]
 801b6b0:	4053      	eors	r3, r2
 801b6b2:	b2db      	uxtb	r3, r3
 801b6b4:	b29a      	uxth	r2, r3
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	815a      	strh	r2, [r3, #10]
        master->crc_hi = master->crc_lo ^ crc_hi[master->buff_index];
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	79da      	ldrb	r2, [r3, #7]
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	895b      	ldrh	r3, [r3, #10]
 801b6c2:	4619      	mov	r1, r3
 801b6c4:	4b0d      	ldr	r3, [pc, #52]	; (801b6fc <master_crc16+0x70>)
 801b6c6:	5c5b      	ldrb	r3, [r3, r1]
 801b6c8:	4053      	eors	r3, r2
 801b6ca:	b2da      	uxtb	r2, r3
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	719a      	strb	r2, [r3, #6]
        master->crc_lo = crc_lo[master->buff_index];
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	895b      	ldrh	r3, [r3, #10]
 801b6d4:	461a      	mov	r2, r3
 801b6d6:	4b0a      	ldr	r3, [pc, #40]	; (801b700 <master_crc16+0x74>)
 801b6d8:	5c9a      	ldrb	r2, [r3, r2]
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	71da      	strb	r2, [r3, #7]
    while (master->buff_len--)
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	891b      	ldrh	r3, [r3, #8]
 801b6e2:	1e5a      	subs	r2, r3, #1
 801b6e4:	b291      	uxth	r1, r2
 801b6e6:	687a      	ldr	r2, [r7, #4]
 801b6e8:	8111      	strh	r1, [r2, #8]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d1da      	bne.n	801b6a4 <master_crc16+0x18>
    }
}
 801b6ee:	bf00      	nop
 801b6f0:	bf00      	nop
 801b6f2:	370c      	adds	r7, #12
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fa:	4770      	bx	lr
 801b6fc:	08021200 	.word	0x08021200
 801b700:	08021300 	.word	0x08021300

0801b704 <master_validate_reply>:

static osStatus_t master_validate_reply(modbus_master *master)
{
 801b704:	b580      	push	{r7, lr}
 801b706:	b082      	sub	sp, #8
 801b708:	af00      	add	r7, sp, #0
 801b70a:	6078      	str	r0, [r7, #4]
    if (master->rx_len < 5)
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801b712:	2b04      	cmp	r3, #4
 801b714:	d802      	bhi.n	801b71c <master_validate_reply+0x18>
    {
        return osError;
 801b716:	f04f 33ff 	mov.w	r3, #4294967295
 801b71a:	e035      	b.n	801b788 <master_validate_reply+0x84>
    }
    master->buff_len = master->rx_len - 2;
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801b722:	3b02      	subs	r3, #2
 801b724:	b29a      	uxth	r2, r3
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	811a      	strh	r2, [r3, #8]
    master_crc16(master, master->rx_buf);
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	330c      	adds	r3, #12
 801b72e:	4619      	mov	r1, r3
 801b730:	6878      	ldr	r0, [r7, #4]
 801b732:	f7ff ffab 	bl	801b68c <master_crc16>
    if ((master->crc_hi != master->rx_buf[master->rx_len - 2]) || (master->crc_lo != master->rx_buf[master->rx_len - 1]))
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	799a      	ldrb	r2, [r3, #6]
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801b740:	3b02      	subs	r3, #2
 801b742:	6879      	ldr	r1, [r7, #4]
 801b744:	440b      	add	r3, r1
 801b746:	7b1b      	ldrb	r3, [r3, #12]
 801b748:	429a      	cmp	r2, r3
 801b74a:	d10a      	bne.n	801b762 <master_validate_reply+0x5e>
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	79da      	ldrb	r2, [r3, #7]
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801b756:	3b01      	subs	r3, #1
 801b758:	6879      	ldr	r1, [r7, #4]
 801b75a:	440b      	add	r3, r1
 801b75c:	7b1b      	ldrb	r3, [r3, #12]
 801b75e:	429a      	cmp	r2, r3
 801b760:	d002      	beq.n	801b768 <master_validate_reply+0x64>
    {
        return osError;
 801b762:	f04f 33ff 	mov.w	r3, #4294967295
 801b766:	e00f      	b.n	801b788 <master_validate_reply+0x84>
    }
    if ((master->rx_buf[0] != master->slave_id) || (master->rx_buf[1] != master->func_code))
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	7b1a      	ldrb	r2, [r3, #12]
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	791b      	ldrb	r3, [r3, #4]
 801b770:	429a      	cmp	r2, r3
 801b772:	d105      	bne.n	801b780 <master_validate_reply+0x7c>
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	7b5a      	ldrb	r2, [r3, #13]
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	795b      	ldrb	r3, [r3, #5]
 801b77c:	429a      	cmp	r2, r3
 801b77e:	d002      	beq.n	801b786 <master_validate_reply+0x82>
    {
        return osError;
 801b780:	f04f 33ff 	mov.w	r3, #4294967295
 801b784:	e000      	b.n	801b788 <master_validate_reply+0x84>
    }
    return osOK;
 801b786:	2300      	movs	r3, #0
}
 801b788:	4618      	mov	r0, r3
 801b78a:	3708      	adds	r7, #8
 801b78c:	46bd      	mov	sp, r7
 801b78e:	bd80      	pop	{r7, pc}

0801b790 <master_request>:

static osStatus_t master_request(modbus_master *master, uint16_t timeout)
{
 801b790:	b580      	push	{r7, lr}
 801b792:	b082      	sub	sp, #8
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]
 801b798:	460b      	mov	r3, r1
 801b79a:	807b      	strh	r3, [r7, #2]
    master->buff_len = master->tx_len;
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	811a      	strh	r2, [r3, #8]
    master_crc16(master, master->tx_buf);
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	f203 230e 	addw	r3, r3, #526	; 0x20e
 801b7ac:	4619      	mov	r1, r3
 801b7ae:	6878      	ldr	r0, [r7, #4]
 801b7b0:	f7ff ff6c 	bl	801b68c <master_crc16>
    master->tx_buf[master->tx_len++] = master->crc_hi;
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801b7ba:	1c5a      	adds	r2, r3, #1
 801b7bc:	b291      	uxth	r1, r2
 801b7be:	687a      	ldr	r2, [r7, #4]
 801b7c0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	799a      	ldrb	r2, [r3, #6]
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	440b      	add	r3, r1
 801b7ce:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = master->crc_lo;
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801b7d8:	1c5a      	adds	r2, r3, #1
 801b7da:	b291      	uxth	r1, r2
 801b7dc:	687a      	ldr	r2, [r7, #4]
 801b7de:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801b7e2:	4619      	mov	r1, r3
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	79da      	ldrb	r2, [r3, #7]
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	440b      	add	r3, r1
 801b7ec:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e

    osSemaphoreAcquire(master->idle_sem, 0);
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801b7f6:	2100      	movs	r1, #0
 801b7f8:	4618      	mov	r0, r3
 801b7fa:	f7f0 f955 	bl	800baa8 <osSemaphoreAcquire>
    HAL_UART_Receive_DMA(master->uart_port->uart, master->rx_buf, MB_MASTER_BUFFER_LENGTH);
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	681b      	ldr	r3, [r3, #0]
 801b802:	6818      	ldr	r0, [r3, #0]
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	330c      	adds	r3, #12
 801b808:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b80c:	4619      	mov	r1, r3
 801b80e:	f7ee f827 	bl	8009860 <HAL_UART_Receive_DMA>

    master_set_tx_rx(master, tx);
 801b812:	2101      	movs	r1, #1
 801b814:	6878      	ldr	r0, [r7, #4]
 801b816:	f000 f8b9 	bl	801b98c <master_set_tx_rx>
    HAL_UART_Transmit_DMA(master->uart_port->uart, master->tx_buf, master->tx_len);
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	6818      	ldr	r0, [r3, #0]
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	f203 210e 	addw	r1, r3, #526	; 0x20e
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801b82c:	461a      	mov	r2, r3
 801b82e:	f7ed ff99 	bl	8009764 <HAL_UART_Transmit_DMA>
    while (osSemaphoreAcquire(master->idle_sem, timeout) == osOK)
 801b832:	e032      	b.n	801b89a <master_request+0x10a>
    {
        if (master->idle_timer_flag == 0)
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d107      	bne.n	801b84e <master_request+0xbe>
        {
            osTimerStart(master->idle_timer, 2);
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 801b844:	2102      	movs	r1, #2
 801b846:	4618      	mov	r0, r3
 801b848:	f7ef ff68 	bl	800b71c <osTimerStart>
 801b84c:	e025      	b.n	801b89a <master_request+0x10a>
        }
        else if (master->idle_timer_flag == 1)
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801b854:	2b01      	cmp	r3, #1
 801b856:	d120      	bne.n	801b89a <master_request+0x10a>
        {
            HAL_UART_DMAStop(master->uart_port->uart);
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	4618      	mov	r0, r3
 801b860:	f7ee f82e 	bl	80098c0 <HAL_UART_DMAStop>
            if (master_validate_reply(master) == osOK)
 801b864:	6878      	ldr	r0, [r7, #4]
 801b866:	f7ff ff4d 	bl	801b704 <master_validate_reply>
 801b86a:	4603      	mov	r3, r0
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d105      	bne.n	801b87c <master_request+0xec>
            {
                master->com_status = osOK;
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	2200      	movs	r2, #0
 801b874:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
                return osOK;
 801b878:	2300      	movs	r3, #0
 801b87a:	e02d      	b.n	801b8d8 <master_request+0x148>
            }
            master->com_status = osErrorParameter;
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	f06f 0203 	mvn.w	r2, #3
 801b882:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
            master->com_err_cnt++;
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 801b88c:	1c5a      	adds	r2, r3, #1
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            return osError;
 801b894:	f04f 33ff 	mov.w	r3, #4294967295
 801b898:	e01e      	b.n	801b8d8 <master_request+0x148>
    while (osSemaphoreAcquire(master->idle_sem, timeout) == osOK)
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801b8a0:	887a      	ldrh	r2, [r7, #2]
 801b8a2:	4611      	mov	r1, r2
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	f7f0 f8ff 	bl	800baa8 <osSemaphoreAcquire>
 801b8aa:	4603      	mov	r3, r0
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d0c1      	beq.n	801b834 <master_request+0xa4>
        }
    }
    HAL_UART_DMAStop(master->uart_port->uart);
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	f7ee f802 	bl	80098c0 <HAL_UART_DMAStop>
    master->com_err_cnt++;
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 801b8c2:	1c5a      	adds	r2, r3, #1
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    master->com_status = osErrorTimeout;
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	f06f 0201 	mvn.w	r2, #1
 801b8d0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    return osError;
 801b8d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b8d8:	4618      	mov	r0, r3
 801b8da:	3708      	adds	r7, #8
 801b8dc:	46bd      	mov	sp, r7
 801b8de:	bd80      	pop	{r7, pc}

0801b8e0 <ostimer_callback>:

static void ostimer_callback(void *args)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b084      	sub	sp, #16
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	6078      	str	r0, [r7, #4]
    modbus_master *master = args;
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	60fb      	str	r3, [r7, #12]
    if (master->rx_len == (MB_MASTER_BUFFER_LENGTH - master->uart_port->uart->hdmarx->Instance->NDTR))
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801b8f2:	461a      	mov	r2, r3
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	685b      	ldr	r3, [r3, #4]
 801b900:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801b904:	429a      	cmp	r2, r3
 801b906:	d109      	bne.n	801b91c <ostimer_callback+0x3c>
    {
        master->idle_timer_flag = 1;
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	2201      	movs	r2, #1
 801b90c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(master->idle_sem);
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801b916:	4618      	mov	r0, r3
 801b918:	f7f0 f918 	bl	800bb4c <osSemaphoreRelease>
    }
}
 801b91c:	bf00      	nop
 801b91e:	3710      	adds	r7, #16
 801b920:	46bd      	mov	sp, r7
 801b922:	bd80      	pop	{r7, pc}

0801b924 <master_init>:

void master_init(modbus_master *master, modbus_port *port, uint16_t slave_id)
{
 801b924:	b580      	push	{r7, lr}
 801b926:	b084      	sub	sp, #16
 801b928:	af00      	add	r7, sp, #0
 801b92a:	60f8      	str	r0, [r7, #12]
 801b92c:	60b9      	str	r1, [r7, #8]
 801b92e:	4613      	mov	r3, r2
 801b930:	80fb      	strh	r3, [r7, #6]
    master->idle_sem = osSemaphoreNew(1, 0, NULL);
 801b932:	2200      	movs	r2, #0
 801b934:	2100      	movs	r1, #0
 801b936:	2001      	movs	r0, #1
 801b938:	f7f0 f82c 	bl	800b994 <osSemaphoreNew>
 801b93c:	4602      	mov	r2, r0
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    master->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)master, NULL);
 801b944:	2300      	movs	r3, #0
 801b946:	68fa      	ldr	r2, [r7, #12]
 801b948:	2100      	movs	r1, #0
 801b94a:	480f      	ldr	r0, [pc, #60]	; (801b988 <master_init+0x64>)
 801b94c:	f7ef fe6a 	bl	800b624 <osTimerNew>
 801b950:	4602      	mov	r2, r0
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    master->uart_port = port;
 801b958:	68fb      	ldr	r3, [r7, #12]
 801b95a:	68ba      	ldr	r2, [r7, #8]
 801b95c:	601a      	str	r2, [r3, #0]
    master->slave_id = slave_id;
 801b95e:	88fb      	ldrh	r3, [r7, #6]
 801b960:	b2da      	uxtb	r2, r3
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	711a      	strb	r2, [r3, #4]
    __HAL_UART_ENABLE_IT(master->uart_port->uart, UART_IT_IDLE);
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	68da      	ldr	r2, [r3, #12]
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	f042 0210 	orr.w	r2, r2, #16
 801b97c:	60da      	str	r2, [r3, #12]
}
 801b97e:	bf00      	nop
 801b980:	3710      	adds	r7, #16
 801b982:	46bd      	mov	sp, r7
 801b984:	bd80      	pop	{r7, pc}
 801b986:	bf00      	nop
 801b988:	0801b8e1 	.word	0x0801b8e1

0801b98c <master_set_tx_rx>:

void master_set_tx_rx(modbus_master *master, uart_tx_rx_enum dir)
{
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b082      	sub	sp, #8
 801b990:	af00      	add	r7, sp, #0
 801b992:	6078      	str	r0, [r7, #4]
 801b994:	460b      	mov	r3, r1
 801b996:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(master->uart_port->gpio_port, master->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	6858      	ldr	r0, [r3, #4]
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	8919      	ldrh	r1, [r3, #8]
 801b9a4:	78fb      	ldrb	r3, [r7, #3]
 801b9a6:	2b01      	cmp	r3, #1
 801b9a8:	bf0c      	ite	eq
 801b9aa:	2301      	moveq	r3, #1
 801b9ac:	2300      	movne	r3, #0
 801b9ae:	b2db      	uxtb	r3, r3
 801b9b0:	461a      	mov	r2, r3
 801b9b2:	f7ea fd4b 	bl	800644c <HAL_GPIO_WritePin>
}
 801b9b6:	bf00      	nop
 801b9b8:	3708      	adds	r7, #8
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	bd80      	pop	{r7, pc}

0801b9be <master_uart_idle>:

void master_uart_idle(modbus_master *master)
{
 801b9be:	b580      	push	{r7, lr}
 801b9c0:	b084      	sub	sp, #16
 801b9c2:	af00      	add	r7, sp, #0
 801b9c4:	6078      	str	r0, [r7, #4]
    if (((READ_REG(master->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(master->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	f003 0310 	and.w	r3, r3, #16
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d02e      	beq.n	801ba36 <master_uart_idle+0x78>
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	68db      	ldr	r3, [r3, #12]
 801b9e2:	f003 0310 	and.w	r3, r3, #16
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d025      	beq.n	801ba36 <master_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(master->uart_port->uart);
 801b9ea:	2300      	movs	r3, #0
 801b9ec:	60fb      	str	r3, [r7, #12]
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	60fb      	str	r3, [r7, #12]
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	685b      	ldr	r3, [r3, #4]
 801ba04:	60fb      	str	r3, [r7, #12]
 801ba06:	68fb      	ldr	r3, [r7, #12]
        master->rx_len = MB_MASTER_BUFFER_LENGTH - master->uart_port->uart->hdmarx->Instance->NDTR;
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	685b      	ldr	r3, [r3, #4]
 801ba14:	b29b      	uxth	r3, r3
 801ba16:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801ba1a:	b29a      	uxth	r2, r3
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
        master->idle_timer_flag = 0;
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	2200      	movs	r2, #0
 801ba26:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(master->idle_sem);
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801ba30:	4618      	mov	r0, r3
 801ba32:	f7f0 f88b 	bl	800bb4c <osSemaphoreRelease>
    }
}
 801ba36:	bf00      	nop
 801ba38:	3710      	adds	r7, #16
 801ba3a:	46bd      	mov	sp, r7
 801ba3c:	bd80      	pop	{r7, pc}

0801ba3e <master_compose_tx_buffer>:

static void master_compose_tx_buffer(modbus_master *master, uint16_t addr, uint8_t fc)
{
 801ba3e:	b480      	push	{r7}
 801ba40:	b083      	sub	sp, #12
 801ba42:	af00      	add	r7, sp, #0
 801ba44:	6078      	str	r0, [r7, #4]
 801ba46:	460b      	mov	r3, r1
 801ba48:	807b      	strh	r3, [r7, #2]
 801ba4a:	4613      	mov	r3, r2
 801ba4c:	707b      	strb	r3, [r7, #1]
    master->tx_len = 0;
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	2200      	movs	r2, #0
 801ba52:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    master->func_code = fc;
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	787a      	ldrb	r2, [r7, #1]
 801ba5a:	715a      	strb	r2, [r3, #5]
    master->tx_buf[master->tx_len++] = master->slave_id;
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ba62:	1c5a      	adds	r2, r3, #1
 801ba64:	b291      	uxth	r1, r2
 801ba66:	687a      	ldr	r2, [r7, #4]
 801ba68:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ba6c:	4619      	mov	r1, r3
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	791a      	ldrb	r2, [r3, #4]
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	440b      	add	r3, r1
 801ba76:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = master->func_code;
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801ba80:	1c5a      	adds	r2, r3, #1
 801ba82:	b291      	uxth	r1, r2
 801ba84:	687a      	ldr	r2, [r7, #4]
 801ba86:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801ba8a:	4619      	mov	r1, r3
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	795a      	ldrb	r2, [r3, #5]
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	440b      	add	r3, r1
 801ba94:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = addr >> 8;
 801ba98:	887b      	ldrh	r3, [r7, #2]
 801ba9a:	0a1b      	lsrs	r3, r3, #8
 801ba9c:	b298      	uxth	r0, r3
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801baa4:	1c5a      	adds	r2, r3, #1
 801baa6:	b291      	uxth	r1, r2
 801baa8:	687a      	ldr	r2, [r7, #4]
 801baaa:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801baae:	4619      	mov	r1, r3
 801bab0:	b2c2      	uxtb	r2, r0
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	440b      	add	r3, r1
 801bab6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = addr & 0xFF;
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bac0:	1c5a      	adds	r2, r3, #1
 801bac2:	b291      	uxth	r1, r2
 801bac4:	687a      	ldr	r2, [r7, #4]
 801bac6:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801baca:	4619      	mov	r1, r3
 801bacc:	887b      	ldrh	r3, [r7, #2]
 801bace:	b2da      	uxtb	r2, r3
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	440b      	add	r3, r1
 801bad4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
}
 801bad8:	bf00      	nop
 801bada:	370c      	adds	r7, #12
 801badc:	46bd      	mov	sp, r7
 801bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bae2:	4770      	bx	lr

0801bae4 <master_read_holding_regs>:
    }
    return osError;
}

osStatus_t master_read_holding_regs(modbus_master *master, uint16_t addr, uint16_t qty, int16_t *result)
{
 801bae4:	b580      	push	{r7, lr}
 801bae6:	b086      	sub	sp, #24
 801bae8:	af00      	add	r7, sp, #0
 801baea:	60f8      	str	r0, [r7, #12]
 801baec:	607b      	str	r3, [r7, #4]
 801baee:	460b      	mov	r3, r1
 801baf0:	817b      	strh	r3, [r7, #10]
 801baf2:	4613      	mov	r3, r2
 801baf4:	813b      	strh	r3, [r7, #8]
    master_compose_tx_buffer(master, addr, MODBUS_FC_READ_HOLDING_REGISTERS);
 801baf6:	897b      	ldrh	r3, [r7, #10]
 801baf8:	2203      	movs	r2, #3
 801bafa:	4619      	mov	r1, r3
 801bafc:	68f8      	ldr	r0, [r7, #12]
 801bafe:	f7ff ff9e 	bl	801ba3e <master_compose_tx_buffer>
    master->tx_buf[master->tx_len++] = qty >> 8;
 801bb02:	893b      	ldrh	r3, [r7, #8]
 801bb04:	0a1b      	lsrs	r3, r3, #8
 801bb06:	b298      	uxth	r0, r3
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bb0e:	1c5a      	adds	r2, r3, #1
 801bb10:	b291      	uxth	r1, r2
 801bb12:	68fa      	ldr	r2, [r7, #12]
 801bb14:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801bb18:	4619      	mov	r1, r3
 801bb1a:	b2c2      	uxtb	r2, r0
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	440b      	add	r3, r1
 801bb20:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = qty & 0xFF;
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bb2a:	1c5a      	adds	r2, r3, #1
 801bb2c:	b291      	uxth	r1, r2
 801bb2e:	68fa      	ldr	r2, [r7, #12]
 801bb30:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801bb34:	4619      	mov	r1, r3
 801bb36:	893b      	ldrh	r3, [r7, #8]
 801bb38:	b2da      	uxtb	r2, r3
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	440b      	add	r3, r1
 801bb3e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (master_request(master, MB_MASTER_REQUEST_TIMEOUT) == osOK)
 801bb42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801bb46:	68f8      	ldr	r0, [r7, #12]
 801bb48:	f7ff fe22 	bl	801b790 <master_request>
 801bb4c:	4603      	mov	r3, r0
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d12d      	bne.n	801bbae <master_read_holding_regs+0xca>
    {
        if (master->rx_buf[2] != qty * 2)
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	7b9b      	ldrb	r3, [r3, #14]
 801bb56:	461a      	mov	r2, r3
 801bb58:	893b      	ldrh	r3, [r7, #8]
 801bb5a:	005b      	lsls	r3, r3, #1
 801bb5c:	429a      	cmp	r2, r3
 801bb5e:	d002      	beq.n	801bb66 <master_read_holding_regs+0x82>
        {
            return osError;
 801bb60:	f04f 33ff 	mov.w	r3, #4294967295
 801bb64:	e025      	b.n	801bbb2 <master_read_holding_regs+0xce>
        }
        for (uint16_t i = 0; i < qty; i++)
 801bb66:	2300      	movs	r3, #0
 801bb68:	82fb      	strh	r3, [r7, #22]
 801bb6a:	e01a      	b.n	801bba2 <master_read_holding_regs+0xbe>
        {
            result[i] = master->rx_buf[3 + i * 2] * 256 + master->rx_buf[4 + i * 2];
 801bb6c:	8afb      	ldrh	r3, [r7, #22]
 801bb6e:	005b      	lsls	r3, r3, #1
 801bb70:	3303      	adds	r3, #3
 801bb72:	68fa      	ldr	r2, [r7, #12]
 801bb74:	4413      	add	r3, r2
 801bb76:	7b1b      	ldrb	r3, [r3, #12]
 801bb78:	b29b      	uxth	r3, r3
 801bb7a:	021b      	lsls	r3, r3, #8
 801bb7c:	b29a      	uxth	r2, r3
 801bb7e:	8afb      	ldrh	r3, [r7, #22]
 801bb80:	3302      	adds	r3, #2
 801bb82:	005b      	lsls	r3, r3, #1
 801bb84:	68f9      	ldr	r1, [r7, #12]
 801bb86:	440b      	add	r3, r1
 801bb88:	7b1b      	ldrb	r3, [r3, #12]
 801bb8a:	b29b      	uxth	r3, r3
 801bb8c:	4413      	add	r3, r2
 801bb8e:	b299      	uxth	r1, r3
 801bb90:	8afb      	ldrh	r3, [r7, #22]
 801bb92:	005b      	lsls	r3, r3, #1
 801bb94:	687a      	ldr	r2, [r7, #4]
 801bb96:	4413      	add	r3, r2
 801bb98:	b20a      	sxth	r2, r1
 801bb9a:	801a      	strh	r2, [r3, #0]
        for (uint16_t i = 0; i < qty; i++)
 801bb9c:	8afb      	ldrh	r3, [r7, #22]
 801bb9e:	3301      	adds	r3, #1
 801bba0:	82fb      	strh	r3, [r7, #22]
 801bba2:	8afa      	ldrh	r2, [r7, #22]
 801bba4:	893b      	ldrh	r3, [r7, #8]
 801bba6:	429a      	cmp	r2, r3
 801bba8:	d3e0      	bcc.n	801bb6c <master_read_holding_regs+0x88>
        }
        return osOK;
 801bbaa:	2300      	movs	r3, #0
 801bbac:	e001      	b.n	801bbb2 <master_read_holding_regs+0xce>
    }
    return osError;
 801bbae:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	3718      	adds	r7, #24
 801bbb6:	46bd      	mov	sp, r7
 801bbb8:	bd80      	pop	{r7, pc}
	...

0801bbbc <slave_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void slave_crc16(modbus_slave *slave, uint8_t *buffer)
{
 801bbbc:	b480      	push	{r7}
 801bbbe:	b083      	sub	sp, #12
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	6078      	str	r0, [r7, #4]
 801bbc4:	6039      	str	r1, [r7, #0]
    slave->crc_hi = 0xFF;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	22ff      	movs	r2, #255	; 0xff
 801bbca:	719a      	strb	r2, [r3, #6]
    slave->crc_lo = 0xFF;
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	22ff      	movs	r2, #255	; 0xff
 801bbd0:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 801bbd2:	e01c      	b.n	801bc0e <slave_crc16+0x52>
    {
        slave->buff_index = slave->crc_hi ^ *buffer++;
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	799a      	ldrb	r2, [r3, #6]
 801bbd8:	683b      	ldr	r3, [r7, #0]
 801bbda:	1c59      	adds	r1, r3, #1
 801bbdc:	6039      	str	r1, [r7, #0]
 801bbde:	781b      	ldrb	r3, [r3, #0]
 801bbe0:	4053      	eors	r3, r2
 801bbe2:	b2db      	uxtb	r3, r3
 801bbe4:	b29a      	uxth	r2, r3
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	815a      	strh	r2, [r3, #10]
        slave->crc_hi = slave->crc_lo ^ crc_hi[slave->buff_index];
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	79da      	ldrb	r2, [r3, #7]
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	895b      	ldrh	r3, [r3, #10]
 801bbf2:	4619      	mov	r1, r3
 801bbf4:	4b0d      	ldr	r3, [pc, #52]	; (801bc2c <slave_crc16+0x70>)
 801bbf6:	5c5b      	ldrb	r3, [r3, r1]
 801bbf8:	4053      	eors	r3, r2
 801bbfa:	b2da      	uxtb	r2, r3
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	719a      	strb	r2, [r3, #6]
        slave->crc_lo = crc_lo[slave->buff_index];
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	895b      	ldrh	r3, [r3, #10]
 801bc04:	461a      	mov	r2, r3
 801bc06:	4b0a      	ldr	r3, [pc, #40]	; (801bc30 <slave_crc16+0x74>)
 801bc08:	5c9a      	ldrb	r2, [r3, r2]
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	891b      	ldrh	r3, [r3, #8]
 801bc12:	1e5a      	subs	r2, r3, #1
 801bc14:	b291      	uxth	r1, r2
 801bc16:	687a      	ldr	r2, [r7, #4]
 801bc18:	8111      	strh	r1, [r2, #8]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d1da      	bne.n	801bbd4 <slave_crc16+0x18>
    }
}
 801bc1e:	bf00      	nop
 801bc20:	bf00      	nop
 801bc22:	370c      	adds	r7, #12
 801bc24:	46bd      	mov	sp, r7
 801bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc2a:	4770      	bx	lr
 801bc2c:	08021400 	.word	0x08021400
 801bc30:	08021500 	.word	0x08021500

0801bc34 <slave_validate_cmd>:

static osStatus_t slave_validate_cmd(modbus_slave *slave)
{
 801bc34:	b580      	push	{r7, lr}
 801bc36:	b082      	sub	sp, #8
 801bc38:	af00      	add	r7, sp, #0
 801bc3a:	6078      	str	r0, [r7, #4]
    if (slave->rx_len < 8 || slave->rx_buf[0] != slave->slave_id)
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801bc42:	2b07      	cmp	r3, #7
 801bc44:	d905      	bls.n	801bc52 <slave_validate_cmd+0x1e>
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	7b1a      	ldrb	r2, [r3, #12]
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	791b      	ldrb	r3, [r3, #4]
 801bc4e:	429a      	cmp	r2, r3
 801bc50:	d002      	beq.n	801bc58 <slave_validate_cmd+0x24>
    {
        return osError;
 801bc52:	f04f 33ff 	mov.w	r3, #4294967295
 801bc56:	e026      	b.n	801bca6 <slave_validate_cmd+0x72>
    }
    slave->buff_len = slave->rx_len - 2;
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801bc5e:	3b02      	subs	r3, #2
 801bc60:	b29a      	uxth	r2, r3
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->rx_buf);
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	330c      	adds	r3, #12
 801bc6a:	4619      	mov	r1, r3
 801bc6c:	6878      	ldr	r0, [r7, #4]
 801bc6e:	f7ff ffa5 	bl	801bbbc <slave_crc16>
    if ((slave->crc_hi != slave->rx_buf[slave->rx_len - 2]) || (slave->crc_lo != slave->rx_buf[slave->rx_len - 1]))
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	799a      	ldrb	r2, [r3, #6]
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801bc7c:	3b02      	subs	r3, #2
 801bc7e:	6879      	ldr	r1, [r7, #4]
 801bc80:	440b      	add	r3, r1
 801bc82:	7b1b      	ldrb	r3, [r3, #12]
 801bc84:	429a      	cmp	r2, r3
 801bc86:	d10a      	bne.n	801bc9e <slave_validate_cmd+0x6a>
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	79da      	ldrb	r2, [r3, #7]
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801bc92:	3b01      	subs	r3, #1
 801bc94:	6879      	ldr	r1, [r7, #4]
 801bc96:	440b      	add	r3, r1
 801bc98:	7b1b      	ldrb	r3, [r3, #12]
 801bc9a:	429a      	cmp	r2, r3
 801bc9c:	d002      	beq.n	801bca4 <slave_validate_cmd+0x70>
    {
        return osError;
 801bc9e:	f04f 33ff 	mov.w	r3, #4294967295
 801bca2:	e000      	b.n	801bca6 <slave_validate_cmd+0x72>
    }
    return osOK;
 801bca4:	2300      	movs	r3, #0
}
 801bca6:	4618      	mov	r0, r3
 801bca8:	3708      	adds	r7, #8
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	bd80      	pop	{r7, pc}

0801bcae <slave_handle_read_discs>:

static void slave_handle_read_discs(modbus_slave *slave)
{
 801bcae:	b480      	push	{r7}
 801bcb0:	b087      	sub	sp, #28
 801bcb2:	af00      	add	r7, sp, #0
 801bcb4:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	7b9b      	ldrb	r3, [r3, #14]
 801bcba:	b29b      	uxth	r3, r3
 801bcbc:	021b      	lsls	r3, r3, #8
 801bcbe:	b29a      	uxth	r2, r3
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	7bdb      	ldrb	r3, [r3, #15]
 801bcc4:	b29b      	uxth	r3, r3
 801bcc6:	4413      	add	r3, r2
 801bcc8:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	7c1b      	ldrb	r3, [r3, #16]
 801bcce:	b29b      	uxth	r3, r3
 801bcd0:	021b      	lsls	r3, r3, #8
 801bcd2:	b29a      	uxth	r2, r3
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	7c5b      	ldrb	r3, [r3, #17]
 801bcd8:	b29b      	uxth	r3, r3
 801bcda:	4413      	add	r3, r2
 801bcdc:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	2200      	movs	r2, #0
 801bce2:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bcec:	1c5a      	adds	r2, r3, #1
 801bcee:	b291      	uxth	r1, r2
 801bcf0:	687a      	ldr	r2, [r7, #4]
 801bcf2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801bcf6:	4619      	mov	r1, r3
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	791a      	ldrb	r2, [r3, #4]
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	440b      	add	r3, r1
 801bd00:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801bd04:	8a7a      	ldrh	r2, [r7, #18]
 801bd06:	8a3b      	ldrh	r3, [r7, #16]
 801bd08:	4413      	add	r3, r2
 801bd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bd0e:	dd20      	ble.n	801bd52 <slave_handle_read_discs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	7b5a      	ldrb	r2, [r3, #13]
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bd1a:	1c59      	adds	r1, r3, #1
 801bd1c:	b288      	uxth	r0, r1
 801bd1e:	6879      	ldr	r1, [r7, #4]
 801bd20:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801bd24:	4619      	mov	r1, r3
 801bd26:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801bd2a:	b2da      	uxtb	r2, r3
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	440b      	add	r3, r1
 801bd30:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bd3a:	1c5a      	adds	r2, r3, #1
 801bd3c:	b291      	uxth	r1, r2
 801bd3e:	687a      	ldr	r2, [r7, #4]
 801bd40:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801bd44:	461a      	mov	r2, r3
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	4413      	add	r3, r2
 801bd4a:	2202      	movs	r2, #2
 801bd4c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 801bd50:	e072      	b.n	801be38 <slave_handle_read_discs+0x18a>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 801bd52:	8a3b      	ldrh	r3, [r7, #16]
 801bd54:	f003 0307 	and.w	r3, r3, #7
 801bd58:	b29b      	uxth	r3, r3
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d103      	bne.n	801bd66 <slave_handle_read_discs+0xb8>
 801bd5e:	8a3b      	ldrh	r3, [r7, #16]
 801bd60:	08db      	lsrs	r3, r3, #3
 801bd62:	b29b      	uxth	r3, r3
 801bd64:	e004      	b.n	801bd70 <slave_handle_read_discs+0xc2>
 801bd66:	8a3b      	ldrh	r3, [r7, #16]
 801bd68:	08db      	lsrs	r3, r3, #3
 801bd6a:	b29b      	uxth	r3, r3
 801bd6c:	3301      	adds	r3, #1
 801bd6e:	b29b      	uxth	r3, r3
 801bd70:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 801bd72:	2300      	movs	r3, #0
 801bd74:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bd7c:	1c5a      	adds	r2, r3, #1
 801bd7e:	b291      	uxth	r1, r2
 801bd80:	687a      	ldr	r2, [r7, #4]
 801bd82:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801bd86:	4619      	mov	r1, r3
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	7b5a      	ldrb	r2, [r3, #13]
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	440b      	add	r3, r1
 801bd90:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = byte_count;
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bd9a:	1c5a      	adds	r2, r3, #1
 801bd9c:	b291      	uxth	r1, r2
 801bd9e:	687a      	ldr	r2, [r7, #4]
 801bda0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801bda4:	4619      	mov	r1, r3
 801bda6:	89fb      	ldrh	r3, [r7, #14]
 801bda8:	b2da      	uxtb	r2, r3
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	440b      	add	r3, r1
 801bdae:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	82bb      	strh	r3, [r7, #20]
 801bdb6:	e03a      	b.n	801be2e <slave_handle_read_discs+0x180>
            if (i % 8 == 0)
 801bdb8:	8abb      	ldrh	r3, [r7, #20]
 801bdba:	f003 0307 	and.w	r3, r3, #7
 801bdbe:	b29b      	uxth	r3, r3
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d101      	bne.n	801bdc8 <slave_handle_read_discs+0x11a>
                byte_data = 0x00;
 801bdc4:	2300      	movs	r3, #0
 801bdc6:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 801bdc8:	8aba      	ldrh	r2, [r7, #20]
 801bdca:	8a3b      	ldrh	r3, [r7, #16]
 801bdcc:	429a      	cmp	r2, r3
 801bdce:	d214      	bcs.n	801bdfa <slave_handle_read_discs+0x14c>
                byte_data = (slave->regs->discs[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 801bdd6:	8a79      	ldrh	r1, [r7, #18]
 801bdd8:	8abb      	ldrh	r3, [r7, #20]
 801bdda:	440b      	add	r3, r1
 801bddc:	5cd3      	ldrb	r3, [r2, r3]
 801bdde:	2b01      	cmp	r3, #1
 801bde0:	d106      	bne.n	801bdf0 <slave_handle_read_discs+0x142>
 801bde2:	7dfb      	ldrb	r3, [r7, #23]
 801bde4:	085b      	lsrs	r3, r3, #1
 801bde6:	b2db      	uxtb	r3, r3
 801bde8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bdec:	b2db      	uxtb	r3, r3
 801bdee:	e002      	b.n	801bdf6 <slave_handle_read_discs+0x148>
 801bdf0:	7dfb      	ldrb	r3, [r7, #23]
 801bdf2:	085b      	lsrs	r3, r3, #1
 801bdf4:	b2db      	uxtb	r3, r3
 801bdf6:	75fb      	strb	r3, [r7, #23]
 801bdf8:	e002      	b.n	801be00 <slave_handle_read_discs+0x152>
                byte_data = byte_data >> 1 & 0x7F;
 801bdfa:	7dfb      	ldrb	r3, [r7, #23]
 801bdfc:	085b      	lsrs	r3, r3, #1
 801bdfe:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 801be00:	8abb      	ldrh	r3, [r7, #20]
 801be02:	3301      	adds	r3, #1
 801be04:	f003 0307 	and.w	r3, r3, #7
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d10d      	bne.n	801be28 <slave_handle_read_discs+0x17a>
                slave->tx_buf[slave->tx_len++] = byte_data;
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801be12:	1c5a      	adds	r2, r3, #1
 801be14:	b291      	uxth	r1, r2
 801be16:	687a      	ldr	r2, [r7, #4]
 801be18:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801be1c:	461a      	mov	r2, r3
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	4413      	add	r3, r2
 801be22:	7dfa      	ldrb	r2, [r7, #23]
 801be24:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 801be28:	8abb      	ldrh	r3, [r7, #20]
 801be2a:	3301      	adds	r3, #1
 801be2c:	82bb      	strh	r3, [r7, #20]
 801be2e:	8aba      	ldrh	r2, [r7, #20]
 801be30:	89fb      	ldrh	r3, [r7, #14]
 801be32:	00db      	lsls	r3, r3, #3
 801be34:	429a      	cmp	r2, r3
 801be36:	dbbf      	blt.n	801bdb8 <slave_handle_read_discs+0x10a>
}
 801be38:	bf00      	nop
 801be3a:	371c      	adds	r7, #28
 801be3c:	46bd      	mov	sp, r7
 801be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be42:	4770      	bx	lr

0801be44 <slave_handle_read_coils>:

static void slave_handle_read_coils(modbus_slave *slave)
{
 801be44:	b480      	push	{r7}
 801be46:	b087      	sub	sp, #28
 801be48:	af00      	add	r7, sp, #0
 801be4a:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	7b9b      	ldrb	r3, [r3, #14]
 801be50:	b29b      	uxth	r3, r3
 801be52:	021b      	lsls	r3, r3, #8
 801be54:	b29a      	uxth	r2, r3
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	7bdb      	ldrb	r3, [r3, #15]
 801be5a:	b29b      	uxth	r3, r3
 801be5c:	4413      	add	r3, r2
 801be5e:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	7c1b      	ldrb	r3, [r3, #16]
 801be64:	b29b      	uxth	r3, r3
 801be66:	021b      	lsls	r3, r3, #8
 801be68:	b29a      	uxth	r2, r3
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	7c5b      	ldrb	r3, [r3, #17]
 801be6e:	b29b      	uxth	r3, r3
 801be70:	4413      	add	r3, r2
 801be72:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	2200      	movs	r2, #0
 801be78:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801be82:	1c5a      	adds	r2, r3, #1
 801be84:	b291      	uxth	r1, r2
 801be86:	687a      	ldr	r2, [r7, #4]
 801be88:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801be8c:	4619      	mov	r1, r3
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	791a      	ldrb	r2, [r3, #4]
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	440b      	add	r3, r1
 801be96:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801be9a:	8a7a      	ldrh	r2, [r7, #18]
 801be9c:	8a3b      	ldrh	r3, [r7, #16]
 801be9e:	4413      	add	r3, r2
 801bea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bea4:	dd20      	ble.n	801bee8 <slave_handle_read_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	7b5a      	ldrb	r2, [r3, #13]
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801beb0:	1c59      	adds	r1, r3, #1
 801beb2:	b288      	uxth	r0, r1
 801beb4:	6879      	ldr	r1, [r7, #4]
 801beb6:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801beba:	4619      	mov	r1, r3
 801bebc:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801bec0:	b2da      	uxtb	r2, r3
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	440b      	add	r3, r1
 801bec6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bed0:	1c5a      	adds	r2, r3, #1
 801bed2:	b291      	uxth	r1, r2
 801bed4:	687a      	ldr	r2, [r7, #4]
 801bed6:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801beda:	461a      	mov	r2, r3
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	4413      	add	r3, r2
 801bee0:	2202      	movs	r2, #2
 801bee2:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 801bee6:	e074      	b.n	801bfd2 <slave_handle_read_coils+0x18e>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 801bee8:	8a3b      	ldrh	r3, [r7, #16]
 801beea:	f003 0307 	and.w	r3, r3, #7
 801beee:	b29b      	uxth	r3, r3
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d103      	bne.n	801befc <slave_handle_read_coils+0xb8>
 801bef4:	8a3b      	ldrh	r3, [r7, #16]
 801bef6:	08db      	lsrs	r3, r3, #3
 801bef8:	b29b      	uxth	r3, r3
 801befa:	e004      	b.n	801bf06 <slave_handle_read_coils+0xc2>
 801befc:	8a3b      	ldrh	r3, [r7, #16]
 801befe:	08db      	lsrs	r3, r3, #3
 801bf00:	b29b      	uxth	r3, r3
 801bf02:	3301      	adds	r3, #1
 801bf04:	b29b      	uxth	r3, r3
 801bf06:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 801bf08:	2300      	movs	r3, #0
 801bf0a:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bf12:	1c5a      	adds	r2, r3, #1
 801bf14:	b291      	uxth	r1, r2
 801bf16:	687a      	ldr	r2, [r7, #4]
 801bf18:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801bf1c:	4619      	mov	r1, r3
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	7b5a      	ldrb	r2, [r3, #13]
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	440b      	add	r3, r1
 801bf26:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = byte_count;
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bf30:	1c5a      	adds	r2, r3, #1
 801bf32:	b291      	uxth	r1, r2
 801bf34:	687a      	ldr	r2, [r7, #4]
 801bf36:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801bf3a:	4619      	mov	r1, r3
 801bf3c:	89fb      	ldrh	r3, [r7, #14]
 801bf3e:	b2da      	uxtb	r2, r3
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	440b      	add	r3, r1
 801bf44:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 801bf48:	2300      	movs	r3, #0
 801bf4a:	82bb      	strh	r3, [r7, #20]
 801bf4c:	e03c      	b.n	801bfc8 <slave_handle_read_coils+0x184>
            if (i % 8 == 0)
 801bf4e:	8abb      	ldrh	r3, [r7, #20]
 801bf50:	f003 0307 	and.w	r3, r3, #7
 801bf54:	b29b      	uxth	r3, r3
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d101      	bne.n	801bf5e <slave_handle_read_coils+0x11a>
                byte_data = 0x00;
 801bf5a:	2300      	movs	r3, #0
 801bf5c:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 801bf5e:	8aba      	ldrh	r2, [r7, #20]
 801bf60:	8a3b      	ldrh	r3, [r7, #16]
 801bf62:	429a      	cmp	r2, r3
 801bf64:	d216      	bcs.n	801bf94 <slave_handle_read_coils+0x150>
                byte_data = (slave->regs->coils[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 801bf6c:	8a79      	ldrh	r1, [r7, #18]
 801bf6e:	8abb      	ldrh	r3, [r7, #20]
 801bf70:	440b      	add	r3, r1
 801bf72:	4413      	add	r3, r2
 801bf74:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 801bf78:	2b01      	cmp	r3, #1
 801bf7a:	d106      	bne.n	801bf8a <slave_handle_read_coils+0x146>
 801bf7c:	7dfb      	ldrb	r3, [r7, #23]
 801bf7e:	085b      	lsrs	r3, r3, #1
 801bf80:	b2db      	uxtb	r3, r3
 801bf82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bf86:	b2db      	uxtb	r3, r3
 801bf88:	e002      	b.n	801bf90 <slave_handle_read_coils+0x14c>
 801bf8a:	7dfb      	ldrb	r3, [r7, #23]
 801bf8c:	085b      	lsrs	r3, r3, #1
 801bf8e:	b2db      	uxtb	r3, r3
 801bf90:	75fb      	strb	r3, [r7, #23]
 801bf92:	e002      	b.n	801bf9a <slave_handle_read_coils+0x156>
                byte_data = byte_data >> 1 & 0x7F;
 801bf94:	7dfb      	ldrb	r3, [r7, #23]
 801bf96:	085b      	lsrs	r3, r3, #1
 801bf98:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 801bf9a:	8abb      	ldrh	r3, [r7, #20]
 801bf9c:	3301      	adds	r3, #1
 801bf9e:	f003 0307 	and.w	r3, r3, #7
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d10d      	bne.n	801bfc2 <slave_handle_read_coils+0x17e>
                slave->tx_buf[slave->tx_len++] = byte_data;
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801bfac:	1c5a      	adds	r2, r3, #1
 801bfae:	b291      	uxth	r1, r2
 801bfb0:	687a      	ldr	r2, [r7, #4]
 801bfb2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801bfb6:	461a      	mov	r2, r3
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	4413      	add	r3, r2
 801bfbc:	7dfa      	ldrb	r2, [r7, #23]
 801bfbe:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 801bfc2:	8abb      	ldrh	r3, [r7, #20]
 801bfc4:	3301      	adds	r3, #1
 801bfc6:	82bb      	strh	r3, [r7, #20]
 801bfc8:	8aba      	ldrh	r2, [r7, #20]
 801bfca:	89fb      	ldrh	r3, [r7, #14]
 801bfcc:	00db      	lsls	r3, r3, #3
 801bfce:	429a      	cmp	r2, r3
 801bfd0:	dbbd      	blt.n	801bf4e <slave_handle_read_coils+0x10a>
}
 801bfd2:	bf00      	nop
 801bfd4:	371c      	adds	r7, #28
 801bfd6:	46bd      	mov	sp, r7
 801bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfdc:	4770      	bx	lr

0801bfde <slave_handle_read_input_regs>:

static void slave_handle_read_input_regs(modbus_slave *slave)
{
 801bfde:	b480      	push	{r7}
 801bfe0:	b085      	sub	sp, #20
 801bfe2:	af00      	add	r7, sp, #0
 801bfe4:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	7b9b      	ldrb	r3, [r3, #14]
 801bfea:	b29b      	uxth	r3, r3
 801bfec:	021b      	lsls	r3, r3, #8
 801bfee:	b29a      	uxth	r2, r3
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	7bdb      	ldrb	r3, [r3, #15]
 801bff4:	b29b      	uxth	r3, r3
 801bff6:	4413      	add	r3, r2
 801bff8:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	7c1b      	ldrb	r3, [r3, #16]
 801bffe:	b29b      	uxth	r3, r3
 801c000:	021b      	lsls	r3, r3, #8
 801c002:	b29a      	uxth	r2, r3
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	7c5b      	ldrb	r3, [r3, #17]
 801c008:	b29b      	uxth	r3, r3
 801c00a:	4413      	add	r3, r2
 801c00c:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	2200      	movs	r2, #0
 801c012:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c01c:	1c5a      	adds	r2, r3, #1
 801c01e:	b291      	uxth	r1, r2
 801c020:	687a      	ldr	r2, [r7, #4]
 801c022:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c026:	4619      	mov	r1, r3
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	791a      	ldrb	r2, [r3, #4]
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	440b      	add	r3, r1
 801c030:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801c034:	89ba      	ldrh	r2, [r7, #12]
 801c036:	897b      	ldrh	r3, [r7, #10]
 801c038:	4413      	add	r3, r2
 801c03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c03e:	dd20      	ble.n	801c082 <slave_handle_read_input_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	7b5a      	ldrb	r2, [r3, #13]
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c04a:	1c59      	adds	r1, r3, #1
 801c04c:	b288      	uxth	r0, r1
 801c04e:	6879      	ldr	r1, [r7, #4]
 801c050:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801c054:	4619      	mov	r1, r3
 801c056:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801c05a:	b2da      	uxtb	r2, r3
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	440b      	add	r3, r1
 801c060:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c06a:	1c5a      	adds	r2, r3, #1
 801c06c:	b291      	uxth	r1, r2
 801c06e:	687a      	ldr	r2, [r7, #4]
 801c070:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c074:	461a      	mov	r2, r3
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	4413      	add	r3, r2
 801c07a:	2202      	movs	r2, #2
 801c07c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
        }
    }
}
 801c080:	e05b      	b.n	801c13a <slave_handle_read_input_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c088:	1c5a      	adds	r2, r3, #1
 801c08a:	b291      	uxth	r1, r2
 801c08c:	687a      	ldr	r2, [r7, #4]
 801c08e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c092:	4619      	mov	r1, r3
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	7b5a      	ldrb	r2, [r3, #13]
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	440b      	add	r3, r1
 801c09c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 801c0a0:	897b      	ldrh	r3, [r7, #10]
 801c0a2:	b2da      	uxtb	r2, r3
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c0aa:	1c59      	adds	r1, r3, #1
 801c0ac:	b288      	uxth	r0, r1
 801c0ae:	6879      	ldr	r1, [r7, #4]
 801c0b0:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801c0b4:	4619      	mov	r1, r3
 801c0b6:	0053      	lsls	r3, r2, #1
 801c0b8:	b2da      	uxtb	r2, r3
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	440b      	add	r3, r1
 801c0be:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	81fb      	strh	r3, [r7, #14]
 801c0c6:	e034      	b.n	801c132 <slave_handle_read_input_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801c0ce:	89f9      	ldrh	r1, [r7, #14]
 801c0d0:	89ba      	ldrh	r2, [r7, #12]
 801c0d2:	440a      	add	r2, r1
 801c0d4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 801c0d8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801c0dc:	121b      	asrs	r3, r3, #8
 801c0de:	b218      	sxth	r0, r3
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c0e6:	1c5a      	adds	r2, r3, #1
 801c0e8:	b291      	uxth	r1, r2
 801c0ea:	687a      	ldr	r2, [r7, #4]
 801c0ec:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c0f0:	4619      	mov	r1, r3
 801c0f2:	b2c2      	uxtb	r2, r0
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	440b      	add	r3, r1
 801c0f8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801c102:	89f9      	ldrh	r1, [r7, #14]
 801c104:	89ba      	ldrh	r2, [r7, #12]
 801c106:	440a      	add	r2, r1
 801c108:	f502 7280 	add.w	r2, r2, #256	; 0x100
 801c10c:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c116:	1c5a      	adds	r2, r3, #1
 801c118:	b291      	uxth	r1, r2
 801c11a:	687a      	ldr	r2, [r7, #4]
 801c11c:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c120:	4619      	mov	r1, r3
 801c122:	b2c2      	uxtb	r2, r0
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	440b      	add	r3, r1
 801c128:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 801c12c:	89fb      	ldrh	r3, [r7, #14]
 801c12e:	3301      	adds	r3, #1
 801c130:	81fb      	strh	r3, [r7, #14]
 801c132:	89fa      	ldrh	r2, [r7, #14]
 801c134:	897b      	ldrh	r3, [r7, #10]
 801c136:	429a      	cmp	r2, r3
 801c138:	d3c6      	bcc.n	801c0c8 <slave_handle_read_input_regs+0xea>
}
 801c13a:	bf00      	nop
 801c13c:	3714      	adds	r7, #20
 801c13e:	46bd      	mov	sp, r7
 801c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c144:	4770      	bx	lr

0801c146 <slave_handle_read_holding_regs>:

static void slave_handle_read_holding_regs(modbus_slave *slave)
{
 801c146:	b480      	push	{r7}
 801c148:	b085      	sub	sp, #20
 801c14a:	af00      	add	r7, sp, #0
 801c14c:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	7b9b      	ldrb	r3, [r3, #14]
 801c152:	b29b      	uxth	r3, r3
 801c154:	021b      	lsls	r3, r3, #8
 801c156:	b29a      	uxth	r2, r3
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	7bdb      	ldrb	r3, [r3, #15]
 801c15c:	b29b      	uxth	r3, r3
 801c15e:	4413      	add	r3, r2
 801c160:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	7c1b      	ldrb	r3, [r3, #16]
 801c166:	b29b      	uxth	r3, r3
 801c168:	021b      	lsls	r3, r3, #8
 801c16a:	b29a      	uxth	r2, r3
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	7c5b      	ldrb	r3, [r3, #17]
 801c170:	b29b      	uxth	r3, r3
 801c172:	4413      	add	r3, r2
 801c174:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	2200      	movs	r2, #0
 801c17a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c184:	1c5a      	adds	r2, r3, #1
 801c186:	b291      	uxth	r1, r2
 801c188:	687a      	ldr	r2, [r7, #4]
 801c18a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c18e:	4619      	mov	r1, r3
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	791a      	ldrb	r2, [r3, #4]
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	440b      	add	r3, r1
 801c198:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801c19c:	89ba      	ldrh	r2, [r7, #12]
 801c19e:	897b      	ldrh	r3, [r7, #10]
 801c1a0:	4413      	add	r3, r2
 801c1a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c1a6:	dd20      	ble.n	801c1ea <slave_handle_read_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	7b5a      	ldrb	r2, [r3, #13]
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c1b2:	1c59      	adds	r1, r3, #1
 801c1b4:	b288      	uxth	r0, r1
 801c1b6:	6879      	ldr	r1, [r7, #4]
 801c1b8:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801c1bc:	4619      	mov	r1, r3
 801c1be:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801c1c2:	b2da      	uxtb	r2, r3
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	440b      	add	r3, r1
 801c1c8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c1d2:	1c5a      	adds	r2, r3, #1
 801c1d4:	b291      	uxth	r1, r2
 801c1d6:	687a      	ldr	r2, [r7, #4]
 801c1d8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c1dc:	461a      	mov	r2, r3
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	4413      	add	r3, r2
 801c1e2:	2202      	movs	r2, #2
 801c1e4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
        }
    }
}
 801c1e8:	e05b      	b.n	801c2a2 <slave_handle_read_holding_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c1f0:	1c5a      	adds	r2, r3, #1
 801c1f2:	b291      	uxth	r1, r2
 801c1f4:	687a      	ldr	r2, [r7, #4]
 801c1f6:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c1fa:	4619      	mov	r1, r3
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	7b5a      	ldrb	r2, [r3, #13]
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	440b      	add	r3, r1
 801c204:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 801c208:	897b      	ldrh	r3, [r7, #10]
 801c20a:	b2da      	uxtb	r2, r3
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c212:	1c59      	adds	r1, r3, #1
 801c214:	b288      	uxth	r0, r1
 801c216:	6879      	ldr	r1, [r7, #4]
 801c218:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801c21c:	4619      	mov	r1, r3
 801c21e:	0053      	lsls	r3, r2, #1
 801c220:	b2da      	uxtb	r2, r3
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	440b      	add	r3, r1
 801c226:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 801c22a:	2300      	movs	r3, #0
 801c22c:	81fb      	strh	r3, [r7, #14]
 801c22e:	e034      	b.n	801c29a <slave_handle_read_holding_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801c236:	89f9      	ldrh	r1, [r7, #14]
 801c238:	89ba      	ldrh	r2, [r7, #12]
 801c23a:	440a      	add	r2, r1
 801c23c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801c240:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801c244:	121b      	asrs	r3, r3, #8
 801c246:	b218      	sxth	r0, r3
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c24e:	1c5a      	adds	r2, r3, #1
 801c250:	b291      	uxth	r1, r2
 801c252:	687a      	ldr	r2, [r7, #4]
 801c254:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c258:	4619      	mov	r1, r3
 801c25a:	b2c2      	uxtb	r2, r0
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	440b      	add	r3, r1
 801c260:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801c26a:	89f9      	ldrh	r1, [r7, #14]
 801c26c:	89ba      	ldrh	r2, [r7, #12]
 801c26e:	440a      	add	r2, r1
 801c270:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801c274:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c27e:	1c5a      	adds	r2, r3, #1
 801c280:	b291      	uxth	r1, r2
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c288:	4619      	mov	r1, r3
 801c28a:	b2c2      	uxtb	r2, r0
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	440b      	add	r3, r1
 801c290:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 801c294:	89fb      	ldrh	r3, [r7, #14]
 801c296:	3301      	adds	r3, #1
 801c298:	81fb      	strh	r3, [r7, #14]
 801c29a:	89fa      	ldrh	r2, [r7, #14]
 801c29c:	897b      	ldrh	r3, [r7, #10]
 801c29e:	429a      	cmp	r2, r3
 801c2a0:	d3c6      	bcc.n	801c230 <slave_handle_read_holding_regs+0xea>
}
 801c2a2:	bf00      	nop
 801c2a4:	3714      	adds	r7, #20
 801c2a6:	46bd      	mov	sp, r7
 801c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ac:	4770      	bx	lr

0801c2ae <slave_compose_write_reply_tx_buffer>:

static void slave_compose_write_reply_tx_buffer(modbus_slave *slave)
{
 801c2ae:	b480      	push	{r7}
 801c2b0:	b083      	sub	sp, #12
 801c2b2:	af00      	add	r7, sp, #0
 801c2b4:	6078      	str	r0, [r7, #4]
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c2bc:	1c5a      	adds	r2, r3, #1
 801c2be:	b291      	uxth	r1, r2
 801c2c0:	687a      	ldr	r2, [r7, #4]
 801c2c2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c2c6:	4619      	mov	r1, r3
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	7b5a      	ldrb	r2, [r3, #13]
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	440b      	add	r3, r1
 801c2d0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[2];
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c2da:	1c5a      	adds	r2, r3, #1
 801c2dc:	b291      	uxth	r1, r2
 801c2de:	687a      	ldr	r2, [r7, #4]
 801c2e0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c2e4:	4619      	mov	r1, r3
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	7b9a      	ldrb	r2, [r3, #14]
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	440b      	add	r3, r1
 801c2ee:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[3];
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c2f8:	1c5a      	adds	r2, r3, #1
 801c2fa:	b291      	uxth	r1, r2
 801c2fc:	687a      	ldr	r2, [r7, #4]
 801c2fe:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c302:	4619      	mov	r1, r3
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	7bda      	ldrb	r2, [r3, #15]
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	440b      	add	r3, r1
 801c30c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[4];
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c316:	1c5a      	adds	r2, r3, #1
 801c318:	b291      	uxth	r1, r2
 801c31a:	687a      	ldr	r2, [r7, #4]
 801c31c:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c320:	4619      	mov	r1, r3
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	7c1a      	ldrb	r2, [r3, #16]
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	440b      	add	r3, r1
 801c32a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[5];
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c334:	1c5a      	adds	r2, r3, #1
 801c336:	b291      	uxth	r1, r2
 801c338:	687a      	ldr	r2, [r7, #4]
 801c33a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c33e:	4619      	mov	r1, r3
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	7c5a      	ldrb	r2, [r3, #17]
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	440b      	add	r3, r1
 801c348:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
}
 801c34c:	bf00      	nop
 801c34e:	370c      	adds	r7, #12
 801c350:	46bd      	mov	sp, r7
 801c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c356:	4770      	bx	lr

0801c358 <slave_handle_write_single_coil>:

static void slave_handle_write_single_coil(modbus_slave *slave)
{
 801c358:	b580      	push	{r7, lr}
 801c35a:	b084      	sub	sp, #16
 801c35c:	af00      	add	r7, sp, #0
 801c35e:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	7b9b      	ldrb	r3, [r3, #14]
 801c364:	b29b      	uxth	r3, r3
 801c366:	021b      	lsls	r3, r3, #8
 801c368:	b29a      	uxth	r2, r3
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	7bdb      	ldrb	r3, [r3, #15]
 801c36e:	b29b      	uxth	r3, r3
 801c370:	4413      	add	r3, r2
 801c372:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	2200      	movs	r2, #0
 801c378:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c382:	1c5a      	adds	r2, r3, #1
 801c384:	b291      	uxth	r1, r2
 801c386:	687a      	ldr	r2, [r7, #4]
 801c388:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c38c:	4619      	mov	r1, r3
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	791a      	ldrb	r2, [r3, #4]
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	440b      	add	r3, r1
 801c396:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + 1 > MODBUS_REG_LENGTH)
 801c39a:	89fb      	ldrh	r3, [r7, #14]
 801c39c:	2bff      	cmp	r3, #255	; 0xff
 801c39e:	d920      	bls.n	801c3e2 <slave_handle_write_single_coil+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	7b5a      	ldrb	r2, [r3, #13]
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c3aa:	1c59      	adds	r1, r3, #1
 801c3ac:	b288      	uxth	r0, r1
 801c3ae:	6879      	ldr	r1, [r7, #4]
 801c3b0:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801c3b4:	4619      	mov	r1, r3
 801c3b6:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801c3ba:	b2da      	uxtb	r2, r3
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	440b      	add	r3, r1
 801c3c0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c3ca:	1c5a      	adds	r2, r3, #1
 801c3cc:	b291      	uxth	r1, r2
 801c3ce:	687a      	ldr	r2, [r7, #4]
 801c3d0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c3d4:	461a      	mov	r2, r3
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	4413      	add	r3, r2
 801c3da:	2202      	movs	r2, #2
 801c3dc:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
    }
}
 801c3e0:	e011      	b.n	801c406 <slave_handle_write_single_coil+0xae>
        slave_compose_write_reply_tx_buffer(slave);
 801c3e2:	6878      	ldr	r0, [r7, #4]
 801c3e4:	f7ff ff63 	bl	801c2ae <slave_compose_write_reply_tx_buffer>
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	7c1b      	ldrb	r3, [r3, #16]
 801c3ec:	2bff      	cmp	r3, #255	; 0xff
 801c3ee:	bf0c      	ite	eq
 801c3f0:	2301      	moveq	r3, #1
 801c3f2:	2300      	movne	r3, #0
 801c3f4:	b2d9      	uxtb	r1, r3
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 801c3fc:	89fb      	ldrh	r3, [r7, #14]
 801c3fe:	4413      	add	r3, r2
 801c400:	460a      	mov	r2, r1
 801c402:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 801c406:	bf00      	nop
 801c408:	3710      	adds	r7, #16
 801c40a:	46bd      	mov	sp, r7
 801c40c:	bd80      	pop	{r7, pc}

0801c40e <slave_handle_write_multi_coils>:

static void slave_handle_write_multi_coils(modbus_slave *slave)
{
 801c40e:	b580      	push	{r7, lr}
 801c410:	b084      	sub	sp, #16
 801c412:	af00      	add	r7, sp, #0
 801c414:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	7b9b      	ldrb	r3, [r3, #14]
 801c41a:	b29b      	uxth	r3, r3
 801c41c:	021b      	lsls	r3, r3, #8
 801c41e:	b29a      	uxth	r2, r3
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	7bdb      	ldrb	r3, [r3, #15]
 801c424:	b29b      	uxth	r3, r3
 801c426:	4413      	add	r3, r2
 801c428:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	7c1b      	ldrb	r3, [r3, #16]
 801c42e:	b29b      	uxth	r3, r3
 801c430:	021b      	lsls	r3, r3, #8
 801c432:	b29a      	uxth	r2, r3
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	7c5b      	ldrb	r3, [r3, #17]
 801c438:	b29b      	uxth	r3, r3
 801c43a:	4413      	add	r3, r2
 801c43c:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	2200      	movs	r2, #0
 801c442:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c44c:	1c5a      	adds	r2, r3, #1
 801c44e:	b291      	uxth	r1, r2
 801c450:	687a      	ldr	r2, [r7, #4]
 801c452:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c456:	4619      	mov	r1, r3
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	791a      	ldrb	r2, [r3, #4]
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	440b      	add	r3, r1
 801c460:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801c464:	89ba      	ldrh	r2, [r7, #12]
 801c466:	897b      	ldrh	r3, [r7, #10]
 801c468:	4413      	add	r3, r2
 801c46a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c46e:	dd20      	ble.n	801c4b2 <slave_handle_write_multi_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	7b5a      	ldrb	r2, [r3, #13]
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c47a:	1c59      	adds	r1, r3, #1
 801c47c:	b288      	uxth	r0, r1
 801c47e:	6879      	ldr	r1, [r7, #4]
 801c480:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801c484:	4619      	mov	r1, r3
 801c486:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801c48a:	b2da      	uxtb	r2, r3
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	440b      	add	r3, r1
 801c490:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c49a:	1c5a      	adds	r2, r3, #1
 801c49c:	b291      	uxth	r1, r2
 801c49e:	687a      	ldr	r2, [r7, #4]
 801c4a0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c4a4:	461a      	mov	r2, r3
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	4413      	add	r3, r2
 801c4aa:	2202      	movs	r2, #2
 801c4ac:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
        }
    }
}
 801c4b0:	e027      	b.n	801c502 <slave_handle_write_multi_coils+0xf4>
        slave_compose_write_reply_tx_buffer(slave);
 801c4b2:	6878      	ldr	r0, [r7, #4]
 801c4b4:	f7ff fefb 	bl	801c2ae <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 801c4b8:	2300      	movs	r3, #0
 801c4ba:	81fb      	strh	r3, [r7, #14]
 801c4bc:	e01d      	b.n	801c4fa <slave_handle_write_multi_coils+0xec>
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
 801c4be:	89fb      	ldrh	r3, [r7, #14]
 801c4c0:	08db      	lsrs	r3, r3, #3
 801c4c2:	b29b      	uxth	r3, r3
 801c4c4:	3307      	adds	r3, #7
 801c4c6:	687a      	ldr	r2, [r7, #4]
 801c4c8:	4413      	add	r3, r2
 801c4ca:	7b1b      	ldrb	r3, [r3, #12]
 801c4cc:	461a      	mov	r2, r3
 801c4ce:	89fb      	ldrh	r3, [r7, #14]
 801c4d0:	f003 0307 	and.w	r3, r3, #7
 801c4d4:	fa42 f303 	asr.w	r3, r2, r3
 801c4d8:	b2d9      	uxtb	r1, r3
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 801c4e0:	89b8      	ldrh	r0, [r7, #12]
 801c4e2:	89fb      	ldrh	r3, [r7, #14]
 801c4e4:	4403      	add	r3, r0
 801c4e6:	f001 0101 	and.w	r1, r1, #1
 801c4ea:	b2c9      	uxtb	r1, r1
 801c4ec:	4413      	add	r3, r2
 801c4ee:	460a      	mov	r2, r1
 801c4f0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        for (uint16_t i = 0; i < qty; i++)
 801c4f4:	89fb      	ldrh	r3, [r7, #14]
 801c4f6:	3301      	adds	r3, #1
 801c4f8:	81fb      	strh	r3, [r7, #14]
 801c4fa:	89fa      	ldrh	r2, [r7, #14]
 801c4fc:	897b      	ldrh	r3, [r7, #10]
 801c4fe:	429a      	cmp	r2, r3
 801c500:	d3dd      	bcc.n	801c4be <slave_handle_write_multi_coils+0xb0>
}
 801c502:	bf00      	nop
 801c504:	3710      	adds	r7, #16
 801c506:	46bd      	mov	sp, r7
 801c508:	bd80      	pop	{r7, pc}

0801c50a <slave_handle_write_single_holding_reg>:

static void slave_handle_write_single_holding_reg(modbus_slave *slave)
{
 801c50a:	b580      	push	{r7, lr}
 801c50c:	b084      	sub	sp, #16
 801c50e:	af00      	add	r7, sp, #0
 801c510:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	7b9b      	ldrb	r3, [r3, #14]
 801c516:	b29b      	uxth	r3, r3
 801c518:	021b      	lsls	r3, r3, #8
 801c51a:	b29a      	uxth	r2, r3
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	7bdb      	ldrb	r3, [r3, #15]
 801c520:	b29b      	uxth	r3, r3
 801c522:	4413      	add	r3, r2
 801c524:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	2200      	movs	r2, #0
 801c52a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c534:	1c5a      	adds	r2, r3, #1
 801c536:	b291      	uxth	r1, r2
 801c538:	687a      	ldr	r2, [r7, #4]
 801c53a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c53e:	4619      	mov	r1, r3
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	791a      	ldrb	r2, [r3, #4]
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	440b      	add	r3, r1
 801c548:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + 1 > MODBUS_REG_LENGTH)
 801c54c:	89fb      	ldrh	r3, [r7, #14]
 801c54e:	2bff      	cmp	r3, #255	; 0xff
 801c550:	d920      	bls.n	801c594 <slave_handle_write_single_holding_reg+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	7b5a      	ldrb	r2, [r3, #13]
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c55c:	1c59      	adds	r1, r3, #1
 801c55e:	b288      	uxth	r0, r1
 801c560:	6879      	ldr	r1, [r7, #4]
 801c562:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801c566:	4619      	mov	r1, r3
 801c568:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801c56c:	b2da      	uxtb	r2, r3
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	440b      	add	r3, r1
 801c572:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c57c:	1c5a      	adds	r2, r3, #1
 801c57e:	b291      	uxth	r1, r2
 801c580:	687a      	ldr	r2, [r7, #4]
 801c582:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c586:	461a      	mov	r2, r3
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	4413      	add	r3, r2
 801c58c:	2202      	movs	r2, #2
 801c58e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
    }
}
 801c592:	e015      	b.n	801c5c0 <slave_handle_write_single_holding_reg+0xb6>
        slave_compose_write_reply_tx_buffer(slave);
 801c594:	6878      	ldr	r0, [r7, #4]
 801c596:	f7ff fe8a 	bl	801c2ae <slave_compose_write_reply_tx_buffer>
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	7c1b      	ldrb	r3, [r3, #16]
 801c59e:	b29b      	uxth	r3, r3
 801c5a0:	021b      	lsls	r3, r3, #8
 801c5a2:	b29a      	uxth	r2, r3
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	7c5b      	ldrb	r3, [r3, #17]
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	4413      	add	r3, r2
 801c5ac:	b299      	uxth	r1, r3
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801c5b4:	89fa      	ldrh	r2, [r7, #14]
 801c5b6:	b209      	sxth	r1, r1
 801c5b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801c5bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 801c5c0:	bf00      	nop
 801c5c2:	3710      	adds	r7, #16
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	bd80      	pop	{r7, pc}

0801c5c8 <slave_handle_write_multi_holding_regs>:

static void slave_handle_write_multi_holding_regs(modbus_slave *slave)
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b084      	sub	sp, #16
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	7b9b      	ldrb	r3, [r3, #14]
 801c5d4:	b29b      	uxth	r3, r3
 801c5d6:	021b      	lsls	r3, r3, #8
 801c5d8:	b29a      	uxth	r2, r3
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	7bdb      	ldrb	r3, [r3, #15]
 801c5de:	b29b      	uxth	r3, r3
 801c5e0:	4413      	add	r3, r2
 801c5e2:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	7c1b      	ldrb	r3, [r3, #16]
 801c5e8:	b29b      	uxth	r3, r3
 801c5ea:	021b      	lsls	r3, r3, #8
 801c5ec:	b29a      	uxth	r2, r3
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	7c5b      	ldrb	r3, [r3, #17]
 801c5f2:	b29b      	uxth	r3, r3
 801c5f4:	4413      	add	r3, r2
 801c5f6:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c606:	1c5a      	adds	r2, r3, #1
 801c608:	b291      	uxth	r1, r2
 801c60a:	687a      	ldr	r2, [r7, #4]
 801c60c:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c610:	4619      	mov	r1, r3
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	791a      	ldrb	r2, [r3, #4]
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	440b      	add	r3, r1
 801c61a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 801c61e:	89ba      	ldrh	r2, [r7, #12]
 801c620:	897b      	ldrh	r3, [r7, #10]
 801c622:	4413      	add	r3, r2
 801c624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c628:	dd20      	ble.n	801c66c <slave_handle_write_multi_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	7b5a      	ldrb	r2, [r3, #13]
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c634:	1c59      	adds	r1, r3, #1
 801c636:	b288      	uxth	r0, r1
 801c638:	6879      	ldr	r1, [r7, #4]
 801c63a:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801c63e:	4619      	mov	r1, r3
 801c640:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801c644:	b2da      	uxtb	r2, r3
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	440b      	add	r3, r1
 801c64a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c654:	1c5a      	adds	r2, r3, #1
 801c656:	b291      	uxth	r1, r2
 801c658:	687a      	ldr	r2, [r7, #4]
 801c65a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c65e:	461a      	mov	r2, r3
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	4413      	add	r3, r2
 801c664:	2202      	movs	r2, #2
 801c666:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
        }
    }
}
 801c66a:	e029      	b.n	801c6c0 <slave_handle_write_multi_holding_regs+0xf8>
        slave_compose_write_reply_tx_buffer(slave);
 801c66c:	6878      	ldr	r0, [r7, #4]
 801c66e:	f7ff fe1e 	bl	801c2ae <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 801c672:	2300      	movs	r3, #0
 801c674:	81fb      	strh	r3, [r7, #14]
 801c676:	e01f      	b.n	801c6b8 <slave_handle_write_multi_holding_regs+0xf0>
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
 801c678:	89fb      	ldrh	r3, [r7, #14]
 801c67a:	005b      	lsls	r3, r3, #1
 801c67c:	3307      	adds	r3, #7
 801c67e:	687a      	ldr	r2, [r7, #4]
 801c680:	4413      	add	r3, r2
 801c682:	7b1b      	ldrb	r3, [r3, #12]
 801c684:	b29b      	uxth	r3, r3
 801c686:	021b      	lsls	r3, r3, #8
 801c688:	b29a      	uxth	r2, r3
 801c68a:	89fb      	ldrh	r3, [r7, #14]
 801c68c:	3304      	adds	r3, #4
 801c68e:	005b      	lsls	r3, r3, #1
 801c690:	6879      	ldr	r1, [r7, #4]
 801c692:	440b      	add	r3, r1
 801c694:	7b1b      	ldrb	r3, [r3, #12]
 801c696:	b29b      	uxth	r3, r3
 801c698:	4413      	add	r3, r2
 801c69a:	b298      	uxth	r0, r3
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801c6a2:	89b9      	ldrh	r1, [r7, #12]
 801c6a4:	89fa      	ldrh	r2, [r7, #14]
 801c6a6:	440a      	add	r2, r1
 801c6a8:	b201      	sxth	r1, r0
 801c6aa:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801c6ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint16_t i = 0; i < qty; i++)
 801c6b2:	89fb      	ldrh	r3, [r7, #14]
 801c6b4:	3301      	adds	r3, #1
 801c6b6:	81fb      	strh	r3, [r7, #14]
 801c6b8:	89fa      	ldrh	r2, [r7, #14]
 801c6ba:	897b      	ldrh	r3, [r7, #10]
 801c6bc:	429a      	cmp	r2, r3
 801c6be:	d3db      	bcc.n	801c678 <slave_handle_write_multi_holding_regs+0xb0>
}
 801c6c0:	bf00      	nop
 801c6c2:	3710      	adds	r7, #16
 801c6c4:	46bd      	mov	sp, r7
 801c6c6:	bd80      	pop	{r7, pc}

0801c6c8 <slave_response>:

static void slave_response(modbus_slave *slave)
{
 801c6c8:	b580      	push	{r7, lr}
 801c6ca:	b082      	sub	sp, #8
 801c6cc:	af00      	add	r7, sp, #0
 801c6ce:	6078      	str	r0, [r7, #4]
    if (slave_validate_cmd(slave) != osOK)
 801c6d0:	6878      	ldr	r0, [r7, #4]
 801c6d2:	f7ff faaf 	bl	801bc34 <slave_validate_cmd>
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	f040 80b2 	bne.w	801c842 <slave_response+0x17a>
    {
        return;
    }
    slave->func_code = slave->rx_buf[1];
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	7b5a      	ldrb	r2, [r3, #13]
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	715a      	strb	r2, [r3, #5]
    if (slave->func_code == MODBUS_FC_READ_DISCRETE_INPUTS)
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	795b      	ldrb	r3, [r3, #5]
 801c6ea:	2b02      	cmp	r3, #2
 801c6ec:	d103      	bne.n	801c6f6 <slave_response+0x2e>
    {
        slave_handle_read_discs(slave);
 801c6ee:	6878      	ldr	r0, [r7, #4]
 801c6f0:	f7ff fadd 	bl	801bcae <slave_handle_read_discs>
 801c6f4:	e06a      	b.n	801c7cc <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_COILS)
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	795b      	ldrb	r3, [r3, #5]
 801c6fa:	2b01      	cmp	r3, #1
 801c6fc:	d103      	bne.n	801c706 <slave_response+0x3e>
    {
        slave_handle_read_coils(slave);
 801c6fe:	6878      	ldr	r0, [r7, #4]
 801c700:	f7ff fba0 	bl	801be44 <slave_handle_read_coils>
 801c704:	e062      	b.n	801c7cc <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_INPUT_REGISTERS)
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	795b      	ldrb	r3, [r3, #5]
 801c70a:	2b04      	cmp	r3, #4
 801c70c:	d103      	bne.n	801c716 <slave_response+0x4e>
    {
        slave_handle_read_input_regs(slave);
 801c70e:	6878      	ldr	r0, [r7, #4]
 801c710:	f7ff fc65 	bl	801bfde <slave_handle_read_input_regs>
 801c714:	e05a      	b.n	801c7cc <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_HOLDING_REGISTERS)
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	795b      	ldrb	r3, [r3, #5]
 801c71a:	2b03      	cmp	r3, #3
 801c71c:	d103      	bne.n	801c726 <slave_response+0x5e>
    {
        slave_handle_read_holding_regs(slave);
 801c71e:	6878      	ldr	r0, [r7, #4]
 801c720:	f7ff fd11 	bl	801c146 <slave_handle_read_holding_regs>
 801c724:	e052      	b.n	801c7cc <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_COIL)
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	795b      	ldrb	r3, [r3, #5]
 801c72a:	2b05      	cmp	r3, #5
 801c72c:	d103      	bne.n	801c736 <slave_response+0x6e>
    {
        slave_handle_write_single_coil(slave);
 801c72e:	6878      	ldr	r0, [r7, #4]
 801c730:	f7ff fe12 	bl	801c358 <slave_handle_write_single_coil>
 801c734:	e04a      	b.n	801c7cc <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_COILS)
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	795b      	ldrb	r3, [r3, #5]
 801c73a:	2b0f      	cmp	r3, #15
 801c73c:	d103      	bne.n	801c746 <slave_response+0x7e>
    {
        slave_handle_write_multi_coils(slave);
 801c73e:	6878      	ldr	r0, [r7, #4]
 801c740:	f7ff fe65 	bl	801c40e <slave_handle_write_multi_coils>
 801c744:	e042      	b.n	801c7cc <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_REGISTER)
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	795b      	ldrb	r3, [r3, #5]
 801c74a:	2b06      	cmp	r3, #6
 801c74c:	d103      	bne.n	801c756 <slave_response+0x8e>
    {
        slave_handle_write_single_holding_reg(slave);
 801c74e:	6878      	ldr	r0, [r7, #4]
 801c750:	f7ff fedb 	bl	801c50a <slave_handle_write_single_holding_reg>
 801c754:	e03a      	b.n	801c7cc <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_REGISTERS)
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	795b      	ldrb	r3, [r3, #5]
 801c75a:	2b10      	cmp	r3, #16
 801c75c:	d103      	bne.n	801c766 <slave_response+0x9e>
    {
        slave_handle_write_multi_holding_regs(slave);
 801c75e:	6878      	ldr	r0, [r7, #4]
 801c760:	f7ff ff32 	bl	801c5c8 <slave_handle_write_multi_holding_regs>
 801c764:	e032      	b.n	801c7cc <slave_response+0x104>
    }
    else
    {
        slave->tx_len = 0;
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	2200      	movs	r2, #0
 801c76a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
        slave->tx_buf[slave->tx_len++] = slave->slave_id;
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c774:	1c5a      	adds	r2, r3, #1
 801c776:	b291      	uxth	r1, r2
 801c778:	687a      	ldr	r2, [r7, #4]
 801c77a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c77e:	4619      	mov	r1, r3
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	791a      	ldrb	r2, [r3, #4]
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	440b      	add	r3, r1
 801c788:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	7b5a      	ldrb	r2, [r3, #13]
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c796:	1c59      	adds	r1, r3, #1
 801c798:	b288      	uxth	r0, r1
 801c79a:	6879      	ldr	r1, [r7, #4]
 801c79c:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 801c7a0:	4619      	mov	r1, r3
 801c7a2:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 801c7a6:	b2da      	uxtb	r2, r3
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	440b      	add	r3, r1
 801c7ac:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x01;
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c7b6:	1c5a      	adds	r2, r3, #1
 801c7b8:	b291      	uxth	r1, r2
 801c7ba:	687a      	ldr	r2, [r7, #4]
 801c7bc:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c7c0:	461a      	mov	r2, r3
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	4413      	add	r3, r2
 801c7c6:	2201      	movs	r2, #1
 801c7c8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    }
    slave->buff_len = slave->tx_len;
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->tx_buf);
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	f203 230e 	addw	r3, r3, #526	; 0x20e
 801c7dc:	4619      	mov	r1, r3
 801c7de:	6878      	ldr	r0, [r7, #4]
 801c7e0:	f7ff f9ec 	bl	801bbbc <slave_crc16>
    slave->tx_buf[slave->tx_len++] = slave->crc_hi;
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c7ea:	1c5a      	adds	r2, r3, #1
 801c7ec:	b291      	uxth	r1, r2
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c7f4:	4619      	mov	r1, r3
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	799a      	ldrb	r2, [r3, #6]
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	440b      	add	r3, r1
 801c7fe:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->crc_lo;
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c808:	1c5a      	adds	r2, r3, #1
 801c80a:	b291      	uxth	r1, r2
 801c80c:	687a      	ldr	r2, [r7, #4]
 801c80e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 801c812:	4619      	mov	r1, r3
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	79da      	ldrb	r2, [r3, #7]
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	440b      	add	r3, r1
 801c81c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave_set_tx_rx(slave, tx);
 801c820:	2101      	movs	r1, #1
 801c822:	6878      	ldr	r0, [r7, #4]
 801c824:	f000 f8ac 	bl	801c980 <slave_set_tx_rx>
    HAL_UART_Transmit_DMA(slave->uart_port->uart, slave->tx_buf, slave->tx_len);
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	6818      	ldr	r0, [r3, #0]
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	f203 210e 	addw	r1, r3, #526	; 0x20e
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 801c83a:	461a      	mov	r2, r3
 801c83c:	f7ec ff92 	bl	8009764 <HAL_UART_Transmit_DMA>
 801c840:	e000      	b.n	801c844 <slave_response+0x17c>
        return;
 801c842:	bf00      	nop
}
 801c844:	3708      	adds	r7, #8
 801c846:	46bd      	mov	sp, r7
 801c848:	bd80      	pop	{r7, pc}

0801c84a <ostimer_callback>:

static void ostimer_callback(void *args)
{
 801c84a:	b580      	push	{r7, lr}
 801c84c:	b084      	sub	sp, #16
 801c84e:	af00      	add	r7, sp, #0
 801c850:	6078      	str	r0, [r7, #4]
    modbus_slave *slave = args;
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	60fb      	str	r3, [r7, #12]
    if (slave->rx_len == (MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->NDTR))
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801c85c:	461a      	mov	r2, r3
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	685b      	ldr	r3, [r3, #4]
 801c86a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801c86e:	429a      	cmp	r2, r3
 801c870:	d109      	bne.n	801c886 <ostimer_callback+0x3c>
    {
        slave->idle_timer_flag = 1;
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	2201      	movs	r2, #1
 801c876:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(slave->idle_sem);
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801c880:	4618      	mov	r0, r3
 801c882:	f7ef f963 	bl	800bb4c <osSemaphoreRelease>
    }
}
 801c886:	bf00      	nop
 801c888:	3710      	adds	r7, #16
 801c88a:	46bd      	mov	sp, r7
 801c88c:	bd80      	pop	{r7, pc}
	...

0801c890 <slave_init>:

void slave_init(modbus_slave *slave, modbus_port *port, uint16_t slave_id, modbus_regs *regs_ptr)
{
 801c890:	b580      	push	{r7, lr}
 801c892:	b084      	sub	sp, #16
 801c894:	af00      	add	r7, sp, #0
 801c896:	60f8      	str	r0, [r7, #12]
 801c898:	60b9      	str	r1, [r7, #8]
 801c89a:	603b      	str	r3, [r7, #0]
 801c89c:	4613      	mov	r3, r2
 801c89e:	80fb      	strh	r3, [r7, #6]
    slave->idle_sem = osSemaphoreNew(1, 0, NULL);
 801c8a0:	2200      	movs	r2, #0
 801c8a2:	2100      	movs	r1, #0
 801c8a4:	2001      	movs	r0, #1
 801c8a6:	f7ef f875 	bl	800b994 <osSemaphoreNew>
 801c8aa:	4602      	mov	r2, r0
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    slave->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)slave, NULL);
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	68fa      	ldr	r2, [r7, #12]
 801c8b6:	2100      	movs	r1, #0
 801c8b8:	4810      	ldr	r0, [pc, #64]	; (801c8fc <slave_init+0x6c>)
 801c8ba:	f7ee feb3 	bl	800b624 <osTimerNew>
 801c8be:	4602      	mov	r2, r0
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    slave->uart_port = port;
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	68ba      	ldr	r2, [r7, #8]
 801c8ca:	601a      	str	r2, [r3, #0]
    slave->slave_id = slave_id;
 801c8cc:	88fb      	ldrh	r3, [r7, #6]
 801c8ce:	b2da      	uxtb	r2, r3
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	711a      	strb	r2, [r3, #4]
    slave->regs = regs_ptr;
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	683a      	ldr	r2, [r7, #0]
 801c8d8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    __HAL_UART_ENABLE_IT(slave->uart_port->uart, UART_IT_IDLE);
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	68da      	ldr	r2, [r3, #12]
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	f042 0210 	orr.w	r2, r2, #16
 801c8f2:	60da      	str	r2, [r3, #12]
}
 801c8f4:	bf00      	nop
 801c8f6:	3710      	adds	r7, #16
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	bd80      	pop	{r7, pc}
 801c8fc:	0801c84b 	.word	0x0801c84b

0801c900 <slave_uart_idle>:

void slave_uart_idle(modbus_slave *slave)
{
 801c900:	b580      	push	{r7, lr}
 801c902:	b084      	sub	sp, #16
 801c904:	af00      	add	r7, sp, #0
 801c906:	6078      	str	r0, [r7, #4]
    if (((READ_REG(slave->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(slave->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	f003 0310 	and.w	r3, r3, #16
 801c916:	2b00      	cmp	r3, #0
 801c918:	d02e      	beq.n	801c978 <slave_uart_idle+0x78>
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	68db      	ldr	r3, [r3, #12]
 801c924:	f003 0310 	and.w	r3, r3, #16
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d025      	beq.n	801c978 <slave_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(slave->uart_port->uart);
 801c92c:	2300      	movs	r3, #0
 801c92e:	60fb      	str	r3, [r7, #12]
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	60fb      	str	r3, [r7, #12]
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	685b      	ldr	r3, [r3, #4]
 801c946:	60fb      	str	r3, [r7, #12]
 801c948:	68fb      	ldr	r3, [r7, #12]
        slave->rx_len = MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->NDTR;
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	685b      	ldr	r3, [r3, #4]
 801c956:	b29b      	uxth	r3, r3
 801c958:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801c95c:	b29a      	uxth	r2, r3
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
        slave->idle_timer_flag = 0;
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	2200      	movs	r2, #0
 801c968:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(slave->idle_sem);
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801c972:	4618      	mov	r0, r3
 801c974:	f7ef f8ea 	bl	800bb4c <osSemaphoreRelease>
    }
}
 801c978:	bf00      	nop
 801c97a:	3710      	adds	r7, #16
 801c97c:	46bd      	mov	sp, r7
 801c97e:	bd80      	pop	{r7, pc}

0801c980 <slave_set_tx_rx>:

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 801c980:	b580      	push	{r7, lr}
 801c982:	b082      	sub	sp, #8
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
 801c988:	460b      	mov	r3, r1
 801c98a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	681b      	ldr	r3, [r3, #0]
 801c990:	6858      	ldr	r0, [r3, #4]
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	8919      	ldrh	r1, [r3, #8]
 801c998:	78fb      	ldrb	r3, [r7, #3]
 801c99a:	2b01      	cmp	r3, #1
 801c99c:	bf0c      	ite	eq
 801c99e:	2301      	moveq	r3, #1
 801c9a0:	2300      	movne	r3, #0
 801c9a2:	b2db      	uxtb	r3, r3
 801c9a4:	461a      	mov	r2, r3
 801c9a6:	f7e9 fd51 	bl	800644c <HAL_GPIO_WritePin>
}
 801c9aa:	bf00      	nop
 801c9ac:	3708      	adds	r7, #8
 801c9ae:	46bd      	mov	sp, r7
 801c9b0:	bd80      	pop	{r7, pc}

0801c9b2 <slave_wait_request>:

void slave_wait_request(modbus_slave *slave)
{
 801c9b2:	b580      	push	{r7, lr}
 801c9b4:	b082      	sub	sp, #8
 801c9b6:	af00      	add	r7, sp, #0
 801c9b8:	6078      	str	r0, [r7, #4]
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 801c9ba:	e024      	b.n	801ca06 <slave_wait_request+0x54>
    {
        if (slave->idle_timer_flag == 0)
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d107      	bne.n	801c9d6 <slave_wait_request+0x24>
        {
            osTimerStart(slave->idle_timer, 2);
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 801c9cc:	2102      	movs	r1, #2
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	f7ee fea4 	bl	800b71c <osTimerStart>
 801c9d4:	e017      	b.n	801ca06 <slave_wait_request+0x54>
        }
        else if (slave->idle_timer_flag == 1)
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801c9dc:	2b01      	cmp	r3, #1
 801c9de:	d112      	bne.n	801ca06 <slave_wait_request+0x54>
        {
            HAL_UART_DMAStop(slave->uart_port->uart);
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	4618      	mov	r0, r3
 801c9e8:	f7ec ff6a 	bl	80098c0 <HAL_UART_DMAStop>
            slave_response(slave);
 801c9ec:	6878      	ldr	r0, [r7, #4]
 801c9ee:	f7ff fe6b 	bl	801c6c8 <slave_response>
            HAL_UART_Receive_DMA(slave->uart_port->uart, slave->rx_buf, MB_SLAVE_BUFFER_LENGTH);
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	6818      	ldr	r0, [r3, #0]
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	330c      	adds	r3, #12
 801c9fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ca00:	4619      	mov	r1, r3
 801ca02:	f7ec ff2d 	bl	8009860 <HAL_UART_Receive_DMA>
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 801ca0c:	f04f 31ff 	mov.w	r1, #4294967295
 801ca10:	4618      	mov	r0, r3
 801ca12:	f7ef f849 	bl	800baa8 <osSemaphoreAcquire>
 801ca16:	4603      	mov	r3, r0
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d0cf      	beq.n	801c9bc <slave_wait_request+0xa>
        }
    }
}
 801ca1c:	bf00      	nop
 801ca1e:	bf00      	nop
 801ca20:	3708      	adds	r7, #8
 801ca22:	46bd      	mov	sp, r7
 801ca24:	bd80      	pop	{r7, pc}
	...

0801ca28 <std>:
 801ca28:	2300      	movs	r3, #0
 801ca2a:	b510      	push	{r4, lr}
 801ca2c:	4604      	mov	r4, r0
 801ca2e:	e9c0 3300 	strd	r3, r3, [r0]
 801ca32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ca36:	6083      	str	r3, [r0, #8]
 801ca38:	8181      	strh	r1, [r0, #12]
 801ca3a:	6643      	str	r3, [r0, #100]	; 0x64
 801ca3c:	81c2      	strh	r2, [r0, #14]
 801ca3e:	6183      	str	r3, [r0, #24]
 801ca40:	4619      	mov	r1, r3
 801ca42:	2208      	movs	r2, #8
 801ca44:	305c      	adds	r0, #92	; 0x5c
 801ca46:	f000 f928 	bl	801cc9a <memset>
 801ca4a:	4b05      	ldr	r3, [pc, #20]	; (801ca60 <std+0x38>)
 801ca4c:	6263      	str	r3, [r4, #36]	; 0x24
 801ca4e:	4b05      	ldr	r3, [pc, #20]	; (801ca64 <std+0x3c>)
 801ca50:	62a3      	str	r3, [r4, #40]	; 0x28
 801ca52:	4b05      	ldr	r3, [pc, #20]	; (801ca68 <std+0x40>)
 801ca54:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ca56:	4b05      	ldr	r3, [pc, #20]	; (801ca6c <std+0x44>)
 801ca58:	6224      	str	r4, [r4, #32]
 801ca5a:	6323      	str	r3, [r4, #48]	; 0x30
 801ca5c:	bd10      	pop	{r4, pc}
 801ca5e:	bf00      	nop
 801ca60:	0801cf05 	.word	0x0801cf05
 801ca64:	0801cf27 	.word	0x0801cf27
 801ca68:	0801cf5f 	.word	0x0801cf5f
 801ca6c:	0801cf83 	.word	0x0801cf83

0801ca70 <_cleanup_r>:
 801ca70:	4901      	ldr	r1, [pc, #4]	; (801ca78 <_cleanup_r+0x8>)
 801ca72:	f000 b8af 	b.w	801cbd4 <_fwalk_reent>
 801ca76:	bf00      	nop
 801ca78:	0801d125 	.word	0x0801d125

0801ca7c <__sfmoreglue>:
 801ca7c:	b570      	push	{r4, r5, r6, lr}
 801ca7e:	1e4a      	subs	r2, r1, #1
 801ca80:	2568      	movs	r5, #104	; 0x68
 801ca82:	4355      	muls	r5, r2
 801ca84:	460e      	mov	r6, r1
 801ca86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ca8a:	f000 f90f 	bl	801ccac <_malloc_r>
 801ca8e:	4604      	mov	r4, r0
 801ca90:	b140      	cbz	r0, 801caa4 <__sfmoreglue+0x28>
 801ca92:	2100      	movs	r1, #0
 801ca94:	e9c0 1600 	strd	r1, r6, [r0]
 801ca98:	300c      	adds	r0, #12
 801ca9a:	60a0      	str	r0, [r4, #8]
 801ca9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801caa0:	f000 f8fb 	bl	801cc9a <memset>
 801caa4:	4620      	mov	r0, r4
 801caa6:	bd70      	pop	{r4, r5, r6, pc}

0801caa8 <__sfp_lock_acquire>:
 801caa8:	4801      	ldr	r0, [pc, #4]	; (801cab0 <__sfp_lock_acquire+0x8>)
 801caaa:	f000 b8d8 	b.w	801cc5e <__retarget_lock_acquire_recursive>
 801caae:	bf00      	nop
 801cab0:	20013a48 	.word	0x20013a48

0801cab4 <__sfp_lock_release>:
 801cab4:	4801      	ldr	r0, [pc, #4]	; (801cabc <__sfp_lock_release+0x8>)
 801cab6:	f000 b8d3 	b.w	801cc60 <__retarget_lock_release_recursive>
 801caba:	bf00      	nop
 801cabc:	20013a48 	.word	0x20013a48

0801cac0 <__sinit_lock_acquire>:
 801cac0:	4801      	ldr	r0, [pc, #4]	; (801cac8 <__sinit_lock_acquire+0x8>)
 801cac2:	f000 b8cc 	b.w	801cc5e <__retarget_lock_acquire_recursive>
 801cac6:	bf00      	nop
 801cac8:	20013a43 	.word	0x20013a43

0801cacc <__sinit_lock_release>:
 801cacc:	4801      	ldr	r0, [pc, #4]	; (801cad4 <__sinit_lock_release+0x8>)
 801cace:	f000 b8c7 	b.w	801cc60 <__retarget_lock_release_recursive>
 801cad2:	bf00      	nop
 801cad4:	20013a43 	.word	0x20013a43

0801cad8 <__sinit>:
 801cad8:	b510      	push	{r4, lr}
 801cada:	4604      	mov	r4, r0
 801cadc:	f7ff fff0 	bl	801cac0 <__sinit_lock_acquire>
 801cae0:	69a3      	ldr	r3, [r4, #24]
 801cae2:	b11b      	cbz	r3, 801caec <__sinit+0x14>
 801cae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cae8:	f7ff bff0 	b.w	801cacc <__sinit_lock_release>
 801caec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801caf0:	6523      	str	r3, [r4, #80]	; 0x50
 801caf2:	4b13      	ldr	r3, [pc, #76]	; (801cb40 <__sinit+0x68>)
 801caf4:	4a13      	ldr	r2, [pc, #76]	; (801cb44 <__sinit+0x6c>)
 801caf6:	681b      	ldr	r3, [r3, #0]
 801caf8:	62a2      	str	r2, [r4, #40]	; 0x28
 801cafa:	42a3      	cmp	r3, r4
 801cafc:	bf04      	itt	eq
 801cafe:	2301      	moveq	r3, #1
 801cb00:	61a3      	streq	r3, [r4, #24]
 801cb02:	4620      	mov	r0, r4
 801cb04:	f000 f820 	bl	801cb48 <__sfp>
 801cb08:	6060      	str	r0, [r4, #4]
 801cb0a:	4620      	mov	r0, r4
 801cb0c:	f000 f81c 	bl	801cb48 <__sfp>
 801cb10:	60a0      	str	r0, [r4, #8]
 801cb12:	4620      	mov	r0, r4
 801cb14:	f000 f818 	bl	801cb48 <__sfp>
 801cb18:	2200      	movs	r2, #0
 801cb1a:	60e0      	str	r0, [r4, #12]
 801cb1c:	2104      	movs	r1, #4
 801cb1e:	6860      	ldr	r0, [r4, #4]
 801cb20:	f7ff ff82 	bl	801ca28 <std>
 801cb24:	68a0      	ldr	r0, [r4, #8]
 801cb26:	2201      	movs	r2, #1
 801cb28:	2109      	movs	r1, #9
 801cb2a:	f7ff ff7d 	bl	801ca28 <std>
 801cb2e:	68e0      	ldr	r0, [r4, #12]
 801cb30:	2202      	movs	r2, #2
 801cb32:	2112      	movs	r1, #18
 801cb34:	f7ff ff78 	bl	801ca28 <std>
 801cb38:	2301      	movs	r3, #1
 801cb3a:	61a3      	str	r3, [r4, #24]
 801cb3c:	e7d2      	b.n	801cae4 <__sinit+0xc>
 801cb3e:	bf00      	nop
 801cb40:	08021660 	.word	0x08021660
 801cb44:	0801ca71 	.word	0x0801ca71

0801cb48 <__sfp>:
 801cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb4a:	4607      	mov	r7, r0
 801cb4c:	f7ff ffac 	bl	801caa8 <__sfp_lock_acquire>
 801cb50:	4b1e      	ldr	r3, [pc, #120]	; (801cbcc <__sfp+0x84>)
 801cb52:	681e      	ldr	r6, [r3, #0]
 801cb54:	69b3      	ldr	r3, [r6, #24]
 801cb56:	b913      	cbnz	r3, 801cb5e <__sfp+0x16>
 801cb58:	4630      	mov	r0, r6
 801cb5a:	f7ff ffbd 	bl	801cad8 <__sinit>
 801cb5e:	3648      	adds	r6, #72	; 0x48
 801cb60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cb64:	3b01      	subs	r3, #1
 801cb66:	d503      	bpl.n	801cb70 <__sfp+0x28>
 801cb68:	6833      	ldr	r3, [r6, #0]
 801cb6a:	b30b      	cbz	r3, 801cbb0 <__sfp+0x68>
 801cb6c:	6836      	ldr	r6, [r6, #0]
 801cb6e:	e7f7      	b.n	801cb60 <__sfp+0x18>
 801cb70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cb74:	b9d5      	cbnz	r5, 801cbac <__sfp+0x64>
 801cb76:	4b16      	ldr	r3, [pc, #88]	; (801cbd0 <__sfp+0x88>)
 801cb78:	60e3      	str	r3, [r4, #12]
 801cb7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cb7e:	6665      	str	r5, [r4, #100]	; 0x64
 801cb80:	f000 f86c 	bl	801cc5c <__retarget_lock_init_recursive>
 801cb84:	f7ff ff96 	bl	801cab4 <__sfp_lock_release>
 801cb88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801cb8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cb90:	6025      	str	r5, [r4, #0]
 801cb92:	61a5      	str	r5, [r4, #24]
 801cb94:	2208      	movs	r2, #8
 801cb96:	4629      	mov	r1, r5
 801cb98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cb9c:	f000 f87d 	bl	801cc9a <memset>
 801cba0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cba4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cba8:	4620      	mov	r0, r4
 801cbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cbac:	3468      	adds	r4, #104	; 0x68
 801cbae:	e7d9      	b.n	801cb64 <__sfp+0x1c>
 801cbb0:	2104      	movs	r1, #4
 801cbb2:	4638      	mov	r0, r7
 801cbb4:	f7ff ff62 	bl	801ca7c <__sfmoreglue>
 801cbb8:	4604      	mov	r4, r0
 801cbba:	6030      	str	r0, [r6, #0]
 801cbbc:	2800      	cmp	r0, #0
 801cbbe:	d1d5      	bne.n	801cb6c <__sfp+0x24>
 801cbc0:	f7ff ff78 	bl	801cab4 <__sfp_lock_release>
 801cbc4:	230c      	movs	r3, #12
 801cbc6:	603b      	str	r3, [r7, #0]
 801cbc8:	e7ee      	b.n	801cba8 <__sfp+0x60>
 801cbca:	bf00      	nop
 801cbcc:	08021660 	.word	0x08021660
 801cbd0:	ffff0001 	.word	0xffff0001

0801cbd4 <_fwalk_reent>:
 801cbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbd8:	4606      	mov	r6, r0
 801cbda:	4688      	mov	r8, r1
 801cbdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cbe0:	2700      	movs	r7, #0
 801cbe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cbe6:	f1b9 0901 	subs.w	r9, r9, #1
 801cbea:	d505      	bpl.n	801cbf8 <_fwalk_reent+0x24>
 801cbec:	6824      	ldr	r4, [r4, #0]
 801cbee:	2c00      	cmp	r4, #0
 801cbf0:	d1f7      	bne.n	801cbe2 <_fwalk_reent+0xe>
 801cbf2:	4638      	mov	r0, r7
 801cbf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cbf8:	89ab      	ldrh	r3, [r5, #12]
 801cbfa:	2b01      	cmp	r3, #1
 801cbfc:	d907      	bls.n	801cc0e <_fwalk_reent+0x3a>
 801cbfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cc02:	3301      	adds	r3, #1
 801cc04:	d003      	beq.n	801cc0e <_fwalk_reent+0x3a>
 801cc06:	4629      	mov	r1, r5
 801cc08:	4630      	mov	r0, r6
 801cc0a:	47c0      	blx	r8
 801cc0c:	4307      	orrs	r7, r0
 801cc0e:	3568      	adds	r5, #104	; 0x68
 801cc10:	e7e9      	b.n	801cbe6 <_fwalk_reent+0x12>
	...

0801cc14 <__libc_init_array>:
 801cc14:	b570      	push	{r4, r5, r6, lr}
 801cc16:	4d0d      	ldr	r5, [pc, #52]	; (801cc4c <__libc_init_array+0x38>)
 801cc18:	4c0d      	ldr	r4, [pc, #52]	; (801cc50 <__libc_init_array+0x3c>)
 801cc1a:	1b64      	subs	r4, r4, r5
 801cc1c:	10a4      	asrs	r4, r4, #2
 801cc1e:	2600      	movs	r6, #0
 801cc20:	42a6      	cmp	r6, r4
 801cc22:	d109      	bne.n	801cc38 <__libc_init_array+0x24>
 801cc24:	4d0b      	ldr	r5, [pc, #44]	; (801cc54 <__libc_init_array+0x40>)
 801cc26:	4c0c      	ldr	r4, [pc, #48]	; (801cc58 <__libc_init_array+0x44>)
 801cc28:	f001 f9de 	bl	801dfe8 <_init>
 801cc2c:	1b64      	subs	r4, r4, r5
 801cc2e:	10a4      	asrs	r4, r4, #2
 801cc30:	2600      	movs	r6, #0
 801cc32:	42a6      	cmp	r6, r4
 801cc34:	d105      	bne.n	801cc42 <__libc_init_array+0x2e>
 801cc36:	bd70      	pop	{r4, r5, r6, pc}
 801cc38:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc3c:	4798      	blx	r3
 801cc3e:	3601      	adds	r6, #1
 801cc40:	e7ee      	b.n	801cc20 <__libc_init_array+0xc>
 801cc42:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc46:	4798      	blx	r3
 801cc48:	3601      	adds	r6, #1
 801cc4a:	e7f2      	b.n	801cc32 <__libc_init_array+0x1e>
 801cc4c:	08021754 	.word	0x08021754
 801cc50:	08021754 	.word	0x08021754
 801cc54:	08021754 	.word	0x08021754
 801cc58:	08021758 	.word	0x08021758

0801cc5c <__retarget_lock_init_recursive>:
 801cc5c:	4770      	bx	lr

0801cc5e <__retarget_lock_acquire_recursive>:
 801cc5e:	4770      	bx	lr

0801cc60 <__retarget_lock_release_recursive>:
 801cc60:	4770      	bx	lr

0801cc62 <memcmp>:
 801cc62:	b530      	push	{r4, r5, lr}
 801cc64:	3901      	subs	r1, #1
 801cc66:	2400      	movs	r4, #0
 801cc68:	42a2      	cmp	r2, r4
 801cc6a:	d101      	bne.n	801cc70 <memcmp+0xe>
 801cc6c:	2000      	movs	r0, #0
 801cc6e:	e005      	b.n	801cc7c <memcmp+0x1a>
 801cc70:	5d03      	ldrb	r3, [r0, r4]
 801cc72:	3401      	adds	r4, #1
 801cc74:	5d0d      	ldrb	r5, [r1, r4]
 801cc76:	42ab      	cmp	r3, r5
 801cc78:	d0f6      	beq.n	801cc68 <memcmp+0x6>
 801cc7a:	1b58      	subs	r0, r3, r5
 801cc7c:	bd30      	pop	{r4, r5, pc}

0801cc7e <memcpy>:
 801cc7e:	440a      	add	r2, r1
 801cc80:	4291      	cmp	r1, r2
 801cc82:	f100 33ff 	add.w	r3, r0, #4294967295
 801cc86:	d100      	bne.n	801cc8a <memcpy+0xc>
 801cc88:	4770      	bx	lr
 801cc8a:	b510      	push	{r4, lr}
 801cc8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cc90:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cc94:	4291      	cmp	r1, r2
 801cc96:	d1f9      	bne.n	801cc8c <memcpy+0xe>
 801cc98:	bd10      	pop	{r4, pc}

0801cc9a <memset>:
 801cc9a:	4402      	add	r2, r0
 801cc9c:	4603      	mov	r3, r0
 801cc9e:	4293      	cmp	r3, r2
 801cca0:	d100      	bne.n	801cca4 <memset+0xa>
 801cca2:	4770      	bx	lr
 801cca4:	f803 1b01 	strb.w	r1, [r3], #1
 801cca8:	e7f9      	b.n	801cc9e <memset+0x4>
	...

0801ccac <_malloc_r>:
 801ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccae:	1ccd      	adds	r5, r1, #3
 801ccb0:	f025 0503 	bic.w	r5, r5, #3
 801ccb4:	3508      	adds	r5, #8
 801ccb6:	2d0c      	cmp	r5, #12
 801ccb8:	bf38      	it	cc
 801ccba:	250c      	movcc	r5, #12
 801ccbc:	2d00      	cmp	r5, #0
 801ccbe:	4606      	mov	r6, r0
 801ccc0:	db01      	blt.n	801ccc6 <_malloc_r+0x1a>
 801ccc2:	42a9      	cmp	r1, r5
 801ccc4:	d903      	bls.n	801ccce <_malloc_r+0x22>
 801ccc6:	230c      	movs	r3, #12
 801ccc8:	6033      	str	r3, [r6, #0]
 801ccca:	2000      	movs	r0, #0
 801cccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ccce:	f000 fa91 	bl	801d1f4 <__malloc_lock>
 801ccd2:	4921      	ldr	r1, [pc, #132]	; (801cd58 <_malloc_r+0xac>)
 801ccd4:	680a      	ldr	r2, [r1, #0]
 801ccd6:	4614      	mov	r4, r2
 801ccd8:	b99c      	cbnz	r4, 801cd02 <_malloc_r+0x56>
 801ccda:	4f20      	ldr	r7, [pc, #128]	; (801cd5c <_malloc_r+0xb0>)
 801ccdc:	683b      	ldr	r3, [r7, #0]
 801ccde:	b923      	cbnz	r3, 801ccea <_malloc_r+0x3e>
 801cce0:	4621      	mov	r1, r4
 801cce2:	4630      	mov	r0, r6
 801cce4:	f000 f8fe 	bl	801cee4 <_sbrk_r>
 801cce8:	6038      	str	r0, [r7, #0]
 801ccea:	4629      	mov	r1, r5
 801ccec:	4630      	mov	r0, r6
 801ccee:	f000 f8f9 	bl	801cee4 <_sbrk_r>
 801ccf2:	1c43      	adds	r3, r0, #1
 801ccf4:	d123      	bne.n	801cd3e <_malloc_r+0x92>
 801ccf6:	230c      	movs	r3, #12
 801ccf8:	6033      	str	r3, [r6, #0]
 801ccfa:	4630      	mov	r0, r6
 801ccfc:	f000 fa80 	bl	801d200 <__malloc_unlock>
 801cd00:	e7e3      	b.n	801ccca <_malloc_r+0x1e>
 801cd02:	6823      	ldr	r3, [r4, #0]
 801cd04:	1b5b      	subs	r3, r3, r5
 801cd06:	d417      	bmi.n	801cd38 <_malloc_r+0x8c>
 801cd08:	2b0b      	cmp	r3, #11
 801cd0a:	d903      	bls.n	801cd14 <_malloc_r+0x68>
 801cd0c:	6023      	str	r3, [r4, #0]
 801cd0e:	441c      	add	r4, r3
 801cd10:	6025      	str	r5, [r4, #0]
 801cd12:	e004      	b.n	801cd1e <_malloc_r+0x72>
 801cd14:	6863      	ldr	r3, [r4, #4]
 801cd16:	42a2      	cmp	r2, r4
 801cd18:	bf0c      	ite	eq
 801cd1a:	600b      	streq	r3, [r1, #0]
 801cd1c:	6053      	strne	r3, [r2, #4]
 801cd1e:	4630      	mov	r0, r6
 801cd20:	f000 fa6e 	bl	801d200 <__malloc_unlock>
 801cd24:	f104 000b 	add.w	r0, r4, #11
 801cd28:	1d23      	adds	r3, r4, #4
 801cd2a:	f020 0007 	bic.w	r0, r0, #7
 801cd2e:	1ac2      	subs	r2, r0, r3
 801cd30:	d0cc      	beq.n	801cccc <_malloc_r+0x20>
 801cd32:	1a1b      	subs	r3, r3, r0
 801cd34:	50a3      	str	r3, [r4, r2]
 801cd36:	e7c9      	b.n	801cccc <_malloc_r+0x20>
 801cd38:	4622      	mov	r2, r4
 801cd3a:	6864      	ldr	r4, [r4, #4]
 801cd3c:	e7cc      	b.n	801ccd8 <_malloc_r+0x2c>
 801cd3e:	1cc4      	adds	r4, r0, #3
 801cd40:	f024 0403 	bic.w	r4, r4, #3
 801cd44:	42a0      	cmp	r0, r4
 801cd46:	d0e3      	beq.n	801cd10 <_malloc_r+0x64>
 801cd48:	1a21      	subs	r1, r4, r0
 801cd4a:	4630      	mov	r0, r6
 801cd4c:	f000 f8ca 	bl	801cee4 <_sbrk_r>
 801cd50:	3001      	adds	r0, #1
 801cd52:	d1dd      	bne.n	801cd10 <_malloc_r+0x64>
 801cd54:	e7cf      	b.n	801ccf6 <_malloc_r+0x4a>
 801cd56:	bf00      	nop
 801cd58:	2000b0f0 	.word	0x2000b0f0
 801cd5c:	2000b0f4 	.word	0x2000b0f4

0801cd60 <iprintf>:
 801cd60:	b40f      	push	{r0, r1, r2, r3}
 801cd62:	4b0a      	ldr	r3, [pc, #40]	; (801cd8c <iprintf+0x2c>)
 801cd64:	b513      	push	{r0, r1, r4, lr}
 801cd66:	681c      	ldr	r4, [r3, #0]
 801cd68:	b124      	cbz	r4, 801cd74 <iprintf+0x14>
 801cd6a:	69a3      	ldr	r3, [r4, #24]
 801cd6c:	b913      	cbnz	r3, 801cd74 <iprintf+0x14>
 801cd6e:	4620      	mov	r0, r4
 801cd70:	f7ff feb2 	bl	801cad8 <__sinit>
 801cd74:	ab05      	add	r3, sp, #20
 801cd76:	9a04      	ldr	r2, [sp, #16]
 801cd78:	68a1      	ldr	r1, [r4, #8]
 801cd7a:	9301      	str	r3, [sp, #4]
 801cd7c:	4620      	mov	r0, r4
 801cd7e:	f000 fabf 	bl	801d300 <_vfiprintf_r>
 801cd82:	b002      	add	sp, #8
 801cd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd88:	b004      	add	sp, #16
 801cd8a:	4770      	bx	lr
 801cd8c:	200000f4 	.word	0x200000f4

0801cd90 <rand>:
 801cd90:	4b17      	ldr	r3, [pc, #92]	; (801cdf0 <rand+0x60>)
 801cd92:	b510      	push	{r4, lr}
 801cd94:	681c      	ldr	r4, [r3, #0]
 801cd96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cd98:	b9b3      	cbnz	r3, 801cdc8 <rand+0x38>
 801cd9a:	2018      	movs	r0, #24
 801cd9c:	f000 fa22 	bl	801d1e4 <malloc>
 801cda0:	63a0      	str	r0, [r4, #56]	; 0x38
 801cda2:	b928      	cbnz	r0, 801cdb0 <rand+0x20>
 801cda4:	4602      	mov	r2, r0
 801cda6:	4b13      	ldr	r3, [pc, #76]	; (801cdf4 <rand+0x64>)
 801cda8:	4813      	ldr	r0, [pc, #76]	; (801cdf8 <rand+0x68>)
 801cdaa:	214e      	movs	r1, #78	; 0x4e
 801cdac:	f000 f900 	bl	801cfb0 <__assert_func>
 801cdb0:	4a12      	ldr	r2, [pc, #72]	; (801cdfc <rand+0x6c>)
 801cdb2:	4b13      	ldr	r3, [pc, #76]	; (801ce00 <rand+0x70>)
 801cdb4:	e9c0 2300 	strd	r2, r3, [r0]
 801cdb8:	4b12      	ldr	r3, [pc, #72]	; (801ce04 <rand+0x74>)
 801cdba:	6083      	str	r3, [r0, #8]
 801cdbc:	230b      	movs	r3, #11
 801cdbe:	8183      	strh	r3, [r0, #12]
 801cdc0:	2201      	movs	r2, #1
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801cdc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cdca:	480f      	ldr	r0, [pc, #60]	; (801ce08 <rand+0x78>)
 801cdcc:	690a      	ldr	r2, [r1, #16]
 801cdce:	694b      	ldr	r3, [r1, #20]
 801cdd0:	4c0e      	ldr	r4, [pc, #56]	; (801ce0c <rand+0x7c>)
 801cdd2:	4350      	muls	r0, r2
 801cdd4:	fb04 0003 	mla	r0, r4, r3, r0
 801cdd8:	fba2 3404 	umull	r3, r4, r2, r4
 801cddc:	1c5a      	adds	r2, r3, #1
 801cdde:	4404      	add	r4, r0
 801cde0:	f144 0000 	adc.w	r0, r4, #0
 801cde4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801cde8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801cdec:	bd10      	pop	{r4, pc}
 801cdee:	bf00      	nop
 801cdf0:	200000f4 	.word	0x200000f4
 801cdf4:	08021664 	.word	0x08021664
 801cdf8:	0802167b 	.word	0x0802167b
 801cdfc:	abcd330e 	.word	0xabcd330e
 801ce00:	e66d1234 	.word	0xe66d1234
 801ce04:	0005deec 	.word	0x0005deec
 801ce08:	5851f42d 	.word	0x5851f42d
 801ce0c:	4c957f2d 	.word	0x4c957f2d

0801ce10 <cleanup_glue>:
 801ce10:	b538      	push	{r3, r4, r5, lr}
 801ce12:	460c      	mov	r4, r1
 801ce14:	6809      	ldr	r1, [r1, #0]
 801ce16:	4605      	mov	r5, r0
 801ce18:	b109      	cbz	r1, 801ce1e <cleanup_glue+0xe>
 801ce1a:	f7ff fff9 	bl	801ce10 <cleanup_glue>
 801ce1e:	4621      	mov	r1, r4
 801ce20:	4628      	mov	r0, r5
 801ce22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce26:	f000 b9f1 	b.w	801d20c <_free_r>
	...

0801ce2c <_reclaim_reent>:
 801ce2c:	4b2c      	ldr	r3, [pc, #176]	; (801cee0 <_reclaim_reent+0xb4>)
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	4283      	cmp	r3, r0
 801ce32:	b570      	push	{r4, r5, r6, lr}
 801ce34:	4604      	mov	r4, r0
 801ce36:	d051      	beq.n	801cedc <_reclaim_reent+0xb0>
 801ce38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ce3a:	b143      	cbz	r3, 801ce4e <_reclaim_reent+0x22>
 801ce3c:	68db      	ldr	r3, [r3, #12]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d14a      	bne.n	801ced8 <_reclaim_reent+0xac>
 801ce42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ce44:	6819      	ldr	r1, [r3, #0]
 801ce46:	b111      	cbz	r1, 801ce4e <_reclaim_reent+0x22>
 801ce48:	4620      	mov	r0, r4
 801ce4a:	f000 f9df 	bl	801d20c <_free_r>
 801ce4e:	6961      	ldr	r1, [r4, #20]
 801ce50:	b111      	cbz	r1, 801ce58 <_reclaim_reent+0x2c>
 801ce52:	4620      	mov	r0, r4
 801ce54:	f000 f9da 	bl	801d20c <_free_r>
 801ce58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ce5a:	b111      	cbz	r1, 801ce62 <_reclaim_reent+0x36>
 801ce5c:	4620      	mov	r0, r4
 801ce5e:	f000 f9d5 	bl	801d20c <_free_r>
 801ce62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ce64:	b111      	cbz	r1, 801ce6c <_reclaim_reent+0x40>
 801ce66:	4620      	mov	r0, r4
 801ce68:	f000 f9d0 	bl	801d20c <_free_r>
 801ce6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ce6e:	b111      	cbz	r1, 801ce76 <_reclaim_reent+0x4a>
 801ce70:	4620      	mov	r0, r4
 801ce72:	f000 f9cb 	bl	801d20c <_free_r>
 801ce76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ce78:	b111      	cbz	r1, 801ce80 <_reclaim_reent+0x54>
 801ce7a:	4620      	mov	r0, r4
 801ce7c:	f000 f9c6 	bl	801d20c <_free_r>
 801ce80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ce82:	b111      	cbz	r1, 801ce8a <_reclaim_reent+0x5e>
 801ce84:	4620      	mov	r0, r4
 801ce86:	f000 f9c1 	bl	801d20c <_free_r>
 801ce8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ce8c:	b111      	cbz	r1, 801ce94 <_reclaim_reent+0x68>
 801ce8e:	4620      	mov	r0, r4
 801ce90:	f000 f9bc 	bl	801d20c <_free_r>
 801ce94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce96:	b111      	cbz	r1, 801ce9e <_reclaim_reent+0x72>
 801ce98:	4620      	mov	r0, r4
 801ce9a:	f000 f9b7 	bl	801d20c <_free_r>
 801ce9e:	69a3      	ldr	r3, [r4, #24]
 801cea0:	b1e3      	cbz	r3, 801cedc <_reclaim_reent+0xb0>
 801cea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cea4:	4620      	mov	r0, r4
 801cea6:	4798      	blx	r3
 801cea8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ceaa:	b1b9      	cbz	r1, 801cedc <_reclaim_reent+0xb0>
 801ceac:	4620      	mov	r0, r4
 801ceae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ceb2:	f7ff bfad 	b.w	801ce10 <cleanup_glue>
 801ceb6:	5949      	ldr	r1, [r1, r5]
 801ceb8:	b941      	cbnz	r1, 801cecc <_reclaim_reent+0xa0>
 801ceba:	3504      	adds	r5, #4
 801cebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cebe:	2d80      	cmp	r5, #128	; 0x80
 801cec0:	68d9      	ldr	r1, [r3, #12]
 801cec2:	d1f8      	bne.n	801ceb6 <_reclaim_reent+0x8a>
 801cec4:	4620      	mov	r0, r4
 801cec6:	f000 f9a1 	bl	801d20c <_free_r>
 801ceca:	e7ba      	b.n	801ce42 <_reclaim_reent+0x16>
 801cecc:	680e      	ldr	r6, [r1, #0]
 801cece:	4620      	mov	r0, r4
 801ced0:	f000 f99c 	bl	801d20c <_free_r>
 801ced4:	4631      	mov	r1, r6
 801ced6:	e7ef      	b.n	801ceb8 <_reclaim_reent+0x8c>
 801ced8:	2500      	movs	r5, #0
 801ceda:	e7ef      	b.n	801cebc <_reclaim_reent+0x90>
 801cedc:	bd70      	pop	{r4, r5, r6, pc}
 801cede:	bf00      	nop
 801cee0:	200000f4 	.word	0x200000f4

0801cee4 <_sbrk_r>:
 801cee4:	b538      	push	{r3, r4, r5, lr}
 801cee6:	4d06      	ldr	r5, [pc, #24]	; (801cf00 <_sbrk_r+0x1c>)
 801cee8:	2300      	movs	r3, #0
 801ceea:	4604      	mov	r4, r0
 801ceec:	4608      	mov	r0, r1
 801ceee:	602b      	str	r3, [r5, #0]
 801cef0:	f7e4 ff8a 	bl	8001e08 <_sbrk>
 801cef4:	1c43      	adds	r3, r0, #1
 801cef6:	d102      	bne.n	801cefe <_sbrk_r+0x1a>
 801cef8:	682b      	ldr	r3, [r5, #0]
 801cefa:	b103      	cbz	r3, 801cefe <_sbrk_r+0x1a>
 801cefc:	6023      	str	r3, [r4, #0]
 801cefe:	bd38      	pop	{r3, r4, r5, pc}
 801cf00:	20013a38 	.word	0x20013a38

0801cf04 <__sread>:
 801cf04:	b510      	push	{r4, lr}
 801cf06:	460c      	mov	r4, r1
 801cf08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf0c:	f000 fcbc 	bl	801d888 <_read_r>
 801cf10:	2800      	cmp	r0, #0
 801cf12:	bfab      	itete	ge
 801cf14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cf16:	89a3      	ldrhlt	r3, [r4, #12]
 801cf18:	181b      	addge	r3, r3, r0
 801cf1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cf1e:	bfac      	ite	ge
 801cf20:	6563      	strge	r3, [r4, #84]	; 0x54
 801cf22:	81a3      	strhlt	r3, [r4, #12]
 801cf24:	bd10      	pop	{r4, pc}

0801cf26 <__swrite>:
 801cf26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf2a:	461f      	mov	r7, r3
 801cf2c:	898b      	ldrh	r3, [r1, #12]
 801cf2e:	05db      	lsls	r3, r3, #23
 801cf30:	4605      	mov	r5, r0
 801cf32:	460c      	mov	r4, r1
 801cf34:	4616      	mov	r6, r2
 801cf36:	d505      	bpl.n	801cf44 <__swrite+0x1e>
 801cf38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf3c:	2302      	movs	r3, #2
 801cf3e:	2200      	movs	r2, #0
 801cf40:	f000 f93e 	bl	801d1c0 <_lseek_r>
 801cf44:	89a3      	ldrh	r3, [r4, #12]
 801cf46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cf4e:	81a3      	strh	r3, [r4, #12]
 801cf50:	4632      	mov	r2, r6
 801cf52:	463b      	mov	r3, r7
 801cf54:	4628      	mov	r0, r5
 801cf56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf5a:	f000 b817 	b.w	801cf8c <_write_r>

0801cf5e <__sseek>:
 801cf5e:	b510      	push	{r4, lr}
 801cf60:	460c      	mov	r4, r1
 801cf62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf66:	f000 f92b 	bl	801d1c0 <_lseek_r>
 801cf6a:	1c43      	adds	r3, r0, #1
 801cf6c:	89a3      	ldrh	r3, [r4, #12]
 801cf6e:	bf15      	itete	ne
 801cf70:	6560      	strne	r0, [r4, #84]	; 0x54
 801cf72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cf76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cf7a:	81a3      	strheq	r3, [r4, #12]
 801cf7c:	bf18      	it	ne
 801cf7e:	81a3      	strhne	r3, [r4, #12]
 801cf80:	bd10      	pop	{r4, pc}

0801cf82 <__sclose>:
 801cf82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf86:	f000 b831 	b.w	801cfec <_close_r>
	...

0801cf8c <_write_r>:
 801cf8c:	b538      	push	{r3, r4, r5, lr}
 801cf8e:	4d07      	ldr	r5, [pc, #28]	; (801cfac <_write_r+0x20>)
 801cf90:	4604      	mov	r4, r0
 801cf92:	4608      	mov	r0, r1
 801cf94:	4611      	mov	r1, r2
 801cf96:	2200      	movs	r2, #0
 801cf98:	602a      	str	r2, [r5, #0]
 801cf9a:	461a      	mov	r2, r3
 801cf9c:	f7e4 fee3 	bl	8001d66 <_write>
 801cfa0:	1c43      	adds	r3, r0, #1
 801cfa2:	d102      	bne.n	801cfaa <_write_r+0x1e>
 801cfa4:	682b      	ldr	r3, [r5, #0]
 801cfa6:	b103      	cbz	r3, 801cfaa <_write_r+0x1e>
 801cfa8:	6023      	str	r3, [r4, #0]
 801cfaa:	bd38      	pop	{r3, r4, r5, pc}
 801cfac:	20013a38 	.word	0x20013a38

0801cfb0 <__assert_func>:
 801cfb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cfb2:	4614      	mov	r4, r2
 801cfb4:	461a      	mov	r2, r3
 801cfb6:	4b09      	ldr	r3, [pc, #36]	; (801cfdc <__assert_func+0x2c>)
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	4605      	mov	r5, r0
 801cfbc:	68d8      	ldr	r0, [r3, #12]
 801cfbe:	b14c      	cbz	r4, 801cfd4 <__assert_func+0x24>
 801cfc0:	4b07      	ldr	r3, [pc, #28]	; (801cfe0 <__assert_func+0x30>)
 801cfc2:	9100      	str	r1, [sp, #0]
 801cfc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cfc8:	4906      	ldr	r1, [pc, #24]	; (801cfe4 <__assert_func+0x34>)
 801cfca:	462b      	mov	r3, r5
 801cfcc:	f000 f8e6 	bl	801d19c <fiprintf>
 801cfd0:	f000 fd2c 	bl	801da2c <abort>
 801cfd4:	4b04      	ldr	r3, [pc, #16]	; (801cfe8 <__assert_func+0x38>)
 801cfd6:	461c      	mov	r4, r3
 801cfd8:	e7f3      	b.n	801cfc2 <__assert_func+0x12>
 801cfda:	bf00      	nop
 801cfdc:	200000f4 	.word	0x200000f4
 801cfe0:	080216da 	.word	0x080216da
 801cfe4:	080216e7 	.word	0x080216e7
 801cfe8:	08021715 	.word	0x08021715

0801cfec <_close_r>:
 801cfec:	b538      	push	{r3, r4, r5, lr}
 801cfee:	4d06      	ldr	r5, [pc, #24]	; (801d008 <_close_r+0x1c>)
 801cff0:	2300      	movs	r3, #0
 801cff2:	4604      	mov	r4, r0
 801cff4:	4608      	mov	r0, r1
 801cff6:	602b      	str	r3, [r5, #0]
 801cff8:	f7e4 fed1 	bl	8001d9e <_close>
 801cffc:	1c43      	adds	r3, r0, #1
 801cffe:	d102      	bne.n	801d006 <_close_r+0x1a>
 801d000:	682b      	ldr	r3, [r5, #0]
 801d002:	b103      	cbz	r3, 801d006 <_close_r+0x1a>
 801d004:	6023      	str	r3, [r4, #0]
 801d006:	bd38      	pop	{r3, r4, r5, pc}
 801d008:	20013a38 	.word	0x20013a38

0801d00c <__errno>:
 801d00c:	4b01      	ldr	r3, [pc, #4]	; (801d014 <__errno+0x8>)
 801d00e:	6818      	ldr	r0, [r3, #0]
 801d010:	4770      	bx	lr
 801d012:	bf00      	nop
 801d014:	200000f4 	.word	0x200000f4

0801d018 <__sflush_r>:
 801d018:	898a      	ldrh	r2, [r1, #12]
 801d01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d01e:	4605      	mov	r5, r0
 801d020:	0710      	lsls	r0, r2, #28
 801d022:	460c      	mov	r4, r1
 801d024:	d458      	bmi.n	801d0d8 <__sflush_r+0xc0>
 801d026:	684b      	ldr	r3, [r1, #4]
 801d028:	2b00      	cmp	r3, #0
 801d02a:	dc05      	bgt.n	801d038 <__sflush_r+0x20>
 801d02c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d02e:	2b00      	cmp	r3, #0
 801d030:	dc02      	bgt.n	801d038 <__sflush_r+0x20>
 801d032:	2000      	movs	r0, #0
 801d034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d03a:	2e00      	cmp	r6, #0
 801d03c:	d0f9      	beq.n	801d032 <__sflush_r+0x1a>
 801d03e:	2300      	movs	r3, #0
 801d040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d044:	682f      	ldr	r7, [r5, #0]
 801d046:	602b      	str	r3, [r5, #0]
 801d048:	d032      	beq.n	801d0b0 <__sflush_r+0x98>
 801d04a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d04c:	89a3      	ldrh	r3, [r4, #12]
 801d04e:	075a      	lsls	r2, r3, #29
 801d050:	d505      	bpl.n	801d05e <__sflush_r+0x46>
 801d052:	6863      	ldr	r3, [r4, #4]
 801d054:	1ac0      	subs	r0, r0, r3
 801d056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d058:	b10b      	cbz	r3, 801d05e <__sflush_r+0x46>
 801d05a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d05c:	1ac0      	subs	r0, r0, r3
 801d05e:	2300      	movs	r3, #0
 801d060:	4602      	mov	r2, r0
 801d062:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d064:	6a21      	ldr	r1, [r4, #32]
 801d066:	4628      	mov	r0, r5
 801d068:	47b0      	blx	r6
 801d06a:	1c43      	adds	r3, r0, #1
 801d06c:	89a3      	ldrh	r3, [r4, #12]
 801d06e:	d106      	bne.n	801d07e <__sflush_r+0x66>
 801d070:	6829      	ldr	r1, [r5, #0]
 801d072:	291d      	cmp	r1, #29
 801d074:	d82c      	bhi.n	801d0d0 <__sflush_r+0xb8>
 801d076:	4a2a      	ldr	r2, [pc, #168]	; (801d120 <__sflush_r+0x108>)
 801d078:	40ca      	lsrs	r2, r1
 801d07a:	07d6      	lsls	r6, r2, #31
 801d07c:	d528      	bpl.n	801d0d0 <__sflush_r+0xb8>
 801d07e:	2200      	movs	r2, #0
 801d080:	6062      	str	r2, [r4, #4]
 801d082:	04d9      	lsls	r1, r3, #19
 801d084:	6922      	ldr	r2, [r4, #16]
 801d086:	6022      	str	r2, [r4, #0]
 801d088:	d504      	bpl.n	801d094 <__sflush_r+0x7c>
 801d08a:	1c42      	adds	r2, r0, #1
 801d08c:	d101      	bne.n	801d092 <__sflush_r+0x7a>
 801d08e:	682b      	ldr	r3, [r5, #0]
 801d090:	b903      	cbnz	r3, 801d094 <__sflush_r+0x7c>
 801d092:	6560      	str	r0, [r4, #84]	; 0x54
 801d094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d096:	602f      	str	r7, [r5, #0]
 801d098:	2900      	cmp	r1, #0
 801d09a:	d0ca      	beq.n	801d032 <__sflush_r+0x1a>
 801d09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d0a0:	4299      	cmp	r1, r3
 801d0a2:	d002      	beq.n	801d0aa <__sflush_r+0x92>
 801d0a4:	4628      	mov	r0, r5
 801d0a6:	f000 f8b1 	bl	801d20c <_free_r>
 801d0aa:	2000      	movs	r0, #0
 801d0ac:	6360      	str	r0, [r4, #52]	; 0x34
 801d0ae:	e7c1      	b.n	801d034 <__sflush_r+0x1c>
 801d0b0:	6a21      	ldr	r1, [r4, #32]
 801d0b2:	2301      	movs	r3, #1
 801d0b4:	4628      	mov	r0, r5
 801d0b6:	47b0      	blx	r6
 801d0b8:	1c41      	adds	r1, r0, #1
 801d0ba:	d1c7      	bne.n	801d04c <__sflush_r+0x34>
 801d0bc:	682b      	ldr	r3, [r5, #0]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d0c4      	beq.n	801d04c <__sflush_r+0x34>
 801d0c2:	2b1d      	cmp	r3, #29
 801d0c4:	d001      	beq.n	801d0ca <__sflush_r+0xb2>
 801d0c6:	2b16      	cmp	r3, #22
 801d0c8:	d101      	bne.n	801d0ce <__sflush_r+0xb6>
 801d0ca:	602f      	str	r7, [r5, #0]
 801d0cc:	e7b1      	b.n	801d032 <__sflush_r+0x1a>
 801d0ce:	89a3      	ldrh	r3, [r4, #12]
 801d0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d0d4:	81a3      	strh	r3, [r4, #12]
 801d0d6:	e7ad      	b.n	801d034 <__sflush_r+0x1c>
 801d0d8:	690f      	ldr	r7, [r1, #16]
 801d0da:	2f00      	cmp	r7, #0
 801d0dc:	d0a9      	beq.n	801d032 <__sflush_r+0x1a>
 801d0de:	0793      	lsls	r3, r2, #30
 801d0e0:	680e      	ldr	r6, [r1, #0]
 801d0e2:	bf08      	it	eq
 801d0e4:	694b      	ldreq	r3, [r1, #20]
 801d0e6:	600f      	str	r7, [r1, #0]
 801d0e8:	bf18      	it	ne
 801d0ea:	2300      	movne	r3, #0
 801d0ec:	eba6 0807 	sub.w	r8, r6, r7
 801d0f0:	608b      	str	r3, [r1, #8]
 801d0f2:	f1b8 0f00 	cmp.w	r8, #0
 801d0f6:	dd9c      	ble.n	801d032 <__sflush_r+0x1a>
 801d0f8:	6a21      	ldr	r1, [r4, #32]
 801d0fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d0fc:	4643      	mov	r3, r8
 801d0fe:	463a      	mov	r2, r7
 801d100:	4628      	mov	r0, r5
 801d102:	47b0      	blx	r6
 801d104:	2800      	cmp	r0, #0
 801d106:	dc06      	bgt.n	801d116 <__sflush_r+0xfe>
 801d108:	89a3      	ldrh	r3, [r4, #12]
 801d10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d10e:	81a3      	strh	r3, [r4, #12]
 801d110:	f04f 30ff 	mov.w	r0, #4294967295
 801d114:	e78e      	b.n	801d034 <__sflush_r+0x1c>
 801d116:	4407      	add	r7, r0
 801d118:	eba8 0800 	sub.w	r8, r8, r0
 801d11c:	e7e9      	b.n	801d0f2 <__sflush_r+0xda>
 801d11e:	bf00      	nop
 801d120:	20400001 	.word	0x20400001

0801d124 <_fflush_r>:
 801d124:	b538      	push	{r3, r4, r5, lr}
 801d126:	690b      	ldr	r3, [r1, #16]
 801d128:	4605      	mov	r5, r0
 801d12a:	460c      	mov	r4, r1
 801d12c:	b913      	cbnz	r3, 801d134 <_fflush_r+0x10>
 801d12e:	2500      	movs	r5, #0
 801d130:	4628      	mov	r0, r5
 801d132:	bd38      	pop	{r3, r4, r5, pc}
 801d134:	b118      	cbz	r0, 801d13e <_fflush_r+0x1a>
 801d136:	6983      	ldr	r3, [r0, #24]
 801d138:	b90b      	cbnz	r3, 801d13e <_fflush_r+0x1a>
 801d13a:	f7ff fccd 	bl	801cad8 <__sinit>
 801d13e:	4b14      	ldr	r3, [pc, #80]	; (801d190 <_fflush_r+0x6c>)
 801d140:	429c      	cmp	r4, r3
 801d142:	d11b      	bne.n	801d17c <_fflush_r+0x58>
 801d144:	686c      	ldr	r4, [r5, #4]
 801d146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d0ef      	beq.n	801d12e <_fflush_r+0xa>
 801d14e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d150:	07d0      	lsls	r0, r2, #31
 801d152:	d404      	bmi.n	801d15e <_fflush_r+0x3a>
 801d154:	0599      	lsls	r1, r3, #22
 801d156:	d402      	bmi.n	801d15e <_fflush_r+0x3a>
 801d158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d15a:	f7ff fd80 	bl	801cc5e <__retarget_lock_acquire_recursive>
 801d15e:	4628      	mov	r0, r5
 801d160:	4621      	mov	r1, r4
 801d162:	f7ff ff59 	bl	801d018 <__sflush_r>
 801d166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d168:	07da      	lsls	r2, r3, #31
 801d16a:	4605      	mov	r5, r0
 801d16c:	d4e0      	bmi.n	801d130 <_fflush_r+0xc>
 801d16e:	89a3      	ldrh	r3, [r4, #12]
 801d170:	059b      	lsls	r3, r3, #22
 801d172:	d4dd      	bmi.n	801d130 <_fflush_r+0xc>
 801d174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d176:	f7ff fd73 	bl	801cc60 <__retarget_lock_release_recursive>
 801d17a:	e7d9      	b.n	801d130 <_fflush_r+0xc>
 801d17c:	4b05      	ldr	r3, [pc, #20]	; (801d194 <_fflush_r+0x70>)
 801d17e:	429c      	cmp	r4, r3
 801d180:	d101      	bne.n	801d186 <_fflush_r+0x62>
 801d182:	68ac      	ldr	r4, [r5, #8]
 801d184:	e7df      	b.n	801d146 <_fflush_r+0x22>
 801d186:	4b04      	ldr	r3, [pc, #16]	; (801d198 <_fflush_r+0x74>)
 801d188:	429c      	cmp	r4, r3
 801d18a:	bf08      	it	eq
 801d18c:	68ec      	ldreq	r4, [r5, #12]
 801d18e:	e7da      	b.n	801d146 <_fflush_r+0x22>
 801d190:	08021620 	.word	0x08021620
 801d194:	08021640 	.word	0x08021640
 801d198:	08021600 	.word	0x08021600

0801d19c <fiprintf>:
 801d19c:	b40e      	push	{r1, r2, r3}
 801d19e:	b503      	push	{r0, r1, lr}
 801d1a0:	4601      	mov	r1, r0
 801d1a2:	ab03      	add	r3, sp, #12
 801d1a4:	4805      	ldr	r0, [pc, #20]	; (801d1bc <fiprintf+0x20>)
 801d1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1aa:	6800      	ldr	r0, [r0, #0]
 801d1ac:	9301      	str	r3, [sp, #4]
 801d1ae:	f000 f8a7 	bl	801d300 <_vfiprintf_r>
 801d1b2:	b002      	add	sp, #8
 801d1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1b8:	b003      	add	sp, #12
 801d1ba:	4770      	bx	lr
 801d1bc:	200000f4 	.word	0x200000f4

0801d1c0 <_lseek_r>:
 801d1c0:	b538      	push	{r3, r4, r5, lr}
 801d1c2:	4d07      	ldr	r5, [pc, #28]	; (801d1e0 <_lseek_r+0x20>)
 801d1c4:	4604      	mov	r4, r0
 801d1c6:	4608      	mov	r0, r1
 801d1c8:	4611      	mov	r1, r2
 801d1ca:	2200      	movs	r2, #0
 801d1cc:	602a      	str	r2, [r5, #0]
 801d1ce:	461a      	mov	r2, r3
 801d1d0:	f7e4 fe0c 	bl	8001dec <_lseek>
 801d1d4:	1c43      	adds	r3, r0, #1
 801d1d6:	d102      	bne.n	801d1de <_lseek_r+0x1e>
 801d1d8:	682b      	ldr	r3, [r5, #0]
 801d1da:	b103      	cbz	r3, 801d1de <_lseek_r+0x1e>
 801d1dc:	6023      	str	r3, [r4, #0]
 801d1de:	bd38      	pop	{r3, r4, r5, pc}
 801d1e0:	20013a38 	.word	0x20013a38

0801d1e4 <malloc>:
 801d1e4:	4b02      	ldr	r3, [pc, #8]	; (801d1f0 <malloc+0xc>)
 801d1e6:	4601      	mov	r1, r0
 801d1e8:	6818      	ldr	r0, [r3, #0]
 801d1ea:	f7ff bd5f 	b.w	801ccac <_malloc_r>
 801d1ee:	bf00      	nop
 801d1f0:	200000f4 	.word	0x200000f4

0801d1f4 <__malloc_lock>:
 801d1f4:	4801      	ldr	r0, [pc, #4]	; (801d1fc <__malloc_lock+0x8>)
 801d1f6:	f7ff bd32 	b.w	801cc5e <__retarget_lock_acquire_recursive>
 801d1fa:	bf00      	nop
 801d1fc:	20013a44 	.word	0x20013a44

0801d200 <__malloc_unlock>:
 801d200:	4801      	ldr	r0, [pc, #4]	; (801d208 <__malloc_unlock+0x8>)
 801d202:	f7ff bd2d 	b.w	801cc60 <__retarget_lock_release_recursive>
 801d206:	bf00      	nop
 801d208:	20013a44 	.word	0x20013a44

0801d20c <_free_r>:
 801d20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d20e:	2900      	cmp	r1, #0
 801d210:	d048      	beq.n	801d2a4 <_free_r+0x98>
 801d212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d216:	9001      	str	r0, [sp, #4]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	f1a1 0404 	sub.w	r4, r1, #4
 801d21e:	bfb8      	it	lt
 801d220:	18e4      	addlt	r4, r4, r3
 801d222:	f7ff ffe7 	bl	801d1f4 <__malloc_lock>
 801d226:	4a20      	ldr	r2, [pc, #128]	; (801d2a8 <_free_r+0x9c>)
 801d228:	9801      	ldr	r0, [sp, #4]
 801d22a:	6813      	ldr	r3, [r2, #0]
 801d22c:	4615      	mov	r5, r2
 801d22e:	b933      	cbnz	r3, 801d23e <_free_r+0x32>
 801d230:	6063      	str	r3, [r4, #4]
 801d232:	6014      	str	r4, [r2, #0]
 801d234:	b003      	add	sp, #12
 801d236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d23a:	f7ff bfe1 	b.w	801d200 <__malloc_unlock>
 801d23e:	42a3      	cmp	r3, r4
 801d240:	d90b      	bls.n	801d25a <_free_r+0x4e>
 801d242:	6821      	ldr	r1, [r4, #0]
 801d244:	1862      	adds	r2, r4, r1
 801d246:	4293      	cmp	r3, r2
 801d248:	bf04      	itt	eq
 801d24a:	681a      	ldreq	r2, [r3, #0]
 801d24c:	685b      	ldreq	r3, [r3, #4]
 801d24e:	6063      	str	r3, [r4, #4]
 801d250:	bf04      	itt	eq
 801d252:	1852      	addeq	r2, r2, r1
 801d254:	6022      	streq	r2, [r4, #0]
 801d256:	602c      	str	r4, [r5, #0]
 801d258:	e7ec      	b.n	801d234 <_free_r+0x28>
 801d25a:	461a      	mov	r2, r3
 801d25c:	685b      	ldr	r3, [r3, #4]
 801d25e:	b10b      	cbz	r3, 801d264 <_free_r+0x58>
 801d260:	42a3      	cmp	r3, r4
 801d262:	d9fa      	bls.n	801d25a <_free_r+0x4e>
 801d264:	6811      	ldr	r1, [r2, #0]
 801d266:	1855      	adds	r5, r2, r1
 801d268:	42a5      	cmp	r5, r4
 801d26a:	d10b      	bne.n	801d284 <_free_r+0x78>
 801d26c:	6824      	ldr	r4, [r4, #0]
 801d26e:	4421      	add	r1, r4
 801d270:	1854      	adds	r4, r2, r1
 801d272:	42a3      	cmp	r3, r4
 801d274:	6011      	str	r1, [r2, #0]
 801d276:	d1dd      	bne.n	801d234 <_free_r+0x28>
 801d278:	681c      	ldr	r4, [r3, #0]
 801d27a:	685b      	ldr	r3, [r3, #4]
 801d27c:	6053      	str	r3, [r2, #4]
 801d27e:	4421      	add	r1, r4
 801d280:	6011      	str	r1, [r2, #0]
 801d282:	e7d7      	b.n	801d234 <_free_r+0x28>
 801d284:	d902      	bls.n	801d28c <_free_r+0x80>
 801d286:	230c      	movs	r3, #12
 801d288:	6003      	str	r3, [r0, #0]
 801d28a:	e7d3      	b.n	801d234 <_free_r+0x28>
 801d28c:	6825      	ldr	r5, [r4, #0]
 801d28e:	1961      	adds	r1, r4, r5
 801d290:	428b      	cmp	r3, r1
 801d292:	bf04      	itt	eq
 801d294:	6819      	ldreq	r1, [r3, #0]
 801d296:	685b      	ldreq	r3, [r3, #4]
 801d298:	6063      	str	r3, [r4, #4]
 801d29a:	bf04      	itt	eq
 801d29c:	1949      	addeq	r1, r1, r5
 801d29e:	6021      	streq	r1, [r4, #0]
 801d2a0:	6054      	str	r4, [r2, #4]
 801d2a2:	e7c7      	b.n	801d234 <_free_r+0x28>
 801d2a4:	b003      	add	sp, #12
 801d2a6:	bd30      	pop	{r4, r5, pc}
 801d2a8:	2000b0f0 	.word	0x2000b0f0

0801d2ac <__sfputc_r>:
 801d2ac:	6893      	ldr	r3, [r2, #8]
 801d2ae:	3b01      	subs	r3, #1
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	b410      	push	{r4}
 801d2b4:	6093      	str	r3, [r2, #8]
 801d2b6:	da08      	bge.n	801d2ca <__sfputc_r+0x1e>
 801d2b8:	6994      	ldr	r4, [r2, #24]
 801d2ba:	42a3      	cmp	r3, r4
 801d2bc:	db01      	blt.n	801d2c2 <__sfputc_r+0x16>
 801d2be:	290a      	cmp	r1, #10
 801d2c0:	d103      	bne.n	801d2ca <__sfputc_r+0x1e>
 801d2c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d2c6:	f000 baf1 	b.w	801d8ac <__swbuf_r>
 801d2ca:	6813      	ldr	r3, [r2, #0]
 801d2cc:	1c58      	adds	r0, r3, #1
 801d2ce:	6010      	str	r0, [r2, #0]
 801d2d0:	7019      	strb	r1, [r3, #0]
 801d2d2:	4608      	mov	r0, r1
 801d2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d2d8:	4770      	bx	lr

0801d2da <__sfputs_r>:
 801d2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2dc:	4606      	mov	r6, r0
 801d2de:	460f      	mov	r7, r1
 801d2e0:	4614      	mov	r4, r2
 801d2e2:	18d5      	adds	r5, r2, r3
 801d2e4:	42ac      	cmp	r4, r5
 801d2e6:	d101      	bne.n	801d2ec <__sfputs_r+0x12>
 801d2e8:	2000      	movs	r0, #0
 801d2ea:	e007      	b.n	801d2fc <__sfputs_r+0x22>
 801d2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2f0:	463a      	mov	r2, r7
 801d2f2:	4630      	mov	r0, r6
 801d2f4:	f7ff ffda 	bl	801d2ac <__sfputc_r>
 801d2f8:	1c43      	adds	r3, r0, #1
 801d2fa:	d1f3      	bne.n	801d2e4 <__sfputs_r+0xa>
 801d2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d300 <_vfiprintf_r>:
 801d300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d304:	460d      	mov	r5, r1
 801d306:	b09d      	sub	sp, #116	; 0x74
 801d308:	4614      	mov	r4, r2
 801d30a:	4698      	mov	r8, r3
 801d30c:	4606      	mov	r6, r0
 801d30e:	b118      	cbz	r0, 801d318 <_vfiprintf_r+0x18>
 801d310:	6983      	ldr	r3, [r0, #24]
 801d312:	b90b      	cbnz	r3, 801d318 <_vfiprintf_r+0x18>
 801d314:	f7ff fbe0 	bl	801cad8 <__sinit>
 801d318:	4b89      	ldr	r3, [pc, #548]	; (801d540 <_vfiprintf_r+0x240>)
 801d31a:	429d      	cmp	r5, r3
 801d31c:	d11b      	bne.n	801d356 <_vfiprintf_r+0x56>
 801d31e:	6875      	ldr	r5, [r6, #4]
 801d320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d322:	07d9      	lsls	r1, r3, #31
 801d324:	d405      	bmi.n	801d332 <_vfiprintf_r+0x32>
 801d326:	89ab      	ldrh	r3, [r5, #12]
 801d328:	059a      	lsls	r2, r3, #22
 801d32a:	d402      	bmi.n	801d332 <_vfiprintf_r+0x32>
 801d32c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d32e:	f7ff fc96 	bl	801cc5e <__retarget_lock_acquire_recursive>
 801d332:	89ab      	ldrh	r3, [r5, #12]
 801d334:	071b      	lsls	r3, r3, #28
 801d336:	d501      	bpl.n	801d33c <_vfiprintf_r+0x3c>
 801d338:	692b      	ldr	r3, [r5, #16]
 801d33a:	b9eb      	cbnz	r3, 801d378 <_vfiprintf_r+0x78>
 801d33c:	4629      	mov	r1, r5
 801d33e:	4630      	mov	r0, r6
 801d340:	f000 fb06 	bl	801d950 <__swsetup_r>
 801d344:	b1c0      	cbz	r0, 801d378 <_vfiprintf_r+0x78>
 801d346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d348:	07dc      	lsls	r4, r3, #31
 801d34a:	d50e      	bpl.n	801d36a <_vfiprintf_r+0x6a>
 801d34c:	f04f 30ff 	mov.w	r0, #4294967295
 801d350:	b01d      	add	sp, #116	; 0x74
 801d352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d356:	4b7b      	ldr	r3, [pc, #492]	; (801d544 <_vfiprintf_r+0x244>)
 801d358:	429d      	cmp	r5, r3
 801d35a:	d101      	bne.n	801d360 <_vfiprintf_r+0x60>
 801d35c:	68b5      	ldr	r5, [r6, #8]
 801d35e:	e7df      	b.n	801d320 <_vfiprintf_r+0x20>
 801d360:	4b79      	ldr	r3, [pc, #484]	; (801d548 <_vfiprintf_r+0x248>)
 801d362:	429d      	cmp	r5, r3
 801d364:	bf08      	it	eq
 801d366:	68f5      	ldreq	r5, [r6, #12]
 801d368:	e7da      	b.n	801d320 <_vfiprintf_r+0x20>
 801d36a:	89ab      	ldrh	r3, [r5, #12]
 801d36c:	0598      	lsls	r0, r3, #22
 801d36e:	d4ed      	bmi.n	801d34c <_vfiprintf_r+0x4c>
 801d370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d372:	f7ff fc75 	bl	801cc60 <__retarget_lock_release_recursive>
 801d376:	e7e9      	b.n	801d34c <_vfiprintf_r+0x4c>
 801d378:	2300      	movs	r3, #0
 801d37a:	9309      	str	r3, [sp, #36]	; 0x24
 801d37c:	2320      	movs	r3, #32
 801d37e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d382:	f8cd 800c 	str.w	r8, [sp, #12]
 801d386:	2330      	movs	r3, #48	; 0x30
 801d388:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d54c <_vfiprintf_r+0x24c>
 801d38c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d390:	f04f 0901 	mov.w	r9, #1
 801d394:	4623      	mov	r3, r4
 801d396:	469a      	mov	sl, r3
 801d398:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d39c:	b10a      	cbz	r2, 801d3a2 <_vfiprintf_r+0xa2>
 801d39e:	2a25      	cmp	r2, #37	; 0x25
 801d3a0:	d1f9      	bne.n	801d396 <_vfiprintf_r+0x96>
 801d3a2:	ebba 0b04 	subs.w	fp, sl, r4
 801d3a6:	d00b      	beq.n	801d3c0 <_vfiprintf_r+0xc0>
 801d3a8:	465b      	mov	r3, fp
 801d3aa:	4622      	mov	r2, r4
 801d3ac:	4629      	mov	r1, r5
 801d3ae:	4630      	mov	r0, r6
 801d3b0:	f7ff ff93 	bl	801d2da <__sfputs_r>
 801d3b4:	3001      	adds	r0, #1
 801d3b6:	f000 80aa 	beq.w	801d50e <_vfiprintf_r+0x20e>
 801d3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d3bc:	445a      	add	r2, fp
 801d3be:	9209      	str	r2, [sp, #36]	; 0x24
 801d3c0:	f89a 3000 	ldrb.w	r3, [sl]
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	f000 80a2 	beq.w	801d50e <_vfiprintf_r+0x20e>
 801d3ca:	2300      	movs	r3, #0
 801d3cc:	f04f 32ff 	mov.w	r2, #4294967295
 801d3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d3d4:	f10a 0a01 	add.w	sl, sl, #1
 801d3d8:	9304      	str	r3, [sp, #16]
 801d3da:	9307      	str	r3, [sp, #28]
 801d3dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d3e0:	931a      	str	r3, [sp, #104]	; 0x68
 801d3e2:	4654      	mov	r4, sl
 801d3e4:	2205      	movs	r2, #5
 801d3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3ea:	4858      	ldr	r0, [pc, #352]	; (801d54c <_vfiprintf_r+0x24c>)
 801d3ec:	f7e2 fef0 	bl	80001d0 <memchr>
 801d3f0:	9a04      	ldr	r2, [sp, #16]
 801d3f2:	b9d8      	cbnz	r0, 801d42c <_vfiprintf_r+0x12c>
 801d3f4:	06d1      	lsls	r1, r2, #27
 801d3f6:	bf44      	itt	mi
 801d3f8:	2320      	movmi	r3, #32
 801d3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d3fe:	0713      	lsls	r3, r2, #28
 801d400:	bf44      	itt	mi
 801d402:	232b      	movmi	r3, #43	; 0x2b
 801d404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d408:	f89a 3000 	ldrb.w	r3, [sl]
 801d40c:	2b2a      	cmp	r3, #42	; 0x2a
 801d40e:	d015      	beq.n	801d43c <_vfiprintf_r+0x13c>
 801d410:	9a07      	ldr	r2, [sp, #28]
 801d412:	4654      	mov	r4, sl
 801d414:	2000      	movs	r0, #0
 801d416:	f04f 0c0a 	mov.w	ip, #10
 801d41a:	4621      	mov	r1, r4
 801d41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d420:	3b30      	subs	r3, #48	; 0x30
 801d422:	2b09      	cmp	r3, #9
 801d424:	d94e      	bls.n	801d4c4 <_vfiprintf_r+0x1c4>
 801d426:	b1b0      	cbz	r0, 801d456 <_vfiprintf_r+0x156>
 801d428:	9207      	str	r2, [sp, #28]
 801d42a:	e014      	b.n	801d456 <_vfiprintf_r+0x156>
 801d42c:	eba0 0308 	sub.w	r3, r0, r8
 801d430:	fa09 f303 	lsl.w	r3, r9, r3
 801d434:	4313      	orrs	r3, r2
 801d436:	9304      	str	r3, [sp, #16]
 801d438:	46a2      	mov	sl, r4
 801d43a:	e7d2      	b.n	801d3e2 <_vfiprintf_r+0xe2>
 801d43c:	9b03      	ldr	r3, [sp, #12]
 801d43e:	1d19      	adds	r1, r3, #4
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	9103      	str	r1, [sp, #12]
 801d444:	2b00      	cmp	r3, #0
 801d446:	bfbb      	ittet	lt
 801d448:	425b      	neglt	r3, r3
 801d44a:	f042 0202 	orrlt.w	r2, r2, #2
 801d44e:	9307      	strge	r3, [sp, #28]
 801d450:	9307      	strlt	r3, [sp, #28]
 801d452:	bfb8      	it	lt
 801d454:	9204      	strlt	r2, [sp, #16]
 801d456:	7823      	ldrb	r3, [r4, #0]
 801d458:	2b2e      	cmp	r3, #46	; 0x2e
 801d45a:	d10c      	bne.n	801d476 <_vfiprintf_r+0x176>
 801d45c:	7863      	ldrb	r3, [r4, #1]
 801d45e:	2b2a      	cmp	r3, #42	; 0x2a
 801d460:	d135      	bne.n	801d4ce <_vfiprintf_r+0x1ce>
 801d462:	9b03      	ldr	r3, [sp, #12]
 801d464:	1d1a      	adds	r2, r3, #4
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	9203      	str	r2, [sp, #12]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	bfb8      	it	lt
 801d46e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d472:	3402      	adds	r4, #2
 801d474:	9305      	str	r3, [sp, #20]
 801d476:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d55c <_vfiprintf_r+0x25c>
 801d47a:	7821      	ldrb	r1, [r4, #0]
 801d47c:	2203      	movs	r2, #3
 801d47e:	4650      	mov	r0, sl
 801d480:	f7e2 fea6 	bl	80001d0 <memchr>
 801d484:	b140      	cbz	r0, 801d498 <_vfiprintf_r+0x198>
 801d486:	2340      	movs	r3, #64	; 0x40
 801d488:	eba0 000a 	sub.w	r0, r0, sl
 801d48c:	fa03 f000 	lsl.w	r0, r3, r0
 801d490:	9b04      	ldr	r3, [sp, #16]
 801d492:	4303      	orrs	r3, r0
 801d494:	3401      	adds	r4, #1
 801d496:	9304      	str	r3, [sp, #16]
 801d498:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d49c:	482c      	ldr	r0, [pc, #176]	; (801d550 <_vfiprintf_r+0x250>)
 801d49e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d4a2:	2206      	movs	r2, #6
 801d4a4:	f7e2 fe94 	bl	80001d0 <memchr>
 801d4a8:	2800      	cmp	r0, #0
 801d4aa:	d03f      	beq.n	801d52c <_vfiprintf_r+0x22c>
 801d4ac:	4b29      	ldr	r3, [pc, #164]	; (801d554 <_vfiprintf_r+0x254>)
 801d4ae:	bb1b      	cbnz	r3, 801d4f8 <_vfiprintf_r+0x1f8>
 801d4b0:	9b03      	ldr	r3, [sp, #12]
 801d4b2:	3307      	adds	r3, #7
 801d4b4:	f023 0307 	bic.w	r3, r3, #7
 801d4b8:	3308      	adds	r3, #8
 801d4ba:	9303      	str	r3, [sp, #12]
 801d4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4be:	443b      	add	r3, r7
 801d4c0:	9309      	str	r3, [sp, #36]	; 0x24
 801d4c2:	e767      	b.n	801d394 <_vfiprintf_r+0x94>
 801d4c4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d4c8:	460c      	mov	r4, r1
 801d4ca:	2001      	movs	r0, #1
 801d4cc:	e7a5      	b.n	801d41a <_vfiprintf_r+0x11a>
 801d4ce:	2300      	movs	r3, #0
 801d4d0:	3401      	adds	r4, #1
 801d4d2:	9305      	str	r3, [sp, #20]
 801d4d4:	4619      	mov	r1, r3
 801d4d6:	f04f 0c0a 	mov.w	ip, #10
 801d4da:	4620      	mov	r0, r4
 801d4dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d4e0:	3a30      	subs	r2, #48	; 0x30
 801d4e2:	2a09      	cmp	r2, #9
 801d4e4:	d903      	bls.n	801d4ee <_vfiprintf_r+0x1ee>
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d0c5      	beq.n	801d476 <_vfiprintf_r+0x176>
 801d4ea:	9105      	str	r1, [sp, #20]
 801d4ec:	e7c3      	b.n	801d476 <_vfiprintf_r+0x176>
 801d4ee:	fb0c 2101 	mla	r1, ip, r1, r2
 801d4f2:	4604      	mov	r4, r0
 801d4f4:	2301      	movs	r3, #1
 801d4f6:	e7f0      	b.n	801d4da <_vfiprintf_r+0x1da>
 801d4f8:	ab03      	add	r3, sp, #12
 801d4fa:	9300      	str	r3, [sp, #0]
 801d4fc:	462a      	mov	r2, r5
 801d4fe:	4b16      	ldr	r3, [pc, #88]	; (801d558 <_vfiprintf_r+0x258>)
 801d500:	a904      	add	r1, sp, #16
 801d502:	4630      	mov	r0, r6
 801d504:	f3af 8000 	nop.w
 801d508:	4607      	mov	r7, r0
 801d50a:	1c78      	adds	r0, r7, #1
 801d50c:	d1d6      	bne.n	801d4bc <_vfiprintf_r+0x1bc>
 801d50e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d510:	07d9      	lsls	r1, r3, #31
 801d512:	d405      	bmi.n	801d520 <_vfiprintf_r+0x220>
 801d514:	89ab      	ldrh	r3, [r5, #12]
 801d516:	059a      	lsls	r2, r3, #22
 801d518:	d402      	bmi.n	801d520 <_vfiprintf_r+0x220>
 801d51a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d51c:	f7ff fba0 	bl	801cc60 <__retarget_lock_release_recursive>
 801d520:	89ab      	ldrh	r3, [r5, #12]
 801d522:	065b      	lsls	r3, r3, #25
 801d524:	f53f af12 	bmi.w	801d34c <_vfiprintf_r+0x4c>
 801d528:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d52a:	e711      	b.n	801d350 <_vfiprintf_r+0x50>
 801d52c:	ab03      	add	r3, sp, #12
 801d52e:	9300      	str	r3, [sp, #0]
 801d530:	462a      	mov	r2, r5
 801d532:	4b09      	ldr	r3, [pc, #36]	; (801d558 <_vfiprintf_r+0x258>)
 801d534:	a904      	add	r1, sp, #16
 801d536:	4630      	mov	r0, r6
 801d538:	f000 f880 	bl	801d63c <_printf_i>
 801d53c:	e7e4      	b.n	801d508 <_vfiprintf_r+0x208>
 801d53e:	bf00      	nop
 801d540:	08021620 	.word	0x08021620
 801d544:	08021640 	.word	0x08021640
 801d548:	08021600 	.word	0x08021600
 801d54c:	08021716 	.word	0x08021716
 801d550:	08021720 	.word	0x08021720
 801d554:	00000000 	.word	0x00000000
 801d558:	0801d2db 	.word	0x0801d2db
 801d55c:	0802171c 	.word	0x0802171c

0801d560 <_printf_common>:
 801d560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d564:	4616      	mov	r6, r2
 801d566:	4699      	mov	r9, r3
 801d568:	688a      	ldr	r2, [r1, #8]
 801d56a:	690b      	ldr	r3, [r1, #16]
 801d56c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d570:	4293      	cmp	r3, r2
 801d572:	bfb8      	it	lt
 801d574:	4613      	movlt	r3, r2
 801d576:	6033      	str	r3, [r6, #0]
 801d578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d57c:	4607      	mov	r7, r0
 801d57e:	460c      	mov	r4, r1
 801d580:	b10a      	cbz	r2, 801d586 <_printf_common+0x26>
 801d582:	3301      	adds	r3, #1
 801d584:	6033      	str	r3, [r6, #0]
 801d586:	6823      	ldr	r3, [r4, #0]
 801d588:	0699      	lsls	r1, r3, #26
 801d58a:	bf42      	ittt	mi
 801d58c:	6833      	ldrmi	r3, [r6, #0]
 801d58e:	3302      	addmi	r3, #2
 801d590:	6033      	strmi	r3, [r6, #0]
 801d592:	6825      	ldr	r5, [r4, #0]
 801d594:	f015 0506 	ands.w	r5, r5, #6
 801d598:	d106      	bne.n	801d5a8 <_printf_common+0x48>
 801d59a:	f104 0a19 	add.w	sl, r4, #25
 801d59e:	68e3      	ldr	r3, [r4, #12]
 801d5a0:	6832      	ldr	r2, [r6, #0]
 801d5a2:	1a9b      	subs	r3, r3, r2
 801d5a4:	42ab      	cmp	r3, r5
 801d5a6:	dc26      	bgt.n	801d5f6 <_printf_common+0x96>
 801d5a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d5ac:	1e13      	subs	r3, r2, #0
 801d5ae:	6822      	ldr	r2, [r4, #0]
 801d5b0:	bf18      	it	ne
 801d5b2:	2301      	movne	r3, #1
 801d5b4:	0692      	lsls	r2, r2, #26
 801d5b6:	d42b      	bmi.n	801d610 <_printf_common+0xb0>
 801d5b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d5bc:	4649      	mov	r1, r9
 801d5be:	4638      	mov	r0, r7
 801d5c0:	47c0      	blx	r8
 801d5c2:	3001      	adds	r0, #1
 801d5c4:	d01e      	beq.n	801d604 <_printf_common+0xa4>
 801d5c6:	6823      	ldr	r3, [r4, #0]
 801d5c8:	68e5      	ldr	r5, [r4, #12]
 801d5ca:	6832      	ldr	r2, [r6, #0]
 801d5cc:	f003 0306 	and.w	r3, r3, #6
 801d5d0:	2b04      	cmp	r3, #4
 801d5d2:	bf08      	it	eq
 801d5d4:	1aad      	subeq	r5, r5, r2
 801d5d6:	68a3      	ldr	r3, [r4, #8]
 801d5d8:	6922      	ldr	r2, [r4, #16]
 801d5da:	bf0c      	ite	eq
 801d5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d5e0:	2500      	movne	r5, #0
 801d5e2:	4293      	cmp	r3, r2
 801d5e4:	bfc4      	itt	gt
 801d5e6:	1a9b      	subgt	r3, r3, r2
 801d5e8:	18ed      	addgt	r5, r5, r3
 801d5ea:	2600      	movs	r6, #0
 801d5ec:	341a      	adds	r4, #26
 801d5ee:	42b5      	cmp	r5, r6
 801d5f0:	d11a      	bne.n	801d628 <_printf_common+0xc8>
 801d5f2:	2000      	movs	r0, #0
 801d5f4:	e008      	b.n	801d608 <_printf_common+0xa8>
 801d5f6:	2301      	movs	r3, #1
 801d5f8:	4652      	mov	r2, sl
 801d5fa:	4649      	mov	r1, r9
 801d5fc:	4638      	mov	r0, r7
 801d5fe:	47c0      	blx	r8
 801d600:	3001      	adds	r0, #1
 801d602:	d103      	bne.n	801d60c <_printf_common+0xac>
 801d604:	f04f 30ff 	mov.w	r0, #4294967295
 801d608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d60c:	3501      	adds	r5, #1
 801d60e:	e7c6      	b.n	801d59e <_printf_common+0x3e>
 801d610:	18e1      	adds	r1, r4, r3
 801d612:	1c5a      	adds	r2, r3, #1
 801d614:	2030      	movs	r0, #48	; 0x30
 801d616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d61a:	4422      	add	r2, r4
 801d61c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d624:	3302      	adds	r3, #2
 801d626:	e7c7      	b.n	801d5b8 <_printf_common+0x58>
 801d628:	2301      	movs	r3, #1
 801d62a:	4622      	mov	r2, r4
 801d62c:	4649      	mov	r1, r9
 801d62e:	4638      	mov	r0, r7
 801d630:	47c0      	blx	r8
 801d632:	3001      	adds	r0, #1
 801d634:	d0e6      	beq.n	801d604 <_printf_common+0xa4>
 801d636:	3601      	adds	r6, #1
 801d638:	e7d9      	b.n	801d5ee <_printf_common+0x8e>
	...

0801d63c <_printf_i>:
 801d63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d640:	460c      	mov	r4, r1
 801d642:	4691      	mov	r9, r2
 801d644:	7e27      	ldrb	r7, [r4, #24]
 801d646:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d648:	2f78      	cmp	r7, #120	; 0x78
 801d64a:	4680      	mov	r8, r0
 801d64c:	469a      	mov	sl, r3
 801d64e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d652:	d807      	bhi.n	801d664 <_printf_i+0x28>
 801d654:	2f62      	cmp	r7, #98	; 0x62
 801d656:	d80a      	bhi.n	801d66e <_printf_i+0x32>
 801d658:	2f00      	cmp	r7, #0
 801d65a:	f000 80d8 	beq.w	801d80e <_printf_i+0x1d2>
 801d65e:	2f58      	cmp	r7, #88	; 0x58
 801d660:	f000 80a3 	beq.w	801d7aa <_printf_i+0x16e>
 801d664:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d66c:	e03a      	b.n	801d6e4 <_printf_i+0xa8>
 801d66e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d672:	2b15      	cmp	r3, #21
 801d674:	d8f6      	bhi.n	801d664 <_printf_i+0x28>
 801d676:	a001      	add	r0, pc, #4	; (adr r0, 801d67c <_printf_i+0x40>)
 801d678:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d67c:	0801d6d5 	.word	0x0801d6d5
 801d680:	0801d6e9 	.word	0x0801d6e9
 801d684:	0801d665 	.word	0x0801d665
 801d688:	0801d665 	.word	0x0801d665
 801d68c:	0801d665 	.word	0x0801d665
 801d690:	0801d665 	.word	0x0801d665
 801d694:	0801d6e9 	.word	0x0801d6e9
 801d698:	0801d665 	.word	0x0801d665
 801d69c:	0801d665 	.word	0x0801d665
 801d6a0:	0801d665 	.word	0x0801d665
 801d6a4:	0801d665 	.word	0x0801d665
 801d6a8:	0801d7f5 	.word	0x0801d7f5
 801d6ac:	0801d719 	.word	0x0801d719
 801d6b0:	0801d7d7 	.word	0x0801d7d7
 801d6b4:	0801d665 	.word	0x0801d665
 801d6b8:	0801d665 	.word	0x0801d665
 801d6bc:	0801d817 	.word	0x0801d817
 801d6c0:	0801d665 	.word	0x0801d665
 801d6c4:	0801d719 	.word	0x0801d719
 801d6c8:	0801d665 	.word	0x0801d665
 801d6cc:	0801d665 	.word	0x0801d665
 801d6d0:	0801d7df 	.word	0x0801d7df
 801d6d4:	680b      	ldr	r3, [r1, #0]
 801d6d6:	1d1a      	adds	r2, r3, #4
 801d6d8:	681b      	ldr	r3, [r3, #0]
 801d6da:	600a      	str	r2, [r1, #0]
 801d6dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d6e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d6e4:	2301      	movs	r3, #1
 801d6e6:	e0a3      	b.n	801d830 <_printf_i+0x1f4>
 801d6e8:	6825      	ldr	r5, [r4, #0]
 801d6ea:	6808      	ldr	r0, [r1, #0]
 801d6ec:	062e      	lsls	r6, r5, #24
 801d6ee:	f100 0304 	add.w	r3, r0, #4
 801d6f2:	d50a      	bpl.n	801d70a <_printf_i+0xce>
 801d6f4:	6805      	ldr	r5, [r0, #0]
 801d6f6:	600b      	str	r3, [r1, #0]
 801d6f8:	2d00      	cmp	r5, #0
 801d6fa:	da03      	bge.n	801d704 <_printf_i+0xc8>
 801d6fc:	232d      	movs	r3, #45	; 0x2d
 801d6fe:	426d      	negs	r5, r5
 801d700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d704:	485e      	ldr	r0, [pc, #376]	; (801d880 <_printf_i+0x244>)
 801d706:	230a      	movs	r3, #10
 801d708:	e019      	b.n	801d73e <_printf_i+0x102>
 801d70a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d70e:	6805      	ldr	r5, [r0, #0]
 801d710:	600b      	str	r3, [r1, #0]
 801d712:	bf18      	it	ne
 801d714:	b22d      	sxthne	r5, r5
 801d716:	e7ef      	b.n	801d6f8 <_printf_i+0xbc>
 801d718:	680b      	ldr	r3, [r1, #0]
 801d71a:	6825      	ldr	r5, [r4, #0]
 801d71c:	1d18      	adds	r0, r3, #4
 801d71e:	6008      	str	r0, [r1, #0]
 801d720:	0628      	lsls	r0, r5, #24
 801d722:	d501      	bpl.n	801d728 <_printf_i+0xec>
 801d724:	681d      	ldr	r5, [r3, #0]
 801d726:	e002      	b.n	801d72e <_printf_i+0xf2>
 801d728:	0669      	lsls	r1, r5, #25
 801d72a:	d5fb      	bpl.n	801d724 <_printf_i+0xe8>
 801d72c:	881d      	ldrh	r5, [r3, #0]
 801d72e:	4854      	ldr	r0, [pc, #336]	; (801d880 <_printf_i+0x244>)
 801d730:	2f6f      	cmp	r7, #111	; 0x6f
 801d732:	bf0c      	ite	eq
 801d734:	2308      	moveq	r3, #8
 801d736:	230a      	movne	r3, #10
 801d738:	2100      	movs	r1, #0
 801d73a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d73e:	6866      	ldr	r6, [r4, #4]
 801d740:	60a6      	str	r6, [r4, #8]
 801d742:	2e00      	cmp	r6, #0
 801d744:	bfa2      	ittt	ge
 801d746:	6821      	ldrge	r1, [r4, #0]
 801d748:	f021 0104 	bicge.w	r1, r1, #4
 801d74c:	6021      	strge	r1, [r4, #0]
 801d74e:	b90d      	cbnz	r5, 801d754 <_printf_i+0x118>
 801d750:	2e00      	cmp	r6, #0
 801d752:	d04d      	beq.n	801d7f0 <_printf_i+0x1b4>
 801d754:	4616      	mov	r6, r2
 801d756:	fbb5 f1f3 	udiv	r1, r5, r3
 801d75a:	fb03 5711 	mls	r7, r3, r1, r5
 801d75e:	5dc7      	ldrb	r7, [r0, r7]
 801d760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d764:	462f      	mov	r7, r5
 801d766:	42bb      	cmp	r3, r7
 801d768:	460d      	mov	r5, r1
 801d76a:	d9f4      	bls.n	801d756 <_printf_i+0x11a>
 801d76c:	2b08      	cmp	r3, #8
 801d76e:	d10b      	bne.n	801d788 <_printf_i+0x14c>
 801d770:	6823      	ldr	r3, [r4, #0]
 801d772:	07df      	lsls	r7, r3, #31
 801d774:	d508      	bpl.n	801d788 <_printf_i+0x14c>
 801d776:	6923      	ldr	r3, [r4, #16]
 801d778:	6861      	ldr	r1, [r4, #4]
 801d77a:	4299      	cmp	r1, r3
 801d77c:	bfde      	ittt	le
 801d77e:	2330      	movle	r3, #48	; 0x30
 801d780:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d784:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d788:	1b92      	subs	r2, r2, r6
 801d78a:	6122      	str	r2, [r4, #16]
 801d78c:	f8cd a000 	str.w	sl, [sp]
 801d790:	464b      	mov	r3, r9
 801d792:	aa03      	add	r2, sp, #12
 801d794:	4621      	mov	r1, r4
 801d796:	4640      	mov	r0, r8
 801d798:	f7ff fee2 	bl	801d560 <_printf_common>
 801d79c:	3001      	adds	r0, #1
 801d79e:	d14c      	bne.n	801d83a <_printf_i+0x1fe>
 801d7a0:	f04f 30ff 	mov.w	r0, #4294967295
 801d7a4:	b004      	add	sp, #16
 801d7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7aa:	4835      	ldr	r0, [pc, #212]	; (801d880 <_printf_i+0x244>)
 801d7ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d7b0:	6823      	ldr	r3, [r4, #0]
 801d7b2:	680e      	ldr	r6, [r1, #0]
 801d7b4:	061f      	lsls	r7, r3, #24
 801d7b6:	f856 5b04 	ldr.w	r5, [r6], #4
 801d7ba:	600e      	str	r6, [r1, #0]
 801d7bc:	d514      	bpl.n	801d7e8 <_printf_i+0x1ac>
 801d7be:	07d9      	lsls	r1, r3, #31
 801d7c0:	bf44      	itt	mi
 801d7c2:	f043 0320 	orrmi.w	r3, r3, #32
 801d7c6:	6023      	strmi	r3, [r4, #0]
 801d7c8:	b91d      	cbnz	r5, 801d7d2 <_printf_i+0x196>
 801d7ca:	6823      	ldr	r3, [r4, #0]
 801d7cc:	f023 0320 	bic.w	r3, r3, #32
 801d7d0:	6023      	str	r3, [r4, #0]
 801d7d2:	2310      	movs	r3, #16
 801d7d4:	e7b0      	b.n	801d738 <_printf_i+0xfc>
 801d7d6:	6823      	ldr	r3, [r4, #0]
 801d7d8:	f043 0320 	orr.w	r3, r3, #32
 801d7dc:	6023      	str	r3, [r4, #0]
 801d7de:	2378      	movs	r3, #120	; 0x78
 801d7e0:	4828      	ldr	r0, [pc, #160]	; (801d884 <_printf_i+0x248>)
 801d7e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d7e6:	e7e3      	b.n	801d7b0 <_printf_i+0x174>
 801d7e8:	065e      	lsls	r6, r3, #25
 801d7ea:	bf48      	it	mi
 801d7ec:	b2ad      	uxthmi	r5, r5
 801d7ee:	e7e6      	b.n	801d7be <_printf_i+0x182>
 801d7f0:	4616      	mov	r6, r2
 801d7f2:	e7bb      	b.n	801d76c <_printf_i+0x130>
 801d7f4:	680b      	ldr	r3, [r1, #0]
 801d7f6:	6826      	ldr	r6, [r4, #0]
 801d7f8:	6960      	ldr	r0, [r4, #20]
 801d7fa:	1d1d      	adds	r5, r3, #4
 801d7fc:	600d      	str	r5, [r1, #0]
 801d7fe:	0635      	lsls	r5, r6, #24
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	d501      	bpl.n	801d808 <_printf_i+0x1cc>
 801d804:	6018      	str	r0, [r3, #0]
 801d806:	e002      	b.n	801d80e <_printf_i+0x1d2>
 801d808:	0671      	lsls	r1, r6, #25
 801d80a:	d5fb      	bpl.n	801d804 <_printf_i+0x1c8>
 801d80c:	8018      	strh	r0, [r3, #0]
 801d80e:	2300      	movs	r3, #0
 801d810:	6123      	str	r3, [r4, #16]
 801d812:	4616      	mov	r6, r2
 801d814:	e7ba      	b.n	801d78c <_printf_i+0x150>
 801d816:	680b      	ldr	r3, [r1, #0]
 801d818:	1d1a      	adds	r2, r3, #4
 801d81a:	600a      	str	r2, [r1, #0]
 801d81c:	681e      	ldr	r6, [r3, #0]
 801d81e:	6862      	ldr	r2, [r4, #4]
 801d820:	2100      	movs	r1, #0
 801d822:	4630      	mov	r0, r6
 801d824:	f7e2 fcd4 	bl	80001d0 <memchr>
 801d828:	b108      	cbz	r0, 801d82e <_printf_i+0x1f2>
 801d82a:	1b80      	subs	r0, r0, r6
 801d82c:	6060      	str	r0, [r4, #4]
 801d82e:	6863      	ldr	r3, [r4, #4]
 801d830:	6123      	str	r3, [r4, #16]
 801d832:	2300      	movs	r3, #0
 801d834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d838:	e7a8      	b.n	801d78c <_printf_i+0x150>
 801d83a:	6923      	ldr	r3, [r4, #16]
 801d83c:	4632      	mov	r2, r6
 801d83e:	4649      	mov	r1, r9
 801d840:	4640      	mov	r0, r8
 801d842:	47d0      	blx	sl
 801d844:	3001      	adds	r0, #1
 801d846:	d0ab      	beq.n	801d7a0 <_printf_i+0x164>
 801d848:	6823      	ldr	r3, [r4, #0]
 801d84a:	079b      	lsls	r3, r3, #30
 801d84c:	d413      	bmi.n	801d876 <_printf_i+0x23a>
 801d84e:	68e0      	ldr	r0, [r4, #12]
 801d850:	9b03      	ldr	r3, [sp, #12]
 801d852:	4298      	cmp	r0, r3
 801d854:	bfb8      	it	lt
 801d856:	4618      	movlt	r0, r3
 801d858:	e7a4      	b.n	801d7a4 <_printf_i+0x168>
 801d85a:	2301      	movs	r3, #1
 801d85c:	4632      	mov	r2, r6
 801d85e:	4649      	mov	r1, r9
 801d860:	4640      	mov	r0, r8
 801d862:	47d0      	blx	sl
 801d864:	3001      	adds	r0, #1
 801d866:	d09b      	beq.n	801d7a0 <_printf_i+0x164>
 801d868:	3501      	adds	r5, #1
 801d86a:	68e3      	ldr	r3, [r4, #12]
 801d86c:	9903      	ldr	r1, [sp, #12]
 801d86e:	1a5b      	subs	r3, r3, r1
 801d870:	42ab      	cmp	r3, r5
 801d872:	dcf2      	bgt.n	801d85a <_printf_i+0x21e>
 801d874:	e7eb      	b.n	801d84e <_printf_i+0x212>
 801d876:	2500      	movs	r5, #0
 801d878:	f104 0619 	add.w	r6, r4, #25
 801d87c:	e7f5      	b.n	801d86a <_printf_i+0x22e>
 801d87e:	bf00      	nop
 801d880:	08021727 	.word	0x08021727
 801d884:	08021738 	.word	0x08021738

0801d888 <_read_r>:
 801d888:	b538      	push	{r3, r4, r5, lr}
 801d88a:	4d07      	ldr	r5, [pc, #28]	; (801d8a8 <_read_r+0x20>)
 801d88c:	4604      	mov	r4, r0
 801d88e:	4608      	mov	r0, r1
 801d890:	4611      	mov	r1, r2
 801d892:	2200      	movs	r2, #0
 801d894:	602a      	str	r2, [r5, #0]
 801d896:	461a      	mov	r2, r3
 801d898:	f7e4 fa48 	bl	8001d2c <_read>
 801d89c:	1c43      	adds	r3, r0, #1
 801d89e:	d102      	bne.n	801d8a6 <_read_r+0x1e>
 801d8a0:	682b      	ldr	r3, [r5, #0]
 801d8a2:	b103      	cbz	r3, 801d8a6 <_read_r+0x1e>
 801d8a4:	6023      	str	r3, [r4, #0]
 801d8a6:	bd38      	pop	{r3, r4, r5, pc}
 801d8a8:	20013a38 	.word	0x20013a38

0801d8ac <__swbuf_r>:
 801d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8ae:	460e      	mov	r6, r1
 801d8b0:	4614      	mov	r4, r2
 801d8b2:	4605      	mov	r5, r0
 801d8b4:	b118      	cbz	r0, 801d8be <__swbuf_r+0x12>
 801d8b6:	6983      	ldr	r3, [r0, #24]
 801d8b8:	b90b      	cbnz	r3, 801d8be <__swbuf_r+0x12>
 801d8ba:	f7ff f90d 	bl	801cad8 <__sinit>
 801d8be:	4b21      	ldr	r3, [pc, #132]	; (801d944 <__swbuf_r+0x98>)
 801d8c0:	429c      	cmp	r4, r3
 801d8c2:	d12b      	bne.n	801d91c <__swbuf_r+0x70>
 801d8c4:	686c      	ldr	r4, [r5, #4]
 801d8c6:	69a3      	ldr	r3, [r4, #24]
 801d8c8:	60a3      	str	r3, [r4, #8]
 801d8ca:	89a3      	ldrh	r3, [r4, #12]
 801d8cc:	071a      	lsls	r2, r3, #28
 801d8ce:	d52f      	bpl.n	801d930 <__swbuf_r+0x84>
 801d8d0:	6923      	ldr	r3, [r4, #16]
 801d8d2:	b36b      	cbz	r3, 801d930 <__swbuf_r+0x84>
 801d8d4:	6923      	ldr	r3, [r4, #16]
 801d8d6:	6820      	ldr	r0, [r4, #0]
 801d8d8:	1ac0      	subs	r0, r0, r3
 801d8da:	6963      	ldr	r3, [r4, #20]
 801d8dc:	b2f6      	uxtb	r6, r6
 801d8de:	4283      	cmp	r3, r0
 801d8e0:	4637      	mov	r7, r6
 801d8e2:	dc04      	bgt.n	801d8ee <__swbuf_r+0x42>
 801d8e4:	4621      	mov	r1, r4
 801d8e6:	4628      	mov	r0, r5
 801d8e8:	f7ff fc1c 	bl	801d124 <_fflush_r>
 801d8ec:	bb30      	cbnz	r0, 801d93c <__swbuf_r+0x90>
 801d8ee:	68a3      	ldr	r3, [r4, #8]
 801d8f0:	3b01      	subs	r3, #1
 801d8f2:	60a3      	str	r3, [r4, #8]
 801d8f4:	6823      	ldr	r3, [r4, #0]
 801d8f6:	1c5a      	adds	r2, r3, #1
 801d8f8:	6022      	str	r2, [r4, #0]
 801d8fa:	701e      	strb	r6, [r3, #0]
 801d8fc:	6963      	ldr	r3, [r4, #20]
 801d8fe:	3001      	adds	r0, #1
 801d900:	4283      	cmp	r3, r0
 801d902:	d004      	beq.n	801d90e <__swbuf_r+0x62>
 801d904:	89a3      	ldrh	r3, [r4, #12]
 801d906:	07db      	lsls	r3, r3, #31
 801d908:	d506      	bpl.n	801d918 <__swbuf_r+0x6c>
 801d90a:	2e0a      	cmp	r6, #10
 801d90c:	d104      	bne.n	801d918 <__swbuf_r+0x6c>
 801d90e:	4621      	mov	r1, r4
 801d910:	4628      	mov	r0, r5
 801d912:	f7ff fc07 	bl	801d124 <_fflush_r>
 801d916:	b988      	cbnz	r0, 801d93c <__swbuf_r+0x90>
 801d918:	4638      	mov	r0, r7
 801d91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d91c:	4b0a      	ldr	r3, [pc, #40]	; (801d948 <__swbuf_r+0x9c>)
 801d91e:	429c      	cmp	r4, r3
 801d920:	d101      	bne.n	801d926 <__swbuf_r+0x7a>
 801d922:	68ac      	ldr	r4, [r5, #8]
 801d924:	e7cf      	b.n	801d8c6 <__swbuf_r+0x1a>
 801d926:	4b09      	ldr	r3, [pc, #36]	; (801d94c <__swbuf_r+0xa0>)
 801d928:	429c      	cmp	r4, r3
 801d92a:	bf08      	it	eq
 801d92c:	68ec      	ldreq	r4, [r5, #12]
 801d92e:	e7ca      	b.n	801d8c6 <__swbuf_r+0x1a>
 801d930:	4621      	mov	r1, r4
 801d932:	4628      	mov	r0, r5
 801d934:	f000 f80c 	bl	801d950 <__swsetup_r>
 801d938:	2800      	cmp	r0, #0
 801d93a:	d0cb      	beq.n	801d8d4 <__swbuf_r+0x28>
 801d93c:	f04f 37ff 	mov.w	r7, #4294967295
 801d940:	e7ea      	b.n	801d918 <__swbuf_r+0x6c>
 801d942:	bf00      	nop
 801d944:	08021620 	.word	0x08021620
 801d948:	08021640 	.word	0x08021640
 801d94c:	08021600 	.word	0x08021600

0801d950 <__swsetup_r>:
 801d950:	4b32      	ldr	r3, [pc, #200]	; (801da1c <__swsetup_r+0xcc>)
 801d952:	b570      	push	{r4, r5, r6, lr}
 801d954:	681d      	ldr	r5, [r3, #0]
 801d956:	4606      	mov	r6, r0
 801d958:	460c      	mov	r4, r1
 801d95a:	b125      	cbz	r5, 801d966 <__swsetup_r+0x16>
 801d95c:	69ab      	ldr	r3, [r5, #24]
 801d95e:	b913      	cbnz	r3, 801d966 <__swsetup_r+0x16>
 801d960:	4628      	mov	r0, r5
 801d962:	f7ff f8b9 	bl	801cad8 <__sinit>
 801d966:	4b2e      	ldr	r3, [pc, #184]	; (801da20 <__swsetup_r+0xd0>)
 801d968:	429c      	cmp	r4, r3
 801d96a:	d10f      	bne.n	801d98c <__swsetup_r+0x3c>
 801d96c:	686c      	ldr	r4, [r5, #4]
 801d96e:	89a3      	ldrh	r3, [r4, #12]
 801d970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d974:	0719      	lsls	r1, r3, #28
 801d976:	d42c      	bmi.n	801d9d2 <__swsetup_r+0x82>
 801d978:	06dd      	lsls	r5, r3, #27
 801d97a:	d411      	bmi.n	801d9a0 <__swsetup_r+0x50>
 801d97c:	2309      	movs	r3, #9
 801d97e:	6033      	str	r3, [r6, #0]
 801d980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d984:	81a3      	strh	r3, [r4, #12]
 801d986:	f04f 30ff 	mov.w	r0, #4294967295
 801d98a:	e03e      	b.n	801da0a <__swsetup_r+0xba>
 801d98c:	4b25      	ldr	r3, [pc, #148]	; (801da24 <__swsetup_r+0xd4>)
 801d98e:	429c      	cmp	r4, r3
 801d990:	d101      	bne.n	801d996 <__swsetup_r+0x46>
 801d992:	68ac      	ldr	r4, [r5, #8]
 801d994:	e7eb      	b.n	801d96e <__swsetup_r+0x1e>
 801d996:	4b24      	ldr	r3, [pc, #144]	; (801da28 <__swsetup_r+0xd8>)
 801d998:	429c      	cmp	r4, r3
 801d99a:	bf08      	it	eq
 801d99c:	68ec      	ldreq	r4, [r5, #12]
 801d99e:	e7e6      	b.n	801d96e <__swsetup_r+0x1e>
 801d9a0:	0758      	lsls	r0, r3, #29
 801d9a2:	d512      	bpl.n	801d9ca <__swsetup_r+0x7a>
 801d9a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d9a6:	b141      	cbz	r1, 801d9ba <__swsetup_r+0x6a>
 801d9a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d9ac:	4299      	cmp	r1, r3
 801d9ae:	d002      	beq.n	801d9b6 <__swsetup_r+0x66>
 801d9b0:	4630      	mov	r0, r6
 801d9b2:	f7ff fc2b 	bl	801d20c <_free_r>
 801d9b6:	2300      	movs	r3, #0
 801d9b8:	6363      	str	r3, [r4, #52]	; 0x34
 801d9ba:	89a3      	ldrh	r3, [r4, #12]
 801d9bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d9c0:	81a3      	strh	r3, [r4, #12]
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	6063      	str	r3, [r4, #4]
 801d9c6:	6923      	ldr	r3, [r4, #16]
 801d9c8:	6023      	str	r3, [r4, #0]
 801d9ca:	89a3      	ldrh	r3, [r4, #12]
 801d9cc:	f043 0308 	orr.w	r3, r3, #8
 801d9d0:	81a3      	strh	r3, [r4, #12]
 801d9d2:	6923      	ldr	r3, [r4, #16]
 801d9d4:	b94b      	cbnz	r3, 801d9ea <__swsetup_r+0x9a>
 801d9d6:	89a3      	ldrh	r3, [r4, #12]
 801d9d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d9dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d9e0:	d003      	beq.n	801d9ea <__swsetup_r+0x9a>
 801d9e2:	4621      	mov	r1, r4
 801d9e4:	4630      	mov	r0, r6
 801d9e6:	f000 f84d 	bl	801da84 <__smakebuf_r>
 801d9ea:	89a0      	ldrh	r0, [r4, #12]
 801d9ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d9f0:	f010 0301 	ands.w	r3, r0, #1
 801d9f4:	d00a      	beq.n	801da0c <__swsetup_r+0xbc>
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	60a3      	str	r3, [r4, #8]
 801d9fa:	6963      	ldr	r3, [r4, #20]
 801d9fc:	425b      	negs	r3, r3
 801d9fe:	61a3      	str	r3, [r4, #24]
 801da00:	6923      	ldr	r3, [r4, #16]
 801da02:	b943      	cbnz	r3, 801da16 <__swsetup_r+0xc6>
 801da04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801da08:	d1ba      	bne.n	801d980 <__swsetup_r+0x30>
 801da0a:	bd70      	pop	{r4, r5, r6, pc}
 801da0c:	0781      	lsls	r1, r0, #30
 801da0e:	bf58      	it	pl
 801da10:	6963      	ldrpl	r3, [r4, #20]
 801da12:	60a3      	str	r3, [r4, #8]
 801da14:	e7f4      	b.n	801da00 <__swsetup_r+0xb0>
 801da16:	2000      	movs	r0, #0
 801da18:	e7f7      	b.n	801da0a <__swsetup_r+0xba>
 801da1a:	bf00      	nop
 801da1c:	200000f4 	.word	0x200000f4
 801da20:	08021620 	.word	0x08021620
 801da24:	08021640 	.word	0x08021640
 801da28:	08021600 	.word	0x08021600

0801da2c <abort>:
 801da2c:	b508      	push	{r3, lr}
 801da2e:	2006      	movs	r0, #6
 801da30:	f000 f890 	bl	801db54 <raise>
 801da34:	2001      	movs	r0, #1
 801da36:	f7e4 f96f 	bl	8001d18 <_exit>

0801da3a <__swhatbuf_r>:
 801da3a:	b570      	push	{r4, r5, r6, lr}
 801da3c:	460e      	mov	r6, r1
 801da3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da42:	2900      	cmp	r1, #0
 801da44:	b096      	sub	sp, #88	; 0x58
 801da46:	4614      	mov	r4, r2
 801da48:	461d      	mov	r5, r3
 801da4a:	da07      	bge.n	801da5c <__swhatbuf_r+0x22>
 801da4c:	2300      	movs	r3, #0
 801da4e:	602b      	str	r3, [r5, #0]
 801da50:	89b3      	ldrh	r3, [r6, #12]
 801da52:	061a      	lsls	r2, r3, #24
 801da54:	d410      	bmi.n	801da78 <__swhatbuf_r+0x3e>
 801da56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801da5a:	e00e      	b.n	801da7a <__swhatbuf_r+0x40>
 801da5c:	466a      	mov	r2, sp
 801da5e:	f000 f895 	bl	801db8c <_fstat_r>
 801da62:	2800      	cmp	r0, #0
 801da64:	dbf2      	blt.n	801da4c <__swhatbuf_r+0x12>
 801da66:	9a01      	ldr	r2, [sp, #4]
 801da68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801da6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801da70:	425a      	negs	r2, r3
 801da72:	415a      	adcs	r2, r3
 801da74:	602a      	str	r2, [r5, #0]
 801da76:	e7ee      	b.n	801da56 <__swhatbuf_r+0x1c>
 801da78:	2340      	movs	r3, #64	; 0x40
 801da7a:	2000      	movs	r0, #0
 801da7c:	6023      	str	r3, [r4, #0]
 801da7e:	b016      	add	sp, #88	; 0x58
 801da80:	bd70      	pop	{r4, r5, r6, pc}
	...

0801da84 <__smakebuf_r>:
 801da84:	898b      	ldrh	r3, [r1, #12]
 801da86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801da88:	079d      	lsls	r5, r3, #30
 801da8a:	4606      	mov	r6, r0
 801da8c:	460c      	mov	r4, r1
 801da8e:	d507      	bpl.n	801daa0 <__smakebuf_r+0x1c>
 801da90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801da94:	6023      	str	r3, [r4, #0]
 801da96:	6123      	str	r3, [r4, #16]
 801da98:	2301      	movs	r3, #1
 801da9a:	6163      	str	r3, [r4, #20]
 801da9c:	b002      	add	sp, #8
 801da9e:	bd70      	pop	{r4, r5, r6, pc}
 801daa0:	ab01      	add	r3, sp, #4
 801daa2:	466a      	mov	r2, sp
 801daa4:	f7ff ffc9 	bl	801da3a <__swhatbuf_r>
 801daa8:	9900      	ldr	r1, [sp, #0]
 801daaa:	4605      	mov	r5, r0
 801daac:	4630      	mov	r0, r6
 801daae:	f7ff f8fd 	bl	801ccac <_malloc_r>
 801dab2:	b948      	cbnz	r0, 801dac8 <__smakebuf_r+0x44>
 801dab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dab8:	059a      	lsls	r2, r3, #22
 801daba:	d4ef      	bmi.n	801da9c <__smakebuf_r+0x18>
 801dabc:	f023 0303 	bic.w	r3, r3, #3
 801dac0:	f043 0302 	orr.w	r3, r3, #2
 801dac4:	81a3      	strh	r3, [r4, #12]
 801dac6:	e7e3      	b.n	801da90 <__smakebuf_r+0xc>
 801dac8:	4b0d      	ldr	r3, [pc, #52]	; (801db00 <__smakebuf_r+0x7c>)
 801daca:	62b3      	str	r3, [r6, #40]	; 0x28
 801dacc:	89a3      	ldrh	r3, [r4, #12]
 801dace:	6020      	str	r0, [r4, #0]
 801dad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dad4:	81a3      	strh	r3, [r4, #12]
 801dad6:	9b00      	ldr	r3, [sp, #0]
 801dad8:	6163      	str	r3, [r4, #20]
 801dada:	9b01      	ldr	r3, [sp, #4]
 801dadc:	6120      	str	r0, [r4, #16]
 801dade:	b15b      	cbz	r3, 801daf8 <__smakebuf_r+0x74>
 801dae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dae4:	4630      	mov	r0, r6
 801dae6:	f000 f863 	bl	801dbb0 <_isatty_r>
 801daea:	b128      	cbz	r0, 801daf8 <__smakebuf_r+0x74>
 801daec:	89a3      	ldrh	r3, [r4, #12]
 801daee:	f023 0303 	bic.w	r3, r3, #3
 801daf2:	f043 0301 	orr.w	r3, r3, #1
 801daf6:	81a3      	strh	r3, [r4, #12]
 801daf8:	89a0      	ldrh	r0, [r4, #12]
 801dafa:	4305      	orrs	r5, r0
 801dafc:	81a5      	strh	r5, [r4, #12]
 801dafe:	e7cd      	b.n	801da9c <__smakebuf_r+0x18>
 801db00:	0801ca71 	.word	0x0801ca71

0801db04 <_raise_r>:
 801db04:	291f      	cmp	r1, #31
 801db06:	b538      	push	{r3, r4, r5, lr}
 801db08:	4604      	mov	r4, r0
 801db0a:	460d      	mov	r5, r1
 801db0c:	d904      	bls.n	801db18 <_raise_r+0x14>
 801db0e:	2316      	movs	r3, #22
 801db10:	6003      	str	r3, [r0, #0]
 801db12:	f04f 30ff 	mov.w	r0, #4294967295
 801db16:	bd38      	pop	{r3, r4, r5, pc}
 801db18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801db1a:	b112      	cbz	r2, 801db22 <_raise_r+0x1e>
 801db1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801db20:	b94b      	cbnz	r3, 801db36 <_raise_r+0x32>
 801db22:	4620      	mov	r0, r4
 801db24:	f000 f830 	bl	801db88 <_getpid_r>
 801db28:	462a      	mov	r2, r5
 801db2a:	4601      	mov	r1, r0
 801db2c:	4620      	mov	r0, r4
 801db2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db32:	f000 b817 	b.w	801db64 <_kill_r>
 801db36:	2b01      	cmp	r3, #1
 801db38:	d00a      	beq.n	801db50 <_raise_r+0x4c>
 801db3a:	1c59      	adds	r1, r3, #1
 801db3c:	d103      	bne.n	801db46 <_raise_r+0x42>
 801db3e:	2316      	movs	r3, #22
 801db40:	6003      	str	r3, [r0, #0]
 801db42:	2001      	movs	r0, #1
 801db44:	e7e7      	b.n	801db16 <_raise_r+0x12>
 801db46:	2400      	movs	r4, #0
 801db48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801db4c:	4628      	mov	r0, r5
 801db4e:	4798      	blx	r3
 801db50:	2000      	movs	r0, #0
 801db52:	e7e0      	b.n	801db16 <_raise_r+0x12>

0801db54 <raise>:
 801db54:	4b02      	ldr	r3, [pc, #8]	; (801db60 <raise+0xc>)
 801db56:	4601      	mov	r1, r0
 801db58:	6818      	ldr	r0, [r3, #0]
 801db5a:	f7ff bfd3 	b.w	801db04 <_raise_r>
 801db5e:	bf00      	nop
 801db60:	200000f4 	.word	0x200000f4

0801db64 <_kill_r>:
 801db64:	b538      	push	{r3, r4, r5, lr}
 801db66:	4d07      	ldr	r5, [pc, #28]	; (801db84 <_kill_r+0x20>)
 801db68:	2300      	movs	r3, #0
 801db6a:	4604      	mov	r4, r0
 801db6c:	4608      	mov	r0, r1
 801db6e:	4611      	mov	r1, r2
 801db70:	602b      	str	r3, [r5, #0]
 801db72:	f7e4 f8bf 	bl	8001cf4 <_kill>
 801db76:	1c43      	adds	r3, r0, #1
 801db78:	d102      	bne.n	801db80 <_kill_r+0x1c>
 801db7a:	682b      	ldr	r3, [r5, #0]
 801db7c:	b103      	cbz	r3, 801db80 <_kill_r+0x1c>
 801db7e:	6023      	str	r3, [r4, #0]
 801db80:	bd38      	pop	{r3, r4, r5, pc}
 801db82:	bf00      	nop
 801db84:	20013a38 	.word	0x20013a38

0801db88 <_getpid_r>:
 801db88:	f7e4 b8ac 	b.w	8001ce4 <_getpid>

0801db8c <_fstat_r>:
 801db8c:	b538      	push	{r3, r4, r5, lr}
 801db8e:	4d07      	ldr	r5, [pc, #28]	; (801dbac <_fstat_r+0x20>)
 801db90:	2300      	movs	r3, #0
 801db92:	4604      	mov	r4, r0
 801db94:	4608      	mov	r0, r1
 801db96:	4611      	mov	r1, r2
 801db98:	602b      	str	r3, [r5, #0]
 801db9a:	f7e4 f90c 	bl	8001db6 <_fstat>
 801db9e:	1c43      	adds	r3, r0, #1
 801dba0:	d102      	bne.n	801dba8 <_fstat_r+0x1c>
 801dba2:	682b      	ldr	r3, [r5, #0]
 801dba4:	b103      	cbz	r3, 801dba8 <_fstat_r+0x1c>
 801dba6:	6023      	str	r3, [r4, #0]
 801dba8:	bd38      	pop	{r3, r4, r5, pc}
 801dbaa:	bf00      	nop
 801dbac:	20013a38 	.word	0x20013a38

0801dbb0 <_isatty_r>:
 801dbb0:	b538      	push	{r3, r4, r5, lr}
 801dbb2:	4d06      	ldr	r5, [pc, #24]	; (801dbcc <_isatty_r+0x1c>)
 801dbb4:	2300      	movs	r3, #0
 801dbb6:	4604      	mov	r4, r0
 801dbb8:	4608      	mov	r0, r1
 801dbba:	602b      	str	r3, [r5, #0]
 801dbbc:	f7e4 f90b 	bl	8001dd6 <_isatty>
 801dbc0:	1c43      	adds	r3, r0, #1
 801dbc2:	d102      	bne.n	801dbca <_isatty_r+0x1a>
 801dbc4:	682b      	ldr	r3, [r5, #0]
 801dbc6:	b103      	cbz	r3, 801dbca <_isatty_r+0x1a>
 801dbc8:	6023      	str	r3, [r4, #0]
 801dbca:	bd38      	pop	{r3, r4, r5, pc}
 801dbcc:	20013a38 	.word	0x20013a38

0801dbd0 <log>:
 801dbd0:	b538      	push	{r3, r4, r5, lr}
 801dbd2:	ed2d 8b02 	vpush	{d8}
 801dbd6:	ec55 4b10 	vmov	r4, r5, d0
 801dbda:	f000 f841 	bl	801dc60 <__ieee754_log>
 801dbde:	4b1e      	ldr	r3, [pc, #120]	; (801dc58 <log+0x88>)
 801dbe0:	eeb0 8a40 	vmov.f32	s16, s0
 801dbe4:	eef0 8a60 	vmov.f32	s17, s1
 801dbe8:	f993 3000 	ldrsb.w	r3, [r3]
 801dbec:	3301      	adds	r3, #1
 801dbee:	d01a      	beq.n	801dc26 <log+0x56>
 801dbf0:	4622      	mov	r2, r4
 801dbf2:	462b      	mov	r3, r5
 801dbf4:	4620      	mov	r0, r4
 801dbf6:	4629      	mov	r1, r5
 801dbf8:	f7e2 ff90 	bl	8000b1c <__aeabi_dcmpun>
 801dbfc:	b998      	cbnz	r0, 801dc26 <log+0x56>
 801dbfe:	2200      	movs	r2, #0
 801dc00:	2300      	movs	r3, #0
 801dc02:	4620      	mov	r0, r4
 801dc04:	4629      	mov	r1, r5
 801dc06:	f7e2 ff7f 	bl	8000b08 <__aeabi_dcmpgt>
 801dc0a:	b960      	cbnz	r0, 801dc26 <log+0x56>
 801dc0c:	2200      	movs	r2, #0
 801dc0e:	2300      	movs	r3, #0
 801dc10:	4620      	mov	r0, r4
 801dc12:	4629      	mov	r1, r5
 801dc14:	f7e2 ff50 	bl	8000ab8 <__aeabi_dcmpeq>
 801dc18:	b160      	cbz	r0, 801dc34 <log+0x64>
 801dc1a:	f7ff f9f7 	bl	801d00c <__errno>
 801dc1e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801dc50 <log+0x80>
 801dc22:	2322      	movs	r3, #34	; 0x22
 801dc24:	6003      	str	r3, [r0, #0]
 801dc26:	eeb0 0a48 	vmov.f32	s0, s16
 801dc2a:	eef0 0a68 	vmov.f32	s1, s17
 801dc2e:	ecbd 8b02 	vpop	{d8}
 801dc32:	bd38      	pop	{r3, r4, r5, pc}
 801dc34:	f7ff f9ea 	bl	801d00c <__errno>
 801dc38:	ecbd 8b02 	vpop	{d8}
 801dc3c:	2321      	movs	r3, #33	; 0x21
 801dc3e:	6003      	str	r3, [r0, #0]
 801dc40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc44:	4805      	ldr	r0, [pc, #20]	; (801dc5c <log+0x8c>)
 801dc46:	f000 b9c7 	b.w	801dfd8 <nan>
 801dc4a:	bf00      	nop
 801dc4c:	f3af 8000 	nop.w
 801dc50:	00000000 	.word	0x00000000
 801dc54:	fff00000 	.word	0xfff00000
 801dc58:	20000158 	.word	0x20000158
 801dc5c:	08021715 	.word	0x08021715

0801dc60 <__ieee754_log>:
 801dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc64:	ec51 0b10 	vmov	r0, r1, d0
 801dc68:	ed2d 8b04 	vpush	{d8-d9}
 801dc6c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801dc70:	b083      	sub	sp, #12
 801dc72:	460d      	mov	r5, r1
 801dc74:	da29      	bge.n	801dcca <__ieee754_log+0x6a>
 801dc76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801dc7a:	4303      	orrs	r3, r0
 801dc7c:	ee10 2a10 	vmov	r2, s0
 801dc80:	d10c      	bne.n	801dc9c <__ieee754_log+0x3c>
 801dc82:	49cf      	ldr	r1, [pc, #828]	; (801dfc0 <__ieee754_log+0x360>)
 801dc84:	2200      	movs	r2, #0
 801dc86:	2300      	movs	r3, #0
 801dc88:	2000      	movs	r0, #0
 801dc8a:	f7e2 fdd7 	bl	800083c <__aeabi_ddiv>
 801dc8e:	ec41 0b10 	vmov	d0, r0, r1
 801dc92:	b003      	add	sp, #12
 801dc94:	ecbd 8b04 	vpop	{d8-d9}
 801dc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc9c:	2900      	cmp	r1, #0
 801dc9e:	da05      	bge.n	801dcac <__ieee754_log+0x4c>
 801dca0:	460b      	mov	r3, r1
 801dca2:	f7e2 fae9 	bl	8000278 <__aeabi_dsub>
 801dca6:	2200      	movs	r2, #0
 801dca8:	2300      	movs	r3, #0
 801dcaa:	e7ee      	b.n	801dc8a <__ieee754_log+0x2a>
 801dcac:	4bc5      	ldr	r3, [pc, #788]	; (801dfc4 <__ieee754_log+0x364>)
 801dcae:	2200      	movs	r2, #0
 801dcb0:	f7e2 fc9a 	bl	80005e8 <__aeabi_dmul>
 801dcb4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801dcb8:	460d      	mov	r5, r1
 801dcba:	4ac3      	ldr	r2, [pc, #780]	; (801dfc8 <__ieee754_log+0x368>)
 801dcbc:	4295      	cmp	r5, r2
 801dcbe:	dd06      	ble.n	801dcce <__ieee754_log+0x6e>
 801dcc0:	4602      	mov	r2, r0
 801dcc2:	460b      	mov	r3, r1
 801dcc4:	f7e2 fada 	bl	800027c <__adddf3>
 801dcc8:	e7e1      	b.n	801dc8e <__ieee754_log+0x2e>
 801dcca:	2300      	movs	r3, #0
 801dccc:	e7f5      	b.n	801dcba <__ieee754_log+0x5a>
 801dcce:	152c      	asrs	r4, r5, #20
 801dcd0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801dcd4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801dcd8:	441c      	add	r4, r3
 801dcda:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801dcde:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801dce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801dce6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801dcea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801dcee:	ea42 0105 	orr.w	r1, r2, r5
 801dcf2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801dcf6:	2200      	movs	r2, #0
 801dcf8:	4bb4      	ldr	r3, [pc, #720]	; (801dfcc <__ieee754_log+0x36c>)
 801dcfa:	f7e2 fabd 	bl	8000278 <__aeabi_dsub>
 801dcfe:	1cab      	adds	r3, r5, #2
 801dd00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dd04:	2b02      	cmp	r3, #2
 801dd06:	4682      	mov	sl, r0
 801dd08:	468b      	mov	fp, r1
 801dd0a:	f04f 0200 	mov.w	r2, #0
 801dd0e:	dc53      	bgt.n	801ddb8 <__ieee754_log+0x158>
 801dd10:	2300      	movs	r3, #0
 801dd12:	f7e2 fed1 	bl	8000ab8 <__aeabi_dcmpeq>
 801dd16:	b1d0      	cbz	r0, 801dd4e <__ieee754_log+0xee>
 801dd18:	2c00      	cmp	r4, #0
 801dd1a:	f000 8122 	beq.w	801df62 <__ieee754_log+0x302>
 801dd1e:	4620      	mov	r0, r4
 801dd20:	f7e2 fbf8 	bl	8000514 <__aeabi_i2d>
 801dd24:	a390      	add	r3, pc, #576	; (adr r3, 801df68 <__ieee754_log+0x308>)
 801dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd2a:	4606      	mov	r6, r0
 801dd2c:	460f      	mov	r7, r1
 801dd2e:	f7e2 fc5b 	bl	80005e8 <__aeabi_dmul>
 801dd32:	a38f      	add	r3, pc, #572	; (adr r3, 801df70 <__ieee754_log+0x310>)
 801dd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd38:	4604      	mov	r4, r0
 801dd3a:	460d      	mov	r5, r1
 801dd3c:	4630      	mov	r0, r6
 801dd3e:	4639      	mov	r1, r7
 801dd40:	f7e2 fc52 	bl	80005e8 <__aeabi_dmul>
 801dd44:	4602      	mov	r2, r0
 801dd46:	460b      	mov	r3, r1
 801dd48:	4620      	mov	r0, r4
 801dd4a:	4629      	mov	r1, r5
 801dd4c:	e7ba      	b.n	801dcc4 <__ieee754_log+0x64>
 801dd4e:	a38a      	add	r3, pc, #552	; (adr r3, 801df78 <__ieee754_log+0x318>)
 801dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd54:	4650      	mov	r0, sl
 801dd56:	4659      	mov	r1, fp
 801dd58:	f7e2 fc46 	bl	80005e8 <__aeabi_dmul>
 801dd5c:	4602      	mov	r2, r0
 801dd5e:	460b      	mov	r3, r1
 801dd60:	2000      	movs	r0, #0
 801dd62:	499b      	ldr	r1, [pc, #620]	; (801dfd0 <__ieee754_log+0x370>)
 801dd64:	f7e2 fa88 	bl	8000278 <__aeabi_dsub>
 801dd68:	4652      	mov	r2, sl
 801dd6a:	4606      	mov	r6, r0
 801dd6c:	460f      	mov	r7, r1
 801dd6e:	465b      	mov	r3, fp
 801dd70:	4650      	mov	r0, sl
 801dd72:	4659      	mov	r1, fp
 801dd74:	f7e2 fc38 	bl	80005e8 <__aeabi_dmul>
 801dd78:	4602      	mov	r2, r0
 801dd7a:	460b      	mov	r3, r1
 801dd7c:	4630      	mov	r0, r6
 801dd7e:	4639      	mov	r1, r7
 801dd80:	f7e2 fc32 	bl	80005e8 <__aeabi_dmul>
 801dd84:	4606      	mov	r6, r0
 801dd86:	460f      	mov	r7, r1
 801dd88:	b914      	cbnz	r4, 801dd90 <__ieee754_log+0x130>
 801dd8a:	4632      	mov	r2, r6
 801dd8c:	463b      	mov	r3, r7
 801dd8e:	e0a2      	b.n	801ded6 <__ieee754_log+0x276>
 801dd90:	4620      	mov	r0, r4
 801dd92:	f7e2 fbbf 	bl	8000514 <__aeabi_i2d>
 801dd96:	a374      	add	r3, pc, #464	; (adr r3, 801df68 <__ieee754_log+0x308>)
 801dd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd9c:	4680      	mov	r8, r0
 801dd9e:	4689      	mov	r9, r1
 801dda0:	f7e2 fc22 	bl	80005e8 <__aeabi_dmul>
 801dda4:	a372      	add	r3, pc, #456	; (adr r3, 801df70 <__ieee754_log+0x310>)
 801dda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddaa:	4604      	mov	r4, r0
 801ddac:	460d      	mov	r5, r1
 801ddae:	4640      	mov	r0, r8
 801ddb0:	4649      	mov	r1, r9
 801ddb2:	f7e2 fc19 	bl	80005e8 <__aeabi_dmul>
 801ddb6:	e0a7      	b.n	801df08 <__ieee754_log+0x2a8>
 801ddb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ddbc:	f7e2 fa5e 	bl	800027c <__adddf3>
 801ddc0:	4602      	mov	r2, r0
 801ddc2:	460b      	mov	r3, r1
 801ddc4:	4650      	mov	r0, sl
 801ddc6:	4659      	mov	r1, fp
 801ddc8:	f7e2 fd38 	bl	800083c <__aeabi_ddiv>
 801ddcc:	ec41 0b18 	vmov	d8, r0, r1
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	f7e2 fb9f 	bl	8000514 <__aeabi_i2d>
 801ddd6:	ec53 2b18 	vmov	r2, r3, d8
 801ddda:	ec41 0b19 	vmov	d9, r0, r1
 801ddde:	ec51 0b18 	vmov	r0, r1, d8
 801dde2:	f7e2 fc01 	bl	80005e8 <__aeabi_dmul>
 801dde6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801ddea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801ddee:	9301      	str	r3, [sp, #4]
 801ddf0:	4602      	mov	r2, r0
 801ddf2:	460b      	mov	r3, r1
 801ddf4:	4680      	mov	r8, r0
 801ddf6:	4689      	mov	r9, r1
 801ddf8:	f7e2 fbf6 	bl	80005e8 <__aeabi_dmul>
 801ddfc:	a360      	add	r3, pc, #384	; (adr r3, 801df80 <__ieee754_log+0x320>)
 801ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de02:	4606      	mov	r6, r0
 801de04:	460f      	mov	r7, r1
 801de06:	f7e2 fbef 	bl	80005e8 <__aeabi_dmul>
 801de0a:	a35f      	add	r3, pc, #380	; (adr r3, 801df88 <__ieee754_log+0x328>)
 801de0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de10:	f7e2 fa34 	bl	800027c <__adddf3>
 801de14:	4632      	mov	r2, r6
 801de16:	463b      	mov	r3, r7
 801de18:	f7e2 fbe6 	bl	80005e8 <__aeabi_dmul>
 801de1c:	a35c      	add	r3, pc, #368	; (adr r3, 801df90 <__ieee754_log+0x330>)
 801de1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de22:	f7e2 fa2b 	bl	800027c <__adddf3>
 801de26:	4632      	mov	r2, r6
 801de28:	463b      	mov	r3, r7
 801de2a:	f7e2 fbdd 	bl	80005e8 <__aeabi_dmul>
 801de2e:	a35a      	add	r3, pc, #360	; (adr r3, 801df98 <__ieee754_log+0x338>)
 801de30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de34:	f7e2 fa22 	bl	800027c <__adddf3>
 801de38:	4642      	mov	r2, r8
 801de3a:	464b      	mov	r3, r9
 801de3c:	f7e2 fbd4 	bl	80005e8 <__aeabi_dmul>
 801de40:	a357      	add	r3, pc, #348	; (adr r3, 801dfa0 <__ieee754_log+0x340>)
 801de42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de46:	4680      	mov	r8, r0
 801de48:	4689      	mov	r9, r1
 801de4a:	4630      	mov	r0, r6
 801de4c:	4639      	mov	r1, r7
 801de4e:	f7e2 fbcb 	bl	80005e8 <__aeabi_dmul>
 801de52:	a355      	add	r3, pc, #340	; (adr r3, 801dfa8 <__ieee754_log+0x348>)
 801de54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de58:	f7e2 fa10 	bl	800027c <__adddf3>
 801de5c:	4632      	mov	r2, r6
 801de5e:	463b      	mov	r3, r7
 801de60:	f7e2 fbc2 	bl	80005e8 <__aeabi_dmul>
 801de64:	a352      	add	r3, pc, #328	; (adr r3, 801dfb0 <__ieee754_log+0x350>)
 801de66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de6a:	f7e2 fa07 	bl	800027c <__adddf3>
 801de6e:	4632      	mov	r2, r6
 801de70:	463b      	mov	r3, r7
 801de72:	f7e2 fbb9 	bl	80005e8 <__aeabi_dmul>
 801de76:	460b      	mov	r3, r1
 801de78:	4602      	mov	r2, r0
 801de7a:	4649      	mov	r1, r9
 801de7c:	4640      	mov	r0, r8
 801de7e:	f7e2 f9fd 	bl	800027c <__adddf3>
 801de82:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801de86:	9b01      	ldr	r3, [sp, #4]
 801de88:	3551      	adds	r5, #81	; 0x51
 801de8a:	431d      	orrs	r5, r3
 801de8c:	2d00      	cmp	r5, #0
 801de8e:	4680      	mov	r8, r0
 801de90:	4689      	mov	r9, r1
 801de92:	dd48      	ble.n	801df26 <__ieee754_log+0x2c6>
 801de94:	4b4e      	ldr	r3, [pc, #312]	; (801dfd0 <__ieee754_log+0x370>)
 801de96:	2200      	movs	r2, #0
 801de98:	4650      	mov	r0, sl
 801de9a:	4659      	mov	r1, fp
 801de9c:	f7e2 fba4 	bl	80005e8 <__aeabi_dmul>
 801dea0:	4652      	mov	r2, sl
 801dea2:	465b      	mov	r3, fp
 801dea4:	f7e2 fba0 	bl	80005e8 <__aeabi_dmul>
 801dea8:	4602      	mov	r2, r0
 801deaa:	460b      	mov	r3, r1
 801deac:	4606      	mov	r6, r0
 801deae:	460f      	mov	r7, r1
 801deb0:	4640      	mov	r0, r8
 801deb2:	4649      	mov	r1, r9
 801deb4:	f7e2 f9e2 	bl	800027c <__adddf3>
 801deb8:	ec53 2b18 	vmov	r2, r3, d8
 801debc:	f7e2 fb94 	bl	80005e8 <__aeabi_dmul>
 801dec0:	4680      	mov	r8, r0
 801dec2:	4689      	mov	r9, r1
 801dec4:	b964      	cbnz	r4, 801dee0 <__ieee754_log+0x280>
 801dec6:	4602      	mov	r2, r0
 801dec8:	460b      	mov	r3, r1
 801deca:	4630      	mov	r0, r6
 801decc:	4639      	mov	r1, r7
 801dece:	f7e2 f9d3 	bl	8000278 <__aeabi_dsub>
 801ded2:	4602      	mov	r2, r0
 801ded4:	460b      	mov	r3, r1
 801ded6:	4650      	mov	r0, sl
 801ded8:	4659      	mov	r1, fp
 801deda:	f7e2 f9cd 	bl	8000278 <__aeabi_dsub>
 801dede:	e6d6      	b.n	801dc8e <__ieee754_log+0x2e>
 801dee0:	a321      	add	r3, pc, #132	; (adr r3, 801df68 <__ieee754_log+0x308>)
 801dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dee6:	ec51 0b19 	vmov	r0, r1, d9
 801deea:	f7e2 fb7d 	bl	80005e8 <__aeabi_dmul>
 801deee:	a320      	add	r3, pc, #128	; (adr r3, 801df70 <__ieee754_log+0x310>)
 801def0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801def4:	4604      	mov	r4, r0
 801def6:	460d      	mov	r5, r1
 801def8:	ec51 0b19 	vmov	r0, r1, d9
 801defc:	f7e2 fb74 	bl	80005e8 <__aeabi_dmul>
 801df00:	4642      	mov	r2, r8
 801df02:	464b      	mov	r3, r9
 801df04:	f7e2 f9ba 	bl	800027c <__adddf3>
 801df08:	4602      	mov	r2, r0
 801df0a:	460b      	mov	r3, r1
 801df0c:	4630      	mov	r0, r6
 801df0e:	4639      	mov	r1, r7
 801df10:	f7e2 f9b2 	bl	8000278 <__aeabi_dsub>
 801df14:	4652      	mov	r2, sl
 801df16:	465b      	mov	r3, fp
 801df18:	f7e2 f9ae 	bl	8000278 <__aeabi_dsub>
 801df1c:	4602      	mov	r2, r0
 801df1e:	460b      	mov	r3, r1
 801df20:	4620      	mov	r0, r4
 801df22:	4629      	mov	r1, r5
 801df24:	e7d9      	b.n	801deda <__ieee754_log+0x27a>
 801df26:	4602      	mov	r2, r0
 801df28:	460b      	mov	r3, r1
 801df2a:	4650      	mov	r0, sl
 801df2c:	4659      	mov	r1, fp
 801df2e:	f7e2 f9a3 	bl	8000278 <__aeabi_dsub>
 801df32:	ec53 2b18 	vmov	r2, r3, d8
 801df36:	f7e2 fb57 	bl	80005e8 <__aeabi_dmul>
 801df3a:	4606      	mov	r6, r0
 801df3c:	460f      	mov	r7, r1
 801df3e:	2c00      	cmp	r4, #0
 801df40:	f43f af23 	beq.w	801dd8a <__ieee754_log+0x12a>
 801df44:	a308      	add	r3, pc, #32	; (adr r3, 801df68 <__ieee754_log+0x308>)
 801df46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df4a:	ec51 0b19 	vmov	r0, r1, d9
 801df4e:	f7e2 fb4b 	bl	80005e8 <__aeabi_dmul>
 801df52:	a307      	add	r3, pc, #28	; (adr r3, 801df70 <__ieee754_log+0x310>)
 801df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df58:	4604      	mov	r4, r0
 801df5a:	460d      	mov	r5, r1
 801df5c:	ec51 0b19 	vmov	r0, r1, d9
 801df60:	e727      	b.n	801ddb2 <__ieee754_log+0x152>
 801df62:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801dfb8 <__ieee754_log+0x358>
 801df66:	e694      	b.n	801dc92 <__ieee754_log+0x32>
 801df68:	fee00000 	.word	0xfee00000
 801df6c:	3fe62e42 	.word	0x3fe62e42
 801df70:	35793c76 	.word	0x35793c76
 801df74:	3dea39ef 	.word	0x3dea39ef
 801df78:	55555555 	.word	0x55555555
 801df7c:	3fd55555 	.word	0x3fd55555
 801df80:	df3e5244 	.word	0xdf3e5244
 801df84:	3fc2f112 	.word	0x3fc2f112
 801df88:	96cb03de 	.word	0x96cb03de
 801df8c:	3fc74664 	.word	0x3fc74664
 801df90:	94229359 	.word	0x94229359
 801df94:	3fd24924 	.word	0x3fd24924
 801df98:	55555593 	.word	0x55555593
 801df9c:	3fe55555 	.word	0x3fe55555
 801dfa0:	d078c69f 	.word	0xd078c69f
 801dfa4:	3fc39a09 	.word	0x3fc39a09
 801dfa8:	1d8e78af 	.word	0x1d8e78af
 801dfac:	3fcc71c5 	.word	0x3fcc71c5
 801dfb0:	9997fa04 	.word	0x9997fa04
 801dfb4:	3fd99999 	.word	0x3fd99999
	...
 801dfc0:	c3500000 	.word	0xc3500000
 801dfc4:	43500000 	.word	0x43500000
 801dfc8:	7fefffff 	.word	0x7fefffff
 801dfcc:	3ff00000 	.word	0x3ff00000
 801dfd0:	3fe00000 	.word	0x3fe00000
 801dfd4:	00000000 	.word	0x00000000

0801dfd8 <nan>:
 801dfd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801dfe0 <nan+0x8>
 801dfdc:	4770      	bx	lr
 801dfde:	bf00      	nop
 801dfe0:	00000000 	.word	0x00000000
 801dfe4:	7ff80000 	.word	0x7ff80000

0801dfe8 <_init>:
 801dfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfea:	bf00      	nop
 801dfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dfee:	bc08      	pop	{r3}
 801dff0:	469e      	mov	lr, r3
 801dff2:	4770      	bx	lr

0801dff4 <_fini>:
 801dff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dff6:	bf00      	nop
 801dff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dffa:	bc08      	pop	{r3}
 801dffc:	469e      	mov	lr, r3
 801dffe:	4770      	bx	lr
